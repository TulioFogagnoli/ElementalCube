
ElementalCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaf4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00042aa0  0800ac84  0800ac84  0000bc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804d724  0804d724  0004f0f8  2**0
                  CONTENTS
  4 .ARM          00000008  0804d724  0804d724  0004e724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804d72c  0804d72c  0004f0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804d72c  0804d72c  0004e72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804d730  0804d730  0004e730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0804d734  0004f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004f0f8  2**0
                  CONTENTS
 10 .bss          0000425c  200000f8  200000f8  0004f0f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004354  20004354  0004f0f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004f0f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001779c  00000000  00000000  0004f128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004163  00000000  00000000  000668c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0006aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000107f  00000000  00000000  0006bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dcc  00000000  00000000  0006d037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b4a8  00000000  00000000  00091e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3205  00000000  00000000  000ad2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001804b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006380  00000000  00000000  001804f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00186874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac6c 	.word	0x0800ac6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	0800ac6c 	.word	0x0800ac6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b988 	b.w	8000c74 <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9d08      	ldr	r5, [sp, #32]
 8000982:	468e      	mov	lr, r1
 8000984:	4604      	mov	r4, r0
 8000986:	4688      	mov	r8, r1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d14a      	bne.n	8000a22 <__udivmoddi4+0xa6>
 800098c:	428a      	cmp	r2, r1
 800098e:	4617      	mov	r7, r2
 8000990:	d962      	bls.n	8000a58 <__udivmoddi4+0xdc>
 8000992:	fab2 f682 	clz	r6, r2
 8000996:	b14e      	cbz	r6, 80009ac <__udivmoddi4+0x30>
 8000998:	f1c6 0320 	rsb	r3, r6, #32
 800099c:	fa01 f806 	lsl.w	r8, r1, r6
 80009a0:	fa20 f303 	lsr.w	r3, r0, r3
 80009a4:	40b7      	lsls	r7, r6
 80009a6:	ea43 0808 	orr.w	r8, r3, r8
 80009aa:	40b4      	lsls	r4, r6
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	fa1f fc87 	uxth.w	ip, r7
 80009b4:	fbb8 f1fe 	udiv	r1, r8, lr
 80009b8:	0c23      	lsrs	r3, r4, #16
 80009ba:	fb0e 8811 	mls	r8, lr, r1, r8
 80009be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009c2:	fb01 f20c 	mul.w	r2, r1, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0x62>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f101 30ff 	add.w	r0, r1, #4294967295
 80009d0:	f080 80ea 	bcs.w	8000ba8 <__udivmoddi4+0x22c>
 80009d4:	429a      	cmp	r2, r3
 80009d6:	f240 80e7 	bls.w	8000ba8 <__udivmoddi4+0x22c>
 80009da:	3902      	subs	r1, #2
 80009dc:	443b      	add	r3, r7
 80009de:	1a9a      	subs	r2, r3, r2
 80009e0:	b2a3      	uxth	r3, r4
 80009e2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009e6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009ee:	fb00 fc0c 	mul.w	ip, r0, ip
 80009f2:	459c      	cmp	ip, r3
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x8e>
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80009fc:	f080 80d6 	bcs.w	8000bac <__udivmoddi4+0x230>
 8000a00:	459c      	cmp	ip, r3
 8000a02:	f240 80d3 	bls.w	8000bac <__udivmoddi4+0x230>
 8000a06:	443b      	add	r3, r7
 8000a08:	3802      	subs	r0, #2
 8000a0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a0e:	eba3 030c 	sub.w	r3, r3, ip
 8000a12:	2100      	movs	r1, #0
 8000a14:	b11d      	cbz	r5, 8000a1e <__udivmoddi4+0xa2>
 8000a16:	40f3      	lsrs	r3, r6
 8000a18:	2200      	movs	r2, #0
 8000a1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d905      	bls.n	8000a32 <__udivmoddi4+0xb6>
 8000a26:	b10d      	cbz	r5, 8000a2c <__udivmoddi4+0xb0>
 8000a28:	e9c5 0100 	strd	r0, r1, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	e7f5      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000a32:	fab3 f183 	clz	r1, r3
 8000a36:	2900      	cmp	r1, #0
 8000a38:	d146      	bne.n	8000ac8 <__udivmoddi4+0x14c>
 8000a3a:	4573      	cmp	r3, lr
 8000a3c:	d302      	bcc.n	8000a44 <__udivmoddi4+0xc8>
 8000a3e:	4282      	cmp	r2, r0
 8000a40:	f200 8105 	bhi.w	8000c4e <__udivmoddi4+0x2d2>
 8000a44:	1a84      	subs	r4, r0, r2
 8000a46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	4690      	mov	r8, r2
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d0e5      	beq.n	8000a1e <__udivmoddi4+0xa2>
 8000a52:	e9c5 4800 	strd	r4, r8, [r5]
 8000a56:	e7e2      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	f000 8090 	beq.w	8000b7e <__udivmoddi4+0x202>
 8000a5e:	fab2 f682 	clz	r6, r2
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	f040 80a4 	bne.w	8000bb0 <__udivmoddi4+0x234>
 8000a68:	1a8a      	subs	r2, r1, r2
 8000a6a:	0c03      	lsrs	r3, r0, #16
 8000a6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a70:	b280      	uxth	r0, r0
 8000a72:	b2bc      	uxth	r4, r7
 8000a74:	2101      	movs	r1, #1
 8000a76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a82:	fb04 f20c 	mul.w	r2, r4, ip
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d907      	bls.n	8000a9a <__udivmoddi4+0x11e>
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x11c>
 8000a92:	429a      	cmp	r2, r3
 8000a94:	f200 80e0 	bhi.w	8000c58 <__udivmoddi4+0x2dc>
 8000a98:	46c4      	mov	ip, r8
 8000a9a:	1a9b      	subs	r3, r3, r2
 8000a9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000aa0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000aa4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000aa8:	fb02 f404 	mul.w	r4, r2, r4
 8000aac:	429c      	cmp	r4, r3
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0x144>
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0x142>
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	f200 80ca 	bhi.w	8000c52 <__udivmoddi4+0x2d6>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	1b1b      	subs	r3, r3, r4
 8000ac2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ac6:	e7a5      	b.n	8000a14 <__udivmoddi4+0x98>
 8000ac8:	f1c1 0620 	rsb	r6, r1, #32
 8000acc:	408b      	lsls	r3, r1
 8000ace:	fa22 f706 	lsr.w	r7, r2, r6
 8000ad2:	431f      	orrs	r7, r3
 8000ad4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ad8:	fa20 f306 	lsr.w	r3, r0, r6
 8000adc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ae0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ae4:	4323      	orrs	r3, r4
 8000ae6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aea:	fa1f fc87 	uxth.w	ip, r7
 8000aee:	fbbe f0f9 	udiv	r0, lr, r9
 8000af2:	0c1c      	lsrs	r4, r3, #16
 8000af4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000af8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000afc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	fa02 f201 	lsl.w	r2, r2, r1
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x1a0>
 8000b08:	193c      	adds	r4, r7, r4
 8000b0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b0e:	f080 809c 	bcs.w	8000c4a <__udivmoddi4+0x2ce>
 8000b12:	45a6      	cmp	lr, r4
 8000b14:	f240 8099 	bls.w	8000c4a <__udivmoddi4+0x2ce>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	443c      	add	r4, r7
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	fa1f fe83 	uxth.w	lr, r3
 8000b24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b28:	fb09 4413 	mls	r4, r9, r3, r4
 8000b2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b34:	45a4      	cmp	ip, r4
 8000b36:	d908      	bls.n	8000b4a <__udivmoddi4+0x1ce>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b3e:	f080 8082 	bcs.w	8000c46 <__udivmoddi4+0x2ca>
 8000b42:	45a4      	cmp	ip, r4
 8000b44:	d97f      	bls.n	8000c46 <__udivmoddi4+0x2ca>
 8000b46:	3b02      	subs	r3, #2
 8000b48:	443c      	add	r4, r7
 8000b4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b56:	4564      	cmp	r4, ip
 8000b58:	4673      	mov	r3, lr
 8000b5a:	46e1      	mov	r9, ip
 8000b5c:	d362      	bcc.n	8000c24 <__udivmoddi4+0x2a8>
 8000b5e:	d05f      	beq.n	8000c20 <__udivmoddi4+0x2a4>
 8000b60:	b15d      	cbz	r5, 8000b7a <__udivmoddi4+0x1fe>
 8000b62:	ebb8 0203 	subs.w	r2, r8, r3
 8000b66:	eb64 0409 	sbc.w	r4, r4, r9
 8000b6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000b72:	431e      	orrs	r6, r3
 8000b74:	40cc      	lsrs	r4, r1
 8000b76:	e9c5 6400 	strd	r6, r4, [r5]
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	e74f      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000b7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b82:	0c01      	lsrs	r1, r0, #16
 8000b84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b88:	b280      	uxth	r0, r0
 8000b8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4638      	mov	r0, r7
 8000b92:	463c      	mov	r4, r7
 8000b94:	46b8      	mov	r8, r7
 8000b96:	46be      	mov	lr, r7
 8000b98:	2620      	movs	r6, #32
 8000b9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ba2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ba6:	e766      	b.n	8000a76 <__udivmoddi4+0xfa>
 8000ba8:	4601      	mov	r1, r0
 8000baa:	e718      	b.n	80009de <__udivmoddi4+0x62>
 8000bac:	4610      	mov	r0, r2
 8000bae:	e72c      	b.n	8000a0a <__udivmoddi4+0x8e>
 8000bb0:	f1c6 0220 	rsb	r2, r6, #32
 8000bb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000bb8:	40b7      	lsls	r7, r6
 8000bba:	40b1      	lsls	r1, r6
 8000bbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000bca:	b2bc      	uxth	r4, r7
 8000bcc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000bd0:	0c11      	lsrs	r1, r2, #16
 8000bd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd6:	fb08 f904 	mul.w	r9, r8, r4
 8000bda:	40b0      	lsls	r0, r6
 8000bdc:	4589      	cmp	r9, r1
 8000bde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000be2:	b280      	uxth	r0, r0
 8000be4:	d93e      	bls.n	8000c64 <__udivmoddi4+0x2e8>
 8000be6:	1879      	adds	r1, r7, r1
 8000be8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000bec:	d201      	bcs.n	8000bf2 <__udivmoddi4+0x276>
 8000bee:	4589      	cmp	r9, r1
 8000bf0:	d81f      	bhi.n	8000c32 <__udivmoddi4+0x2b6>
 8000bf2:	eba1 0109 	sub.w	r1, r1, r9
 8000bf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bfa:	fb09 f804 	mul.w	r8, r9, r4
 8000bfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c02:	b292      	uxth	r2, r2
 8000c04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c08:	4542      	cmp	r2, r8
 8000c0a:	d229      	bcs.n	8000c60 <__udivmoddi4+0x2e4>
 8000c0c:	18ba      	adds	r2, r7, r2
 8000c0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c12:	d2c4      	bcs.n	8000b9e <__udivmoddi4+0x222>
 8000c14:	4542      	cmp	r2, r8
 8000c16:	d2c2      	bcs.n	8000b9e <__udivmoddi4+0x222>
 8000c18:	f1a9 0102 	sub.w	r1, r9, #2
 8000c1c:	443a      	add	r2, r7
 8000c1e:	e7be      	b.n	8000b9e <__udivmoddi4+0x222>
 8000c20:	45f0      	cmp	r8, lr
 8000c22:	d29d      	bcs.n	8000b60 <__udivmoddi4+0x1e4>
 8000c24:	ebbe 0302 	subs.w	r3, lr, r2
 8000c28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c2c:	3801      	subs	r0, #1
 8000c2e:	46e1      	mov	r9, ip
 8000c30:	e796      	b.n	8000b60 <__udivmoddi4+0x1e4>
 8000c32:	eba7 0909 	sub.w	r9, r7, r9
 8000c36:	4449      	add	r1, r9
 8000c38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c40:	fb09 f804 	mul.w	r8, r9, r4
 8000c44:	e7db      	b.n	8000bfe <__udivmoddi4+0x282>
 8000c46:	4673      	mov	r3, lr
 8000c48:	e77f      	b.n	8000b4a <__udivmoddi4+0x1ce>
 8000c4a:	4650      	mov	r0, sl
 8000c4c:	e766      	b.n	8000b1c <__udivmoddi4+0x1a0>
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e6fd      	b.n	8000a4e <__udivmoddi4+0xd2>
 8000c52:	443b      	add	r3, r7
 8000c54:	3a02      	subs	r2, #2
 8000c56:	e733      	b.n	8000ac0 <__udivmoddi4+0x144>
 8000c58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c5c:	443b      	add	r3, r7
 8000c5e:	e71c      	b.n	8000a9a <__udivmoddi4+0x11e>
 8000c60:	4649      	mov	r1, r9
 8000c62:	e79c      	b.n	8000b9e <__udivmoddi4+0x222>
 8000c64:	eba1 0109 	sub.w	r1, r1, r9
 8000c68:	46c4      	mov	ip, r8
 8000c6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c6e:	fb09 f804 	mul.w	r8, r9, r4
 8000c72:	e7c4      	b.n	8000bfe <__udivmoddi4+0x282>

08000c74 <__aeabi_idiv0>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <ILI9488_Select>:
/* vim: set ai et ts:4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9488.h"

// Funções estáticas (privadas para este arquivo)
static void ILI9488_Select() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <ILI9488_Select+0x14>)
 8000c82:	f002 ffbd 	bl	8003c00 <HAL_GPIO_WritePin>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40020000 	.word	0x40020000

08000c90 <ILI9488_Unselect>:

void ILI9488_Unselect() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2110      	movs	r1, #16
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <ILI9488_Unselect+0x14>)
 8000c9a:	f002 ffb1 	bl	8003c00 <HAL_GPIO_WritePin>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <ILI9488_Reset>:

static void ILI9488_Reset() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <ILI9488_Reset+0x28>)
 8000cb2:	f002 ffa5 	bl	8003c00 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000cb6:	2032      	movs	r0, #50	@ 0x32
 8000cb8:	f002 fa92 	bl	80031e0 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4803      	ldr	r0, [pc, #12]	@ (8000cd0 <ILI9488_Reset+0x28>)
 8000cc2:	f002 ff9d 	bl	8003c00 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8000cc6:	2078      	movs	r0, #120	@ 0x78
 8000cc8:	f002 fa8a 	bl	80031e0 <HAL_Delay>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <ILI9488_WriteCommand>:

static void ILI9488_WriteCommand(uint8_t cmd) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <ILI9488_WriteCommand+0x2c>)
 8000ce4:	f002 ff8c 	bl	8003c00 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ce8:	1df9      	adds	r1, r7, #7
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <ILI9488_WriteCommand+0x30>)
 8000cf2:	f004 ff6c 	bl	8005bce <HAL_SPI_Transmit>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40020400 	.word	0x40020400
 8000d04:	200003bc 	.word	0x200003bc

08000d08 <ILI9488_WriteData>:

static void ILI9488_WriteData(uint8_t* buff, size_t buff_size) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2102      	movs	r1, #2
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <ILI9488_WriteData+0x2c>)
 8000d18:	f002 ff72 	bl	8003c00 <HAL_GPIO_WritePin>
    // Não otimizar para chunks pequenos como 1 ou 3 bytes
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <ILI9488_WriteData+0x30>)
 8000d28:	f004 ff51 	bl	8005bce <HAL_SPI_Transmit>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40020400 	.word	0x40020400
 8000d38:	200003bc 	.word	0x200003bc

08000d3c <ILI9488_WriteSmallData>:

static void ILI9488_WriteSmallData(uint8_t data) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <ILI9488_WriteSmallData+0x2c>)
 8000d4c:	f002 ff58 	bl	8003c00 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000d50:	1df9      	adds	r1, r7, #7
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	2201      	movs	r2, #1
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <ILI9488_WriteSmallData+0x30>)
 8000d5a:	f004 ff38 	bl	8005bce <HAL_SPI_Transmit>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	200003bc 	.word	0x200003bc

08000d70 <ILI9488_SetAddressWindow>:


static void ILI9488_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4604      	mov	r4, r0
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4623      	mov	r3, r4
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	4603      	mov	r3, r0
 8000d84:	80bb      	strh	r3, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	807b      	strh	r3, [r7, #2]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	803b      	strh	r3, [r7, #0]
    // Column Address Set
    ILI9488_WriteCommand(0x2A);
 8000d8e:	202a      	movs	r0, #42	@ 0x2a
 8000d90:	f7ff ffa0 	bl	8000cd4 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	0a1b      	lsrs	r3, r3, #8
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	733b      	strb	r3, [r7, #12]
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	737b      	strb	r3, [r7, #13]
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	73bb      	strb	r3, [r7, #14]
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	73fb      	strb	r3, [r7, #15]
        ILI9488_WriteData(data, sizeof(data));
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2104      	movs	r1, #4
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffa4 	bl	8000d08 <ILI9488_WriteData>
    }
    // Page Address Set
    ILI9488_WriteCommand(0x2B);
 8000dc0:	202b      	movs	r0, #43	@ 0x2b
 8000dc2:	f7ff ff87 	bl	8000cd4 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	723b      	strb	r3, [r7, #8]
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	727b      	strb	r3, [r7, #9]
 8000dd6:	883b      	ldrh	r3, [r7, #0]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	72bb      	strb	r3, [r7, #10]
 8000de0:	883b      	ldrh	r3, [r7, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	72fb      	strb	r3, [r7, #11]
        ILI9488_WriteData(data, sizeof(data));
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2104      	movs	r1, #4
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff8b 	bl	8000d08 <ILI9488_WriteData>
    }
    // Memory Write
    ILI9488_WriteCommand(0x2C);
 8000df2:	202c      	movs	r0, #44	@ 0x2c
 8000df4:	f7ff ff6e 	bl	8000cd4 <ILI9488_WriteCommand>
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd90      	pop	{r4, r7, pc}

08000e00 <ILI9488_Init>:

void ILI9488_Init() {
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b095      	sub	sp, #84	@ 0x54
 8000e04:	af00      	add	r7, sp, #0
    ILI9488_Select();
 8000e06:	f7ff ff37 	bl	8000c78 <ILI9488_Select>
    ILI9488_Reset();
 8000e0a:	f7ff ff4d 	bl	8000ca8 <ILI9488_Reset>

    ILI9488_WriteCommand(0xE0); // Positive Gamma Control
 8000e0e:	20e0      	movs	r0, #224	@ 0xe0
 8000e10:	f7ff ff60 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x03, 0x09, 0x08, 0x16, 0x0A, 0x3F, 0x78, 0x4C, 0x09, 0x0A, 0x08, 0x16, 0x1A, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 8000e14:	4b5b      	ldr	r3, [pc, #364]	@ (8000f84 <ILI9488_Init+0x184>)
 8000e16:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000e1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e1c:	c407      	stmia	r4!, {r0, r1, r2}
 8000e1e:	8023      	strh	r3, [r4, #0]
 8000e20:	3402      	adds	r4, #2
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	7023      	strb	r3, [r4, #0]
 8000e26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff6b 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE1); // Negative Gamma Control
 8000e32:	20e1      	movs	r0, #225	@ 0xe1
 8000e34:	f7ff ff4e 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x16, 0x19, 0x03, 0x0F, 0x05, 0x32, 0x45, 0x46, 0x04, 0x0E, 0x0D, 0x35, 0x37, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 8000e38:	4b53      	ldr	r3, [pc, #332]	@ (8000f88 <ILI9488_Init+0x188>)
 8000e3a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e40:	c407      	stmia	r4!, {r0, r1, r2}
 8000e42:	8023      	strh	r3, [r4, #0]
 8000e44:	3402      	adds	r4, #2
 8000e46:	0c1b      	lsrs	r3, r3, #16
 8000e48:	7023      	strb	r3, [r4, #0]
 8000e4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e4e:	210f      	movs	r1, #15
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff59 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC0); // Power Control 1
 8000e56:	20c0      	movs	r0, #192	@ 0xc0
 8000e58:	f7ff ff3c 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x17, 0x15}; ILI9488_WriteData(data, sizeof(data)); }
 8000e5c:	f241 5317 	movw	r3, #5399	@ 0x1517
 8000e60:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e66:	2102      	movs	r1, #2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff4d 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC1); // Power Control 2
 8000e6e:	20c1      	movs	r0, #193	@ 0xc1
 8000e70:	f7ff ff30 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x41}; ILI9488_WriteData(data, sizeof(data)); }
 8000e74:	2341      	movs	r3, #65	@ 0x41
 8000e76:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff41 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC5); // VCOM Control
 8000e86:	20c5      	movs	r0, #197	@ 0xc5
 8000e88:	f7ff ff24 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x12, 0x80}; ILI9488_WriteData(data, sizeof(data)); }
 8000e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f8c <ILI9488_Init+0x18c>)
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	4611      	mov	r1, r2
 8000e96:	8019      	strh	r1, [r3, #0]
 8000e98:	3302      	adds	r3, #2
 8000e9a:	0c12      	lsrs	r2, r2, #16
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff2f 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0x36); // Memory Access Control
 8000eaa:	2036      	movs	r0, #54	@ 0x36
 8000eac:	f7ff ff12 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {ILI9488_ROTATION}; ILI9488_WriteData(data, sizeof(data)); }
 8000eb0:	2328      	movs	r3, #40	@ 0x28
 8000eb2:	f887 3020 	strb.w	r3, [r7, #32]
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff23 	bl	8000d08 <ILI9488_WriteData>
    
    // ============ MUDANÇA IMPORTANTE ANTERIOR ============
    ILI9488_WriteCommand(0x3A); // Interface Pixel Format
 8000ec2:	203a      	movs	r0, #58	@ 0x3a
 8000ec4:	f7ff ff06 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x66}; ILI9488_WriteSmallData(data[0]); } // 0x66 para 18 bits/pixel
 8000ec8:	2366      	movs	r3, #102	@ 0x66
 8000eca:	773b      	strb	r3, [r7, #28]
 8000ecc:	7f3b      	ldrb	r3, [r7, #28]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff34 	bl	8000d3c <ILI9488_WriteSmallData>

    ILI9488_WriteCommand(0xB0); // Interface Mode Control
 8000ed4:	20b0      	movs	r0, #176	@ 0xb0
 8000ed6:	f7ff fefd 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 8000eda:	2300      	movs	r3, #0
 8000edc:	763b      	strb	r3, [r7, #24]
 8000ede:	f107 0318 	add.w	r3, r7, #24
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff0f 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB1); // Frame Rate Control
 8000eea:	20b1      	movs	r0, #177	@ 0xb1
 8000eec:	f7ff fef2 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xB0, 0x11}; ILI9488_WriteData(data, sizeof(data)); }
 8000ef0:	f241 13b0 	movw	r3, #4528	@ 0x11b0
 8000ef4:	82bb      	strh	r3, [r7, #20]
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2102      	movs	r1, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff03 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB4); // Display Inversion Control
 8000f02:	20b4      	movs	r0, #180	@ 0xb4
 8000f04:	f7ff fee6 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02}; ILI9488_WriteData(data, sizeof(data)); }
 8000f08:	2302      	movs	r3, #2
 8000f0a:	743b      	strb	r3, [r7, #16]
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2101      	movs	r1, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fef8 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB6); // Display Function Control
 8000f18:	20b6      	movs	r0, #182	@ 0xb6
 8000f1a:	f7ff fedb 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02, 0x02, 0x3B}; ILI9488_WriteData(data, sizeof(data)); }
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <ILI9488_Init+0x190>)
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	4611      	mov	r1, r2
 8000f28:	8019      	strh	r1, [r3, #0]
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	0c12      	lsrs	r2, r2, #16
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2103      	movs	r1, #3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fee6 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE9); // Set Image Function
 8000f3c:	20e9      	movs	r0, #233	@ 0xe9
 8000f3e:	f7ff fec9 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 8000f42:	2300      	movs	r3, #0
 8000f44:	723b      	strb	r3, [r7, #8]
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fedb 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xF7); // Adjust Control 3
 8000f52:	20f7      	movs	r0, #247	@ 0xf7
 8000f54:	f7ff febe 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xA9, 0x51, 0x2C, 0x82}; ILI9488_WriteData(data, sizeof(data)); }
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <ILI9488_Init+0x194>)
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fed1 	bl	8000d08 <ILI9488_WriteData>
    
    ILI9488_WriteCommand(0x11); // Sleep Out
 8000f66:	2011      	movs	r0, #17
 8000f68:	f7ff feb4 	bl	8000cd4 <ILI9488_WriteCommand>
    HAL_Delay(120);
 8000f6c:	2078      	movs	r0, #120	@ 0x78
 8000f6e:	f002 f937 	bl	80031e0 <HAL_Delay>
    ILI9488_WriteCommand(0x29); // Display ON
 8000f72:	2029      	movs	r0, #41	@ 0x29
 8000f74:	f7ff feae 	bl	8000cd4 <ILI9488_WriteCommand>
    ILI9488_Unselect();
 8000f78:	f7ff fe8a 	bl	8000c90 <ILI9488_Unselect>
}
 8000f7c:	bf00      	nop
 8000f7e:	3754      	adds	r7, #84	@ 0x54
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd90      	pop	{r4, r7, pc}
 8000f84:	0800ac84 	.word	0x0800ac84
 8000f88:	0800ac94 	.word	0x0800ac94
 8000f8c:	0800aca4 	.word	0x0800aca4
 8000f90:	0800aca8 	.word	0x0800aca8
 8000f94:	822c51a9 	.word	0x822c51a9

08000f98 <ILI9488_WriteChar>:
    
    ILI9488_Unselect();
}

// ============== NOVA FUNÇÃO DE ESCRITA DE CARACTERE (3 BYTES) ==============
static void ILI9488_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000f98:	b082      	sub	sp, #8
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b08a      	sub	sp, #40	@ 0x28
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	80bb      	strh	r3, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ILI9488_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000fae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	440b      	add	r3, r1
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	88f8      	ldrh	r0, [r7, #6]
 8000fd2:	f7ff fecd 	bl	8000d70 <ILI9488_SetAddressWindow>

    // Converte as cores de background e foreground para 3 bytes uma única vez
    uint8_t color_r = ((color >> 11) << 3);
 8000fd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000fd8:	0adb      	lsrs	r3, r3, #11
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	77fb      	strb	r3, [r7, #31]
    uint8_t color_g = ((color >> 5) & 0x3F) << 2;
 8000fe2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000fe4:	095b      	lsrs	r3, r3, #5
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	77bb      	strb	r3, [r7, #30]
    uint8_t color_b = (color & 0x1F) << 3;
 8000fee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	777b      	strb	r3, [r7, #29]

    uint8_t bgcolor_r = ((bgcolor >> 11) << 3);
 8000ff6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000ffa:	0adb      	lsrs	r3, r3, #11
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	773b      	strb	r3, [r7, #28]
    uint8_t bgcolor_g = ((bgcolor >> 5) & 0x3F) << 2;
 8001004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001008:	095b      	lsrs	r3, r3, #5
 800100a:	b29b      	uxth	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	76fb      	strb	r3, [r7, #27]
    uint8_t bgcolor_b = (bgcolor & 0x1F) << 3;
 8001012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001016:	b2db      	uxtb	r3, r3
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	76bb      	strb	r3, [r7, #26]
    
    for(i = 0; i < font.height; i++) {
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001020:	e03d      	b.n	800109e <ILI9488_WriteChar+0x106>
        b = font.data[(ch - 32) * font.height + i];
 8001022:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	3b20      	subs	r3, #32
 8001028:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800102c:	fb01 f303 	mul.w	r3, r1, r3
 8001030:	4619      	mov	r1, r3
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	440b      	add	r3, r1
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
 8001042:	e023      	b.n	800108c <ILI9488_WriteChar+0xf4>
            if((b << j) & 0x8000) {
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00c      	beq.n	800106e <ILI9488_WriteChar+0xd6>
                uint8_t pixel[] = {color_r, color_g, color_b};
 8001054:	7ffb      	ldrb	r3, [r7, #31]
 8001056:	743b      	strb	r3, [r7, #16]
 8001058:	7fbb      	ldrb	r3, [r7, #30]
 800105a:	747b      	strb	r3, [r7, #17]
 800105c:	7f7b      	ldrb	r3, [r7, #29]
 800105e:	74bb      	strb	r3, [r7, #18]
                ILI9488_WriteData(pixel, sizeof(pixel));
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2103      	movs	r1, #3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe4e 	bl	8000d08 <ILI9488_WriteData>
 800106c:	e00b      	b.n	8001086 <ILI9488_WriteChar+0xee>
            } else {
                uint8_t pixel[] = {bgcolor_r, bgcolor_g, bgcolor_b};
 800106e:	7f3b      	ldrb	r3, [r7, #28]
 8001070:	733b      	strb	r3, [r7, #12]
 8001072:	7efb      	ldrb	r3, [r7, #27]
 8001074:	737b      	strb	r3, [r7, #13]
 8001076:	7ebb      	ldrb	r3, [r7, #26]
 8001078:	73bb      	strb	r3, [r7, #14]
                ILI9488_WriteData(pixel, sizeof(pixel));
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2103      	movs	r1, #3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fe41 	bl	8000d08 <ILI9488_WriteData>
        for(j = 0; j < font.width; j++) {
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	3301      	adds	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001090:	461a      	mov	r2, r3
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	4293      	cmp	r3, r2
 8001096:	d3d5      	bcc.n	8001044 <ILI9488_WriteChar+0xac>
    for(i = 0; i < font.height; i++) {
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	3301      	adds	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
 800109e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80010a2:	461a      	mov	r2, r3
 80010a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d3bb      	bcc.n	8001022 <ILI9488_WriteChar+0x8a>
            }
        }
    }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b6:	b002      	add	sp, #8
 80010b8:	4770      	bx	lr
	...

080010bc <ILI9488_FillRectangle>:

// ============== NOVA FUNÇÃO DE PREENCHER RETÂNGULO (3 BYTES) ==============
void ILI9488_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	4603      	mov	r3, r0
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	807b      	strh	r3, [r7, #2]
 80010d6:	4613      	mov	r3, r2
 80010d8:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80010e0:	f080 8083 	bcs.w	80011ea <ILI9488_FillRectangle+0x12e>
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80010ea:	d27e      	bcs.n	80011ea <ILI9488_FillRectangle+0x12e>
    if((x + w) > ILI9488_WIDTH) w = ILI9488_WIDTH - x;
 80010ec:	88fa      	ldrh	r2, [r7, #6]
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	4413      	add	r3, r2
 80010f2:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80010f6:	dd03      	ble.n	8001100 <ILI9488_FillRectangle+0x44>
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 80010fe:	807b      	strh	r3, [r7, #2]
    if((y + h) > ILI9488_HEIGHT) h = ILI9488_HEIGHT - y;
 8001100:	88ba      	ldrh	r2, [r7, #4]
 8001102:	883b      	ldrh	r3, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800110a:	dd03      	ble.n	8001114 <ILI9488_FillRectangle+0x58>
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001112:	803b      	strh	r3, [r7, #0]

    ILI9488_Select();
 8001114:	f7ff fdb0 	bl	8000c78 <ILI9488_Select>
    ILI9488_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	4413      	add	r3, r2
 800111e:	b29b      	uxth	r3, r3
 8001120:	3b01      	subs	r3, #1
 8001122:	b29c      	uxth	r4, r3
 8001124:	88ba      	ldrh	r2, [r7, #4]
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	4413      	add	r3, r2
 800112a:	b29b      	uxth	r3, r3
 800112c:	3b01      	subs	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	88b9      	ldrh	r1, [r7, #4]
 8001132:	88f8      	ldrh	r0, [r7, #6]
 8001134:	4622      	mov	r2, r4
 8001136:	f7ff fe1b 	bl	8000d70 <ILI9488_SetAddressWindow>
    
    // Converte a cor para 3 bytes
    uint8_t r = (color >> 11) & 0x1F;
 800113a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800113c:	0adb      	lsrs	r3, r3, #11
 800113e:	b29b      	uxth	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	74fb      	strb	r3, [r7, #19]
    uint8_t g = (color >> 5) & 0x3F;
 8001148:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	b29b      	uxth	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001154:	74bb      	strb	r3, [r7, #18]
    uint8_t b = color & 0x1F;
 8001156:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	747b      	strb	r3, [r7, #17]

    r = (r << 3) | (r >> 2);
 8001160:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	b25a      	sxtb	r2, r3
 8001168:	7cfb      	ldrb	r3, [r7, #19]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	b25b      	sxtb	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	74fb      	strb	r3, [r7, #19]
    g = (g << 2) | (g >> 4);
 8001176:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	b25a      	sxtb	r2, r3
 800117e:	7cbb      	ldrb	r3, [r7, #18]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	74bb      	strb	r3, [r7, #18]
    b = (b << 3) | (b >> 2);
 800118c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	b25a      	sxtb	r2, r3
 8001194:	7c7b      	ldrb	r3, [r7, #17]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	b25b      	sxtb	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	747b      	strb	r3, [r7, #17]
    
    uint8_t data[] = {r, g, b};
 80011a2:	7cfb      	ldrb	r3, [r7, #19]
 80011a4:	733b      	strb	r3, [r7, #12]
 80011a6:	7cbb      	ldrb	r3, [r7, #18]
 80011a8:	737b      	strb	r3, [r7, #13]
 80011aa:	7c7b      	ldrb	r3, [r7, #17]
 80011ac:	73bb      	strb	r3, [r7, #14]
    
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2102      	movs	r1, #2
 80011b2:	4810      	ldr	r0, [pc, #64]	@ (80011f4 <ILI9488_FillRectangle+0x138>)
 80011b4:	f002 fd24 	bl	8003c00 <HAL_GPIO_WritePin>
    for(uint32_t i = 0; i < (h * w); i++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	e00a      	b.n	80011d4 <ILI9488_FillRectangle+0x118>
        HAL_SPI_Transmit(&ILI9488_SPI_PORT, data, 3, HAL_MAX_DELAY);
 80011be:	f107 010c 	add.w	r1, r7, #12
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	2203      	movs	r2, #3
 80011c8:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <ILI9488_FillRectangle+0x13c>)
 80011ca:	f004 fd00 	bl	8005bce <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < (h * w); i++) {
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	883b      	ldrh	r3, [r7, #0]
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d3ec      	bcc.n	80011be <ILI9488_FillRectangle+0x102>
    }

    ILI9488_Unselect();
 80011e4:	f7ff fd54 	bl	8000c90 <ILI9488_Unselect>
 80011e8:	e000      	b.n	80011ec <ILI9488_FillRectangle+0x130>
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 80011ea:	bf00      	nop
}
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020400 	.word	0x40020400
 80011f8:	200003bc 	.word	0x200003bc

080011fc <ILI9488_WriteString>:

// O restante das funções não precisa de alteração pois dependem das que foram corrigidas

void ILI9488_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011fc:	b082      	sub	sp, #8
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af04      	add	r7, sp, #16
 8001204:	603a      	str	r2, [r7, #0]
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	4603      	mov	r3, r0
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	460b      	mov	r3, r1
 800120e:	80bb      	strh	r3, [r7, #4]
    ILI9488_Select();
 8001210:	f7ff fd32 	bl	8000c78 <ILI9488_Select>
    while(*str) {
 8001214:	e02f      	b.n	8001276 <ILI9488_WriteString+0x7a>
        if(x + font.width >= ILI9488_WIDTH) {
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	7d3a      	ldrb	r2, [r7, #20]
 800121a:	4413      	add	r3, r2
 800121c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001220:	db14      	blt.n	800124c <ILI9488_WriteString+0x50>
            x = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001226:	7d7b      	ldrb	r3, [r7, #21]
 8001228:	461a      	mov	r2, r3
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9488_HEIGHT) break;
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	7d7a      	ldrb	r2, [r7, #21]
 8001234:	4413      	add	r3, r2
 8001236:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800123a:	da21      	bge.n	8001280 <ILI9488_WriteString+0x84>
            if(*str == ' ') {
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b20      	cmp	r3, #32
 8001242:	d103      	bne.n	800124c <ILI9488_WriteString+0x50>
                str++;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	603b      	str	r3, [r7, #0]
                continue;
 800124a:	e014      	b.n	8001276 <ILI9488_WriteString+0x7a>
            }
        }
        ILI9488_WriteChar(x, y, *str, font, color, bgcolor);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	88b9      	ldrh	r1, [r7, #4]
 8001252:	88f8      	ldrh	r0, [r7, #6]
 8001254:	8c3b      	ldrh	r3, [r7, #32]
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	8bbb      	ldrh	r3, [r7, #28]
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f7ff fe99 	bl	8000f98 <ILI9488_WriteChar>
        x += font.width;
 8001266:	7d3b      	ldrb	r3, [r7, #20]
 8001268:	461a      	mov	r2, r3
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4413      	add	r3, r2
 800126e:	80fb      	strh	r3, [r7, #6]
        str++;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1cb      	bne.n	8001216 <ILI9488_WriteString+0x1a>
 800127e:	e000      	b.n	8001282 <ILI9488_WriteString+0x86>
            if(y + font.height >= ILI9488_HEIGHT) break;
 8001280:	bf00      	nop
    }
    ILI9488_Unselect();
 8001282:	f7ff fd05 	bl	8000c90 <ILI9488_Unselect>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001290:	b002      	add	sp, #8
 8001292:	4770      	bx	lr

08001294 <ILI9488_FillScreen>:

void ILI9488_FillScreen(uint16_t color) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af02      	add	r7, sp, #8
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, color);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80012a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff ff05 	bl	80010bc <ILI9488_FillRectangle>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <ILI9488_DrawImage_RGB666>:
    }

    ILI9488_Unselect();
}

void ILI9488_DrawImage_RGB666(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint8_t* data) {
 80012ba:	b590      	push	{r4, r7, lr}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4604      	mov	r4, r0
 80012c2:	4608      	mov	r0, r1
 80012c4:	4611      	mov	r1, r2
 80012c6:	461a      	mov	r2, r3
 80012c8:	4623      	mov	r3, r4
 80012ca:	80fb      	strh	r3, [r7, #6]
 80012cc:	4603      	mov	r3, r0
 80012ce:	80bb      	strh	r3, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	803b      	strh	r3, [r7, #0]
    if ((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80012de:	d23f      	bcs.n	8001360 <ILI9488_DrawImage_RGB666+0xa6>
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012e6:	d23b      	bcs.n	8001360 <ILI9488_DrawImage_RGB666+0xa6>
    if ((x + w - 1) >= ILI9488_WIDTH) return;
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	4413      	add	r3, r2
 80012ee:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80012f2:	dc37      	bgt.n	8001364 <ILI9488_DrawImage_RGB666+0xaa>
    if ((y + h - 1) >= ILI9488_HEIGHT) return;
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	883b      	ldrh	r3, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012fe:	dc33      	bgt.n	8001368 <ILI9488_DrawImage_RGB666+0xae>

    ILI9488_Select();
 8001300:	f7ff fcba 	bl	8000c78 <ILI9488_Select>
    ILI9488_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	4413      	add	r3, r2
 800130a:	b29b      	uxth	r3, r3
 800130c:	3b01      	subs	r3, #1
 800130e:	b29c      	uxth	r4, r3
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	4413      	add	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	3b01      	subs	r3, #1
 800131a:	b29b      	uxth	r3, r3
 800131c:	88b9      	ldrh	r1, [r7, #4]
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	4622      	mov	r2, r4
 8001322:	f7ff fd25 	bl	8000d70 <ILI9488_SetAddressWindow>
    
    // Calcula o tamanho de uma linha da imagem em bytes (largura * 3 bytes por pixel)
    uint32_t line_size_bytes = (uint32_t)w * 3;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
    
    // Envia os dados da imagem linha por linha
    for (uint16_t i = 0; i < h; i++) {
 8001330:	2300      	movs	r3, #0
 8001332:	82fb      	strh	r3, [r7, #22]
 8001334:	e00d      	b.n	8001352 <ILI9488_DrawImage_RGB666+0x98>
        // Calcula o ponteiro para o início da linha atual
        const uint8_t* p_line_data = data + (i * line_size_bytes);
 8001336:	8afb      	ldrh	r3, [r7, #22]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
        // Envia a linha inteira para o display
        ILI9488_WriteData((uint8_t*)p_line_data, line_size_bytes);
 8001344:	6939      	ldr	r1, [r7, #16]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff fcde 	bl	8000d08 <ILI9488_WriteData>
    for (uint16_t i = 0; i < h; i++) {
 800134c:	8afb      	ldrh	r3, [r7, #22]
 800134e:	3301      	adds	r3, #1
 8001350:	82fb      	strh	r3, [r7, #22]
 8001352:	8afa      	ldrh	r2, [r7, #22]
 8001354:	883b      	ldrh	r3, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d3ed      	bcc.n	8001336 <ILI9488_DrawImage_RGB666+0x7c>
    }
    
    ILI9488_Unselect();
 800135a:	f7ff fc99 	bl	8000c90 <ILI9488_Unselect>
 800135e:	e004      	b.n	800136a <ILI9488_DrawImage_RGB666+0xb0>
    if ((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 8001360:	bf00      	nop
 8001362:	e002      	b.n	800136a <ILI9488_DrawImage_RGB666+0xb0>
    if ((x + w - 1) >= ILI9488_WIDTH) return;
 8001364:	bf00      	nop
 8001366:	e000      	b.n	800136a <ILI9488_DrawImage_RGB666+0xb0>
    if ((y + h - 1) >= ILI9488_HEIGHT) return;
 8001368:	bf00      	nop
}
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <TCA9548A_SelectChannel>:
#include "TCA9548A.h"

HAL_StatusTypeDef TCA9548A_SelectChannel(I2C_HandleTypeDef *hi2c, uint8_t channel)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
    if (channel > 7) return HAL_ERROR; // O multiplexador tem 8 canais (0-7)
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	2b07      	cmp	r3, #7
 8001380:	d901      	bls.n	8001386 <TCA9548A_SelectChannel+0x16>
 8001382:	2301      	movs	r3, #1
 8001384:	e010      	b.n	80013a8 <TCA9548A_SelectChannel+0x38>

    uint8_t buffer = 1 << channel;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	2201      	movs	r2, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Master_Transmit(hi2c, MUX_ADDR, &buffer, 1, HAL_MAX_DELAY);
 8001392:	f107 020f 	add.w	r2, r7, #15
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	21e0      	movs	r1, #224	@ 0xe0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f002 fd8b 	bl	8003ebc <HAL_I2C_Master_Transmit>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <TCS3472_Init>:

// Configurações de inicialização
#define TCS3472_ENABLE_PON       0x01 // Power ON
#define TCS3472_ENABLE_AEN       0x02 // RGBC ADC Enable

bool TCS3472_Init(I2C_HandleTypeDef *hi2c, uint8_t channel) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
    uint8_t reg_data;

    // Seleciona o canal do sensor no multiplexador
    if (TCA9548A_SelectChannel(hi2c, channel) != HAL_OK) {
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffd5 	bl	8001370 <TCA9548A_SelectChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <TCS3472_Init+0x20>
        return false; // Falha ao selecionar o canal
 80013cc:	2300      	movs	r3, #0
 80013ce:	e064      	b.n	800149a <TCS3472_Init+0xea>
    }
    HAL_Delay(1); // Pequeno delay para estabilização
 80013d0:	2001      	movs	r0, #1
 80013d2:	f001 ff05 	bl	80031e0 <HAL_Delay>

    // 1. Verifica se o sensor está a responder lendo o seu ID
    if (HAL_I2C_Mem_Read(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ID), 1, &reg_data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	f107 030f 	add.w	r3, r7, #15
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	2292      	movs	r2, #146	@ 0x92
 80013ea:	2152      	movs	r1, #82	@ 0x52
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f002 ff5d 	bl	80042ac <HAL_I2C_Mem_Read>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <TCS3472_Init+0x4c>
        return false; // Falha na comunicação I2C
 80013f8:	2300      	movs	r3, #0
 80013fa:	e04e      	b.n	800149a <TCS3472_Init+0xea>
    }
    if (reg_data != 0x44 && reg_data != 0x4D) {
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b44      	cmp	r3, #68	@ 0x44
 8001400:	d004      	beq.n	800140c <TCS3472_Init+0x5c>
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b4d      	cmp	r3, #77	@ 0x4d
 8001406:	d001      	beq.n	800140c <TCS3472_Init+0x5c>
        return false; // ID do sensor incorreto
 8001408:	2300      	movs	r3, #0
 800140a:	e046      	b.n	800149a <TCS3472_Init+0xea>
    }

    // 2. Configura o tempo de integração do sensor
    reg_data = 0xEB; // 70ms
 800140c:	23eb      	movs	r3, #235	@ 0xeb
 800140e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ATIME), 1, &reg_data, 1, HAL_MAX_DELAY);
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	2281      	movs	r2, #129	@ 0x81
 8001424:	2152      	movs	r1, #82	@ 0x52
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f002 fe46 	bl	80040b8 <HAL_I2C_Mem_Write>

    // 3. Configura o ganho do sensor
    reg_data = 0x00; // Ganho 1x
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_CONTROL), 1, &reg_data, 1, HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2301      	movs	r3, #1
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	f107 030f 	add.w	r3, r7, #15
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	228f      	movs	r2, #143	@ 0x8f
 8001444:	2152      	movs	r1, #82	@ 0x52
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f002 fe36 	bl	80040b8 <HAL_I2C_Mem_Write>

    // 4. Ativa o oscilador interno e o conversor ADC de cor
    reg_data = TCS3472_ENABLE_PON;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ENABLE), 1, &reg_data, 1, HAL_MAX_DELAY);
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	2301      	movs	r3, #1
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	f107 030f 	add.w	r3, r7, #15
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	2280      	movs	r2, #128	@ 0x80
 8001464:	2152      	movs	r1, #82	@ 0x52
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f002 fe26 	bl	80040b8 <HAL_I2C_Mem_Write>
    HAL_Delay(3); // Espera o oscilador estabilizar
 800146c:	2003      	movs	r0, #3
 800146e:	f001 feb7 	bl	80031e0 <HAL_Delay>
    reg_data |= TCS3472_ENABLE_AEN;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ENABLE), 1, &reg_data, 1, HAL_MAX_DELAY);
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2301      	movs	r3, #1
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f107 030f 	add.w	r3, r7, #15
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	2280      	movs	r2, #128	@ 0x80
 8001490:	2152      	movs	r1, #82	@ 0x52
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f002 fe10 	bl	80040b8 <HAL_I2C_Mem_Write>

    return true; // Sucesso
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <TCS3472_ReadData>:


void TCS3472_ReadData(I2C_HandleTypeDef *hi2c, uint8_t channel, TCS3472_Data* color_data) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b08a      	sub	sp, #40	@ 0x28
 80014a6:	af04      	add	r7, sp, #16
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	460b      	mov	r3, r1
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	72fb      	strb	r3, [r7, #11]
    uint8_t buffer[8];

    // Tenta selecionar o canal do sensor no multiplexador
    if (TCA9548A_SelectChannel(hi2c, channel) != HAL_OK) {
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	4619      	mov	r1, r3
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff ff5b 	bl	8001370 <TCA9548A_SelectChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d010      	beq.n	80014e2 <TCS3472_ReadData+0x40>
        // Se falhar, define um padrão de erro e retorna
        color_data->clear = 1111;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f240 4257 	movw	r2, #1111	@ 0x457
 80014c6:	80da      	strh	r2, [r3, #6]
        color_data->red   = 1111;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f240 4257 	movw	r2, #1111	@ 0x457
 80014ce:	801a      	strh	r2, [r3, #0]
        color_data->green = 1111;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f240 4257 	movw	r2, #1111	@ 0x457
 80014d6:	805a      	strh	r2, [r3, #2]
        color_data->blue  = 1111;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f240 4257 	movw	r2, #1111	@ 0x457
 80014de:	809a      	strh	r2, [r3, #4]
        return;
 80014e0:	e050      	b.n	8001584 <TCS3472_ReadData+0xe2>
    }
    HAL_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f001 fe7c 	bl	80031e0 <HAL_Delay>

    // Lê os 8 bytes de dados de cor (Clear, Red, Green, Blue - 2 bytes cada)
    // VERIFICA O RETORNO DA FUNÇÃO DE LEITURA
    if (HAL_I2C_Mem_Read(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_CDATAL), 1, buffer, 8, HAL_MAX_DELAY) != HAL_OK)
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2308      	movs	r3, #8
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	2294      	movs	r2, #148	@ 0x94
 80014fc:	2152      	movs	r1, #82	@ 0x52
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f002 fed4 	bl	80042ac <HAL_I2C_Mem_Read>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d010      	beq.n	800152c <TCS3472_ReadData+0x8a>
    {
        // Se a leitura I2C falhar, define um padrão de erro diferente
        color_data->clear = 2222;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8001510:	80da      	strh	r2, [r3, #6]
        color_data->red   = 2222;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8001518:	801a      	strh	r2, [r3, #0]
        color_data->green = 2222;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8001520:	805a      	strh	r2, [r3, #2]
        color_data->blue  = 2222;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8001528:	809a      	strh	r2, [r3, #4]
        return;
 800152a:	e02b      	b.n	8001584 <TCS3472_ReadData+0xe2>
    }   

    // Se a leitura for bem-sucedida, processa os dados
    color_data->clear = (buffer[1] << 8) | buffer[0];
 800152c:	7c7b      	ldrb	r3, [r7, #17]
 800152e:	b21b      	sxth	r3, r3
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	7c3b      	ldrb	r3, [r7, #16]
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21b      	sxth	r3, r3
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	80da      	strh	r2, [r3, #6]
    color_data->red   = (buffer[3] << 8) | buffer[2];
 8001542:	7cfb      	ldrb	r3, [r7, #19]
 8001544:	b21b      	sxth	r3, r3
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7cbb      	ldrb	r3, [r7, #18]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21b      	sxth	r3, r3
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	801a      	strh	r2, [r3, #0]
    color_data->green = (buffer[5] << 8) | buffer[4];
 8001558:	7d7b      	ldrb	r3, [r7, #21]
 800155a:	b21b      	sxth	r3, r3
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	7d3b      	ldrb	r3, [r7, #20]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	805a      	strh	r2, [r3, #2]
    color_data->blue  = (buffer[7] << 8) | buffer[6];
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	b21b      	sxth	r3, r3
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	7dbb      	ldrb	r3, [r7, #22]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	809a      	strh	r2, [r3, #4]
}
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <TCS3472_DetectColor>:

EColor TCS3472_DetectColor(TCS3472_Data data) {
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	463b      	mov	r3, r7
 8001594:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t red = data.red;
 8001598:	883b      	ldrh	r3, [r7, #0]
 800159a:	81fb      	strh	r3, [r7, #14]
    uint16_t green = data.green;
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	81bb      	strh	r3, [r7, #12]
    uint16_t blue = data.blue;
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	817b      	strh	r3, [r7, #10]
    uint16_t clear = data.clear;
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	813b      	strh	r3, [r7, #8]

    // REGRA 1: Detetar ausência de cor (Preto ou Vazio)
    // Se a intensidade da luz (clear) for muito baixa, não há cor.
    // Baseado nos seus dados, um limiar de 150 parece seguro.
    if (clear < 150) {
 80015a8:	893b      	ldrh	r3, [r7, #8]
 80015aa:	2b95      	cmp	r3, #149	@ 0x95
 80015ac:	d801      	bhi.n	80015b2 <TCS3472_DetectColor+0x26>
        return eBlack;
 80015ae:	2305      	movs	r3, #5
 80015b0:	e05a      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }

    // REGRA 2: Detetar Amarelo
    // Baseado nos seus dados (R=518, G=443, B=152), R e G são altos e B é baixo.
    // Verificamos se R e G são pelo menos 2 vezes maiores que B.
    if (red > blue * 2 && green > blue * 2) {
 80015b2:	89fa      	ldrh	r2, [r7, #14]
 80015b4:	897b      	ldrh	r3, [r7, #10]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dd06      	ble.n	80015ca <TCS3472_DetectColor+0x3e>
 80015bc:	89ba      	ldrh	r2, [r7, #12]
 80015be:	897b      	ldrh	r3, [r7, #10]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dd01      	ble.n	80015ca <TCS3472_DetectColor+0x3e>
        return eYellow;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e04e      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }

    // REGRA 3: Detetar Vermelho
    // Baseado nos seus dados (R=277, G=97, B=74), R é muito maior que G e B.
    // Verificamos se R é pelo menos 2 vezes maior que G e B.
    if (red > green * 2 && red > blue * 2) {
 80015ca:	89fa      	ldrh	r2, [r7, #14]
 80015cc:	89bb      	ldrh	r3, [r7, #12]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dd06      	ble.n	80015e2 <TCS3472_DetectColor+0x56>
 80015d4:	89fa      	ldrh	r2, [r7, #14]
 80015d6:	897b      	ldrh	r3, [r7, #10]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd01      	ble.n	80015e2 <TCS3472_DetectColor+0x56>
        return eRed;
 80015de:	2300      	movs	r3, #0
 80015e0:	e042      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }
    
    // REGRA 4: Detetar Verde
    // Baseado nos seus dados (G=148, R=69, B=68), G é muito maior que R e B.
    // Verificamos se G é pelo menos 1.5 vezes maior que R e B.
    if (green > red * 1.5 && green > blue * 1.5) {
 80015e2:	89bb      	ldrh	r3, [r7, #12]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f8bf 	bl	8000768 <__aeabi_i2d>
 80015ea:	4604      	mov	r4, r0
 80015ec:	460d      	mov	r5, r1
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f8b9 	bl	8000768 <__aeabi_i2d>
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <TCS3472_DetectColor+0xe4>)
 80015fc:	f7fe fe38 	bl	8000270 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7ff f996 	bl	8000938 <__aeabi_dcmpgt>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <TCS3472_DetectColor+0xba>
 8001612:	89bb      	ldrh	r3, [r7, #12]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f8a7 	bl	8000768 <__aeabi_i2d>
 800161a:	4604      	mov	r4, r0
 800161c:	460d      	mov	r5, r1
 800161e:	897b      	ldrh	r3, [r7, #10]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f8a1 	bl	8000768 <__aeabi_i2d>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <TCS3472_DetectColor+0xe4>)
 800162c:	f7fe fe20 	bl	8000270 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7ff f97e 	bl	8000938 <__aeabi_dcmpgt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <TCS3472_DetectColor+0xba>
        return eGreen;
 8001642:	2302      	movs	r3, #2
 8001644:	e010      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }

    // REGRA 5: Detetar Azul (no seu caso, um Ciano/Azul-Esverdeado)
    // Baseado nos seus dados (G=153, B=136, R=67), G e B são altos e R é baixo.
    // Verificamos se G e B são maiores que R.
    if (green > red && blue > red) {
 8001646:	89ba      	ldrh	r2, [r7, #12]
 8001648:	89fb      	ldrh	r3, [r7, #14]
 800164a:	429a      	cmp	r2, r3
 800164c:	d905      	bls.n	800165a <TCS3472_DetectColor+0xce>
 800164e:	897a      	ldrh	r2, [r7, #10]
 8001650:	89fb      	ldrh	r3, [r7, #14]
 8001652:	429a      	cmp	r2, r3
 8001654:	d901      	bls.n	800165a <TCS3472_DetectColor+0xce>
        return eBlue;
 8001656:	2301      	movs	r3, #1
 8001658:	e006      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }

    // REGRA 6: Detetar Branco
    // Baseado nos seus dados, todos os valores são muito altos.
    // Usamos um limiar alto no clear para identificar o branco.
    if (clear > 2000) {
 800165a:	893b      	ldrh	r3, [r7, #8]
 800165c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001660:	d901      	bls.n	8001666 <TCS3472_DetectColor+0xda>
        return eWhite;
 8001662:	2304      	movs	r3, #4
 8001664:	e000      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }       

    // Se nenhuma cor dominar claramente, pode ser branco
    return eBlack;
 8001666:	2305      	movs	r3, #5
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bdb0      	pop	{r4, r5, r7, pc}
 8001670:	3ff80000 	.word	0x3ff80000

08001674 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001684:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <vApplicationGetIdleTaskMemory+0x30>)
 800168a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000114 	.word	0x20000114
 80016a4:	20000168 	.word	0x20000168

080016a8 <vInitBattle>:
 * @brief Executa a lógica de batalha turno a turno, atualizando a vida dos jogadores.
 * @param pUserPlayer: Ponteiro para o jogador do usuário.
 * @param pCpuPlayer: Ponteiro para o jogador da CPU.
 */
void vInitBattle(EWizard* pUserPlayer, EWizard* pCpuPlayer)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]
 80016b6:	e092      	b.n	80017de <vInitBattle+0x136>
  {
    // Pega os ataques deste turno
    EColor userAttack = pUserPlayer->eAttackSequential[u8Idx];
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	753b      	strb	r3, [r7, #20]
    EColor cpuAttack = pCpuPlayer->eAttackSequential[u8Idx];
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	4413      	add	r3, r2
 80016c8:	789b      	ldrb	r3, [r3, #2]
 80016ca:	74fb      	strb	r3, [r7, #19]

    // Calcula o resultado do ataque do Jogador -> CPU
    EAttackOutcome userOutcome = eGetAttackOutcome(userAttack, cpuAttack);
 80016cc:	7cfa      	ldrb	r2, [r7, #19]
 80016ce:	7d3b      	ldrb	r3, [r7, #20]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f88c 	bl	80017f0 <eGetAttackOutcome>
 80016d8:	4603      	mov	r3, r0
 80016da:	74bb      	strb	r3, [r7, #18]
    uint8_t userDamage = BASE_ATTACK_DAMAGE;
 80016dc:	230a      	movs	r3, #10
 80016de:	75bb      	strb	r3, [r7, #22]

    if (userOutcome == eOutcome_SuperEffective)
 80016e0:	7cbb      	ldrb	r3, [r7, #18]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10f      	bne.n	8001706 <vInitBattle+0x5e>
    {
      userDamage *= SUPER_EFFECTIVE_MODIFIER;
 80016e6:	7dbb      	ldrb	r3, [r7, #22]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80016f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001700:	793b      	ldrb	r3, [r7, #4]
 8001702:	75bb      	strb	r3, [r7, #22]
 8001704:	e011      	b.n	800172a <vInitBattle+0x82>
    }
    else if (userOutcome == eOutcome_NotEffective)
 8001706:	7cbb      	ldrb	r3, [r7, #18]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d10e      	bne.n	800172a <vInitBattle+0x82>
    {
      userDamage *= NOT_EFFECTIVE_MODIFIER;
 800170c:	7dbb      	ldrb	r3, [r7, #22]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	edc7 7a01 	vstr	s15, [r7, #4]
 8001726:	793b      	ldrb	r3, [r7, #4]
 8001728:	75bb      	strb	r3, [r7, #22]
    }

    // Calcula o resultado do ataque da CPU -> Jogador
    EAttackOutcome cpuOutcome = eGetAttackOutcome(cpuAttack, userAttack);
 800172a:	7d3a      	ldrb	r2, [r7, #20]
 800172c:	7cfb      	ldrb	r3, [r7, #19]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f85d 	bl	80017f0 <eGetAttackOutcome>
 8001736:	4603      	mov	r3, r0
 8001738:	747b      	strb	r3, [r7, #17]
    uint8_t cpuDamage = BASE_ATTACK_DAMAGE;
 800173a:	230a      	movs	r3, #10
 800173c:	757b      	strb	r3, [r7, #21]

    if (cpuOutcome == eOutcome_SuperEffective)
 800173e:	7c7b      	ldrb	r3, [r7, #17]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d10f      	bne.n	8001764 <vInitBattle+0xbc>
    {
      cpuDamage *= SUPER_EFFECTIVE_MODIFIER;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800175a:	edc7 7a01 	vstr	s15, [r7, #4]
 800175e:	793b      	ldrb	r3, [r7, #4]
 8001760:	757b      	strb	r3, [r7, #21]
 8001762:	e011      	b.n	8001788 <vInitBattle+0xe0>
    }
    else if (cpuOutcome == eOutcome_NotEffective)
 8001764:	7c7b      	ldrb	r3, [r7, #17]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d10e      	bne.n	8001788 <vInitBattle+0xe0>
    {
      cpuDamage *= NOT_EFFECTIVE_MODIFIER;
 800176a:	7d7b      	ldrb	r3, [r7, #21]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001774:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001780:	edc7 7a01 	vstr	s15, [r7, #4]
 8001784:	793b      	ldrb	r3, [r7, #4]
 8001786:	757b      	strb	r3, [r7, #21]
    }

    // Aplica o dano, garantindo que a vida não fique negativa
    if (pCpuPlayer->u8HeartPoints >= userDamage)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	7dba      	ldrb	r2, [r7, #22]
 800178e:	429a      	cmp	r2, r3
 8001790:	d807      	bhi.n	80017a2 <vInitBattle+0xfa>
    {
      pCpuPlayer->u8HeartPoints -= userDamage;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	7dbb      	ldrb	r3, [r7, #22]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e002      	b.n	80017a8 <vInitBattle+0x100>
    }
    else
    {
      pCpuPlayer->u8HeartPoints = 0;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    }

    if (pUserPlayer->u8HeartPoints >= cpuDamage)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	7d7a      	ldrb	r2, [r7, #21]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d807      	bhi.n	80017c2 <vInitBattle+0x11a>
    {
      pUserPlayer->u8HeartPoints -= cpuDamage;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	7d7b      	ldrb	r3, [r7, #21]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e002      	b.n	80017c8 <vInitBattle+0x120>
    }
    else
    {
      pUserPlayer->u8HeartPoints = 0;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
    }
    
    // Se a vida de alguém chegar a 0, a batalha pode parar mais cedo
    if(pUserPlayer->u8HeartPoints == 0 || pCpuPlayer->u8HeartPoints == 0)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00a      	beq.n	80017e6 <vInitBattle+0x13e>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <vInitBattle+0x13e>
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	3301      	adds	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	f67f af69 	bls.w	80016b8 <vInitBattle+0x10>
    {
        break; // Encerra o loop for
    }
  }
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <eGetAttackOutcome>:
 * @param eAttackerAttack: O elemento do atacante.
 * @param eDefenderAttack: O elemento do defensor no mesmo turno.
 * @retval EAttackOutcome: O resultado da interação.
 */
EAttackOutcome eGetAttackOutcome(EColor eAttackerAttack, EColor eDefenderAttack)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	4613      	mov	r3, r2
 80017fe:	71bb      	strb	r3, [r7, #6]
  switch (eAttackerAttack)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d859      	bhi.n	80018ba <eGetAttackOutcome+0xca>
 8001806:	a201      	add	r2, pc, #4	@ (adr r2, 800180c <eGetAttackOutcome+0x1c>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	08001825 	.word	0x08001825
 8001810:	08001843 	.word	0x08001843
 8001814:	0800187f 	.word	0x0800187f
 8001818:	08001861 	.word	0x08001861
 800181c:	08001893 	.word	0x08001893
 8001820:	080018a7 	.word	0x080018a7
  {
    case eRed: // FOGO
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Fogo > Terra
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d101      	bne.n	800182e <eGetAttackOutcome+0x3e>
 800182a:	2301      	movs	r3, #1
 800182c:	e053      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective;  //  Fogo > Sombra
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d101      	bne.n	8001838 <eGetAttackOutcome+0x48>
 8001834:	2301      	movs	r3, #1
 8001836:	e04e      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlue) return eOutcome_NotEffective;     // Fogo < Agua
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d13f      	bne.n	80018be <eGetAttackOutcome+0xce>
 800183e:	2302      	movs	r3, #2
 8001840:	e049      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    case eBlue: // ÁGUA
      if (eDefenderAttack == eRed) return eOutcome_SuperEffective;    // Agua > Fogo
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <eGetAttackOutcome+0x5c>
 8001848:	2301      	movs	r3, #1
 800184a:	e044      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eGreen) return eOutcome_SuperEffective;  // Agua > Ar
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d101      	bne.n	8001856 <eGetAttackOutcome+0x66>
 8001852:	2301      	movs	r3, #1
 8001854:	e03f      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;   // Agua < Terra
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d132      	bne.n	80018c2 <eGetAttackOutcome+0xd2>
 800185c:	2302      	movs	r3, #2
 800185e:	e03a      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    case eYellow: // TERRA
      if (eDefenderAttack == eBlue) return eOutcome_SuperEffective;   // Terra > Agua
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <eGetAttackOutcome+0x7a>
 8001866:	2301      	movs	r3, #1
 8001868:	e035      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective;  // Terra > Luz
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	2b04      	cmp	r3, #4
 800186e:	d101      	bne.n	8001874 <eGetAttackOutcome+0x84>
 8001870:	2301      	movs	r3, #1
 8001872:	e030      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Terra < Fogo
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d125      	bne.n	80018c6 <eGetAttackOutcome+0xd6>
 800187a:	2302      	movs	r3, #2
 800187c:	e02b      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    case eGreen: // AR
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Ar > Terra
 800187e:	79bb      	ldrb	r3, [r7, #6]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d101      	bne.n	8001888 <eGetAttackOutcome+0x98>
 8001884:	2301      	movs	r3, #1
 8001886:	e026      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Ar < Fogo
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d11d      	bne.n	80018ca <eGetAttackOutcome+0xda>
 800188e:	2302      	movs	r3, #2
 8001890:	e021      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;
    
    case eWhite: // LUZ
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective; // Luz > Sombra
 8001892:	79bb      	ldrb	r3, [r7, #6]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d101      	bne.n	800189c <eGetAttackOutcome+0xac>
 8001898:	2301      	movs	r3, #1
 800189a:	e01c      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;  // Luz < Terra
 800189c:	79bb      	ldrb	r3, [r7, #6]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d115      	bne.n	80018ce <eGetAttackOutcome+0xde>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e017      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    case eBlack: // SOMBRA
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective; // Sombra > Luz
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d101      	bne.n	80018b0 <eGetAttackOutcome+0xc0>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e012      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;     // Sombra < Fogo
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <eGetAttackOutcome+0xe2>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e00d      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    default:
      return eOutcome_Neutral;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e00b      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;
 80018be:	bf00      	nop
 80018c0:	e008      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018c2:	bf00      	nop
 80018c4:	e006      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018c6:	bf00      	nop
 80018c8:	e004      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018ca:	bf00      	nop
 80018cc:	e002      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018ce:	bf00      	nop
 80018d0:	e000      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018d2:	bf00      	nop
  }
  return eOutcome_Neutral; // Retorno padrão se nenhuma regra se aplicar
 80018d4:	2300      	movs	r3, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <ClearScreen>:
#include "ILI9488.h"
#include "fonts.h"
#include "stdint.h"
#include <stdio.h>

void ClearScreen() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af02      	add	r7, sp, #8
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, ILI9488_BLACK);
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80018f2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80018f6:	2100      	movs	r1, #0
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff fbdf 	bl	80010bc <ILI9488_FillRectangle>
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <DrawMenu>:

void DrawMenu(const char* title, const char** options, int numOptions, int currentSelection) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b092      	sub	sp, #72	@ 0x48
 8001908:	af04      	add	r7, sp, #16
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
    char buffer[30];

    // Desenha o título com a fonte maior, mais abaixo no ecrã
    sprintf(buffer, "%s", title);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	492a      	ldr	r1, [pc, #168]	@ (80019c4 <DrawMenu+0xc0>)
 800191a:	4618      	mov	r0, r3
 800191c:	f008 f8f2 	bl	8009b04 <siprintf>
    ILI9488_WriteString(0, 0, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001920:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <DrawMenu+0xc4>)
 8001922:	f107 0114 	add.w	r1, r7, #20
 8001926:	2200      	movs	r2, #0
 8001928:	9202      	str	r2, [sp, #8]
 800192a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800192e:	9201      	str	r2, [sp, #4]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	460a      	mov	r2, r1
 8001938:	2100      	movs	r1, #0
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff fc5e 	bl	80011fc <ILI9488_WriteString>

    // Desenha as opções com mais espaçamento vertical
    for (int i = 0; i < numOptions; i++) {
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
 8001944:	e035      	b.n	80019b2 <DrawMenu+0xae>
        uint16_t color = (i == currentSelection) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001946:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d102      	bne.n	8001954 <DrawMenu+0x50>
 800194e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001952:	e001      	b.n	8001958 <DrawMenu+0x54>
 8001954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001958:	867b      	strh	r3, [r7, #50]	@ 0x32
        sprintf(buffer, "%s %s", (i == currentSelection) ? ">" : " ", options[i]);
 800195a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d101      	bne.n	8001966 <DrawMenu+0x62>
 8001962:	491a      	ldr	r1, [pc, #104]	@ (80019cc <DrawMenu+0xc8>)
 8001964:	e000      	b.n	8001968 <DrawMenu+0x64>
 8001966:	491a      	ldr	r1, [pc, #104]	@ (80019d0 <DrawMenu+0xcc>)
 8001968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	4413      	add	r3, r2
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f107 0014 	add.w	r0, r7, #20
 8001976:	460a      	mov	r2, r1
 8001978:	4916      	ldr	r1, [pc, #88]	@ (80019d4 <DrawMenu+0xd0>)
 800197a:	f008 f8c3 	bl	8009b04 <siprintf>
        // Aumenta o espaçamento entre as linhas (de 15 para 25)
        ILI9488_WriteString(0, 30 + (i * 20), buffer, Font_7x10, color, ILI9488_BLACK);
 800197e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001980:	b29b      	uxth	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	b29b      	uxth	r3, r3
 800198c:	331e      	adds	r3, #30
 800198e:	b299      	uxth	r1, r3
 8001990:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <DrawMenu+0xc4>)
 8001992:	f107 0014 	add.w	r0, r7, #20
 8001996:	2200      	movs	r2, #0
 8001998:	9202      	str	r2, [sp, #8]
 800199a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800199c:	9201      	str	r2, [sp, #4]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	9200      	str	r2, [sp, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4602      	mov	r2, r0
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fc28 	bl	80011fc <ILI9488_WriteString>
    for (int i = 0; i < numOptions; i++) {
 80019ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ae:	3301      	adds	r3, #1
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	dbc5      	blt.n	8001946 <DrawMenu+0x42>
    }
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3738      	adds	r7, #56	@ 0x38
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	0800acd0 	.word	0x0800acd0
 80019c8:	20000000 	.word	0x20000000
 80019cc:	0800acd4 	.word	0x0800acd4
 80019d0:	0800acd8 	.word	0x0800acd8
 80019d4:	0800acdc 	.word	0x0800acdc

080019d8 <KEYPAD_Scan>:
Keypad_Pin_t C_PINS[4] = {{C4_GPIO_Port, C4_Pin}, {C3_GPIO_Port, C3_Pin}, {C2_GPIO_Port, C2_Pin}, {C1_GPIO_Port, C1_Pin}};
// Pinos das linhas (entradas)
Keypad_Pin_t R_PINS[4] = {{R2_GPIO_Port, R2_Pin}, {R1_GPIO_Port, R1_Pin}, {R3_GPIO_Port, R3_Pin}, {R4_GPIO_Port, R4_Pin}};


char KEYPAD_Scan(void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
    // Coloca todas as colunas em nível alto
    for (int i = 0; i < 4; i++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e00f      	b.n	8001a04 <KEYPAD_Scan+0x2c>
        HAL_GPIO_WritePin(C_PINS[i].PORT, C_PINS[i].PIN, GPIO_PIN_SET);
 80019e4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80019ec:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	889b      	ldrh	r3, [r3, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	4619      	mov	r1, r3
 80019fa:	f002 f901 	bl	8003c00 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	ddec      	ble.n	80019e4 <KEYPAD_Scan+0xc>
    }

    // Loop para varrer cada coluna
    for (int col = 0; col < 4; col++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	e05e      	b.n	8001ace <KEYPAD_Scan+0xf6>
        // Ativa a coluna atual (coloca em nível baixo)
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_RESET);
 8001a10:	4a33      	ldr	r2, [pc, #204]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a18:	4a31      	ldr	r2, [pc, #196]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4413      	add	r3, r2
 8001a20:	889b      	ldrh	r3, [r3, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	f002 f8eb 	bl	8003c00 <HAL_GPIO_WritePin>

        // Verifica qual linha foi para nível baixo
        for (int row = 0; row < 4; row++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e03b      	b.n	8001aa8 <KEYPAD_Scan+0xd0>
            if (HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET) {
 8001a30:	4a2c      	ldr	r2, [pc, #176]	@ (8001ae4 <KEYPAD_Scan+0x10c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a38:	492a      	ldr	r1, [pc, #168]	@ (8001ae4 <KEYPAD_Scan+0x10c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	440b      	add	r3, r1
 8001a40:	889b      	ldrh	r3, [r3, #4]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4610      	mov	r0, r2
 8001a46:	f002 f8c3 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d128      	bne.n	8001aa2 <KEYPAD_Scan+0xca>
                // Botão pressionado!
                
                // --- Debounce e espera soltar a tecla ---
                HAL_Delay(50); // Simples debounce por atraso
 8001a50:	2032      	movs	r0, #50	@ 0x32
 8001a52:	f001 fbc5 	bl	80031e0 <HAL_Delay>

                // Espera o usuário soltar a tecla para não ler a mesma tecla várias vezes
                while(HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET);
 8001a56:	bf00      	nop
 8001a58:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <KEYPAD_Scan+0x10c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a60:	4920      	ldr	r1, [pc, #128]	@ (8001ae4 <KEYPAD_Scan+0x10c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	889b      	ldrh	r3, [r3, #4]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f002 f8af 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ef      	beq.n	8001a58 <KEYPAD_Scan+0x80>
                
                // Restaura a coluna para nível alto antes de retornar
                HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8001a78:	4a19      	ldr	r2, [pc, #100]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a80:	4a17      	ldr	r2, [pc, #92]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	889b      	ldrh	r3, [r3, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f002 f8b7 	bl	8003c00 <HAL_GPIO_WritePin>

                return KEYPAD_MAP[row][col];
 8001a92:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <KEYPAD_Scan+0x110>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	441a      	add	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	e019      	b.n	8001ad6 <KEYPAD_Scan+0xfe>
        for (int row = 0; row < 4; row++) {
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	ddc0      	ble.n	8001a30 <KEYPAD_Scan+0x58>
            }
        }

        // Desativa a coluna atual antes de ir para a próxima
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8001aae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	889b      	ldrh	r3, [r3, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f002 f89c 	bl	8003c00 <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	dd9d      	ble.n	8001a10 <KEYPAD_Scan+0x38>
    }

    return '\0'; // Retorna nulo se nenhuma tecla for pressionada
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000028 	.word	0x20000028
 8001ae8:	0804d61c 	.word	0x0804d61c

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b5b0      	push	{r4, r5, r7, lr}
 8001aee:	b0a6      	sub	sp, #152	@ 0x98
 8001af0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af2:	f001 fb03 	bl	80030fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af6:	f000 f94f 	bl	8001d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afa:	f000 fa45 	bl	8001f88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001afe:	f000 f9e3 	bl	8001ec8 <MX_SPI1_Init>
  MX_UART4_Init();
 8001b02:	f000 fa17 	bl	8001f34 <MX_UART4_Init>
  MX_I2C1_Init();
 8001b06:	f000 f9b1 	bl	8001e6c <MX_I2C1_Init>
  // ETAPA DE INICIALIZAÇÃO
  //--------------------------------------------------------------------

  // 1. Inicializa o display. Ele usará a velocidade alta do SPI configurada
  //    no MX_SPI1_Init(), o que é ótimo para performance gráfica.
  ILI9488_Init();
 8001b0a:	f7ff f979 	bl	8000e00 <ILI9488_Init>

  // 2. Acende o backlight do display.
  //    (Assumindo que seu pino é o LCD_LED_Pin, como no seu MX_GPIO_Init)
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2180      	movs	r1, #128	@ 0x80
 8001b12:	4890      	ldr	r0, [pc, #576]	@ (8001d54 <main+0x268>)
 8001b14:	f002 f874 	bl	8003c00 <HAL_GPIO_WritePin>

  // 3. Prepara a tela para o usuário com uma mensagem de boas-vindas.
  ILI9488_FillScreen(ILI9488_BLACK);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff fbbb 	bl	8001294 <ILI9488_FillScreen>
  
  char buffer[40];

  // 1. Verifica se o multiplexador TCA9548A está respondendo
  ILI9488_WriteString(10, 30, "Verificando MUX...", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001b1e:	4b8e      	ldr	r3, [pc, #568]	@ (8001d58 <main+0x26c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	9202      	str	r2, [sp, #8]
 8001b24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b28:	9201      	str	r2, [sp, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	9200      	str	r2, [sp, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a8a      	ldr	r2, [pc, #552]	@ (8001d5c <main+0x270>)
 8001b32:	211e      	movs	r1, #30
 8001b34:	200a      	movs	r0, #10
 8001b36:	f7ff fb61 	bl	80011fc <ILI9488_WriteString>
  if (HAL_I2C_IsDeviceReady(&hi2c1, MUX_ADDR, 2, 100) == HAL_OK)
 8001b3a:	2364      	movs	r3, #100	@ 0x64
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	21e0      	movs	r1, #224	@ 0xe0
 8001b40:	4887      	ldr	r0, [pc, #540]	@ (8001d60 <main+0x274>)
 8001b42:	f002 fde5 	bl	8004710 <HAL_I2C_IsDeviceReady>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d115      	bne.n	8001b78 <main+0x8c>
  {
    ILI9488_WriteString(10, 50, "Multiplexador OK!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8001b4c:	4b82      	ldr	r3, [pc, #520]	@ (8001d58 <main+0x26c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	9202      	str	r2, [sp, #8]
 8001b52:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b56:	9201      	str	r2, [sp, #4]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	9200      	str	r2, [sp, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a81      	ldr	r2, [pc, #516]	@ (8001d64 <main+0x278>)
 8001b60:	2132      	movs	r1, #50	@ 0x32
 8001b62:	200a      	movs	r0, #10
 8001b64:	f7ff fb4a 	bl	80011fc <ILI9488_WriteString>
  {
    ILI9488_WriteString(10, 50, "Falha no Multiplexador!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
    // Trava aqui se o MUX falhar, pois nada mais vai funcionar
    while (1);
  }
  HAL_Delay(1000);
 8001b68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b6c:	f001 fb38 	bl	80031e0 <HAL_Delay>


  // 2. Inicializa e verifica cada um dos 4 sensores de cor
  for (int i = 0; i < 4; i++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001b76:	e08b      	b.n	8001c90 <main+0x1a4>
    ILI9488_WriteString(10, 50, "Falha no Multiplexador!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8001b78:	4b77      	ldr	r3, [pc, #476]	@ (8001d58 <main+0x26c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	9202      	str	r2, [sp, #8]
 8001b7e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001b82:	9201      	str	r2, [sp, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	9200      	str	r2, [sp, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a77      	ldr	r2, [pc, #476]	@ (8001d68 <main+0x27c>)
 8001b8c:	2132      	movs	r1, #50	@ 0x32
 8001b8e:	200a      	movs	r0, #10
 8001b90:	f7ff fb34 	bl	80011fc <ILI9488_WriteString>
    while (1);
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <main+0xa8>
  {
    sprintf(buffer, "Iniciando Sensor %d...", i + 1);
 8001b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ba2:	4972      	ldr	r1, [pc, #456]	@ (8001d6c <main+0x280>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f007 ffad 	bl	8009b04 <siprintf>
    ILI9488_WriteString(10, 80 + (i * 30), buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001baa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3350      	adds	r3, #80	@ 0x50
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	4b66      	ldr	r3, [pc, #408]	@ (8001d58 <main+0x26c>)
 8001bc0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	9202      	str	r2, [sp, #8]
 8001bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bcc:	9201      	str	r2, [sp, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	9200      	str	r2, [sp, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	200a      	movs	r0, #10
 8001bd8:	f7ff fb10 	bl	80011fc <ILI9488_WriteString>
    HAL_Delay(100);
 8001bdc:	2064      	movs	r0, #100	@ 0x64
 8001bde:	f001 faff 	bl	80031e0 <HAL_Delay>

    if (TCS3472_Init(&hi2c1, i))
 8001be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4619      	mov	r1, r3
 8001bea:	485d      	ldr	r0, [pc, #372]	@ (8001d60 <main+0x274>)
 8001bec:	f7ff fbe0 	bl	80013b0 <TCS3472_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d022      	beq.n	8001c3c <main+0x150>
    {
      sprintf(buffer, "Sensor de Cor %d OK!", i + 1);
 8001bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c00:	495b      	ldr	r1, [pc, #364]	@ (8001d70 <main+0x284>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f007 ff7e 	bl	8009b04 <siprintf>
      ILI9488_WriteString(10, 95 + (i * 30), buffer, Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8001c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	335f      	adds	r3, #95	@ 0x5f
 8001c1a:	b299      	uxth	r1, r3
 8001c1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d58 <main+0x26c>)
 8001c1e:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001c22:	2200      	movs	r2, #0
 8001c24:	9202      	str	r2, [sp, #8]
 8001c26:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001c2a:	9201      	str	r2, [sp, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	9200      	str	r2, [sp, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4602      	mov	r2, r0
 8001c34:	200a      	movs	r0, #10
 8001c36:	f7ff fae1 	bl	80011fc <ILI9488_WriteString>
 8001c3a:	e021      	b.n	8001c80 <main+0x194>
    }
    else
    {
      sprintf(buffer, "Erro no Sensor de Cor %d!", i + 1);
 8001c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c46:	494b      	ldr	r1, [pc, #300]	@ (8001d74 <main+0x288>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f007 ff5b 	bl	8009b04 <siprintf>
      ILI9488_WriteString(10, 95 + (i * 30), buffer, Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8001c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	335f      	adds	r3, #95	@ 0x5f
 8001c60:	b299      	uxth	r1, r3
 8001c62:	4b3d      	ldr	r3, [pc, #244]	@ (8001d58 <main+0x26c>)
 8001c64:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001c68:	2200      	movs	r2, #0
 8001c6a:	9202      	str	r2, [sp, #8]
 8001c6c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	9200      	str	r2, [sp, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4602      	mov	r2, r0
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	f7ff fabe 	bl	80011fc <ILI9488_WriteString>
    }
    HAL_Delay(250); // Aumenta o tempo para podermos ler
 8001c80:	20fa      	movs	r0, #250	@ 0xfa
 8001c82:	f001 faad 	bl	80031e0 <HAL_Delay>
  for (int i = 0; i < 4; i++)
 8001c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	f77f af7f 	ble.w	8001b98 <main+0xac>
  }

  ILI9488_WriteString(20, 120, "Sistema Iniciado!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d58 <main+0x26c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	9202      	str	r2, [sp, #8]
 8001ca0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001ca4:	9201      	str	r2, [sp, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	9200      	str	r2, [sp, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a32      	ldr	r2, [pc, #200]	@ (8001d78 <main+0x28c>)
 8001cae:	2178      	movs	r1, #120	@ 0x78
 8001cb0:	2014      	movs	r0, #20
 8001cb2:	f7ff faa3 	bl	80011fc <ILI9488_WriteString>
  HAL_Delay(2000); // Uma pequena pausa para o usuário ler a mensagem.
 8001cb6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cba:	f001 fa91 	bl	80031e0 <HAL_Delay>

  // 4. Limpa a tela para começar a desenhar.
  ILI9488_FillScreen(ILI9488_BLACK);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7ff fae8 	bl	8001294 <ILI9488_FillScreen>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osMutexDef(gameMutex);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cc8:	2300      	movs	r3, #0
 8001cca:	65bb      	str	r3, [r7, #88]	@ 0x58
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 8001ccc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f005 fa7e 	bl	80071d2 <osMutexCreate>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a28      	ldr	r2, [pc, #160]	@ (8001d7c <main+0x290>)
 8001cda:	6013      	str	r3, [r2, #0]

  osThreadDef(initPutHalTask, StartInputHalTask, osPriorityNormal, 0, 128);
 8001cdc:	4b28      	ldr	r3, [pc, #160]	@ (8001d80 <main+0x294>)
 8001cde:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  inputHalTaskHandle = osThreadCreate(osThread(initPutHalTask), NULL);
 8001cf0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 fa0b 	bl	8007112 <osThreadCreate>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4a21      	ldr	r2, [pc, #132]	@ (8001d84 <main+0x298>)
 8001d00:	6013      	str	r3, [r2, #0]

  osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 256);
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <main+0x29c>)
 8001d04:	f107 041c 	add.w	r4, r7, #28
 8001d08:	461d      	mov	r5, r3
 8001d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f005 f9f8 	bl	8007112 <osThreadCreate>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <main+0x2a0>)
 8001d26:	6013      	str	r3, [r2, #0]

  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 8001d28:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <main+0x2a4>)
 8001d2a:	463c      	mov	r4, r7
 8001d2c:	461d      	mov	r5, r3
 8001d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f005 f9e7 	bl	8007112 <osThreadCreate>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a13      	ldr	r2, [pc, #76]	@ (8001d94 <main+0x2a8>)
 8001d48:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001d4a:	f005 f9db 	bl	8007104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d4e:	bf00      	nop
 8001d50:	e7fd      	b.n	8001d4e <main+0x262>
 8001d52:	bf00      	nop
 8001d54:	40020800 	.word	0x40020800
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	0800ad44 	.word	0x0800ad44
 8001d60:	20000368 	.word	0x20000368
 8001d64:	0800ad58 	.word	0x0800ad58
 8001d68:	0800ad6c 	.word	0x0800ad6c
 8001d6c:	0800ad84 	.word	0x0800ad84
 8001d70:	0800ad9c 	.word	0x0800ad9c
 8001d74:	0800adb4 	.word	0x0800adb4
 8001d78:	0800add0 	.word	0x0800add0
 8001d7c:	20000468 	.word	0x20000468
 8001d80:	0800adf4 	.word	0x0800adf4
 8001d84:	2000045c 	.word	0x2000045c
 8001d88:	0800ae1c 	.word	0x0800ae1c
 8001d8c:	20000460 	.word	0x20000460
 8001d90:	0800ae44 	.word	0x0800ae44
 8001d94:	20000464 	.word	0x20000464

08001d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b094      	sub	sp, #80	@ 0x50
 8001d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	2230      	movs	r2, #48	@ 0x30
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f007 ff11 	bl	8009bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <SystemClock_Config+0xcc>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <SystemClock_Config+0xcc>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <SystemClock_Config+0xcc>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <SystemClock_Config+0xd0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <SystemClock_Config+0xd0>)
 8001de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <SystemClock_Config+0xd0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df4:	2302      	movs	r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e00:	2302      	movs	r3, #2
 8001e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e04:	2300      	movs	r3, #0
 8001e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e0c:	23a8      	movs	r3, #168	@ 0xa8
 8001e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e14:	2304      	movs	r3, #4
 8001e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e18:	f107 0320 	add.w	r3, r7, #32
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 f9f5 	bl	800520c <HAL_RCC_OscConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e28:	f000 fed4 	bl	8002bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e30:	2302      	movs	r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2105      	movs	r1, #5
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fc56 	bl	80056fc <HAL_RCC_ClockConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e56:	f000 febd 	bl	8002bd4 <Error_Handler>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3750      	adds	r7, #80	@ 0x50
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000

08001e6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001e72:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <MX_I2C1_Init+0x54>)
 8001e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e76:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001e78:	4a12      	ldr	r2, [pc, #72]	@ (8001ec4 <MX_I2C1_Init+0x58>)
 8001e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001e8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e96:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea8:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <MX_I2C1_Init+0x50>)
 8001eaa:	f001 fec3 	bl	8003c34 <HAL_I2C_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eb4:	f000 fe8e 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000368 	.word	0x20000368
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	000186a0 	.word	0x000186a0

08001ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ecc:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001ece:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <MX_SPI1_Init+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001ed4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eda:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ef8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001efa:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001efc:	2208      	movs	r2, #8
 8001efe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0c:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001f14:	220a      	movs	r2, #10
 8001f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f18:	4804      	ldr	r0, [pc, #16]	@ (8001f2c <MX_SPI1_Init+0x64>)
 8001f1a:	f003 fdcf 	bl	8005abc <HAL_SPI_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f24:	f000 fe56 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200003bc 	.word	0x200003bc
 8001f30:	40013000 	.word	0x40013000

08001f34 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_UART4_Init+0x4c>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <MX_UART4_Init+0x50>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <MX_UART4_Init+0x4c>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <MX_UART4_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <MX_UART4_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <MX_UART4_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <MX_UART4_Init+0x4c>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <MX_UART4_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <MX_UART4_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_UART4_Init+0x4c>)
 8001f6c:	f004 f96e 	bl	800624c <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f76:	f000 fe2d 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000414 	.word	0x20000414
 8001f84:	40004c00 	.word	0x40004c00

08001f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b49      	ldr	r3, [pc, #292]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a48      	ldr	r2, [pc, #288]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a41      	ldr	r2, [pc, #260]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	4b3b      	ldr	r3, [pc, #236]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a3a      	ldr	r2, [pc, #232]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b38      	ldr	r3, [pc, #224]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a33      	ldr	r2, [pc, #204]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <MX_GPIO_Init+0x140>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	2110      	movs	r1, #16
 8002012:	482e      	ldr	r0, [pc, #184]	@ (80020cc <MX_GPIO_Init+0x144>)
 8002014:	f001 fdf4 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	2103      	movs	r1, #3
 800201c:	482c      	ldr	r0, [pc, #176]	@ (80020d0 <MX_GPIO_Init+0x148>)
 800201e:	f001 fdef 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2180      	movs	r1, #128	@ 0x80
 8002026:	482b      	ldr	r0, [pc, #172]	@ (80020d4 <MX_GPIO_Init+0x14c>)
 8002028:	f001 fdea 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	210f      	movs	r1, #15
 8002030:	4829      	ldr	r0, [pc, #164]	@ (80020d8 <MX_GPIO_Init+0x150>)
 8002032:	f001 fde5 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002036:	2310      	movs	r3, #16
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	481f      	ldr	r0, [pc, #124]	@ (80020cc <MX_GPIO_Init+0x144>)
 800204e:	f001 fc23 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 8002052:	2303      	movs	r3, #3
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	4819      	ldr	r0, [pc, #100]	@ (80020d0 <MX_GPIO_Init+0x148>)
 800206a:	f001 fc15 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_LED_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 800206e:	2380      	movs	r3, #128	@ 0x80
 8002070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4813      	ldr	r0, [pc, #76]	@ (80020d4 <MX_GPIO_Init+0x14c>)
 8002086:	f001 fc07 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 800208a:	230f      	movs	r3, #15
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	480d      	ldr	r0, [pc, #52]	@ (80020d8 <MX_GPIO_Init+0x150>)
 80020a2:	f001 fbf9 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80020a6:	23f0      	movs	r3, #240	@ 0xf0
 80020a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4807      	ldr	r0, [pc, #28]	@ (80020d8 <MX_GPIO_Init+0x150>)
 80020ba:	f001 fbed 	bl	8003898 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	@ 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020c00 	.word	0x40020c00

080020dc <StartInputHalTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartInputHalTask(void const * argument)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char cCurrent;
  /* Infinite loop */
  for(;;) // O loop infinito de uma tarefa RTOS é "for(;;)"
  {
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 80020e4:	f7ff fc78 	bl	80019d8 <KEYPAD_Scan>
 80020e8:	4603      	mov	r3, r0
 80020ea:	72fb      	strb	r3, [r7, #11]
    if(cCurrent != '\0')
 80020ec:	7afb      	ldrb	r3, [r7, #11]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <StartInputHalTask+0x1c>
    {
      keyPressed = cCurrent;
 80020f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002128 <StartInputHalTask+0x4c>)
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	7013      	strb	r3, [r2, #0]
    }
    for (int i = 0; i < 4; i++) {
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e00c      	b.n	8002118 <StartInputHalTask+0x3c>
        TCS3472_ReadData(&hi2c1, i, &colorData[i]);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	b2d9      	uxtb	r1, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4a09      	ldr	r2, [pc, #36]	@ (800212c <StartInputHalTask+0x50>)
 8002108:	4413      	add	r3, r2
 800210a:	461a      	mov	r2, r3
 800210c:	4808      	ldr	r0, [pc, #32]	@ (8002130 <StartInputHalTask+0x54>)
 800210e:	f7ff f9c8 	bl	80014a2 <TCS3472_ReadData>
    for (int i = 0; i < 4; i++) {
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3301      	adds	r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b03      	cmp	r3, #3
 800211c:	ddef      	ble.n	80020fe <StartInputHalTask+0x22>
    }
    osDelay(50);
 800211e:	2032      	movs	r0, #50	@ 0x32
 8002120:	f005 f843 	bl	80071aa <osDelay>
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8002124:	e7de      	b.n	80020e4 <StartInputHalTask+0x8>
 8002126:	bf00      	nop
 8002128:	2000046c 	.word	0x2000046c
 800212c:	20000488 	.word	0x20000488
 8002130:	20000368 	.word	0x20000368

08002134 <StartGameTask>:
  }
}

void StartGameTask(void const * argument)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  char cLocalKeyPressed;
  for(;;)
  {
    cLocalKeyPressed = NONE_KEY;
 800213c:	2300      	movs	r3, #0
 800213e:	75fb      	strb	r3, [r7, #23]
    
    osMutexWait(gameMutexHandle, osWaitForever);
 8002140:	4bb3      	ldr	r3, [pc, #716]	@ (8002410 <StartGameTask+0x2dc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	4618      	mov	r0, r3
 800214a:	f005 f85b 	bl	8007204 <osMutexWait>
    if (keyPressed != NONE_KEY) {
 800214e:	4bb1      	ldr	r3, [pc, #708]	@ (8002414 <StartGameTask+0x2e0>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <StartGameTask+0x30>
      cLocalKeyPressed = keyPressed;
 8002158:	4bae      	ldr	r3, [pc, #696]	@ (8002414 <StartGameTask+0x2e0>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	75fb      	strb	r3, [r7, #23]
      keyPressed = NONE_KEY; 
 800215e:	4bad      	ldr	r3, [pc, #692]	@ (8002414 <StartGameTask+0x2e0>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 8002164:	4baa      	ldr	r3, [pc, #680]	@ (8002410 <StartGameTask+0x2dc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f005 f899 	bl	80072a0 <osMutexRelease>
    
    if (cLocalKeyPressed != NONE_KEY)
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 81e9 	beq.w	8002548 <StartGameTask+0x414>
    {
      osMutexWait(gameMutexHandle, osWaitForever);
 8002176:	4ba6      	ldr	r3, [pc, #664]	@ (8002410 <StartGameTask+0x2dc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f04f 31ff 	mov.w	r1, #4294967295
 800217e:	4618      	mov	r0, r3
 8002180:	f005 f840 	bl	8007204 <osMutexWait>
      switch(eCurrentState)
 8002184:	4ba4      	ldr	r3, [pc, #656]	@ (8002418 <StartGameTask+0x2e4>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b05      	cmp	r3, #5
 800218c:	f200 81cb 	bhi.w	8002526 <StartGameTask+0x3f2>
 8002190:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <StartGameTask+0x64>)
 8002192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002196:	bf00      	nop
 8002198:	080021b1 	.word	0x080021b1
 800219c:	080021d9 	.word	0x080021d9
 80021a0:	080022ad 	.word	0x080022ad
 80021a4:	080023ff 	.word	0x080023ff
 80021a8:	08002495 	.word	0x08002495
 80021ac:	08002513 	.word	0x08002513
      {
        case eInitGame:
        {
          eUserPlayer.u8HeartPoints = 100;
 80021b0:	4b9a      	ldr	r3, [pc, #616]	@ (800241c <StartGameTask+0x2e8>)
 80021b2:	2264      	movs	r2, #100	@ 0x64
 80021b4:	701a      	strb	r2, [r3, #0]
          eCpuPlayer.u8HeartPoints = 100;
 80021b6:	4b9a      	ldr	r3, [pc, #616]	@ (8002420 <StartGameTask+0x2ec>)
 80021b8:	2264      	movs	r2, #100	@ 0x64
 80021ba:	701a      	strb	r2, [r3, #0]
          if(cLocalKeyPressed == CONFIRM_KEY)
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	2b2a      	cmp	r3, #42	@ 0x2a
 80021c0:	f040 81b8 	bne.w	8002534 <StartGameTask+0x400>
          {
            eCurrentState = eDificultSelect;
 80021c4:	4b94      	ldr	r3, [pc, #592]	@ (8002418 <StartGameTask+0x2e4>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
            selectedOption = 0;
 80021ca:	4b96      	ldr	r3, [pc, #600]	@ (8002424 <StartGameTask+0x2f0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
            u8CleanScreen = TRUE;
 80021d0:	4b95      	ldr	r3, [pc, #596]	@ (8002428 <StartGameTask+0x2f4>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
            }
          break;
 80021d6:	e1ad      	b.n	8002534 <StartGameTask+0x400>
        }
        case eDificultSelect:
        {
          switch(cLocalKeyPressed)
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	3b23      	subs	r3, #35	@ 0x23
 80021dc:	2b15      	cmp	r3, #21
 80021de:	d863      	bhi.n	80022a8 <StartGameTask+0x174>
 80021e0:	a201      	add	r2, pc, #4	@ (adr r2, 80021e8 <StartGameTask+0xb4>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	0800227d 	.word	0x0800227d
 80021ec:	080022a9 	.word	0x080022a9
 80021f0:	080022a9 	.word	0x080022a9
 80021f4:	080022a9 	.word	0x080022a9
 80021f8:	080022a9 	.word	0x080022a9
 80021fc:	080022a9 	.word	0x080022a9
 8002200:	080022a9 	.word	0x080022a9
 8002204:	0800228b 	.word	0x0800228b
 8002208:	080022a9 	.word	0x080022a9
 800220c:	080022a9 	.word	0x080022a9
 8002210:	080022a9 	.word	0x080022a9
 8002214:	080022a9 	.word	0x080022a9
 8002218:	080022a9 	.word	0x080022a9
 800221c:	080022a9 	.word	0x080022a9
 8002220:	080022a9 	.word	0x080022a9
 8002224:	0800225f 	.word	0x0800225f
 8002228:	080022a9 	.word	0x080022a9
 800222c:	080022a9 	.word	0x080022a9
 8002230:	080022a9 	.word	0x080022a9
 8002234:	080022a9 	.word	0x080022a9
 8002238:	080022a9 	.word	0x080022a9
 800223c:	08002241 	.word	0x08002241
          {
            case UP_KEY:
            {
              selectedOption = (selectedOption < MENU_OPTIONS_DIFFICULTY - 1) ? selectedOption + 1 : 0;
 8002240:	4b78      	ldr	r3, [pc, #480]	@ (8002424 <StartGameTask+0x2f0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	dc03      	bgt.n	8002250 <StartGameTask+0x11c>
 8002248:	4b76      	ldr	r3, [pc, #472]	@ (8002424 <StartGameTask+0x2f0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	e000      	b.n	8002252 <StartGameTask+0x11e>
 8002250:	2300      	movs	r3, #0
 8002252:	4a74      	ldr	r2, [pc, #464]	@ (8002424 <StartGameTask+0x2f0>)
 8002254:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8002256:	4b74      	ldr	r3, [pc, #464]	@ (8002428 <StartGameTask+0x2f4>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
              break;
 800225c:	e025      	b.n	80022aa <StartGameTask+0x176>
  }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_DIFFICULTY - 1;
 800225e:	4b71      	ldr	r3, [pc, #452]	@ (8002424 <StartGameTask+0x2f0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	dd03      	ble.n	800226e <StartGameTask+0x13a>
 8002266:	4b6f      	ldr	r3, [pc, #444]	@ (8002424 <StartGameTask+0x2f0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3b01      	subs	r3, #1
 800226c:	e000      	b.n	8002270 <StartGameTask+0x13c>
 800226e:	2302      	movs	r3, #2
 8002270:	4a6c      	ldr	r2, [pc, #432]	@ (8002424 <StartGameTask+0x2f0>)
 8002272:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8002274:	4b6c      	ldr	r3, [pc, #432]	@ (8002428 <StartGameTask+0x2f4>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
              break;
 800227a:	e016      	b.n	80022aa <StartGameTask+0x176>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 800227c:	4b6a      	ldr	r3, [pc, #424]	@ (8002428 <StartGameTask+0x2f4>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
              eCurrentState = eInitGame;
 8002282:	4b65      	ldr	r3, [pc, #404]	@ (8002418 <StartGameTask+0x2e4>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
              break;
 8002288:	e00f      	b.n	80022aa <StartGameTask+0x176>
            }
            case CONFIRM_KEY:
            {
              selectedDifficulty = (EDificult)selectedOption;
 800228a:	4b66      	ldr	r3, [pc, #408]	@ (8002424 <StartGameTask+0x2f0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b66      	ldr	r3, [pc, #408]	@ (800242c <StartGameTask+0x2f8>)
 8002292:	701a      	strb	r2, [r3, #0]
              eCurrentState = ePersonaSelect;
 8002294:	4b60      	ldr	r3, [pc, #384]	@ (8002418 <StartGameTask+0x2e4>)
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
              selectedOption = FALSE; // Reseta para o próximo menu
 800229a:	4b62      	ldr	r3, [pc, #392]	@ (8002424 <StartGameTask+0x2f0>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80022a0:	4b61      	ldr	r3, [pc, #388]	@ (8002428 <StartGameTask+0x2f4>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
              break;
 80022a6:	e000      	b.n	80022aa <StartGameTask+0x176>
            }
            default:
            {
              break;
 80022a8:	bf00      	nop
            }
          }
          break;
 80022aa:	e148      	b.n	800253e <StartGameTask+0x40a>
        }
        case ePersonaSelect:
        {
          switch(cLocalKeyPressed)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	3b23      	subs	r3, #35	@ 0x23
 80022b0:	2b15      	cmp	r3, #21
 80022b2:	f200 80a2 	bhi.w	80023fa <StartGameTask+0x2c6>
 80022b6:	a201      	add	r2, pc, #4	@ (adr r2, 80022bc <StartGameTask+0x188>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	08002351 	.word	0x08002351
 80022c0:	080023fb 	.word	0x080023fb
 80022c4:	080023fb 	.word	0x080023fb
 80022c8:	080023fb 	.word	0x080023fb
 80022cc:	080023fb 	.word	0x080023fb
 80022d0:	080023fb 	.word	0x080023fb
 80022d4:	080023fb 	.word	0x080023fb
 80022d8:	0800235f 	.word	0x0800235f
 80022dc:	080023fb 	.word	0x080023fb
 80022e0:	080023fb 	.word	0x080023fb
 80022e4:	080023fb 	.word	0x080023fb
 80022e8:	080023fb 	.word	0x080023fb
 80022ec:	080023fb 	.word	0x080023fb
 80022f0:	080023fb 	.word	0x080023fb
 80022f4:	080023fb 	.word	0x080023fb
 80022f8:	08002333 	.word	0x08002333
 80022fc:	080023fb 	.word	0x080023fb
 8002300:	080023fb 	.word	0x080023fb
 8002304:	080023fb 	.word	0x080023fb
 8002308:	080023fb 	.word	0x080023fb
 800230c:	080023fb 	.word	0x080023fb
 8002310:	08002315 	.word	0x08002315
          {
            case UP_KEY:
            {                  
              selectedOption = (selectedOption < MENU_OPTIONS_PERSONA - 1) ? selectedOption + 1 : 0;
 8002314:	4b43      	ldr	r3, [pc, #268]	@ (8002424 <StartGameTask+0x2f0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b03      	cmp	r3, #3
 800231a:	dc03      	bgt.n	8002324 <StartGameTask+0x1f0>
 800231c:	4b41      	ldr	r3, [pc, #260]	@ (8002424 <StartGameTask+0x2f0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	e000      	b.n	8002326 <StartGameTask+0x1f2>
 8002324:	2300      	movs	r3, #0
 8002326:	4a3f      	ldr	r2, [pc, #252]	@ (8002424 <StartGameTask+0x2f0>)
 8002328:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800232a:	4b3f      	ldr	r3, [pc, #252]	@ (8002428 <StartGameTask+0x2f4>)
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
              break;
 8002330:	e064      	b.n	80023fc <StartGameTask+0x2c8>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_PERSONA - 1;
 8002332:	4b3c      	ldr	r3, [pc, #240]	@ (8002424 <StartGameTask+0x2f0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	dd03      	ble.n	8002342 <StartGameTask+0x20e>
 800233a:	4b3a      	ldr	r3, [pc, #232]	@ (8002424 <StartGameTask+0x2f0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3b01      	subs	r3, #1
 8002340:	e000      	b.n	8002344 <StartGameTask+0x210>
 8002342:	2304      	movs	r3, #4
 8002344:	4a37      	ldr	r2, [pc, #220]	@ (8002424 <StartGameTask+0x2f0>)
 8002346:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8002348:	4b37      	ldr	r3, [pc, #220]	@ (8002428 <StartGameTask+0x2f4>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
              break;
 800234e:	e055      	b.n	80023fc <StartGameTask+0x2c8>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8002350:	4b35      	ldr	r3, [pc, #212]	@ (8002428 <StartGameTask+0x2f4>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
              eCurrentState = eDificultSelect;
 8002356:	4b30      	ldr	r3, [pc, #192]	@ (8002418 <StartGameTask+0x2e4>)
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
              break;
 800235c:	e04e      	b.n	80023fc <StartGameTask+0x2c8>
            }
            case CONFIRM_KEY:
            {
              eUserPlayer.ePersonaElemental = (EElemental)selectedOption;
 800235e:	4b31      	ldr	r3, [pc, #196]	@ (8002424 <StartGameTask+0x2f0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b2d      	ldr	r3, [pc, #180]	@ (800241c <StartGameTask+0x2e8>)
 8002366:	705a      	strb	r2, [r3, #1]
              eCurrentState = eBattleInit;
 8002368:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <StartGameTask+0x2e4>)
 800236a:	2203      	movs	r2, #3
 800236c:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 800236e:	4b2e      	ldr	r3, [pc, #184]	@ (8002428 <StartGameTask+0x2f4>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0;     // Zera o contador de ataques
 8002374:	4b2e      	ldr	r3, [pc, #184]	@ (8002430 <StartGameTask+0x2fc>)
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;   // Inicia com a primeira opção (Fogo) pré-selecionada
 800237a:	4b2a      	ldr	r3, [pc, #168]	@ (8002424 <StartGameTask+0x2f0>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 8002380:	2204      	movs	r2, #4
 8002382:	2100      	movs	r1, #0
 8002384:	482b      	ldr	r0, [pc, #172]	@ (8002434 <StartGameTask+0x300>)
 8002386:	f007 fc22 	bl	8009bce <memset>
              memset((void*)eCpuPlayer.eAttackSequential, 0, sizeof(eCpuPlayer.eAttackSequential));
 800238a:	2204      	movs	r2, #4
 800238c:	2100      	movs	r1, #0
 800238e:	482a      	ldr	r0, [pc, #168]	@ (8002438 <StartGameTask+0x304>)
 8002390:	f007 fc1d 	bl	8009bce <memset>

              srand(HAL_GetTick()); 
 8002394:	f000 ff18 	bl	80031c8 <HAL_GetTick>
 8002398:	4603      	mov	r3, r0
 800239a:	4618      	mov	r0, r3
 800239c:	f007 fa84 	bl	80098a8 <srand>
              eCpuPlayer.ePersonaElemental = (rand() % 6);
 80023a0:	f007 fab0 	bl	8009904 <rand>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b25      	ldr	r3, [pc, #148]	@ (800243c <StartGameTask+0x308>)
 80023a8:	fb83 3102 	smull	r3, r1, r3, r2
 80023ac:	17d3      	asrs	r3, r2, #31
 80023ae:	1ac9      	subs	r1, r1, r3
 80023b0:	460b      	mov	r3, r1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	440b      	add	r3, r1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	1ad1      	subs	r1, r2, r3
 80023ba:	b2ca      	uxtb	r2, r1
 80023bc:	4b18      	ldr	r3, [pc, #96]	@ (8002420 <StartGameTask+0x2ec>)
 80023be:	705a      	strb	r2, [r3, #1]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	75bb      	strb	r3, [r7, #22]
 80023c4:	e015      	b.n	80023f2 <StartGameTask+0x2be>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6); 
 80023c6:	f007 fa9d 	bl	8009904 <rand>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <StartGameTask+0x308>)
 80023ce:	fb83 3102 	smull	r3, r1, r3, r2
 80023d2:	17d3      	asrs	r3, r2, #31
 80023d4:	1ac9      	subs	r1, r1, r3
 80023d6:	460b      	mov	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	440b      	add	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	1ad1      	subs	r1, r2, r3
 80023e0:	7dbb      	ldrb	r3, [r7, #22]
 80023e2:	b2c9      	uxtb	r1, r1
 80023e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002420 <StartGameTask+0x2ec>)
 80023e6:	4413      	add	r3, r2
 80023e8:	460a      	mov	r2, r1
 80023ea:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80023ec:	7dbb      	ldrb	r3, [r7, #22]
 80023ee:	3301      	adds	r3, #1
 80023f0:	75bb      	strb	r3, [r7, #22]
 80023f2:	7dbb      	ldrb	r3, [r7, #22]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d9e6      	bls.n	80023c6 <StartGameTask+0x292>
              }
              break;
 80023f8:	e000      	b.n	80023fc <StartGameTask+0x2c8>
            }
            default:
            {
              break;
 80023fa:	bf00      	nop
            }
          }
          break;
 80023fc:	e09f      	b.n	800253e <StartGameTask+0x40a>
        }
        case eBattleInit:
        {
          // A lógica de ataque agora só depende das teclas CONFIRM e BACK
          switch (cLocalKeyPressed)
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	2b23      	cmp	r3, #35	@ 0x23
 8002402:	d03e      	beq.n	8002482 <StartGameTask+0x34e>
 8002404:	2b2a      	cmp	r3, #42	@ 0x2a
 8002406:	d143      	bne.n	8002490 <StartGameTask+0x35c>
          {
            case CONFIRM_KEY:
            {
              // Lê a cor de cada um dos 4 sensores e define a sequência de ataque
              for (int i = 0; i < ATTACKS_NUMBERS; i++)
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e02b      	b.n	8002466 <StartGameTask+0x332>
 800240e:	bf00      	nop
 8002410:	20000468 	.word	0x20000468
 8002414:	2000046c 	.word	0x2000046c
 8002418:	2000046d 	.word	0x2000046d
 800241c:	20000478 	.word	0x20000478
 8002420:	20000480 	.word	0x20000480
 8002424:	20000470 	.word	0x20000470
 8002428:	20000048 	.word	0x20000048
 800242c:	20000474 	.word	0x20000474
 8002430:	200004a8 	.word	0x200004a8
 8002434:	2000047a 	.word	0x2000047a
 8002438:	20000482 	.word	0x20000482
 800243c:	2aaaaaab 	.word	0x2aaaaaab
              {
                  eUserPlayer.eAttackSequential[i] = TCS3472_DetectColor(colorData[i]);
 8002440:	4a43      	ldr	r2, [pc, #268]	@ (8002550 <StartGameTask+0x41c>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800244c:	f7ff f89e 	bl	800158c <TCS3472_DetectColor>
 8002450:	4603      	mov	r3, r0
 8002452:	4619      	mov	r1, r3
 8002454:	4a3f      	ldr	r2, [pc, #252]	@ (8002554 <StartGameTask+0x420>)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	3302      	adds	r3, #2
 800245c:	460a      	mov	r2, r1
 800245e:	701a      	strb	r2, [r3, #0]
              for (int i = 0; i < ATTACKS_NUMBERS; i++)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	3301      	adds	r3, #1
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b03      	cmp	r3, #3
 800246a:	dde9      	ble.n	8002440 <StartGameTask+0x30c>
              }

              // Prepara e inicia a batalha
              vInitBattle(&eUserPlayer, &eCpuPlayer);
 800246c:	493a      	ldr	r1, [pc, #232]	@ (8002558 <StartGameTask+0x424>)
 800246e:	4839      	ldr	r0, [pc, #228]	@ (8002554 <StartGameTask+0x420>)
 8002470:	f7ff f91a 	bl	80016a8 <vInitBattle>
              eCurrentState = ePlayerTurn;
 8002474:	4b39      	ldr	r3, [pc, #228]	@ (800255c <StartGameTask+0x428>)
 8002476:	2204      	movs	r2, #4
 8002478:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 800247a:	4b39      	ldr	r3, [pc, #228]	@ (8002560 <StartGameTask+0x42c>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
              break;
 8002480:	e007      	b.n	8002492 <StartGameTask+0x35e>
            } 
            case BACK_KEY:
            {
              eCurrentState = ePersonaSelect;
 8002482:	4b36      	ldr	r3, [pc, #216]	@ (800255c <StartGameTask+0x428>)
 8002484:	2202      	movs	r2, #2
 8002486:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8002488:	4b35      	ldr	r3, [pc, #212]	@ (8002560 <StartGameTask+0x42c>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
              break;
 800248e:	e000      	b.n	8002492 <StartGameTask+0x35e>
            }
            default:
              // Ignora outras teclas, pois a tela se atualiza sozinha
              break;
 8002490:	bf00      	nop
          }
          break;
 8002492:	e054      	b.n	800253e <StartGameTask+0x40a>
        }
        case ePlayerTurn:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b2a      	cmp	r3, #42	@ 0x2a
 8002498:	d14e      	bne.n	8002538 <StartGameTask+0x404>
          {            
            if (eUserPlayer.u8HeartPoints == 0 || eCpuPlayer.u8HeartPoints == 0)
 800249a:	4b2e      	ldr	r3, [pc, #184]	@ (8002554 <StartGameTask+0x420>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <StartGameTask+0x37a>
 80024a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002558 <StartGameTask+0x424>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <StartGameTask+0x382>
            {
              eCurrentState = eEndGame; 
 80024ae:	4b2b      	ldr	r3, [pc, #172]	@ (800255c <StartGameTask+0x428>)
 80024b0:	2205      	movs	r2, #5
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e029      	b.n	800250a <StartGameTask+0x3d6>
            }
            else
            {
              // Ninguém perdeu, volta para selecionar novos ataques
              eCurrentState = eBattleInit;
 80024b6:	4b29      	ldr	r3, [pc, #164]	@ (800255c <StartGameTask+0x428>)
 80024b8:	2203      	movs	r2, #3
 80024ba:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0; // Prepara para o novo round
 80024bc:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <StartGameTask+0x430>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;
 80024c2:	4b29      	ldr	r3, [pc, #164]	@ (8002568 <StartGameTask+0x434>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 80024c8:	2204      	movs	r2, #4
 80024ca:	2100      	movs	r1, #0
 80024cc:	4827      	ldr	r0, [pc, #156]	@ (800256c <StartGameTask+0x438>)
 80024ce:	f007 fb7e 	bl	8009bce <memset>
              
              // Gera novos ataques para a CPU para o próximo round
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	e015      	b.n	8002504 <StartGameTask+0x3d0>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6);
 80024d8:	f007 fa14 	bl	8009904 <rand>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b24      	ldr	r3, [pc, #144]	@ (8002570 <StartGameTask+0x43c>)
 80024e0:	fb83 3102 	smull	r3, r1, r3, r2
 80024e4:	17d3      	asrs	r3, r2, #31
 80024e6:	1ac9      	subs	r1, r1, r3
 80024e8:	460b      	mov	r3, r1
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	440b      	add	r3, r1
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	1ad1      	subs	r1, r2, r3
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	b2c9      	uxtb	r1, r1
 80024f6:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <StartGameTask+0x424>)
 80024f8:	4413      	add	r3, r2
 80024fa:	460a      	mov	r2, r1
 80024fc:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	3301      	adds	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d9e6      	bls.n	80024d8 <StartGameTask+0x3a4>
              }
            }
            u8CleanScreen = TRUE;
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <StartGameTask+0x42c>)
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8002510:	e012      	b.n	8002538 <StartGameTask+0x404>
        }
        case eEndGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b2a      	cmp	r3, #42	@ 0x2a
 8002516:	d111      	bne.n	800253c <StartGameTask+0x408>
          {
            eCurrentState = eInitGame;
 8002518:	4b10      	ldr	r3, [pc, #64]	@ (800255c <StartGameTask+0x428>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <StartGameTask+0x42c>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
          }
          break;
 8002524:	e00a      	b.n	800253c <StartGameTask+0x408>
        }
        default:
        {
          // Estado desconhecido, volta para o início por segurança
          eCurrentState = eInitGame;
 8002526:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <StartGameTask+0x428>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
          u8CleanScreen = TRUE;
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <StartGameTask+0x42c>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
          break;
 8002532:	e004      	b.n	800253e <StartGameTask+0x40a>
          break;
 8002534:	bf00      	nop
 8002536:	e002      	b.n	800253e <StartGameTask+0x40a>
          break;
 8002538:	bf00      	nop
 800253a:	e000      	b.n	800253e <StartGameTask+0x40a>
          break;
 800253c:	bf00      	nop
        }
      }
      osMutexRelease(gameMutexHandle);
 800253e:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <StartGameTask+0x440>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f004 feac 	bl	80072a0 <osMutexRelease>
    }
    osDelay(50);
 8002548:	2032      	movs	r0, #50	@ 0x32
 800254a:	f004 fe2e 	bl	80071aa <osDelay>
    cLocalKeyPressed = NONE_KEY;
 800254e:	e5f5      	b.n	800213c <StartGameTask+0x8>
 8002550:	20000488 	.word	0x20000488
 8002554:	20000478 	.word	0x20000478
 8002558:	20000480 	.word	0x20000480
 800255c:	2000046d 	.word	0x2000046d
 8002560:	20000048 	.word	0x20000048
 8002564:	200004a8 	.word	0x200004a8
 8002568:	20000470 	.word	0x20000470
 800256c:	2000047a 	.word	0x2000047a
 8002570:	2aaaaaab 	.word	0x2aaaaaab
 8002574:	20000468 	.word	0x20000468

08002578 <StartDisplayTask>:
  }
}

void StartDisplayTask(void const * argument)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b098      	sub	sp, #96	@ 0x60
 800257c:	af04      	add	r7, sp, #16
 800257e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  char buffer[30];
  uint8_t u8RedrawScreen = FALSE;
 8002580:	2300      	movs	r3, #0
 8002582:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  EGameStates ePreviousState = eInitGame;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  for(;;)
  {
    osMutexWait(gameMutexHandle, osWaitForever);
 800258c:	4bbc      	ldr	r3, [pc, #752]	@ (8002880 <StartDisplayTask+0x308>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	4618      	mov	r0, r3
 8002596:	f004 fe35 	bl	8007204 <osMutexWait>
    EGameStates eLocalCurrentState = eCurrentState;
 800259a:	4bba      	ldr	r3, [pc, #744]	@ (8002884 <StartDisplayTask+0x30c>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    osMutexRelease(gameMutexHandle);
 80025a2:	4bb7      	ldr	r3, [pc, #732]	@ (8002880 <StartDisplayTask+0x308>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fe7a 	bl	80072a0 <osMutexRelease>



    if(eLocalCurrentState != ePreviousState)
 80025ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80025b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80025b4:	429a      	cmp	r2, r3
 80025b6:	f000 8238 	beq.w	8002a2a <StartDisplayTask+0x4b2>
    {
      ClearScreen();
 80025ba:	f7ff f993 	bl	80018e4 <ClearScreen>

      switch(eLocalCurrentState)
 80025be:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	f200 821e 	bhi.w	8002a04 <StartDisplayTask+0x48c>
 80025c8:	a201      	add	r2, pc, #4	@ (adr r2, 80025d0 <StartDisplayTask+0x58>)
 80025ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ce:	bf00      	nop
 80025d0:	080025e9 	.word	0x080025e9
 80025d4:	08002603 	.word	0x08002603
 80025d8:	08002613 	.word	0x08002613
 80025dc:	08002623 	.word	0x08002623
 80025e0:	080026af 	.word	0x080026af
 80025e4:	0800293b 	.word	0x0800293b
      {
          case eInitGame:
          {
            ILI9488_DrawImage_RGB666(100, 10, Logo300_map.width, Logo300_map.height, Logo300_map.pixel_data);
 80025e8:	4ba7      	ldr	r3, [pc, #668]	@ (8002888 <StartDisplayTask+0x310>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4ba6      	ldr	r3, [pc, #664]	@ (8002888 <StartDisplayTask+0x310>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	49a5      	ldr	r1, [pc, #660]	@ (800288c <StartDisplayTask+0x314>)
 80025f6:	9100      	str	r1, [sp, #0]
 80025f8:	210a      	movs	r1, #10
 80025fa:	2064      	movs	r0, #100	@ 0x64
 80025fc:	f7fe fe5d 	bl	80012ba <ILI9488_DrawImage_RGB666>
            break;
 8002600:	e20f      	b.n	8002a22 <StartDisplayTask+0x4aa>
          }
          case eDificultSelect:
          {
            DrawMenu("Selecione Dificuldade", difficultyOptions, MENU_OPTIONS_DIFFICULTY, selectedOption);
 8002602:	4ba3      	ldr	r3, [pc, #652]	@ (8002890 <StartDisplayTask+0x318>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2203      	movs	r2, #3
 8002608:	49a2      	ldr	r1, [pc, #648]	@ (8002894 <StartDisplayTask+0x31c>)
 800260a:	48a3      	ldr	r0, [pc, #652]	@ (8002898 <StartDisplayTask+0x320>)
 800260c:	f7ff f97a 	bl	8001904 <DrawMenu>
            break;
 8002610:	e207      	b.n	8002a22 <StartDisplayTask+0x4aa>
          }
          case ePersonaSelect:
          {
            DrawMenu("Selecione Personagem", personaOptions, MENU_OPTIONS_PERSONA, selectedOption);
 8002612:	4b9f      	ldr	r3, [pc, #636]	@ (8002890 <StartDisplayTask+0x318>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2205      	movs	r2, #5
 8002618:	49a0      	ldr	r1, [pc, #640]	@ (800289c <StartDisplayTask+0x324>)
 800261a:	48a1      	ldr	r0, [pc, #644]	@ (80028a0 <StartDisplayTask+0x328>)
 800261c:	f7ff f972 	bl	8001904 <DrawMenu>
            break;
 8002620:	e1ff      	b.n	8002a22 <StartDisplayTask+0x4aa>
          }
          case eBattleInit:
          {
            ILI9488_WriteString(10, 15, "Prepare seus ataques!", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002622:	4ba0      	ldr	r3, [pc, #640]	@ (80028a4 <StartDisplayTask+0x32c>)
 8002624:	2200      	movs	r2, #0
 8002626:	9202      	str	r2, [sp, #8]
 8002628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800262c:	9201      	str	r2, [sp, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	9200      	str	r2, [sp, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a9c      	ldr	r2, [pc, #624]	@ (80028a8 <StartDisplayTask+0x330>)
 8002636:	210f      	movs	r1, #15
 8002638:	200a      	movs	r0, #10
 800263a:	f7fe fddf 	bl	80011fc <ILI9488_WriteString>
            ILI9488_WriteString(10, 35, "Posicione os 4 cubos e pressione *", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 800263e:	4b99      	ldr	r3, [pc, #612]	@ (80028a4 <StartDisplayTask+0x32c>)
 8002640:	2200      	movs	r2, #0
 8002642:	9202      	str	r2, [sp, #8]
 8002644:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002648:	9201      	str	r2, [sp, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	9200      	str	r2, [sp, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a96      	ldr	r2, [pc, #600]	@ (80028ac <StartDisplayTask+0x334>)
 8002652:	2123      	movs	r1, #35	@ 0x23
 8002654:	200a      	movs	r0, #10
 8002656:	f7fe fdd1 	bl	80011fc <ILI9488_WriteString>
            for (int i = 0; i < 4; i++) {
 800265a:	2300      	movs	r3, #0
 800265c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800265e:	e022      	b.n	80026a6 <StartDisplayTask+0x12e>
              sprintf(buffer, "Sensor %d:", i + 1);
 8002660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	f107 0318 	add.w	r3, r7, #24
 8002668:	4991      	ldr	r1, [pc, #580]	@ (80028b0 <StartDisplayTask+0x338>)
 800266a:	4618      	mov	r0, r3
 800266c:	f007 fa4a 	bl	8009b04 <siprintf>
              ILI9488_WriteString(20, 80 + (i * 30), buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	b29b      	uxth	r3, r3
 800267e:	3350      	adds	r3, #80	@ 0x50
 8002680:	b299      	uxth	r1, r3
 8002682:	4b88      	ldr	r3, [pc, #544]	@ (80028a4 <StartDisplayTask+0x32c>)
 8002684:	f107 0018 	add.w	r0, r7, #24
 8002688:	2200      	movs	r2, #0
 800268a:	9202      	str	r2, [sp, #8]
 800268c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4602      	mov	r2, r0
 800269a:	2014      	movs	r0, #20
 800269c:	f7fe fdae 	bl	80011fc <ILI9488_WriteString>
            for (int i = 0; i < 4; i++) {
 80026a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a2:	3301      	adds	r3, #1
 80026a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	ddd9      	ble.n	8002660 <StartDisplayTask+0xe8>
              }
            break;
 80026ac:	e1b9      	b.n	8002a22 <StartDisplayTask+0x4aa>
          }
          case ePlayerTurn:
          {
            ILI9488_WriteString(10, 20, "Resultado do Round", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80026ae:	4b7d      	ldr	r3, [pc, #500]	@ (80028a4 <StartDisplayTask+0x32c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	9202      	str	r2, [sp, #8]
 80026b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	9200      	str	r2, [sp, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a7c      	ldr	r2, [pc, #496]	@ (80028b4 <StartDisplayTask+0x33c>)
 80026c2:	2114      	movs	r1, #20
 80026c4:	200a      	movs	r0, #10
 80026c6:	f7fe fd99 	bl	80011fc <ILI9488_WriteString>
            sprintf(buffer, "Sua Vida: %d", eUserPlayer.u8HeartPoints);
 80026ca:	4b7b      	ldr	r3, [pc, #492]	@ (80028b8 <StartDisplayTask+0x340>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	f107 0318 	add.w	r3, r7, #24
 80026d6:	4979      	ldr	r1, [pc, #484]	@ (80028bc <StartDisplayTask+0x344>)
 80026d8:	4618      	mov	r0, r3
 80026da:	f007 fa13 	bl	8009b04 <siprintf>
            ILI9488_WriteString(10, 60, buffer, Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 80026de:	4b71      	ldr	r3, [pc, #452]	@ (80028a4 <StartDisplayTask+0x32c>)
 80026e0:	f107 0118 	add.w	r1, r7, #24
 80026e4:	2200      	movs	r2, #0
 80026e6:	9202      	str	r2, [sp, #8]
 80026e8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80026ec:	9201      	str	r2, [sp, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	9200      	str	r2, [sp, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	460a      	mov	r2, r1
 80026f6:	213c      	movs	r1, #60	@ 0x3c
 80026f8:	200a      	movs	r0, #10
 80026fa:	f7fe fd7f 	bl	80011fc <ILI9488_WriteString>
            sprintf(buffer, "Vida CPU: %d", eCpuPlayer.u8HeartPoints);
 80026fe:	4b70      	ldr	r3, [pc, #448]	@ (80028c0 <StartDisplayTask+0x348>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	f107 0318 	add.w	r3, r7, #24
 800270a:	496e      	ldr	r1, [pc, #440]	@ (80028c4 <StartDisplayTask+0x34c>)
 800270c:	4618      	mov	r0, r3
 800270e:	f007 f9f9 	bl	8009b04 <siprintf>
            ILI9488_WriteString(10, 90, buffer, Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8002712:	4b64      	ldr	r3, [pc, #400]	@ (80028a4 <StartDisplayTask+0x32c>)
 8002714:	f107 0118 	add.w	r1, r7, #24
 8002718:	2200      	movs	r2, #0
 800271a:	9202      	str	r2, [sp, #8]
 800271c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002720:	9201      	str	r2, [sp, #4]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	9200      	str	r2, [sp, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	460a      	mov	r2, r1
 800272a:	215a      	movs	r1, #90	@ 0x5a
 800272c:	200a      	movs	r0, #10
 800272e:	f7fe fd65 	bl	80011fc <ILI9488_WriteString>
            ILI9488_WriteString(10, 130, "Seus Ataques:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002732:	4b5c      	ldr	r3, [pc, #368]	@ (80028a4 <StartDisplayTask+0x32c>)
 8002734:	2200      	movs	r2, #0
 8002736:	9202      	str	r2, [sp, #8]
 8002738:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800273c:	9201      	str	r2, [sp, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	9200      	str	r2, [sp, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a60      	ldr	r2, [pc, #384]	@ (80028c8 <StartDisplayTask+0x350>)
 8002746:	2182      	movs	r1, #130	@ 0x82
 8002748:	200a      	movs	r0, #10
 800274a:	f7fe fd57 	bl	80011fc <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002754:	e04e      	b.n	80027f4 <StartDisplayTask+0x27c>
                uint16_t attackColor = ILI9488_WHITE;
 8002756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800275a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                switch(eUserPlayer.eAttackSequential[i]) {
 800275e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002762:	4a55      	ldr	r2, [pc, #340]	@ (80028b8 <StartDisplayTask+0x340>)
 8002764:	4413      	add	r3, r2
 8002766:	789b      	ldrb	r3, [r3, #2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b05      	cmp	r3, #5
 800276c:	d82b      	bhi.n	80027c6 <StartDisplayTask+0x24e>
 800276e:	a201      	add	r2, pc, #4	@ (adr r2, 8002774 <StartDisplayTask+0x1fc>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	0800278d 	.word	0x0800278d
 8002778:	08002797 	.word	0x08002797
 800277c:	0800279f 	.word	0x0800279f
 8002780:	080027a9 	.word	0x080027a9
 8002784:	080027b3 	.word	0x080027b3
 8002788:	080027bd 	.word	0x080027bd
                    case eRed:    attackColor = ILI9488_RED;   break;
 800278c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002790:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8002794:	e017      	b.n	80027c6 <StartDisplayTask+0x24e>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 8002796:	231f      	movs	r3, #31
 8002798:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800279c:	e013      	b.n	80027c6 <StartDisplayTask+0x24e>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 800279e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80027a2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80027a6:	e00e      	b.n	80027c6 <StartDisplayTask+0x24e>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 80027a8:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 80027ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80027b0:	e009      	b.n	80027c6 <StartDisplayTask+0x24e>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 80027b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027b6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80027ba:	e004      	b.n	80027c6 <StartDisplayTask+0x24e>
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 80027bc:	f246 330c 	movw	r3, #25356	@ 0x630c
 80027c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80027c4:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 150, 20, 20, attackColor);
 80027c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	330a      	adds	r3, #10
 80027d8:	b298      	uxth	r0, r3
 80027da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2314      	movs	r3, #20
 80027e2:	2214      	movs	r2, #20
 80027e4:	2196      	movs	r1, #150	@ 0x96
 80027e6:	f7fe fc69 	bl	80010bc <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 80027ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80027ee:	3301      	adds	r3, #1
 80027f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80027f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d9ac      	bls.n	8002756 <StartDisplayTask+0x1de>
            }
            ILI9488_WriteString(10, 190, "Ataques CPU:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80027fc:	4b29      	ldr	r3, [pc, #164]	@ (80028a4 <StartDisplayTask+0x32c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	9202      	str	r2, [sp, #8]
 8002802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002806:	9201      	str	r2, [sp, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	9200      	str	r2, [sp, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2f      	ldr	r2, [pc, #188]	@ (80028cc <StartDisplayTask+0x354>)
 8002810:	21be      	movs	r1, #190	@ 0xbe
 8002812:	200a      	movs	r0, #10
 8002814:	f7fe fcf2 	bl	80011fc <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002818:	2300      	movs	r3, #0
 800281a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800281e:	e078      	b.n	8002912 <StartDisplayTask+0x39a>
                uint16_t attackColor = ILI9488_WHITE;
 8002820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002824:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                switch(eCpuPlayer.eAttackSequential[i]) {
 8002828:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800282c:	4a24      	ldr	r2, [pc, #144]	@ (80028c0 <StartDisplayTask+0x348>)
 800282e:	4413      	add	r3, r2
 8002830:	789b      	ldrb	r3, [r3, #2]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b05      	cmp	r3, #5
 8002836:	d855      	bhi.n	80028e4 <StartDisplayTask+0x36c>
 8002838:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <StartDisplayTask+0x2c8>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002859 	.word	0x08002859
 8002844:	08002863 	.word	0x08002863
 8002848:	0800286b 	.word	0x0800286b
 800284c:	08002875 	.word	0x08002875
 8002850:	080028d1 	.word	0x080028d1
 8002854:	080028db 	.word	0x080028db
                    case eRed:    attackColor = ILI9488_RED;   break;
 8002858:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800285c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8002860:	e040      	b.n	80028e4 <StartDisplayTask+0x36c>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 8002862:	231f      	movs	r3, #31
 8002864:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8002868:	e03c      	b.n	80028e4 <StartDisplayTask+0x36c>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 800286a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800286e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8002872:	e037      	b.n	80028e4 <StartDisplayTask+0x36c>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 8002874:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8002878:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800287c:	e032      	b.n	80028e4 <StartDisplayTask+0x36c>
 800287e:	bf00      	nop
 8002880:	20000468 	.word	0x20000468
 8002884:	2000046d 	.word	0x2000046d
 8002888:	0800aff0 	.word	0x0800aff0
 800288c:	0800b000 	.word	0x0800b000
 8002890:	20000470 	.word	0x20000470
 8002894:	2000004c 	.word	0x2000004c
 8002898:	0800ae60 	.word	0x0800ae60
 800289c:	20000058 	.word	0x20000058
 80028a0:	0800ae78 	.word	0x0800ae78
 80028a4:	20000000 	.word	0x20000000
 80028a8:	0800ae90 	.word	0x0800ae90
 80028ac:	0800aea8 	.word	0x0800aea8
 80028b0:	0800aecc 	.word	0x0800aecc
 80028b4:	0800aed8 	.word	0x0800aed8
 80028b8:	20000478 	.word	0x20000478
 80028bc:	0800aeec 	.word	0x0800aeec
 80028c0:	20000480 	.word	0x20000480
 80028c4:	0800aefc 	.word	0x0800aefc
 80028c8:	0800af0c 	.word	0x0800af0c
 80028cc:	0800af1c 	.word	0x0800af1c
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 80028d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80028d8:	e004      	b.n	80028e4 <StartDisplayTask+0x36c>
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 80028da:	f246 330c 	movw	r3, #25356	@ 0x630c
 80028de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80028e2:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 210, 20, 20, attackColor);
 80028e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	330a      	adds	r3, #10
 80028f6:	b298      	uxth	r0, r3
 80028f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2314      	movs	r3, #20
 8002900:	2214      	movs	r2, #20
 8002902:	21d2      	movs	r1, #210	@ 0xd2
 8002904:	f7fe fbda 	bl	80010bc <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002908:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800290c:	3301      	adds	r3, #1
 800290e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002912:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002916:	2b03      	cmp	r3, #3
 8002918:	d982      	bls.n	8002820 <StartDisplayTask+0x2a8>
            }
            ILI9488_WriteString(10, 280, "Pressione * para continuar...", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 800291a:	4b9d      	ldr	r3, [pc, #628]	@ (8002b90 <StartDisplayTask+0x618>)
 800291c:	2200      	movs	r2, #0
 800291e:	9202      	str	r2, [sp, #8]
 8002920:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002924:	9201      	str	r2, [sp, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	9200      	str	r2, [sp, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a99      	ldr	r2, [pc, #612]	@ (8002b94 <StartDisplayTask+0x61c>)
 800292e:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002932:	200a      	movs	r0, #10
 8002934:	f7fe fc62 	bl	80011fc <ILI9488_WriteString>
            break;
 8002938:	e073      	b.n	8002a22 <StartDisplayTask+0x4aa>
          }
          case eEndGame:
          {
            if (eUserPlayer.u8HeartPoints > 0) {
 800293a:	4b97      	ldr	r3, [pc, #604]	@ (8002b98 <StartDisplayTask+0x620>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00e      	beq.n	8002962 <StartDisplayTask+0x3ea>
                ILI9488_WriteString(70, 80, "VITORIA!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8002944:	4b92      	ldr	r3, [pc, #584]	@ (8002b90 <StartDisplayTask+0x618>)
 8002946:	2200      	movs	r2, #0
 8002948:	9202      	str	r2, [sp, #8]
 800294a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800294e:	9201      	str	r2, [sp, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	9200      	str	r2, [sp, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a91      	ldr	r2, [pc, #580]	@ (8002b9c <StartDisplayTask+0x624>)
 8002958:	2150      	movs	r1, #80	@ 0x50
 800295a:	2046      	movs	r0, #70	@ 0x46
 800295c:	f7fe fc4e 	bl	80011fc <ILI9488_WriteString>
 8002960:	e00d      	b.n	800297e <StartDisplayTask+0x406>
            } else {
                ILI9488_WriteString(70, 80, "DERROTA!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8002962:	4b8b      	ldr	r3, [pc, #556]	@ (8002b90 <StartDisplayTask+0x618>)
 8002964:	2200      	movs	r2, #0
 8002966:	9202      	str	r2, [sp, #8]
 8002968:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800296c:	9201      	str	r2, [sp, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	9200      	str	r2, [sp, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a8a      	ldr	r2, [pc, #552]	@ (8002ba0 <StartDisplayTask+0x628>)
 8002976:	2150      	movs	r1, #80	@ 0x50
 8002978:	2046      	movs	r0, #70	@ 0x46
 800297a:	f7fe fc3f 	bl	80011fc <ILI9488_WriteString>
            }
            sprintf(buffer, "Sua Vida Final: %d", eUserPlayer.u8HeartPoints);
 800297e:	4b86      	ldr	r3, [pc, #536]	@ (8002b98 <StartDisplayTask+0x620>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	f107 0318 	add.w	r3, r7, #24
 800298a:	4986      	ldr	r1, [pc, #536]	@ (8002ba4 <StartDisplayTask+0x62c>)
 800298c:	4618      	mov	r0, r3
 800298e:	f007 f8b9 	bl	8009b04 <siprintf>
            ILI9488_WriteString(10, 140, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002992:	4b7f      	ldr	r3, [pc, #508]	@ (8002b90 <StartDisplayTask+0x618>)
 8002994:	f107 0118 	add.w	r1, r7, #24
 8002998:	2200      	movs	r2, #0
 800299a:	9202      	str	r2, [sp, #8]
 800299c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029a0:	9201      	str	r2, [sp, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	9200      	str	r2, [sp, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	460a      	mov	r2, r1
 80029aa:	218c      	movs	r1, #140	@ 0x8c
 80029ac:	200a      	movs	r0, #10
 80029ae:	f7fe fc25 	bl	80011fc <ILI9488_WriteString>
            sprintf(buffer, "Vida Final CPU: %d", eCpuPlayer.u8HeartPoints);
 80029b2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba8 <StartDisplayTask+0x630>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	f107 0318 	add.w	r3, r7, #24
 80029be:	497b      	ldr	r1, [pc, #492]	@ (8002bac <StartDisplayTask+0x634>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f007 f89f 	bl	8009b04 <siprintf>
            ILI9488_WriteString(10, 160, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80029c6:	4b72      	ldr	r3, [pc, #456]	@ (8002b90 <StartDisplayTask+0x618>)
 80029c8:	f107 0118 	add.w	r1, r7, #24
 80029cc:	2200      	movs	r2, #0
 80029ce:	9202      	str	r2, [sp, #8]
 80029d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029d4:	9201      	str	r2, [sp, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	460a      	mov	r2, r1
 80029de:	21a0      	movs	r1, #160	@ 0xa0
 80029e0:	200a      	movs	r0, #10
 80029e2:	f7fe fc0b 	bl	80011fc <ILI9488_WriteString>
            ILI9488_WriteString(10, 250, "Pressione * para recomecar", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 80029e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002b90 <StartDisplayTask+0x618>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	9202      	str	r2, [sp, #8]
 80029ec:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80029f0:	9201      	str	r2, [sp, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	9200      	str	r2, [sp, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6d      	ldr	r2, [pc, #436]	@ (8002bb0 <StartDisplayTask+0x638>)
 80029fa:	21fa      	movs	r1, #250	@ 0xfa
 80029fc:	200a      	movs	r0, #10
 80029fe:	f7fe fbfd 	bl	80011fc <ILI9488_WriteString>
            break;
 8002a02:	e00e      	b.n	8002a22 <StartDisplayTask+0x4aa>
          }
          default:
          {
            ILI9488_WriteString(10, 10, "Erro de Estado!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8002a04:	4b62      	ldr	r3, [pc, #392]	@ (8002b90 <StartDisplayTask+0x618>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	9202      	str	r2, [sp, #8]
 8002a0a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002a0e:	9201      	str	r2, [sp, #4]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	9200      	str	r2, [sp, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a67      	ldr	r2, [pc, #412]	@ (8002bb4 <StartDisplayTask+0x63c>)
 8002a18:	210a      	movs	r1, #10
 8002a1a:	200a      	movs	r0, #10
 8002a1c:	f7fe fbee 	bl	80011fc <ILI9488_WriteString>
            break;
 8002a20:	bf00      	nop
          }
      }
      ePreviousState = eLocalCurrentState;    
 8002a22:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002a26:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    if (eLocalCurrentState == eBattleInit)
 8002a2a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	f040 80aa 	bne.w	8002b88 <StartDisplayTask+0x610>
    {
        for (int i = 0; i < 4; i++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a38:	e0a2      	b.n	8002b80 <StartDisplayTask+0x608>
            EColor detectedColor = TCS3472_DetectColor(colorData[i]);
 8002a3a:	4a5f      	ldr	r2, [pc, #380]	@ (8002bb8 <StartDisplayTask+0x640>)
 8002a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a46:	f7fe fda1 	bl	800158c <TCS3472_DetectColor>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            uint16_t colorBox = ILI9488_BLACK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	877b      	strh	r3, [r7, #58]	@ 0x3a
            char colorName[10] = "Vazio";
 8002a54:	4a59      	ldr	r2, [pc, #356]	@ (8002bbc <StartDisplayTask+0x644>)
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a5e:	6018      	str	r0, [r3, #0]
 8002a60:	3304      	adds	r3, #4
 8002a62:	8019      	strh	r1, [r3, #0]
 8002a64:	f107 0312 	add.w	r3, r7, #18
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

            switch(detectedColor) {
 8002a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d849      	bhi.n	8002b08 <StartDisplayTask+0x590>
 8002a74:	a201      	add	r2, pc, #4	@ (adr r2, 8002a7c <StartDisplayTask+0x504>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002a91 	.word	0x08002a91
 8002a80:	08002aa9 	.word	0x08002aa9
 8002a84:	08002abf 	.word	0x08002abf
 8002a88:	08002ad9 	.word	0x08002ad9
 8002a8c:	08002af1 	.word	0x08002af1
                case eRed:    colorBox = ILI9488_RED;   strcpy(colorName, "Fogo");   break;
 8002a90:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a94:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	4a49      	ldr	r2, [pc, #292]	@ (8002bc0 <StartDisplayTask+0x648>)
 8002a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aa0:	6018      	str	r0, [r3, #0]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	7019      	strb	r1, [r3, #0]
 8002aa6:	e030      	b.n	8002b0a <StartDisplayTask+0x592>
                case eBlue:   colorBox = ILI9488_BLUE;  strcpy(colorName, "Agua");   break;
 8002aa8:	231f      	movs	r3, #31
 8002aaa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4a44      	ldr	r2, [pc, #272]	@ (8002bc4 <StartDisplayTask+0x64c>)
 8002ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ab6:	6018      	str	r0, [r3, #0]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	7019      	strb	r1, [r3, #0]
 8002abc:	e025      	b.n	8002b0a <StartDisplayTask+0x592>
                case eGreen:  colorBox = ILI9488_CYAN;  strcpy(colorName, "Ar");     break;
 8002abe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002ac2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	4a3f      	ldr	r2, [pc, #252]	@ (8002bc8 <StartDisplayTask+0x650>)
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	4611      	mov	r1, r2
 8002ace:	8019      	strh	r1, [r3, #0]
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	0c12      	lsrs	r2, r2, #16
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e018      	b.n	8002b0a <StartDisplayTask+0x592>
                case eYellow: colorBox = ILI9488_BROWN; strcpy(colorName, "Terra");  break;
 8002ad8:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8002adc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	4a3a      	ldr	r2, [pc, #232]	@ (8002bcc <StartDisplayTask+0x654>)
 8002ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae8:	6018      	str	r0, [r3, #0]
 8002aea:	3304      	adds	r3, #4
 8002aec:	8019      	strh	r1, [r3, #0]
 8002aee:	e00c      	b.n	8002b0a <StartDisplayTask+0x592>
                case eWhite:  colorBox = ILI9488_WHITE; strcpy(colorName, "Luz?");   break;
 8002af0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002af4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002af6:	f107 030c 	add.w	r3, r7, #12
 8002afa:	4a35      	ldr	r2, [pc, #212]	@ (8002bd0 <StartDisplayTask+0x658>)
 8002afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b00:	6018      	str	r0, [r3, #0]
 8002b02:	3304      	adds	r3, #4
 8002b04:	7019      	strb	r1, [r3, #0]
 8002b06:	e000      	b.n	8002b0a <StartDisplayTask+0x592>
                default: break;
 8002b08:	bf00      	nop
            }

            // APAGA a área do nome da cor antiga desenhando um retângulo preto por cima
            ILI9488_FillRectangle(100, 80 + (i * 30), 45, 10, ILI9488_BLACK);
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3350      	adds	r3, #80	@ 0x50
 8002b1a:	b299      	uxth	r1, r3
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	230a      	movs	r3, #10
 8002b22:	222d      	movs	r2, #45	@ 0x2d
 8002b24:	2064      	movs	r0, #100	@ 0x64
 8002b26:	f7fe fac9 	bl	80010bc <ILI9488_FillRectangle>
            // Escreve o novo nome da cor
            ILI9488_WriteString(100, 80 + (i * 30), colorName, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3350      	adds	r3, #80	@ 0x50
 8002b3a:	b299      	uxth	r1, r3
 8002b3c:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <StartDisplayTask+0x618>)
 8002b3e:	f107 000c 	add.w	r0, r7, #12
 8002b42:	2200      	movs	r2, #0
 8002b44:	9202      	str	r2, [sp, #8]
 8002b46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b4a:	9201      	str	r2, [sp, #4]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	9200      	str	r2, [sp, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4602      	mov	r2, r0
 8002b54:	2064      	movs	r0, #100	@ 0x64
 8002b56:	f7fe fb51 	bl	80011fc <ILI9488_WriteString>
            // Redesenha o quadrado colorido
            ILI9488_FillRectangle(150, 75 + (i * 30), 20, 20, colorBox);
 8002b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	334b      	adds	r3, #75	@ 0x4b
 8002b6a:	b299      	uxth	r1, r3
 8002b6c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2314      	movs	r3, #20
 8002b72:	2214      	movs	r2, #20
 8002b74:	2096      	movs	r0, #150	@ 0x96
 8002b76:	f7fe faa1 	bl	80010bc <ILI9488_FillRectangle>
        for (int i = 0; i < 4; i++) {
 8002b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	f77f af59 	ble.w	8002a3a <StartDisplayTask+0x4c2>
        }
    }

    HAL_Delay(10);
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f000 fb29 	bl	80031e0 <HAL_Delay>
  {
 8002b8e:	e4fd      	b.n	800258c <StartDisplayTask+0x14>
 8002b90:	20000000 	.word	0x20000000
 8002b94:	0800af2c 	.word	0x0800af2c
 8002b98:	20000478 	.word	0x20000478
 8002b9c:	0800af4c 	.word	0x0800af4c
 8002ba0:	0800af58 	.word	0x0800af58
 8002ba4:	0800af64 	.word	0x0800af64
 8002ba8:	20000480 	.word	0x20000480
 8002bac:	0800af78 	.word	0x0800af78
 8002bb0:	0800af8c 	.word	0x0800af8c
 8002bb4:	0800afa8 	.word	0x0800afa8
 8002bb8:	20000488 	.word	0x20000488
 8002bbc:	0800afdc 	.word	0x0800afdc
 8002bc0:	0800afb8 	.word	0x0800afb8
 8002bc4:	0800afc0 	.word	0x0800afc0
 8002bc8:	0800afc8 	.word	0x0800afc8
 8002bcc:	0800afcc 	.word	0x0800afcc
 8002bd0:	0800afd4 	.word	0x0800afd4

08002bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <Error_Handler+0x8>

08002be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	4b22      	ldr	r3, [pc, #136]	@ (8002c74 <HAL_MspInit+0x94>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	4a21      	ldr	r2, [pc, #132]	@ (8002c74 <HAL_MspInit+0x94>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <HAL_MspInit+0x94>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_MspInit+0x94>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c74 <HAL_MspInit+0x94>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c12:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <HAL_MspInit+0x94>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	210f      	movs	r1, #15
 8002c22:	f06f 0001 	mvn.w	r0, #1
 8002c26:	f000 fbda 	bl	80033de <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2105      	movs	r1, #5
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f000 fbd5 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002c34:	2001      	movs	r0, #1
 8002c36:	f000 fbee 	bl	8003416 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2105      	movs	r1, #5
 8002c3e:	2004      	movs	r0, #4
 8002c40:	f000 fbcd 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002c44:	2004      	movs	r0, #4
 8002c46:	f000 fbe6 	bl	8003416 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2105      	movs	r1, #5
 8002c4e:	2005      	movs	r0, #5
 8002c50:	f000 fbc5 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002c54:	2005      	movs	r0, #5
 8002c56:	f000 fbde 	bl	8003416 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2105      	movs	r1, #5
 8002c5e:	2051      	movs	r0, #81	@ 0x51
 8002c60:	f000 fbbd 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002c64:	2051      	movs	r0, #81	@ 0x51
 8002c66:	f000 fbd6 	bl	8003416 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	@ 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	@ (8002cfc <HAL_I2C_MspInit+0x84>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d12c      	bne.n	8002cf4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b18      	ldr	r3, [pc, #96]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	4a17      	ldr	r2, [pc, #92]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002cb6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cbc:	2312      	movs	r3, #18
 8002cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	480c      	ldr	r0, [pc, #48]	@ (8002d04 <HAL_I2C_MspInit+0x8c>)
 8002cd4:	f000 fde0 	bl	8003898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	4a07      	ldr	r2, [pc, #28]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002ce2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ce6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_I2C_MspInit+0x88>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002cf4:	bf00      	nop
 8002cf6:	3728      	adds	r7, #40	@ 0x28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40005400 	.word	0x40005400
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020400 	.word	0x40020400

08002d08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <HAL_SPI_MspInit+0x94>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d133      	bne.n	8002d92 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002da0 <HAL_SPI_MspInit+0x98>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	4a1b      	ldr	r2, [pc, #108]	@ (8002da0 <HAL_SPI_MspInit+0x98>)
 8002d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d3a:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <HAL_SPI_MspInit+0x98>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <HAL_SPI_MspInit+0x98>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	4a14      	ldr	r2, [pc, #80]	@ (8002da0 <HAL_SPI_MspInit+0x98>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d56:	4b12      	ldr	r3, [pc, #72]	@ (8002da0 <HAL_SPI_MspInit+0x98>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8002d62:	23e0      	movs	r3, #224	@ 0xe0
 8002d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d72:	2305      	movs	r3, #5
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4809      	ldr	r0, [pc, #36]	@ (8002da4 <HAL_SPI_MspInit+0x9c>)
 8002d7e:	f000 fd8b 	bl	8003898 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2105      	movs	r1, #5
 8002d86:	2023      	movs	r0, #35	@ 0x23
 8002d88:	f000 fb29 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002d8c:	2023      	movs	r0, #35	@ 0x23
 8002d8e:	f000 fb42 	bl	8003416 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002d92:	bf00      	nop
 8002d94:	3728      	adds	r7, #40	@ 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40013000 	.word	0x40013000
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40020000 	.word	0x40020000

08002da8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	@ 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e3c <HAL_UART_MspInit+0x94>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d133      	bne.n	8002e32 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	4b1c      	ldr	r3, [pc, #112]	@ (8002e40 <HAL_UART_MspInit+0x98>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e40 <HAL_UART_MspInit+0x98>)
 8002dd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dda:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_UART_MspInit+0x98>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <HAL_UART_MspInit+0x98>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	4a14      	ldr	r2, [pc, #80]	@ (8002e40 <HAL_UART_MspInit+0x98>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <HAL_UART_MspInit+0x98>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e02:	2303      	movs	r3, #3
 8002e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e12:	2308      	movs	r3, #8
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4809      	ldr	r0, [pc, #36]	@ (8002e44 <HAL_UART_MspInit+0x9c>)
 8002e1e:	f000 fd3b 	bl	8003898 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2105      	movs	r1, #5
 8002e26:	2034      	movs	r0, #52	@ 0x34
 8002e28:	f000 fad9 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002e2c:	2034      	movs	r0, #52	@ 0x34
 8002e2e:	f000 faf2 	bl	8003416 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8002e32:	bf00      	nop
 8002e34:	3728      	adds	r7, #40	@ 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40004c00 	.word	0x40004c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020000 	.word	0x40020000

08002e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <NMI_Handler+0x4>

08002e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <HardFault_Handler+0x4>

08002e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <MemManage_Handler+0x4>

08002e60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e64:	bf00      	nop
 8002e66:	e7fd      	b.n	8002e64 <BusFault_Handler+0x4>

08002e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <UsageFault_Handler+0x4>

08002e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e82:	f000 f98d 	bl	80031a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002e86:	f005 fea7 	bl	8008bd8 <xTaskGetSchedulerState>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d001      	beq.n	8002e94 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e90:	f006 fa8a 	bl	80093a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002e9c:	f002 f99c 	bl	80051d8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002ea8:	f000 fb62 	bl	8003570 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ec4:	4802      	ldr	r0, [pc, #8]	@ (8002ed0 <SPI1_IRQHandler+0x10>)
 8002ec6:	f002 ffc7 	bl	8005e58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200003bc 	.word	0x200003bc

08002ed4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ed8:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <UART4_IRQHandler+0x10>)
 8002eda:	f003 fa07 	bl	80062ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000414 	.word	0x20000414

08002ee8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  return 1;
 8002efa:	2301      	movs	r3, #1
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <_kill>:

int _kill(int pid, int sig)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f10:	f006 feac 	bl	8009c6c <__errno>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2216      	movs	r2, #22
 8002f18:	601a      	str	r2, [r3, #0]
  return -1;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <_exit>:

void _exit (int status)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ffe7 	bl	8002f06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <_exit+0x12>

08002f3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	e00a      	b.n	8002f64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f4e:	f3af 8000 	nop.w
 8002f52:	4601      	mov	r1, r0
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	60ba      	str	r2, [r7, #8]
 8002f5a:	b2ca      	uxtb	r2, r1
 8002f5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	3301      	adds	r3, #1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	dbf0      	blt.n	8002f4e <_read+0x12>
  }

  return len;
 8002f6c:	687b      	ldr	r3, [r7, #4]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e009      	b.n	8002f9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	60ba      	str	r2, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	dbf1      	blt.n	8002f88 <_write+0x12>
  }
  return len;
 8002fa4:	687b      	ldr	r3, [r7, #4]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <_close>:

int _close(int file)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <_isatty>:

int _isatty(int file)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fee:	2301      	movs	r3, #1
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003020:	4a14      	ldr	r2, [pc, #80]	@ (8003074 <_sbrk+0x5c>)
 8003022:	4b15      	ldr	r3, [pc, #84]	@ (8003078 <_sbrk+0x60>)
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800302c:	4b13      	ldr	r3, [pc, #76]	@ (800307c <_sbrk+0x64>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003034:	4b11      	ldr	r3, [pc, #68]	@ (800307c <_sbrk+0x64>)
 8003036:	4a12      	ldr	r2, [pc, #72]	@ (8003080 <_sbrk+0x68>)
 8003038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303a:	4b10      	ldr	r3, [pc, #64]	@ (800307c <_sbrk+0x64>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	429a      	cmp	r2, r3
 8003046:	d207      	bcs.n	8003058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003048:	f006 fe10 	bl	8009c6c <__errno>
 800304c:	4603      	mov	r3, r0
 800304e:	220c      	movs	r2, #12
 8003050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	e009      	b.n	800306c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003058:	4b08      	ldr	r3, [pc, #32]	@ (800307c <_sbrk+0x64>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800305e:	4b07      	ldr	r3, [pc, #28]	@ (800307c <_sbrk+0x64>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	4a05      	ldr	r2, [pc, #20]	@ (800307c <_sbrk+0x64>)
 8003068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20020000 	.word	0x20020000
 8003078:	00000400 	.word	0x00000400
 800307c:	200004ac 	.word	0x200004ac
 8003080:	20004358 	.word	0x20004358

08003084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <SystemInit+0x20>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308e:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <SystemInit+0x20>)
 8003090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030ac:	f7ff ffea 	bl	8003084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030b0:	480c      	ldr	r0, [pc, #48]	@ (80030e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030b2:	490d      	ldr	r1, [pc, #52]	@ (80030e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030b4:	4a0d      	ldr	r2, [pc, #52]	@ (80030ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b8:	e002      	b.n	80030c0 <LoopCopyDataInit>

080030ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030be:	3304      	adds	r3, #4

080030c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c4:	d3f9      	bcc.n	80030ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c6:	4a0a      	ldr	r2, [pc, #40]	@ (80030f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030c8:	4c0a      	ldr	r4, [pc, #40]	@ (80030f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030cc:	e001      	b.n	80030d2 <LoopFillZerobss>

080030ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d0:	3204      	adds	r2, #4

080030d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d4:	d3fb      	bcc.n	80030ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030d6:	f006 fdcf 	bl	8009c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030da:	f7fe fd07 	bl	8001aec <main>
  bx  lr    
 80030de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e8:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80030ec:	0804d734 	.word	0x0804d734
  ldr r2, =_sbss
 80030f0:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80030f4:	20004354 	.word	0x20004354

080030f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f8:	e7fe      	b.n	80030f8 <ADC_IRQHandler>
	...

080030fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003100:	4b0e      	ldr	r3, [pc, #56]	@ (800313c <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0d      	ldr	r2, [pc, #52]	@ (800313c <HAL_Init+0x40>)
 8003106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800310a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800310c:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	@ (800313c <HAL_Init+0x40>)
 8003112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003118:	4b08      	ldr	r3, [pc, #32]	@ (800313c <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a07      	ldr	r2, [pc, #28]	@ (800313c <HAL_Init+0x40>)
 800311e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003124:	2003      	movs	r0, #3
 8003126:	f000 f94f 	bl	80033c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312a:	200f      	movs	r0, #15
 800312c:	f000 f808 	bl	8003140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003130:	f7ff fd56 	bl	8002be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00

08003140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_InitTick+0x54>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b12      	ldr	r3, [pc, #72]	@ (8003198 <HAL_InitTick+0x58>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003156:	fbb3 f3f1 	udiv	r3, r3, r1
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f967 	bl	8003432 <HAL_SYSTICK_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00e      	b.n	800318c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b0f      	cmp	r3, #15
 8003172:	d80a      	bhi.n	800318a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003174:	2200      	movs	r2, #0
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f000 f92f 	bl	80033de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003180:	4a06      	ldr	r2, [pc, #24]	@ (800319c <HAL_InitTick+0x5c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	2000006c 	.word	0x2000006c
 8003198:	20000074 	.word	0x20000074
 800319c:	20000070 	.word	0x20000070

080031a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_IncTick+0x20>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_IncTick+0x24>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	4a04      	ldr	r2, [pc, #16]	@ (80031c4 <HAL_IncTick+0x24>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000074 	.word	0x20000074
 80031c4:	200004b0 	.word	0x200004b0

080031c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return uwTick;
 80031cc:	4b03      	ldr	r3, [pc, #12]	@ (80031dc <HAL_GetTick+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	200004b0 	.word	0x200004b0

080031e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e8:	f7ff ffee 	bl	80031c8 <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d005      	beq.n	8003206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <HAL_Delay+0x44>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003206:	bf00      	nop
 8003208:	f7ff ffde 	bl	80031c8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	429a      	cmp	r2, r3
 8003216:	d8f7      	bhi.n	8003208 <HAL_Delay+0x28>
  {
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000074 	.word	0x20000074

08003228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4b0c      	ldr	r3, [pc, #48]	@ (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325a:	4a04      	ldr	r2, [pc, #16]	@ (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60d3      	str	r3, [r2, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003274:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <__NVIC_GetPriorityGrouping+0x18>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 0307 	and.w	r3, r3, #7
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0b      	blt.n	80032b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4907      	ldr	r1, [pc, #28]	@ (80032c4 <__NVIC_EnableIRQ+0x38>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	@ (8003314 <__NVIC_SetPriority+0x4c>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f0:	e00a      	b.n	8003308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	@ (8003318 <__NVIC_SetPriority+0x50>)
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3b04      	subs	r3, #4
 8003300:	0112      	lsls	r2, r2, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	440b      	add	r3, r1
 8003306:	761a      	strb	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	@ 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
         );
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	@ 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003394:	d301      	bcc.n	800339a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003396:	2301      	movs	r3, #1
 8003398:	e00f      	b.n	80033ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339a:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <SysTick_Config+0x40>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a2:	210f      	movs	r1, #15
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f7ff ff8e 	bl	80032c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ac:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <SysTick_Config+0x40>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b2:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <SysTick_Config+0x40>)
 80033b4:	2207      	movs	r2, #7
 80033b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	e000e010 	.word	0xe000e010

080033c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff29 	bl	8003228 <__NVIC_SetPriorityGrouping>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f0:	f7ff ff3e 	bl	8003270 <__NVIC_GetPriorityGrouping>
 80033f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff ff8e 	bl	800331c <NVIC_EncodePriority>
 8003400:	4602      	mov	r2, r0
 8003402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff5d 	bl	80032c8 <__NVIC_SetPriority>
}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff31 	bl	800328c <__NVIC_EnableIRQ>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffa2 	bl	8003384 <SysTick_Config>
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003456:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7ff feb6 	bl	80031c8 <HAL_GetTick>
 800345c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d008      	beq.n	800347c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2280      	movs	r2, #128	@ 0x80
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e052      	b.n	8003522 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0216 	bic.w	r2, r2, #22
 800348a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800349a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d103      	bne.n	80034ac <HAL_DMA_Abort+0x62>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0208 	bic.w	r2, r2, #8
 80034ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034cc:	e013      	b.n	80034f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ce:	f7ff fe7b 	bl	80031c8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d90c      	bls.n	80034f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2203      	movs	r2, #3
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e015      	b.n	8003522 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e4      	bne.n	80034ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	223f      	movs	r2, #63	@ 0x3f
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d004      	beq.n	8003548 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2280      	movs	r2, #128	@ 0x80
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e00c      	b.n	8003562 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2205      	movs	r2, #5
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800357a:	4b49      	ldr	r3, [pc, #292]	@ (80036a0 <HAL_FLASH_IRQHandler+0x130>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d020      	beq.n	80035c8 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003586:	4b47      	ldr	r3, [pc, #284]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8003590:	4b44      	ldr	r3, [pc, #272]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8003596:	4b43      	ldr	r3, [pc, #268]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 8003598:	f04f 32ff 	mov.w	r2, #4294967295
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	e00b      	b.n	80035b8 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80035a0:	4b40      	ldr	r3, [pc, #256]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d103      	bne.n	80035b2 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80035aa:	4b3e      	ldr	r3, [pc, #248]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	e002      	b.n	80035b8 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 80035b2:	4b3c      	ldr	r3, [pc, #240]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 80035b8:	f000 f88a 	bl	80036d0 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f87d 	bl	80036bc <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80035c2:	4b38      	ldr	r3, [pc, #224]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80035c8:	4b35      	ldr	r3, [pc, #212]	@ (80036a0 <HAL_FLASH_IRQHandler+0x130>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d04a      	beq.n	800366a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035d4:	4b32      	ldr	r3, [pc, #200]	@ (80036a0 <HAL_FLASH_IRQHandler+0x130>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80035da:	4b32      	ldr	r3, [pc, #200]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d12d      	bne.n	8003640 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80035e4:	4b2f      	ldr	r3, [pc, #188]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	4a2e      	ldr	r2, [pc, #184]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 80035ec:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 80035ee:	4b2d      	ldr	r3, [pc, #180]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d015      	beq.n	8003622 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80035f6:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f853 	bl	80036a8 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8003602:	4b28      	ldr	r3, [pc, #160]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	3301      	adds	r3, #1
 8003608:	4a26      	ldr	r2, [pc, #152]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 800360a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800360c:	4b25      	ldr	r3, [pc, #148]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8003612:	4b24      	ldr	r3, [pc, #144]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 8003614:	7a1b      	ldrb	r3, [r3, #8]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	4619      	mov	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8ae 	bl	800377c <FLASH_Erase_Sector>
 8003620:	e023      	b.n	800366a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	4a1e      	ldr	r2, [pc, #120]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800362e:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8003634:	f000 f8ea 	bl	800380c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f835 	bl	80036a8 <HAL_FLASH_EndOfOperationCallback>
 800363e:	e014      	b.n	800366a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003640:	4b18      	ldr	r3, [pc, #96]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d107      	bne.n	800365a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 800364a:	f000 f8df 	bl	800380c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800364e:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f828 	bl	80036a8 <HAL_FLASH_EndOfOperationCallback>
 8003658:	e004      	b.n	8003664 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800365a:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f822 	bl	80036a8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003664:	4b0f      	ldr	r3, [pc, #60]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800366a:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <HAL_FLASH_IRQHandler+0x134>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d111      	bne.n	8003698 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <HAL_FLASH_IRQHandler+0x130>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4a09      	ldr	r2, [pc, #36]	@ (80036a0 <HAL_FLASH_IRQHandler+0x130>)
 800367a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800367e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8003680:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <HAL_FLASH_IRQHandler+0x130>)
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	4a06      	ldr	r2, [pc, #24]	@ (80036a0 <HAL_FLASH_IRQHandler+0x130>)
 8003686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800368a:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <HAL_FLASH_IRQHandler+0x130>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	4a03      	ldr	r2, [pc, #12]	@ (80036a0 <HAL_FLASH_IRQHandler+0x130>)
 8003692:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003696:	6113      	str	r3, [r2, #16]
  }
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023c00 	.word	0x40023c00
 80036a4:	20000078 	.word	0x20000078

080036a8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80036d4:	4b27      	ldr	r3, [pc, #156]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036e0:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f043 0310 	orr.w	r3, r3, #16
 80036e8:	4a23      	ldr	r2, [pc, #140]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 80036ea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80036ec:	4b21      	ldr	r3, [pc, #132]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 80036ee:	2210      	movs	r2, #16
 80036f0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80036f2:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80036fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	4a1c      	ldr	r2, [pc, #112]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 8003708:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800370a:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 800370c:	2220      	movs	r2, #32
 800370e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003710:	4b18      	ldr	r3, [pc, #96]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800371c:	4b16      	ldr	r3, [pc, #88]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	4a14      	ldr	r2, [pc, #80]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 8003726:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003728:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 800372a:	2240      	movs	r2, #64	@ 0x40
 800372c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800372e:	4b11      	ldr	r3, [pc, #68]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800373a:	4b0f      	ldr	r3, [pc, #60]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	4a0d      	ldr	r2, [pc, #52]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 8003744:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003746:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 8003748:	2280      	movs	r2, #128	@ 0x80
 800374a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800374c:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003758:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f043 0320 	orr.w	r3, r3, #32
 8003760:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <FLASH_SetErrorCode+0xa8>)
 8003762:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003764:	4b03      	ldr	r3, [pc, #12]	@ (8003774 <FLASH_SetErrorCode+0xa4>)
 8003766:	2202      	movs	r2, #2
 8003768:	60da      	str	r2, [r3, #12]
  }
}
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40023c00 	.word	0x40023c00
 8003778:	20000078 	.word	0x20000078

0800377c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	e010      	b.n	80037ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d103      	bne.n	80037a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800379e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e009      	b.n	80037ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d103      	bne.n	80037b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80037ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e002      	b.n	80037ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80037b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80037ba:	4b13      	ldr	r3, [pc, #76]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80037c6:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	490f      	ldr	r1, [pc, #60]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80037d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037d8:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 80037dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80037de:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4313      	orrs	r3, r2
 80037e8:	4a07      	ldr	r2, [pc, #28]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037ea:	f043 0302 	orr.w	r3, r3, #2
 80037ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	4a04      	ldr	r2, [pc, #16]	@ (8003808 <FLASH_Erase_Sector+0x8c>)
 80037f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fa:	6113      	str	r3, [r2, #16]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40023c00 	.word	0x40023c00

0800380c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003810:	4b20      	ldr	r3, [pc, #128]	@ (8003894 <FLASH_FlushCaches+0x88>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003818:	2b00      	cmp	r3, #0
 800381a:	d017      	beq.n	800384c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800381c:	4b1d      	ldr	r3, [pc, #116]	@ (8003894 <FLASH_FlushCaches+0x88>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <FLASH_FlushCaches+0x88>)
 8003822:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003826:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003828:	4b1a      	ldr	r3, [pc, #104]	@ (8003894 <FLASH_FlushCaches+0x88>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	@ (8003894 <FLASH_FlushCaches+0x88>)
 800382e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b17      	ldr	r3, [pc, #92]	@ (8003894 <FLASH_FlushCaches+0x88>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a16      	ldr	r2, [pc, #88]	@ (8003894 <FLASH_FlushCaches+0x88>)
 800383a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800383e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003840:	4b14      	ldr	r3, [pc, #80]	@ (8003894 <FLASH_FlushCaches+0x88>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a13      	ldr	r2, [pc, #76]	@ (8003894 <FLASH_FlushCaches+0x88>)
 8003846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800384a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800384c:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <FLASH_FlushCaches+0x88>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003854:	2b00      	cmp	r3, #0
 8003856:	d017      	beq.n	8003888 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003858:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <FLASH_FlushCaches+0x88>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0d      	ldr	r2, [pc, #52]	@ (8003894 <FLASH_FlushCaches+0x88>)
 800385e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003862:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003864:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <FLASH_FlushCaches+0x88>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <FLASH_FlushCaches+0x88>)
 800386a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <FLASH_FlushCaches+0x88>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a07      	ldr	r2, [pc, #28]	@ (8003894 <FLASH_FlushCaches+0x88>)
 8003876:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800387a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <FLASH_FlushCaches+0x88>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a04      	ldr	r2, [pc, #16]	@ (8003894 <FLASH_FlushCaches+0x88>)
 8003882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003886:	6013      	str	r3, [r2, #0]
  }
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023c00 	.word	0x40023c00

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	@ 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e16b      	b.n	8003b8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f040 815a 	bne.w	8003b86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d005      	beq.n	80038ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d130      	bne.n	800394c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003920:	2201      	movs	r2, #1
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 0201 	and.w	r2, r3, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d017      	beq.n	8003988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d123      	bne.n	80039dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	08da      	lsrs	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3208      	adds	r2, #8
 800399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	220f      	movs	r2, #15
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80b4 	beq.w	8003b86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b60      	ldr	r3, [pc, #384]	@ (8003ba4 <HAL_GPIO_Init+0x30c>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	4a5f      	ldr	r2, [pc, #380]	@ (8003ba4 <HAL_GPIO_Init+0x30c>)
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba4 <HAL_GPIO_Init+0x30c>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a3a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ba8 <HAL_GPIO_Init+0x310>)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a52      	ldr	r2, [pc, #328]	@ (8003bac <HAL_GPIO_Init+0x314>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02b      	beq.n	8003abe <HAL_GPIO_Init+0x226>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a51      	ldr	r2, [pc, #324]	@ (8003bb0 <HAL_GPIO_Init+0x318>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d025      	beq.n	8003aba <HAL_GPIO_Init+0x222>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a50      	ldr	r2, [pc, #320]	@ (8003bb4 <HAL_GPIO_Init+0x31c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <HAL_GPIO_Init+0x21e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4f      	ldr	r2, [pc, #316]	@ (8003bb8 <HAL_GPIO_Init+0x320>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x21a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4e      	ldr	r2, [pc, #312]	@ (8003bbc <HAL_GPIO_Init+0x324>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x216>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4d      	ldr	r2, [pc, #308]	@ (8003bc0 <HAL_GPIO_Init+0x328>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4c      	ldr	r2, [pc, #304]	@ (8003bc4 <HAL_GPIO_Init+0x32c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x20e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc8 <HAL_GPIO_Init+0x330>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x20a>
 8003a9e:	2307      	movs	r3, #7
 8003aa0:	e00e      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	e00c      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aa6:	2306      	movs	r3, #6
 8003aa8:	e00a      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aaa:	2305      	movs	r3, #5
 8003aac:	e008      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	e006      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e004      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e002      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	f002 0203 	and.w	r2, r2, #3
 8003ac6:	0092      	lsls	r2, r2, #2
 8003ac8:	4093      	lsls	r3, r2
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad0:	4935      	ldr	r1, [pc, #212]	@ (8003ba8 <HAL_GPIO_Init+0x310>)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ade:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <HAL_GPIO_Init+0x334>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4013      	ands	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b02:	4a32      	ldr	r2, [pc, #200]	@ (8003bcc <HAL_GPIO_Init+0x334>)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b08:	4b30      	ldr	r3, [pc, #192]	@ (8003bcc <HAL_GPIO_Init+0x334>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b2c:	4a27      	ldr	r2, [pc, #156]	@ (8003bcc <HAL_GPIO_Init+0x334>)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b32:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <HAL_GPIO_Init+0x334>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b56:	4a1d      	ldr	r2, [pc, #116]	@ (8003bcc <HAL_GPIO_Init+0x334>)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_GPIO_Init+0x334>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b80:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <HAL_GPIO_Init+0x334>)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	f67f ae90 	bls.w	80038b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	3724      	adds	r7, #36	@ 0x24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40013800 	.word	0x40013800
 8003bac:	40020000 	.word	0x40020000
 8003bb0:	40020400 	.word	0x40020400
 8003bb4:	40020800 	.word	0x40020800
 8003bb8:	40020c00 	.word	0x40020c00
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40021400 	.word	0x40021400
 8003bc4:	40021800 	.word	0x40021800
 8003bc8:	40021c00 	.word	0x40021c00
 8003bcc:	40013c00 	.word	0x40013c00

08003bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e001      	b.n	8003bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c10:	787b      	ldrb	r3, [r7, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c1c:	e003      	b.n	8003c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c1e:	887b      	ldrh	r3, [r7, #2]
 8003c20:	041a      	lsls	r2, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	619a      	str	r2, [r3, #24]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e12b      	b.n	8003e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff f80c 	bl	8002c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	@ 0x24
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c98:	f001 fee8 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8003c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a81      	ldr	r2, [pc, #516]	@ (8003ea8 <HAL_I2C_Init+0x274>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d807      	bhi.n	8003cb8 <HAL_I2C_Init+0x84>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a80      	ldr	r2, [pc, #512]	@ (8003eac <HAL_I2C_Init+0x278>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	bf94      	ite	ls
 8003cb0:	2301      	movls	r3, #1
 8003cb2:	2300      	movhi	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e006      	b.n	8003cc6 <HAL_I2C_Init+0x92>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a7d      	ldr	r2, [pc, #500]	@ (8003eb0 <HAL_I2C_Init+0x27c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bf94      	ite	ls
 8003cc0:	2301      	movls	r3, #1
 8003cc2:	2300      	movhi	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0e7      	b.n	8003e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a78      	ldr	r2, [pc, #480]	@ (8003eb4 <HAL_I2C_Init+0x280>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0c9b      	lsrs	r3, r3, #18
 8003cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8003ea8 <HAL_I2C_Init+0x274>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d802      	bhi.n	8003d08 <HAL_I2C_Init+0xd4>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3301      	adds	r3, #1
 8003d06:	e009      	b.n	8003d1c <HAL_I2C_Init+0xe8>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	4a69      	ldr	r2, [pc, #420]	@ (8003eb8 <HAL_I2C_Init+0x284>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	099b      	lsrs	r3, r3, #6
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	495c      	ldr	r1, [pc, #368]	@ (8003ea8 <HAL_I2C_Init+0x274>)
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	d819      	bhi.n	8003d70 <HAL_I2C_Init+0x13c>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1e59      	subs	r1, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d50:	400b      	ands	r3, r1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_I2C_Init+0x138>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1e59      	subs	r1, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6a:	e051      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	e04f      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d111      	bne.n	8003d9c <HAL_I2C_Init+0x168>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1e58      	subs	r0, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e012      	b.n	8003dc2 <HAL_I2C_Init+0x18e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e58      	subs	r0, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	0099      	lsls	r1, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Init+0x196>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e022      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10e      	bne.n	8003df0 <HAL_I2C_Init+0x1bc>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1e58      	subs	r0, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	440b      	add	r3, r1
 8003de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dee:	e00f      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	0099      	lsls	r1, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	6809      	ldr	r1, [r1, #0]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6911      	ldr	r1, [r2, #16]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68d2      	ldr	r2, [r2, #12]
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	000186a0 	.word	0x000186a0
 8003eac:	001e847f 	.word	0x001e847f
 8003eb0:	003d08ff 	.word	0x003d08ff
 8003eb4:	431bde83 	.word	0x431bde83
 8003eb8:	10624dd3 	.word	0x10624dd3

08003ebc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	460b      	mov	r3, r1
 8003eca:	817b      	strh	r3, [r7, #10]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ed0:	f7ff f97a 	bl	80031c8 <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	f040 80e0 	bne.w	80040a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2319      	movs	r3, #25
 8003eea:	2201      	movs	r2, #1
 8003eec:	4970      	ldr	r1, [pc, #448]	@ (80040b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 ff3c 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
 8003efc:	e0d3      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_I2C_Master_Transmit+0x50>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e0cc      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d007      	beq.n	8003f32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2221      	movs	r2, #33	@ 0x21
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	893a      	ldrh	r2, [r7, #8]
 8003f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a50      	ldr	r2, [pc, #320]	@ (80040b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f74:	8979      	ldrh	r1, [r7, #10]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fcf6 	bl	800496c <I2C_MasterRequestWrite>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e08d      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fa0:	e066      	b.n	8004070 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fffa 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d107      	bne.n	8003fca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06b      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b04      	cmp	r3, #4
 800400a:	d11b      	bne.n	8004044 <HAL_I2C_Master_Transmit+0x188>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	d017      	beq.n	8004044 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	781a      	ldrb	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	6a39      	ldr	r1, [r7, #32]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fff1 	bl	8005030 <I2C_WaitOnBTFFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00d      	beq.n	8004070 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	2b04      	cmp	r3, #4
 800405a:	d107      	bne.n	800406c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e01a      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d194      	bne.n	8003fa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	00100002 	.word	0x00100002
 80040b4:	ffff0000 	.word	0xffff0000

080040b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	817b      	strh	r3, [r7, #10]
 80040ca:	460b      	mov	r3, r1
 80040cc:	813b      	strh	r3, [r7, #8]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d2:	f7ff f879 	bl	80031c8 <HAL_GetTick>
 80040d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	f040 80d9 	bne.w	8004298 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2319      	movs	r3, #25
 80040ec:	2201      	movs	r2, #1
 80040ee:	496d      	ldr	r1, [pc, #436]	@ (80042a4 <HAL_I2C_Mem_Write+0x1ec>)
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fe3b 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
 80040fe:	e0cc      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_I2C_Mem_Write+0x56>
 800410a:	2302      	movs	r3, #2
 800410c:	e0c5      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	d007      	beq.n	8004134 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2221      	movs	r2, #33	@ 0x21
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2240      	movs	r2, #64	@ 0x40
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004164:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a4d      	ldr	r2, [pc, #308]	@ (80042a8 <HAL_I2C_Mem_Write+0x1f0>)
 8004174:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004176:	88f8      	ldrh	r0, [r7, #6]
 8004178:	893a      	ldrh	r2, [r7, #8]
 800417a:	8979      	ldrh	r1, [r7, #10]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	4603      	mov	r3, r0
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fc72 	bl	8004a70 <I2C_RequestMemoryWrite>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d052      	beq.n	8004238 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e081      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 ff00 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d107      	bne.n	80041be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06b      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	781a      	ldrb	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d11b      	bne.n	8004238 <HAL_I2C_Mem_Write+0x180>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d017      	beq.n	8004238 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1aa      	bne.n	8004196 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fef3 	bl	8005030 <I2C_WaitOnBTFFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	2b04      	cmp	r3, #4
 8004256:	d107      	bne.n	8004268 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e016      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	00100002 	.word	0x00100002
 80042a8:	ffff0000 	.word	0xffff0000

080042ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08c      	sub	sp, #48	@ 0x30
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	817b      	strh	r3, [r7, #10]
 80042be:	460b      	mov	r3, r1
 80042c0:	813b      	strh	r3, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042c6:	f7fe ff7f 	bl	80031c8 <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	f040 8214 	bne.w	8004702 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2319      	movs	r3, #25
 80042e0:	2201      	movs	r2, #1
 80042e2:	497b      	ldr	r1, [pc, #492]	@ (80044d0 <HAL_I2C_Mem_Read+0x224>)
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fd41 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
 80042f2:	e207      	b.n	8004704 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_I2C_Mem_Read+0x56>
 80042fe:	2302      	movs	r3, #2
 8004300:	e200      	b.n	8004704 <HAL_I2C_Mem_Read+0x458>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d007      	beq.n	8004328 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2222      	movs	r2, #34	@ 0x22
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2240      	movs	r2, #64	@ 0x40
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a5b      	ldr	r2, [pc, #364]	@ (80044d4 <HAL_I2C_Mem_Read+0x228>)
 8004368:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800436a:	88f8      	ldrh	r0, [r7, #6]
 800436c:	893a      	ldrh	r2, [r7, #8]
 800436e:	8979      	ldrh	r1, [r7, #10]
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4603      	mov	r3, r0
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fc0e 	bl	8004b9c <I2C_RequestMemoryRead>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1bc      	b.n	8004704 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438e:	2b00      	cmp	r3, #0
 8004390:	d113      	bne.n	80043ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	2300      	movs	r3, #0
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	623b      	str	r3, [r7, #32]
 80043a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e190      	b.n	80046dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d11b      	bne.n	80043fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e170      	b.n	80046dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d11b      	bne.n	800443a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004410:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	e150      	b.n	80046dc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004450:	e144      	b.n	80046dc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004456:	2b03      	cmp	r3, #3
 8004458:	f200 80f1 	bhi.w	800463e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004460:	2b01      	cmp	r3, #1
 8004462:	d123      	bne.n	80044ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004466:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fe29 	bl	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e145      	b.n	8004704 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044aa:	e117      	b.n	80046dc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d14e      	bne.n	8004552 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ba:	2200      	movs	r2, #0
 80044bc:	4906      	ldr	r1, [pc, #24]	@ (80044d8 <HAL_I2C_Mem_Read+0x22c>)
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fc54 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e11a      	b.n	8004704 <HAL_I2C_Mem_Read+0x458>
 80044ce:	bf00      	nop
 80044d0:	00100002 	.word	0x00100002
 80044d4:	ffff0000 	.word	0xffff0000
 80044d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004550:	e0c4      	b.n	80046dc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004558:	2200      	movs	r2, #0
 800455a:	496c      	ldr	r1, [pc, #432]	@ (800470c <HAL_I2C_Mem_Read+0x460>)
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fc05 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0cb      	b.n	8004704 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800457a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	2200      	movs	r2, #0
 80045b6:	4955      	ldr	r1, [pc, #340]	@ (800470c <HAL_I2C_Mem_Read+0x460>)
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fbd7 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e09d      	b.n	8004704 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800463c:	e04e      	b.n	80046dc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004640:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fd3c 	bl	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e058      	b.n	8004704 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d124      	bne.n	80046dc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004696:	2b03      	cmp	r3, #3
 8004698:	d107      	bne.n	80046aa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f47f aeb6 	bne.w	8004452 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3728      	adds	r7, #40	@ 0x28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	00010004 	.word	0x00010004

08004710 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	@ 0x28
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	460b      	mov	r3, r1
 800471e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004720:	f7fe fd52 	bl	80031c8 <HAL_GetTick>
 8004724:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b20      	cmp	r3, #32
 8004734:	f040 8111 	bne.w	800495a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	2319      	movs	r3, #25
 800473e:	2201      	movs	r2, #1
 8004740:	4988      	ldr	r1, [pc, #544]	@ (8004964 <HAL_I2C_IsDeviceReady+0x254>)
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fb12 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800474e:	2302      	movs	r3, #2
 8004750:	e104      	b.n	800495c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_I2C_IsDeviceReady+0x50>
 800475c:	2302      	movs	r3, #2
 800475e:	e0fd      	b.n	800495c <HAL_I2C_IsDeviceReady+0x24c>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d007      	beq.n	8004786 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004794:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2224      	movs	r2, #36	@ 0x24
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a70      	ldr	r2, [pc, #448]	@ (8004968 <HAL_I2C_IsDeviceReady+0x258>)
 80047a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fad0 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e0:	d103      	bne.n	80047ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047e8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e0b6      	b.n	800495c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ee:	897b      	ldrh	r3, [r7, #10]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80047fe:	f7fe fce3 	bl	80031c8 <HAL_GetTick>
 8004802:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004828:	bf0c      	ite	eq
 800482a:	2301      	moveq	r3, #1
 800482c:	2300      	movne	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004832:	e025      	b.n	8004880 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004834:	f7fe fcc8 	bl	80031c8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d302      	bcc.n	800484a <HAL_I2C_IsDeviceReady+0x13a>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d103      	bne.n	8004852 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	22a0      	movs	r2, #160	@ 0xa0
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b02      	cmp	r3, #2
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2ba0      	cmp	r3, #160	@ 0xa0
 800488a:	d005      	beq.n	8004898 <HAL_I2C_IsDeviceReady+0x188>
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <HAL_I2C_IsDeviceReady+0x188>
 8004892:	7dbb      	ldrb	r3, [r7, #22]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0cd      	beq.n	8004834 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d129      	bne.n	8004902 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	2319      	movs	r3, #25
 80048da:	2201      	movs	r2, #1
 80048dc:	4921      	ldr	r1, [pc, #132]	@ (8004964 <HAL_I2C_IsDeviceReady+0x254>)
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fa44 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e036      	b.n	800495c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e02c      	b.n	800495c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004910:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800491a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2319      	movs	r3, #25
 8004922:	2201      	movs	r2, #1
 8004924:	490f      	ldr	r1, [pc, #60]	@ (8004964 <HAL_I2C_IsDeviceReady+0x254>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fa20 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e012      	b.n	800495c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	3301      	adds	r3, #1
 800493a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	f4ff af32 	bcc.w	80047aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
  }
}
 800495c:	4618      	mov	r0, r3
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	00100002 	.word	0x00100002
 8004968:	ffff0000 	.word	0xffff0000

0800496c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	460b      	mov	r3, r1
 800497a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d006      	beq.n	8004996 <I2C_MasterRequestWrite+0x2a>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d003      	beq.n	8004996 <I2C_MasterRequestWrite+0x2a>
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004994:	d108      	bne.n	80049a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e00b      	b.n	80049c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ac:	2b12      	cmp	r3, #18
 80049ae:	d107      	bne.n	80049c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f9cd 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e6:	d103      	bne.n	80049f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e035      	b.n	8004a60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049fc:	d108      	bne.n	8004a10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049fe:	897b      	ldrh	r3, [r7, #10]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a0c:	611a      	str	r2, [r3, #16]
 8004a0e:	e01b      	b.n	8004a48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a10:	897b      	ldrh	r3, [r7, #10]
 8004a12:	11db      	asrs	r3, r3, #7
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f063 030f 	orn	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	490e      	ldr	r1, [pc, #56]	@ (8004a68 <I2C_MasterRequestWrite+0xfc>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fa16 	bl	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e010      	b.n	8004a60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4907      	ldr	r1, [pc, #28]	@ (8004a6c <I2C_MasterRequestWrite+0x100>)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fa06 	bl	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	00010008 	.word	0x00010008
 8004a6c:	00010002 	.word	0x00010002

08004a70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	4608      	mov	r0, r1
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4603      	mov	r3, r0
 8004a80:	817b      	strh	r3, [r7, #10]
 8004a82:	460b      	mov	r3, r1
 8004a84:	813b      	strh	r3, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f960 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ac0:	d103      	bne.n	8004aca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e05f      	b.n	8004b8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ace:	897b      	ldrh	r3, [r7, #10]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	6a3a      	ldr	r2, [r7, #32]
 8004ae2:	492d      	ldr	r1, [pc, #180]	@ (8004b98 <I2C_RequestMemoryWrite+0x128>)
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f9bb 	bl	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e04c      	b.n	8004b8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0c:	6a39      	ldr	r1, [r7, #32]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fa46 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d107      	bne.n	8004b32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e02b      	b.n	8004b8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b3c:	893b      	ldrh	r3, [r7, #8]
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	611a      	str	r2, [r3, #16]
 8004b46:	e021      	b.n	8004b8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b48:	893b      	ldrh	r3, [r7, #8]
 8004b4a:	0a1b      	lsrs	r3, r3, #8
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b58:	6a39      	ldr	r1, [r7, #32]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fa20 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00d      	beq.n	8004b82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d107      	bne.n	8004b7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e005      	b.n	8004b8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b82:	893b      	ldrh	r3, [r7, #8]
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	00010002 	.word	0x00010002

08004b9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	817b      	strh	r3, [r7, #10]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	813b      	strh	r3, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f8c2 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bfc:	d103      	bne.n	8004c06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e0aa      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	4952      	ldr	r1, [pc, #328]	@ (8004d68 <I2C_RequestMemoryRead+0x1cc>)
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f91d 	bl	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e097      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c48:	6a39      	ldr	r1, [r7, #32]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f9a8 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d107      	bne.n	8004c6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e076      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]
 8004c82:	e021      	b.n	8004cc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c94:	6a39      	ldr	r1, [r7, #32]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f982 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d107      	bne.n	8004cba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e050      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cbe:	893b      	ldrh	r3, [r7, #8]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cca:	6a39      	ldr	r1, [r7, #32]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f967 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d107      	bne.n	8004cf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e035      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f82b 	bl	8004d6c <I2C_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00d      	beq.n	8004d38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d2a:	d103      	bne.n	8004d34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e013      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d38:	897b      	ldrh	r3, [r7, #10]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	6a3a      	ldr	r2, [r7, #32]
 8004d4c:	4906      	ldr	r1, [pc, #24]	@ (8004d68 <I2C_RequestMemoryRead+0x1cc>)
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 f886 	bl	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	00010002 	.word	0x00010002

08004d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d7c:	e048      	b.n	8004e10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d044      	beq.n	8004e10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fe fa1f 	bl	80031c8 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d139      	bne.n	8004e10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	0c1b      	lsrs	r3, r3, #16
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d10d      	bne.n	8004dc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	43da      	mvns	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4013      	ands	r3, r2
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	e00c      	b.n	8004ddc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d116      	bne.n	8004e10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e023      	b.n	8004e58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	0c1b      	lsrs	r3, r3, #16
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10d      	bne.n	8004e36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	43da      	mvns	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	4013      	ands	r3, r2
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	461a      	mov	r2, r3
 8004e34:	e00c      	b.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	43da      	mvns	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4013      	ands	r3, r2
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d093      	beq.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e6e:	e071      	b.n	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7e:	d123      	bne.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	f043 0204 	orr.w	r2, r3, #4
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e067      	b.n	8004f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d041      	beq.n	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed0:	f7fe f97a 	bl	80031c8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d136      	bne.n	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d10c      	bne.n	8004f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4013      	ands	r3, r2
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	e00b      	b.n	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	43da      	mvns	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e021      	b.n	8004f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10c      	bne.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	43da      	mvns	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	e00b      	b.n	8004f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	43da      	mvns	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4013      	ands	r3, r2
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f47f af6d 	bne.w	8004e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fac:	e034      	b.n	8005018 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f8e3 	bl	800517a <I2C_IsAcknowledgeFailed>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e034      	b.n	8005028 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d028      	beq.n	8005018 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7fe f8ff 	bl	80031c8 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d11d      	bne.n	8005018 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe6:	2b80      	cmp	r3, #128	@ 0x80
 8004fe8:	d016      	beq.n	8005018 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	f043 0220 	orr.w	r2, r3, #32
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e007      	b.n	8005028 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005022:	2b80      	cmp	r3, #128	@ 0x80
 8005024:	d1c3      	bne.n	8004fae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800503c:	e034      	b.n	80050a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f89b 	bl	800517a <I2C_IsAcknowledgeFailed>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e034      	b.n	80050b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d028      	beq.n	80050a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005056:	f7fe f8b7 	bl	80031c8 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d11d      	bne.n	80050a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b04      	cmp	r3, #4
 8005078:	d016      	beq.n	80050a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005094:	f043 0220 	orr.w	r2, r3, #32
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e007      	b.n	80050b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d1c3      	bne.n	800503e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050cc:	e049      	b.n	8005162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d119      	bne.n	8005110 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e030      	b.n	8005172 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005110:	f7fe f85a 	bl	80031c8 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d11d      	bne.n	8005162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005130:	2b40      	cmp	r3, #64	@ 0x40
 8005132:	d016      	beq.n	8005162 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e007      	b.n	8005172 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d1ae      	bne.n	80050ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005190:	d11b      	bne.n	80051ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800519a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	f043 0204 	orr.w	r2, r3, #4
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80051e8:	f000 f808 	bl	80051fc <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80051ec:	4b02      	ldr	r3, [pc, #8]	@ (80051f8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80051ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80051f2:	615a      	str	r2, [r3, #20]
  }
}
 80051f4:	bf00      	nop
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40013c00 	.word	0x40013c00

080051fc <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e267      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d075      	beq.n	8005316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800522a:	4b88      	ldr	r3, [pc, #544]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b04      	cmp	r3, #4
 8005234:	d00c      	beq.n	8005250 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005236:	4b85      	ldr	r3, [pc, #532]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800523e:	2b08      	cmp	r3, #8
 8005240:	d112      	bne.n	8005268 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005242:	4b82      	ldr	r3, [pc, #520]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800524a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800524e:	d10b      	bne.n	8005268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005250:	4b7e      	ldr	r3, [pc, #504]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d05b      	beq.n	8005314 <HAL_RCC_OscConfig+0x108>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d157      	bne.n	8005314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e242      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005270:	d106      	bne.n	8005280 <HAL_RCC_OscConfig+0x74>
 8005272:	4b76      	ldr	r3, [pc, #472]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a75      	ldr	r2, [pc, #468]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e01d      	b.n	80052bc <HAL_RCC_OscConfig+0xb0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x98>
 800528a:	4b70      	ldr	r3, [pc, #448]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6f      	ldr	r2, [pc, #444]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b6d      	ldr	r3, [pc, #436]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6c      	ldr	r2, [pc, #432]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 800529c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e00b      	b.n	80052bc <HAL_RCC_OscConfig+0xb0>
 80052a4:	4b69      	ldr	r3, [pc, #420]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a68      	ldr	r2, [pc, #416]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 80052aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	4b66      	ldr	r3, [pc, #408]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a65      	ldr	r2, [pc, #404]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 80052b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d013      	beq.n	80052ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c4:	f7fd ff80 	bl	80031c8 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052cc:	f7fd ff7c 	bl	80031c8 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	@ 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e207      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052de:	4b5b      	ldr	r3, [pc, #364]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0xc0>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ec:	f7fd ff6c 	bl	80031c8 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f4:	f7fd ff68 	bl	80031c8 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	@ 0x64
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e1f3      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005306:	4b51      	ldr	r3, [pc, #324]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0xe8>
 8005312:	e000      	b.n	8005316 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d063      	beq.n	80053ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005322:	4b4a      	ldr	r3, [pc, #296]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800532e:	4b47      	ldr	r3, [pc, #284]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005336:	2b08      	cmp	r3, #8
 8005338:	d11c      	bne.n	8005374 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533a:	4b44      	ldr	r3, [pc, #272]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d116      	bne.n	8005374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005346:	4b41      	ldr	r3, [pc, #260]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_RCC_OscConfig+0x152>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d001      	beq.n	800535e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e1c7      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535e:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4937      	ldr	r1, [pc, #220]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 800536e:	4313      	orrs	r3, r2
 8005370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005372:	e03a      	b.n	80053ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d020      	beq.n	80053be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800537c:	4b34      	ldr	r3, [pc, #208]	@ (8005450 <HAL_RCC_OscConfig+0x244>)
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005382:	f7fd ff21 	bl	80031c8 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800538a:	f7fd ff1d 	bl	80031c8 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e1a8      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539c:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a8:	4b28      	ldr	r3, [pc, #160]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4925      	ldr	r1, [pc, #148]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	600b      	str	r3, [r1, #0]
 80053bc:	e015      	b.n	80053ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053be:	4b24      	ldr	r3, [pc, #144]	@ (8005450 <HAL_RCC_OscConfig+0x244>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c4:	f7fd ff00 	bl	80031c8 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053cc:	f7fd fefc 	bl	80031c8 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e187      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053de:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d036      	beq.n	8005464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d016      	beq.n	800542c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053fe:	4b15      	ldr	r3, [pc, #84]	@ (8005454 <HAL_RCC_OscConfig+0x248>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fd fee0 	bl	80031c8 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540c:	f7fd fedc 	bl	80031c8 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e167      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800541e:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_RCC_OscConfig+0x240>)
 8005420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0x200>
 800542a:	e01b      	b.n	8005464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800542c:	4b09      	ldr	r3, [pc, #36]	@ (8005454 <HAL_RCC_OscConfig+0x248>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005432:	f7fd fec9 	bl	80031c8 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005438:	e00e      	b.n	8005458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800543a:	f7fd fec5 	bl	80031c8 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d907      	bls.n	8005458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e150      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
 800544c:	40023800 	.word	0x40023800
 8005450:	42470000 	.word	0x42470000
 8005454:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005458:	4b88      	ldr	r3, [pc, #544]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 800545a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1ea      	bne.n	800543a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8097 	beq.w	80055a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005472:	2300      	movs	r3, #0
 8005474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005476:	4b81      	ldr	r3, [pc, #516]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10f      	bne.n	80054a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	4b7d      	ldr	r3, [pc, #500]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	4a7c      	ldr	r2, [pc, #496]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 800548c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005490:	6413      	str	r3, [r2, #64]	@ 0x40
 8005492:	4b7a      	ldr	r3, [pc, #488]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a2:	4b77      	ldr	r3, [pc, #476]	@ (8005680 <HAL_RCC_OscConfig+0x474>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d118      	bne.n	80054e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ae:	4b74      	ldr	r3, [pc, #464]	@ (8005680 <HAL_RCC_OscConfig+0x474>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a73      	ldr	r2, [pc, #460]	@ (8005680 <HAL_RCC_OscConfig+0x474>)
 80054b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ba:	f7fd fe85 	bl	80031c8 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c2:	f7fd fe81 	bl	80031c8 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e10c      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005680 <HAL_RCC_OscConfig+0x474>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d106      	bne.n	80054f6 <HAL_RCC_OscConfig+0x2ea>
 80054e8:	4b64      	ldr	r3, [pc, #400]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ec:	4a63      	ldr	r2, [pc, #396]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f4:	e01c      	b.n	8005530 <HAL_RCC_OscConfig+0x324>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d10c      	bne.n	8005518 <HAL_RCC_OscConfig+0x30c>
 80054fe:	4b5f      	ldr	r3, [pc, #380]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005502:	4a5e      	ldr	r2, [pc, #376]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005504:	f043 0304 	orr.w	r3, r3, #4
 8005508:	6713      	str	r3, [r2, #112]	@ 0x70
 800550a:	4b5c      	ldr	r3, [pc, #368]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550e:	4a5b      	ldr	r2, [pc, #364]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	6713      	str	r3, [r2, #112]	@ 0x70
 8005516:	e00b      	b.n	8005530 <HAL_RCC_OscConfig+0x324>
 8005518:	4b58      	ldr	r3, [pc, #352]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551c:	4a57      	ldr	r2, [pc, #348]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	6713      	str	r3, [r2, #112]	@ 0x70
 8005524:	4b55      	ldr	r3, [pc, #340]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005528:	4a54      	ldr	r2, [pc, #336]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 0304 	bic.w	r3, r3, #4
 800552e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d015      	beq.n	8005564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005538:	f7fd fe46 	bl	80031c8 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553e:	e00a      	b.n	8005556 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005540:	f7fd fe42 	bl	80031c8 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e0cb      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005556:	4b49      	ldr	r3, [pc, #292]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0ee      	beq.n	8005540 <HAL_RCC_OscConfig+0x334>
 8005562:	e014      	b.n	800558e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005564:	f7fd fe30 	bl	80031c8 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556c:	f7fd fe2c 	bl	80031c8 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e0b5      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005582:	4b3e      	ldr	r3, [pc, #248]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1ee      	bne.n	800556c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800558e:	7dfb      	ldrb	r3, [r7, #23]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d105      	bne.n	80055a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005594:	4b39      	ldr	r3, [pc, #228]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005598:	4a38      	ldr	r2, [pc, #224]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 800559a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800559e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80a1 	beq.w	80056ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055aa:	4b34      	ldr	r3, [pc, #208]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d05c      	beq.n	8005670 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d141      	bne.n	8005642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055be:	4b31      	ldr	r3, [pc, #196]	@ (8005684 <HAL_RCC_OscConfig+0x478>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c4:	f7fd fe00 	bl	80031c8 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055cc:	f7fd fdfc 	bl	80031c8 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e087      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055de:	4b27      	ldr	r3, [pc, #156]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	019b      	lsls	r3, r3, #6
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	3b01      	subs	r3, #1
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	061b      	lsls	r3, r3, #24
 800560e:	491b      	ldr	r1, [pc, #108]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005610:	4313      	orrs	r3, r2
 8005612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005614:	4b1b      	ldr	r3, [pc, #108]	@ (8005684 <HAL_RCC_OscConfig+0x478>)
 8005616:	2201      	movs	r2, #1
 8005618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561a:	f7fd fdd5 	bl	80031c8 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005622:	f7fd fdd1 	bl	80031c8 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e05c      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005634:	4b11      	ldr	r3, [pc, #68]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <HAL_RCC_OscConfig+0x416>
 8005640:	e054      	b.n	80056ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005642:	4b10      	ldr	r3, [pc, #64]	@ (8005684 <HAL_RCC_OscConfig+0x478>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fd fdbe 	bl	80031c8 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005650:	f7fd fdba 	bl	80031c8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e045      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005662:	4b06      	ldr	r3, [pc, #24]	@ (800567c <HAL_RCC_OscConfig+0x470>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x444>
 800566e:	e03d      	b.n	80056ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d107      	bne.n	8005688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e038      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
 800567c:	40023800 	.word	0x40023800
 8005680:	40007000 	.word	0x40007000
 8005684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005688:	4b1b      	ldr	r3, [pc, #108]	@ (80056f8 <HAL_RCC_OscConfig+0x4ec>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d028      	beq.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d121      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d11a      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056b8:	4013      	ands	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d111      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	3b01      	subs	r3, #1
 80056d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d107      	bne.n	80056e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d001      	beq.n	80056ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40023800 	.word	0x40023800

080056fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0cc      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005710:	4b68      	ldr	r3, [pc, #416]	@ (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d90c      	bls.n	8005738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571e:	4b65      	ldr	r3, [pc, #404]	@ (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	4b63      	ldr	r3, [pc, #396]	@ (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d001      	beq.n	8005738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0b8      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d020      	beq.n	8005786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005750:	4b59      	ldr	r3, [pc, #356]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a58      	ldr	r2, [pc, #352]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800575a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005768:	4b53      	ldr	r3, [pc, #332]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	4a52      	ldr	r2, [pc, #328]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005774:	4b50      	ldr	r3, [pc, #320]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	494d      	ldr	r1, [pc, #308]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d044      	beq.n	800581c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d107      	bne.n	80057aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579a:	4b47      	ldr	r3, [pc, #284]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d119      	bne.n	80057da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e07f      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d003      	beq.n	80057ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d107      	bne.n	80057ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ba:	4b3f      	ldr	r3, [pc, #252]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e06f      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ca:	4b3b      	ldr	r3, [pc, #236]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e067      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057da:	4b37      	ldr	r3, [pc, #220]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f023 0203 	bic.w	r2, r3, #3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4934      	ldr	r1, [pc, #208]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057ec:	f7fd fcec 	bl	80031c8 <HAL_GetTick>
 80057f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f2:	e00a      	b.n	800580a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f4:	f7fd fce8 	bl	80031c8 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e04f      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580a:	4b2b      	ldr	r3, [pc, #172]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 020c 	and.w	r2, r3, #12
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	429a      	cmp	r2, r3
 800581a:	d1eb      	bne.n	80057f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800581c:	4b25      	ldr	r3, [pc, #148]	@ (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d20c      	bcs.n	8005844 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582a:	4b22      	ldr	r3, [pc, #136]	@ (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b20      	ldr	r3, [pc, #128]	@ (80058b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e032      	b.n	80058aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005850:	4b19      	ldr	r3, [pc, #100]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4916      	ldr	r1, [pc, #88]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800586e:	4b12      	ldr	r3, [pc, #72]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	490e      	ldr	r1, [pc, #56]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	4313      	orrs	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005882:	f000 f821 	bl	80058c8 <HAL_RCC_GetSysClockFreq>
 8005886:	4602      	mov	r2, r0
 8005888:	4b0b      	ldr	r3, [pc, #44]	@ (80058b8 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	490a      	ldr	r1, [pc, #40]	@ (80058bc <HAL_RCC_ClockConfig+0x1c0>)
 8005894:	5ccb      	ldrb	r3, [r1, r3]
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	4a09      	ldr	r2, [pc, #36]	@ (80058c0 <HAL_RCC_ClockConfig+0x1c4>)
 800589c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800589e:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <HAL_RCC_ClockConfig+0x1c8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fd fc4c 	bl	8003140 <HAL_InitTick>

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40023c00 	.word	0x40023c00
 80058b8:	40023800 	.word	0x40023800
 80058bc:	0804d62c 	.word	0x0804d62c
 80058c0:	2000006c 	.word	0x2000006c
 80058c4:	20000070 	.word	0x20000070

080058c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b090      	sub	sp, #64	@ 0x40
 80058ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058e0:	4b59      	ldr	r3, [pc, #356]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x180>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 030c 	and.w	r3, r3, #12
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d00d      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x40>
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	f200 80a1 	bhi.w	8005a34 <HAL_RCC_GetSysClockFreq+0x16c>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0x34>
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d003      	beq.n	8005902 <HAL_RCC_GetSysClockFreq+0x3a>
 80058fa:	e09b      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058fc:	4b53      	ldr	r3, [pc, #332]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x184>)
 80058fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005900:	e09b      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005902:	4b53      	ldr	r3, [pc, #332]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8005904:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005906:	e098      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005908:	4b4f      	ldr	r3, [pc, #316]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x180>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005910:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005912:	4b4d      	ldr	r3, [pc, #308]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d028      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800591e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	099b      	lsrs	r3, r3, #6
 8005924:	2200      	movs	r2, #0
 8005926:	623b      	str	r3, [r7, #32]
 8005928:	627a      	str	r2, [r7, #36]	@ 0x24
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005930:	2100      	movs	r1, #0
 8005932:	4b47      	ldr	r3, [pc, #284]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8005934:	fb03 f201 	mul.w	r2, r3, r1
 8005938:	2300      	movs	r3, #0
 800593a:	fb00 f303 	mul.w	r3, r0, r3
 800593e:	4413      	add	r3, r2
 8005940:	4a43      	ldr	r2, [pc, #268]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8005942:	fba0 1202 	umull	r1, r2, r0, r2
 8005946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005948:	460a      	mov	r2, r1
 800594a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800594c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800594e:	4413      	add	r3, r2
 8005950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005954:	2200      	movs	r2, #0
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	61fa      	str	r2, [r7, #28]
 800595a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800595e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005962:	f7fa fff3 	bl	800094c <__aeabi_uldivmod>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4613      	mov	r3, r2
 800596c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800596e:	e053      	b.n	8005a18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005970:	4b35      	ldr	r3, [pc, #212]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	099b      	lsrs	r3, r3, #6
 8005976:	2200      	movs	r2, #0
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	617a      	str	r2, [r7, #20]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005982:	f04f 0b00 	mov.w	fp, #0
 8005986:	4652      	mov	r2, sl
 8005988:	465b      	mov	r3, fp
 800598a:	f04f 0000 	mov.w	r0, #0
 800598e:	f04f 0100 	mov.w	r1, #0
 8005992:	0159      	lsls	r1, r3, #5
 8005994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005998:	0150      	lsls	r0, r2, #5
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	ebb2 080a 	subs.w	r8, r2, sl
 80059a2:	eb63 090b 	sbc.w	r9, r3, fp
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80059b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80059b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059ba:	ebb2 0408 	subs.w	r4, r2, r8
 80059be:	eb63 0509 	sbc.w	r5, r3, r9
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	00eb      	lsls	r3, r5, #3
 80059cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059d0:	00e2      	lsls	r2, r4, #3
 80059d2:	4614      	mov	r4, r2
 80059d4:	461d      	mov	r5, r3
 80059d6:	eb14 030a 	adds.w	r3, r4, sl
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	eb45 030b 	adc.w	r3, r5, fp
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059ee:	4629      	mov	r1, r5
 80059f0:	028b      	lsls	r3, r1, #10
 80059f2:	4621      	mov	r1, r4
 80059f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059f8:	4621      	mov	r1, r4
 80059fa:	028a      	lsls	r2, r1, #10
 80059fc:	4610      	mov	r0, r2
 80059fe:	4619      	mov	r1, r3
 8005a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a02:	2200      	movs	r2, #0
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	60fa      	str	r2, [r7, #12]
 8005a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a0c:	f7fa ff9e 	bl	800094c <__aeabi_uldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4613      	mov	r3, r2
 8005a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a18:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	0c1b      	lsrs	r3, r3, #16
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	3301      	adds	r3, #1
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005a28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a32:	e002      	b.n	8005a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a34:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x184>)
 8005a36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3740      	adds	r7, #64	@ 0x40
 8005a40:	46bd      	mov	sp, r7
 8005a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a46:	bf00      	nop
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	00f42400 	.word	0x00f42400
 8005a50:	017d7840 	.word	0x017d7840

08005a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a58:	4b03      	ldr	r3, [pc, #12]	@ (8005a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	2000006c 	.word	0x2000006c

08005a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a70:	f7ff fff0 	bl	8005a54 <HAL_RCC_GetHCLKFreq>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b05      	ldr	r3, [pc, #20]	@ (8005a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	0a9b      	lsrs	r3, r3, #10
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	4903      	ldr	r1, [pc, #12]	@ (8005a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a82:	5ccb      	ldrb	r3, [r1, r3]
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	0804d63c 	.word	0x0804d63c

08005a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a98:	f7ff ffdc 	bl	8005a54 <HAL_RCC_GetHCLKFreq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	0b5b      	lsrs	r3, r3, #13
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	4903      	ldr	r1, [pc, #12]	@ (8005ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	0804d63c 	.word	0x0804d63c

08005abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07b      	b.n	8005bc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d108      	bne.n	8005ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ade:	d009      	beq.n	8005af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	61da      	str	r2, [r3, #28]
 8005ae6:	e005      	b.n	8005af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fd f8fa 	bl	8002d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b78:	ea42 0103 	orr.w	r1, r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	0c1b      	lsrs	r3, r3, #16
 8005b92:	f003 0104 	and.w	r1, r3, #4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	f003 0210 	and.w	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b088      	sub	sp, #32
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bde:	f7fd faf3 	bl	80031c8 <HAL_GetTick>
 8005be2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d001      	beq.n	8005bf8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e12a      	b.n	8005e4e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_SPI_Transmit+0x36>
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e122      	b.n	8005e4e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_SPI_Transmit+0x48>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e11b      	b.n	8005e4e <HAL_SPI_Transmit+0x280>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2203      	movs	r2, #3
 8005c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c64:	d10f      	bne.n	8005c86 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c90:	2b40      	cmp	r3, #64	@ 0x40
 8005c92:	d007      	beq.n	8005ca4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cac:	d152      	bne.n	8005d54 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_SPI_Transmit+0xee>
 8005cb6:	8b7b      	ldrh	r3, [r7, #26]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d145      	bne.n	8005d48 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	881a      	ldrh	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ccc:	1c9a      	adds	r2, r3, #2
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ce0:	e032      	b.n	8005d48 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d112      	bne.n	8005d16 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf4:	881a      	ldrh	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d00:	1c9a      	adds	r2, r3, #2
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d14:	e018      	b.n	8005d48 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d16:	f7fd fa57 	bl	80031c8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d803      	bhi.n	8005d2e <HAL_SPI_Transmit+0x160>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2c:	d102      	bne.n	8005d34 <HAL_SPI_Transmit+0x166>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d109      	bne.n	8005d48 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e082      	b.n	8005e4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1c7      	bne.n	8005ce2 <HAL_SPI_Transmit+0x114>
 8005d52:	e053      	b.n	8005dfc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <HAL_SPI_Transmit+0x194>
 8005d5c:	8b7b      	ldrh	r3, [r7, #26]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d147      	bne.n	8005df2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d88:	e033      	b.n	8005df2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d113      	bne.n	8005dc0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	7812      	ldrb	r2, [r2, #0]
 8005da4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005dbe:	e018      	b.n	8005df2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc0:	f7fd fa02 	bl	80031c8 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d803      	bhi.n	8005dd8 <HAL_SPI_Transmit+0x20a>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d102      	bne.n	8005dde <HAL_SPI_Transmit+0x210>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e02d      	b.n	8005e4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1c6      	bne.n	8005d8a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f9cf 	bl	80061a4 <SPI_EndRxTxTransaction>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
  }
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	099b      	lsrs	r3, r3, #6
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10f      	bne.n	8005e9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	099b      	lsrs	r3, r3, #6
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
    return;
 8005e9a:	e0d7      	b.n	800604c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <HAL_SPI_IRQHandler+0x66>
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	09db      	lsrs	r3, r3, #7
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    return;
 8005ebc:	e0c6      	b.n	800604c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_SPI_IRQHandler+0x8c>
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	099b      	lsrs	r3, r3, #6
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	0a1b      	lsrs	r3, r3, #8
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80b4 	beq.w	800604c <HAL_SPI_IRQHandler+0x1f4>
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80ad 	beq.w	800604c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	099b      	lsrs	r3, r3, #6
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d023      	beq.n	8005f46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d011      	beq.n	8005f2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0e:	f043 0204 	orr.w	r2, r3, #4
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	e00b      	b.n	8005f46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	693b      	ldr	r3, [r7, #16]
        return;
 8005f44:	e082      	b.n	800604c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d014      	beq.n	8005f7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f56:	f043 0201 	orr.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00c      	beq.n	8005fa2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8c:	f043 0208 	orr.w	r2, r3, #8
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f94:	2300      	movs	r3, #0
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d04f      	beq.n	800604a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fb8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <HAL_SPI_IRQHandler+0x17e>
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d034      	beq.n	8006040 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0203 	bic.w	r2, r2, #3
 8005fe4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d011      	beq.n	8006012 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ff2:	4a18      	ldr	r2, [pc, #96]	@ (8006054 <HAL_SPI_IRQHandler+0x1fc>)
 8005ff4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fd fa95 	bl	800352a <HAL_DMA_Abort_IT>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800601e:	4a0d      	ldr	r2, [pc, #52]	@ (8006054 <HAL_SPI_IRQHandler+0x1fc>)
 8006020:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006026:	4618      	mov	r0, r3
 8006028:	f7fd fa7f 	bl	800352a <HAL_DMA_Abort_IT>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006036:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800603e:	e003      	b.n	8006048 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f809 	bl	8006058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006046:	e000      	b.n	800604a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006048:	bf00      	nop
    return;
 800604a:	bf00      	nop
  }
}
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	0800606d 	.word	0x0800606d

08006058 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff ffe6 	bl	8006058 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060a4:	f7fd f890 	bl	80031c8 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	4413      	add	r3, r2
 80060b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060b4:	f7fd f888 	bl	80031c8 <HAL_GetTick>
 80060b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ba:	4b39      	ldr	r3, [pc, #228]	@ (80061a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	015b      	lsls	r3, r3, #5
 80060c0:	0d1b      	lsrs	r3, r3, #20
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	fb02 f303 	mul.w	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ca:	e055      	b.n	8006178 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d051      	beq.n	8006178 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060d4:	f7fd f878 	bl	80031c8 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d902      	bls.n	80060ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d13d      	bne.n	8006166 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006102:	d111      	bne.n	8006128 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800610c:	d004      	beq.n	8006118 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006116:	d107      	bne.n	8006128 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006126:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006130:	d10f      	bne.n	8006152 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006150:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e018      	b.n	8006198 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	e002      	b.n	8006178 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	3b01      	subs	r3, #1
 8006176:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	4013      	ands	r3, r2
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	429a      	cmp	r2, r3
 8006186:	bf0c      	ite	eq
 8006188:	2301      	moveq	r3, #1
 800618a:	2300      	movne	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	429a      	cmp	r2, r3
 8006194:	d19a      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3720      	adds	r7, #32
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	2000006c 	.word	0x2000006c

080061a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2201      	movs	r2, #1
 80061b8:	2102      	movs	r1, #2
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff ff6a 	bl	8006094 <SPI_WaitFlagStateUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e032      	b.n	800623c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006244 <SPI_EndRxTxTransaction+0xa0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1b      	ldr	r2, [pc, #108]	@ (8006248 <SPI_EndRxTxTransaction+0xa4>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	0d5b      	lsrs	r3, r3, #21
 80061e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061f4:	d112      	bne.n	800621c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2200      	movs	r2, #0
 80061fe:	2180      	movs	r1, #128	@ 0x80
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff ff47 	bl	8006094 <SPI_WaitFlagStateUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d016      	beq.n	800623a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e00f      	b.n	800623c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	3b01      	subs	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006232:	2b80      	cmp	r3, #128	@ 0x80
 8006234:	d0f2      	beq.n	800621c <SPI_EndRxTxTransaction+0x78>
 8006236:	e000      	b.n	800623a <SPI_EndRxTxTransaction+0x96>
        break;
 8006238:	bf00      	nop
  }

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	2000006c 	.word	0x2000006c
 8006248:	165e9f81 	.word	0x165e9f81

0800624c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e042      	b.n	80062e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fc fd98 	bl	8002da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2224      	movs	r2, #36	@ 0x24
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800628e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fc99 	bl	8006bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b0ba      	sub	sp, #232	@ 0xe8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006312:	2300      	movs	r3, #0
 8006314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006318:	2300      	movs	r3, #0
 800631a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800632a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10f      	bne.n	8006352 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <HAL_UART_IRQHandler+0x66>
 800633e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fb7e 	bl	8006a4c <UART_Receive_IT>
      return;
 8006350:	e273      	b.n	800683a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80de 	beq.w	8006518 <HAL_UART_IRQHandler+0x22c>
 800635c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d106      	bne.n	8006376 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80d1 	beq.w	8006518 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00b      	beq.n	800639a <HAL_UART_IRQHandler+0xae>
 8006382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006392:	f043 0201 	orr.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_UART_IRQHandler+0xd2>
 80063a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b6:	f043 0202 	orr.w	r2, r3, #2
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00b      	beq.n	80063e2 <HAL_UART_IRQHandler+0xf6>
 80063ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063da:	f043 0204 	orr.w	r2, r3, #4
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d011      	beq.n	8006412 <HAL_UART_IRQHandler+0x126>
 80063ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d105      	bne.n	8006406 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640a:	f043 0208 	orr.w	r2, r3, #8
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 820a 	beq.w	8006830 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800641c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <HAL_UART_IRQHandler+0x14e>
 8006428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fb09 	bl	8006a4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006444:	2b40      	cmp	r3, #64	@ 0x40
 8006446:	bf0c      	ite	eq
 8006448:	2301      	moveq	r3, #1
 800644a:	2300      	movne	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <HAL_UART_IRQHandler+0x17a>
 800645e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006462:	2b00      	cmp	r3, #0
 8006464:	d04f      	beq.n	8006506 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa14 	bl	8006894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006476:	2b40      	cmp	r3, #64	@ 0x40
 8006478:	d141      	bne.n	80064fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3314      	adds	r3, #20
 8006480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3314      	adds	r3, #20
 80064a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1d9      	bne.n	800647a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d013      	beq.n	80064f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d2:	4a8a      	ldr	r2, [pc, #552]	@ (80066fc <HAL_UART_IRQHandler+0x410>)
 80064d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fd f825 	bl	800352a <HAL_DMA_Abort_IT>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d016      	beq.n	8006514 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064f0:	4610      	mov	r0, r2
 80064f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e00e      	b.n	8006514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9b6 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fc:	e00a      	b.n	8006514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9b2 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	e006      	b.n	8006514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9ae 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006512:	e18d      	b.n	8006830 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	bf00      	nop
    return;
 8006516:	e18b      	b.n	8006830 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651c:	2b01      	cmp	r3, #1
 800651e:	f040 8167 	bne.w	80067f0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 8160 	beq.w	80067f0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8159 	beq.w	80067f0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655e:	2b40      	cmp	r3, #64	@ 0x40
 8006560:	f040 80ce 	bne.w	8006700 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006570:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80a9 	beq.w	80066cc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800657e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006582:	429a      	cmp	r2, r3
 8006584:	f080 80a2 	bcs.w	80066cc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800658e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800659a:	f000 8088 	beq.w	80066ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1d9      	bne.n	800659e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3314      	adds	r3, #20
 80065f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3314      	adds	r3, #20
 800660a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800660e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006612:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006616:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e1      	bne.n	80065ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3314      	adds	r3, #20
 800662c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800663c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3314      	adds	r3, #20
 8006646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800664a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800664c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006650:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e3      	bne.n	8006626 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	330c      	adds	r3, #12
 8006672:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800667c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800667e:	f023 0310 	bic.w	r3, r3, #16
 8006682:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	330c      	adds	r3, #12
 800668c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006690:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006692:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006696:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800669e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e3      	bne.n	800666c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fc fece 	bl	800344a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f8d9 	bl	800687c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80066ca:	e0b3      	b.n	8006834 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066d4:	429a      	cmp	r2, r3
 80066d6:	f040 80ad 	bne.w	8006834 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e4:	f040 80a6 	bne.w	8006834 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f8c1 	bl	800687c <HAL_UARTEx_RxEventCallback>
      return;
 80066fa:	e09b      	b.n	8006834 <HAL_UART_IRQHandler+0x548>
 80066fc:	0800695b 	.word	0x0800695b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006708:	b29b      	uxth	r3, r3
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 808e 	beq.w	8006838 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800671c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8089 	beq.w	8006838 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800673c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	330c      	adds	r3, #12
 8006746:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800674a:	647a      	str	r2, [r7, #68]	@ 0x44
 800674c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e3      	bne.n	8006726 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3314      	adds	r3, #20
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	623b      	str	r3, [r7, #32]
   return(result);
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006782:	633a      	str	r2, [r7, #48]	@ 0x30
 8006784:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e3      	bne.n	800675e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0310 	bic.w	r3, r3, #16
 80067ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067c8:	61fa      	str	r2, [r7, #28]
 80067ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	617b      	str	r3, [r7, #20]
   return(result);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e3      	bne.n	80067a4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f847 	bl	800687c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067ee:	e023      	b.n	8006838 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <HAL_UART_IRQHandler+0x524>
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f8b7 	bl	800697c <UART_Transmit_IT>
    return;
 800680e:	e014      	b.n	800683a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00e      	beq.n	800683a <HAL_UART_IRQHandler+0x54e>
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f8f7 	bl	8006a1c <UART_EndTransmit_IT>
    return;
 800682e:	e004      	b.n	800683a <HAL_UART_IRQHandler+0x54e>
    return;
 8006830:	bf00      	nop
 8006832:	e002      	b.n	800683a <HAL_UART_IRQHandler+0x54e>
      return;
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <HAL_UART_IRQHandler+0x54e>
      return;
 8006838:	bf00      	nop
  }
}
 800683a:	37e8      	adds	r7, #232	@ 0xe8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006894:	b480      	push	{r7}
 8006896:	b095      	sub	sp, #84	@ 0x54
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	330c      	adds	r3, #12
 80068a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80068be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e5      	bne.n	800689c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3314      	adds	r3, #20
 80068d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	61fb      	str	r3, [r7, #28]
   return(result);
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	f023 0301 	bic.w	r3, r3, #1
 80068e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e5      	bne.n	80068d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	2b01      	cmp	r3, #1
 800690a:	d119      	bne.n	8006940 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	60bb      	str	r3, [r7, #8]
   return(result);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f023 0310 	bic.w	r3, r3, #16
 8006922:	647b      	str	r3, [r7, #68]	@ 0x44
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800692c:	61ba      	str	r2, [r7, #24]
 800692e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	6979      	ldr	r1, [r7, #20]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	613b      	str	r3, [r7, #16]
   return(result);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e5      	bne.n	800690c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800694e:	bf00      	nop
 8006950:	3754      	adds	r7, #84	@ 0x54
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff ff7a 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b21      	cmp	r3, #33	@ 0x21
 800698e:	d13e      	bne.n	8006a0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006998:	d114      	bne.n	80069c4 <UART_Transmit_IT+0x48>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d110      	bne.n	80069c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	1c9a      	adds	r2, r3, #2
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]
 80069c2:	e008      	b.n	80069d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	1c59      	adds	r1, r3, #1
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6211      	str	r1, [r2, #32]
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4619      	mov	r1, r3
 80069e4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10f      	bne.n	8006a0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e000      	b.n	8006a10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
  }
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff feff 	bl	8006840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08c      	sub	sp, #48	@ 0x30
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006a54:	2300      	movs	r3, #0
 8006a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b22      	cmp	r3, #34	@ 0x22
 8006a66:	f040 80aa 	bne.w	8006bbe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a72:	d115      	bne.n	8006aa0 <UART_Receive_IT+0x54>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d111      	bne.n	8006aa0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a98:	1c9a      	adds	r2, r3, #2
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a9e:	e024      	b.n	8006aea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aae:	d007      	beq.n	8006ac0 <UART_Receive_IT+0x74>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <UART_Receive_IT+0x82>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e008      	b.n	8006ae0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ade:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	4619      	mov	r1, r3
 8006af8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d15d      	bne.n	8006bba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0220 	bic.w	r2, r2, #32
 8006b0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	695a      	ldr	r2, [r3, #20]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d135      	bne.n	8006bb0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f023 0310 	bic.w	r3, r3, #16
 8006b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	330c      	adds	r3, #12
 8006b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b6a:	623a      	str	r2, [r7, #32]
 8006b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	69f9      	ldr	r1, [r7, #28]
 8006b70:	6a3a      	ldr	r2, [r7, #32]
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e5      	bne.n	8006b4a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d10a      	bne.n	8006ba2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff fe67 	bl	800687c <HAL_UARTEx_RxEventCallback>
 8006bae:	e002      	b.n	8006bb6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fe4f 	bl	8006854 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e002      	b.n	8006bc0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e000      	b.n	8006bc0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006bbe:	2302      	movs	r3, #2
  }
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3730      	adds	r7, #48	@ 0x30
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bcc:	b0c0      	sub	sp, #256	@ 0x100
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be4:	68d9      	ldr	r1, [r3, #12]
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	ea40 0301 	orr.w	r3, r0, r1
 8006bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c20:	f021 010c 	bic.w	r1, r1, #12
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c42:	6999      	ldr	r1, [r3, #24]
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	ea40 0301 	orr.w	r3, r0, r1
 8006c4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b8f      	ldr	r3, [pc, #572]	@ (8006e94 <UART_SetConfig+0x2cc>)
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d005      	beq.n	8006c68 <UART_SetConfig+0xa0>
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b8d      	ldr	r3, [pc, #564]	@ (8006e98 <UART_SetConfig+0x2d0>)
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d104      	bne.n	8006c72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c68:	f7fe ff14 	bl	8005a94 <HAL_RCC_GetPCLK2Freq>
 8006c6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c70:	e003      	b.n	8006c7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c72:	f7fe fefb 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8006c76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c84:	f040 810c 	bne.w	8006ea0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	1891      	adds	r1, r2, r2
 8006ca0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ca2:	415b      	adcs	r3, r3
 8006ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ca6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006caa:	4621      	mov	r1, r4
 8006cac:	eb12 0801 	adds.w	r8, r2, r1
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	eb43 0901 	adc.w	r9, r3, r1
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cca:	4690      	mov	r8, r2
 8006ccc:	4699      	mov	r9, r3
 8006cce:	4623      	mov	r3, r4
 8006cd0:	eb18 0303 	adds.w	r3, r8, r3
 8006cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cd8:	462b      	mov	r3, r5
 8006cda:	eb49 0303 	adc.w	r3, r9, r3
 8006cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	18db      	adds	r3, r3, r3
 8006cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	eb42 0303 	adc.w	r3, r2, r3
 8006d02:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d0c:	f7f9 fe1e 	bl	800094c <__aeabi_uldivmod>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4b61      	ldr	r3, [pc, #388]	@ (8006e9c <UART_SetConfig+0x2d4>)
 8006d16:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	011c      	lsls	r4, r3, #4
 8006d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d30:	4642      	mov	r2, r8
 8006d32:	464b      	mov	r3, r9
 8006d34:	1891      	adds	r1, r2, r2
 8006d36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d38:	415b      	adcs	r3, r3
 8006d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d40:	4641      	mov	r1, r8
 8006d42:	eb12 0a01 	adds.w	sl, r2, r1
 8006d46:	4649      	mov	r1, r9
 8006d48:	eb43 0b01 	adc.w	fp, r3, r1
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d60:	4692      	mov	sl, r2
 8006d62:	469b      	mov	fp, r3
 8006d64:	4643      	mov	r3, r8
 8006d66:	eb1a 0303 	adds.w	r3, sl, r3
 8006d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d6e:	464b      	mov	r3, r9
 8006d70:	eb4b 0303 	adc.w	r3, fp, r3
 8006d74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	18db      	adds	r3, r3, r3
 8006d90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d92:	4613      	mov	r3, r2
 8006d94:	eb42 0303 	adc.w	r3, r2, r3
 8006d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006da2:	f7f9 fdd3 	bl	800094c <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	4b3b      	ldr	r3, [pc, #236]	@ (8006e9c <UART_SetConfig+0x2d4>)
 8006dae:	fba3 2301 	umull	r2, r3, r3, r1
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	2264      	movs	r2, #100	@ 0x64
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	1acb      	subs	r3, r1, r3
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dc2:	4b36      	ldr	r3, [pc, #216]	@ (8006e9c <UART_SetConfig+0x2d4>)
 8006dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dd0:	441c      	add	r4, r3
 8006dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006de0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006de4:	4642      	mov	r2, r8
 8006de6:	464b      	mov	r3, r9
 8006de8:	1891      	adds	r1, r2, r2
 8006dea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006dec:	415b      	adcs	r3, r3
 8006dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006df4:	4641      	mov	r1, r8
 8006df6:	1851      	adds	r1, r2, r1
 8006df8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	414b      	adcs	r3, r1
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	00cb      	lsls	r3, r1, #3
 8006e10:	4651      	mov	r1, sl
 8006e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e16:	4651      	mov	r1, sl
 8006e18:	00ca      	lsls	r2, r1, #3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4642      	mov	r2, r8
 8006e22:	189b      	adds	r3, r3, r2
 8006e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e28:	464b      	mov	r3, r9
 8006e2a:	460a      	mov	r2, r1
 8006e2c:	eb42 0303 	adc.w	r3, r2, r3
 8006e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e48:	460b      	mov	r3, r1
 8006e4a:	18db      	adds	r3, r3, r3
 8006e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e4e:	4613      	mov	r3, r2
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e5e:	f7f9 fd75 	bl	800094c <__aeabi_uldivmod>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <UART_SetConfig+0x2d4>)
 8006e68:	fba3 1302 	umull	r1, r3, r3, r2
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	2164      	movs	r1, #100	@ 0x64
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	3332      	adds	r3, #50	@ 0x32
 8006e7a:	4a08      	ldr	r2, [pc, #32]	@ (8006e9c <UART_SetConfig+0x2d4>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	f003 0207 	and.w	r2, r3, #7
 8006e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4422      	add	r2, r4
 8006e8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e90:	e106      	b.n	80070a0 <UART_SetConfig+0x4d8>
 8006e92:	bf00      	nop
 8006e94:	40011000 	.word	0x40011000
 8006e98:	40011400 	.word	0x40011400
 8006e9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006eae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006eb2:	4642      	mov	r2, r8
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	1891      	adds	r1, r2, r2
 8006eb8:	6239      	str	r1, [r7, #32]
 8006eba:	415b      	adcs	r3, r3
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	1854      	adds	r4, r2, r1
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	eb43 0501 	adc.w	r5, r3, r1
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	00eb      	lsls	r3, r5, #3
 8006ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eda:	00e2      	lsls	r2, r4, #3
 8006edc:	4614      	mov	r4, r2
 8006ede:	461d      	mov	r5, r3
 8006ee0:	4643      	mov	r3, r8
 8006ee2:	18e3      	adds	r3, r4, r3
 8006ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ee8:	464b      	mov	r3, r9
 8006eea:	eb45 0303 	adc.w	r3, r5, r3
 8006eee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006efe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f0e:	4629      	mov	r1, r5
 8006f10:	008b      	lsls	r3, r1, #2
 8006f12:	4621      	mov	r1, r4
 8006f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f18:	4621      	mov	r1, r4
 8006f1a:	008a      	lsls	r2, r1, #2
 8006f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f20:	f7f9 fd14 	bl	800094c <__aeabi_uldivmod>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4b60      	ldr	r3, [pc, #384]	@ (80070ac <UART_SetConfig+0x4e4>)
 8006f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	011c      	lsls	r4, r3, #4
 8006f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	1891      	adds	r1, r2, r2
 8006f4a:	61b9      	str	r1, [r7, #24]
 8006f4c:	415b      	adcs	r3, r3
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f54:	4641      	mov	r1, r8
 8006f56:	1851      	adds	r1, r2, r1
 8006f58:	6139      	str	r1, [r7, #16]
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	414b      	adcs	r3, r1
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	00cb      	lsls	r3, r1, #3
 8006f70:	4651      	mov	r1, sl
 8006f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f76:	4651      	mov	r1, sl
 8006f78:	00ca      	lsls	r2, r1, #3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4642      	mov	r2, r8
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f88:	464b      	mov	r3, r9
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	eb42 0303 	adc.w	r3, r2, r3
 8006f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fac:	4649      	mov	r1, r9
 8006fae:	008b      	lsls	r3, r1, #2
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	008a      	lsls	r2, r1, #2
 8006fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fbe:	f7f9 fcc5 	bl	800094c <__aeabi_uldivmod>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4b38      	ldr	r3, [pc, #224]	@ (80070ac <UART_SetConfig+0x4e4>)
 8006fca:	fba3 2301 	umull	r2, r3, r3, r1
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	2264      	movs	r2, #100	@ 0x64
 8006fd2:	fb02 f303 	mul.w	r3, r2, r3
 8006fd6:	1acb      	subs	r3, r1, r3
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	3332      	adds	r3, #50	@ 0x32
 8006fdc:	4a33      	ldr	r2, [pc, #204]	@ (80070ac <UART_SetConfig+0x4e4>)
 8006fde:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fe8:	441c      	add	r4, r3
 8006fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fee:	2200      	movs	r2, #0
 8006ff0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ff2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ff4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	1891      	adds	r1, r2, r2
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	415b      	adcs	r3, r3
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007008:	4641      	mov	r1, r8
 800700a:	1851      	adds	r1, r2, r1
 800700c:	6039      	str	r1, [r7, #0]
 800700e:	4649      	mov	r1, r9
 8007010:	414b      	adcs	r3, r1
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007020:	4659      	mov	r1, fp
 8007022:	00cb      	lsls	r3, r1, #3
 8007024:	4651      	mov	r1, sl
 8007026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800702a:	4651      	mov	r1, sl
 800702c:	00ca      	lsls	r2, r1, #3
 800702e:	4610      	mov	r0, r2
 8007030:	4619      	mov	r1, r3
 8007032:	4603      	mov	r3, r0
 8007034:	4642      	mov	r2, r8
 8007036:	189b      	adds	r3, r3, r2
 8007038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800703a:	464b      	mov	r3, r9
 800703c:	460a      	mov	r2, r1
 800703e:	eb42 0303 	adc.w	r3, r2, r3
 8007042:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	663b      	str	r3, [r7, #96]	@ 0x60
 800704e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800705c:	4649      	mov	r1, r9
 800705e:	008b      	lsls	r3, r1, #2
 8007060:	4641      	mov	r1, r8
 8007062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007066:	4641      	mov	r1, r8
 8007068:	008a      	lsls	r2, r1, #2
 800706a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800706e:	f7f9 fc6d 	bl	800094c <__aeabi_uldivmod>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4b0d      	ldr	r3, [pc, #52]	@ (80070ac <UART_SetConfig+0x4e4>)
 8007078:	fba3 1302 	umull	r1, r3, r3, r2
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	2164      	movs	r1, #100	@ 0x64
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	3332      	adds	r3, #50	@ 0x32
 800708a:	4a08      	ldr	r2, [pc, #32]	@ (80070ac <UART_SetConfig+0x4e4>)
 800708c:	fba2 2303 	umull	r2, r3, r2, r3
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	f003 020f 	and.w	r2, r3, #15
 8007096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4422      	add	r2, r4
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070a6:	46bd      	mov	sp, r7
 80070a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ac:	51eb851f 	.word	0x51eb851f

080070b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070c2:	2b84      	cmp	r3, #132	@ 0x84
 80070c4:	d005      	beq.n	80070d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	3303      	adds	r3, #3
 80070d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070d2:	68fb      	ldr	r3, [r7, #12]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070e6:	f3ef 8305 	mrs	r3, IPSR
 80070ea:	607b      	str	r3, [r7, #4]
  return(result);
 80070ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bf14      	ite	ne
 80070f2:	2301      	movne	r3, #1
 80070f4:	2300      	moveq	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007108:	f001 f95c 	bl	80083c4 <vTaskStartScheduler>
  
  return osOK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	bd80      	pop	{r7, pc}

08007112 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007114:	b089      	sub	sp, #36	@ 0x24
 8007116:	af04      	add	r7, sp, #16
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d020      	beq.n	8007166 <osThreadCreate+0x54>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01c      	beq.n	8007166 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685c      	ldr	r4, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691e      	ldr	r6, [r3, #16]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff ffb6 	bl	80070b0 <makeFreeRtosPriority>
 8007144:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800714e:	9202      	str	r2, [sp, #8]
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	9100      	str	r1, [sp, #0]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	4632      	mov	r2, r6
 8007158:	4629      	mov	r1, r5
 800715a:	4620      	mov	r0, r4
 800715c:	f000 ff64 	bl	8008028 <xTaskCreateStatic>
 8007160:	4603      	mov	r3, r0
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e01c      	b.n	80071a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685c      	ldr	r4, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007172:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff ff98 	bl	80070b0 <makeFreeRtosPriority>
 8007180:	4602      	mov	r2, r0
 8007182:	f107 030c 	add.w	r3, r7, #12
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	9200      	str	r2, [sp, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	4632      	mov	r2, r6
 800718e:	4629      	mov	r1, r5
 8007190:	4620      	mov	r0, r4
 8007192:	f000 ffa9 	bl	80080e8 <xTaskCreate>
 8007196:	4603      	mov	r3, r0
 8007198:	2b01      	cmp	r3, #1
 800719a:	d001      	beq.n	80071a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80071a0:	68fb      	ldr	r3, [r7, #12]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <osDelay+0x16>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	e000      	b.n	80071c2 <osDelay+0x18>
 80071c0:	2301      	movs	r3, #1
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 f8c8 	bl	8008358 <vTaskDelay>
  
  return osOK;
 80071c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d007      	beq.n	80071f2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4619      	mov	r1, r3
 80071e8:	2001      	movs	r0, #1
 80071ea:	f000 fab6 	bl	800775a <xQueueCreateMutexStatic>
 80071ee:	4603      	mov	r3, r0
 80071f0:	e003      	b.n	80071fa <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80071f2:	2001      	movs	r0, #1
 80071f4:	f000 fa99 	bl	800772a <xQueueCreateMutex>
 80071f8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800720e:	2300      	movs	r3, #0
 8007210:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <osMutexWait+0x18>
    return osErrorParameter;
 8007218:	2380      	movs	r3, #128	@ 0x80
 800721a:	e03a      	b.n	8007292 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d103      	bne.n	8007230 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e009      	b.n	8007244 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d006      	beq.n	8007244 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <osMutexWait+0x40>
      ticks = 1;
 8007240:	2301      	movs	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007244:	f7ff ff4c 	bl	80070e0 <inHandlerMode>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d017      	beq.n	800727e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800724e:	f107 0308 	add.w	r3, r7, #8
 8007252:	461a      	mov	r2, r3
 8007254:	2100      	movs	r1, #0
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fd3c 	bl	8007cd4 <xQueueReceiveFromISR>
 800725c:	4603      	mov	r3, r0
 800725e:	2b01      	cmp	r3, #1
 8007260:	d001      	beq.n	8007266 <osMutexWait+0x62>
      return osErrorOS;
 8007262:	23ff      	movs	r3, #255	@ 0xff
 8007264:	e015      	b.n	8007292 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d011      	beq.n	8007290 <osMutexWait+0x8c>
 800726c:	4b0b      	ldr	r3, [pc, #44]	@ (800729c <osMutexWait+0x98>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	e008      	b.n	8007290 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fc17 	bl	8007ab4 <xQueueSemaphoreTake>
 8007286:	4603      	mov	r3, r0
 8007288:	2b01      	cmp	r3, #1
 800728a:	d001      	beq.n	8007290 <osMutexWait+0x8c>
    return osErrorOS;
 800728c:	23ff      	movs	r3, #255	@ 0xff
 800728e:	e000      	b.n	8007292 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80072b0:	f7ff ff16 	bl	80070e0 <inHandlerMode>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d016      	beq.n	80072e8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80072ba:	f107 0308 	add.w	r3, r7, #8
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fb67 	bl	8007994 <xQueueGiveFromISR>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d001      	beq.n	80072d0 <osMutexRelease+0x30>
      return osErrorOS;
 80072cc:	23ff      	movs	r3, #255	@ 0xff
 80072ce:	e017      	b.n	8007300 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d013      	beq.n	80072fe <osMutexRelease+0x5e>
 80072d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007308 <osMutexRelease+0x68>)
 80072d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	e00a      	b.n	80072fe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80072e8:	2300      	movs	r3, #0
 80072ea:	2200      	movs	r2, #0
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa4e 	bl	8007790 <xQueueGenericSend>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d001      	beq.n	80072fe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80072fa:	23ff      	movs	r3, #255	@ 0xff
 80072fc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80072fe:	68fb      	ldr	r3, [r7, #12]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f103 0208 	add.w	r2, r3, #8
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f04f 32ff 	mov.w	r2, #4294967295
 8007324:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f103 0208 	add.w	r2, r3, #8
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f103 0208 	add.w	r2, r3, #8
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
}
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073ae:	b480      	push	{r7}
 80073b0:	b085      	sub	sp, #20
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d103      	bne.n	80073ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	e00c      	b.n	80073e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3308      	adds	r3, #8
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e002      	b.n	80073dc <vListInsert+0x2e>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d2f6      	bcs.n	80073d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6892      	ldr	r2, [r2, #8]
 8007436:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6852      	ldr	r2, [r2, #4]
 8007440:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	429a      	cmp	r2, r3
 800744a:	d103      	bne.n	8007454 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	1e5a      	subs	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074a0:	f001 fef2 	bl	8009288 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	441a      	add	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d0:	3b01      	subs	r3, #1
 80074d2:	68f9      	ldr	r1, [r7, #12]
 80074d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80074d6:	fb01 f303 	mul.w	r3, r1, r3
 80074da:	441a      	add	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	22ff      	movs	r2, #255	@ 0xff
 80074e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	22ff      	movs	r2, #255	@ 0xff
 80074ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d114      	bne.n	8007520 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01a      	beq.n	8007534 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3310      	adds	r3, #16
 8007502:	4618      	mov	r0, r3
 8007504:	f001 f9a8 	bl	8008858 <xTaskRemoveFromEventList>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d012      	beq.n	8007534 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800750e:	4b0d      	ldr	r3, [pc, #52]	@ (8007544 <xQueueGenericReset+0xd0>)
 8007510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	e009      	b.n	8007534 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3310      	adds	r3, #16
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff fef1 	bl	800730c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3324      	adds	r3, #36	@ 0x24
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff feec 	bl	800730c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007534:	f001 feda 	bl	80092ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007538:	2301      	movs	r3, #1
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08e      	sub	sp, #56	@ 0x38
 800754c:	af02      	add	r7, sp, #8
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10b      	bne.n	8007574 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	e7fd      	b.n	8007570 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <xQueueGenericCreateStatic+0x56>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <xQueueGenericCreateStatic+0x5a>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <xQueueGenericCreateStatic+0x5c>
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	623b      	str	r3, [r7, #32]
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <xQueueGenericCreateStatic+0x84>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <xQueueGenericCreateStatic+0x88>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e000      	b.n	80075d2 <xQueueGenericCreateStatic+0x8a>
 80075d0:	2300      	movs	r3, #0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	61fb      	str	r3, [r7, #28]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075ee:	2348      	movs	r3, #72	@ 0x48
 80075f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b48      	cmp	r3, #72	@ 0x48
 80075f6:	d00b      	beq.n	8007610 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	61bb      	str	r3, [r7, #24]
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007610:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00d      	beq.n	8007638 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800761c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007624:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f840 	bl	80076b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800763a:	4618      	mov	r0, r3
 800763c:	3730      	adds	r7, #48	@ 0x30
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007642:	b580      	push	{r7, lr}
 8007644:	b08a      	sub	sp, #40	@ 0x28
 8007646:	af02      	add	r7, sp, #8
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	4613      	mov	r3, r2
 800764e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	613b      	str	r3, [r7, #16]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	fb02 f303 	mul.w	r3, r2, r3
 8007676:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3348      	adds	r3, #72	@ 0x48
 800767c:	4618      	mov	r0, r3
 800767e:	f001 ff25 	bl	80094cc <pvPortMalloc>
 8007682:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d011      	beq.n	80076ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	3348      	adds	r3, #72	@ 0x48
 8007692:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800769c:	79fa      	ldrb	r2, [r7, #7]
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	4613      	mov	r3, r2
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f805 	bl	80076b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076ae:	69bb      	ldr	r3, [r7, #24]
	}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d103      	bne.n	80076d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e002      	b.n	80076da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076e6:	2101      	movs	r1, #1
 80076e8:	69b8      	ldr	r0, [r7, #24]
 80076ea:	f7ff fec3 	bl	8007474 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00e      	beq.n	8007722 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007716:	2300      	movs	r3, #0
 8007718:	2200      	movs	r2, #0
 800771a:	2100      	movs	r1, #0
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f837 	bl	8007790 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af00      	add	r7, sp, #0
 8007730:	4603      	mov	r3, r0
 8007732:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007734:	2301      	movs	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	2300      	movs	r3, #0
 800773a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	461a      	mov	r2, r3
 8007740:	6939      	ldr	r1, [r7, #16]
 8007742:	6978      	ldr	r0, [r7, #20]
 8007744:	f7ff ff7d 	bl	8007642 <xQueueGenericCreate>
 8007748:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff ffd3 	bl	80076f6 <prvInitialiseMutex>

		return xNewQueue;
 8007750:	68fb      	ldr	r3, [r7, #12]
	}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800775a:	b580      	push	{r7, lr}
 800775c:	b088      	sub	sp, #32
 800775e:	af02      	add	r7, sp, #8
 8007760:	4603      	mov	r3, r0
 8007762:	6039      	str	r1, [r7, #0]
 8007764:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007766:	2301      	movs	r3, #1
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	2300      	movs	r3, #0
 800776c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2200      	movs	r2, #0
 8007776:	6939      	ldr	r1, [r7, #16]
 8007778:	6978      	ldr	r0, [r7, #20]
 800777a:	f7ff fee5 	bl	8007548 <xQueueGenericCreateStatic>
 800777e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff ffb8 	bl	80076f6 <prvInitialiseMutex>

		return xNewQueue;
 8007786:	68fb      	ldr	r3, [r7, #12]
	}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08e      	sub	sp, #56	@ 0x38
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800779e:	2300      	movs	r3, #0
 80077a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80077a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10b      	bne.n	80077c4 <xQueueGenericSend+0x34>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	e7fd      	b.n	80077c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <xQueueGenericSend+0x42>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <xQueueGenericSend+0x46>
 80077d2:	2301      	movs	r3, #1
 80077d4:	e000      	b.n	80077d8 <xQueueGenericSend+0x48>
 80077d6:	2300      	movs	r3, #0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10b      	bne.n	80077f4 <xQueueGenericSend+0x64>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077ee:	bf00      	nop
 80077f0:	bf00      	nop
 80077f2:	e7fd      	b.n	80077f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d103      	bne.n	8007802 <xQueueGenericSend+0x72>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d101      	bne.n	8007806 <xQueueGenericSend+0x76>
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <xQueueGenericSend+0x78>
 8007806:	2300      	movs	r3, #0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10b      	bne.n	8007824 <xQueueGenericSend+0x94>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	623b      	str	r3, [r7, #32]
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	e7fd      	b.n	8007820 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007824:	f001 f9d8 	bl	8008bd8 <xTaskGetSchedulerState>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d102      	bne.n	8007834 <xQueueGenericSend+0xa4>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <xQueueGenericSend+0xa8>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <xQueueGenericSend+0xaa>
 8007838:	2300      	movs	r3, #0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <xQueueGenericSend+0xc6>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	61fb      	str	r3, [r7, #28]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007856:	f001 fd17 	bl	8009288 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007862:	429a      	cmp	r2, r3
 8007864:	d302      	bcc.n	800786c <xQueueGenericSend+0xdc>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b02      	cmp	r3, #2
 800786a:	d129      	bne.n	80078c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	68b9      	ldr	r1, [r7, #8]
 8007870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007872:	f000 fac9 	bl	8007e08 <prvCopyDataToQueue>
 8007876:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d010      	beq.n	80078a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	3324      	adds	r3, #36	@ 0x24
 8007884:	4618      	mov	r0, r3
 8007886:	f000 ffe7 	bl	8008858 <xTaskRemoveFromEventList>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d013      	beq.n	80078b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007890:	4b3f      	ldr	r3, [pc, #252]	@ (8007990 <xQueueGenericSend+0x200>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	e00a      	b.n	80078b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078a8:	4b39      	ldr	r3, [pc, #228]	@ (8007990 <xQueueGenericSend+0x200>)
 80078aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078b8:	f001 fd18 	bl	80092ec <vPortExitCritical>
				return pdPASS;
 80078bc:	2301      	movs	r3, #1
 80078be:	e063      	b.n	8007988 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d103      	bne.n	80078ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078c6:	f001 fd11 	bl	80092ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e05c      	b.n	8007988 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078d4:	f107 0314 	add.w	r3, r7, #20
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 f821 	bl	8008920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078de:	2301      	movs	r3, #1
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078e2:	f001 fd03 	bl	80092ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078e6:	f000 fdcf 	bl	8008488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078ea:	f001 fccd 	bl	8009288 <vPortEnterCritical>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078f4:	b25b      	sxtb	r3, r3
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d103      	bne.n	8007904 <xQueueGenericSend+0x174>
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800790a:	b25b      	sxtb	r3, r3
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007910:	d103      	bne.n	800791a <xQueueGenericSend+0x18a>
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800791a:	f001 fce7 	bl	80092ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800791e:	1d3a      	adds	r2, r7, #4
 8007920:	f107 0314 	add.w	r3, r7, #20
 8007924:	4611      	mov	r1, r2
 8007926:	4618      	mov	r0, r3
 8007928:	f001 f810 	bl	800894c <xTaskCheckForTimeOut>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d124      	bne.n	800797c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007932:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007934:	f000 fb60 	bl	8007ff8 <prvIsQueueFull>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d018      	beq.n	8007970 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	3310      	adds	r3, #16
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	4611      	mov	r1, r2
 8007946:	4618      	mov	r0, r3
 8007948:	f000 ff60 	bl	800880c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800794c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800794e:	f000 faeb 	bl	8007f28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007952:	f000 fda7 	bl	80084a4 <xTaskResumeAll>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	f47f af7c 	bne.w	8007856 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800795e:	4b0c      	ldr	r3, [pc, #48]	@ (8007990 <xQueueGenericSend+0x200>)
 8007960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	e772      	b.n	8007856 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007972:	f000 fad9 	bl	8007f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007976:	f000 fd95 	bl	80084a4 <xTaskResumeAll>
 800797a:	e76c      	b.n	8007856 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800797c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800797e:	f000 fad3 	bl	8007f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007982:	f000 fd8f 	bl	80084a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007986:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007988:	4618      	mov	r0, r3
 800798a:	3738      	adds	r7, #56	@ 0x38
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	e000ed04 	.word	0xe000ed04

08007994 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08e      	sub	sp, #56	@ 0x38
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	623b      	str	r3, [r7, #32]
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	e7fd      	b.n	80079bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	61fb      	str	r3, [r7, #28]
}
 80079da:	bf00      	nop
 80079dc:	bf00      	nop
 80079de:	e7fd      	b.n	80079dc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d103      	bne.n	80079f0 <xQueueGiveFromISR+0x5c>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <xQueueGiveFromISR+0x60>
 80079f0:	2301      	movs	r3, #1
 80079f2:	e000      	b.n	80079f6 <xQueueGiveFromISR+0x62>
 80079f4:	2300      	movs	r3, #0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10b      	bne.n	8007a12 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	61bb      	str	r3, [r7, #24]
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	e7fd      	b.n	8007a0e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a12:	f001 fd19 	bl	8009448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a16:	f3ef 8211 	mrs	r2, BASEPRI
 8007a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	617a      	str	r2, [r7, #20]
 8007a2c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d22b      	bcs.n	8007a9a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d112      	bne.n	8007a84 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d016      	beq.n	8007a94 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	3324      	adds	r3, #36	@ 0x24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fef4 	bl	8008858 <xTaskRemoveFromEventList>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00e      	beq.n	8007a94 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00b      	beq.n	8007a94 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	e007      	b.n	8007a94 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a88:	3301      	adds	r3, #1
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	b25a      	sxtb	r2, r3
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a94:	2301      	movs	r3, #1
 8007a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a98:	e001      	b.n	8007a9e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007aa8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3738      	adds	r7, #56	@ 0x38
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08e      	sub	sp, #56	@ 0x38
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	623b      	str	r3, [r7, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	e7fd      	b.n	8007ae4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	61fb      	str	r3, [r7, #28]
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	e7fd      	b.n	8007b04 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b08:	f001 f866 	bl	8008bd8 <xTaskGetSchedulerState>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <xQueueSemaphoreTake+0x64>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <xQueueSemaphoreTake+0x68>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <xQueueSemaphoreTake+0x6a>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	61bb      	str	r3, [r7, #24]
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	e7fd      	b.n	8007b36 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b3a:	f001 fba5 	bl	8009288 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b42:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d024      	beq.n	8007b94 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	1e5a      	subs	r2, r3, #1
 8007b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b50:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007b5a:	f001 f9e9 	bl	8008f30 <pvTaskIncrementMutexHeldCount>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00f      	beq.n	8007b8c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6e:	3310      	adds	r3, #16
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fe71 	bl	8008858 <xTaskRemoveFromEventList>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b7c:	4b54      	ldr	r3, [pc, #336]	@ (8007cd0 <xQueueSemaphoreTake+0x21c>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b8c:	f001 fbae 	bl	80092ec <vPortExitCritical>
				return pdPASS;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e098      	b.n	8007cc6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d112      	bne.n	8007bc0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	617b      	str	r3, [r7, #20]
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007bb8:	f001 fb98 	bl	80092ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e082      	b.n	8007cc6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bc6:	f107 030c 	add.w	r3, r7, #12
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 fea8 	bl	8008920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bd4:	f001 fb8a 	bl	80092ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bd8:	f000 fc56 	bl	8008488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bdc:	f001 fb54 	bl	8009288 <vPortEnterCritical>
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007be6:	b25b      	sxtb	r3, r3
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d103      	bne.n	8007bf6 <xQueueSemaphoreTake+0x142>
 8007bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bfc:	b25b      	sxtb	r3, r3
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d103      	bne.n	8007c0c <xQueueSemaphoreTake+0x158>
 8007c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c0c:	f001 fb6e 	bl	80092ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c10:	463a      	mov	r2, r7
 8007c12:	f107 030c 	add.w	r3, r7, #12
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fe97 	bl	800894c <xTaskCheckForTimeOut>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d132      	bne.n	8007c8a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c26:	f000 f9d1 	bl	8007fcc <prvIsQueueEmpty>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d026      	beq.n	8007c7e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d109      	bne.n	8007c4c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007c38:	f001 fb26 	bl	8009288 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 ffe7 	bl	8008c14 <xTaskPriorityInherit>
 8007c46:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007c48:	f001 fb50 	bl	80092ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4e:	3324      	adds	r3, #36	@ 0x24
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	4611      	mov	r1, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fdd9 	bl	800880c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c5c:	f000 f964 	bl	8007f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c60:	f000 fc20 	bl	80084a4 <xTaskResumeAll>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f47f af67 	bne.w	8007b3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007c6c:	4b18      	ldr	r3, [pc, #96]	@ (8007cd0 <xQueueSemaphoreTake+0x21c>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	e75d      	b.n	8007b3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c80:	f000 f952 	bl	8007f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c84:	f000 fc0e 	bl	80084a4 <xTaskResumeAll>
 8007c88:	e757      	b.n	8007b3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c8c:	f000 f94c 	bl	8007f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c90:	f000 fc08 	bl	80084a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c96:	f000 f999 	bl	8007fcc <prvIsQueueEmpty>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f43f af4c 	beq.w	8007b3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00d      	beq.n	8007cc4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007ca8:	f001 faee 	bl	8009288 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007cac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cae:	f000 f893 	bl	8007dd8 <prvGetDisinheritPriorityAfterTimeout>
 8007cb2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 f8a8 	bl	8008e10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007cc0:	f001 fb14 	bl	80092ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3738      	adds	r7, #56	@ 0x38
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	e000ed04 	.word	0xe000ed04

08007cd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08e      	sub	sp, #56	@ 0x38
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	623b      	str	r3, [r7, #32]
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	e7fd      	b.n	8007cfe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d103      	bne.n	8007d10 <xQueueReceiveFromISR+0x3c>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <xQueueReceiveFromISR+0x40>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <xQueueReceiveFromISR+0x42>
 8007d14:	2300      	movs	r3, #0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	61fb      	str	r3, [r7, #28]
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d32:	f001 fb89 	bl	8009448 <vPortValidateInterruptPriority>
	__asm volatile
 8007d36:	f3ef 8211 	mrs	r2, BASEPRI
 8007d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	61ba      	str	r2, [r7, #24]
 8007d4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d56:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d02f      	beq.n	8007dbe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d6c:	f000 f8b6 	bl	8007edc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	1e5a      	subs	r2, r3, #1
 8007d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007d78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d80:	d112      	bne.n	8007da8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d016      	beq.n	8007db8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fd62 	bl	8008858 <xTaskRemoveFromEventList>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00e      	beq.n	8007db8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	e007      	b.n	8007db8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dac:	3301      	adds	r3, #1
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	b25a      	sxtb	r2, r3
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007db8:	2301      	movs	r3, #1
 8007dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dbc:	e001      	b.n	8007dc2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f383 8811 	msr	BASEPRI, r3
}
 8007dcc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3738      	adds	r7, #56	@ 0x38
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d006      	beq.n	8007df6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f1c3 0307 	rsb	r3, r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	e001      	b.n	8007dfa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
	}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10d      	bne.n	8007e42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d14d      	bne.n	8007eca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 ff64 	bl	8008d00 <xTaskPriorityDisinherit>
 8007e38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	609a      	str	r2, [r3, #8]
 8007e40:	e043      	b.n	8007eca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d119      	bne.n	8007e7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6858      	ldr	r0, [r3, #4]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e50:	461a      	mov	r2, r3
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	f001 ff37 	bl	8009cc6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e60:	441a      	add	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d32b      	bcc.n	8007eca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	605a      	str	r2, [r3, #4]
 8007e7a:	e026      	b.n	8007eca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	68d8      	ldr	r0, [r3, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e84:	461a      	mov	r2, r3
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	f001 ff1d 	bl	8009cc6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e94:	425b      	negs	r3, r3
 8007e96:	441a      	add	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d207      	bcs.n	8007eb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb0:	425b      	negs	r3, r3
 8007eb2:	441a      	add	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d105      	bne.n	8007eca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ed2:	697b      	ldr	r3, [r7, #20]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d018      	beq.n	8007f20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef6:	441a      	add	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d303      	bcc.n	8007f10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68d9      	ldr	r1, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6838      	ldr	r0, [r7, #0]
 8007f1c:	f001 fed3 	bl	8009cc6 <memcpy>
	}
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f30:	f001 f9aa 	bl	8009288 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f3c:	e011      	b.n	8007f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d012      	beq.n	8007f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3324      	adds	r3, #36	@ 0x24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fc84 	bl	8008858 <xTaskRemoveFromEventList>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f56:	f000 fd5d 	bl	8008a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dce9      	bgt.n	8007f3e <prvUnlockQueue+0x16>
 8007f6a:	e000      	b.n	8007f6e <prvUnlockQueue+0x46>
					break;
 8007f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	22ff      	movs	r2, #255	@ 0xff
 8007f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f76:	f001 f9b9 	bl	80092ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f7a:	f001 f985 	bl	8009288 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f86:	e011      	b.n	8007fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d012      	beq.n	8007fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3310      	adds	r3, #16
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fc5f 	bl	8008858 <xTaskRemoveFromEventList>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fa0:	f000 fd38 	bl	8008a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dce9      	bgt.n	8007f88 <prvUnlockQueue+0x60>
 8007fb4:	e000      	b.n	8007fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	22ff      	movs	r2, #255	@ 0xff
 8007fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007fc0:	f001 f994 	bl	80092ec <vPortExitCritical>
}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fd4:	f001 f958 	bl	8009288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	e001      	b.n	8007fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fea:	f001 f97f 	bl	80092ec <vPortExitCritical>

	return xReturn;
 8007fee:	68fb      	ldr	r3, [r7, #12]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008000:	f001 f942 	bl	8009288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800c:	429a      	cmp	r2, r3
 800800e:	d102      	bne.n	8008016 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008010:	2301      	movs	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e001      	b.n	800801a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800801a:	f001 f967 	bl	80092ec <vPortExitCritical>

	return xReturn;
 800801e:	68fb      	ldr	r3, [r7, #12]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	@ 0x38
 800802c:	af04      	add	r7, sp, #16
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10b      	bne.n	8008054 <xTaskCreateStatic+0x2c>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	623b      	str	r3, [r7, #32]
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	e7fd      	b.n	8008050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <xTaskCreateStatic+0x4a>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	61fb      	str	r3, [r7, #28]
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008072:	2354      	movs	r3, #84	@ 0x54
 8008074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b54      	cmp	r3, #84	@ 0x54
 800807a:	d00b      	beq.n	8008094 <xTaskCreateStatic+0x6c>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	61bb      	str	r3, [r7, #24]
}
 800808e:	bf00      	nop
 8008090:	bf00      	nop
 8008092:	e7fd      	b.n	8008090 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008094:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01e      	beq.n	80080da <xTaskCreateStatic+0xb2>
 800809c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d01b      	beq.n	80080da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080b4:	2300      	movs	r3, #0
 80080b6:	9303      	str	r3, [sp, #12]
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	9302      	str	r3, [sp, #8]
 80080bc:	f107 0314 	add.w	r3, r7, #20
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f850 	bl	8008172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080d4:	f000 f8d6 	bl	8008284 <prvAddNewTaskToReadyList>
 80080d8:	e001      	b.n	80080de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080de:	697b      	ldr	r3, [r7, #20]
	}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3728      	adds	r7, #40	@ 0x28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08c      	sub	sp, #48	@ 0x30
 80080ec:	af04      	add	r7, sp, #16
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	4613      	mov	r3, r2
 80080f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f001 f9e5 	bl	80094cc <pvPortMalloc>
 8008102:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00e      	beq.n	8008128 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800810a:	2054      	movs	r0, #84	@ 0x54
 800810c:	f001 f9de 	bl	80094cc <pvPortMalloc>
 8008110:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d003      	beq.n	8008120 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	631a      	str	r2, [r3, #48]	@ 0x30
 800811e:	e005      	b.n	800812c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008120:	6978      	ldr	r0, [r7, #20]
 8008122:	f001 faa1 	bl	8009668 <vPortFree>
 8008126:	e001      	b.n	800812c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008128:	2300      	movs	r3, #0
 800812a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d017      	beq.n	8008162 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800813a:	88fa      	ldrh	r2, [r7, #6]
 800813c:	2300      	movs	r3, #0
 800813e:	9303      	str	r3, [sp, #12]
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	9302      	str	r3, [sp, #8]
 8008144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f80e 	bl	8008172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008156:	69f8      	ldr	r0, [r7, #28]
 8008158:	f000 f894 	bl	8008284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800815c:	2301      	movs	r3, #1
 800815e:	61bb      	str	r3, [r7, #24]
 8008160:	e002      	b.n	8008168 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008162:	f04f 33ff 	mov.w	r3, #4294967295
 8008166:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008168:	69bb      	ldr	r3, [r7, #24]
	}
 800816a:	4618      	mov	r0, r3
 800816c:	3720      	adds	r7, #32
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b088      	sub	sp, #32
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	607a      	str	r2, [r7, #4]
 800817e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800818a:	3b01      	subs	r3, #1
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	f023 0307 	bic.w	r3, r3, #7
 8008198:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00b      	beq.n	80081bc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	617b      	str	r3, [r7, #20]
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	e7fd      	b.n	80081b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d01f      	beq.n	8008202 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081c2:	2300      	movs	r3, #0
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	e012      	b.n	80081ee <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	7819      	ldrb	r1, [r3, #0]
 80081d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4413      	add	r3, r2
 80081d6:	3334      	adds	r3, #52	@ 0x34
 80081d8:	460a      	mov	r2, r1
 80081da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	3301      	adds	r3, #1
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	2b0f      	cmp	r3, #15
 80081f2:	d9e9      	bls.n	80081c8 <prvInitialiseNewTask+0x56>
 80081f4:	e000      	b.n	80081f8 <prvInitialiseNewTask+0x86>
			{
				break;
 80081f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008200:	e003      	b.n	800820a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800820a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820c:	2b06      	cmp	r3, #6
 800820e:	d901      	bls.n	8008214 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008210:	2306      	movs	r3, #6
 8008212:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008218:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800821e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	2200      	movs	r2, #0
 8008224:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	3304      	adds	r3, #4
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff f88e 	bl	800734c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008232:	3318      	adds	r3, #24
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff f889 	bl	800734c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800823e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	f1c3 0207 	rsb	r2, r3, #7
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800824e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	2200      	movs	r2, #0
 8008254:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	68f9      	ldr	r1, [r7, #12]
 8008262:	69b8      	ldr	r0, [r7, #24]
 8008264:	f000 fede 	bl	8009024 <pxPortInitialiseStack>
 8008268:	4602      	mov	r2, r0
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800826e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800827a:	bf00      	nop
 800827c:	3720      	adds	r7, #32
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800828c:	f000 fffc 	bl	8009288 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008290:	4b2a      	ldr	r3, [pc, #168]	@ (800833c <prvAddNewTaskToReadyList+0xb8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3301      	adds	r3, #1
 8008296:	4a29      	ldr	r2, [pc, #164]	@ (800833c <prvAddNewTaskToReadyList+0xb8>)
 8008298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800829a:	4b29      	ldr	r3, [pc, #164]	@ (8008340 <prvAddNewTaskToReadyList+0xbc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082a2:	4a27      	ldr	r2, [pc, #156]	@ (8008340 <prvAddNewTaskToReadyList+0xbc>)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082a8:	4b24      	ldr	r3, [pc, #144]	@ (800833c <prvAddNewTaskToReadyList+0xb8>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d110      	bne.n	80082d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082b0:	f000 fbd4 	bl	8008a5c <prvInitialiseTaskLists>
 80082b4:	e00d      	b.n	80082d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082b6:	4b23      	ldr	r3, [pc, #140]	@ (8008344 <prvAddNewTaskToReadyList+0xc0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082be:	4b20      	ldr	r3, [pc, #128]	@ (8008340 <prvAddNewTaskToReadyList+0xbc>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d802      	bhi.n	80082d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008340 <prvAddNewTaskToReadyList+0xbc>)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008348 <prvAddNewTaskToReadyList+0xc4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3301      	adds	r3, #1
 80082d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008348 <prvAddNewTaskToReadyList+0xc4>)
 80082da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e0:	2201      	movs	r2, #1
 80082e2:	409a      	lsls	r2, r3
 80082e4:	4b19      	ldr	r3, [pc, #100]	@ (800834c <prvAddNewTaskToReadyList+0xc8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	4a18      	ldr	r2, [pc, #96]	@ (800834c <prvAddNewTaskToReadyList+0xc8>)
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4a15      	ldr	r2, [pc, #84]	@ (8008350 <prvAddNewTaskToReadyList+0xcc>)
 80082fc:	441a      	add	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3304      	adds	r3, #4
 8008302:	4619      	mov	r1, r3
 8008304:	4610      	mov	r0, r2
 8008306:	f7ff f82e 	bl	8007366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800830a:	f000 ffef 	bl	80092ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800830e:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <prvAddNewTaskToReadyList+0xc0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00e      	beq.n	8008334 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008316:	4b0a      	ldr	r3, [pc, #40]	@ (8008340 <prvAddNewTaskToReadyList+0xbc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008320:	429a      	cmp	r2, r3
 8008322:	d207      	bcs.n	8008334 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008324:	4b0b      	ldr	r3, [pc, #44]	@ (8008354 <prvAddNewTaskToReadyList+0xd0>)
 8008326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	200005b4 	.word	0x200005b4
 8008340:	200004b4 	.word	0x200004b4
 8008344:	200005c0 	.word	0x200005c0
 8008348:	200005d0 	.word	0x200005d0
 800834c:	200005bc 	.word	0x200005bc
 8008350:	200004b8 	.word	0x200004b8
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d018      	beq.n	800839c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800836a:	4b14      	ldr	r3, [pc, #80]	@ (80083bc <vTaskDelay+0x64>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <vTaskDelay+0x32>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	60bb      	str	r3, [r7, #8]
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	e7fd      	b.n	8008386 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800838a:	f000 f87d 	bl	8008488 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800838e:	2100      	movs	r1, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fde1 	bl	8008f58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008396:	f000 f885 	bl	80084a4 <xTaskResumeAll>
 800839a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d107      	bne.n	80083b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80083a2:	4b07      	ldr	r3, [pc, #28]	@ (80083c0 <vTaskDelay+0x68>)
 80083a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	200005dc 	.word	0x200005dc
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08a      	sub	sp, #40	@ 0x28
 80083c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083d2:	463a      	mov	r2, r7
 80083d4:	1d39      	adds	r1, r7, #4
 80083d6:	f107 0308 	add.w	r3, r7, #8
 80083da:	4618      	mov	r0, r3
 80083dc:	f7f9 f94a 	bl	8001674 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	9202      	str	r2, [sp, #8]
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	2300      	movs	r3, #0
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	2300      	movs	r3, #0
 80083f0:	460a      	mov	r2, r1
 80083f2:	491f      	ldr	r1, [pc, #124]	@ (8008470 <vTaskStartScheduler+0xac>)
 80083f4:	481f      	ldr	r0, [pc, #124]	@ (8008474 <vTaskStartScheduler+0xb0>)
 80083f6:	f7ff fe17 	bl	8008028 <xTaskCreateStatic>
 80083fa:	4603      	mov	r3, r0
 80083fc:	4a1e      	ldr	r2, [pc, #120]	@ (8008478 <vTaskStartScheduler+0xb4>)
 80083fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008400:	4b1d      	ldr	r3, [pc, #116]	@ (8008478 <vTaskStartScheduler+0xb4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008408:	2301      	movs	r3, #1
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	e001      	b.n	8008412 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d116      	bne.n	8008446 <vTaskStartScheduler+0x82>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	613b      	str	r3, [r7, #16]
}
 800842a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800842c:	4b13      	ldr	r3, [pc, #76]	@ (800847c <vTaskStartScheduler+0xb8>)
 800842e:	f04f 32ff 	mov.w	r2, #4294967295
 8008432:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008434:	4b12      	ldr	r3, [pc, #72]	@ (8008480 <vTaskStartScheduler+0xbc>)
 8008436:	2201      	movs	r2, #1
 8008438:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800843a:	4b12      	ldr	r3, [pc, #72]	@ (8008484 <vTaskStartScheduler+0xc0>)
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008440:	f000 fe7e 	bl	8009140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008444:	e00f      	b.n	8008466 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844c:	d10b      	bne.n	8008466 <vTaskStartScheduler+0xa2>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	60fb      	str	r3, [r7, #12]
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	e7fd      	b.n	8008462 <vTaskStartScheduler+0x9e>
}
 8008466:	bf00      	nop
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	0800afe8 	.word	0x0800afe8
 8008474:	08008a2d 	.word	0x08008a2d
 8008478:	200005d8 	.word	0x200005d8
 800847c:	200005d4 	.word	0x200005d4
 8008480:	200005c0 	.word	0x200005c0
 8008484:	200005b8 	.word	0x200005b8

08008488 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800848c:	4b04      	ldr	r3, [pc, #16]	@ (80084a0 <vTaskSuspendAll+0x18>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3301      	adds	r3, #1
 8008492:	4a03      	ldr	r2, [pc, #12]	@ (80084a0 <vTaskSuspendAll+0x18>)
 8008494:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008496:	bf00      	nop
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	200005dc 	.word	0x200005dc

080084a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084b2:	4b42      	ldr	r3, [pc, #264]	@ (80085bc <xTaskResumeAll+0x118>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10b      	bne.n	80084d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	603b      	str	r3, [r7, #0]
}
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	e7fd      	b.n	80084ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084d2:	f000 fed9 	bl	8009288 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084d6:	4b39      	ldr	r3, [pc, #228]	@ (80085bc <xTaskResumeAll+0x118>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3b01      	subs	r3, #1
 80084dc:	4a37      	ldr	r2, [pc, #220]	@ (80085bc <xTaskResumeAll+0x118>)
 80084de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084e0:	4b36      	ldr	r3, [pc, #216]	@ (80085bc <xTaskResumeAll+0x118>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d161      	bne.n	80085ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084e8:	4b35      	ldr	r3, [pc, #212]	@ (80085c0 <xTaskResumeAll+0x11c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d05d      	beq.n	80085ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084f0:	e02e      	b.n	8008550 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f2:	4b34      	ldr	r3, [pc, #208]	@ (80085c4 <xTaskResumeAll+0x120>)
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3318      	adds	r3, #24
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe ff8e 	bl	8007420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3304      	adds	r3, #4
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe ff89 	bl	8007420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008512:	2201      	movs	r2, #1
 8008514:	409a      	lsls	r2, r3
 8008516:	4b2c      	ldr	r3, [pc, #176]	@ (80085c8 <xTaskResumeAll+0x124>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4313      	orrs	r3, r2
 800851c:	4a2a      	ldr	r2, [pc, #168]	@ (80085c8 <xTaskResumeAll+0x124>)
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4a27      	ldr	r2, [pc, #156]	@ (80085cc <xTaskResumeAll+0x128>)
 800852e:	441a      	add	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3304      	adds	r3, #4
 8008534:	4619      	mov	r1, r3
 8008536:	4610      	mov	r0, r2
 8008538:	f7fe ff15 	bl	8007366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008540:	4b23      	ldr	r3, [pc, #140]	@ (80085d0 <xTaskResumeAll+0x12c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	429a      	cmp	r2, r3
 8008548:	d302      	bcc.n	8008550 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800854a:	4b22      	ldr	r3, [pc, #136]	@ (80085d4 <xTaskResumeAll+0x130>)
 800854c:	2201      	movs	r2, #1
 800854e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008550:	4b1c      	ldr	r3, [pc, #112]	@ (80085c4 <xTaskResumeAll+0x120>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1cc      	bne.n	80084f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800855e:	f000 fb1b 	bl	8008b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008562:	4b1d      	ldr	r3, [pc, #116]	@ (80085d8 <xTaskResumeAll+0x134>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d010      	beq.n	8008590 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800856e:	f000 f837 	bl	80085e0 <xTaskIncrementTick>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008578:	4b16      	ldr	r3, [pc, #88]	@ (80085d4 <xTaskResumeAll+0x130>)
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3b01      	subs	r3, #1
 8008582:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1f1      	bne.n	800856e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800858a:	4b13      	ldr	r3, [pc, #76]	@ (80085d8 <xTaskResumeAll+0x134>)
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008590:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <xTaskResumeAll+0x130>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d009      	beq.n	80085ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800859c:	4b0f      	ldr	r3, [pc, #60]	@ (80085dc <xTaskResumeAll+0x138>)
 800859e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085ac:	f000 fe9e 	bl	80092ec <vPortExitCritical>

	return xAlreadyYielded;
 80085b0:	68bb      	ldr	r3, [r7, #8]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200005dc 	.word	0x200005dc
 80085c0:	200005b4 	.word	0x200005b4
 80085c4:	20000574 	.word	0x20000574
 80085c8:	200005bc 	.word	0x200005bc
 80085cc:	200004b8 	.word	0x200004b8
 80085d0:	200004b4 	.word	0x200004b4
 80085d4:	200005c8 	.word	0x200005c8
 80085d8:	200005c4 	.word	0x200005c4
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008728 <xTaskIncrementTick+0x148>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f040 808f 	bne.w	8008712 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085f4:	4b4d      	ldr	r3, [pc, #308]	@ (800872c <xTaskIncrementTick+0x14c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3301      	adds	r3, #1
 80085fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085fc:	4a4b      	ldr	r2, [pc, #300]	@ (800872c <xTaskIncrementTick+0x14c>)
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d121      	bne.n	800864c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008608:	4b49      	ldr	r3, [pc, #292]	@ (8008730 <xTaskIncrementTick+0x150>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	603b      	str	r3, [r7, #0]
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	e7fd      	b.n	8008626 <xTaskIncrementTick+0x46>
 800862a:	4b41      	ldr	r3, [pc, #260]	@ (8008730 <xTaskIncrementTick+0x150>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	4b40      	ldr	r3, [pc, #256]	@ (8008734 <xTaskIncrementTick+0x154>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a3e      	ldr	r2, [pc, #248]	@ (8008730 <xTaskIncrementTick+0x150>)
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	4a3e      	ldr	r2, [pc, #248]	@ (8008734 <xTaskIncrementTick+0x154>)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	4b3e      	ldr	r3, [pc, #248]	@ (8008738 <xTaskIncrementTick+0x158>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3301      	adds	r3, #1
 8008644:	4a3c      	ldr	r2, [pc, #240]	@ (8008738 <xTaskIncrementTick+0x158>)
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	f000 faa6 	bl	8008b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800864c:	4b3b      	ldr	r3, [pc, #236]	@ (800873c <xTaskIncrementTick+0x15c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	429a      	cmp	r2, r3
 8008654:	d348      	bcc.n	80086e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008656:	4b36      	ldr	r3, [pc, #216]	@ (8008730 <xTaskIncrementTick+0x150>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008660:	4b36      	ldr	r3, [pc, #216]	@ (800873c <xTaskIncrementTick+0x15c>)
 8008662:	f04f 32ff 	mov.w	r2, #4294967295
 8008666:	601a      	str	r2, [r3, #0]
					break;
 8008668:	e03e      	b.n	80086e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800866a:	4b31      	ldr	r3, [pc, #196]	@ (8008730 <xTaskIncrementTick+0x150>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	429a      	cmp	r2, r3
 8008680:	d203      	bcs.n	800868a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008682:	4a2e      	ldr	r2, [pc, #184]	@ (800873c <xTaskIncrementTick+0x15c>)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008688:	e02e      	b.n	80086e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	3304      	adds	r3, #4
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fec6 	bl	8007420 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3318      	adds	r3, #24
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fe febd 	bl	8007420 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086aa:	2201      	movs	r2, #1
 80086ac:	409a      	lsls	r2, r3
 80086ae:	4b24      	ldr	r3, [pc, #144]	@ (8008740 <xTaskIncrementTick+0x160>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	4a22      	ldr	r2, [pc, #136]	@ (8008740 <xTaskIncrementTick+0x160>)
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086bc:	4613      	mov	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4a1f      	ldr	r2, [pc, #124]	@ (8008744 <xTaskIncrementTick+0x164>)
 80086c6:	441a      	add	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7fe fe49 	bl	8007366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008748 <xTaskIncrementTick+0x168>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086de:	429a      	cmp	r2, r3
 80086e0:	d3b9      	bcc.n	8008656 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80086e2:	2301      	movs	r3, #1
 80086e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086e6:	e7b6      	b.n	8008656 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086e8:	4b17      	ldr	r3, [pc, #92]	@ (8008748 <xTaskIncrementTick+0x168>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ee:	4915      	ldr	r1, [pc, #84]	@ (8008744 <xTaskIncrementTick+0x164>)
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	440b      	add	r3, r1
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d901      	bls.n	8008704 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008704:	4b11      	ldr	r3, [pc, #68]	@ (800874c <xTaskIncrementTick+0x16c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	e004      	b.n	800871c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008712:	4b0f      	ldr	r3, [pc, #60]	@ (8008750 <xTaskIncrementTick+0x170>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3301      	adds	r3, #1
 8008718:	4a0d      	ldr	r2, [pc, #52]	@ (8008750 <xTaskIncrementTick+0x170>)
 800871a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800871c:	697b      	ldr	r3, [r7, #20]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	200005dc 	.word	0x200005dc
 800872c:	200005b8 	.word	0x200005b8
 8008730:	2000056c 	.word	0x2000056c
 8008734:	20000570 	.word	0x20000570
 8008738:	200005cc 	.word	0x200005cc
 800873c:	200005d4 	.word	0x200005d4
 8008740:	200005bc 	.word	0x200005bc
 8008744:	200004b8 	.word	0x200004b8
 8008748:	200004b4 	.word	0x200004b4
 800874c:	200005c8 	.word	0x200005c8
 8008750:	200005c4 	.word	0x200005c4

08008754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800875a:	4b27      	ldr	r3, [pc, #156]	@ (80087f8 <vTaskSwitchContext+0xa4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008762:	4b26      	ldr	r3, [pc, #152]	@ (80087fc <vTaskSwitchContext+0xa8>)
 8008764:	2201      	movs	r2, #1
 8008766:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008768:	e040      	b.n	80087ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800876a:	4b24      	ldr	r3, [pc, #144]	@ (80087fc <vTaskSwitchContext+0xa8>)
 800876c:	2200      	movs	r2, #0
 800876e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008770:	4b23      	ldr	r3, [pc, #140]	@ (8008800 <vTaskSwitchContext+0xac>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	fab3 f383 	clz	r3, r3
 800877c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800877e:	7afb      	ldrb	r3, [r7, #11]
 8008780:	f1c3 031f 	rsb	r3, r3, #31
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	491f      	ldr	r1, [pc, #124]	@ (8008804 <vTaskSwitchContext+0xb0>)
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10b      	bne.n	80087b2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	607b      	str	r3, [r7, #4]
}
 80087ac:	bf00      	nop
 80087ae:	bf00      	nop
 80087b0:	e7fd      	b.n	80087ae <vTaskSwitchContext+0x5a>
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4613      	mov	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4a11      	ldr	r2, [pc, #68]	@ (8008804 <vTaskSwitchContext+0xb0>)
 80087be:	4413      	add	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	605a      	str	r2, [r3, #4]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	3308      	adds	r3, #8
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d104      	bne.n	80087e2 <vTaskSwitchContext+0x8e>
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	4a07      	ldr	r2, [pc, #28]	@ (8008808 <vTaskSwitchContext+0xb4>)
 80087ea:	6013      	str	r3, [r2, #0]
}
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	200005dc 	.word	0x200005dc
 80087fc:	200005c8 	.word	0x200005c8
 8008800:	200005bc 	.word	0x200005bc
 8008804:	200004b8 	.word	0x200004b8
 8008808:	200004b4 	.word	0x200004b4

0800880c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10b      	bne.n	8008834 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	60fb      	str	r3, [r7, #12]
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	e7fd      	b.n	8008830 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008834:	4b07      	ldr	r3, [pc, #28]	@ (8008854 <vTaskPlaceOnEventList+0x48>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3318      	adds	r3, #24
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7fe fdb6 	bl	80073ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008842:	2101      	movs	r1, #1
 8008844:	6838      	ldr	r0, [r7, #0]
 8008846:	f000 fb87 	bl	8008f58 <prvAddCurrentTaskToDelayedList>
}
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	200004b4 	.word	0x200004b4

08008858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10b      	bne.n	8008886 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	60fb      	str	r3, [r7, #12]
}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	e7fd      	b.n	8008882 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	3318      	adds	r3, #24
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fdc8 	bl	8007420 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008890:	4b1d      	ldr	r3, [pc, #116]	@ (8008908 <xTaskRemoveFromEventList+0xb0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d11c      	bne.n	80088d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3304      	adds	r3, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fdbf 	bl	8007420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a6:	2201      	movs	r2, #1
 80088a8:	409a      	lsls	r2, r3
 80088aa:	4b18      	ldr	r3, [pc, #96]	@ (800890c <xTaskRemoveFromEventList+0xb4>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	4a16      	ldr	r2, [pc, #88]	@ (800890c <xTaskRemoveFromEventList+0xb4>)
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b8:	4613      	mov	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4a13      	ldr	r2, [pc, #76]	@ (8008910 <xTaskRemoveFromEventList+0xb8>)
 80088c2:	441a      	add	r2, r3
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7fe fd4b 	bl	8007366 <vListInsertEnd>
 80088d0:	e005      	b.n	80088de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	3318      	adds	r3, #24
 80088d6:	4619      	mov	r1, r3
 80088d8:	480e      	ldr	r0, [pc, #56]	@ (8008914 <xTaskRemoveFromEventList+0xbc>)
 80088da:	f7fe fd44 	bl	8007366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008918 <xTaskRemoveFromEventList+0xc0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d905      	bls.n	80088f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088ec:	2301      	movs	r3, #1
 80088ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088f0:	4b0a      	ldr	r3, [pc, #40]	@ (800891c <xTaskRemoveFromEventList+0xc4>)
 80088f2:	2201      	movs	r2, #1
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	e001      	b.n	80088fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088fc:	697b      	ldr	r3, [r7, #20]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	200005dc 	.word	0x200005dc
 800890c:	200005bc 	.word	0x200005bc
 8008910:	200004b8 	.word	0x200004b8
 8008914:	20000574 	.word	0x20000574
 8008918:	200004b4 	.word	0x200004b4
 800891c:	200005c8 	.word	0x200005c8

08008920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008928:	4b06      	ldr	r3, [pc, #24]	@ (8008944 <vTaskInternalSetTimeOutState+0x24>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008930:	4b05      	ldr	r3, [pc, #20]	@ (8008948 <vTaskInternalSetTimeOutState+0x28>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	605a      	str	r2, [r3, #4]
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	200005cc 	.word	0x200005cc
 8008948:	200005b8 	.word	0x200005b8

0800894c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10b      	bne.n	8008974 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	613b      	str	r3, [r7, #16]
}
 800896e:	bf00      	nop
 8008970:	bf00      	nop
 8008972:	e7fd      	b.n	8008970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10b      	bne.n	8008992 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	60fb      	str	r3, [r7, #12]
}
 800898c:	bf00      	nop
 800898e:	bf00      	nop
 8008990:	e7fd      	b.n	800898e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008992:	f000 fc79 	bl	8009288 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008996:	4b1d      	ldr	r3, [pc, #116]	@ (8008a0c <xTaskCheckForTimeOut+0xc0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ae:	d102      	bne.n	80089b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e023      	b.n	80089fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	4b15      	ldr	r3, [pc, #84]	@ (8008a10 <xTaskCheckForTimeOut+0xc4>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d007      	beq.n	80089d2 <xTaskCheckForTimeOut+0x86>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d302      	bcc.n	80089d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	61fb      	str	r3, [r7, #28]
 80089d0:	e015      	b.n	80089fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d20b      	bcs.n	80089f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff ff99 	bl	8008920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61fb      	str	r3, [r7, #28]
 80089f2:	e004      	b.n	80089fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089fe:	f000 fc75 	bl	80092ec <vPortExitCritical>

	return xReturn;
 8008a02:	69fb      	ldr	r3, [r7, #28]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3720      	adds	r7, #32
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	200005b8 	.word	0x200005b8
 8008a10:	200005cc 	.word	0x200005cc

08008a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a18:	4b03      	ldr	r3, [pc, #12]	@ (8008a28 <vTaskMissedYield+0x14>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
}
 8008a1e:	bf00      	nop
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	200005c8 	.word	0x200005c8

08008a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a34:	f000 f852 	bl	8008adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a38:	4b06      	ldr	r3, [pc, #24]	@ (8008a54 <prvIdleTask+0x28>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d9f9      	bls.n	8008a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a40:	4b05      	ldr	r3, [pc, #20]	@ (8008a58 <prvIdleTask+0x2c>)
 8008a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a50:	e7f0      	b.n	8008a34 <prvIdleTask+0x8>
 8008a52:	bf00      	nop
 8008a54:	200004b8 	.word	0x200004b8
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a62:	2300      	movs	r3, #0
 8008a64:	607b      	str	r3, [r7, #4]
 8008a66:	e00c      	b.n	8008a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4a12      	ldr	r2, [pc, #72]	@ (8008abc <prvInitialiseTaskLists+0x60>)
 8008a74:	4413      	add	r3, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fc48 	bl	800730c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	607b      	str	r3, [r7, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b06      	cmp	r3, #6
 8008a86:	d9ef      	bls.n	8008a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a88:	480d      	ldr	r0, [pc, #52]	@ (8008ac0 <prvInitialiseTaskLists+0x64>)
 8008a8a:	f7fe fc3f 	bl	800730c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a8e:	480d      	ldr	r0, [pc, #52]	@ (8008ac4 <prvInitialiseTaskLists+0x68>)
 8008a90:	f7fe fc3c 	bl	800730c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a94:	480c      	ldr	r0, [pc, #48]	@ (8008ac8 <prvInitialiseTaskLists+0x6c>)
 8008a96:	f7fe fc39 	bl	800730c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a9a:	480c      	ldr	r0, [pc, #48]	@ (8008acc <prvInitialiseTaskLists+0x70>)
 8008a9c:	f7fe fc36 	bl	800730c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008aa0:	480b      	ldr	r0, [pc, #44]	@ (8008ad0 <prvInitialiseTaskLists+0x74>)
 8008aa2:	f7fe fc33 	bl	800730c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad4 <prvInitialiseTaskLists+0x78>)
 8008aa8:	4a05      	ldr	r2, [pc, #20]	@ (8008ac0 <prvInitialiseTaskLists+0x64>)
 8008aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <prvInitialiseTaskLists+0x7c>)
 8008aae:	4a05      	ldr	r2, [pc, #20]	@ (8008ac4 <prvInitialiseTaskLists+0x68>)
 8008ab0:	601a      	str	r2, [r3, #0]
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	200004b8 	.word	0x200004b8
 8008ac0:	20000544 	.word	0x20000544
 8008ac4:	20000558 	.word	0x20000558
 8008ac8:	20000574 	.word	0x20000574
 8008acc:	20000588 	.word	0x20000588
 8008ad0:	200005a0 	.word	0x200005a0
 8008ad4:	2000056c 	.word	0x2000056c
 8008ad8:	20000570 	.word	0x20000570

08008adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ae2:	e019      	b.n	8008b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ae4:	f000 fbd0 	bl	8009288 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae8:	4b10      	ldr	r3, [pc, #64]	@ (8008b2c <prvCheckTasksWaitingTermination+0x50>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3304      	adds	r3, #4
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fc93 	bl	8007420 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008afa:	4b0d      	ldr	r3, [pc, #52]	@ (8008b30 <prvCheckTasksWaitingTermination+0x54>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	4a0b      	ldr	r2, [pc, #44]	@ (8008b30 <prvCheckTasksWaitingTermination+0x54>)
 8008b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b04:	4b0b      	ldr	r3, [pc, #44]	@ (8008b34 <prvCheckTasksWaitingTermination+0x58>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8008b34 <prvCheckTasksWaitingTermination+0x58>)
 8008b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b0e:	f000 fbed 	bl	80092ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f810 	bl	8008b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b18:	4b06      	ldr	r3, [pc, #24]	@ (8008b34 <prvCheckTasksWaitingTermination+0x58>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e1      	bne.n	8008ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000588 	.word	0x20000588
 8008b30:	200005b4 	.word	0x200005b4
 8008b34:	2000059c 	.word	0x2000059c

08008b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d108      	bne.n	8008b5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fd8a 	bl	8009668 <vPortFree>
				vPortFree( pxTCB );
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fd87 	bl	8009668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b5a:	e019      	b.n	8008b90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d103      	bne.n	8008b6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fd7e 	bl	8009668 <vPortFree>
	}
 8008b6c:	e010      	b.n	8008b90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d00b      	beq.n	8008b90 <prvDeleteTCB+0x58>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	60fb      	str	r3, [r7, #12]
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <prvDeleteTCB+0x54>
	}
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd0 <prvResetNextTaskUnblockTime+0x38>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008baa:	f04f 32ff 	mov.w	r2, #4294967295
 8008bae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bb0:	e008      	b.n	8008bc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb2:	4b07      	ldr	r3, [pc, #28]	@ (8008bd0 <prvResetNextTaskUnblockTime+0x38>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4a04      	ldr	r2, [pc, #16]	@ (8008bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008bc2:	6013      	str	r3, [r2, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	2000056c 	.word	0x2000056c
 8008bd4:	200005d4 	.word	0x200005d4

08008bd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bde:	4b0b      	ldr	r3, [pc, #44]	@ (8008c0c <xTaskGetSchedulerState+0x34>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d102      	bne.n	8008bec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008be6:	2301      	movs	r3, #1
 8008be8:	607b      	str	r3, [r7, #4]
 8008bea:	e008      	b.n	8008bfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bec:	4b08      	ldr	r3, [pc, #32]	@ (8008c10 <xTaskGetSchedulerState+0x38>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d102      	bne.n	8008bfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	607b      	str	r3, [r7, #4]
 8008bf8:	e001      	b.n	8008bfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bfe:	687b      	ldr	r3, [r7, #4]
	}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	200005c0 	.word	0x200005c0
 8008c10:	200005dc 	.word	0x200005dc

08008c14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c20:	2300      	movs	r3, #0
 8008c22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d05e      	beq.n	8008ce8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c2e:	4b31      	ldr	r3, [pc, #196]	@ (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d24e      	bcs.n	8008cd6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	db06      	blt.n	8008c4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c40:	4b2c      	ldr	r3, [pc, #176]	@ (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c46:	f1c3 0207 	rsb	r2, r3, #7
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6959      	ldr	r1, [r3, #20]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4a26      	ldr	r2, [pc, #152]	@ (8008cf8 <xTaskPriorityInherit+0xe4>)
 8008c60:	4413      	add	r3, r2
 8008c62:	4299      	cmp	r1, r3
 8008c64:	d12f      	bne.n	8008cc6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe fbd8 	bl	8007420 <uxListRemove>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10a      	bne.n	8008c8c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c80:	43da      	mvns	r2, r3
 8008c82:	4b1e      	ldr	r3, [pc, #120]	@ (8008cfc <xTaskPriorityInherit+0xe8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4013      	ands	r3, r2
 8008c88:	4a1c      	ldr	r2, [pc, #112]	@ (8008cfc <xTaskPriorityInherit+0xe8>)
 8008c8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c8c:	4b19      	ldr	r3, [pc, #100]	@ (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	409a      	lsls	r2, r3
 8008c9e:	4b17      	ldr	r3, [pc, #92]	@ (8008cfc <xTaskPriorityInherit+0xe8>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	4a15      	ldr	r2, [pc, #84]	@ (8008cfc <xTaskPriorityInherit+0xe8>)
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4a10      	ldr	r2, [pc, #64]	@ (8008cf8 <xTaskPriorityInherit+0xe4>)
 8008cb6:	441a      	add	r2, r3
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f7fe fb51 	bl	8007366 <vListInsertEnd>
 8008cc4:	e004      	b.n	8008cd0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	e008      	b.n	8008ce8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cda:	4b06      	ldr	r3, [pc, #24]	@ (8008cf4 <xTaskPriorityInherit+0xe0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d201      	bcs.n	8008ce8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
	}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	200004b4 	.word	0x200004b4
 8008cf8:	200004b8 	.word	0x200004b8
 8008cfc:	200005bc 	.word	0x200005bc

08008d00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d070      	beq.n	8008df8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d16:	4b3b      	ldr	r3, [pc, #236]	@ (8008e04 <xTaskPriorityDisinherit+0x104>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d00b      	beq.n	8008d38 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	60fb      	str	r3, [r7, #12]
}
 8008d32:	bf00      	nop
 8008d34:	bf00      	nop
 8008d36:	e7fd      	b.n	8008d34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60bb      	str	r3, [r7, #8]
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d5c:	1e5a      	subs	r2, r3, #1
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d044      	beq.n	8008df8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d140      	bne.n	8008df8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fb50 	bl	8007420 <uxListRemove>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d115      	bne.n	8008db2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8a:	491f      	ldr	r1, [pc, #124]	@ (8008e08 <xTaskPriorityDisinherit+0x108>)
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10a      	bne.n	8008db2 <xTaskPriorityDisinherit+0xb2>
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	2201      	movs	r2, #1
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	43da      	mvns	r2, r3
 8008da8:	4b18      	ldr	r3, [pc, #96]	@ (8008e0c <xTaskPriorityDisinherit+0x10c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4013      	ands	r3, r2
 8008dae:	4a17      	ldr	r2, [pc, #92]	@ (8008e0c <xTaskPriorityDisinherit+0x10c>)
 8008db0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbe:	f1c3 0207 	rsb	r2, r3, #7
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dca:	2201      	movs	r2, #1
 8008dcc:	409a      	lsls	r2, r3
 8008dce:	4b0f      	ldr	r3, [pc, #60]	@ (8008e0c <xTaskPriorityDisinherit+0x10c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8008e0c <xTaskPriorityDisinherit+0x10c>)
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4a08      	ldr	r2, [pc, #32]	@ (8008e08 <xTaskPriorityDisinherit+0x108>)
 8008de6:	441a      	add	r2, r3
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f7fe fab9 	bl	8007366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008df4:	2301      	movs	r3, #1
 8008df6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008df8:	697b      	ldr	r3, [r7, #20]
	}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200004b4 	.word	0x200004b4
 8008e08:	200004b8 	.word	0x200004b8
 8008e0c:	200005bc 	.word	0x200005bc

08008e10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d079      	beq.n	8008f1c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10b      	bne.n	8008e48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	60fb      	str	r3, [r7, #12]
}
 8008e42:	bf00      	nop
 8008e44:	bf00      	nop
 8008e46:	e7fd      	b.n	8008e44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d902      	bls.n	8008e58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	61fb      	str	r3, [r7, #28]
 8008e56:	e002      	b.n	8008e5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d059      	beq.n	8008f1c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d154      	bne.n	8008f1c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e72:	4b2c      	ldr	r3, [pc, #176]	@ (8008f24 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d10b      	bne.n	8008e94 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	60bb      	str	r3, [r7, #8]
}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	e7fd      	b.n	8008e90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	db04      	blt.n	8008eb2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f1c3 0207 	rsb	r2, r3, #7
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	6959      	ldr	r1, [r3, #20]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4a19      	ldr	r2, [pc, #100]	@ (8008f28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008ec2:	4413      	add	r3, r2
 8008ec4:	4299      	cmp	r1, r3
 8008ec6:	d129      	bne.n	8008f1c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fe faa7 	bl	8007420 <uxListRemove>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	2201      	movs	r2, #1
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	43da      	mvns	r2, r3
 8008ee4:	4b11      	ldr	r3, [pc, #68]	@ (8008f2c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	4a10      	ldr	r2, [pc, #64]	@ (8008f2c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008eec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	409a      	lsls	r2, r3
 8008ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f2c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	4a0b      	ldr	r2, [pc, #44]	@ (8008f2c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4a06      	ldr	r2, [pc, #24]	@ (8008f28 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008f0e:	441a      	add	r2, r3
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f7fe fa25 	bl	8007366 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f1c:	bf00      	nop
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	200004b4 	.word	0x200004b4
 8008f28:	200004b8 	.word	0x200004b8
 8008f2c:	200005bc 	.word	0x200005bc

08008f30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f34:	4b07      	ldr	r3, [pc, #28]	@ (8008f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d004      	beq.n	8008f46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f3c:	4b05      	ldr	r3, [pc, #20]	@ (8008f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f42:	3201      	adds	r2, #1
 8008f44:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008f46:	4b03      	ldr	r3, [pc, #12]	@ (8008f54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f48:	681b      	ldr	r3, [r3, #0]
	}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	200004b4 	.word	0x200004b4

08008f58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f62:	4b29      	ldr	r3, [pc, #164]	@ (8009008 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f68:	4b28      	ldr	r3, [pc, #160]	@ (800900c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fa56 	bl	8007420 <uxListRemove>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10b      	bne.n	8008f92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008f7a:	4b24      	ldr	r3, [pc, #144]	@ (800900c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	2201      	movs	r2, #1
 8008f82:	fa02 f303 	lsl.w	r3, r2, r3
 8008f86:	43da      	mvns	r2, r3
 8008f88:	4b21      	ldr	r3, [pc, #132]	@ (8009010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	4a20      	ldr	r2, [pc, #128]	@ (8009010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f98:	d10a      	bne.n	8008fb0 <prvAddCurrentTaskToDelayedList+0x58>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800900c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	481a      	ldr	r0, [pc, #104]	@ (8009014 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008faa:	f7fe f9dc 	bl	8007366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fae:	e026      	b.n	8008ffe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fb8:	4b14      	ldr	r3, [pc, #80]	@ (800900c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d209      	bcs.n	8008fdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fc8:	4b13      	ldr	r3, [pc, #76]	@ (8009018 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800900c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	f7fe f9ea 	bl	80073ae <vListInsert>
}
 8008fda:	e010      	b.n	8008ffe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800901c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800900c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4610      	mov	r0, r2
 8008fea:	f7fe f9e0 	bl	80073ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008fee:	4b0c      	ldr	r3, [pc, #48]	@ (8009020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d202      	bcs.n	8008ffe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008ff8:	4a09      	ldr	r2, [pc, #36]	@ (8009020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	6013      	str	r3, [r2, #0]
}
 8008ffe:	bf00      	nop
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	200005b8 	.word	0x200005b8
 800900c:	200004b4 	.word	0x200004b4
 8009010:	200005bc 	.word	0x200005bc
 8009014:	200005a0 	.word	0x200005a0
 8009018:	20000570 	.word	0x20000570
 800901c:	2000056c 	.word	0x2000056c
 8009020:	200005d4 	.word	0x200005d4

08009024 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3b04      	subs	r3, #4
 8009034:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800903c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3b04      	subs	r3, #4
 8009042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f023 0201 	bic.w	r2, r3, #1
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3b04      	subs	r3, #4
 8009052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009054:	4a0c      	ldr	r2, [pc, #48]	@ (8009088 <pxPortInitialiseStack+0x64>)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	3b14      	subs	r3, #20
 800905e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3b04      	subs	r3, #4
 800906a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f06f 0202 	mvn.w	r2, #2
 8009072:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3b20      	subs	r3, #32
 8009078:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800907a:	68fb      	ldr	r3, [r7, #12]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	0800908d 	.word	0x0800908d

0800908c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009096:	4b13      	ldr	r3, [pc, #76]	@ (80090e4 <prvTaskExitError+0x58>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d00b      	beq.n	80090b8 <prvTaskExitError+0x2c>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	60fb      	str	r3, [r7, #12]
}
 80090b2:	bf00      	nop
 80090b4:	bf00      	nop
 80090b6:	e7fd      	b.n	80090b4 <prvTaskExitError+0x28>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	60bb      	str	r3, [r7, #8]
}
 80090ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090cc:	bf00      	nop
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d0fc      	beq.n	80090ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000098 	.word	0x20000098
	...

080090f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090f0:	4b07      	ldr	r3, [pc, #28]	@ (8009110 <pxCurrentTCBConst2>)
 80090f2:	6819      	ldr	r1, [r3, #0]
 80090f4:	6808      	ldr	r0, [r1, #0]
 80090f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fa:	f380 8809 	msr	PSP, r0
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f04f 0000 	mov.w	r0, #0
 8009106:	f380 8811 	msr	BASEPRI, r0
 800910a:	4770      	bx	lr
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst2>:
 8009110:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009118:	4808      	ldr	r0, [pc, #32]	@ (800913c <prvPortStartFirstTask+0x24>)
 800911a:	6800      	ldr	r0, [r0, #0]
 800911c:	6800      	ldr	r0, [r0, #0]
 800911e:	f380 8808 	msr	MSP, r0
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	f380 8814 	msr	CONTROL, r0
 800912a:	b662      	cpsie	i
 800912c:	b661      	cpsie	f
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	df00      	svc	0
 8009138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800913a:	bf00      	nop
 800913c:	e000ed08 	.word	0xe000ed08

08009140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009146:	4b47      	ldr	r3, [pc, #284]	@ (8009264 <xPortStartScheduler+0x124>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a47      	ldr	r2, [pc, #284]	@ (8009268 <xPortStartScheduler+0x128>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d10b      	bne.n	8009168 <xPortStartScheduler+0x28>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	60fb      	str	r3, [r7, #12]
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	e7fd      	b.n	8009164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009168:	4b3e      	ldr	r3, [pc, #248]	@ (8009264 <xPortStartScheduler+0x124>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a3f      	ldr	r2, [pc, #252]	@ (800926c <xPortStartScheduler+0x12c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d10b      	bne.n	800918a <xPortStartScheduler+0x4a>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	613b      	str	r3, [r7, #16]
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	e7fd      	b.n	8009186 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800918a:	4b39      	ldr	r3, [pc, #228]	@ (8009270 <xPortStartScheduler+0x130>)
 800918c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b2db      	uxtb	r3, r3
 8009194:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	22ff      	movs	r2, #255	@ 0xff
 800919a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	4b31      	ldr	r3, [pc, #196]	@ (8009274 <xPortStartScheduler+0x134>)
 80091b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091b2:	4b31      	ldr	r3, [pc, #196]	@ (8009278 <xPortStartScheduler+0x138>)
 80091b4:	2207      	movs	r2, #7
 80091b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091b8:	e009      	b.n	80091ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80091ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009278 <xPortStartScheduler+0x138>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3b01      	subs	r3, #1
 80091c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009278 <xPortStartScheduler+0x138>)
 80091c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ce:	78fb      	ldrb	r3, [r7, #3]
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091d6:	2b80      	cmp	r3, #128	@ 0x80
 80091d8:	d0ef      	beq.n	80091ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091da:	4b27      	ldr	r3, [pc, #156]	@ (8009278 <xPortStartScheduler+0x138>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f1c3 0307 	rsb	r3, r3, #7
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d00b      	beq.n	80091fe <xPortStartScheduler+0xbe>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	60bb      	str	r3, [r7, #8]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009278 <xPortStartScheduler+0x138>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	4a1c      	ldr	r2, [pc, #112]	@ (8009278 <xPortStartScheduler+0x138>)
 8009206:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009208:	4b1b      	ldr	r3, [pc, #108]	@ (8009278 <xPortStartScheduler+0x138>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009210:	4a19      	ldr	r2, [pc, #100]	@ (8009278 <xPortStartScheduler+0x138>)
 8009212:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	b2da      	uxtb	r2, r3
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800921c:	4b17      	ldr	r3, [pc, #92]	@ (800927c <xPortStartScheduler+0x13c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a16      	ldr	r2, [pc, #88]	@ (800927c <xPortStartScheduler+0x13c>)
 8009222:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009226:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009228:	4b14      	ldr	r3, [pc, #80]	@ (800927c <xPortStartScheduler+0x13c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a13      	ldr	r2, [pc, #76]	@ (800927c <xPortStartScheduler+0x13c>)
 800922e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009232:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009234:	f000 f8da 	bl	80093ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009238:	4b11      	ldr	r3, [pc, #68]	@ (8009280 <xPortStartScheduler+0x140>)
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800923e:	f000 f8f9 	bl	8009434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009242:	4b10      	ldr	r3, [pc, #64]	@ (8009284 <xPortStartScheduler+0x144>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a0f      	ldr	r2, [pc, #60]	@ (8009284 <xPortStartScheduler+0x144>)
 8009248:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800924c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800924e:	f7ff ff63 	bl	8009118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009252:	f7ff fa7f 	bl	8008754 <vTaskSwitchContext>
	prvTaskExitError();
 8009256:	f7ff ff19 	bl	800908c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	e000ed00 	.word	0xe000ed00
 8009268:	410fc271 	.word	0x410fc271
 800926c:	410fc270 	.word	0x410fc270
 8009270:	e000e400 	.word	0xe000e400
 8009274:	200005e0 	.word	0x200005e0
 8009278:	200005e4 	.word	0x200005e4
 800927c:	e000ed20 	.word	0xe000ed20
 8009280:	20000098 	.word	0x20000098
 8009284:	e000ef34 	.word	0xe000ef34

08009288 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	607b      	str	r3, [r7, #4]
}
 80092a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092a2:	4b10      	ldr	r3, [pc, #64]	@ (80092e4 <vPortEnterCritical+0x5c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3301      	adds	r3, #1
 80092a8:	4a0e      	ldr	r2, [pc, #56]	@ (80092e4 <vPortEnterCritical+0x5c>)
 80092aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092ac:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <vPortEnterCritical+0x5c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d110      	bne.n	80092d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092b4:	4b0c      	ldr	r3, [pc, #48]	@ (80092e8 <vPortEnterCritical+0x60>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	603b      	str	r3, [r7, #0]
}
 80092d0:	bf00      	nop
 80092d2:	bf00      	nop
 80092d4:	e7fd      	b.n	80092d2 <vPortEnterCritical+0x4a>
	}
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20000098 	.word	0x20000098
 80092e8:	e000ed04 	.word	0xe000ed04

080092ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092f2:	4b12      	ldr	r3, [pc, #72]	@ (800933c <vPortExitCritical+0x50>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10b      	bne.n	8009312 <vPortExitCritical+0x26>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	607b      	str	r3, [r7, #4]
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009312:	4b0a      	ldr	r3, [pc, #40]	@ (800933c <vPortExitCritical+0x50>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3b01      	subs	r3, #1
 8009318:	4a08      	ldr	r2, [pc, #32]	@ (800933c <vPortExitCritical+0x50>)
 800931a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800931c:	4b07      	ldr	r3, [pc, #28]	@ (800933c <vPortExitCritical+0x50>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d105      	bne.n	8009330 <vPortExitCritical+0x44>
 8009324:	2300      	movs	r3, #0
 8009326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f383 8811 	msr	BASEPRI, r3
}
 800932e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	20000098 	.word	0x20000098

08009340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009340:	f3ef 8009 	mrs	r0, PSP
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	4b15      	ldr	r3, [pc, #84]	@ (80093a0 <pxCurrentTCBConst>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	f01e 0f10 	tst.w	lr, #16
 8009350:	bf08      	it	eq
 8009352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935a:	6010      	str	r0, [r2, #0]
 800935c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009360:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009364:	f380 8811 	msr	BASEPRI, r0
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f7ff f9f0 	bl	8008754 <vTaskSwitchContext>
 8009374:	f04f 0000 	mov.w	r0, #0
 8009378:	f380 8811 	msr	BASEPRI, r0
 800937c:	bc09      	pop	{r0, r3}
 800937e:	6819      	ldr	r1, [r3, #0]
 8009380:	6808      	ldr	r0, [r1, #0]
 8009382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009386:	f01e 0f10 	tst.w	lr, #16
 800938a:	bf08      	it	eq
 800938c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009390:	f380 8809 	msr	PSP, r0
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	f3af 8000 	nop.w

080093a0 <pxCurrentTCBConst>:
 80093a0:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop

080093a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	607b      	str	r3, [r7, #4]
}
 80093c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093c2:	f7ff f90d 	bl	80085e0 <xTaskIncrementTick>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093cc:	4b06      	ldr	r3, [pc, #24]	@ (80093e8 <xPortSysTickHandler+0x40>)
 80093ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	2300      	movs	r3, #0
 80093d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	f383 8811 	msr	BASEPRI, r3
}
 80093de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	e000ed04 	.word	0xe000ed04

080093ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009420 <vPortSetupTimerInterrupt+0x34>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009424 <vPortSetupTimerInterrupt+0x38>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80093fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009428 <vPortSetupTimerInterrupt+0x3c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a0a      	ldr	r2, [pc, #40]	@ (800942c <vPortSetupTimerInterrupt+0x40>)
 8009402:	fba2 2303 	umull	r2, r3, r2, r3
 8009406:	099b      	lsrs	r3, r3, #6
 8009408:	4a09      	ldr	r2, [pc, #36]	@ (8009430 <vPortSetupTimerInterrupt+0x44>)
 800940a:	3b01      	subs	r3, #1
 800940c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800940e:	4b04      	ldr	r3, [pc, #16]	@ (8009420 <vPortSetupTimerInterrupt+0x34>)
 8009410:	2207      	movs	r2, #7
 8009412:	601a      	str	r2, [r3, #0]
}
 8009414:	bf00      	nop
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	e000e010 	.word	0xe000e010
 8009424:	e000e018 	.word	0xe000e018
 8009428:	2000006c 	.word	0x2000006c
 800942c:	10624dd3 	.word	0x10624dd3
 8009430:	e000e014 	.word	0xe000e014

08009434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009434:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009444 <vPortEnableVFP+0x10>
 8009438:	6801      	ldr	r1, [r0, #0]
 800943a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800943e:	6001      	str	r1, [r0, #0]
 8009440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009442:	bf00      	nop
 8009444:	e000ed88 	.word	0xe000ed88

08009448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800944e:	f3ef 8305 	mrs	r3, IPSR
 8009452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b0f      	cmp	r3, #15
 8009458:	d915      	bls.n	8009486 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800945a:	4a18      	ldr	r2, [pc, #96]	@ (80094bc <vPortValidateInterruptPriority+0x74>)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009464:	4b16      	ldr	r3, [pc, #88]	@ (80094c0 <vPortValidateInterruptPriority+0x78>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	7afa      	ldrb	r2, [r7, #11]
 800946a:	429a      	cmp	r2, r3
 800946c:	d20b      	bcs.n	8009486 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	607b      	str	r3, [r7, #4]
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009486:	4b0f      	ldr	r3, [pc, #60]	@ (80094c4 <vPortValidateInterruptPriority+0x7c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800948e:	4b0e      	ldr	r3, [pc, #56]	@ (80094c8 <vPortValidateInterruptPriority+0x80>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d90b      	bls.n	80094ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	603b      	str	r3, [r7, #0]
}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	e7fd      	b.n	80094aa <vPortValidateInterruptPriority+0x62>
	}
 80094ae:	bf00      	nop
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	e000e3f0 	.word	0xe000e3f0
 80094c0:	200005e0 	.word	0x200005e0
 80094c4:	e000ed0c 	.word	0xe000ed0c
 80094c8:	200005e4 	.word	0x200005e4

080094cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08a      	sub	sp, #40	@ 0x28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094d8:	f7fe ffd6 	bl	8008488 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009650 <pvPortMalloc+0x184>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094e4:	f000 f924 	bl	8009730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009654 <pvPortMalloc+0x188>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4013      	ands	r3, r2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f040 8095 	bne.w	8009620 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d01e      	beq.n	800953a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80094fc:	2208      	movs	r2, #8
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4413      	add	r3, r2
 8009502:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f003 0307 	and.w	r3, r3, #7
 800950a:	2b00      	cmp	r3, #0
 800950c:	d015      	beq.n	800953a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f023 0307 	bic.w	r3, r3, #7
 8009514:	3308      	adds	r3, #8
 8009516:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <pvPortMalloc+0x6e>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	617b      	str	r3, [r7, #20]
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	e7fd      	b.n	8009536 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d06f      	beq.n	8009620 <pvPortMalloc+0x154>
 8009540:	4b45      	ldr	r3, [pc, #276]	@ (8009658 <pvPortMalloc+0x18c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d86a      	bhi.n	8009620 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800954a:	4b44      	ldr	r3, [pc, #272]	@ (800965c <pvPortMalloc+0x190>)
 800954c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800954e:	4b43      	ldr	r3, [pc, #268]	@ (800965c <pvPortMalloc+0x190>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009554:	e004      	b.n	8009560 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800955a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d903      	bls.n	8009572 <pvPortMalloc+0xa6>
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f1      	bne.n	8009556 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009572:	4b37      	ldr	r3, [pc, #220]	@ (8009650 <pvPortMalloc+0x184>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009578:	429a      	cmp	r2, r3
 800957a:	d051      	beq.n	8009620 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2208      	movs	r2, #8
 8009582:	4413      	add	r3, r2
 8009584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800958e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	1ad2      	subs	r2, r2, r3
 8009596:	2308      	movs	r3, #8
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	429a      	cmp	r2, r3
 800959c:	d920      	bls.n	80095e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800959e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4413      	add	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00b      	beq.n	80095c8 <pvPortMalloc+0xfc>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	613b      	str	r3, [r7, #16]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	1ad2      	subs	r2, r2, r3
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095da:	69b8      	ldr	r0, [r7, #24]
 80095dc:	f000 f90a 	bl	80097f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009658 <pvPortMalloc+0x18c>)
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009658 <pvPortMalloc+0x18c>)
 80095ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009658 <pvPortMalloc+0x18c>)
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009660 <pvPortMalloc+0x194>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d203      	bcs.n	8009602 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095fa:	4b17      	ldr	r3, [pc, #92]	@ (8009658 <pvPortMalloc+0x18c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a18      	ldr	r2, [pc, #96]	@ (8009660 <pvPortMalloc+0x194>)
 8009600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	4b13      	ldr	r3, [pc, #76]	@ (8009654 <pvPortMalloc+0x188>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	431a      	orrs	r2, r3
 800960c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009616:	4b13      	ldr	r3, [pc, #76]	@ (8009664 <pvPortMalloc+0x198>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3301      	adds	r3, #1
 800961c:	4a11      	ldr	r2, [pc, #68]	@ (8009664 <pvPortMalloc+0x198>)
 800961e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009620:	f7fe ff40 	bl	80084a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <pvPortMalloc+0x17a>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	60fb      	str	r3, [r7, #12]
}
 8009640:	bf00      	nop
 8009642:	bf00      	nop
 8009644:	e7fd      	b.n	8009642 <pvPortMalloc+0x176>
	return pvReturn;
 8009646:	69fb      	ldr	r3, [r7, #28]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3728      	adds	r7, #40	@ 0x28
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	200041f0 	.word	0x200041f0
 8009654:	20004204 	.word	0x20004204
 8009658:	200041f4 	.word	0x200041f4
 800965c:	200041e8 	.word	0x200041e8
 8009660:	200041f8 	.word	0x200041f8
 8009664:	200041fc 	.word	0x200041fc

08009668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d04f      	beq.n	800971a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800967a:	2308      	movs	r3, #8
 800967c:	425b      	negs	r3, r3
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	4413      	add	r3, r2
 8009682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	4b25      	ldr	r3, [pc, #148]	@ (8009724 <vPortFree+0xbc>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4013      	ands	r3, r2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10b      	bne.n	80096ae <vPortFree+0x46>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	60fb      	str	r3, [r7, #12]
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	e7fd      	b.n	80096aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00b      	beq.n	80096ce <vPortFree+0x66>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60bb      	str	r3, [r7, #8]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	4b14      	ldr	r3, [pc, #80]	@ (8009724 <vPortFree+0xbc>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4013      	ands	r3, r2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01e      	beq.n	800971a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d11a      	bne.n	800971a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009724 <vPortFree+0xbc>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	43db      	mvns	r3, r3
 80096ee:	401a      	ands	r2, r3
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096f4:	f7fe fec8 	bl	8008488 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <vPortFree+0xc0>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4413      	add	r3, r2
 8009702:	4a09      	ldr	r2, [pc, #36]	@ (8009728 <vPortFree+0xc0>)
 8009704:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009706:	6938      	ldr	r0, [r7, #16]
 8009708:	f000 f874 	bl	80097f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800970c:	4b07      	ldr	r3, [pc, #28]	@ (800972c <vPortFree+0xc4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3301      	adds	r3, #1
 8009712:	4a06      	ldr	r2, [pc, #24]	@ (800972c <vPortFree+0xc4>)
 8009714:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009716:	f7fe fec5 	bl	80084a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800971a:	bf00      	nop
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20004204 	.word	0x20004204
 8009728:	200041f4 	.word	0x200041f4
 800972c:	20004200 	.word	0x20004200

08009730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009736:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800973a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800973c:	4b27      	ldr	r3, [pc, #156]	@ (80097dc <prvHeapInit+0xac>)
 800973e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00c      	beq.n	8009764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3307      	adds	r3, #7
 800974e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0307 	bic.w	r3, r3, #7
 8009756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	4a1f      	ldr	r2, [pc, #124]	@ (80097dc <prvHeapInit+0xac>)
 8009760:	4413      	add	r3, r2
 8009762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009768:	4a1d      	ldr	r2, [pc, #116]	@ (80097e0 <prvHeapInit+0xb0>)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800976e:	4b1c      	ldr	r3, [pc, #112]	@ (80097e0 <prvHeapInit+0xb0>)
 8009770:	2200      	movs	r2, #0
 8009772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	4413      	add	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800977c:	2208      	movs	r2, #8
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	1a9b      	subs	r3, r3, r2
 8009782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0307 	bic.w	r3, r3, #7
 800978a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4a15      	ldr	r2, [pc, #84]	@ (80097e4 <prvHeapInit+0xb4>)
 8009790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009792:	4b14      	ldr	r3, [pc, #80]	@ (80097e4 <prvHeapInit+0xb4>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2200      	movs	r2, #0
 8009798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800979a:	4b12      	ldr	r3, [pc, #72]	@ (80097e4 <prvHeapInit+0xb4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	1ad2      	subs	r2, r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097b0:	4b0c      	ldr	r3, [pc, #48]	@ (80097e4 <prvHeapInit+0xb4>)
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	4a0a      	ldr	r2, [pc, #40]	@ (80097e8 <prvHeapInit+0xb8>)
 80097be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	4a09      	ldr	r2, [pc, #36]	@ (80097ec <prvHeapInit+0xbc>)
 80097c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097c8:	4b09      	ldr	r3, [pc, #36]	@ (80097f0 <prvHeapInit+0xc0>)
 80097ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80097ce:	601a      	str	r2, [r3, #0]
}
 80097d0:	bf00      	nop
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	200005e8 	.word	0x200005e8
 80097e0:	200041e8 	.word	0x200041e8
 80097e4:	200041f0 	.word	0x200041f0
 80097e8:	200041f8 	.word	0x200041f8
 80097ec:	200041f4 	.word	0x200041f4
 80097f0:	20004204 	.word	0x20004204

080097f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097fc:	4b28      	ldr	r3, [pc, #160]	@ (80098a0 <prvInsertBlockIntoFreeList+0xac>)
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	e002      	b.n	8009808 <prvInsertBlockIntoFreeList+0x14>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	429a      	cmp	r2, r3
 8009810:	d8f7      	bhi.n	8009802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	4413      	add	r3, r2
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d108      	bne.n	8009836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	441a      	add	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	441a      	add	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d118      	bne.n	800987c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	4b15      	ldr	r3, [pc, #84]	@ (80098a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	429a      	cmp	r2, r3
 8009854:	d00d      	beq.n	8009872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	441a      	add	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	e008      	b.n	8009884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009872:	4b0c      	ldr	r3, [pc, #48]	@ (80098a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	e003      	b.n	8009884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	429a      	cmp	r2, r3
 800988a:	d002      	beq.n	8009892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009892:	bf00      	nop
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	200041e8 	.word	0x200041e8
 80098a4:	200041f0 	.word	0x200041f0

080098a8 <srand>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4b10      	ldr	r3, [pc, #64]	@ (80098ec <srand+0x44>)
 80098ac:	681d      	ldr	r5, [r3, #0]
 80098ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80098b0:	4604      	mov	r4, r0
 80098b2:	b9b3      	cbnz	r3, 80098e2 <srand+0x3a>
 80098b4:	2018      	movs	r0, #24
 80098b6:	f000 fa7d 	bl	8009db4 <malloc>
 80098ba:	4602      	mov	r2, r0
 80098bc:	6328      	str	r0, [r5, #48]	@ 0x30
 80098be:	b920      	cbnz	r0, 80098ca <srand+0x22>
 80098c0:	4b0b      	ldr	r3, [pc, #44]	@ (80098f0 <srand+0x48>)
 80098c2:	480c      	ldr	r0, [pc, #48]	@ (80098f4 <srand+0x4c>)
 80098c4:	2146      	movs	r1, #70	@ 0x46
 80098c6:	f000 fa0d 	bl	8009ce4 <__assert_func>
 80098ca:	490b      	ldr	r1, [pc, #44]	@ (80098f8 <srand+0x50>)
 80098cc:	4b0b      	ldr	r3, [pc, #44]	@ (80098fc <srand+0x54>)
 80098ce:	e9c0 1300 	strd	r1, r3, [r0]
 80098d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009900 <srand+0x58>)
 80098d4:	6083      	str	r3, [r0, #8]
 80098d6:	230b      	movs	r3, #11
 80098d8:	8183      	strh	r3, [r0, #12]
 80098da:	2100      	movs	r1, #0
 80098dc:	2001      	movs	r0, #1
 80098de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80098e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80098e4:	2200      	movs	r2, #0
 80098e6:	611c      	str	r4, [r3, #16]
 80098e8:	615a      	str	r2, [r3, #20]
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	200000a8 	.word	0x200000a8
 80098f0:	0804d644 	.word	0x0804d644
 80098f4:	0804d65b 	.word	0x0804d65b
 80098f8:	abcd330e 	.word	0xabcd330e
 80098fc:	e66d1234 	.word	0xe66d1234
 8009900:	0005deec 	.word	0x0005deec

08009904 <rand>:
 8009904:	4b16      	ldr	r3, [pc, #88]	@ (8009960 <rand+0x5c>)
 8009906:	b510      	push	{r4, lr}
 8009908:	681c      	ldr	r4, [r3, #0]
 800990a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800990c:	b9b3      	cbnz	r3, 800993c <rand+0x38>
 800990e:	2018      	movs	r0, #24
 8009910:	f000 fa50 	bl	8009db4 <malloc>
 8009914:	4602      	mov	r2, r0
 8009916:	6320      	str	r0, [r4, #48]	@ 0x30
 8009918:	b920      	cbnz	r0, 8009924 <rand+0x20>
 800991a:	4b12      	ldr	r3, [pc, #72]	@ (8009964 <rand+0x60>)
 800991c:	4812      	ldr	r0, [pc, #72]	@ (8009968 <rand+0x64>)
 800991e:	2152      	movs	r1, #82	@ 0x52
 8009920:	f000 f9e0 	bl	8009ce4 <__assert_func>
 8009924:	4911      	ldr	r1, [pc, #68]	@ (800996c <rand+0x68>)
 8009926:	4b12      	ldr	r3, [pc, #72]	@ (8009970 <rand+0x6c>)
 8009928:	e9c0 1300 	strd	r1, r3, [r0]
 800992c:	4b11      	ldr	r3, [pc, #68]	@ (8009974 <rand+0x70>)
 800992e:	6083      	str	r3, [r0, #8]
 8009930:	230b      	movs	r3, #11
 8009932:	8183      	strh	r3, [r0, #12]
 8009934:	2100      	movs	r1, #0
 8009936:	2001      	movs	r0, #1
 8009938:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800993c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800993e:	480e      	ldr	r0, [pc, #56]	@ (8009978 <rand+0x74>)
 8009940:	690b      	ldr	r3, [r1, #16]
 8009942:	694c      	ldr	r4, [r1, #20]
 8009944:	4a0d      	ldr	r2, [pc, #52]	@ (800997c <rand+0x78>)
 8009946:	4358      	muls	r0, r3
 8009948:	fb02 0004 	mla	r0, r2, r4, r0
 800994c:	fba3 3202 	umull	r3, r2, r3, r2
 8009950:	3301      	adds	r3, #1
 8009952:	eb40 0002 	adc.w	r0, r0, r2
 8009956:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800995a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800995e:	bd10      	pop	{r4, pc}
 8009960:	200000a8 	.word	0x200000a8
 8009964:	0804d644 	.word	0x0804d644
 8009968:	0804d65b 	.word	0x0804d65b
 800996c:	abcd330e 	.word	0xabcd330e
 8009970:	e66d1234 	.word	0xe66d1234
 8009974:	0005deec 	.word	0x0005deec
 8009978:	5851f42d 	.word	0x5851f42d
 800997c:	4c957f2d 	.word	0x4c957f2d

08009980 <std>:
 8009980:	2300      	movs	r3, #0
 8009982:	b510      	push	{r4, lr}
 8009984:	4604      	mov	r4, r0
 8009986:	e9c0 3300 	strd	r3, r3, [r0]
 800998a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800998e:	6083      	str	r3, [r0, #8]
 8009990:	8181      	strh	r1, [r0, #12]
 8009992:	6643      	str	r3, [r0, #100]	@ 0x64
 8009994:	81c2      	strh	r2, [r0, #14]
 8009996:	6183      	str	r3, [r0, #24]
 8009998:	4619      	mov	r1, r3
 800999a:	2208      	movs	r2, #8
 800999c:	305c      	adds	r0, #92	@ 0x5c
 800999e:	f000 f916 	bl	8009bce <memset>
 80099a2:	4b0d      	ldr	r3, [pc, #52]	@ (80099d8 <std+0x58>)
 80099a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80099a6:	4b0d      	ldr	r3, [pc, #52]	@ (80099dc <std+0x5c>)
 80099a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099aa:	4b0d      	ldr	r3, [pc, #52]	@ (80099e0 <std+0x60>)
 80099ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099ae:	4b0d      	ldr	r3, [pc, #52]	@ (80099e4 <std+0x64>)
 80099b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80099b2:	4b0d      	ldr	r3, [pc, #52]	@ (80099e8 <std+0x68>)
 80099b4:	6224      	str	r4, [r4, #32]
 80099b6:	429c      	cmp	r4, r3
 80099b8:	d006      	beq.n	80099c8 <std+0x48>
 80099ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099be:	4294      	cmp	r4, r2
 80099c0:	d002      	beq.n	80099c8 <std+0x48>
 80099c2:	33d0      	adds	r3, #208	@ 0xd0
 80099c4:	429c      	cmp	r4, r3
 80099c6:	d105      	bne.n	80099d4 <std+0x54>
 80099c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d0:	f000 b976 	b.w	8009cc0 <__retarget_lock_init_recursive>
 80099d4:	bd10      	pop	{r4, pc}
 80099d6:	bf00      	nop
 80099d8:	08009b49 	.word	0x08009b49
 80099dc:	08009b6b 	.word	0x08009b6b
 80099e0:	08009ba3 	.word	0x08009ba3
 80099e4:	08009bc7 	.word	0x08009bc7
 80099e8:	20004208 	.word	0x20004208

080099ec <stdio_exit_handler>:
 80099ec:	4a02      	ldr	r2, [pc, #8]	@ (80099f8 <stdio_exit_handler+0xc>)
 80099ee:	4903      	ldr	r1, [pc, #12]	@ (80099fc <stdio_exit_handler+0x10>)
 80099f0:	4803      	ldr	r0, [pc, #12]	@ (8009a00 <stdio_exit_handler+0x14>)
 80099f2:	f000 b869 	b.w	8009ac8 <_fwalk_sglue>
 80099f6:	bf00      	nop
 80099f8:	2000009c 	.word	0x2000009c
 80099fc:	0800a5f1 	.word	0x0800a5f1
 8009a00:	200000ac 	.word	0x200000ac

08009a04 <cleanup_stdio>:
 8009a04:	6841      	ldr	r1, [r0, #4]
 8009a06:	4b0c      	ldr	r3, [pc, #48]	@ (8009a38 <cleanup_stdio+0x34>)
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	b510      	push	{r4, lr}
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	d001      	beq.n	8009a14 <cleanup_stdio+0x10>
 8009a10:	f000 fdee 	bl	800a5f0 <_fflush_r>
 8009a14:	68a1      	ldr	r1, [r4, #8]
 8009a16:	4b09      	ldr	r3, [pc, #36]	@ (8009a3c <cleanup_stdio+0x38>)
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	d002      	beq.n	8009a22 <cleanup_stdio+0x1e>
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 fde7 	bl	800a5f0 <_fflush_r>
 8009a22:	68e1      	ldr	r1, [r4, #12]
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <cleanup_stdio+0x3c>)
 8009a26:	4299      	cmp	r1, r3
 8009a28:	d004      	beq.n	8009a34 <cleanup_stdio+0x30>
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a30:	f000 bdde 	b.w	800a5f0 <_fflush_r>
 8009a34:	bd10      	pop	{r4, pc}
 8009a36:	bf00      	nop
 8009a38:	20004208 	.word	0x20004208
 8009a3c:	20004270 	.word	0x20004270
 8009a40:	200042d8 	.word	0x200042d8

08009a44 <global_stdio_init.part.0>:
 8009a44:	b510      	push	{r4, lr}
 8009a46:	4b0b      	ldr	r3, [pc, #44]	@ (8009a74 <global_stdio_init.part.0+0x30>)
 8009a48:	4c0b      	ldr	r4, [pc, #44]	@ (8009a78 <global_stdio_init.part.0+0x34>)
 8009a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a7c <global_stdio_init.part.0+0x38>)
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	4620      	mov	r0, r4
 8009a50:	2200      	movs	r2, #0
 8009a52:	2104      	movs	r1, #4
 8009a54:	f7ff ff94 	bl	8009980 <std>
 8009a58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	2109      	movs	r1, #9
 8009a60:	f7ff ff8e 	bl	8009980 <std>
 8009a64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a68:	2202      	movs	r2, #2
 8009a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a6e:	2112      	movs	r1, #18
 8009a70:	f7ff bf86 	b.w	8009980 <std>
 8009a74:	20004340 	.word	0x20004340
 8009a78:	20004208 	.word	0x20004208
 8009a7c:	080099ed 	.word	0x080099ed

08009a80 <__sfp_lock_acquire>:
 8009a80:	4801      	ldr	r0, [pc, #4]	@ (8009a88 <__sfp_lock_acquire+0x8>)
 8009a82:	f000 b91e 	b.w	8009cc2 <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	20004349 	.word	0x20004349

08009a8c <__sfp_lock_release>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	@ (8009a94 <__sfp_lock_release+0x8>)
 8009a8e:	f000 b919 	b.w	8009cc4 <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	20004349 	.word	0x20004349

08009a98 <__sinit>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	f7ff fff0 	bl	8009a80 <__sfp_lock_acquire>
 8009aa0:	6a23      	ldr	r3, [r4, #32]
 8009aa2:	b11b      	cbz	r3, 8009aac <__sinit+0x14>
 8009aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa8:	f7ff bff0 	b.w	8009a8c <__sfp_lock_release>
 8009aac:	4b04      	ldr	r3, [pc, #16]	@ (8009ac0 <__sinit+0x28>)
 8009aae:	6223      	str	r3, [r4, #32]
 8009ab0:	4b04      	ldr	r3, [pc, #16]	@ (8009ac4 <__sinit+0x2c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1f5      	bne.n	8009aa4 <__sinit+0xc>
 8009ab8:	f7ff ffc4 	bl	8009a44 <global_stdio_init.part.0>
 8009abc:	e7f2      	b.n	8009aa4 <__sinit+0xc>
 8009abe:	bf00      	nop
 8009ac0:	08009a05 	.word	0x08009a05
 8009ac4:	20004340 	.word	0x20004340

08009ac8 <_fwalk_sglue>:
 8009ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009acc:	4607      	mov	r7, r0
 8009ace:	4688      	mov	r8, r1
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	2600      	movs	r6, #0
 8009ad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8009adc:	d505      	bpl.n	8009aea <_fwalk_sglue+0x22>
 8009ade:	6824      	ldr	r4, [r4, #0]
 8009ae0:	2c00      	cmp	r4, #0
 8009ae2:	d1f7      	bne.n	8009ad4 <_fwalk_sglue+0xc>
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d907      	bls.n	8009b00 <_fwalk_sglue+0x38>
 8009af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009af4:	3301      	adds	r3, #1
 8009af6:	d003      	beq.n	8009b00 <_fwalk_sglue+0x38>
 8009af8:	4629      	mov	r1, r5
 8009afa:	4638      	mov	r0, r7
 8009afc:	47c0      	blx	r8
 8009afe:	4306      	orrs	r6, r0
 8009b00:	3568      	adds	r5, #104	@ 0x68
 8009b02:	e7e9      	b.n	8009ad8 <_fwalk_sglue+0x10>

08009b04 <siprintf>:
 8009b04:	b40e      	push	{r1, r2, r3}
 8009b06:	b510      	push	{r4, lr}
 8009b08:	b09d      	sub	sp, #116	@ 0x74
 8009b0a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009b0c:	9002      	str	r0, [sp, #8]
 8009b0e:	9006      	str	r0, [sp, #24]
 8009b10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b14:	480a      	ldr	r0, [pc, #40]	@ (8009b40 <siprintf+0x3c>)
 8009b16:	9107      	str	r1, [sp, #28]
 8009b18:	9104      	str	r1, [sp, #16]
 8009b1a:	490a      	ldr	r1, [pc, #40]	@ (8009b44 <siprintf+0x40>)
 8009b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b20:	9105      	str	r1, [sp, #20]
 8009b22:	2400      	movs	r4, #0
 8009b24:	a902      	add	r1, sp, #8
 8009b26:	6800      	ldr	r0, [r0, #0]
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009b2c:	f000 fa54 	bl	8009fd8 <_svfiprintf_r>
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	701c      	strb	r4, [r3, #0]
 8009b34:	b01d      	add	sp, #116	@ 0x74
 8009b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3a:	b003      	add	sp, #12
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	200000a8 	.word	0x200000a8
 8009b44:	ffff0208 	.word	0xffff0208

08009b48 <__sread>:
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b50:	f000 f868 	bl	8009c24 <_read_r>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	bfab      	itete	ge
 8009b58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b5c:	181b      	addge	r3, r3, r0
 8009b5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b62:	bfac      	ite	ge
 8009b64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b66:	81a3      	strhlt	r3, [r4, #12]
 8009b68:	bd10      	pop	{r4, pc}

08009b6a <__swrite>:
 8009b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6e:	461f      	mov	r7, r3
 8009b70:	898b      	ldrh	r3, [r1, #12]
 8009b72:	05db      	lsls	r3, r3, #23
 8009b74:	4605      	mov	r5, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	4616      	mov	r6, r2
 8009b7a:	d505      	bpl.n	8009b88 <__swrite+0x1e>
 8009b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b80:	2302      	movs	r3, #2
 8009b82:	2200      	movs	r2, #0
 8009b84:	f000 f83c 	bl	8009c00 <_lseek_r>
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b92:	81a3      	strh	r3, [r4, #12]
 8009b94:	4632      	mov	r2, r6
 8009b96:	463b      	mov	r3, r7
 8009b98:	4628      	mov	r0, r5
 8009b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9e:	f000 b853 	b.w	8009c48 <_write_r>

08009ba2 <__sseek>:
 8009ba2:	b510      	push	{r4, lr}
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009baa:	f000 f829 	bl	8009c00 <_lseek_r>
 8009bae:	1c43      	adds	r3, r0, #1
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	bf15      	itete	ne
 8009bb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bbe:	81a3      	strheq	r3, [r4, #12]
 8009bc0:	bf18      	it	ne
 8009bc2:	81a3      	strhne	r3, [r4, #12]
 8009bc4:	bd10      	pop	{r4, pc}

08009bc6 <__sclose>:
 8009bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bca:	f000 b809 	b.w	8009be0 <_close_r>

08009bce <memset>:
 8009bce:	4402      	add	r2, r0
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d100      	bne.n	8009bd8 <memset+0xa>
 8009bd6:	4770      	bx	lr
 8009bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8009bdc:	e7f9      	b.n	8009bd2 <memset+0x4>
	...

08009be0 <_close_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d06      	ldr	r5, [pc, #24]	@ (8009bfc <_close_r+0x1c>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	602b      	str	r3, [r5, #0]
 8009bec:	f7f9 f9df 	bl	8002fae <_close>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_close_r+0x1a>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_close_r+0x1a>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	20004344 	.word	0x20004344

08009c00 <_lseek_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d07      	ldr	r5, [pc, #28]	@ (8009c20 <_lseek_r+0x20>)
 8009c04:	4604      	mov	r4, r0
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f7f9 f9f4 	bl	8002ffc <_lseek>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_lseek_r+0x1e>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_lseek_r+0x1e>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	20004344 	.word	0x20004344

08009c24 <_read_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d07      	ldr	r5, [pc, #28]	@ (8009c44 <_read_r+0x20>)
 8009c28:	4604      	mov	r4, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	602a      	str	r2, [r5, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7f9 f982 	bl	8002f3c <_read>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_read_r+0x1e>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_read_r+0x1e>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20004344 	.word	0x20004344

08009c48 <_write_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	@ (8009c68 <_write_r+0x20>)
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	4608      	mov	r0, r1
 8009c50:	4611      	mov	r1, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	602a      	str	r2, [r5, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f7f9 f98d 	bl	8002f76 <_write>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_write_r+0x1e>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_write_r+0x1e>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	20004344 	.word	0x20004344

08009c6c <__errno>:
 8009c6c:	4b01      	ldr	r3, [pc, #4]	@ (8009c74 <__errno+0x8>)
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	200000a8 	.word	0x200000a8

08009c78 <__libc_init_array>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8009cb0 <__libc_init_array+0x38>)
 8009c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8009cb4 <__libc_init_array+0x3c>)
 8009c7e:	1b64      	subs	r4, r4, r5
 8009c80:	10a4      	asrs	r4, r4, #2
 8009c82:	2600      	movs	r6, #0
 8009c84:	42a6      	cmp	r6, r4
 8009c86:	d109      	bne.n	8009c9c <__libc_init_array+0x24>
 8009c88:	4d0b      	ldr	r5, [pc, #44]	@ (8009cb8 <__libc_init_array+0x40>)
 8009c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8009cbc <__libc_init_array+0x44>)
 8009c8c:	f000 ffee 	bl	800ac6c <_init>
 8009c90:	1b64      	subs	r4, r4, r5
 8009c92:	10a4      	asrs	r4, r4, #2
 8009c94:	2600      	movs	r6, #0
 8009c96:	42a6      	cmp	r6, r4
 8009c98:	d105      	bne.n	8009ca6 <__libc_init_array+0x2e>
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca0:	4798      	blx	r3
 8009ca2:	3601      	adds	r6, #1
 8009ca4:	e7ee      	b.n	8009c84 <__libc_init_array+0xc>
 8009ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009caa:	4798      	blx	r3
 8009cac:	3601      	adds	r6, #1
 8009cae:	e7f2      	b.n	8009c96 <__libc_init_array+0x1e>
 8009cb0:	0804d72c 	.word	0x0804d72c
 8009cb4:	0804d72c 	.word	0x0804d72c
 8009cb8:	0804d72c 	.word	0x0804d72c
 8009cbc:	0804d730 	.word	0x0804d730

08009cc0 <__retarget_lock_init_recursive>:
 8009cc0:	4770      	bx	lr

08009cc2 <__retarget_lock_acquire_recursive>:
 8009cc2:	4770      	bx	lr

08009cc4 <__retarget_lock_release_recursive>:
 8009cc4:	4770      	bx	lr

08009cc6 <memcpy>:
 8009cc6:	440a      	add	r2, r1
 8009cc8:	4291      	cmp	r1, r2
 8009cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cce:	d100      	bne.n	8009cd2 <memcpy+0xc>
 8009cd0:	4770      	bx	lr
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cdc:	4291      	cmp	r1, r2
 8009cde:	d1f9      	bne.n	8009cd4 <memcpy+0xe>
 8009ce0:	bd10      	pop	{r4, pc}
	...

08009ce4 <__assert_func>:
 8009ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ce6:	4614      	mov	r4, r2
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4b09      	ldr	r3, [pc, #36]	@ (8009d10 <__assert_func+0x2c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4605      	mov	r5, r0
 8009cf0:	68d8      	ldr	r0, [r3, #12]
 8009cf2:	b14c      	cbz	r4, 8009d08 <__assert_func+0x24>
 8009cf4:	4b07      	ldr	r3, [pc, #28]	@ (8009d14 <__assert_func+0x30>)
 8009cf6:	9100      	str	r1, [sp, #0]
 8009cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cfc:	4906      	ldr	r1, [pc, #24]	@ (8009d18 <__assert_func+0x34>)
 8009cfe:	462b      	mov	r3, r5
 8009d00:	f000 fc9e 	bl	800a640 <fiprintf>
 8009d04:	f000 fcd8 	bl	800a6b8 <abort>
 8009d08:	4b04      	ldr	r3, [pc, #16]	@ (8009d1c <__assert_func+0x38>)
 8009d0a:	461c      	mov	r4, r3
 8009d0c:	e7f3      	b.n	8009cf6 <__assert_func+0x12>
 8009d0e:	bf00      	nop
 8009d10:	200000a8 	.word	0x200000a8
 8009d14:	0804d6b3 	.word	0x0804d6b3
 8009d18:	0804d6c0 	.word	0x0804d6c0
 8009d1c:	0804d6ee 	.word	0x0804d6ee

08009d20 <_free_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4605      	mov	r5, r0
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d041      	beq.n	8009dac <_free_r+0x8c>
 8009d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d2c:	1f0c      	subs	r4, r1, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bfb8      	it	lt
 8009d32:	18e4      	addlt	r4, r4, r3
 8009d34:	f000 f8e8 	bl	8009f08 <__malloc_lock>
 8009d38:	4a1d      	ldr	r2, [pc, #116]	@ (8009db0 <_free_r+0x90>)
 8009d3a:	6813      	ldr	r3, [r2, #0]
 8009d3c:	b933      	cbnz	r3, 8009d4c <_free_r+0x2c>
 8009d3e:	6063      	str	r3, [r4, #4]
 8009d40:	6014      	str	r4, [r2, #0]
 8009d42:	4628      	mov	r0, r5
 8009d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d48:	f000 b8e4 	b.w	8009f14 <__malloc_unlock>
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	d908      	bls.n	8009d62 <_free_r+0x42>
 8009d50:	6820      	ldr	r0, [r4, #0]
 8009d52:	1821      	adds	r1, r4, r0
 8009d54:	428b      	cmp	r3, r1
 8009d56:	bf01      	itttt	eq
 8009d58:	6819      	ldreq	r1, [r3, #0]
 8009d5a:	685b      	ldreq	r3, [r3, #4]
 8009d5c:	1809      	addeq	r1, r1, r0
 8009d5e:	6021      	streq	r1, [r4, #0]
 8009d60:	e7ed      	b.n	8009d3e <_free_r+0x1e>
 8009d62:	461a      	mov	r2, r3
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	b10b      	cbz	r3, 8009d6c <_free_r+0x4c>
 8009d68:	42a3      	cmp	r3, r4
 8009d6a:	d9fa      	bls.n	8009d62 <_free_r+0x42>
 8009d6c:	6811      	ldr	r1, [r2, #0]
 8009d6e:	1850      	adds	r0, r2, r1
 8009d70:	42a0      	cmp	r0, r4
 8009d72:	d10b      	bne.n	8009d8c <_free_r+0x6c>
 8009d74:	6820      	ldr	r0, [r4, #0]
 8009d76:	4401      	add	r1, r0
 8009d78:	1850      	adds	r0, r2, r1
 8009d7a:	4283      	cmp	r3, r0
 8009d7c:	6011      	str	r1, [r2, #0]
 8009d7e:	d1e0      	bne.n	8009d42 <_free_r+0x22>
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	6053      	str	r3, [r2, #4]
 8009d86:	4408      	add	r0, r1
 8009d88:	6010      	str	r0, [r2, #0]
 8009d8a:	e7da      	b.n	8009d42 <_free_r+0x22>
 8009d8c:	d902      	bls.n	8009d94 <_free_r+0x74>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	602b      	str	r3, [r5, #0]
 8009d92:	e7d6      	b.n	8009d42 <_free_r+0x22>
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	1821      	adds	r1, r4, r0
 8009d98:	428b      	cmp	r3, r1
 8009d9a:	bf04      	itt	eq
 8009d9c:	6819      	ldreq	r1, [r3, #0]
 8009d9e:	685b      	ldreq	r3, [r3, #4]
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	bf04      	itt	eq
 8009da4:	1809      	addeq	r1, r1, r0
 8009da6:	6021      	streq	r1, [r4, #0]
 8009da8:	6054      	str	r4, [r2, #4]
 8009daa:	e7ca      	b.n	8009d42 <_free_r+0x22>
 8009dac:	bd38      	pop	{r3, r4, r5, pc}
 8009dae:	bf00      	nop
 8009db0:	20004350 	.word	0x20004350

08009db4 <malloc>:
 8009db4:	4b02      	ldr	r3, [pc, #8]	@ (8009dc0 <malloc+0xc>)
 8009db6:	4601      	mov	r1, r0
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	f000 b825 	b.w	8009e08 <_malloc_r>
 8009dbe:	bf00      	nop
 8009dc0:	200000a8 	.word	0x200000a8

08009dc4 <sbrk_aligned>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8009e04 <sbrk_aligned+0x40>)
 8009dc8:	460c      	mov	r4, r1
 8009dca:	6831      	ldr	r1, [r6, #0]
 8009dcc:	4605      	mov	r5, r0
 8009dce:	b911      	cbnz	r1, 8009dd6 <sbrk_aligned+0x12>
 8009dd0:	f000 fc62 	bl	800a698 <_sbrk_r>
 8009dd4:	6030      	str	r0, [r6, #0]
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f000 fc5d 	bl	800a698 <_sbrk_r>
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	d103      	bne.n	8009dea <sbrk_aligned+0x26>
 8009de2:	f04f 34ff 	mov.w	r4, #4294967295
 8009de6:	4620      	mov	r0, r4
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
 8009dea:	1cc4      	adds	r4, r0, #3
 8009dec:	f024 0403 	bic.w	r4, r4, #3
 8009df0:	42a0      	cmp	r0, r4
 8009df2:	d0f8      	beq.n	8009de6 <sbrk_aligned+0x22>
 8009df4:	1a21      	subs	r1, r4, r0
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 fc4e 	bl	800a698 <_sbrk_r>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d1f2      	bne.n	8009de6 <sbrk_aligned+0x22>
 8009e00:	e7ef      	b.n	8009de2 <sbrk_aligned+0x1e>
 8009e02:	bf00      	nop
 8009e04:	2000434c 	.word	0x2000434c

08009e08 <_malloc_r>:
 8009e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e0c:	1ccd      	adds	r5, r1, #3
 8009e0e:	f025 0503 	bic.w	r5, r5, #3
 8009e12:	3508      	adds	r5, #8
 8009e14:	2d0c      	cmp	r5, #12
 8009e16:	bf38      	it	cc
 8009e18:	250c      	movcc	r5, #12
 8009e1a:	2d00      	cmp	r5, #0
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	db01      	blt.n	8009e24 <_malloc_r+0x1c>
 8009e20:	42a9      	cmp	r1, r5
 8009e22:	d904      	bls.n	8009e2e <_malloc_r+0x26>
 8009e24:	230c      	movs	r3, #12
 8009e26:	6033      	str	r3, [r6, #0]
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f04 <_malloc_r+0xfc>
 8009e32:	f000 f869 	bl	8009f08 <__malloc_lock>
 8009e36:	f8d8 3000 	ldr.w	r3, [r8]
 8009e3a:	461c      	mov	r4, r3
 8009e3c:	bb44      	cbnz	r4, 8009e90 <_malloc_r+0x88>
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4630      	mov	r0, r6
 8009e42:	f7ff ffbf 	bl	8009dc4 <sbrk_aligned>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	4604      	mov	r4, r0
 8009e4a:	d158      	bne.n	8009efe <_malloc_r+0xf6>
 8009e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8009e50:	4627      	mov	r7, r4
 8009e52:	2f00      	cmp	r7, #0
 8009e54:	d143      	bne.n	8009ede <_malloc_r+0xd6>
 8009e56:	2c00      	cmp	r4, #0
 8009e58:	d04b      	beq.n	8009ef2 <_malloc_r+0xea>
 8009e5a:	6823      	ldr	r3, [r4, #0]
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	4630      	mov	r0, r6
 8009e60:	eb04 0903 	add.w	r9, r4, r3
 8009e64:	f000 fc18 	bl	800a698 <_sbrk_r>
 8009e68:	4581      	cmp	r9, r0
 8009e6a:	d142      	bne.n	8009ef2 <_malloc_r+0xea>
 8009e6c:	6821      	ldr	r1, [r4, #0]
 8009e6e:	1a6d      	subs	r5, r5, r1
 8009e70:	4629      	mov	r1, r5
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7ff ffa6 	bl	8009dc4 <sbrk_aligned>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d03a      	beq.n	8009ef2 <_malloc_r+0xea>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	442b      	add	r3, r5
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	f8d8 3000 	ldr.w	r3, [r8]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	bb62      	cbnz	r2, 8009ee4 <_malloc_r+0xdc>
 8009e8a:	f8c8 7000 	str.w	r7, [r8]
 8009e8e:	e00f      	b.n	8009eb0 <_malloc_r+0xa8>
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	1b52      	subs	r2, r2, r5
 8009e94:	d420      	bmi.n	8009ed8 <_malloc_r+0xd0>
 8009e96:	2a0b      	cmp	r2, #11
 8009e98:	d917      	bls.n	8009eca <_malloc_r+0xc2>
 8009e9a:	1961      	adds	r1, r4, r5
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	6025      	str	r5, [r4, #0]
 8009ea0:	bf18      	it	ne
 8009ea2:	6059      	strne	r1, [r3, #4]
 8009ea4:	6863      	ldr	r3, [r4, #4]
 8009ea6:	bf08      	it	eq
 8009ea8:	f8c8 1000 	streq.w	r1, [r8]
 8009eac:	5162      	str	r2, [r4, r5]
 8009eae:	604b      	str	r3, [r1, #4]
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f000 f82f 	bl	8009f14 <__malloc_unlock>
 8009eb6:	f104 000b 	add.w	r0, r4, #11
 8009eba:	1d23      	adds	r3, r4, #4
 8009ebc:	f020 0007 	bic.w	r0, r0, #7
 8009ec0:	1ac2      	subs	r2, r0, r3
 8009ec2:	bf1c      	itt	ne
 8009ec4:	1a1b      	subne	r3, r3, r0
 8009ec6:	50a3      	strne	r3, [r4, r2]
 8009ec8:	e7af      	b.n	8009e2a <_malloc_r+0x22>
 8009eca:	6862      	ldr	r2, [r4, #4]
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	bf0c      	ite	eq
 8009ed0:	f8c8 2000 	streq.w	r2, [r8]
 8009ed4:	605a      	strne	r2, [r3, #4]
 8009ed6:	e7eb      	b.n	8009eb0 <_malloc_r+0xa8>
 8009ed8:	4623      	mov	r3, r4
 8009eda:	6864      	ldr	r4, [r4, #4]
 8009edc:	e7ae      	b.n	8009e3c <_malloc_r+0x34>
 8009ede:	463c      	mov	r4, r7
 8009ee0:	687f      	ldr	r7, [r7, #4]
 8009ee2:	e7b6      	b.n	8009e52 <_malloc_r+0x4a>
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	d1fb      	bne.n	8009ee4 <_malloc_r+0xdc>
 8009eec:	2300      	movs	r3, #0
 8009eee:	6053      	str	r3, [r2, #4]
 8009ef0:	e7de      	b.n	8009eb0 <_malloc_r+0xa8>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	6033      	str	r3, [r6, #0]
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f000 f80c 	bl	8009f14 <__malloc_unlock>
 8009efc:	e794      	b.n	8009e28 <_malloc_r+0x20>
 8009efe:	6005      	str	r5, [r0, #0]
 8009f00:	e7d6      	b.n	8009eb0 <_malloc_r+0xa8>
 8009f02:	bf00      	nop
 8009f04:	20004350 	.word	0x20004350

08009f08 <__malloc_lock>:
 8009f08:	4801      	ldr	r0, [pc, #4]	@ (8009f10 <__malloc_lock+0x8>)
 8009f0a:	f7ff beda 	b.w	8009cc2 <__retarget_lock_acquire_recursive>
 8009f0e:	bf00      	nop
 8009f10:	20004348 	.word	0x20004348

08009f14 <__malloc_unlock>:
 8009f14:	4801      	ldr	r0, [pc, #4]	@ (8009f1c <__malloc_unlock+0x8>)
 8009f16:	f7ff bed5 	b.w	8009cc4 <__retarget_lock_release_recursive>
 8009f1a:	bf00      	nop
 8009f1c:	20004348 	.word	0x20004348

08009f20 <__ssputs_r>:
 8009f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f24:	688e      	ldr	r6, [r1, #8]
 8009f26:	461f      	mov	r7, r3
 8009f28:	42be      	cmp	r6, r7
 8009f2a:	680b      	ldr	r3, [r1, #0]
 8009f2c:	4682      	mov	sl, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	4690      	mov	r8, r2
 8009f32:	d82d      	bhi.n	8009f90 <__ssputs_r+0x70>
 8009f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f3c:	d026      	beq.n	8009f8c <__ssputs_r+0x6c>
 8009f3e:	6965      	ldr	r5, [r4, #20]
 8009f40:	6909      	ldr	r1, [r1, #16]
 8009f42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f46:	eba3 0901 	sub.w	r9, r3, r1
 8009f4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f4e:	1c7b      	adds	r3, r7, #1
 8009f50:	444b      	add	r3, r9
 8009f52:	106d      	asrs	r5, r5, #1
 8009f54:	429d      	cmp	r5, r3
 8009f56:	bf38      	it	cc
 8009f58:	461d      	movcc	r5, r3
 8009f5a:	0553      	lsls	r3, r2, #21
 8009f5c:	d527      	bpl.n	8009fae <__ssputs_r+0x8e>
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f7ff ff52 	bl	8009e08 <_malloc_r>
 8009f64:	4606      	mov	r6, r0
 8009f66:	b360      	cbz	r0, 8009fc2 <__ssputs_r+0xa2>
 8009f68:	6921      	ldr	r1, [r4, #16]
 8009f6a:	464a      	mov	r2, r9
 8009f6c:	f7ff feab 	bl	8009cc6 <memcpy>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f7a:	81a3      	strh	r3, [r4, #12]
 8009f7c:	6126      	str	r6, [r4, #16]
 8009f7e:	6165      	str	r5, [r4, #20]
 8009f80:	444e      	add	r6, r9
 8009f82:	eba5 0509 	sub.w	r5, r5, r9
 8009f86:	6026      	str	r6, [r4, #0]
 8009f88:	60a5      	str	r5, [r4, #8]
 8009f8a:	463e      	mov	r6, r7
 8009f8c:	42be      	cmp	r6, r7
 8009f8e:	d900      	bls.n	8009f92 <__ssputs_r+0x72>
 8009f90:	463e      	mov	r6, r7
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	4632      	mov	r2, r6
 8009f96:	4641      	mov	r1, r8
 8009f98:	f000 fb64 	bl	800a664 <memmove>
 8009f9c:	68a3      	ldr	r3, [r4, #8]
 8009f9e:	1b9b      	subs	r3, r3, r6
 8009fa0:	60a3      	str	r3, [r4, #8]
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	4433      	add	r3, r6
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	2000      	movs	r0, #0
 8009faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fae:	462a      	mov	r2, r5
 8009fb0:	f000 fb89 	bl	800a6c6 <_realloc_r>
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d1e0      	bne.n	8009f7c <__ssputs_r+0x5c>
 8009fba:	6921      	ldr	r1, [r4, #16]
 8009fbc:	4650      	mov	r0, sl
 8009fbe:	f7ff feaf 	bl	8009d20 <_free_r>
 8009fc2:	230c      	movs	r3, #12
 8009fc4:	f8ca 3000 	str.w	r3, [sl]
 8009fc8:	89a3      	ldrh	r3, [r4, #12]
 8009fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd4:	e7e9      	b.n	8009faa <__ssputs_r+0x8a>
	...

08009fd8 <_svfiprintf_r>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	4698      	mov	r8, r3
 8009fde:	898b      	ldrh	r3, [r1, #12]
 8009fe0:	061b      	lsls	r3, r3, #24
 8009fe2:	b09d      	sub	sp, #116	@ 0x74
 8009fe4:	4607      	mov	r7, r0
 8009fe6:	460d      	mov	r5, r1
 8009fe8:	4614      	mov	r4, r2
 8009fea:	d510      	bpl.n	800a00e <_svfiprintf_r+0x36>
 8009fec:	690b      	ldr	r3, [r1, #16]
 8009fee:	b973      	cbnz	r3, 800a00e <_svfiprintf_r+0x36>
 8009ff0:	2140      	movs	r1, #64	@ 0x40
 8009ff2:	f7ff ff09 	bl	8009e08 <_malloc_r>
 8009ff6:	6028      	str	r0, [r5, #0]
 8009ff8:	6128      	str	r0, [r5, #16]
 8009ffa:	b930      	cbnz	r0, 800a00a <_svfiprintf_r+0x32>
 8009ffc:	230c      	movs	r3, #12
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	f04f 30ff 	mov.w	r0, #4294967295
 800a004:	b01d      	add	sp, #116	@ 0x74
 800a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00a:	2340      	movs	r3, #64	@ 0x40
 800a00c:	616b      	str	r3, [r5, #20]
 800a00e:	2300      	movs	r3, #0
 800a010:	9309      	str	r3, [sp, #36]	@ 0x24
 800a012:	2320      	movs	r3, #32
 800a014:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a018:	f8cd 800c 	str.w	r8, [sp, #12]
 800a01c:	2330      	movs	r3, #48	@ 0x30
 800a01e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a1bc <_svfiprintf_r+0x1e4>
 800a022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a026:	f04f 0901 	mov.w	r9, #1
 800a02a:	4623      	mov	r3, r4
 800a02c:	469a      	mov	sl, r3
 800a02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a032:	b10a      	cbz	r2, 800a038 <_svfiprintf_r+0x60>
 800a034:	2a25      	cmp	r2, #37	@ 0x25
 800a036:	d1f9      	bne.n	800a02c <_svfiprintf_r+0x54>
 800a038:	ebba 0b04 	subs.w	fp, sl, r4
 800a03c:	d00b      	beq.n	800a056 <_svfiprintf_r+0x7e>
 800a03e:	465b      	mov	r3, fp
 800a040:	4622      	mov	r2, r4
 800a042:	4629      	mov	r1, r5
 800a044:	4638      	mov	r0, r7
 800a046:	f7ff ff6b 	bl	8009f20 <__ssputs_r>
 800a04a:	3001      	adds	r0, #1
 800a04c:	f000 80a7 	beq.w	800a19e <_svfiprintf_r+0x1c6>
 800a050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a052:	445a      	add	r2, fp
 800a054:	9209      	str	r2, [sp, #36]	@ 0x24
 800a056:	f89a 3000 	ldrb.w	r3, [sl]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 809f 	beq.w	800a19e <_svfiprintf_r+0x1c6>
 800a060:	2300      	movs	r3, #0
 800a062:	f04f 32ff 	mov.w	r2, #4294967295
 800a066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a06a:	f10a 0a01 	add.w	sl, sl, #1
 800a06e:	9304      	str	r3, [sp, #16]
 800a070:	9307      	str	r3, [sp, #28]
 800a072:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a076:	931a      	str	r3, [sp, #104]	@ 0x68
 800a078:	4654      	mov	r4, sl
 800a07a:	2205      	movs	r2, #5
 800a07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a080:	484e      	ldr	r0, [pc, #312]	@ (800a1bc <_svfiprintf_r+0x1e4>)
 800a082:	f7f6 f8a5 	bl	80001d0 <memchr>
 800a086:	9a04      	ldr	r2, [sp, #16]
 800a088:	b9d8      	cbnz	r0, 800a0c2 <_svfiprintf_r+0xea>
 800a08a:	06d0      	lsls	r0, r2, #27
 800a08c:	bf44      	itt	mi
 800a08e:	2320      	movmi	r3, #32
 800a090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a094:	0711      	lsls	r1, r2, #28
 800a096:	bf44      	itt	mi
 800a098:	232b      	movmi	r3, #43	@ 0x2b
 800a09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a09e:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0a4:	d015      	beq.n	800a0d2 <_svfiprintf_r+0xfa>
 800a0a6:	9a07      	ldr	r2, [sp, #28]
 800a0a8:	4654      	mov	r4, sl
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	f04f 0c0a 	mov.w	ip, #10
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0b6:	3b30      	subs	r3, #48	@ 0x30
 800a0b8:	2b09      	cmp	r3, #9
 800a0ba:	d94b      	bls.n	800a154 <_svfiprintf_r+0x17c>
 800a0bc:	b1b0      	cbz	r0, 800a0ec <_svfiprintf_r+0x114>
 800a0be:	9207      	str	r2, [sp, #28]
 800a0c0:	e014      	b.n	800a0ec <_svfiprintf_r+0x114>
 800a0c2:	eba0 0308 	sub.w	r3, r0, r8
 800a0c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	46a2      	mov	sl, r4
 800a0d0:	e7d2      	b.n	800a078 <_svfiprintf_r+0xa0>
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	1d19      	adds	r1, r3, #4
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	9103      	str	r1, [sp, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	bfbb      	ittet	lt
 800a0de:	425b      	neglt	r3, r3
 800a0e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a0e4:	9307      	strge	r3, [sp, #28]
 800a0e6:	9307      	strlt	r3, [sp, #28]
 800a0e8:	bfb8      	it	lt
 800a0ea:	9204      	strlt	r2, [sp, #16]
 800a0ec:	7823      	ldrb	r3, [r4, #0]
 800a0ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0f0:	d10a      	bne.n	800a108 <_svfiprintf_r+0x130>
 800a0f2:	7863      	ldrb	r3, [r4, #1]
 800a0f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0f6:	d132      	bne.n	800a15e <_svfiprintf_r+0x186>
 800a0f8:	9b03      	ldr	r3, [sp, #12]
 800a0fa:	1d1a      	adds	r2, r3, #4
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	9203      	str	r2, [sp, #12]
 800a100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a104:	3402      	adds	r4, #2
 800a106:	9305      	str	r3, [sp, #20]
 800a108:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a1cc <_svfiprintf_r+0x1f4>
 800a10c:	7821      	ldrb	r1, [r4, #0]
 800a10e:	2203      	movs	r2, #3
 800a110:	4650      	mov	r0, sl
 800a112:	f7f6 f85d 	bl	80001d0 <memchr>
 800a116:	b138      	cbz	r0, 800a128 <_svfiprintf_r+0x150>
 800a118:	9b04      	ldr	r3, [sp, #16]
 800a11a:	eba0 000a 	sub.w	r0, r0, sl
 800a11e:	2240      	movs	r2, #64	@ 0x40
 800a120:	4082      	lsls	r2, r0
 800a122:	4313      	orrs	r3, r2
 800a124:	3401      	adds	r4, #1
 800a126:	9304      	str	r3, [sp, #16]
 800a128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a12c:	4824      	ldr	r0, [pc, #144]	@ (800a1c0 <_svfiprintf_r+0x1e8>)
 800a12e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a132:	2206      	movs	r2, #6
 800a134:	f7f6 f84c 	bl	80001d0 <memchr>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d036      	beq.n	800a1aa <_svfiprintf_r+0x1d2>
 800a13c:	4b21      	ldr	r3, [pc, #132]	@ (800a1c4 <_svfiprintf_r+0x1ec>)
 800a13e:	bb1b      	cbnz	r3, 800a188 <_svfiprintf_r+0x1b0>
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	3307      	adds	r3, #7
 800a144:	f023 0307 	bic.w	r3, r3, #7
 800a148:	3308      	adds	r3, #8
 800a14a:	9303      	str	r3, [sp, #12]
 800a14c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a14e:	4433      	add	r3, r6
 800a150:	9309      	str	r3, [sp, #36]	@ 0x24
 800a152:	e76a      	b.n	800a02a <_svfiprintf_r+0x52>
 800a154:	fb0c 3202 	mla	r2, ip, r2, r3
 800a158:	460c      	mov	r4, r1
 800a15a:	2001      	movs	r0, #1
 800a15c:	e7a8      	b.n	800a0b0 <_svfiprintf_r+0xd8>
 800a15e:	2300      	movs	r3, #0
 800a160:	3401      	adds	r4, #1
 800a162:	9305      	str	r3, [sp, #20]
 800a164:	4619      	mov	r1, r3
 800a166:	f04f 0c0a 	mov.w	ip, #10
 800a16a:	4620      	mov	r0, r4
 800a16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a170:	3a30      	subs	r2, #48	@ 0x30
 800a172:	2a09      	cmp	r2, #9
 800a174:	d903      	bls.n	800a17e <_svfiprintf_r+0x1a6>
 800a176:	2b00      	cmp	r3, #0
 800a178:	d0c6      	beq.n	800a108 <_svfiprintf_r+0x130>
 800a17a:	9105      	str	r1, [sp, #20]
 800a17c:	e7c4      	b.n	800a108 <_svfiprintf_r+0x130>
 800a17e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a182:	4604      	mov	r4, r0
 800a184:	2301      	movs	r3, #1
 800a186:	e7f0      	b.n	800a16a <_svfiprintf_r+0x192>
 800a188:	ab03      	add	r3, sp, #12
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	462a      	mov	r2, r5
 800a18e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c8 <_svfiprintf_r+0x1f0>)
 800a190:	a904      	add	r1, sp, #16
 800a192:	4638      	mov	r0, r7
 800a194:	f3af 8000 	nop.w
 800a198:	1c42      	adds	r2, r0, #1
 800a19a:	4606      	mov	r6, r0
 800a19c:	d1d6      	bne.n	800a14c <_svfiprintf_r+0x174>
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	065b      	lsls	r3, r3, #25
 800a1a2:	f53f af2d 	bmi.w	800a000 <_svfiprintf_r+0x28>
 800a1a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1a8:	e72c      	b.n	800a004 <_svfiprintf_r+0x2c>
 800a1aa:	ab03      	add	r3, sp, #12
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	462a      	mov	r2, r5
 800a1b0:	4b05      	ldr	r3, [pc, #20]	@ (800a1c8 <_svfiprintf_r+0x1f0>)
 800a1b2:	a904      	add	r1, sp, #16
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f000 f879 	bl	800a2ac <_printf_i>
 800a1ba:	e7ed      	b.n	800a198 <_svfiprintf_r+0x1c0>
 800a1bc:	0804d6ef 	.word	0x0804d6ef
 800a1c0:	0804d6f9 	.word	0x0804d6f9
 800a1c4:	00000000 	.word	0x00000000
 800a1c8:	08009f21 	.word	0x08009f21
 800a1cc:	0804d6f5 	.word	0x0804d6f5

0800a1d0 <_printf_common>:
 800a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	4616      	mov	r6, r2
 800a1d6:	4698      	mov	r8, r3
 800a1d8:	688a      	ldr	r2, [r1, #8]
 800a1da:	690b      	ldr	r3, [r1, #16]
 800a1dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	bfb8      	it	lt
 800a1e4:	4613      	movlt	r3, r2
 800a1e6:	6033      	str	r3, [r6, #0]
 800a1e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	b10a      	cbz	r2, 800a1f6 <_printf_common+0x26>
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	6033      	str	r3, [r6, #0]
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	0699      	lsls	r1, r3, #26
 800a1fa:	bf42      	ittt	mi
 800a1fc:	6833      	ldrmi	r3, [r6, #0]
 800a1fe:	3302      	addmi	r3, #2
 800a200:	6033      	strmi	r3, [r6, #0]
 800a202:	6825      	ldr	r5, [r4, #0]
 800a204:	f015 0506 	ands.w	r5, r5, #6
 800a208:	d106      	bne.n	800a218 <_printf_common+0x48>
 800a20a:	f104 0a19 	add.w	sl, r4, #25
 800a20e:	68e3      	ldr	r3, [r4, #12]
 800a210:	6832      	ldr	r2, [r6, #0]
 800a212:	1a9b      	subs	r3, r3, r2
 800a214:	42ab      	cmp	r3, r5
 800a216:	dc26      	bgt.n	800a266 <_printf_common+0x96>
 800a218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a21c:	6822      	ldr	r2, [r4, #0]
 800a21e:	3b00      	subs	r3, #0
 800a220:	bf18      	it	ne
 800a222:	2301      	movne	r3, #1
 800a224:	0692      	lsls	r2, r2, #26
 800a226:	d42b      	bmi.n	800a280 <_printf_common+0xb0>
 800a228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a22c:	4641      	mov	r1, r8
 800a22e:	4638      	mov	r0, r7
 800a230:	47c8      	blx	r9
 800a232:	3001      	adds	r0, #1
 800a234:	d01e      	beq.n	800a274 <_printf_common+0xa4>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	6922      	ldr	r2, [r4, #16]
 800a23a:	f003 0306 	and.w	r3, r3, #6
 800a23e:	2b04      	cmp	r3, #4
 800a240:	bf02      	ittt	eq
 800a242:	68e5      	ldreq	r5, [r4, #12]
 800a244:	6833      	ldreq	r3, [r6, #0]
 800a246:	1aed      	subeq	r5, r5, r3
 800a248:	68a3      	ldr	r3, [r4, #8]
 800a24a:	bf0c      	ite	eq
 800a24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a250:	2500      	movne	r5, #0
 800a252:	4293      	cmp	r3, r2
 800a254:	bfc4      	itt	gt
 800a256:	1a9b      	subgt	r3, r3, r2
 800a258:	18ed      	addgt	r5, r5, r3
 800a25a:	2600      	movs	r6, #0
 800a25c:	341a      	adds	r4, #26
 800a25e:	42b5      	cmp	r5, r6
 800a260:	d11a      	bne.n	800a298 <_printf_common+0xc8>
 800a262:	2000      	movs	r0, #0
 800a264:	e008      	b.n	800a278 <_printf_common+0xa8>
 800a266:	2301      	movs	r3, #1
 800a268:	4652      	mov	r2, sl
 800a26a:	4641      	mov	r1, r8
 800a26c:	4638      	mov	r0, r7
 800a26e:	47c8      	blx	r9
 800a270:	3001      	adds	r0, #1
 800a272:	d103      	bne.n	800a27c <_printf_common+0xac>
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27c:	3501      	adds	r5, #1
 800a27e:	e7c6      	b.n	800a20e <_printf_common+0x3e>
 800a280:	18e1      	adds	r1, r4, r3
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	2030      	movs	r0, #48	@ 0x30
 800a286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a28a:	4422      	add	r2, r4
 800a28c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a294:	3302      	adds	r3, #2
 800a296:	e7c7      	b.n	800a228 <_printf_common+0x58>
 800a298:	2301      	movs	r3, #1
 800a29a:	4622      	mov	r2, r4
 800a29c:	4641      	mov	r1, r8
 800a29e:	4638      	mov	r0, r7
 800a2a0:	47c8      	blx	r9
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	d0e6      	beq.n	800a274 <_printf_common+0xa4>
 800a2a6:	3601      	adds	r6, #1
 800a2a8:	e7d9      	b.n	800a25e <_printf_common+0x8e>
	...

0800a2ac <_printf_i>:
 800a2ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b0:	7e0f      	ldrb	r7, [r1, #24]
 800a2b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2b4:	2f78      	cmp	r7, #120	@ 0x78
 800a2b6:	4691      	mov	r9, r2
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	469a      	mov	sl, r3
 800a2be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2c2:	d807      	bhi.n	800a2d4 <_printf_i+0x28>
 800a2c4:	2f62      	cmp	r7, #98	@ 0x62
 800a2c6:	d80a      	bhi.n	800a2de <_printf_i+0x32>
 800a2c8:	2f00      	cmp	r7, #0
 800a2ca:	f000 80d1 	beq.w	800a470 <_printf_i+0x1c4>
 800a2ce:	2f58      	cmp	r7, #88	@ 0x58
 800a2d0:	f000 80b8 	beq.w	800a444 <_printf_i+0x198>
 800a2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2dc:	e03a      	b.n	800a354 <_printf_i+0xa8>
 800a2de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2e2:	2b15      	cmp	r3, #21
 800a2e4:	d8f6      	bhi.n	800a2d4 <_printf_i+0x28>
 800a2e6:	a101      	add	r1, pc, #4	@ (adr r1, 800a2ec <_printf_i+0x40>)
 800a2e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2ec:	0800a345 	.word	0x0800a345
 800a2f0:	0800a359 	.word	0x0800a359
 800a2f4:	0800a2d5 	.word	0x0800a2d5
 800a2f8:	0800a2d5 	.word	0x0800a2d5
 800a2fc:	0800a2d5 	.word	0x0800a2d5
 800a300:	0800a2d5 	.word	0x0800a2d5
 800a304:	0800a359 	.word	0x0800a359
 800a308:	0800a2d5 	.word	0x0800a2d5
 800a30c:	0800a2d5 	.word	0x0800a2d5
 800a310:	0800a2d5 	.word	0x0800a2d5
 800a314:	0800a2d5 	.word	0x0800a2d5
 800a318:	0800a457 	.word	0x0800a457
 800a31c:	0800a383 	.word	0x0800a383
 800a320:	0800a411 	.word	0x0800a411
 800a324:	0800a2d5 	.word	0x0800a2d5
 800a328:	0800a2d5 	.word	0x0800a2d5
 800a32c:	0800a479 	.word	0x0800a479
 800a330:	0800a2d5 	.word	0x0800a2d5
 800a334:	0800a383 	.word	0x0800a383
 800a338:	0800a2d5 	.word	0x0800a2d5
 800a33c:	0800a2d5 	.word	0x0800a2d5
 800a340:	0800a419 	.word	0x0800a419
 800a344:	6833      	ldr	r3, [r6, #0]
 800a346:	1d1a      	adds	r2, r3, #4
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6032      	str	r2, [r6, #0]
 800a34c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a354:	2301      	movs	r3, #1
 800a356:	e09c      	b.n	800a492 <_printf_i+0x1e6>
 800a358:	6833      	ldr	r3, [r6, #0]
 800a35a:	6820      	ldr	r0, [r4, #0]
 800a35c:	1d19      	adds	r1, r3, #4
 800a35e:	6031      	str	r1, [r6, #0]
 800a360:	0606      	lsls	r6, r0, #24
 800a362:	d501      	bpl.n	800a368 <_printf_i+0xbc>
 800a364:	681d      	ldr	r5, [r3, #0]
 800a366:	e003      	b.n	800a370 <_printf_i+0xc4>
 800a368:	0645      	lsls	r5, r0, #25
 800a36a:	d5fb      	bpl.n	800a364 <_printf_i+0xb8>
 800a36c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a370:	2d00      	cmp	r5, #0
 800a372:	da03      	bge.n	800a37c <_printf_i+0xd0>
 800a374:	232d      	movs	r3, #45	@ 0x2d
 800a376:	426d      	negs	r5, r5
 800a378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a37c:	4858      	ldr	r0, [pc, #352]	@ (800a4e0 <_printf_i+0x234>)
 800a37e:	230a      	movs	r3, #10
 800a380:	e011      	b.n	800a3a6 <_printf_i+0xfa>
 800a382:	6821      	ldr	r1, [r4, #0]
 800a384:	6833      	ldr	r3, [r6, #0]
 800a386:	0608      	lsls	r0, r1, #24
 800a388:	f853 5b04 	ldr.w	r5, [r3], #4
 800a38c:	d402      	bmi.n	800a394 <_printf_i+0xe8>
 800a38e:	0649      	lsls	r1, r1, #25
 800a390:	bf48      	it	mi
 800a392:	b2ad      	uxthmi	r5, r5
 800a394:	2f6f      	cmp	r7, #111	@ 0x6f
 800a396:	4852      	ldr	r0, [pc, #328]	@ (800a4e0 <_printf_i+0x234>)
 800a398:	6033      	str	r3, [r6, #0]
 800a39a:	bf14      	ite	ne
 800a39c:	230a      	movne	r3, #10
 800a39e:	2308      	moveq	r3, #8
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3a6:	6866      	ldr	r6, [r4, #4]
 800a3a8:	60a6      	str	r6, [r4, #8]
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	db05      	blt.n	800a3ba <_printf_i+0x10e>
 800a3ae:	6821      	ldr	r1, [r4, #0]
 800a3b0:	432e      	orrs	r6, r5
 800a3b2:	f021 0104 	bic.w	r1, r1, #4
 800a3b6:	6021      	str	r1, [r4, #0]
 800a3b8:	d04b      	beq.n	800a452 <_printf_i+0x1a6>
 800a3ba:	4616      	mov	r6, r2
 800a3bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3c0:	fb03 5711 	mls	r7, r3, r1, r5
 800a3c4:	5dc7      	ldrb	r7, [r0, r7]
 800a3c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3ca:	462f      	mov	r7, r5
 800a3cc:	42bb      	cmp	r3, r7
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	d9f4      	bls.n	800a3bc <_printf_i+0x110>
 800a3d2:	2b08      	cmp	r3, #8
 800a3d4:	d10b      	bne.n	800a3ee <_printf_i+0x142>
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	07df      	lsls	r7, r3, #31
 800a3da:	d508      	bpl.n	800a3ee <_printf_i+0x142>
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	6861      	ldr	r1, [r4, #4]
 800a3e0:	4299      	cmp	r1, r3
 800a3e2:	bfde      	ittt	le
 800a3e4:	2330      	movle	r3, #48	@ 0x30
 800a3e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3ee:	1b92      	subs	r2, r2, r6
 800a3f0:	6122      	str	r2, [r4, #16]
 800a3f2:	f8cd a000 	str.w	sl, [sp]
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	aa03      	add	r2, sp, #12
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	f7ff fee7 	bl	800a1d0 <_printf_common>
 800a402:	3001      	adds	r0, #1
 800a404:	d14a      	bne.n	800a49c <_printf_i+0x1f0>
 800a406:	f04f 30ff 	mov.w	r0, #4294967295
 800a40a:	b004      	add	sp, #16
 800a40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	f043 0320 	orr.w	r3, r3, #32
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	4832      	ldr	r0, [pc, #200]	@ (800a4e4 <_printf_i+0x238>)
 800a41a:	2778      	movs	r7, #120	@ 0x78
 800a41c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	6831      	ldr	r1, [r6, #0]
 800a424:	061f      	lsls	r7, r3, #24
 800a426:	f851 5b04 	ldr.w	r5, [r1], #4
 800a42a:	d402      	bmi.n	800a432 <_printf_i+0x186>
 800a42c:	065f      	lsls	r7, r3, #25
 800a42e:	bf48      	it	mi
 800a430:	b2ad      	uxthmi	r5, r5
 800a432:	6031      	str	r1, [r6, #0]
 800a434:	07d9      	lsls	r1, r3, #31
 800a436:	bf44      	itt	mi
 800a438:	f043 0320 	orrmi.w	r3, r3, #32
 800a43c:	6023      	strmi	r3, [r4, #0]
 800a43e:	b11d      	cbz	r5, 800a448 <_printf_i+0x19c>
 800a440:	2310      	movs	r3, #16
 800a442:	e7ad      	b.n	800a3a0 <_printf_i+0xf4>
 800a444:	4826      	ldr	r0, [pc, #152]	@ (800a4e0 <_printf_i+0x234>)
 800a446:	e7e9      	b.n	800a41c <_printf_i+0x170>
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	f023 0320 	bic.w	r3, r3, #32
 800a44e:	6023      	str	r3, [r4, #0]
 800a450:	e7f6      	b.n	800a440 <_printf_i+0x194>
 800a452:	4616      	mov	r6, r2
 800a454:	e7bd      	b.n	800a3d2 <_printf_i+0x126>
 800a456:	6833      	ldr	r3, [r6, #0]
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	6961      	ldr	r1, [r4, #20]
 800a45c:	1d18      	adds	r0, r3, #4
 800a45e:	6030      	str	r0, [r6, #0]
 800a460:	062e      	lsls	r6, r5, #24
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	d501      	bpl.n	800a46a <_printf_i+0x1be>
 800a466:	6019      	str	r1, [r3, #0]
 800a468:	e002      	b.n	800a470 <_printf_i+0x1c4>
 800a46a:	0668      	lsls	r0, r5, #25
 800a46c:	d5fb      	bpl.n	800a466 <_printf_i+0x1ba>
 800a46e:	8019      	strh	r1, [r3, #0]
 800a470:	2300      	movs	r3, #0
 800a472:	6123      	str	r3, [r4, #16]
 800a474:	4616      	mov	r6, r2
 800a476:	e7bc      	b.n	800a3f2 <_printf_i+0x146>
 800a478:	6833      	ldr	r3, [r6, #0]
 800a47a:	1d1a      	adds	r2, r3, #4
 800a47c:	6032      	str	r2, [r6, #0]
 800a47e:	681e      	ldr	r6, [r3, #0]
 800a480:	6862      	ldr	r2, [r4, #4]
 800a482:	2100      	movs	r1, #0
 800a484:	4630      	mov	r0, r6
 800a486:	f7f5 fea3 	bl	80001d0 <memchr>
 800a48a:	b108      	cbz	r0, 800a490 <_printf_i+0x1e4>
 800a48c:	1b80      	subs	r0, r0, r6
 800a48e:	6060      	str	r0, [r4, #4]
 800a490:	6863      	ldr	r3, [r4, #4]
 800a492:	6123      	str	r3, [r4, #16]
 800a494:	2300      	movs	r3, #0
 800a496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a49a:	e7aa      	b.n	800a3f2 <_printf_i+0x146>
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	4632      	mov	r2, r6
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	47d0      	blx	sl
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	d0ad      	beq.n	800a406 <_printf_i+0x15a>
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	079b      	lsls	r3, r3, #30
 800a4ae:	d413      	bmi.n	800a4d8 <_printf_i+0x22c>
 800a4b0:	68e0      	ldr	r0, [r4, #12]
 800a4b2:	9b03      	ldr	r3, [sp, #12]
 800a4b4:	4298      	cmp	r0, r3
 800a4b6:	bfb8      	it	lt
 800a4b8:	4618      	movlt	r0, r3
 800a4ba:	e7a6      	b.n	800a40a <_printf_i+0x15e>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	4632      	mov	r2, r6
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	47d0      	blx	sl
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	d09d      	beq.n	800a406 <_printf_i+0x15a>
 800a4ca:	3501      	adds	r5, #1
 800a4cc:	68e3      	ldr	r3, [r4, #12]
 800a4ce:	9903      	ldr	r1, [sp, #12]
 800a4d0:	1a5b      	subs	r3, r3, r1
 800a4d2:	42ab      	cmp	r3, r5
 800a4d4:	dcf2      	bgt.n	800a4bc <_printf_i+0x210>
 800a4d6:	e7eb      	b.n	800a4b0 <_printf_i+0x204>
 800a4d8:	2500      	movs	r5, #0
 800a4da:	f104 0619 	add.w	r6, r4, #25
 800a4de:	e7f5      	b.n	800a4cc <_printf_i+0x220>
 800a4e0:	0804d700 	.word	0x0804d700
 800a4e4:	0804d711 	.word	0x0804d711

0800a4e8 <__sflush_r>:
 800a4e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f0:	0716      	lsls	r6, r2, #28
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	d454      	bmi.n	800a5a2 <__sflush_r+0xba>
 800a4f8:	684b      	ldr	r3, [r1, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	dc02      	bgt.n	800a504 <__sflush_r+0x1c>
 800a4fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a500:	2b00      	cmp	r3, #0
 800a502:	dd48      	ble.n	800a596 <__sflush_r+0xae>
 800a504:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a506:	2e00      	cmp	r6, #0
 800a508:	d045      	beq.n	800a596 <__sflush_r+0xae>
 800a50a:	2300      	movs	r3, #0
 800a50c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a510:	682f      	ldr	r7, [r5, #0]
 800a512:	6a21      	ldr	r1, [r4, #32]
 800a514:	602b      	str	r3, [r5, #0]
 800a516:	d030      	beq.n	800a57a <__sflush_r+0x92>
 800a518:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	0759      	lsls	r1, r3, #29
 800a51e:	d505      	bpl.n	800a52c <__sflush_r+0x44>
 800a520:	6863      	ldr	r3, [r4, #4]
 800a522:	1ad2      	subs	r2, r2, r3
 800a524:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a526:	b10b      	cbz	r3, 800a52c <__sflush_r+0x44>
 800a528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a52a:	1ad2      	subs	r2, r2, r3
 800a52c:	2300      	movs	r3, #0
 800a52e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a530:	6a21      	ldr	r1, [r4, #32]
 800a532:	4628      	mov	r0, r5
 800a534:	47b0      	blx	r6
 800a536:	1c43      	adds	r3, r0, #1
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	d106      	bne.n	800a54a <__sflush_r+0x62>
 800a53c:	6829      	ldr	r1, [r5, #0]
 800a53e:	291d      	cmp	r1, #29
 800a540:	d82b      	bhi.n	800a59a <__sflush_r+0xb2>
 800a542:	4a2a      	ldr	r2, [pc, #168]	@ (800a5ec <__sflush_r+0x104>)
 800a544:	40ca      	lsrs	r2, r1
 800a546:	07d6      	lsls	r6, r2, #31
 800a548:	d527      	bpl.n	800a59a <__sflush_r+0xb2>
 800a54a:	2200      	movs	r2, #0
 800a54c:	6062      	str	r2, [r4, #4]
 800a54e:	04d9      	lsls	r1, r3, #19
 800a550:	6922      	ldr	r2, [r4, #16]
 800a552:	6022      	str	r2, [r4, #0]
 800a554:	d504      	bpl.n	800a560 <__sflush_r+0x78>
 800a556:	1c42      	adds	r2, r0, #1
 800a558:	d101      	bne.n	800a55e <__sflush_r+0x76>
 800a55a:	682b      	ldr	r3, [r5, #0]
 800a55c:	b903      	cbnz	r3, 800a560 <__sflush_r+0x78>
 800a55e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a562:	602f      	str	r7, [r5, #0]
 800a564:	b1b9      	cbz	r1, 800a596 <__sflush_r+0xae>
 800a566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a56a:	4299      	cmp	r1, r3
 800a56c:	d002      	beq.n	800a574 <__sflush_r+0x8c>
 800a56e:	4628      	mov	r0, r5
 800a570:	f7ff fbd6 	bl	8009d20 <_free_r>
 800a574:	2300      	movs	r3, #0
 800a576:	6363      	str	r3, [r4, #52]	@ 0x34
 800a578:	e00d      	b.n	800a596 <__sflush_r+0xae>
 800a57a:	2301      	movs	r3, #1
 800a57c:	4628      	mov	r0, r5
 800a57e:	47b0      	blx	r6
 800a580:	4602      	mov	r2, r0
 800a582:	1c50      	adds	r0, r2, #1
 800a584:	d1c9      	bne.n	800a51a <__sflush_r+0x32>
 800a586:	682b      	ldr	r3, [r5, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d0c6      	beq.n	800a51a <__sflush_r+0x32>
 800a58c:	2b1d      	cmp	r3, #29
 800a58e:	d001      	beq.n	800a594 <__sflush_r+0xac>
 800a590:	2b16      	cmp	r3, #22
 800a592:	d11e      	bne.n	800a5d2 <__sflush_r+0xea>
 800a594:	602f      	str	r7, [r5, #0]
 800a596:	2000      	movs	r0, #0
 800a598:	e022      	b.n	800a5e0 <__sflush_r+0xf8>
 800a59a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a59e:	b21b      	sxth	r3, r3
 800a5a0:	e01b      	b.n	800a5da <__sflush_r+0xf2>
 800a5a2:	690f      	ldr	r7, [r1, #16]
 800a5a4:	2f00      	cmp	r7, #0
 800a5a6:	d0f6      	beq.n	800a596 <__sflush_r+0xae>
 800a5a8:	0793      	lsls	r3, r2, #30
 800a5aa:	680e      	ldr	r6, [r1, #0]
 800a5ac:	bf08      	it	eq
 800a5ae:	694b      	ldreq	r3, [r1, #20]
 800a5b0:	600f      	str	r7, [r1, #0]
 800a5b2:	bf18      	it	ne
 800a5b4:	2300      	movne	r3, #0
 800a5b6:	eba6 0807 	sub.w	r8, r6, r7
 800a5ba:	608b      	str	r3, [r1, #8]
 800a5bc:	f1b8 0f00 	cmp.w	r8, #0
 800a5c0:	dde9      	ble.n	800a596 <__sflush_r+0xae>
 800a5c2:	6a21      	ldr	r1, [r4, #32]
 800a5c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a5c6:	4643      	mov	r3, r8
 800a5c8:	463a      	mov	r2, r7
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	47b0      	blx	r6
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	dc08      	bgt.n	800a5e4 <__sflush_r+0xfc>
 800a5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5da:	81a3      	strh	r3, [r4, #12]
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e4:	4407      	add	r7, r0
 800a5e6:	eba8 0800 	sub.w	r8, r8, r0
 800a5ea:	e7e7      	b.n	800a5bc <__sflush_r+0xd4>
 800a5ec:	20400001 	.word	0x20400001

0800a5f0 <_fflush_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	690b      	ldr	r3, [r1, #16]
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	b913      	cbnz	r3, 800a600 <_fflush_r+0x10>
 800a5fa:	2500      	movs	r5, #0
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	b118      	cbz	r0, 800a60a <_fflush_r+0x1a>
 800a602:	6a03      	ldr	r3, [r0, #32]
 800a604:	b90b      	cbnz	r3, 800a60a <_fflush_r+0x1a>
 800a606:	f7ff fa47 	bl	8009a98 <__sinit>
 800a60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0f3      	beq.n	800a5fa <_fflush_r+0xa>
 800a612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a614:	07d0      	lsls	r0, r2, #31
 800a616:	d404      	bmi.n	800a622 <_fflush_r+0x32>
 800a618:	0599      	lsls	r1, r3, #22
 800a61a:	d402      	bmi.n	800a622 <_fflush_r+0x32>
 800a61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a61e:	f7ff fb50 	bl	8009cc2 <__retarget_lock_acquire_recursive>
 800a622:	4628      	mov	r0, r5
 800a624:	4621      	mov	r1, r4
 800a626:	f7ff ff5f 	bl	800a4e8 <__sflush_r>
 800a62a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a62c:	07da      	lsls	r2, r3, #31
 800a62e:	4605      	mov	r5, r0
 800a630:	d4e4      	bmi.n	800a5fc <_fflush_r+0xc>
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	059b      	lsls	r3, r3, #22
 800a636:	d4e1      	bmi.n	800a5fc <_fflush_r+0xc>
 800a638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a63a:	f7ff fb43 	bl	8009cc4 <__retarget_lock_release_recursive>
 800a63e:	e7dd      	b.n	800a5fc <_fflush_r+0xc>

0800a640 <fiprintf>:
 800a640:	b40e      	push	{r1, r2, r3}
 800a642:	b503      	push	{r0, r1, lr}
 800a644:	4601      	mov	r1, r0
 800a646:	ab03      	add	r3, sp, #12
 800a648:	4805      	ldr	r0, [pc, #20]	@ (800a660 <fiprintf+0x20>)
 800a64a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64e:	6800      	ldr	r0, [r0, #0]
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	f000 f88f 	bl	800a774 <_vfiprintf_r>
 800a656:	b002      	add	sp, #8
 800a658:	f85d eb04 	ldr.w	lr, [sp], #4
 800a65c:	b003      	add	sp, #12
 800a65e:	4770      	bx	lr
 800a660:	200000a8 	.word	0x200000a8

0800a664 <memmove>:
 800a664:	4288      	cmp	r0, r1
 800a666:	b510      	push	{r4, lr}
 800a668:	eb01 0402 	add.w	r4, r1, r2
 800a66c:	d902      	bls.n	800a674 <memmove+0x10>
 800a66e:	4284      	cmp	r4, r0
 800a670:	4623      	mov	r3, r4
 800a672:	d807      	bhi.n	800a684 <memmove+0x20>
 800a674:	1e43      	subs	r3, r0, #1
 800a676:	42a1      	cmp	r1, r4
 800a678:	d008      	beq.n	800a68c <memmove+0x28>
 800a67a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a67e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a682:	e7f8      	b.n	800a676 <memmove+0x12>
 800a684:	4402      	add	r2, r0
 800a686:	4601      	mov	r1, r0
 800a688:	428a      	cmp	r2, r1
 800a68a:	d100      	bne.n	800a68e <memmove+0x2a>
 800a68c:	bd10      	pop	{r4, pc}
 800a68e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a696:	e7f7      	b.n	800a688 <memmove+0x24>

0800a698 <_sbrk_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d06      	ldr	r5, [pc, #24]	@ (800a6b4 <_sbrk_r+0x1c>)
 800a69c:	2300      	movs	r3, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	602b      	str	r3, [r5, #0]
 800a6a4:	f7f8 fcb8 	bl	8003018 <_sbrk>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_sbrk_r+0x1a>
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_sbrk_r+0x1a>
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	20004344 	.word	0x20004344

0800a6b8 <abort>:
 800a6b8:	b508      	push	{r3, lr}
 800a6ba:	2006      	movs	r0, #6
 800a6bc:	f000 fa2e 	bl	800ab1c <raise>
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	f7f8 fc30 	bl	8002f26 <_exit>

0800a6c6 <_realloc_r>:
 800a6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ca:	4607      	mov	r7, r0
 800a6cc:	4614      	mov	r4, r2
 800a6ce:	460d      	mov	r5, r1
 800a6d0:	b921      	cbnz	r1, 800a6dc <_realloc_r+0x16>
 800a6d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	f7ff bb96 	b.w	8009e08 <_malloc_r>
 800a6dc:	b92a      	cbnz	r2, 800a6ea <_realloc_r+0x24>
 800a6de:	f7ff fb1f 	bl	8009d20 <_free_r>
 800a6e2:	4625      	mov	r5, r4
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ea:	f000 fa33 	bl	800ab54 <_malloc_usable_size_r>
 800a6ee:	4284      	cmp	r4, r0
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	d802      	bhi.n	800a6fa <_realloc_r+0x34>
 800a6f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6f8:	d8f4      	bhi.n	800a6e4 <_realloc_r+0x1e>
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	f7ff fb83 	bl	8009e08 <_malloc_r>
 800a702:	4680      	mov	r8, r0
 800a704:	b908      	cbnz	r0, 800a70a <_realloc_r+0x44>
 800a706:	4645      	mov	r5, r8
 800a708:	e7ec      	b.n	800a6e4 <_realloc_r+0x1e>
 800a70a:	42b4      	cmp	r4, r6
 800a70c:	4622      	mov	r2, r4
 800a70e:	4629      	mov	r1, r5
 800a710:	bf28      	it	cs
 800a712:	4632      	movcs	r2, r6
 800a714:	f7ff fad7 	bl	8009cc6 <memcpy>
 800a718:	4629      	mov	r1, r5
 800a71a:	4638      	mov	r0, r7
 800a71c:	f7ff fb00 	bl	8009d20 <_free_r>
 800a720:	e7f1      	b.n	800a706 <_realloc_r+0x40>

0800a722 <__sfputc_r>:
 800a722:	6893      	ldr	r3, [r2, #8]
 800a724:	3b01      	subs	r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	b410      	push	{r4}
 800a72a:	6093      	str	r3, [r2, #8]
 800a72c:	da08      	bge.n	800a740 <__sfputc_r+0x1e>
 800a72e:	6994      	ldr	r4, [r2, #24]
 800a730:	42a3      	cmp	r3, r4
 800a732:	db01      	blt.n	800a738 <__sfputc_r+0x16>
 800a734:	290a      	cmp	r1, #10
 800a736:	d103      	bne.n	800a740 <__sfputc_r+0x1e>
 800a738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a73c:	f000 b932 	b.w	800a9a4 <__swbuf_r>
 800a740:	6813      	ldr	r3, [r2, #0]
 800a742:	1c58      	adds	r0, r3, #1
 800a744:	6010      	str	r0, [r2, #0]
 800a746:	7019      	strb	r1, [r3, #0]
 800a748:	4608      	mov	r0, r1
 800a74a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <__sfputs_r>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	4606      	mov	r6, r0
 800a754:	460f      	mov	r7, r1
 800a756:	4614      	mov	r4, r2
 800a758:	18d5      	adds	r5, r2, r3
 800a75a:	42ac      	cmp	r4, r5
 800a75c:	d101      	bne.n	800a762 <__sfputs_r+0x12>
 800a75e:	2000      	movs	r0, #0
 800a760:	e007      	b.n	800a772 <__sfputs_r+0x22>
 800a762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a766:	463a      	mov	r2, r7
 800a768:	4630      	mov	r0, r6
 800a76a:	f7ff ffda 	bl	800a722 <__sfputc_r>
 800a76e:	1c43      	adds	r3, r0, #1
 800a770:	d1f3      	bne.n	800a75a <__sfputs_r+0xa>
 800a772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a774 <_vfiprintf_r>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	460d      	mov	r5, r1
 800a77a:	b09d      	sub	sp, #116	@ 0x74
 800a77c:	4614      	mov	r4, r2
 800a77e:	4698      	mov	r8, r3
 800a780:	4606      	mov	r6, r0
 800a782:	b118      	cbz	r0, 800a78c <_vfiprintf_r+0x18>
 800a784:	6a03      	ldr	r3, [r0, #32]
 800a786:	b90b      	cbnz	r3, 800a78c <_vfiprintf_r+0x18>
 800a788:	f7ff f986 	bl	8009a98 <__sinit>
 800a78c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a78e:	07d9      	lsls	r1, r3, #31
 800a790:	d405      	bmi.n	800a79e <_vfiprintf_r+0x2a>
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	059a      	lsls	r2, r3, #22
 800a796:	d402      	bmi.n	800a79e <_vfiprintf_r+0x2a>
 800a798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a79a:	f7ff fa92 	bl	8009cc2 <__retarget_lock_acquire_recursive>
 800a79e:	89ab      	ldrh	r3, [r5, #12]
 800a7a0:	071b      	lsls	r3, r3, #28
 800a7a2:	d501      	bpl.n	800a7a8 <_vfiprintf_r+0x34>
 800a7a4:	692b      	ldr	r3, [r5, #16]
 800a7a6:	b99b      	cbnz	r3, 800a7d0 <_vfiprintf_r+0x5c>
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f000 f938 	bl	800aa20 <__swsetup_r>
 800a7b0:	b170      	cbz	r0, 800a7d0 <_vfiprintf_r+0x5c>
 800a7b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7b4:	07dc      	lsls	r4, r3, #31
 800a7b6:	d504      	bpl.n	800a7c2 <_vfiprintf_r+0x4e>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	b01d      	add	sp, #116	@ 0x74
 800a7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c2:	89ab      	ldrh	r3, [r5, #12]
 800a7c4:	0598      	lsls	r0, r3, #22
 800a7c6:	d4f7      	bmi.n	800a7b8 <_vfiprintf_r+0x44>
 800a7c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7ca:	f7ff fa7b 	bl	8009cc4 <__retarget_lock_release_recursive>
 800a7ce:	e7f3      	b.n	800a7b8 <_vfiprintf_r+0x44>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7d4:	2320      	movs	r3, #32
 800a7d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7de:	2330      	movs	r3, #48	@ 0x30
 800a7e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a990 <_vfiprintf_r+0x21c>
 800a7e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7e8:	f04f 0901 	mov.w	r9, #1
 800a7ec:	4623      	mov	r3, r4
 800a7ee:	469a      	mov	sl, r3
 800a7f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7f4:	b10a      	cbz	r2, 800a7fa <_vfiprintf_r+0x86>
 800a7f6:	2a25      	cmp	r2, #37	@ 0x25
 800a7f8:	d1f9      	bne.n	800a7ee <_vfiprintf_r+0x7a>
 800a7fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a7fe:	d00b      	beq.n	800a818 <_vfiprintf_r+0xa4>
 800a800:	465b      	mov	r3, fp
 800a802:	4622      	mov	r2, r4
 800a804:	4629      	mov	r1, r5
 800a806:	4630      	mov	r0, r6
 800a808:	f7ff ffa2 	bl	800a750 <__sfputs_r>
 800a80c:	3001      	adds	r0, #1
 800a80e:	f000 80a7 	beq.w	800a960 <_vfiprintf_r+0x1ec>
 800a812:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a814:	445a      	add	r2, fp
 800a816:	9209      	str	r2, [sp, #36]	@ 0x24
 800a818:	f89a 3000 	ldrb.w	r3, [sl]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 809f 	beq.w	800a960 <_vfiprintf_r+0x1ec>
 800a822:	2300      	movs	r3, #0
 800a824:	f04f 32ff 	mov.w	r2, #4294967295
 800a828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a82c:	f10a 0a01 	add.w	sl, sl, #1
 800a830:	9304      	str	r3, [sp, #16]
 800a832:	9307      	str	r3, [sp, #28]
 800a834:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a838:	931a      	str	r3, [sp, #104]	@ 0x68
 800a83a:	4654      	mov	r4, sl
 800a83c:	2205      	movs	r2, #5
 800a83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a842:	4853      	ldr	r0, [pc, #332]	@ (800a990 <_vfiprintf_r+0x21c>)
 800a844:	f7f5 fcc4 	bl	80001d0 <memchr>
 800a848:	9a04      	ldr	r2, [sp, #16]
 800a84a:	b9d8      	cbnz	r0, 800a884 <_vfiprintf_r+0x110>
 800a84c:	06d1      	lsls	r1, r2, #27
 800a84e:	bf44      	itt	mi
 800a850:	2320      	movmi	r3, #32
 800a852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a856:	0713      	lsls	r3, r2, #28
 800a858:	bf44      	itt	mi
 800a85a:	232b      	movmi	r3, #43	@ 0x2b
 800a85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a860:	f89a 3000 	ldrb.w	r3, [sl]
 800a864:	2b2a      	cmp	r3, #42	@ 0x2a
 800a866:	d015      	beq.n	800a894 <_vfiprintf_r+0x120>
 800a868:	9a07      	ldr	r2, [sp, #28]
 800a86a:	4654      	mov	r4, sl
 800a86c:	2000      	movs	r0, #0
 800a86e:	f04f 0c0a 	mov.w	ip, #10
 800a872:	4621      	mov	r1, r4
 800a874:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a878:	3b30      	subs	r3, #48	@ 0x30
 800a87a:	2b09      	cmp	r3, #9
 800a87c:	d94b      	bls.n	800a916 <_vfiprintf_r+0x1a2>
 800a87e:	b1b0      	cbz	r0, 800a8ae <_vfiprintf_r+0x13a>
 800a880:	9207      	str	r2, [sp, #28]
 800a882:	e014      	b.n	800a8ae <_vfiprintf_r+0x13a>
 800a884:	eba0 0308 	sub.w	r3, r0, r8
 800a888:	fa09 f303 	lsl.w	r3, r9, r3
 800a88c:	4313      	orrs	r3, r2
 800a88e:	9304      	str	r3, [sp, #16]
 800a890:	46a2      	mov	sl, r4
 800a892:	e7d2      	b.n	800a83a <_vfiprintf_r+0xc6>
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	1d19      	adds	r1, r3, #4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	9103      	str	r1, [sp, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	bfbb      	ittet	lt
 800a8a0:	425b      	neglt	r3, r3
 800a8a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a8a6:	9307      	strge	r3, [sp, #28]
 800a8a8:	9307      	strlt	r3, [sp, #28]
 800a8aa:	bfb8      	it	lt
 800a8ac:	9204      	strlt	r2, [sp, #16]
 800a8ae:	7823      	ldrb	r3, [r4, #0]
 800a8b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8b2:	d10a      	bne.n	800a8ca <_vfiprintf_r+0x156>
 800a8b4:	7863      	ldrb	r3, [r4, #1]
 800a8b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8b8:	d132      	bne.n	800a920 <_vfiprintf_r+0x1ac>
 800a8ba:	9b03      	ldr	r3, [sp, #12]
 800a8bc:	1d1a      	adds	r2, r3, #4
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	9203      	str	r2, [sp, #12]
 800a8c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8c6:	3402      	adds	r4, #2
 800a8c8:	9305      	str	r3, [sp, #20]
 800a8ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9a0 <_vfiprintf_r+0x22c>
 800a8ce:	7821      	ldrb	r1, [r4, #0]
 800a8d0:	2203      	movs	r2, #3
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	f7f5 fc7c 	bl	80001d0 <memchr>
 800a8d8:	b138      	cbz	r0, 800a8ea <_vfiprintf_r+0x176>
 800a8da:	9b04      	ldr	r3, [sp, #16]
 800a8dc:	eba0 000a 	sub.w	r0, r0, sl
 800a8e0:	2240      	movs	r2, #64	@ 0x40
 800a8e2:	4082      	lsls	r2, r0
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	3401      	adds	r4, #1
 800a8e8:	9304      	str	r3, [sp, #16]
 800a8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ee:	4829      	ldr	r0, [pc, #164]	@ (800a994 <_vfiprintf_r+0x220>)
 800a8f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8f4:	2206      	movs	r2, #6
 800a8f6:	f7f5 fc6b 	bl	80001d0 <memchr>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d03f      	beq.n	800a97e <_vfiprintf_r+0x20a>
 800a8fe:	4b26      	ldr	r3, [pc, #152]	@ (800a998 <_vfiprintf_r+0x224>)
 800a900:	bb1b      	cbnz	r3, 800a94a <_vfiprintf_r+0x1d6>
 800a902:	9b03      	ldr	r3, [sp, #12]
 800a904:	3307      	adds	r3, #7
 800a906:	f023 0307 	bic.w	r3, r3, #7
 800a90a:	3308      	adds	r3, #8
 800a90c:	9303      	str	r3, [sp, #12]
 800a90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a910:	443b      	add	r3, r7
 800a912:	9309      	str	r3, [sp, #36]	@ 0x24
 800a914:	e76a      	b.n	800a7ec <_vfiprintf_r+0x78>
 800a916:	fb0c 3202 	mla	r2, ip, r2, r3
 800a91a:	460c      	mov	r4, r1
 800a91c:	2001      	movs	r0, #1
 800a91e:	e7a8      	b.n	800a872 <_vfiprintf_r+0xfe>
 800a920:	2300      	movs	r3, #0
 800a922:	3401      	adds	r4, #1
 800a924:	9305      	str	r3, [sp, #20]
 800a926:	4619      	mov	r1, r3
 800a928:	f04f 0c0a 	mov.w	ip, #10
 800a92c:	4620      	mov	r0, r4
 800a92e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a932:	3a30      	subs	r2, #48	@ 0x30
 800a934:	2a09      	cmp	r2, #9
 800a936:	d903      	bls.n	800a940 <_vfiprintf_r+0x1cc>
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d0c6      	beq.n	800a8ca <_vfiprintf_r+0x156>
 800a93c:	9105      	str	r1, [sp, #20]
 800a93e:	e7c4      	b.n	800a8ca <_vfiprintf_r+0x156>
 800a940:	fb0c 2101 	mla	r1, ip, r1, r2
 800a944:	4604      	mov	r4, r0
 800a946:	2301      	movs	r3, #1
 800a948:	e7f0      	b.n	800a92c <_vfiprintf_r+0x1b8>
 800a94a:	ab03      	add	r3, sp, #12
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	462a      	mov	r2, r5
 800a950:	4b12      	ldr	r3, [pc, #72]	@ (800a99c <_vfiprintf_r+0x228>)
 800a952:	a904      	add	r1, sp, #16
 800a954:	4630      	mov	r0, r6
 800a956:	f3af 8000 	nop.w
 800a95a:	4607      	mov	r7, r0
 800a95c:	1c78      	adds	r0, r7, #1
 800a95e:	d1d6      	bne.n	800a90e <_vfiprintf_r+0x19a>
 800a960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a962:	07d9      	lsls	r1, r3, #31
 800a964:	d405      	bmi.n	800a972 <_vfiprintf_r+0x1fe>
 800a966:	89ab      	ldrh	r3, [r5, #12]
 800a968:	059a      	lsls	r2, r3, #22
 800a96a:	d402      	bmi.n	800a972 <_vfiprintf_r+0x1fe>
 800a96c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a96e:	f7ff f9a9 	bl	8009cc4 <__retarget_lock_release_recursive>
 800a972:	89ab      	ldrh	r3, [r5, #12]
 800a974:	065b      	lsls	r3, r3, #25
 800a976:	f53f af1f 	bmi.w	800a7b8 <_vfiprintf_r+0x44>
 800a97a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a97c:	e71e      	b.n	800a7bc <_vfiprintf_r+0x48>
 800a97e:	ab03      	add	r3, sp, #12
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	462a      	mov	r2, r5
 800a984:	4b05      	ldr	r3, [pc, #20]	@ (800a99c <_vfiprintf_r+0x228>)
 800a986:	a904      	add	r1, sp, #16
 800a988:	4630      	mov	r0, r6
 800a98a:	f7ff fc8f 	bl	800a2ac <_printf_i>
 800a98e:	e7e4      	b.n	800a95a <_vfiprintf_r+0x1e6>
 800a990:	0804d6ef 	.word	0x0804d6ef
 800a994:	0804d6f9 	.word	0x0804d6f9
 800a998:	00000000 	.word	0x00000000
 800a99c:	0800a751 	.word	0x0800a751
 800a9a0:	0804d6f5 	.word	0x0804d6f5

0800a9a4 <__swbuf_r>:
 800a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a6:	460e      	mov	r6, r1
 800a9a8:	4614      	mov	r4, r2
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	b118      	cbz	r0, 800a9b6 <__swbuf_r+0x12>
 800a9ae:	6a03      	ldr	r3, [r0, #32]
 800a9b0:	b90b      	cbnz	r3, 800a9b6 <__swbuf_r+0x12>
 800a9b2:	f7ff f871 	bl	8009a98 <__sinit>
 800a9b6:	69a3      	ldr	r3, [r4, #24]
 800a9b8:	60a3      	str	r3, [r4, #8]
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	071a      	lsls	r2, r3, #28
 800a9be:	d501      	bpl.n	800a9c4 <__swbuf_r+0x20>
 800a9c0:	6923      	ldr	r3, [r4, #16]
 800a9c2:	b943      	cbnz	r3, 800a9d6 <__swbuf_r+0x32>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f000 f82a 	bl	800aa20 <__swsetup_r>
 800a9cc:	b118      	cbz	r0, 800a9d6 <__swbuf_r+0x32>
 800a9ce:	f04f 37ff 	mov.w	r7, #4294967295
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	6922      	ldr	r2, [r4, #16]
 800a9da:	1a98      	subs	r0, r3, r2
 800a9dc:	6963      	ldr	r3, [r4, #20]
 800a9de:	b2f6      	uxtb	r6, r6
 800a9e0:	4283      	cmp	r3, r0
 800a9e2:	4637      	mov	r7, r6
 800a9e4:	dc05      	bgt.n	800a9f2 <__swbuf_r+0x4e>
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f7ff fe01 	bl	800a5f0 <_fflush_r>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d1ed      	bne.n	800a9ce <__swbuf_r+0x2a>
 800a9f2:	68a3      	ldr	r3, [r4, #8]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	60a3      	str	r3, [r4, #8]
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	6022      	str	r2, [r4, #0]
 800a9fe:	701e      	strb	r6, [r3, #0]
 800aa00:	6962      	ldr	r2, [r4, #20]
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d004      	beq.n	800aa12 <__swbuf_r+0x6e>
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	07db      	lsls	r3, r3, #31
 800aa0c:	d5e1      	bpl.n	800a9d2 <__swbuf_r+0x2e>
 800aa0e:	2e0a      	cmp	r6, #10
 800aa10:	d1df      	bne.n	800a9d2 <__swbuf_r+0x2e>
 800aa12:	4621      	mov	r1, r4
 800aa14:	4628      	mov	r0, r5
 800aa16:	f7ff fdeb 	bl	800a5f0 <_fflush_r>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d0d9      	beq.n	800a9d2 <__swbuf_r+0x2e>
 800aa1e:	e7d6      	b.n	800a9ce <__swbuf_r+0x2a>

0800aa20 <__swsetup_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4b29      	ldr	r3, [pc, #164]	@ (800aac8 <__swsetup_r+0xa8>)
 800aa24:	4605      	mov	r5, r0
 800aa26:	6818      	ldr	r0, [r3, #0]
 800aa28:	460c      	mov	r4, r1
 800aa2a:	b118      	cbz	r0, 800aa34 <__swsetup_r+0x14>
 800aa2c:	6a03      	ldr	r3, [r0, #32]
 800aa2e:	b90b      	cbnz	r3, 800aa34 <__swsetup_r+0x14>
 800aa30:	f7ff f832 	bl	8009a98 <__sinit>
 800aa34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa38:	0719      	lsls	r1, r3, #28
 800aa3a:	d422      	bmi.n	800aa82 <__swsetup_r+0x62>
 800aa3c:	06da      	lsls	r2, r3, #27
 800aa3e:	d407      	bmi.n	800aa50 <__swsetup_r+0x30>
 800aa40:	2209      	movs	r2, #9
 800aa42:	602a      	str	r2, [r5, #0]
 800aa44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa48:	81a3      	strh	r3, [r4, #12]
 800aa4a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4e:	e033      	b.n	800aab8 <__swsetup_r+0x98>
 800aa50:	0758      	lsls	r0, r3, #29
 800aa52:	d512      	bpl.n	800aa7a <__swsetup_r+0x5a>
 800aa54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa56:	b141      	cbz	r1, 800aa6a <__swsetup_r+0x4a>
 800aa58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa5c:	4299      	cmp	r1, r3
 800aa5e:	d002      	beq.n	800aa66 <__swsetup_r+0x46>
 800aa60:	4628      	mov	r0, r5
 800aa62:	f7ff f95d 	bl	8009d20 <_free_r>
 800aa66:	2300      	movs	r3, #0
 800aa68:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa70:	81a3      	strh	r3, [r4, #12]
 800aa72:	2300      	movs	r3, #0
 800aa74:	6063      	str	r3, [r4, #4]
 800aa76:	6923      	ldr	r3, [r4, #16]
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	f043 0308 	orr.w	r3, r3, #8
 800aa80:	81a3      	strh	r3, [r4, #12]
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	b94b      	cbnz	r3, 800aa9a <__swsetup_r+0x7a>
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa90:	d003      	beq.n	800aa9a <__swsetup_r+0x7a>
 800aa92:	4621      	mov	r1, r4
 800aa94:	4628      	mov	r0, r5
 800aa96:	f000 f88b 	bl	800abb0 <__smakebuf_r>
 800aa9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa9e:	f013 0201 	ands.w	r2, r3, #1
 800aaa2:	d00a      	beq.n	800aaba <__swsetup_r+0x9a>
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	60a2      	str	r2, [r4, #8]
 800aaa8:	6962      	ldr	r2, [r4, #20]
 800aaaa:	4252      	negs	r2, r2
 800aaac:	61a2      	str	r2, [r4, #24]
 800aaae:	6922      	ldr	r2, [r4, #16]
 800aab0:	b942      	cbnz	r2, 800aac4 <__swsetup_r+0xa4>
 800aab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aab6:	d1c5      	bne.n	800aa44 <__swsetup_r+0x24>
 800aab8:	bd38      	pop	{r3, r4, r5, pc}
 800aaba:	0799      	lsls	r1, r3, #30
 800aabc:	bf58      	it	pl
 800aabe:	6962      	ldrpl	r2, [r4, #20]
 800aac0:	60a2      	str	r2, [r4, #8]
 800aac2:	e7f4      	b.n	800aaae <__swsetup_r+0x8e>
 800aac4:	2000      	movs	r0, #0
 800aac6:	e7f7      	b.n	800aab8 <__swsetup_r+0x98>
 800aac8:	200000a8 	.word	0x200000a8

0800aacc <_raise_r>:
 800aacc:	291f      	cmp	r1, #31
 800aace:	b538      	push	{r3, r4, r5, lr}
 800aad0:	4605      	mov	r5, r0
 800aad2:	460c      	mov	r4, r1
 800aad4:	d904      	bls.n	800aae0 <_raise_r+0x14>
 800aad6:	2316      	movs	r3, #22
 800aad8:	6003      	str	r3, [r0, #0]
 800aada:	f04f 30ff 	mov.w	r0, #4294967295
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aae2:	b112      	cbz	r2, 800aaea <_raise_r+0x1e>
 800aae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aae8:	b94b      	cbnz	r3, 800aafe <_raise_r+0x32>
 800aaea:	4628      	mov	r0, r5
 800aaec:	f000 f830 	bl	800ab50 <_getpid_r>
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aafa:	f000 b817 	b.w	800ab2c <_kill_r>
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d00a      	beq.n	800ab18 <_raise_r+0x4c>
 800ab02:	1c59      	adds	r1, r3, #1
 800ab04:	d103      	bne.n	800ab0e <_raise_r+0x42>
 800ab06:	2316      	movs	r3, #22
 800ab08:	6003      	str	r3, [r0, #0]
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	e7e7      	b.n	800aade <_raise_r+0x12>
 800ab0e:	2100      	movs	r1, #0
 800ab10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab14:	4620      	mov	r0, r4
 800ab16:	4798      	blx	r3
 800ab18:	2000      	movs	r0, #0
 800ab1a:	e7e0      	b.n	800aade <_raise_r+0x12>

0800ab1c <raise>:
 800ab1c:	4b02      	ldr	r3, [pc, #8]	@ (800ab28 <raise+0xc>)
 800ab1e:	4601      	mov	r1, r0
 800ab20:	6818      	ldr	r0, [r3, #0]
 800ab22:	f7ff bfd3 	b.w	800aacc <_raise_r>
 800ab26:	bf00      	nop
 800ab28:	200000a8 	.word	0x200000a8

0800ab2c <_kill_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4d07      	ldr	r5, [pc, #28]	@ (800ab4c <_kill_r+0x20>)
 800ab30:	2300      	movs	r3, #0
 800ab32:	4604      	mov	r4, r0
 800ab34:	4608      	mov	r0, r1
 800ab36:	4611      	mov	r1, r2
 800ab38:	602b      	str	r3, [r5, #0]
 800ab3a:	f7f8 f9e4 	bl	8002f06 <_kill>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	d102      	bne.n	800ab48 <_kill_r+0x1c>
 800ab42:	682b      	ldr	r3, [r5, #0]
 800ab44:	b103      	cbz	r3, 800ab48 <_kill_r+0x1c>
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	bd38      	pop	{r3, r4, r5, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20004344 	.word	0x20004344

0800ab50 <_getpid_r>:
 800ab50:	f7f8 b9d1 	b.w	8002ef6 <_getpid>

0800ab54 <_malloc_usable_size_r>:
 800ab54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab58:	1f18      	subs	r0, r3, #4
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	bfbc      	itt	lt
 800ab5e:	580b      	ldrlt	r3, [r1, r0]
 800ab60:	18c0      	addlt	r0, r0, r3
 800ab62:	4770      	bx	lr

0800ab64 <__swhatbuf_r>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	460c      	mov	r4, r1
 800ab68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6c:	2900      	cmp	r1, #0
 800ab6e:	b096      	sub	sp, #88	@ 0x58
 800ab70:	4615      	mov	r5, r2
 800ab72:	461e      	mov	r6, r3
 800ab74:	da0d      	bge.n	800ab92 <__swhatbuf_r+0x2e>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab7c:	f04f 0100 	mov.w	r1, #0
 800ab80:	bf14      	ite	ne
 800ab82:	2340      	movne	r3, #64	@ 0x40
 800ab84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab88:	2000      	movs	r0, #0
 800ab8a:	6031      	str	r1, [r6, #0]
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	b016      	add	sp, #88	@ 0x58
 800ab90:	bd70      	pop	{r4, r5, r6, pc}
 800ab92:	466a      	mov	r2, sp
 800ab94:	f000 f848 	bl	800ac28 <_fstat_r>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	dbec      	blt.n	800ab76 <__swhatbuf_r+0x12>
 800ab9c:	9901      	ldr	r1, [sp, #4]
 800ab9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aba6:	4259      	negs	r1, r3
 800aba8:	4159      	adcs	r1, r3
 800abaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abae:	e7eb      	b.n	800ab88 <__swhatbuf_r+0x24>

0800abb0 <__smakebuf_r>:
 800abb0:	898b      	ldrh	r3, [r1, #12]
 800abb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abb4:	079d      	lsls	r5, r3, #30
 800abb6:	4606      	mov	r6, r0
 800abb8:	460c      	mov	r4, r1
 800abba:	d507      	bpl.n	800abcc <__smakebuf_r+0x1c>
 800abbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	6123      	str	r3, [r4, #16]
 800abc4:	2301      	movs	r3, #1
 800abc6:	6163      	str	r3, [r4, #20]
 800abc8:	b003      	add	sp, #12
 800abca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abcc:	ab01      	add	r3, sp, #4
 800abce:	466a      	mov	r2, sp
 800abd0:	f7ff ffc8 	bl	800ab64 <__swhatbuf_r>
 800abd4:	9f00      	ldr	r7, [sp, #0]
 800abd6:	4605      	mov	r5, r0
 800abd8:	4639      	mov	r1, r7
 800abda:	4630      	mov	r0, r6
 800abdc:	f7ff f914 	bl	8009e08 <_malloc_r>
 800abe0:	b948      	cbnz	r0, 800abf6 <__smakebuf_r+0x46>
 800abe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abe6:	059a      	lsls	r2, r3, #22
 800abe8:	d4ee      	bmi.n	800abc8 <__smakebuf_r+0x18>
 800abea:	f023 0303 	bic.w	r3, r3, #3
 800abee:	f043 0302 	orr.w	r3, r3, #2
 800abf2:	81a3      	strh	r3, [r4, #12]
 800abf4:	e7e2      	b.n	800abbc <__smakebuf_r+0xc>
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	6020      	str	r0, [r4, #0]
 800abfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abfe:	81a3      	strh	r3, [r4, #12]
 800ac00:	9b01      	ldr	r3, [sp, #4]
 800ac02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac06:	b15b      	cbz	r3, 800ac20 <__smakebuf_r+0x70>
 800ac08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	f000 f81d 	bl	800ac4c <_isatty_r>
 800ac12:	b128      	cbz	r0, 800ac20 <__smakebuf_r+0x70>
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	f023 0303 	bic.w	r3, r3, #3
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	81a3      	strh	r3, [r4, #12]
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	431d      	orrs	r5, r3
 800ac24:	81a5      	strh	r5, [r4, #12]
 800ac26:	e7cf      	b.n	800abc8 <__smakebuf_r+0x18>

0800ac28 <_fstat_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d07      	ldr	r5, [pc, #28]	@ (800ac48 <_fstat_r+0x20>)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	4611      	mov	r1, r2
 800ac34:	602b      	str	r3, [r5, #0]
 800ac36:	f7f8 f9c6 	bl	8002fc6 <_fstat>
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	d102      	bne.n	800ac44 <_fstat_r+0x1c>
 800ac3e:	682b      	ldr	r3, [r5, #0]
 800ac40:	b103      	cbz	r3, 800ac44 <_fstat_r+0x1c>
 800ac42:	6023      	str	r3, [r4, #0]
 800ac44:	bd38      	pop	{r3, r4, r5, pc}
 800ac46:	bf00      	nop
 800ac48:	20004344 	.word	0x20004344

0800ac4c <_isatty_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d06      	ldr	r5, [pc, #24]	@ (800ac68 <_isatty_r+0x1c>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7f8 f9c5 	bl	8002fe6 <_isatty>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_isatty_r+0x1a>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_isatty_r+0x1a>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	20004344 	.word	0x20004344

0800ac6c <_init>:
 800ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6e:	bf00      	nop
 800ac70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac72:	bc08      	pop	{r3}
 800ac74:	469e      	mov	lr, r3
 800ac76:	4770      	bx	lr

0800ac78 <_fini>:
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7a:	bf00      	nop
 800ac7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7e:	bc08      	pop	{r3}
 800ac80:	469e      	mov	lr, r3
 800ac82:	4770      	bx	lr
