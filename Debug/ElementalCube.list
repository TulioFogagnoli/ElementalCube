
ElementalCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00042a20  08009f74  08009f74  0000af74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804c994  0804c994  0004e0f8  2**0
                  CONTENTS
  4 .ARM          00000008  0804c994  0804c994  0004d994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804c99c  0804c99c  0004e0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804c99c  0804c99c  0004d99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804c9a0  0804c9a0  0004d9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0804c9a4  0004e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004e0f8  2**0
                  CONTENTS
 10 .bss          00004244  200000f8  200000f8  0004e0f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000433c  2000433c  0004e0f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004e0f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fa3  00000000  00000000  0004e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fb1  00000000  00000000  000650cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00069080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001058  00000000  00000000  0006a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ba8  00000000  00000000  0006b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ace0  00000000  00000000  000901e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d31a6  00000000  00000000  000aaec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017e06e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006180  00000000  00000000  0017e0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00184234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f5c 	.word	0x08009f5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08009f5c 	.word	0x08009f5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <ILI9488_Select>:
/* vim: set ai et ts:4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9488.h"

// Funções estáticas (privadas para este arquivo)
static void ILI9488_Select() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2110      	movs	r1, #16
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <ILI9488_Select+0x14>)
 80005a6:	f002 ff4f 	bl	8003448 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <ILI9488_Unselect>:

void ILI9488_Unselect() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2110      	movs	r1, #16
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <ILI9488_Unselect+0x14>)
 80005be:	f002 ff43 	bl	8003448 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <ILI9488_Reset>:

static void ILI9488_Reset() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <ILI9488_Reset+0x28>)
 80005d6:	f002 ff37 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80005da:	2032      	movs	r0, #50	@ 0x32
 80005dc:	f002 fa24 	bl	8002a28 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2101      	movs	r1, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <ILI9488_Reset+0x28>)
 80005e6:	f002 ff2f 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 80005ea:	2078      	movs	r0, #120	@ 0x78
 80005ec:	f002 fa1c 	bl	8002a28 <HAL_Delay>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020400 	.word	0x40020400

080005f8 <ILI9488_WriteCommand>:

static void ILI9488_WriteCommand(uint8_t cmd) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2102      	movs	r1, #2
 8000606:	4807      	ldr	r0, [pc, #28]	@ (8000624 <ILI9488_WriteCommand+0x2c>)
 8000608:	f002 ff1e 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800060c:	1df9      	adds	r1, r7, #7
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2201      	movs	r2, #1
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <ILI9488_WriteCommand+0x30>)
 8000616:	f004 fc50 	bl	8004eba <HAL_SPI_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020400 	.word	0x40020400
 8000628:	200003bc 	.word	0x200003bc

0800062c <ILI9488_WriteData>:

static void ILI9488_WriteData(uint8_t* buff, size_t buff_size) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2102      	movs	r1, #2
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <ILI9488_WriteData+0x2c>)
 800063c:	f002 ff04 	bl	8003448 <HAL_GPIO_WritePin>
    // Não otimizar para chunks pequenos como 1 ou 3 bytes
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b29a      	uxth	r2, r3
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4804      	ldr	r0, [pc, #16]	@ (800065c <ILI9488_WriteData+0x30>)
 800064c:	f004 fc35 	bl	8004eba <HAL_SPI_Transmit>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020400 	.word	0x40020400
 800065c:	200003bc 	.word	0x200003bc

08000660 <ILI9488_WriteSmallData>:

static void ILI9488_WriteSmallData(uint8_t data) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <ILI9488_WriteSmallData+0x2c>)
 8000670:	f002 feea 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000674:	1df9      	adds	r1, r7, #7
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <ILI9488_WriteSmallData+0x30>)
 800067e:	f004 fc1c 	bl	8004eba <HAL_SPI_Transmit>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020400 	.word	0x40020400
 8000690:	200003bc 	.word	0x200003bc

08000694 <ILI9488_SetAddressWindow>:


static void ILI9488_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4623      	mov	r3, r4
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4603      	mov	r3, r0
 80006a8:	80bb      	strh	r3, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	807b      	strh	r3, [r7, #2]
 80006ae:	4613      	mov	r3, r2
 80006b0:	803b      	strh	r3, [r7, #0]
    // Column Address Set
    ILI9488_WriteCommand(0x2A);
 80006b2:	202a      	movs	r0, #42	@ 0x2a
 80006b4:	f7ff ffa0 	bl	80005f8 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	733b      	strb	r3, [r7, #12]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	737b      	strb	r3, [r7, #13]
 80006c8:	887b      	ldrh	r3, [r7, #2]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73bb      	strb	r3, [r7, #14]
 80006d2:	887b      	ldrh	r3, [r7, #2]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
        ILI9488_WriteData(data, sizeof(data));
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffa4 	bl	800062c <ILI9488_WriteData>
    }
    // Page Address Set
    ILI9488_WriteCommand(0x2B);
 80006e4:	202b      	movs	r0, #43	@ 0x2b
 80006e6:	f7ff ff87 	bl	80005f8 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006ea:	88bb      	ldrh	r3, [r7, #4]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	723b      	strb	r3, [r7, #8]
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	727b      	strb	r3, [r7, #9]
 80006fa:	883b      	ldrh	r3, [r7, #0]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	72bb      	strb	r3, [r7, #10]
 8000704:	883b      	ldrh	r3, [r7, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	72fb      	strb	r3, [r7, #11]
        ILI9488_WriteData(data, sizeof(data));
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2104      	movs	r1, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff8b 	bl	800062c <ILI9488_WriteData>
    }
    // Memory Write
    ILI9488_WriteCommand(0x2C);
 8000716:	202c      	movs	r0, #44	@ 0x2c
 8000718:	f7ff ff6e 	bl	80005f8 <ILI9488_WriteCommand>
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <ILI9488_Init>:

void ILI9488_Init() {
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b095      	sub	sp, #84	@ 0x54
 8000728:	af00      	add	r7, sp, #0
    ILI9488_Select();
 800072a:	f7ff ff37 	bl	800059c <ILI9488_Select>
    ILI9488_Reset();
 800072e:	f7ff ff4d 	bl	80005cc <ILI9488_Reset>

    ILI9488_WriteCommand(0xE0); // Positive Gamma Control
 8000732:	20e0      	movs	r0, #224	@ 0xe0
 8000734:	f7ff ff60 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x03, 0x09, 0x08, 0x16, 0x0A, 0x3F, 0x78, 0x4C, 0x09, 0x0A, 0x08, 0x16, 0x1A, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 8000738:	4b5b      	ldr	r3, [pc, #364]	@ (80008a8 <ILI9488_Init+0x184>)
 800073a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800073e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000740:	c407      	stmia	r4!, {r0, r1, r2}
 8000742:	8023      	strh	r3, [r4, #0]
 8000744:	3402      	adds	r4, #2
 8000746:	0c1b      	lsrs	r3, r3, #16
 8000748:	7023      	strb	r3, [r4, #0]
 800074a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800074e:	210f      	movs	r1, #15
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff6b 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE1); // Negative Gamma Control
 8000756:	20e1      	movs	r0, #225	@ 0xe1
 8000758:	f7ff ff4e 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x16, 0x19, 0x03, 0x0F, 0x05, 0x32, 0x45, 0x46, 0x04, 0x0E, 0x0D, 0x35, 0x37, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 800075c:	4b53      	ldr	r3, [pc, #332]	@ (80008ac <ILI9488_Init+0x188>)
 800075e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000764:	c407      	stmia	r4!, {r0, r1, r2}
 8000766:	8023      	strh	r3, [r4, #0]
 8000768:	3402      	adds	r4, #2
 800076a:	0c1b      	lsrs	r3, r3, #16
 800076c:	7023      	strb	r3, [r4, #0]
 800076e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000772:	210f      	movs	r1, #15
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff59 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC0); // Power Control 1
 800077a:	20c0      	movs	r0, #192	@ 0xc0
 800077c:	f7ff ff3c 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x17, 0x15}; ILI9488_WriteData(data, sizeof(data)); }
 8000780:	f241 5317 	movw	r3, #5399	@ 0x1517
 8000784:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800078a:	2102      	movs	r1, #2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff4d 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC1); // Power Control 2
 8000792:	20c1      	movs	r0, #193	@ 0xc1
 8000794:	f7ff ff30 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x41}; ILI9488_WriteData(data, sizeof(data)); }
 8000798:	2341      	movs	r3, #65	@ 0x41
 800079a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800079e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a2:	2101      	movs	r1, #1
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff41 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC5); // VCOM Control
 80007aa:	20c5      	movs	r0, #197	@ 0xc5
 80007ac:	f7ff ff24 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x12, 0x80}; ILI9488_WriteData(data, sizeof(data)); }
 80007b0:	4a3f      	ldr	r2, [pc, #252]	@ (80008b0 <ILI9488_Init+0x18c>)
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	6812      	ldr	r2, [r2, #0]
 80007b8:	4611      	mov	r1, r2
 80007ba:	8019      	strh	r1, [r3, #0]
 80007bc:	3302      	adds	r3, #2
 80007be:	0c12      	lsrs	r2, r2, #16
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	2103      	movs	r1, #3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff2f 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0x36); // Memory Access Control
 80007ce:	2036      	movs	r0, #54	@ 0x36
 80007d0:	f7ff ff12 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {ILI9488_ROTATION}; ILI9488_WriteData(data, sizeof(data)); }
 80007d4:	2328      	movs	r3, #40	@ 0x28
 80007d6:	f887 3020 	strb.w	r3, [r7, #32]
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff23 	bl	800062c <ILI9488_WriteData>
    
    // ============ MUDANÇA IMPORTANTE ANTERIOR ============
    ILI9488_WriteCommand(0x3A); // Interface Pixel Format
 80007e6:	203a      	movs	r0, #58	@ 0x3a
 80007e8:	f7ff ff06 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x66}; ILI9488_WriteSmallData(data[0]); } // 0x66 para 18 bits/pixel
 80007ec:	2366      	movs	r3, #102	@ 0x66
 80007ee:	773b      	strb	r3, [r7, #28]
 80007f0:	7f3b      	ldrb	r3, [r7, #28]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff34 	bl	8000660 <ILI9488_WriteSmallData>

    ILI9488_WriteCommand(0xB0); // Interface Mode Control
 80007f8:	20b0      	movs	r0, #176	@ 0xb0
 80007fa:	f7ff fefd 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 80007fe:	2300      	movs	r3, #0
 8000800:	763b      	strb	r3, [r7, #24]
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	2101      	movs	r1, #1
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff0f 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB1); // Frame Rate Control
 800080e:	20b1      	movs	r0, #177	@ 0xb1
 8000810:	f7ff fef2 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xB0, 0x11}; ILI9488_WriteData(data, sizeof(data)); }
 8000814:	f241 13b0 	movw	r3, #4528	@ 0x11b0
 8000818:	82bb      	strh	r3, [r7, #20]
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2102      	movs	r1, #2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff03 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB4); // Display Inversion Control
 8000826:	20b4      	movs	r0, #180	@ 0xb4
 8000828:	f7ff fee6 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02}; ILI9488_WriteData(data, sizeof(data)); }
 800082c:	2302      	movs	r3, #2
 800082e:	743b      	strb	r3, [r7, #16]
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2101      	movs	r1, #1
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fef8 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB6); // Display Function Control
 800083c:	20b6      	movs	r0, #182	@ 0xb6
 800083e:	f7ff fedb 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02, 0x02, 0x3B}; ILI9488_WriteData(data, sizeof(data)); }
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <ILI9488_Init+0x190>)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	4611      	mov	r1, r2
 800084c:	8019      	strh	r1, [r3, #0]
 800084e:	3302      	adds	r3, #2
 8000850:	0c12      	lsrs	r2, r2, #16
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2103      	movs	r1, #3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fee6 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE9); // Set Image Function
 8000860:	20e9      	movs	r0, #233	@ 0xe9
 8000862:	f7ff fec9 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 8000866:	2300      	movs	r3, #0
 8000868:	723b      	strb	r3, [r7, #8]
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2101      	movs	r1, #1
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fedb 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xF7); // Adjust Control 3
 8000876:	20f7      	movs	r0, #247	@ 0xf7
 8000878:	f7ff febe 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xA9, 0x51, 0x2C, 0x82}; ILI9488_WriteData(data, sizeof(data)); }
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <ILI9488_Init+0x194>)
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2104      	movs	r1, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fed1 	bl	800062c <ILI9488_WriteData>
    
    ILI9488_WriteCommand(0x11); // Sleep Out
 800088a:	2011      	movs	r0, #17
 800088c:	f7ff feb4 	bl	80005f8 <ILI9488_WriteCommand>
    HAL_Delay(120);
 8000890:	2078      	movs	r0, #120	@ 0x78
 8000892:	f002 f8c9 	bl	8002a28 <HAL_Delay>
    ILI9488_WriteCommand(0x29); // Display ON
 8000896:	2029      	movs	r0, #41	@ 0x29
 8000898:	f7ff feae 	bl	80005f8 <ILI9488_WriteCommand>
    ILI9488_Unselect();
 800089c:	f7ff fe8a 	bl	80005b4 <ILI9488_Unselect>
}
 80008a0:	bf00      	nop
 80008a2:	3754      	adds	r7, #84	@ 0x54
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	08009f74 	.word	0x08009f74
 80008ac:	08009f84 	.word	0x08009f84
 80008b0:	08009f94 	.word	0x08009f94
 80008b4:	08009f98 	.word	0x08009f98
 80008b8:	822c51a9 	.word	0x822c51a9

080008bc <ILI9488_WriteChar>:
    
    ILI9488_Unselect();
}

// ============== NOVA FUNÇÃO DE ESCRITA DE CARACTERE (3 BYTES) ==============
static void ILI9488_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008bc:	b082      	sub	sp, #8
 80008be:	b580      	push	{r7, lr}
 80008c0:	b08a      	sub	sp, #40	@ 0x28
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
 80008ca:	460b      	mov	r3, r1
 80008cc:	80bb      	strh	r3, [r7, #4]
 80008ce:	4613      	mov	r3, r2
 80008d0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ILI9488_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80008d2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008d6:	461a      	mov	r2, r3
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	4413      	add	r3, r2
 80008dc:	b29b      	uxth	r3, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008e6:	4619      	mov	r1, r3
 80008e8:	88bb      	ldrh	r3, [r7, #4]
 80008ea:	440b      	add	r3, r1
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	3b01      	subs	r3, #1
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	88b9      	ldrh	r1, [r7, #4]
 80008f4:	88f8      	ldrh	r0, [r7, #6]
 80008f6:	f7ff fecd 	bl	8000694 <ILI9488_SetAddressWindow>

    // Converte as cores de background e foreground para 3 bytes uma única vez
    uint8_t color_r = ((color >> 11) << 3);
 80008fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80008fc:	0adb      	lsrs	r3, r3, #11
 80008fe:	b29b      	uxth	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	77fb      	strb	r3, [r7, #31]
    uint8_t color_g = ((color >> 5) & 0x3F) << 2;
 8000906:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000908:	095b      	lsrs	r3, r3, #5
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	77bb      	strb	r3, [r7, #30]
    uint8_t color_b = (color & 0x1F) << 3;
 8000912:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000914:	b2db      	uxtb	r3, r3
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	777b      	strb	r3, [r7, #29]

    uint8_t bgcolor_r = ((bgcolor >> 11) << 3);
 800091a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800091e:	0adb      	lsrs	r3, r3, #11
 8000920:	b29b      	uxth	r3, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	773b      	strb	r3, [r7, #28]
    uint8_t bgcolor_g = ((bgcolor >> 5) & 0x3F) << 2;
 8000928:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	b29b      	uxth	r3, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	76fb      	strb	r3, [r7, #27]
    uint8_t bgcolor_b = (bgcolor & 0x1F) << 3;
 8000936:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800093a:	b2db      	uxtb	r3, r3
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	76bb      	strb	r3, [r7, #26]
    
    for(i = 0; i < font.height; i++) {
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
 8000944:	e03d      	b.n	80009c2 <ILI9488_WriteChar+0x106>
        b = font.data[(ch - 32) * font.height + i];
 8000946:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	3b20      	subs	r3, #32
 800094c:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000950:	fb01 f303 	mul.w	r3, r1, r3
 8000954:	4619      	mov	r1, r3
 8000956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
 8000966:	e023      	b.n	80009b0 <ILI9488_WriteChar+0xf4>
            if((b << j) & 0x8000) {
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00c      	beq.n	8000992 <ILI9488_WriteChar+0xd6>
                uint8_t pixel[] = {color_r, color_g, color_b};
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	743b      	strb	r3, [r7, #16]
 800097c:	7fbb      	ldrb	r3, [r7, #30]
 800097e:	747b      	strb	r3, [r7, #17]
 8000980:	7f7b      	ldrb	r3, [r7, #29]
 8000982:	74bb      	strb	r3, [r7, #18]
                ILI9488_WriteData(pixel, sizeof(pixel));
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	2103      	movs	r1, #3
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fe4e 	bl	800062c <ILI9488_WriteData>
 8000990:	e00b      	b.n	80009aa <ILI9488_WriteChar+0xee>
            } else {
                uint8_t pixel[] = {bgcolor_r, bgcolor_g, bgcolor_b};
 8000992:	7f3b      	ldrb	r3, [r7, #28]
 8000994:	733b      	strb	r3, [r7, #12]
 8000996:	7efb      	ldrb	r3, [r7, #27]
 8000998:	737b      	strb	r3, [r7, #13]
 800099a:	7ebb      	ldrb	r3, [r7, #26]
 800099c:	73bb      	strb	r3, [r7, #14]
                ILI9488_WriteData(pixel, sizeof(pixel));
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2103      	movs	r1, #3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe41 	bl	800062c <ILI9488_WriteData>
        for(j = 0; j < font.width; j++) {
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	3301      	adds	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
 80009b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80009b4:	461a      	mov	r2, r3
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d3d5      	bcc.n	8000968 <ILI9488_WriteChar+0xac>
    for(i = 0; i < font.height; i++) {
 80009bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009be:	3301      	adds	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009c6:	461a      	mov	r2, r3
 80009c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d3bb      	bcc.n	8000946 <ILI9488_WriteChar+0x8a>
            }
        }
    }
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	@ 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009da:	b002      	add	sp, #8
 80009dc:	4770      	bx	lr
	...

080009e0 <ILI9488_FillRectangle>:

// ============== NOVA FUNÇÃO DE PREENCHER RETÂNGULO (3 BYTES) ==============
void ILI9488_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4604      	mov	r4, r0
 80009e8:	4608      	mov	r0, r1
 80009ea:	4611      	mov	r1, r2
 80009ec:	461a      	mov	r2, r3
 80009ee:	4623      	mov	r3, r4
 80009f0:	80fb      	strh	r3, [r7, #6]
 80009f2:	4603      	mov	r3, r0
 80009f4:	80bb      	strh	r3, [r7, #4]
 80009f6:	460b      	mov	r3, r1
 80009f8:	807b      	strh	r3, [r7, #2]
 80009fa:	4613      	mov	r3, r2
 80009fc:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a04:	f080 8083 	bcs.w	8000b0e <ILI9488_FillRectangle+0x12e>
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a0e:	d27e      	bcs.n	8000b0e <ILI9488_FillRectangle+0x12e>
    if((x + w) > ILI9488_WIDTH) w = ILI9488_WIDTH - x;
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	4413      	add	r3, r2
 8000a16:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a1a:	dd03      	ble.n	8000a24 <ILI9488_FillRectangle+0x44>
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8000a22:	807b      	strh	r3, [r7, #2]
    if((y + h) > ILI9488_HEIGHT) h = ILI9488_HEIGHT - y;
 8000a24:	88ba      	ldrh	r2, [r7, #4]
 8000a26:	883b      	ldrh	r3, [r7, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a2e:	dd03      	ble.n	8000a38 <ILI9488_FillRectangle+0x58>
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000a36:	803b      	strh	r3, [r7, #0]

    ILI9488_Select();
 8000a38:	f7ff fdb0 	bl	800059c <ILI9488_Select>
    ILI9488_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000a3c:	88fa      	ldrh	r2, [r7, #6]
 8000a3e:	887b      	ldrh	r3, [r7, #2]
 8000a40:	4413      	add	r3, r2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	3b01      	subs	r3, #1
 8000a46:	b29c      	uxth	r4, r3
 8000a48:	88ba      	ldrh	r2, [r7, #4]
 8000a4a:	883b      	ldrh	r3, [r7, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	3b01      	subs	r3, #1
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	88b9      	ldrh	r1, [r7, #4]
 8000a56:	88f8      	ldrh	r0, [r7, #6]
 8000a58:	4622      	mov	r2, r4
 8000a5a:	f7ff fe1b 	bl	8000694 <ILI9488_SetAddressWindow>
    
    // Converte a cor para 3 bytes
    uint8_t r = (color >> 11) & 0x1F;
 8000a5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a60:	0adb      	lsrs	r3, r3, #11
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f003 031f 	and.w	r3, r3, #31
 8000a6a:	74fb      	strb	r3, [r7, #19]
    uint8_t g = (color >> 5) & 0x3F;
 8000a6c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a78:	74bb      	strb	r3, [r7, #18]
    uint8_t b = color & 0x1F;
 8000a7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f003 031f 	and.w	r3, r3, #31
 8000a82:	747b      	strb	r3, [r7, #17]

    r = (r << 3) | (r >> 2);
 8000a84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	b25a      	sxtb	r2, r3
 8000a8c:	7cfb      	ldrb	r3, [r7, #19]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	74fb      	strb	r3, [r7, #19]
    g = (g << 2) | (g >> 4);
 8000a9a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	7cbb      	ldrb	r3, [r7, #18]
 8000aa4:	091b      	lsrs	r3, r3, #4
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	74bb      	strb	r3, [r7, #18]
    b = (b << 3) | (b >> 2);
 8000ab0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	7c7b      	ldrb	r3, [r7, #17]
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	747b      	strb	r3, [r7, #17]
    
    uint8_t data[] = {r, g, b};
 8000ac6:	7cfb      	ldrb	r3, [r7, #19]
 8000ac8:	733b      	strb	r3, [r7, #12]
 8000aca:	7cbb      	ldrb	r3, [r7, #18]
 8000acc:	737b      	strb	r3, [r7, #13]
 8000ace:	7c7b      	ldrb	r3, [r7, #17]
 8000ad0:	73bb      	strb	r3, [r7, #14]
    
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4810      	ldr	r0, [pc, #64]	@ (8000b18 <ILI9488_FillRectangle+0x138>)
 8000ad8:	f002 fcb6 	bl	8003448 <HAL_GPIO_WritePin>
    for(uint32_t i = 0; i < (h * w); i++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <ILI9488_FillRectangle+0x118>
        HAL_SPI_Transmit(&ILI9488_SPI_PORT, data, 3, HAL_MAX_DELAY);
 8000ae2:	f107 010c 	add.w	r1, r7, #12
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	2203      	movs	r2, #3
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <ILI9488_FillRectangle+0x13c>)
 8000aee:	f004 f9e4 	bl	8004eba <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < (h * w); i++) {
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	883b      	ldrh	r3, [r7, #0]
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d3ec      	bcc.n	8000ae2 <ILI9488_FillRectangle+0x102>
    }

    ILI9488_Unselect();
 8000b08:	f7ff fd54 	bl	80005b4 <ILI9488_Unselect>
 8000b0c:	e000      	b.n	8000b10 <ILI9488_FillRectangle+0x130>
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 8000b0e:	bf00      	nop
}
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	200003bc 	.word	0x200003bc

08000b20 <ILI9488_WriteString>:

// O restante das funções não precisa de alteração pois dependem das que foram corrigidas

void ILI9488_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b20:	b082      	sub	sp, #8
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af04      	add	r7, sp, #16
 8000b28:	603a      	str	r2, [r7, #0]
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	80fb      	strh	r3, [r7, #6]
 8000b30:	460b      	mov	r3, r1
 8000b32:	80bb      	strh	r3, [r7, #4]
    ILI9488_Select();
 8000b34:	f7ff fd32 	bl	800059c <ILI9488_Select>
    while(*str) {
 8000b38:	e02f      	b.n	8000b9a <ILI9488_WriteString+0x7a>
        if(x + font.width >= ILI9488_WIDTH) {
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	7d3a      	ldrb	r2, [r7, #20]
 8000b3e:	4413      	add	r3, r2
 8000b40:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000b44:	db14      	blt.n	8000b70 <ILI9488_WriteString+0x50>
            x = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b4a:	7d7b      	ldrb	r3, [r7, #21]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9488_HEIGHT) break;
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	7d7a      	ldrb	r2, [r7, #21]
 8000b58:	4413      	add	r3, r2
 8000b5a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b5e:	da21      	bge.n	8000ba4 <ILI9488_WriteString+0x84>
            if(*str == ' ') {
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d103      	bne.n	8000b70 <ILI9488_WriteString+0x50>
                str++;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	603b      	str	r3, [r7, #0]
                continue;
 8000b6e:	e014      	b.n	8000b9a <ILI9488_WriteString+0x7a>
            }
        }
        ILI9488_WriteChar(x, y, *str, font, color, bgcolor);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	88b9      	ldrh	r1, [r7, #4]
 8000b76:	88f8      	ldrh	r0, [r7, #6]
 8000b78:	8c3b      	ldrh	r3, [r7, #32]
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	8bbb      	ldrh	r3, [r7, #28]
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f7ff fe99 	bl	80008bc <ILI9488_WriteChar>
        x += font.width;
 8000b8a:	7d3b      	ldrb	r3, [r7, #20]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4413      	add	r3, r2
 8000b92:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1cb      	bne.n	8000b3a <ILI9488_WriteString+0x1a>
 8000ba2:	e000      	b.n	8000ba6 <ILI9488_WriteString+0x86>
            if(y + font.height >= ILI9488_HEIGHT) break;
 8000ba4:	bf00      	nop
    }
    ILI9488_Unselect();
 8000ba6:	f7ff fd05 	bl	80005b4 <ILI9488_Unselect>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb4:	b002      	add	sp, #8
 8000bb6:	4770      	bx	lr

08000bb8 <ILI9488_FillScreen>:

void ILI9488_FillScreen(uint16_t color) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, color);
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000bca:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff ff05 	bl	80009e0 <ILI9488_FillRectangle>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <ILI9488_DrawImage_RGB666>:
    }

    ILI9488_Unselect();
}

void ILI9488_DrawImage_RGB666(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint8_t* data) {
 8000bde:	b590      	push	{r4, r7, lr}
 8000be0:	b087      	sub	sp, #28
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4604      	mov	r4, r0
 8000be6:	4608      	mov	r0, r1
 8000be8:	4611      	mov	r1, r2
 8000bea:	461a      	mov	r2, r3
 8000bec:	4623      	mov	r3, r4
 8000bee:	80fb      	strh	r3, [r7, #6]
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	80bb      	strh	r3, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	803b      	strh	r3, [r7, #0]
    if ((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000c02:	d23f      	bcs.n	8000c84 <ILI9488_DrawImage_RGB666+0xa6>
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000c0a:	d23b      	bcs.n	8000c84 <ILI9488_DrawImage_RGB666+0xa6>
    if ((x + w - 1) >= ILI9488_WIDTH) return;
 8000c0c:	88fa      	ldrh	r2, [r7, #6]
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	4413      	add	r3, r2
 8000c12:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000c16:	dc37      	bgt.n	8000c88 <ILI9488_DrawImage_RGB666+0xaa>
    if ((y + h - 1) >= ILI9488_HEIGHT) return;
 8000c18:	88ba      	ldrh	r2, [r7, #4]
 8000c1a:	883b      	ldrh	r3, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000c22:	dc33      	bgt.n	8000c8c <ILI9488_DrawImage_RGB666+0xae>

    ILI9488_Select();
 8000c24:	f7ff fcba 	bl	800059c <ILI9488_Select>
    ILI9488_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	3b01      	subs	r3, #1
 8000c32:	b29c      	uxth	r4, r3
 8000c34:	88ba      	ldrh	r2, [r7, #4]
 8000c36:	883b      	ldrh	r3, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	88b9      	ldrh	r1, [r7, #4]
 8000c42:	88f8      	ldrh	r0, [r7, #6]
 8000c44:	4622      	mov	r2, r4
 8000c46:	f7ff fd25 	bl	8000694 <ILI9488_SetAddressWindow>
    
    // Calcula o tamanho de uma linha da imagem em bytes (largura * 3 bytes por pixel)
    uint32_t line_size_bytes = (uint32_t)w * 3;
 8000c4a:	887a      	ldrh	r2, [r7, #2]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
    
    // Envia os dados da imagem linha por linha
    for (uint16_t i = 0; i < h; i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	82fb      	strh	r3, [r7, #22]
 8000c58:	e00d      	b.n	8000c76 <ILI9488_DrawImage_RGB666+0x98>
        // Calcula o ponteiro para o início da linha atual
        const uint8_t* p_line_data = data + (i * line_size_bytes);
 8000c5a:	8afb      	ldrh	r3, [r7, #22]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c64:	4413      	add	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
        // Envia a linha inteira para o display
        ILI9488_WriteData((uint8_t*)p_line_data, line_size_bytes);
 8000c68:	6939      	ldr	r1, [r7, #16]
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff fcde 	bl	800062c <ILI9488_WriteData>
    for (uint16_t i = 0; i < h; i++) {
 8000c70:	8afb      	ldrh	r3, [r7, #22]
 8000c72:	3301      	adds	r3, #1
 8000c74:	82fb      	strh	r3, [r7, #22]
 8000c76:	8afa      	ldrh	r2, [r7, #22]
 8000c78:	883b      	ldrh	r3, [r7, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d3ed      	bcc.n	8000c5a <ILI9488_DrawImage_RGB666+0x7c>
    }
    
    ILI9488_Unselect();
 8000c7e:	f7ff fc99 	bl	80005b4 <ILI9488_Unselect>
 8000c82:	e004      	b.n	8000c8e <ILI9488_DrawImage_RGB666+0xb0>
    if ((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 8000c84:	bf00      	nop
 8000c86:	e002      	b.n	8000c8e <ILI9488_DrawImage_RGB666+0xb0>
    if ((x + w - 1) >= ILI9488_WIDTH) return;
 8000c88:	bf00      	nop
 8000c8a:	e000      	b.n	8000c8e <ILI9488_DrawImage_RGB666+0xb0>
    if ((y + h - 1) >= ILI9488_HEIGHT) return;
 8000c8c:	bf00      	nop
}
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <TCS3472_Init>:
/**
 * @brief Inicializa o sensor TCS3472.
 * @param hi2c: Ponteiro para a handle do I2C a ser usado.
 * @return true se a inicialização foi bem-sucedida, false caso contrário.
 */
bool TCS3472_Init(I2C_HandleTypeDef *hi2c) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af04      	add	r7, sp, #16
 8000c9a:	6078      	str	r0, [r7, #4]
    uint8_t reg_data;

    // 1. Verifica se o sensor está a responder lendo o seu ID
    // O ID do TCS3472 deve ser 0x44 ou 0x4D
    HAL_I2C_Mem_Read(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ID), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	f107 030f 	add.w	r3, r7, #15
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	2292      	movs	r2, #146	@ 0x92
 8000cb0:	2152      	movs	r1, #82	@ 0x52
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f002 fe20 	bl	80038f8 <HAL_I2C_Mem_Read>
    if (reg_data != 0x44 && reg_data != 0x4D) {
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2b44      	cmp	r3, #68	@ 0x44
 8000cbc:	d004      	beq.n	8000cc8 <TCS3472_Init+0x34>
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2b4d      	cmp	r3, #77	@ 0x4d
 8000cc2:	d001      	beq.n	8000cc8 <TCS3472_Init+0x34>
        return false; // Falha na comunicação
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e046      	b.n	8000d56 <TCS3472_Init+0xc2>
    }

    // 2. Configura o tempo de integração do sensor (afeta a sensibilidade)
    // 0xEB = 70ms. Valores mais altos = mais sensível à luz fraca.
    reg_data = 0xEB;
 8000cc8:	23eb      	movs	r3, #235	@ 0xeb
 8000cca:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ATIME), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	f107 030f 	add.w	r3, r7, #15
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2281      	movs	r2, #129	@ 0x81
 8000ce0:	2152      	movs	r1, #82	@ 0x52
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f002 fd0e 	bl	8003704 <HAL_I2C_Mem_Write>

    // 3. Configura o ganho do sensor (1x, 4x, 16x, 60x)
    // 0x00 = Ganho 1x
    reg_data = 0x00;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_CONTROL), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	f107 030f 	add.w	r3, r7, #15
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	228f      	movs	r2, #143	@ 0x8f
 8000d00:	2152      	movs	r1, #82	@ 0x52
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f002 fcfe 	bl	8003704 <HAL_I2C_Mem_Write>

    // 4. Ativa o oscilador interno e o conversor ADC de cor
    reg_data = TCS3472_ENABLE_PON;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ENABLE), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	2301      	movs	r3, #1
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	f107 030f 	add.w	r3, r7, #15
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	2280      	movs	r2, #128	@ 0x80
 8000d20:	2152      	movs	r1, #82	@ 0x52
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f002 fcee 	bl	8003704 <HAL_I2C_Mem_Write>
    HAL_Delay(3); // Espera o oscilador estabilizar
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f001 fe7d 	bl	8002a28 <HAL_Delay>
    reg_data |= TCS3472_ENABLE_AEN;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ENABLE), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	f107 030f 	add.w	r3, r7, #15
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	2280      	movs	r2, #128	@ 0x80
 8000d4c:	2152      	movs	r1, #82	@ 0x52
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f002 fcd8 	bl	8003704 <HAL_I2C_Mem_Write>

    return true; // Sucesso
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <TCS3472_ReadData>:
/**
 * @brief Lê os valores de Vermelho, Verde, Azul e Clear do sensor.
 * @param hi2c: Ponteiro para a handle do I2C a ser usado.
 * @param color_data: Ponteiro para a estrutura onde os dados serão armazenados.
 */
void TCS3472_ReadData(I2C_HandleTypeDef *hi2c, TCS3472_Data* color_data) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b088      	sub	sp, #32
 8000d62:	af04      	add	r7, sp, #16
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]
    uint8_t buffer[8];

    // Lê os 8 bytes de dados de cor (Clear, Red, Green, Blue - 2 bytes cada)
    // O sensor auto-incrementa o endereço do registo, por isso podemos ler tudo de uma vez
    HAL_I2C_Mem_Read(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_CDATAL), 1, buffer, 8, HAL_MAX_DELAY);
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	2308      	movs	r3, #8
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	2294      	movs	r2, #148	@ 0x94
 8000d7c:	2152      	movs	r1, #82	@ 0x52
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f002 fdba 	bl	80038f8 <HAL_I2C_Mem_Read>

    color_data->clear = (buffer[1] << 8) | buffer[0];
 8000d84:	7a7b      	ldrb	r3, [r7, #9]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	7a3b      	ldrb	r3, [r7, #8]
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	80da      	strh	r2, [r3, #6]
    color_data->red   = (buffer[3] << 8) | buffer[2];
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	7abb      	ldrb	r3, [r7, #10]
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	801a      	strh	r2, [r3, #0]
    color_data->green = (buffer[5] << 8) | buffer[4];
 8000db0:	7b7b      	ldrb	r3, [r7, #13]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	805a      	strh	r2, [r3, #2]
    color_data->blue  = (buffer[7] << 8) | buffer[6];
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	809a      	strh	r2, [r3, #4]
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000df4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <vApplicationGetIdleTaskMemory+0x30>)
 8000dfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2280      	movs	r2, #128	@ 0x80
 8000e00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000114 	.word	0x20000114
 8000e14:	20000168 	.word	0x20000168

08000e18 <vInitBattle>:
 * @brief Executa a lógica de batalha turno a turno, atualizando a vida dos jogadores.
 * @param pUserPlayer: Ponteiro para o jogador do usuário.
 * @param pCpuPlayer: Ponteiro para o jogador da CPU.
 */
void vInitBattle(EWizard* pUserPlayer, EWizard* pCpuPlayer)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	75fb      	strb	r3, [r7, #23]
 8000e26:	e092      	b.n	8000f4e <vInitBattle+0x136>
  {
    // Pega os ataques deste turno
    EColor userAttack = pUserPlayer->eAttackSequential[u8Idx];
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	789b      	ldrb	r3, [r3, #2]
 8000e30:	753b      	strb	r3, [r7, #20]
    EColor cpuAttack = pCpuPlayer->eAttackSequential[u8Idx];
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	4413      	add	r3, r2
 8000e38:	789b      	ldrb	r3, [r3, #2]
 8000e3a:	74fb      	strb	r3, [r7, #19]

    // Calcula o resultado do ataque do Jogador -> CPU
    EAttackOutcome userOutcome = eGetAttackOutcome(userAttack, cpuAttack);
 8000e3c:	7cfa      	ldrb	r2, [r7, #19]
 8000e3e:	7d3b      	ldrb	r3, [r7, #20]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f88c 	bl	8000f60 <eGetAttackOutcome>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	74bb      	strb	r3, [r7, #18]
    uint8_t userDamage = BASE_ATTACK_DAMAGE;
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	75bb      	strb	r3, [r7, #22]

    if (userOutcome == eOutcome_SuperEffective)
 8000e50:	7cbb      	ldrb	r3, [r7, #18]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d10f      	bne.n	8000e76 <vInitBattle+0x5e>
    {
      userDamage *= SUPER_EFFECTIVE_MODIFIER;
 8000e56:	7dbb      	ldrb	r3, [r7, #22]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e60:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e70:	793b      	ldrb	r3, [r7, #4]
 8000e72:	75bb      	strb	r3, [r7, #22]
 8000e74:	e011      	b.n	8000e9a <vInitBattle+0x82>
    }
    else if (userOutcome == eOutcome_NotEffective)
 8000e76:	7cbb      	ldrb	r3, [r7, #18]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d10e      	bne.n	8000e9a <vInitBattle+0x82>
    {
      userDamage *= NOT_EFFECTIVE_MODIFIER;
 8000e7c:	7dbb      	ldrb	r3, [r7, #22]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e92:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e96:	793b      	ldrb	r3, [r7, #4]
 8000e98:	75bb      	strb	r3, [r7, #22]
    }

    // Calcula o resultado do ataque da CPU -> Jogador
    EAttackOutcome cpuOutcome = eGetAttackOutcome(cpuAttack, userAttack);
 8000e9a:	7d3a      	ldrb	r2, [r7, #20]
 8000e9c:	7cfb      	ldrb	r3, [r7, #19]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f85d 	bl	8000f60 <eGetAttackOutcome>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	747b      	strb	r3, [r7, #17]
    uint8_t cpuDamage = BASE_ATTACK_DAMAGE;
 8000eaa:	230a      	movs	r3, #10
 8000eac:	757b      	strb	r3, [r7, #21]

    if (cpuOutcome == eOutcome_SuperEffective)
 8000eae:	7c7b      	ldrb	r3, [r7, #17]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d10f      	bne.n	8000ed4 <vInitBattle+0xbc>
    {
      cpuDamage *= SUPER_EFFECTIVE_MODIFIER;
 8000eb4:	7d7b      	ldrb	r3, [r7, #21]
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ebe:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eca:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ece:	793b      	ldrb	r3, [r7, #4]
 8000ed0:	757b      	strb	r3, [r7, #21]
 8000ed2:	e011      	b.n	8000ef8 <vInitBattle+0xe0>
    }
    else if (cpuOutcome == eOutcome_NotEffective)
 8000ed4:	7c7b      	ldrb	r3, [r7, #17]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d10e      	bne.n	8000ef8 <vInitBattle+0xe0>
    {
      cpuDamage *= NOT_EFFECTIVE_MODIFIER;
 8000eda:	7d7b      	ldrb	r3, [r7, #21]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ef4:	793b      	ldrb	r3, [r7, #4]
 8000ef6:	757b      	strb	r3, [r7, #21]
    }

    // Aplica o dano, garantindo que a vida não fique negativa
    if (pCpuPlayer->u8HeartPoints >= userDamage)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	7dba      	ldrb	r2, [r7, #22]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d807      	bhi.n	8000f12 <vInitBattle+0xfa>
    {
      pCpuPlayer->u8HeartPoints -= userDamage;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	7dbb      	ldrb	r3, [r7, #22]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e002      	b.n	8000f18 <vInitBattle+0x100>
    }
    else
    {
      pCpuPlayer->u8HeartPoints = 0;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
    }

    if (pUserPlayer->u8HeartPoints >= cpuDamage)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	7d7a      	ldrb	r2, [r7, #21]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d807      	bhi.n	8000f32 <vInitBattle+0x11a>
    {
      pUserPlayer->u8HeartPoints -= cpuDamage;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	781a      	ldrb	r2, [r3, #0]
 8000f26:	7d7b      	ldrb	r3, [r7, #21]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e002      	b.n	8000f38 <vInitBattle+0x120>
    }
    else
    {
      pUserPlayer->u8HeartPoints = 0;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
    }
    
    // Se a vida de alguém chegar a 0, a batalha pode parar mais cedo
    if(pUserPlayer->u8HeartPoints == 0 || pCpuPlayer->u8HeartPoints == 0)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00a      	beq.n	8000f56 <vInitBattle+0x13e>
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <vInitBattle+0x13e>
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	75fb      	strb	r3, [r7, #23]
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	f67f af69 	bls.w	8000e28 <vInitBattle+0x10>
    {
        break; // Encerra o loop for
    }
  }
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <eGetAttackOutcome>:
 * @param eAttackerAttack: O elemento do atacante.
 * @param eDefenderAttack: O elemento do defensor no mesmo turno.
 * @retval EAttackOutcome: O resultado da interação.
 */
EAttackOutcome eGetAttackOutcome(EColor eAttackerAttack, EColor eDefenderAttack)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
  switch (eAttackerAttack)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d859      	bhi.n	800102a <eGetAttackOutcome+0xca>
 8000f76:	a201      	add	r2, pc, #4	@ (adr r2, 8000f7c <eGetAttackOutcome+0x1c>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000f95 	.word	0x08000f95
 8000f80:	08000fb3 	.word	0x08000fb3
 8000f84:	08000fef 	.word	0x08000fef
 8000f88:	08000fd1 	.word	0x08000fd1
 8000f8c:	08001003 	.word	0x08001003
 8000f90:	08001017 	.word	0x08001017
  {
    case eRed: // FOGO
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Fogo > Terra
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d101      	bne.n	8000f9e <eGetAttackOutcome+0x3e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e053      	b.n	8001046 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective;  //  Fogo > Sombra
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d101      	bne.n	8000fa8 <eGetAttackOutcome+0x48>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e04e      	b.n	8001046 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlue) return eOutcome_NotEffective;     // Fogo < Agua
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d13f      	bne.n	800102e <eGetAttackOutcome+0xce>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e049      	b.n	8001046 <eGetAttackOutcome+0xe6>
      break;

    case eBlue: // ÁGUA
      if (eDefenderAttack == eRed) return eOutcome_SuperEffective;    // Agua > Fogo
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <eGetAttackOutcome+0x5c>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e044      	b.n	8001046 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eGreen) return eOutcome_SuperEffective;  // Agua > Ar
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d101      	bne.n	8000fc6 <eGetAttackOutcome+0x66>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e03f      	b.n	8001046 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;   // Agua < Terra
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d132      	bne.n	8001032 <eGetAttackOutcome+0xd2>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e03a      	b.n	8001046 <eGetAttackOutcome+0xe6>
      break;

    case eYellow: // TERRA
      if (eDefenderAttack == eBlue) return eOutcome_SuperEffective;   // Terra > Agua
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d101      	bne.n	8000fda <eGetAttackOutcome+0x7a>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e035      	b.n	8001046 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective;  // Terra > Luz
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d101      	bne.n	8000fe4 <eGetAttackOutcome+0x84>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e030      	b.n	8001046 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Terra < Fogo
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d125      	bne.n	8001036 <eGetAttackOutcome+0xd6>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e02b      	b.n	8001046 <eGetAttackOutcome+0xe6>
      break;

    case eGreen: // AR
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Ar > Terra
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d101      	bne.n	8000ff8 <eGetAttackOutcome+0x98>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e026      	b.n	8001046 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Ar < Fogo
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d11d      	bne.n	800103a <eGetAttackOutcome+0xda>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e021      	b.n	8001046 <eGetAttackOutcome+0xe6>
      break;
    
    case eWhite: // LUZ
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective; // Luz > Sombra
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d101      	bne.n	800100c <eGetAttackOutcome+0xac>
 8001008:	2301      	movs	r3, #1
 800100a:	e01c      	b.n	8001046 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;  // Luz < Terra
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	2b03      	cmp	r3, #3
 8001010:	d115      	bne.n	800103e <eGetAttackOutcome+0xde>
 8001012:	2302      	movs	r3, #2
 8001014:	e017      	b.n	8001046 <eGetAttackOutcome+0xe6>
      break;

    case eBlack: // SOMBRA
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective; // Sombra > Luz
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d101      	bne.n	8001020 <eGetAttackOutcome+0xc0>
 800101c:	2301      	movs	r3, #1
 800101e:	e012      	b.n	8001046 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;     // Sombra < Fogo
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10d      	bne.n	8001042 <eGetAttackOutcome+0xe2>
 8001026:	2302      	movs	r3, #2
 8001028:	e00d      	b.n	8001046 <eGetAttackOutcome+0xe6>
      break;

    default:
      return eOutcome_Neutral;
 800102a:	2300      	movs	r3, #0
 800102c:	e00b      	b.n	8001046 <eGetAttackOutcome+0xe6>
      break;
 800102e:	bf00      	nop
 8001030:	e008      	b.n	8001044 <eGetAttackOutcome+0xe4>
      break;
 8001032:	bf00      	nop
 8001034:	e006      	b.n	8001044 <eGetAttackOutcome+0xe4>
      break;
 8001036:	bf00      	nop
 8001038:	e004      	b.n	8001044 <eGetAttackOutcome+0xe4>
      break;
 800103a:	bf00      	nop
 800103c:	e002      	b.n	8001044 <eGetAttackOutcome+0xe4>
      break;
 800103e:	bf00      	nop
 8001040:	e000      	b.n	8001044 <eGetAttackOutcome+0xe4>
      break;
 8001042:	bf00      	nop
  }
  return eOutcome_Neutral; // Retorno padrão se nenhuma regra se aplicar
 8001044:	2300      	movs	r3, #0
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <ClearScreen>:
#include "ILI9488.h"
#include "fonts.h"
#include "stdint.h"
#include <stdio.h>

void ClearScreen() {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af02      	add	r7, sp, #8
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, ILI9488_BLACK);
 800105a:	2300      	movs	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001062:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001066:	2100      	movs	r1, #0
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fcb9 	bl	80009e0 <ILI9488_FillRectangle>
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <DrawMenu>:

void DrawMenu(const char* title, const char** options, int numOptions, int currentSelection) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b092      	sub	sp, #72	@ 0x48
 8001078:	af04      	add	r7, sp, #16
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
    char buffer[30];

    // Desenha o título com a fonte maior, mais abaixo no ecrã
    sprintf(buffer, "%s", title);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	492a      	ldr	r1, [pc, #168]	@ (8001134 <DrawMenu+0xc0>)
 800108a:	4618      	mov	r0, r3
 800108c:	f007 feb2 	bl	8008df4 <siprintf>
    ILI9488_WriteString(0, 0, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <DrawMenu+0xc4>)
 8001092:	f107 0114 	add.w	r1, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	9202      	str	r2, [sp, #8]
 800109a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800109e:	9201      	str	r2, [sp, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	460a      	mov	r2, r1
 80010a8:	2100      	movs	r1, #0
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fd38 	bl	8000b20 <ILI9488_WriteString>

    // Desenha as opções com mais espaçamento vertical
    for (int i = 0; i < numOptions; i++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80010b4:	e035      	b.n	8001122 <DrawMenu+0xae>
        uint16_t color = (i == currentSelection) ? ILI9488_YELLOW : ILI9488_WHITE;
 80010b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d102      	bne.n	80010c4 <DrawMenu+0x50>
 80010be:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010c2:	e001      	b.n	80010c8 <DrawMenu+0x54>
 80010c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c8:	867b      	strh	r3, [r7, #50]	@ 0x32
        sprintf(buffer, "%s %s", (i == currentSelection) ? ">" : " ", options[i]);
 80010ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d101      	bne.n	80010d6 <DrawMenu+0x62>
 80010d2:	491a      	ldr	r1, [pc, #104]	@ (800113c <DrawMenu+0xc8>)
 80010d4:	e000      	b.n	80010d8 <DrawMenu+0x64>
 80010d6:	491a      	ldr	r1, [pc, #104]	@ (8001140 <DrawMenu+0xcc>)
 80010d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	4413      	add	r3, r2
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f107 0014 	add.w	r0, r7, #20
 80010e6:	460a      	mov	r2, r1
 80010e8:	4916      	ldr	r1, [pc, #88]	@ (8001144 <DrawMenu+0xd0>)
 80010ea:	f007 fe83 	bl	8008df4 <siprintf>
        // Aumenta o espaçamento entre as linhas (de 15 para 25)
        ILI9488_WriteString(0, 30 + (i * 20), buffer, Font_7x10, color, ILI9488_BLACK);
 80010ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	0092      	lsls	r2, r2, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	331e      	adds	r3, #30
 80010fe:	b299      	uxth	r1, r3
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <DrawMenu+0xc4>)
 8001102:	f107 0014 	add.w	r0, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	9202      	str	r2, [sp, #8]
 800110a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4602      	mov	r2, r0
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fd02 	bl	8000b20 <ILI9488_WriteString>
    for (int i = 0; i < numOptions; i++) {
 800111c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111e:	3301      	adds	r3, #1
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
 8001122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	dbc5      	blt.n	80010b6 <DrawMenu+0x42>
    }
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	3738      	adds	r7, #56	@ 0x38
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	08009fc0 	.word	0x08009fc0
 8001138:	20000000 	.word	0x20000000
 800113c:	08009fc4 	.word	0x08009fc4
 8001140:	08009fc8 	.word	0x08009fc8
 8001144:	08009fcc 	.word	0x08009fcc

08001148 <KEYPAD_Scan>:
Keypad_Pin_t C_PINS[4] = {{C4_GPIO_Port, C4_Pin}, {C3_GPIO_Port, C3_Pin}, {C2_GPIO_Port, C2_Pin}, {C1_GPIO_Port, C1_Pin}};
// Pinos das linhas (entradas)
Keypad_Pin_t R_PINS[4] = {{R2_GPIO_Port, R2_Pin}, {R1_GPIO_Port, R1_Pin}, {R3_GPIO_Port, R3_Pin}, {R4_GPIO_Port, R4_Pin}};


char KEYPAD_Scan(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
    // Coloca todas as colunas em nível alto
    for (int i = 0; i < 4; i++) {
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e00f      	b.n	8001174 <KEYPAD_Scan+0x2c>
        HAL_GPIO_WritePin(C_PINS[i].PORT, C_PINS[i].PIN, GPIO_PIN_SET);
 8001154:	4a3e      	ldr	r2, [pc, #248]	@ (8001250 <KEYPAD_Scan+0x108>)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800115c:	4a3c      	ldr	r2, [pc, #240]	@ (8001250 <KEYPAD_Scan+0x108>)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4413      	add	r3, r2
 8001164:	889b      	ldrh	r3, [r3, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f002 f96d 	bl	8003448 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3301      	adds	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b03      	cmp	r3, #3
 8001178:	ddec      	ble.n	8001154 <KEYPAD_Scan+0xc>
    }

    // Loop para varrer cada coluna
    for (int col = 0; col < 4; col++) {
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	e05e      	b.n	800123e <KEYPAD_Scan+0xf6>
        // Ativa a coluna atual (coloca em nível baixo)
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_RESET);
 8001180:	4a33      	ldr	r2, [pc, #204]	@ (8001250 <KEYPAD_Scan+0x108>)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001188:	4a31      	ldr	r2, [pc, #196]	@ (8001250 <KEYPAD_Scan+0x108>)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	889b      	ldrh	r3, [r3, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	f002 f957 	bl	8003448 <HAL_GPIO_WritePin>

        // Verifica qual linha foi para nível baixo
        for (int row = 0; row < 4; row++) {
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e03b      	b.n	8001218 <KEYPAD_Scan+0xd0>
            if (HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET) {
 80011a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001254 <KEYPAD_Scan+0x10c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80011a8:	492a      	ldr	r1, [pc, #168]	@ (8001254 <KEYPAD_Scan+0x10c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	4619      	mov	r1, r3
 80011b4:	4610      	mov	r0, r2
 80011b6:	f002 f92f 	bl	8003418 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d128      	bne.n	8001212 <KEYPAD_Scan+0xca>
                // Botão pressionado!
                
                // --- Debounce e espera soltar a tecla ---
                HAL_Delay(50); // Simples debounce por atraso
 80011c0:	2032      	movs	r0, #50	@ 0x32
 80011c2:	f001 fc31 	bl	8002a28 <HAL_Delay>

                // Espera o usuário soltar a tecla para não ler a mesma tecla várias vezes
                while(HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET);
 80011c6:	bf00      	nop
 80011c8:	4a22      	ldr	r2, [pc, #136]	@ (8001254 <KEYPAD_Scan+0x10c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80011d0:	4920      	ldr	r1, [pc, #128]	@ (8001254 <KEYPAD_Scan+0x10c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	4619      	mov	r1, r3
 80011dc:	4610      	mov	r0, r2
 80011de:	f002 f91b 	bl	8003418 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0ef      	beq.n	80011c8 <KEYPAD_Scan+0x80>
                
                // Restaura a coluna para nível alto antes de retornar
                HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 80011e8:	4a19      	ldr	r2, [pc, #100]	@ (8001250 <KEYPAD_Scan+0x108>)
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80011f0:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <KEYPAD_Scan+0x108>)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4413      	add	r3, r2
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	4619      	mov	r1, r3
 80011fe:	f002 f923 	bl	8003448 <HAL_GPIO_WritePin>

                return KEYPAD_MAP[row][col];
 8001202:	4a15      	ldr	r2, [pc, #84]	@ (8001258 <KEYPAD_Scan+0x110>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	441a      	add	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	e019      	b.n	8001246 <KEYPAD_Scan+0xfe>
        for (int row = 0; row < 4; row++) {
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b03      	cmp	r3, #3
 800121c:	ddc0      	ble.n	80011a0 <KEYPAD_Scan+0x58>
            }
        }

        // Desativa a coluna atual antes de ir para a próxima
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 800121e:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <KEYPAD_Scan+0x108>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <KEYPAD_Scan+0x108>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	4619      	mov	r1, r3
 8001234:	f002 f908 	bl	8003448 <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3301      	adds	r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b03      	cmp	r3, #3
 8001242:	dd9d      	ble.n	8001180 <KEYPAD_Scan+0x38>
    }

    return '\0'; // Retorna nulo se nenhuma tecla for pressionada
 8001244:	2300      	movs	r3, #0
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008
 8001254:	20000028 	.word	0x20000028
 8001258:	0804c88c 	.word	0x0804c88c

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b09c      	sub	sp, #112	@ 0x70
 8001260:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001262:	f001 fb6f 	bl	8002944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001266:	f000 f8ab 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126a:	f000 f9a1 	bl	80015b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800126e:	f000 f93f 	bl	80014f0 <MX_SPI1_Init>
  MX_UART4_Init();
 8001272:	f000 f973 	bl	800155c <MX_UART4_Init>
  MX_I2C1_Init();
 8001276:	f000 f90d 	bl	8001494 <MX_I2C1_Init>
  // ETAPA DE INICIALIZAÇÃO
  //--------------------------------------------------------------------

  // 1. Inicializa o display. Ele usará a velocidade alta do SPI configurada
  //    no MX_SPI1_Init(), o que é ótimo para performance gráfica.
  ILI9488_Init();
 800127a:	f7ff fa53 	bl	8000724 <ILI9488_Init>

  // 2. Acende o backlight do display.
  //    (Assumindo que seu pino é o LCD_LED_Pin, como no seu MX_GPIO_Init)
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	2180      	movs	r1, #128	@ 0x80
 8001282:	4842      	ldr	r0, [pc, #264]	@ (800138c <main+0x130>)
 8001284:	f002 f8e0 	bl	8003448 <HAL_GPIO_WritePin>

  // 3. Prepara a tela para o usuário com uma mensagem de boas-vindas.
  ILI9488_FillScreen(ILI9488_BLACK);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fc95 	bl	8000bb8 <ILI9488_FillScreen>
  if (TCS3472_Init(&hi2c1))
 800128e:	4840      	ldr	r0, [pc, #256]	@ (8001390 <main+0x134>)
 8001290:	f7ff fd00 	bl	8000c94 <TCS3472_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00e      	beq.n	80012b8 <main+0x5c>
  {
    // Sucesso! Mostra uma mensagem no display
    ILI9488_WriteString(10, 200, "Sensor de Cor OK!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 800129a:	4b3e      	ldr	r3, [pc, #248]	@ (8001394 <main+0x138>)
 800129c:	2200      	movs	r2, #0
 800129e:	9202      	str	r2, [sp, #8]
 80012a0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80012a4:	9201      	str	r2, [sp, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	9200      	str	r2, [sp, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001398 <main+0x13c>)
 80012ae:	21c8      	movs	r1, #200	@ 0xc8
 80012b0:	200a      	movs	r0, #10
 80012b2:	f7ff fc35 	bl	8000b20 <ILI9488_WriteString>
 80012b6:	e00d      	b.n	80012d4 <main+0x78>
  }
  else
  {
    // Falha! Mostra uma mensagem de erro
    ILI9488_WriteString(10, 200, "Erro no Sensor de Cor!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 80012b8:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <main+0x138>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	9202      	str	r2, [sp, #8]
 80012be:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80012c2:	9201      	str	r2, [sp, #4]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a34      	ldr	r2, [pc, #208]	@ (800139c <main+0x140>)
 80012cc:	21c8      	movs	r1, #200	@ 0xc8
 80012ce:	200a      	movs	r0, #10
 80012d0:	f7ff fc26 	bl	8000b20 <ILI9488_WriteString>
  }

  ILI9488_WriteString(20, 120, "Sistema Iniciado!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 80012d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <main+0x138>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	9202      	str	r2, [sp, #8]
 80012da:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80012de:	9201      	str	r2, [sp, #4]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	9200      	str	r2, [sp, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a2e      	ldr	r2, [pc, #184]	@ (80013a0 <main+0x144>)
 80012e8:	2178      	movs	r1, #120	@ 0x78
 80012ea:	2014      	movs	r0, #20
 80012ec:	f7ff fc18 	bl	8000b20 <ILI9488_WriteString>
  HAL_Delay(2000); // Uma pequena pausa para o usuário ler a mensagem.
 80012f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012f4:	f001 fb98 	bl	8002a28 <HAL_Delay>

  // 4. Limpa a tela para começar a desenhar.
  ILI9488_FillScreen(ILI9488_BLACK);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fc5d 	bl	8000bb8 <ILI9488_FillScreen>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osMutexDef(gameMutex);
 80012fe:	2300      	movs	r3, #0
 8001300:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001302:	2300      	movs	r3, #0
 8001304:	65fb      	str	r3, [r7, #92]	@ 0x5c
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 8001306:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800130a:	4618      	mov	r0, r3
 800130c:	f005 f8d7 	bl	80064be <osMutexCreate>
 8001310:	4603      	mov	r3, r0
 8001312:	4a24      	ldr	r2, [pc, #144]	@ (80013a4 <main+0x148>)
 8001314:	6013      	str	r3, [r2, #0]

  osThreadDef(initPutHalTask, StartInputHalTask, osPriorityNormal, 0, 128);
 8001316:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <main+0x14c>)
 8001318:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800131c:	461d      	mov	r5, r3
 800131e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001322:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001326:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  inputHalTaskHandle = osThreadCreate(osThread(initPutHalTask), NULL);
 800132a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f005 f864 	bl	80063fe <osThreadCreate>
 8001336:	4603      	mov	r3, r0
 8001338:	4a1c      	ldr	r2, [pc, #112]	@ (80013ac <main+0x150>)
 800133a:	6013      	str	r3, [r2, #0]

  osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 256);
 800133c:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <main+0x154>)
 800133e:	f107 0420 	add.w	r4, r7, #32
 8001342:	461d      	mov	r5, r3
 8001344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001348:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800134c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f005 f851 	bl	80063fe <osThreadCreate>
 800135c:	4603      	mov	r3, r0
 800135e:	4a15      	ldr	r2, [pc, #84]	@ (80013b4 <main+0x158>)
 8001360:	6013      	str	r3, [r2, #0]

  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <main+0x15c>)
 8001364:	1d3c      	adds	r4, r7, #4
 8001366:	461d      	mov	r5, r3
 8001368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f005 f840 	bl	80063fe <osThreadCreate>
 800137e:	4603      	mov	r3, r0
 8001380:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <main+0x160>)
 8001382:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001384:	f005 f834 	bl	80063f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <main+0x12c>
 800138c:	40020800 	.word	0x40020800
 8001390:	20000368 	.word	0x20000368
 8001394:	20000000 	.word	0x20000000
 8001398:	0800a034 	.word	0x0800a034
 800139c:	0800a048 	.word	0x0800a048
 80013a0:	0800a060 	.word	0x0800a060
 80013a4:	20000468 	.word	0x20000468
 80013a8:	0800a084 	.word	0x0800a084
 80013ac:	2000045c 	.word	0x2000045c
 80013b0:	0800a0ac 	.word	0x0800a0ac
 80013b4:	20000460 	.word	0x20000460
 80013b8:	0800a0d4 	.word	0x0800a0d4
 80013bc:	20000464 	.word	0x20000464

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b094      	sub	sp, #80	@ 0x50
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	2230      	movs	r2, #48	@ 0x30
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f007 fd75 	bl	8008ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <SystemClock_Config+0xcc>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	4a27      	ldr	r2, [pc, #156]	@ (800148c <SystemClock_Config+0xcc>)
 80013ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f4:	4b25      	ldr	r3, [pc, #148]	@ (800148c <SystemClock_Config+0xcc>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <SystemClock_Config+0xd0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a21      	ldr	r2, [pc, #132]	@ (8001490 <SystemClock_Config+0xd0>)
 800140a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <SystemClock_Config+0xd0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001430:	2308      	movs	r3, #8
 8001432:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001434:	23a8      	movs	r3, #168	@ 0xa8
 8001436:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001438:	2302      	movs	r3, #2
 800143a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800143c:	2304      	movs	r3, #4
 800143e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f857 	bl	80044f8 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001450:	f000 ffe4 	bl	800241c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	230f      	movs	r3, #15
 8001456:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2302      	movs	r3, #2
 800145a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001460:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2105      	movs	r1, #5
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fab8 	bl	80049e8 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800147e:	f000 ffcd 	bl	800241c <Error_Handler>
  }
}
 8001482:	bf00      	nop
 8001484:	3750      	adds	r7, #80	@ 0x50
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_I2C1_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <MX_I2C1_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_I2C1_Init+0x58>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014d2:	f001 ffd3 	bl	800347c <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f000 ff9e 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000368 	.word	0x20000368
 80014e8:	40005400 	.word	0x40005400
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014f4:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_SPI1_Init+0x64>)
 80014f6:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <MX_SPI1_Init+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <MX_SPI1_Init+0x64>)
 80014fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <MX_SPI1_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <MX_SPI1_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_SPI1_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_SPI1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_SPI1_Init+0x64>)
 800151c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001520:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <MX_SPI1_Init+0x64>)
 8001524:	2208      	movs	r2, #8
 8001526:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_SPI1_Init+0x64>)
 800153c:	220a      	movs	r2, #10
 800153e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_SPI1_Init+0x64>)
 8001542:	f003 fc31 	bl	8004da8 <HAL_SPI_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800154c:	f000 ff66 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200003bc 	.word	0x200003bc
 8001558:	40013000 	.word	0x40013000

0800155c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_UART4_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <MX_UART4_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <MX_UART4_Init+0x4c>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_UART4_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_UART4_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <MX_UART4_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_UART4_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <MX_UART4_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_UART4_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_UART4_Init+0x4c>)
 8001594:	f003 ffd0 	bl	8005538 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800159e:	f000 ff3d 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000414 	.word	0x20000414
 80015ac:	40004c00 	.word	0x40004c00

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b49      	ldr	r3, [pc, #292]	@ (80016f0 <MX_GPIO_Init+0x140>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a48      	ldr	r2, [pc, #288]	@ (80016f0 <MX_GPIO_Init+0x140>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b46      	ldr	r3, [pc, #280]	@ (80016f0 <MX_GPIO_Init+0x140>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b42      	ldr	r3, [pc, #264]	@ (80016f0 <MX_GPIO_Init+0x140>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a41      	ldr	r2, [pc, #260]	@ (80016f0 <MX_GPIO_Init+0x140>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b3f      	ldr	r3, [pc, #252]	@ (80016f0 <MX_GPIO_Init+0x140>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b3b      	ldr	r3, [pc, #236]	@ (80016f0 <MX_GPIO_Init+0x140>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a3a      	ldr	r2, [pc, #232]	@ (80016f0 <MX_GPIO_Init+0x140>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <MX_GPIO_Init+0x140>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <MX_GPIO_Init+0x140>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a33      	ldr	r2, [pc, #204]	@ (80016f0 <MX_GPIO_Init+0x140>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b31      	ldr	r3, [pc, #196]	@ (80016f0 <MX_GPIO_Init+0x140>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2110      	movs	r1, #16
 800163a:	482e      	ldr	r0, [pc, #184]	@ (80016f4 <MX_GPIO_Init+0x144>)
 800163c:	f001 ff04 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2103      	movs	r1, #3
 8001644:	482c      	ldr	r0, [pc, #176]	@ (80016f8 <MX_GPIO_Init+0x148>)
 8001646:	f001 feff 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2180      	movs	r1, #128	@ 0x80
 800164e:	482b      	ldr	r0, [pc, #172]	@ (80016fc <MX_GPIO_Init+0x14c>)
 8001650:	f001 fefa 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	210f      	movs	r1, #15
 8001658:	4829      	ldr	r0, [pc, #164]	@ (8001700 <MX_GPIO_Init+0x150>)
 800165a:	f001 fef5 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800165e:	2310      	movs	r3, #16
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	481f      	ldr	r0, [pc, #124]	@ (80016f4 <MX_GPIO_Init+0x144>)
 8001676:	f001 fd33 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 800167a:	2303      	movs	r3, #3
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4819      	ldr	r0, [pc, #100]	@ (80016f8 <MX_GPIO_Init+0x148>)
 8001692:	f001 fd25 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_LED_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4813      	ldr	r0, [pc, #76]	@ (80016fc <MX_GPIO_Init+0x14c>)
 80016ae:	f001 fd17 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 80016b2:	230f      	movs	r3, #15
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480d      	ldr	r0, [pc, #52]	@ (8001700 <MX_GPIO_Init+0x150>)
 80016ca:	f001 fd09 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80016ce:	23f0      	movs	r3, #240	@ 0xf0
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	@ (8001700 <MX_GPIO_Init+0x150>)
 80016e2:	f001 fcfd 	bl	80030e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40020800 	.word	0x40020800
 8001700:	40020c00 	.word	0x40020c00

08001704 <StartInputHalTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartInputHalTask(void const * argument)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char cCurrent;
  /* Infinite loop */
  for(;;) // O loop infinito de uma tarefa RTOS é "for(;;)"
  {
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 800170c:	f7ff fd1c 	bl	8001148 <KEYPAD_Scan>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
    if(cCurrent != '\0')
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <StartInputHalTask+0x1c>
    {
      keyPressed = cCurrent;
 800171a:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <StartInputHalTask+0x2c>)
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	7013      	strb	r3, [r2, #0]
    }
    TCS3472_ReadData(&hi2c1, &colorData);
 8001720:	4904      	ldr	r1, [pc, #16]	@ (8001734 <StartInputHalTask+0x30>)
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <StartInputHalTask+0x34>)
 8001724:	f7ff fb1b 	bl	8000d5e <TCS3472_ReadData>
    osDelay(50);
 8001728:	2032      	movs	r0, #50	@ 0x32
 800172a:	f004 feb4 	bl	8006496 <osDelay>
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 800172e:	e7ed      	b.n	800170c <StartInputHalTask+0x8>
 8001730:	2000046c 	.word	0x2000046c
 8001734:	20000488 	.word	0x20000488
 8001738:	20000368 	.word	0x20000368

0800173c <StartGameTask>:
  }
}

void StartGameTask(void const * argument)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  char cLocalKeyPressed;
  for(;;)
  {
    cLocalKeyPressed = NONE_KEY;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
    
    osMutexWait(gameMutexHandle, osWaitForever);
 8001748:	4baf      	ldr	r3, [pc, #700]	@ (8001a08 <StartGameTask+0x2cc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	4618      	mov	r0, r3
 8001752:	f004 fecd 	bl	80064f0 <osMutexWait>
    if (keyPressed != NONE_KEY) {
 8001756:	4bad      	ldr	r3, [pc, #692]	@ (8001a0c <StartGameTask+0x2d0>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <StartGameTask+0x30>
      cLocalKeyPressed = keyPressed;
 8001760:	4baa      	ldr	r3, [pc, #680]	@ (8001a0c <StartGameTask+0x2d0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	73fb      	strb	r3, [r7, #15]
      keyPressed = NONE_KEY; 
 8001766:	4ba9      	ldr	r3, [pc, #676]	@ (8001a0c <StartGameTask+0x2d0>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 800176c:	4ba6      	ldr	r3, [pc, #664]	@ (8001a08 <StartGameTask+0x2cc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f004 ff0b 	bl	800658c <osMutexRelease>
    
    if (cLocalKeyPressed != NONE_KEY)
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8273 	beq.w	8001c64 <StartGameTask+0x528>
    {
      osMutexWait(gameMutexHandle, osWaitForever);
 800177e:	4ba2      	ldr	r3, [pc, #648]	@ (8001a08 <StartGameTask+0x2cc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f04f 31ff 	mov.w	r1, #4294967295
 8001786:	4618      	mov	r0, r3
 8001788:	f004 feb2 	bl	80064f0 <osMutexWait>
      switch(eCurrentState)
 800178c:	4ba0      	ldr	r3, [pc, #640]	@ (8001a10 <StartGameTask+0x2d4>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b05      	cmp	r3, #5
 8001794:	f200 8255 	bhi.w	8001c42 <StartGameTask+0x506>
 8001798:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <StartGameTask+0x64>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017b9 	.word	0x080017b9
 80017a4:	080017e1 	.word	0x080017e1
 80017a8:	080018b5 	.word	0x080018b5
 80017ac:	08001a39 	.word	0x08001a39
 80017b0:	08001bb1 	.word	0x08001bb1
 80017b4:	08001c2f 	.word	0x08001c2f
      {
        case eInitGame:
        {
          eUserPlayer.u8HeartPoints = 100;
 80017b8:	4b96      	ldr	r3, [pc, #600]	@ (8001a14 <StartGameTask+0x2d8>)
 80017ba:	2264      	movs	r2, #100	@ 0x64
 80017bc:	701a      	strb	r2, [r3, #0]
          eCpuPlayer.u8HeartPoints = 100;
 80017be:	4b96      	ldr	r3, [pc, #600]	@ (8001a18 <StartGameTask+0x2dc>)
 80017c0:	2264      	movs	r2, #100	@ 0x64
 80017c2:	701a      	strb	r2, [r3, #0]
          if(cLocalKeyPressed == CONFIRM_KEY)
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80017c8:	f040 8242 	bne.w	8001c50 <StartGameTask+0x514>
          {
            eCurrentState = eDificultSelect;
 80017cc:	4b90      	ldr	r3, [pc, #576]	@ (8001a10 <StartGameTask+0x2d4>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
            selectedOption = 0;
 80017d2:	4b92      	ldr	r3, [pc, #584]	@ (8001a1c <StartGameTask+0x2e0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
            u8CleanScreen = TRUE;
 80017d8:	4b91      	ldr	r3, [pc, #580]	@ (8001a20 <StartGameTask+0x2e4>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
            }
          break;
 80017de:	e237      	b.n	8001c50 <StartGameTask+0x514>
        }
        case eDificultSelect:
        {
          switch(cLocalKeyPressed)
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	3b23      	subs	r3, #35	@ 0x23
 80017e4:	2b15      	cmp	r3, #21
 80017e6:	d863      	bhi.n	80018b0 <StartGameTask+0x174>
 80017e8:	a201      	add	r2, pc, #4	@ (adr r2, 80017f0 <StartGameTask+0xb4>)
 80017ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ee:	bf00      	nop
 80017f0:	08001885 	.word	0x08001885
 80017f4:	080018b1 	.word	0x080018b1
 80017f8:	080018b1 	.word	0x080018b1
 80017fc:	080018b1 	.word	0x080018b1
 8001800:	080018b1 	.word	0x080018b1
 8001804:	080018b1 	.word	0x080018b1
 8001808:	080018b1 	.word	0x080018b1
 800180c:	08001893 	.word	0x08001893
 8001810:	080018b1 	.word	0x080018b1
 8001814:	080018b1 	.word	0x080018b1
 8001818:	080018b1 	.word	0x080018b1
 800181c:	080018b1 	.word	0x080018b1
 8001820:	080018b1 	.word	0x080018b1
 8001824:	080018b1 	.word	0x080018b1
 8001828:	080018b1 	.word	0x080018b1
 800182c:	08001867 	.word	0x08001867
 8001830:	080018b1 	.word	0x080018b1
 8001834:	080018b1 	.word	0x080018b1
 8001838:	080018b1 	.word	0x080018b1
 800183c:	080018b1 	.word	0x080018b1
 8001840:	080018b1 	.word	0x080018b1
 8001844:	08001849 	.word	0x08001849
          {
            case UP_KEY:
            {
              selectedOption = (selectedOption < MENU_OPTIONS_DIFFICULTY - 1) ? selectedOption + 1 : 0;
 8001848:	4b74      	ldr	r3, [pc, #464]	@ (8001a1c <StartGameTask+0x2e0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	dc03      	bgt.n	8001858 <StartGameTask+0x11c>
 8001850:	4b72      	ldr	r3, [pc, #456]	@ (8001a1c <StartGameTask+0x2e0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	e000      	b.n	800185a <StartGameTask+0x11e>
 8001858:	2300      	movs	r3, #0
 800185a:	4a70      	ldr	r2, [pc, #448]	@ (8001a1c <StartGameTask+0x2e0>)
 800185c:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800185e:	4b70      	ldr	r3, [pc, #448]	@ (8001a20 <StartGameTask+0x2e4>)
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
              break;
 8001864:	e025      	b.n	80018b2 <StartGameTask+0x176>
  }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_DIFFICULTY - 1;
 8001866:	4b6d      	ldr	r3, [pc, #436]	@ (8001a1c <StartGameTask+0x2e0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	dd03      	ble.n	8001876 <StartGameTask+0x13a>
 800186e:	4b6b      	ldr	r3, [pc, #428]	@ (8001a1c <StartGameTask+0x2e0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	e000      	b.n	8001878 <StartGameTask+0x13c>
 8001876:	2302      	movs	r3, #2
 8001878:	4a68      	ldr	r2, [pc, #416]	@ (8001a1c <StartGameTask+0x2e0>)
 800187a:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800187c:	4b68      	ldr	r3, [pc, #416]	@ (8001a20 <StartGameTask+0x2e4>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
              break;
 8001882:	e016      	b.n	80018b2 <StartGameTask+0x176>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8001884:	4b66      	ldr	r3, [pc, #408]	@ (8001a20 <StartGameTask+0x2e4>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
              eCurrentState = eInitGame;
 800188a:	4b61      	ldr	r3, [pc, #388]	@ (8001a10 <StartGameTask+0x2d4>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
              break;
 8001890:	e00f      	b.n	80018b2 <StartGameTask+0x176>
            }
            case CONFIRM_KEY:
            {
              selectedDifficulty = (EDificult)selectedOption;
 8001892:	4b62      	ldr	r3, [pc, #392]	@ (8001a1c <StartGameTask+0x2e0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b62      	ldr	r3, [pc, #392]	@ (8001a24 <StartGameTask+0x2e8>)
 800189a:	701a      	strb	r2, [r3, #0]
              eCurrentState = ePersonaSelect;
 800189c:	4b5c      	ldr	r3, [pc, #368]	@ (8001a10 <StartGameTask+0x2d4>)
 800189e:	2202      	movs	r2, #2
 80018a0:	701a      	strb	r2, [r3, #0]
              selectedOption = FALSE; // Reseta para o próximo menu
 80018a2:	4b5e      	ldr	r3, [pc, #376]	@ (8001a1c <StartGameTask+0x2e0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80018a8:	4b5d      	ldr	r3, [pc, #372]	@ (8001a20 <StartGameTask+0x2e4>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
              break;
 80018ae:	e000      	b.n	80018b2 <StartGameTask+0x176>
            }
            default:
            {
              break;
 80018b0:	bf00      	nop
            }
          }
          break;
 80018b2:	e1d2      	b.n	8001c5a <StartGameTask+0x51e>
        }
        case ePersonaSelect:
        {
          switch(cLocalKeyPressed)
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	3b23      	subs	r3, #35	@ 0x23
 80018b8:	2b15      	cmp	r3, #21
 80018ba:	f200 80a2 	bhi.w	8001a02 <StartGameTask+0x2c6>
 80018be:	a201      	add	r2, pc, #4	@ (adr r2, 80018c4 <StartGameTask+0x188>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001a03 	.word	0x08001a03
 80018cc:	08001a03 	.word	0x08001a03
 80018d0:	08001a03 	.word	0x08001a03
 80018d4:	08001a03 	.word	0x08001a03
 80018d8:	08001a03 	.word	0x08001a03
 80018dc:	08001a03 	.word	0x08001a03
 80018e0:	08001967 	.word	0x08001967
 80018e4:	08001a03 	.word	0x08001a03
 80018e8:	08001a03 	.word	0x08001a03
 80018ec:	08001a03 	.word	0x08001a03
 80018f0:	08001a03 	.word	0x08001a03
 80018f4:	08001a03 	.word	0x08001a03
 80018f8:	08001a03 	.word	0x08001a03
 80018fc:	08001a03 	.word	0x08001a03
 8001900:	0800193b 	.word	0x0800193b
 8001904:	08001a03 	.word	0x08001a03
 8001908:	08001a03 	.word	0x08001a03
 800190c:	08001a03 	.word	0x08001a03
 8001910:	08001a03 	.word	0x08001a03
 8001914:	08001a03 	.word	0x08001a03
 8001918:	0800191d 	.word	0x0800191d
          {
            case UP_KEY:
            {                  
              selectedOption = (selectedOption < MENU_OPTIONS_PERSONA - 1) ? selectedOption + 1 : 0;
 800191c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a1c <StartGameTask+0x2e0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b03      	cmp	r3, #3
 8001922:	dc03      	bgt.n	800192c <StartGameTask+0x1f0>
 8001924:	4b3d      	ldr	r3, [pc, #244]	@ (8001a1c <StartGameTask+0x2e0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	e000      	b.n	800192e <StartGameTask+0x1f2>
 800192c:	2300      	movs	r3, #0
 800192e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a1c <StartGameTask+0x2e0>)
 8001930:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8001932:	4b3b      	ldr	r3, [pc, #236]	@ (8001a20 <StartGameTask+0x2e4>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
              break;
 8001938:	e064      	b.n	8001a04 <StartGameTask+0x2c8>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_PERSONA - 1;
 800193a:	4b38      	ldr	r3, [pc, #224]	@ (8001a1c <StartGameTask+0x2e0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	dd03      	ble.n	800194a <StartGameTask+0x20e>
 8001942:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <StartGameTask+0x2e0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3b01      	subs	r3, #1
 8001948:	e000      	b.n	800194c <StartGameTask+0x210>
 800194a:	2304      	movs	r3, #4
 800194c:	4a33      	ldr	r2, [pc, #204]	@ (8001a1c <StartGameTask+0x2e0>)
 800194e:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8001950:	4b33      	ldr	r3, [pc, #204]	@ (8001a20 <StartGameTask+0x2e4>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
              break;
 8001956:	e055      	b.n	8001a04 <StartGameTask+0x2c8>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8001958:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <StartGameTask+0x2e4>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
              eCurrentState = eDificultSelect;
 800195e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a10 <StartGameTask+0x2d4>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
              break;
 8001964:	e04e      	b.n	8001a04 <StartGameTask+0x2c8>
            }
            case CONFIRM_KEY:
            {
              eUserPlayer.ePersonaElemental = (EElemental)selectedOption;
 8001966:	4b2d      	ldr	r3, [pc, #180]	@ (8001a1c <StartGameTask+0x2e0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <StartGameTask+0x2d8>)
 800196e:	705a      	strb	r2, [r3, #1]
              eCurrentState = eBattleInit;
 8001970:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <StartGameTask+0x2d4>)
 8001972:	2203      	movs	r2, #3
 8001974:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001976:	4b2a      	ldr	r3, [pc, #168]	@ (8001a20 <StartGameTask+0x2e4>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0;     // Zera o contador de ataques
 800197c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a28 <StartGameTask+0x2ec>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;   // Inicia com a primeira opção (Fogo) pré-selecionada
 8001982:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <StartGameTask+0x2e0>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 8001988:	2204      	movs	r2, #4
 800198a:	2100      	movs	r1, #0
 800198c:	4827      	ldr	r0, [pc, #156]	@ (8001a2c <StartGameTask+0x2f0>)
 800198e:	f007 fa96 	bl	8008ebe <memset>
              memset((void*)eCpuPlayer.eAttackSequential, 0, sizeof(eCpuPlayer.eAttackSequential));
 8001992:	2204      	movs	r2, #4
 8001994:	2100      	movs	r1, #0
 8001996:	4826      	ldr	r0, [pc, #152]	@ (8001a30 <StartGameTask+0x2f4>)
 8001998:	f007 fa91 	bl	8008ebe <memset>

              srand(HAL_GetTick()); 
 800199c:	f001 f838 	bl	8002a10 <HAL_GetTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f007 f8f8 	bl	8008b98 <srand>
              eCpuPlayer.ePersonaElemental = (rand() % 6);
 80019a8:	f007 f924 	bl	8008bf4 <rand>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <StartGameTask+0x2f8>)
 80019b0:	fb83 3102 	smull	r3, r1, r3, r2
 80019b4:	17d3      	asrs	r3, r2, #31
 80019b6:	1ac9      	subs	r1, r1, r3
 80019b8:	460b      	mov	r3, r1
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	440b      	add	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	1ad1      	subs	r1, r2, r3
 80019c2:	b2ca      	uxtb	r2, r1
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <StartGameTask+0x2dc>)
 80019c6:	705a      	strb	r2, [r3, #1]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	73bb      	strb	r3, [r7, #14]
 80019cc:	e015      	b.n	80019fa <StartGameTask+0x2be>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6); 
 80019ce:	f007 f911 	bl	8008bf4 <rand>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <StartGameTask+0x2f8>)
 80019d6:	fb83 3102 	smull	r3, r1, r3, r2
 80019da:	17d3      	asrs	r3, r2, #31
 80019dc:	1ac9      	subs	r1, r1, r3
 80019de:	460b      	mov	r3, r1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	440b      	add	r3, r1
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	1ad1      	subs	r1, r2, r3
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	b2c9      	uxtb	r1, r1
 80019ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <StartGameTask+0x2dc>)
 80019ee:	4413      	add	r3, r2
 80019f0:	460a      	mov	r2, r1
 80019f2:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	3301      	adds	r3, #1
 80019f8:	73bb      	strb	r3, [r7, #14]
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d9e6      	bls.n	80019ce <StartGameTask+0x292>
              }
              break;
 8001a00:	e000      	b.n	8001a04 <StartGameTask+0x2c8>
            }
            default:
            {
              break;
 8001a02:	bf00      	nop
            }
          }
          break;
 8001a04:	e129      	b.n	8001c5a <StartGameTask+0x51e>
 8001a06:	bf00      	nop
 8001a08:	20000468 	.word	0x20000468
 8001a0c:	2000046c 	.word	0x2000046c
 8001a10:	2000046d 	.word	0x2000046d
 8001a14:	20000478 	.word	0x20000478
 8001a18:	20000480 	.word	0x20000480
 8001a1c:	20000470 	.word	0x20000470
 8001a20:	20000048 	.word	0x20000048
 8001a24:	20000474 	.word	0x20000474
 8001a28:	20000490 	.word	0x20000490
 8001a2c:	2000047a 	.word	0x2000047a
 8001a30:	20000482 	.word	0x20000482
 8001a34:	2aaaaaab 	.word	0x2aaaaaab
        }
        case eBattleInit:
        {
          switch (cLocalKeyPressed)
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	3b23      	subs	r3, #35	@ 0x23
 8001a3c:	2b21      	cmp	r3, #33	@ 0x21
 8001a3e:	f200 80b5 	bhi.w	8001bac <StartGameTask+0x470>
 8001a42:	a201      	add	r2, pc, #4	@ (adr r2, 8001a48 <StartGameTask+0x30c>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001b9f 	.word	0x08001b9f
 8001a4c:	08001bad 	.word	0x08001bad
 8001a50:	08001bad 	.word	0x08001bad
 8001a54:	08001bad 	.word	0x08001bad
 8001a58:	08001bad 	.word	0x08001bad
 8001a5c:	08001bad 	.word	0x08001bad
 8001a60:	08001bad 	.word	0x08001bad
 8001a64:	08001b09 	.word	0x08001b09
 8001a68:	08001bad 	.word	0x08001bad
 8001a6c:	08001bad 	.word	0x08001bad
 8001a70:	08001bad 	.word	0x08001bad
 8001a74:	08001bad 	.word	0x08001bad
 8001a78:	08001bad 	.word	0x08001bad
 8001a7c:	08001bad 	.word	0x08001bad
 8001a80:	08001bad 	.word	0x08001bad
 8001a84:	08001bad 	.word	0x08001bad
 8001a88:	08001bad 	.word	0x08001bad
 8001a8c:	08001bad 	.word	0x08001bad
 8001a90:	08001bad 	.word	0x08001bad
 8001a94:	08001bad 	.word	0x08001bad
 8001a98:	08001bad 	.word	0x08001bad
 8001a9c:	08001bad 	.word	0x08001bad
 8001aa0:	08001bad 	.word	0x08001bad
 8001aa4:	08001bad 	.word	0x08001bad
 8001aa8:	08001bad 	.word	0x08001bad
 8001aac:	08001bad 	.word	0x08001bad
 8001ab0:	08001bad 	.word	0x08001bad
 8001ab4:	08001bad 	.word	0x08001bad
 8001ab8:	08001bad 	.word	0x08001bad
 8001abc:	08001bad 	.word	0x08001bad
 8001ac0:	08001ad1 	.word	0x08001ad1
 8001ac4:	08001adf 	.word	0x08001adf
 8001ac8:	08001aed 	.word	0x08001aed
 8001acc:	08001afb 	.word	0x08001afb
          {
            case FIRE_KEY:
            {
              selectedOption = 0;
 8001ad0:	4b66      	ldr	r3, [pc, #408]	@ (8001c6c <StartGameTask+0x530>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001ad6:	4b66      	ldr	r3, [pc, #408]	@ (8001c70 <StartGameTask+0x534>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
              break;
 8001adc:	e067      	b.n	8001bae <StartGameTask+0x472>
            }
            case WATER_KEY:
            {
              selectedOption = 1;
 8001ade:	4b63      	ldr	r3, [pc, #396]	@ (8001c6c <StartGameTask+0x530>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001ae4:	4b62      	ldr	r3, [pc, #392]	@ (8001c70 <StartGameTask+0x534>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
              break;
 8001aea:	e060      	b.n	8001bae <StartGameTask+0x472>
            }
            case AIR_KEY: 
            {
              selectedOption = 2;
 8001aec:	4b5f      	ldr	r3, [pc, #380]	@ (8001c6c <StartGameTask+0x530>)
 8001aee:	2202      	movs	r2, #2
 8001af0:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001af2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c70 <StartGameTask+0x534>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
              break;
 8001af8:	e059      	b.n	8001bae <StartGameTask+0x472>
            }
            case EARTH_KEY: 
            {
              selectedOption = 3;
 8001afa:	4b5c      	ldr	r3, [pc, #368]	@ (8001c6c <StartGameTask+0x530>)
 8001afc:	2203      	movs	r2, #3
 8001afe:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001b00:	4b5b      	ldr	r3, [pc, #364]	@ (8001c70 <StartGameTask+0x534>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
              break;
 8001b06:	e052      	b.n	8001bae <StartGameTask+0x472>
            }
            case CONFIRM_KEY:
            {
              switch(selectedOption)
 8001b08:	4b58      	ldr	r3, [pc, #352]	@ (8001c6c <StartGameTask+0x530>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d82f      	bhi.n	8001b70 <StartGameTask+0x434>
 8001b10:	a201      	add	r2, pc, #4	@ (adr r2, 8001b18 <StartGameTask+0x3dc>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b3b 	.word	0x08001b3b
 8001b20:	08001b4d 	.word	0x08001b4d
 8001b24:	08001b5f 	.word	0x08001b5f
              {
                  case 0: eUserPlayer.eAttackSequential[u8ContAttack] = eRed;    break;
 8001b28:	4b52      	ldr	r3, [pc, #328]	@ (8001c74 <StartGameTask+0x538>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b51      	ldr	r3, [pc, #324]	@ (8001c78 <StartGameTask+0x53c>)
 8001b32:	4413      	add	r3, r2
 8001b34:	2200      	movs	r2, #0
 8001b36:	709a      	strb	r2, [r3, #2]
 8001b38:	e01a      	b.n	8001b70 <StartGameTask+0x434>
                  case 1: eUserPlayer.eAttackSequential[u8ContAttack] = eBlue;   break;
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c74 <StartGameTask+0x538>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b4d      	ldr	r3, [pc, #308]	@ (8001c78 <StartGameTask+0x53c>)
 8001b44:	4413      	add	r3, r2
 8001b46:	2201      	movs	r2, #1
 8001b48:	709a      	strb	r2, [r3, #2]
 8001b4a:	e011      	b.n	8001b70 <StartGameTask+0x434>
                  case 2: eUserPlayer.eAttackSequential[u8ContAttack] = eGreen;  break;
 8001b4c:	4b49      	ldr	r3, [pc, #292]	@ (8001c74 <StartGameTask+0x538>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b48      	ldr	r3, [pc, #288]	@ (8001c78 <StartGameTask+0x53c>)
 8001b56:	4413      	add	r3, r2
 8001b58:	2202      	movs	r2, #2
 8001b5a:	709a      	strb	r2, [r3, #2]
 8001b5c:	e008      	b.n	8001b70 <StartGameTask+0x434>
                  case 3: eUserPlayer.eAttackSequential[u8ContAttack] = eYellow; break;
 8001b5e:	4b45      	ldr	r3, [pc, #276]	@ (8001c74 <StartGameTask+0x538>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b44      	ldr	r3, [pc, #272]	@ (8001c78 <StartGameTask+0x53c>)
 8001b68:	4413      	add	r3, r2
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	709a      	strb	r2, [r3, #2]
 8001b6e:	bf00      	nop
              }
              
              u8ContAttack++; 
 8001b70:	4b40      	ldr	r3, [pc, #256]	@ (8001c74 <StartGameTask+0x538>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c74 <StartGameTask+0x538>)
 8001b7c:	701a      	strb	r2, [r3, #0]
              
              if (u8ContAttack >= ATTACKS_NUMBERS)
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <StartGameTask+0x538>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d906      	bls.n	8001b96 <StartGameTask+0x45a>
              {
                vInitBattle(&eUserPlayer, &eCpuPlayer);
 8001b88:	493c      	ldr	r1, [pc, #240]	@ (8001c7c <StartGameTask+0x540>)
 8001b8a:	483b      	ldr	r0, [pc, #236]	@ (8001c78 <StartGameTask+0x53c>)
 8001b8c:	f7ff f944 	bl	8000e18 <vInitBattle>
                eCurrentState = ePlayerTurn;
 8001b90:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <StartGameTask+0x544>)
 8001b92:	2204      	movs	r2, #4
 8001b94:	701a      	strb	r2, [r3, #0]
              }
              
              u8CleanScreen = TRUE;
 8001b96:	4b36      	ldr	r3, [pc, #216]	@ (8001c70 <StartGameTask+0x534>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
              break;
 8001b9c:	e007      	b.n	8001bae <StartGameTask+0x472>
            }
            case BACK_KEY:
            {
              eCurrentState = ePersonaSelect;
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <StartGameTask+0x544>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001ba4:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <StartGameTask+0x534>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
              break;
 8001baa:	e000      	b.n	8001bae <StartGameTask+0x472>
            }
            default:
            {
              break;
 8001bac:	bf00      	nop
            }
          }
          break;
 8001bae:	e054      	b.n	8001c5a <StartGameTask+0x51e>
        }
        case ePlayerTurn:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bb4:	d14e      	bne.n	8001c54 <StartGameTask+0x518>
          {            
            if (eUserPlayer.u8HeartPoints == 0 || eCpuPlayer.u8HeartPoints == 0)
 8001bb6:	4b30      	ldr	r3, [pc, #192]	@ (8001c78 <StartGameTask+0x53c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <StartGameTask+0x48e>
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c7c <StartGameTask+0x540>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <StartGameTask+0x496>
            {
              eCurrentState = eEndGame; 
 8001bca:	4b2d      	ldr	r3, [pc, #180]	@ (8001c80 <StartGameTask+0x544>)
 8001bcc:	2205      	movs	r2, #5
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e029      	b.n	8001c26 <StartGameTask+0x4ea>
            }
            else
            {
              // Ninguém perdeu, volta para selecionar novos ataques
              eCurrentState = eBattleInit;
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <StartGameTask+0x544>)
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0; // Prepara para o novo round
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <StartGameTask+0x538>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;
 8001bde:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <StartGameTask+0x530>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 8001be4:	2204      	movs	r2, #4
 8001be6:	2100      	movs	r1, #0
 8001be8:	4826      	ldr	r0, [pc, #152]	@ (8001c84 <StartGameTask+0x548>)
 8001bea:	f007 f968 	bl	8008ebe <memset>
              
              // Gera novos ataques para a CPU para o próximo round
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	737b      	strb	r3, [r7, #13]
 8001bf2:	e015      	b.n	8001c20 <StartGameTask+0x4e4>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6);
 8001bf4:	f006 fffe 	bl	8008bf4 <rand>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <StartGameTask+0x54c>)
 8001bfc:	fb83 3102 	smull	r3, r1, r3, r2
 8001c00:	17d3      	asrs	r3, r2, #31
 8001c02:	1ac9      	subs	r1, r1, r3
 8001c04:	460b      	mov	r3, r1
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	440b      	add	r3, r1
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	1ad1      	subs	r1, r2, r3
 8001c0e:	7b7b      	ldrb	r3, [r7, #13]
 8001c10:	b2c9      	uxtb	r1, r1
 8001c12:	4a1a      	ldr	r2, [pc, #104]	@ (8001c7c <StartGameTask+0x540>)
 8001c14:	4413      	add	r3, r2
 8001c16:	460a      	mov	r2, r1
 8001c18:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001c1a:	7b7b      	ldrb	r3, [r7, #13]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	737b      	strb	r3, [r7, #13]
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d9e6      	bls.n	8001bf4 <StartGameTask+0x4b8>
              }
            }
            u8CleanScreen = TRUE;
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <StartGameTask+0x534>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001c2c:	e012      	b.n	8001c54 <StartGameTask+0x518>
        }
        case eEndGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c32:	d111      	bne.n	8001c58 <StartGameTask+0x51c>
          {
            eCurrentState = eInitGame;
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <StartGameTask+0x544>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <StartGameTask+0x534>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001c40:	e00a      	b.n	8001c58 <StartGameTask+0x51c>
        }
        default:
        {
          // Estado desconhecido, volta para o início por segurança
          eCurrentState = eInitGame;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <StartGameTask+0x544>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
          u8CleanScreen = TRUE;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <StartGameTask+0x534>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
          break;
 8001c4e:	e004      	b.n	8001c5a <StartGameTask+0x51e>
          break;
 8001c50:	bf00      	nop
 8001c52:	e002      	b.n	8001c5a <StartGameTask+0x51e>
          break;
 8001c54:	bf00      	nop
 8001c56:	e000      	b.n	8001c5a <StartGameTask+0x51e>
          break;
 8001c58:	bf00      	nop
        }
      }
      osMutexRelease(gameMutexHandle);
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <StartGameTask+0x550>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 fc94 	bl	800658c <osMutexRelease>
    }
    osDelay(50);
 8001c64:	2032      	movs	r0, #50	@ 0x32
 8001c66:	f004 fc16 	bl	8006496 <osDelay>
    cLocalKeyPressed = NONE_KEY;
 8001c6a:	e56b      	b.n	8001744 <StartGameTask+0x8>
 8001c6c:	20000470 	.word	0x20000470
 8001c70:	20000048 	.word	0x20000048
 8001c74:	20000490 	.word	0x20000490
 8001c78:	20000478 	.word	0x20000478
 8001c7c:	20000480 	.word	0x20000480
 8001c80:	2000046d 	.word	0x2000046d
 8001c84:	2000047a 	.word	0x2000047a
 8001c88:	2aaaaaab 	.word	0x2aaaaaab
 8001c8c:	20000468 	.word	0x20000468

08001c90 <StartDisplayTask>:
  }
}

void StartDisplayTask(void const * argument)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b094      	sub	sp, #80	@ 0x50
 8001c94:	af04      	add	r7, sp, #16
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  char buffer[30];
  uint8_t u8RedrawScreen = FALSE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  for(;;)
  {
    osMutexWait(gameMutexHandle, osWaitForever);
 8001c9e:	4bab      	ldr	r3, [pc, #684]	@ (8001f4c <StartDisplayTask+0x2bc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fc22 	bl	80064f0 <osMutexWait>
    if (TRUE == u8CleanScreen) {
 8001cac:	4ba8      	ldr	r3, [pc, #672]	@ (8001f50 <StartDisplayTask+0x2c0>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d105      	bne.n	8001cc2 <StartDisplayTask+0x32>
        u8RedrawScreen = TRUE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        u8CleanScreen = FALSE;
 8001cbc:	4ba4      	ldr	r3, [pc, #656]	@ (8001f50 <StartDisplayTask+0x2c0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 8001cc2:	4ba2      	ldr	r3, [pc, #648]	@ (8001f4c <StartDisplayTask+0x2bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 fc60 	bl	800658c <osMutexRelease>



    if(TRUE == u8RedrawScreen)
 8001ccc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	f040 838a 	bne.w	80023ea <StartDisplayTask+0x75a>
    {
      ClearScreen();
 8001cd6:	f7ff f9bd 	bl	8001054 <ClearScreen>

      switch(eCurrentState)
 8001cda:	4b9e      	ldr	r3, [pc, #632]	@ (8001f54 <StartDisplayTask+0x2c4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	f200 8370 	bhi.w	80023c6 <StartDisplayTask+0x736>
 8001ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cec <StartDisplayTask+0x5c>)
 8001ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cec:	08001d05 	.word	0x08001d05
 8001cf0:	08001d1f 	.word	0x08001d1f
 8001cf4:	08001d2f 	.word	0x08001d2f
 8001cf8:	08001d3f 	.word	0x08001d3f
 8001cfc:	080020b7 	.word	0x080020b7
 8001d00:	080022fd 	.word	0x080022fd
      {
          case eInitGame:
          {
            // ILI9488_WriteString(5, 10, "ElementalCube!", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
            // ILI9488_WriteString(5, 30, "Pressione *", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
            ILI9488_DrawImage_RGB666(100, 10, Logo300_map.width, Logo300_map.height, Logo300_map.pixel_data);
 8001d04:	4b94      	ldr	r3, [pc, #592]	@ (8001f58 <StartDisplayTask+0x2c8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b93      	ldr	r3, [pc, #588]	@ (8001f58 <StartDisplayTask+0x2c8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4992      	ldr	r1, [pc, #584]	@ (8001f5c <StartDisplayTask+0x2cc>)
 8001d12:	9100      	str	r1, [sp, #0]
 8001d14:	210a      	movs	r1, #10
 8001d16:	2064      	movs	r0, #100	@ 0x64
 8001d18:	f7fe ff61 	bl	8000bde <ILI9488_DrawImage_RGB666>
            // sprintf(buffer, "R:%04u G:%04u", colorData.red, colorData.green);
            // ILI9488_WriteString(10, 200, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
            // sprintf(buffer, "B:%04u C:%04u", colorData.blue, colorData.clear);
            // ILI9488_WriteString(10, 220, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
            break;
 8001d1c:	e362      	b.n	80023e4 <StartDisplayTask+0x754>
          }
          case eDificultSelect:
          {
            DrawMenu("Selecione Dificuldade", difficultyOptions, MENU_OPTIONS_DIFFICULTY, selectedOption);
 8001d1e:	4b90      	ldr	r3, [pc, #576]	@ (8001f60 <StartDisplayTask+0x2d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2203      	movs	r2, #3
 8001d24:	498f      	ldr	r1, [pc, #572]	@ (8001f64 <StartDisplayTask+0x2d4>)
 8001d26:	4890      	ldr	r0, [pc, #576]	@ (8001f68 <StartDisplayTask+0x2d8>)
 8001d28:	f7ff f9a4 	bl	8001074 <DrawMenu>
            break;
 8001d2c:	e35a      	b.n	80023e4 <StartDisplayTask+0x754>
          }
          case ePersonaSelect:
          {
            DrawMenu("Selecione Personagem", personaOptions, MENU_OPTIONS_PERSONA, selectedOption);
 8001d2e:	4b8c      	ldr	r3, [pc, #560]	@ (8001f60 <StartDisplayTask+0x2d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2205      	movs	r2, #5
 8001d34:	498d      	ldr	r1, [pc, #564]	@ (8001f6c <StartDisplayTask+0x2dc>)
 8001d36:	488e      	ldr	r0, [pc, #568]	@ (8001f70 <StartDisplayTask+0x2e0>)
 8001d38:	f7ff f99c 	bl	8001074 <DrawMenu>
            break;
 8001d3c:	e352      	b.n	80023e4 <StartDisplayTask+0x754>
          }
          case eBattleInit:
          {
            sprintf(buffer, "Selecione o %d ataque", (u8ContAttack + 1));
 8001d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f74 <StartDisplayTask+0x2e4>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	498b      	ldr	r1, [pc, #556]	@ (8001f78 <StartDisplayTask+0x2e8>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f007 f851 	bl	8008df4 <siprintf>
            ILI9488_WriteString(10, 15, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001d52:	4b8a      	ldr	r3, [pc, #552]	@ (8001f7c <StartDisplayTask+0x2ec>)
 8001d54:	f107 0108 	add.w	r1, r7, #8
 8001d58:	2200      	movs	r2, #0
 8001d5a:	9202      	str	r2, [sp, #8]
 8001d5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d60:	9201      	str	r2, [sp, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	460a      	mov	r2, r1
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	200a      	movs	r0, #10
 8001d6e:	f7fe fed7 	bl	8000b20 <ILI9488_WriteString>

            uint16_t colorFogo  = (selectedOption == 0) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001d72:	4b7b      	ldr	r3, [pc, #492]	@ (8001f60 <StartDisplayTask+0x2d0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <StartDisplayTask+0xf0>
 8001d7a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d7e:	e001      	b.n	8001d84 <StartDisplayTask+0xf4>
 8001d80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d84:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            uint16_t colorAgua  = (selectedOption == 1) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001d86:	4b76      	ldr	r3, [pc, #472]	@ (8001f60 <StartDisplayTask+0x2d0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <StartDisplayTask+0x104>
 8001d8e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d92:	e001      	b.n	8001d98 <StartDisplayTask+0x108>
 8001d94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d98:	857b      	strh	r3, [r7, #42]	@ 0x2a
            uint16_t colorAr    = (selectedOption == 2) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001d9a:	4b71      	ldr	r3, [pc, #452]	@ (8001f60 <StartDisplayTask+0x2d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d102      	bne.n	8001da8 <StartDisplayTask+0x118>
 8001da2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001da6:	e001      	b.n	8001dac <StartDisplayTask+0x11c>
 8001da8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dac:	853b      	strh	r3, [r7, #40]	@ 0x28
            uint16_t colorTerra = (selectedOption == 3) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001dae:	4b6c      	ldr	r3, [pc, #432]	@ (8001f60 <StartDisplayTask+0x2d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d102      	bne.n	8001dbc <StartDisplayTask+0x12c>
 8001db6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001dba:	e001      	b.n	8001dc0 <StartDisplayTask+0x130>
 8001dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dc0:	84fb      	strh	r3, [r7, #38]	@ 0x26

            ILI9488_FillRectangle(5, 50, 20, 20, ILI9488_RED);
 8001dc2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2314      	movs	r3, #20
 8001dca:	2214      	movs	r2, #20
 8001dcc:	2132      	movs	r1, #50	@ 0x32
 8001dce:	2005      	movs	r0, #5
 8001dd0:	f7fe fe06 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(40, 55, "A - Fogo", Font_7x10, colorFogo, ILI9488_BLACK);
 8001dd4:	4b69      	ldr	r3, [pc, #420]	@ (8001f7c <StartDisplayTask+0x2ec>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	9202      	str	r2, [sp, #8]
 8001dda:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001ddc:	9201      	str	r2, [sp, #4]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	9200      	str	r2, [sp, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a66      	ldr	r2, [pc, #408]	@ (8001f80 <StartDisplayTask+0x2f0>)
 8001de6:	2137      	movs	r1, #55	@ 0x37
 8001de8:	2028      	movs	r0, #40	@ 0x28
 8001dea:	f7fe fe99 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_FillRectangle(5, 85, 20, 20, ILI9488_BLUE);
 8001dee:	231f      	movs	r3, #31
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2314      	movs	r3, #20
 8001df4:	2214      	movs	r2, #20
 8001df6:	2155      	movs	r1, #85	@ 0x55
 8001df8:	2005      	movs	r0, #5
 8001dfa:	f7fe fdf1 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(40, 90, "B - Agua", Font_7x10, colorAgua, ILI9488_BLACK);
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8001f7c <StartDisplayTask+0x2ec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	9202      	str	r2, [sp, #8]
 8001e04:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	9200      	str	r2, [sp, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a5d      	ldr	r2, [pc, #372]	@ (8001f84 <StartDisplayTask+0x2f4>)
 8001e10:	215a      	movs	r1, #90	@ 0x5a
 8001e12:	2028      	movs	r0, #40	@ 0x28
 8001e14:	f7fe fe84 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_FillRectangle(200, 50, 25, 25, ILI9488_CYAN);
 8001e18:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2319      	movs	r3, #25
 8001e20:	2219      	movs	r2, #25
 8001e22:	2132      	movs	r1, #50	@ 0x32
 8001e24:	20c8      	movs	r0, #200	@ 0xc8
 8001e26:	f7fe fddb 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(235, 55, "C - Ar", Font_7x10, colorAr, ILI9488_BLACK);
 8001e2a:	4b54      	ldr	r3, [pc, #336]	@ (8001f7c <StartDisplayTask+0x2ec>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	9202      	str	r2, [sp, #8]
 8001e30:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001e32:	9201      	str	r2, [sp, #4]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	9200      	str	r2, [sp, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a53      	ldr	r2, [pc, #332]	@ (8001f88 <StartDisplayTask+0x2f8>)
 8001e3c:	2137      	movs	r1, #55	@ 0x37
 8001e3e:	20eb      	movs	r0, #235	@ 0xeb
 8001e40:	f7fe fe6e 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_FillRectangle(200, 85, 25, 25, ILI9488_BROWN);
 8001e44:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2319      	movs	r3, #25
 8001e4c:	2219      	movs	r2, #25
 8001e4e:	2155      	movs	r1, #85	@ 0x55
 8001e50:	20c8      	movs	r0, #200	@ 0xc8
 8001e52:	f7fe fdc5 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(235, 90, "D - Terra", Font_7x10, colorTerra, ILI9488_BLACK);
 8001e56:	4b49      	ldr	r3, [pc, #292]	@ (8001f7c <StartDisplayTask+0x2ec>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	9202      	str	r2, [sp, #8]
 8001e5c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e5e:	9201      	str	r2, [sp, #4]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	9200      	str	r2, [sp, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a49      	ldr	r2, [pc, #292]	@ (8001f8c <StartDisplayTask+0x2fc>)
 8001e68:	215a      	movs	r1, #90	@ 0x5a
 8001e6a:	20eb      	movs	r0, #235	@ 0xeb
 8001e6c:	f7fe fe58 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(5, 110, "Player:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001e70:	4b42      	ldr	r3, [pc, #264]	@ (8001f7c <StartDisplayTask+0x2ec>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	9202      	str	r2, [sp, #8]
 8001e76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e7a:	9201      	str	r2, [sp, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	9200      	str	r2, [sp, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a43      	ldr	r2, [pc, #268]	@ (8001f90 <StartDisplayTask+0x300>)
 8001e84:	216e      	movs	r1, #110	@ 0x6e
 8001e86:	2005      	movs	r0, #5
 8001e88:	f7fe fe4a 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(5, 150, "CPU:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <StartDisplayTask+0x2ec>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	9202      	str	r2, [sp, #8]
 8001e92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e96:	9201      	str	r2, [sp, #4]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	9200      	str	r2, [sp, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f94 <StartDisplayTask+0x304>)
 8001ea0:	2196      	movs	r1, #150	@ 0x96
 8001ea2:	2005      	movs	r0, #5
 8001ea4:	f7fe fe3c 	bl	8000b20 <ILI9488_WriteString>

            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001eae:	e0a9      	b.n	8002004 <StartDisplayTask+0x374>
            {
              uint8_t showAttack = FALSE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
              if (selectedDifficulty == eDificultEasy) { showAttack = TRUE; }
 8001eb6:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <StartDisplayTask+0x308>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d103      	bne.n	8001ec8 <StartDisplayTask+0x238>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001ec6:	e00f      	b.n	8001ee8 <StartDisplayTask+0x258>
              else if (selectedDifficulty == eDificultMedium) { if (i == 0 || i == 2) { showAttack = TRUE; } }
 8001ec8:	4b33      	ldr	r3, [pc, #204]	@ (8001f98 <StartDisplayTask+0x308>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d10a      	bne.n	8001ee8 <StartDisplayTask+0x258>
 8001ed2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <StartDisplayTask+0x252>
 8001eda:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d102      	bne.n	8001ee8 <StartDisplayTask+0x258>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
              if(showAttack) {
 8001ee8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d06d      	beq.n	8001fcc <StartDisplayTask+0x33c>
                uint16_t attackColor = ILI9488_WHITE;
 8001ef0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef4:	877b      	strh	r3, [r7, #58]	@ 0x3a
                switch(eCpuPlayer.eAttackSequential[i]) {
 8001ef6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001efa:	4a28      	ldr	r2, [pc, #160]	@ (8001f9c <StartDisplayTask+0x30c>)
 8001efc:	4413      	add	r3, r2
 8001efe:	789b      	ldrb	r3, [r3, #2]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d850      	bhi.n	8001fa8 <StartDisplayTask+0x318>
 8001f06:	a201      	add	r2, pc, #4	@ (adr r2, 8001f0c <StartDisplayTask+0x27c>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f25 	.word	0x08001f25
 8001f10:	08001f2d 	.word	0x08001f2d
 8001f14:	08001f33 	.word	0x08001f33
 8001f18:	08001f3b 	.word	0x08001f3b
 8001f1c:	08001f43 	.word	0x08001f43
 8001f20:	08001fa1 	.word	0x08001fa1
                    case eRed:    attackColor = ILI9488_RED;   break;
 8001f24:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f28:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f2a:	e03d      	b.n	8001fa8 <StartDisplayTask+0x318>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 8001f2c:	231f      	movs	r3, #31
 8001f2e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f30:	e03a      	b.n	8001fa8 <StartDisplayTask+0x318>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 8001f32:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001f36:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f38:	e036      	b.n	8001fa8 <StartDisplayTask+0x318>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 8001f3a:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001f3e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f40:	e032      	b.n	8001fa8 <StartDisplayTask+0x318>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 8001f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f46:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f48:	e02e      	b.n	8001fa8 <StartDisplayTask+0x318>
 8001f4a:	bf00      	nop
 8001f4c:	20000468 	.word	0x20000468
 8001f50:	20000048 	.word	0x20000048
 8001f54:	2000046d 	.word	0x2000046d
 8001f58:	0800a260 	.word	0x0800a260
 8001f5c:	0800a270 	.word	0x0800a270
 8001f60:	20000470 	.word	0x20000470
 8001f64:	2000004c 	.word	0x2000004c
 8001f68:	0800a0f0 	.word	0x0800a0f0
 8001f6c:	20000058 	.word	0x20000058
 8001f70:	0800a108 	.word	0x0800a108
 8001f74:	20000490 	.word	0x20000490
 8001f78:	0800a120 	.word	0x0800a120
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	0800a138 	.word	0x0800a138
 8001f84:	0800a144 	.word	0x0800a144
 8001f88:	0800a150 	.word	0x0800a150
 8001f8c:	0800a158 	.word	0x0800a158
 8001f90:	0800a164 	.word	0x0800a164
 8001f94:	0800a16c 	.word	0x0800a16c
 8001f98:	20000474 	.word	0x20000474
 8001f9c:	20000480 	.word	0x20000480
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 8001fa0:	f246 330c 	movw	r3, #25356	@ 0x630c
 8001fa4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001fa6:	bf00      	nop
                }
                ILI9488_FillRectangle(5 + (i * 30), 160, 20, 20, attackColor);
 8001fa8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3305      	adds	r3, #5
 8001fba:	b298      	uxth	r0, r3
 8001fbc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2314      	movs	r3, #20
 8001fc2:	2214      	movs	r2, #20
 8001fc4:	21a0      	movs	r1, #160	@ 0xa0
 8001fc6:	f7fe fd0b 	bl	80009e0 <ILI9488_FillRectangle>
 8001fca:	e016      	b.n	8001ffa <StartDisplayTask+0x36a>
              } else {
                ILI9488_WriteString(5 + (i * 30), 160, "??", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001fcc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3305      	adds	r3, #5
 8001fde:	b298      	uxth	r0, r3
 8001fe0:	4ba5      	ldr	r3, [pc, #660]	@ (8002278 <StartDisplayTask+0x5e8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	9202      	str	r2, [sp, #8]
 8001fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fea:	9201      	str	r2, [sp, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	9200      	str	r2, [sp, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4aa2      	ldr	r2, [pc, #648]	@ (800227c <StartDisplayTask+0x5ec>)
 8001ff4:	21a0      	movs	r1, #160	@ 0xa0
 8001ff6:	f7fe fd93 	bl	8000b20 <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001ffa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001ffe:	3301      	adds	r3, #1
 8002000:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002004:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002008:	2b03      	cmp	r3, #3
 800200a:	f67f af51 	bls.w	8001eb0 <StartDisplayTask+0x220>
              }
            }
            for(uint8_t i = 0; i < u8ContAttack; i++) {
 800200e:	2300      	movs	r3, #0
 8002010:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8002014:	e047      	b.n	80020a6 <StartDisplayTask+0x416>
              uint16_t attackColor = ILI9488_WHITE;
 8002016:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800201a:	86fb      	strh	r3, [r7, #54]	@ 0x36
              switch(eUserPlayer.eAttackSequential[i]) {
 800201c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002020:	4a97      	ldr	r2, [pc, #604]	@ (8002280 <StartDisplayTask+0x5f0>)
 8002022:	4413      	add	r3, r2
 8002024:	789b      	ldrb	r3, [r3, #2]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b05      	cmp	r3, #5
 800202a:	d826      	bhi.n	800207a <StartDisplayTask+0x3ea>
 800202c:	a201      	add	r2, pc, #4	@ (adr r2, 8002034 <StartDisplayTask+0x3a4>)
 800202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002032:	bf00      	nop
 8002034:	0800204d 	.word	0x0800204d
 8002038:	08002055 	.word	0x08002055
 800203c:	0800205b 	.word	0x0800205b
 8002040:	08002063 	.word	0x08002063
 8002044:	0800206b 	.word	0x0800206b
 8002048:	08002073 	.word	0x08002073
                  case eRed:    attackColor = ILI9488_RED;   break;
 800204c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002050:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002052:	e012      	b.n	800207a <StartDisplayTask+0x3ea>
                  case eBlue:   attackColor = ILI9488_BLUE;  break;
 8002054:	231f      	movs	r3, #31
 8002056:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002058:	e00f      	b.n	800207a <StartDisplayTask+0x3ea>
                  case eGreen:  attackColor = ILI9488_CYAN;  break;
 800205a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800205e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002060:	e00b      	b.n	800207a <StartDisplayTask+0x3ea>
                  case eYellow: attackColor = ILI9488_BROWN; break;
 8002062:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8002066:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002068:	e007      	b.n	800207a <StartDisplayTask+0x3ea>
                  case eWhite:  attackColor = ILI9488_WHITE; break;
 800206a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800206e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002070:	e003      	b.n	800207a <StartDisplayTask+0x3ea>
                  case eBlack:  attackColor = ILI9488_GRAY;  break;
 8002072:	f246 330c 	movw	r3, #25356	@ 0x630c
 8002076:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002078:	bf00      	nop
              }
              ILI9488_FillRectangle(5 + (i * 30), 120, 20, 20, attackColor);
 800207a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	3305      	adds	r3, #5
 800208c:	b298      	uxth	r0, r3
 800208e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2314      	movs	r3, #20
 8002094:	2214      	movs	r2, #20
 8002096:	2178      	movs	r1, #120	@ 0x78
 8002098:	f7fe fca2 	bl	80009e0 <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < u8ContAttack; i++) {
 800209c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80020a0:	3301      	adds	r3, #1
 80020a2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80020a6:	4b77      	ldr	r3, [pc, #476]	@ (8002284 <StartDisplayTask+0x5f4>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3b0      	bcc.n	8002016 <StartDisplayTask+0x386>
            }
            break;
 80020b4:	e196      	b.n	80023e4 <StartDisplayTask+0x754>
          }
          case ePlayerTurn:
          {
            ILI9488_WriteString(10, 20, "Resultado do Round", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80020b6:	4b70      	ldr	r3, [pc, #448]	@ (8002278 <StartDisplayTask+0x5e8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	9202      	str	r2, [sp, #8]
 80020bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020c0:	9201      	str	r2, [sp, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	9200      	str	r2, [sp, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6f      	ldr	r2, [pc, #444]	@ (8002288 <StartDisplayTask+0x5f8>)
 80020ca:	2114      	movs	r1, #20
 80020cc:	200a      	movs	r0, #10
 80020ce:	f7fe fd27 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "Sua Vida: %d", eUserPlayer.u8HeartPoints);
 80020d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002280 <StartDisplayTask+0x5f0>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	496b      	ldr	r1, [pc, #428]	@ (800228c <StartDisplayTask+0x5fc>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f006 fe87 	bl	8008df4 <siprintf>
            ILI9488_WriteString(10, 60, buffer, Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 80020e6:	4b64      	ldr	r3, [pc, #400]	@ (8002278 <StartDisplayTask+0x5e8>)
 80020e8:	f107 0108 	add.w	r1, r7, #8
 80020ec:	2200      	movs	r2, #0
 80020ee:	9202      	str	r2, [sp, #8]
 80020f0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80020f4:	9201      	str	r2, [sp, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	9200      	str	r2, [sp, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	460a      	mov	r2, r1
 80020fe:	213c      	movs	r1, #60	@ 0x3c
 8002100:	200a      	movs	r0, #10
 8002102:	f7fe fd0d 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "Vida CPU: %d", eCpuPlayer.u8HeartPoints);
 8002106:	4b62      	ldr	r3, [pc, #392]	@ (8002290 <StartDisplayTask+0x600>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	4960      	ldr	r1, [pc, #384]	@ (8002294 <StartDisplayTask+0x604>)
 8002114:	4618      	mov	r0, r3
 8002116:	f006 fe6d 	bl	8008df4 <siprintf>
            ILI9488_WriteString(10, 90, buffer, Font_7x10, ILI9488_RED, ILI9488_BLACK);
 800211a:	4b57      	ldr	r3, [pc, #348]	@ (8002278 <StartDisplayTask+0x5e8>)
 800211c:	f107 0108 	add.w	r1, r7, #8
 8002120:	2200      	movs	r2, #0
 8002122:	9202      	str	r2, [sp, #8]
 8002124:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002128:	9201      	str	r2, [sp, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	9200      	str	r2, [sp, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	460a      	mov	r2, r1
 8002132:	215a      	movs	r1, #90	@ 0x5a
 8002134:	200a      	movs	r0, #10
 8002136:	f7fe fcf3 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(10, 130, "Seus Ataques:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 800213a:	4b4f      	ldr	r3, [pc, #316]	@ (8002278 <StartDisplayTask+0x5e8>)
 800213c:	2200      	movs	r2, #0
 800213e:	9202      	str	r2, [sp, #8]
 8002140:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002144:	9201      	str	r2, [sp, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	9200      	str	r2, [sp, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a52      	ldr	r2, [pc, #328]	@ (8002298 <StartDisplayTask+0x608>)
 800214e:	2182      	movs	r1, #130	@ 0x82
 8002150:	200a      	movs	r0, #10
 8002152:	f7fe fce5 	bl	8000b20 <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002156:	2300      	movs	r3, #0
 8002158:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800215c:	e047      	b.n	80021ee <StartDisplayTask+0x55e>
                uint16_t attackColor = ILI9488_WHITE;
 800215e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002162:	867b      	strh	r3, [r7, #50]	@ 0x32
                switch(eUserPlayer.eAttackSequential[i]) {
 8002164:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002168:	4a45      	ldr	r2, [pc, #276]	@ (8002280 <StartDisplayTask+0x5f0>)
 800216a:	4413      	add	r3, r2
 800216c:	789b      	ldrb	r3, [r3, #2]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b05      	cmp	r3, #5
 8002172:	d826      	bhi.n	80021c2 <StartDisplayTask+0x532>
 8002174:	a201      	add	r2, pc, #4	@ (adr r2, 800217c <StartDisplayTask+0x4ec>)
 8002176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217a:	bf00      	nop
 800217c:	08002195 	.word	0x08002195
 8002180:	0800219d 	.word	0x0800219d
 8002184:	080021a3 	.word	0x080021a3
 8002188:	080021ab 	.word	0x080021ab
 800218c:	080021b3 	.word	0x080021b3
 8002190:	080021bb 	.word	0x080021bb
                    case eRed:    attackColor = ILI9488_RED;   break;
 8002194:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002198:	867b      	strh	r3, [r7, #50]	@ 0x32
 800219a:	e012      	b.n	80021c2 <StartDisplayTask+0x532>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 800219c:	231f      	movs	r3, #31
 800219e:	867b      	strh	r3, [r7, #50]	@ 0x32
 80021a0:	e00f      	b.n	80021c2 <StartDisplayTask+0x532>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 80021a2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80021a6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80021a8:	e00b      	b.n	80021c2 <StartDisplayTask+0x532>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 80021aa:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 80021ae:	867b      	strh	r3, [r7, #50]	@ 0x32
 80021b0:	e007      	b.n	80021c2 <StartDisplayTask+0x532>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 80021b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021b6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80021b8:	e003      	b.n	80021c2 <StartDisplayTask+0x532>
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 80021ba:	f246 330c 	movw	r3, #25356	@ 0x630c
 80021be:	867b      	strh	r3, [r7, #50]	@ 0x32
 80021c0:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 150, 20, 20, attackColor);
 80021c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	330a      	adds	r3, #10
 80021d4:	b298      	uxth	r0, r3
 80021d6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2314      	movs	r3, #20
 80021dc:	2214      	movs	r2, #20
 80021de:	2196      	movs	r1, #150	@ 0x96
 80021e0:	f7fe fbfe 	bl	80009e0 <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 80021e4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80021e8:	3301      	adds	r3, #1
 80021ea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80021ee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d9b3      	bls.n	800215e <StartDisplayTask+0x4ce>
            }
            ILI9488_WriteString(10, 190, "Ataques CPU:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80021f6:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <StartDisplayTask+0x5e8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	9202      	str	r2, [sp, #8]
 80021fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002200:	9201      	str	r2, [sp, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	9200      	str	r2, [sp, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a24      	ldr	r2, [pc, #144]	@ (800229c <StartDisplayTask+0x60c>)
 800220a:	21be      	movs	r1, #190	@ 0xbe
 800220c:	200a      	movs	r0, #10
 800220e:	f7fe fc87 	bl	8000b20 <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002218:	e05c      	b.n	80022d4 <StartDisplayTask+0x644>
                uint16_t attackColor = ILI9488_WHITE;
 800221a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800221e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                switch(eCpuPlayer.eAttackSequential[i]) {
 8002220:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002224:	4a1a      	ldr	r2, [pc, #104]	@ (8002290 <StartDisplayTask+0x600>)
 8002226:	4413      	add	r3, r2
 8002228:	789b      	ldrb	r3, [r3, #2]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b05      	cmp	r3, #5
 800222e:	d83b      	bhi.n	80022a8 <StartDisplayTask+0x618>
 8002230:	a201      	add	r2, pc, #4	@ (adr r2, 8002238 <StartDisplayTask+0x5a8>)
 8002232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002236:	bf00      	nop
 8002238:	08002251 	.word	0x08002251
 800223c:	08002259 	.word	0x08002259
 8002240:	0800225f 	.word	0x0800225f
 8002244:	08002267 	.word	0x08002267
 8002248:	0800226f 	.word	0x0800226f
 800224c:	080022a1 	.word	0x080022a1
                    case eRed:    attackColor = ILI9488_RED;   break;
 8002250:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002254:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002256:	e027      	b.n	80022a8 <StartDisplayTask+0x618>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 8002258:	231f      	movs	r3, #31
 800225a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800225c:	e024      	b.n	80022a8 <StartDisplayTask+0x618>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 800225e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002262:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002264:	e020      	b.n	80022a8 <StartDisplayTask+0x618>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 8002266:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 800226a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800226c:	e01c      	b.n	80022a8 <StartDisplayTask+0x618>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 800226e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002272:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002274:	e018      	b.n	80022a8 <StartDisplayTask+0x618>
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000
 800227c:	0800a174 	.word	0x0800a174
 8002280:	20000478 	.word	0x20000478
 8002284:	20000490 	.word	0x20000490
 8002288:	0800a178 	.word	0x0800a178
 800228c:	0800a18c 	.word	0x0800a18c
 8002290:	20000480 	.word	0x20000480
 8002294:	0800a19c 	.word	0x0800a19c
 8002298:	0800a1ac 	.word	0x0800a1ac
 800229c:	0800a1bc 	.word	0x0800a1bc
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 80022a0:	f246 330c 	movw	r3, #25356	@ 0x630c
 80022a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80022a6:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 210, 20, 20, attackColor);
 80022a8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	330a      	adds	r3, #10
 80022ba:	b298      	uxth	r0, r3
 80022bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2314      	movs	r3, #20
 80022c2:	2214      	movs	r2, #20
 80022c4:	21d2      	movs	r1, #210	@ 0xd2
 80022c6:	f7fe fb8b 	bl	80009e0 <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 80022ca:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80022ce:	3301      	adds	r3, #1
 80022d0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80022d4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d99e      	bls.n	800221a <StartDisplayTask+0x58a>
            }
            ILI9488_WriteString(10, 280, "Pressione * para continuar...", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 80022dc:	4b45      	ldr	r3, [pc, #276]	@ (80023f4 <StartDisplayTask+0x764>)
 80022de:	2200      	movs	r2, #0
 80022e0:	9202      	str	r2, [sp, #8]
 80022e2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80022e6:	9201      	str	r2, [sp, #4]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	9200      	str	r2, [sp, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a42      	ldr	r2, [pc, #264]	@ (80023f8 <StartDisplayTask+0x768>)
 80022f0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80022f4:	200a      	movs	r0, #10
 80022f6:	f7fe fc13 	bl	8000b20 <ILI9488_WriteString>
            break;
 80022fa:	e073      	b.n	80023e4 <StartDisplayTask+0x754>
          }
          case eEndGame:
          {
            if (eUserPlayer.u8HeartPoints > 0) {
 80022fc:	4b3f      	ldr	r3, [pc, #252]	@ (80023fc <StartDisplayTask+0x76c>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00e      	beq.n	8002324 <StartDisplayTask+0x694>
                ILI9488_WriteString(70, 80, "VITORIA!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8002306:	4b3b      	ldr	r3, [pc, #236]	@ (80023f4 <StartDisplayTask+0x764>)
 8002308:	2200      	movs	r2, #0
 800230a:	9202      	str	r2, [sp, #8]
 800230c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002310:	9201      	str	r2, [sp, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	9200      	str	r2, [sp, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a39      	ldr	r2, [pc, #228]	@ (8002400 <StartDisplayTask+0x770>)
 800231a:	2150      	movs	r1, #80	@ 0x50
 800231c:	2046      	movs	r0, #70	@ 0x46
 800231e:	f7fe fbff 	bl	8000b20 <ILI9488_WriteString>
 8002322:	e00d      	b.n	8002340 <StartDisplayTask+0x6b0>
            } else {
                ILI9488_WriteString(70, 80, "DERROTA!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8002324:	4b33      	ldr	r3, [pc, #204]	@ (80023f4 <StartDisplayTask+0x764>)
 8002326:	2200      	movs	r2, #0
 8002328:	9202      	str	r2, [sp, #8]
 800232a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800232e:	9201      	str	r2, [sp, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a33      	ldr	r2, [pc, #204]	@ (8002404 <StartDisplayTask+0x774>)
 8002338:	2150      	movs	r1, #80	@ 0x50
 800233a:	2046      	movs	r0, #70	@ 0x46
 800233c:	f7fe fbf0 	bl	8000b20 <ILI9488_WriteString>
            }
            sprintf(buffer, "Sua Vida Final: %d", eUserPlayer.u8HeartPoints);
 8002340:	4b2e      	ldr	r3, [pc, #184]	@ (80023fc <StartDisplayTask+0x76c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	492e      	ldr	r1, [pc, #184]	@ (8002408 <StartDisplayTask+0x778>)
 800234e:	4618      	mov	r0, r3
 8002350:	f006 fd50 	bl	8008df4 <siprintf>
            ILI9488_WriteString(10, 140, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002354:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <StartDisplayTask+0x764>)
 8002356:	f107 0108 	add.w	r1, r7, #8
 800235a:	2200      	movs	r2, #0
 800235c:	9202      	str	r2, [sp, #8]
 800235e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002362:	9201      	str	r2, [sp, #4]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	9200      	str	r2, [sp, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	460a      	mov	r2, r1
 800236c:	218c      	movs	r1, #140	@ 0x8c
 800236e:	200a      	movs	r0, #10
 8002370:	f7fe fbd6 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "Vida Final CPU: %d", eCpuPlayer.u8HeartPoints);
 8002374:	4b25      	ldr	r3, [pc, #148]	@ (800240c <StartDisplayTask+0x77c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	4923      	ldr	r1, [pc, #140]	@ (8002410 <StartDisplayTask+0x780>)
 8002382:	4618      	mov	r0, r3
 8002384:	f006 fd36 	bl	8008df4 <siprintf>
            ILI9488_WriteString(10, 160, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002388:	4b1a      	ldr	r3, [pc, #104]	@ (80023f4 <StartDisplayTask+0x764>)
 800238a:	f107 0108 	add.w	r1, r7, #8
 800238e:	2200      	movs	r2, #0
 8002390:	9202      	str	r2, [sp, #8]
 8002392:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002396:	9201      	str	r2, [sp, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	9200      	str	r2, [sp, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	460a      	mov	r2, r1
 80023a0:	21a0      	movs	r1, #160	@ 0xa0
 80023a2:	200a      	movs	r0, #10
 80023a4:	f7fe fbbc 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(10, 250, "Pressione * para recomecar", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 80023a8:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <StartDisplayTask+0x764>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	9202      	str	r2, [sp, #8]
 80023ae:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80023b2:	9201      	str	r2, [sp, #4]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	9200      	str	r2, [sp, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <StartDisplayTask+0x784>)
 80023bc:	21fa      	movs	r1, #250	@ 0xfa
 80023be:	200a      	movs	r0, #10
 80023c0:	f7fe fbae 	bl	8000b20 <ILI9488_WriteString>
            break;
 80023c4:	e00e      	b.n	80023e4 <StartDisplayTask+0x754>
          }
          default:
          {
            ILI9488_WriteString(10, 10, "Erro de Estado!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 80023c6:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <StartDisplayTask+0x764>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	9202      	str	r2, [sp, #8]
 80023cc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	9200      	str	r2, [sp, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002418 <StartDisplayTask+0x788>)
 80023da:	210a      	movs	r1, #10
 80023dc:	200a      	movs	r0, #10
 80023de:	f7fe fb9f 	bl	8000b20 <ILI9488_WriteString>
            break;
 80023e2:	bf00      	nop
          }
      }
      u8RedrawScreen = FALSE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    osDelay(5);
 80023ea:	2005      	movs	r0, #5
 80023ec:	f004 f853 	bl	8006496 <osDelay>
    osMutexWait(gameMutexHandle, osWaitForever);
 80023f0:	e455      	b.n	8001c9e <StartDisplayTask+0xe>
 80023f2:	bf00      	nop
 80023f4:	20000000 	.word	0x20000000
 80023f8:	0800a1cc 	.word	0x0800a1cc
 80023fc:	20000478 	.word	0x20000478
 8002400:	0800a1ec 	.word	0x0800a1ec
 8002404:	0800a1f8 	.word	0x0800a1f8
 8002408:	0800a204 	.word	0x0800a204
 800240c:	20000480 	.word	0x20000480
 8002410:	0800a218 	.word	0x0800a218
 8002414:	0800a22c 	.word	0x0800a22c
 8002418:	0800a248 	.word	0x0800a248

0800241c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <Error_Handler+0x8>

08002428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <HAL_MspInit+0x94>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	4a21      	ldr	r2, [pc, #132]	@ (80024bc <HAL_MspInit+0x94>)
 8002438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800243c:	6453      	str	r3, [r2, #68]	@ 0x44
 800243e:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <HAL_MspInit+0x94>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_MspInit+0x94>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	4a1a      	ldr	r2, [pc, #104]	@ (80024bc <HAL_MspInit+0x94>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	@ 0x40
 800245a:	4b18      	ldr	r3, [pc, #96]	@ (80024bc <HAL_MspInit+0x94>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	210f      	movs	r1, #15
 800246a:	f06f 0001 	mvn.w	r0, #1
 800246e:	f000 fbda 	bl	8002c26 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2105      	movs	r1, #5
 8002476:	2001      	movs	r0, #1
 8002478:	f000 fbd5 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800247c:	2001      	movs	r0, #1
 800247e:	f000 fbee 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2105      	movs	r1, #5
 8002486:	2004      	movs	r0, #4
 8002488:	f000 fbcd 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800248c:	2004      	movs	r0, #4
 800248e:	f000 fbe6 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2105      	movs	r1, #5
 8002496:	2005      	movs	r0, #5
 8002498:	f000 fbc5 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800249c:	2005      	movs	r0, #5
 800249e:	f000 fbde 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2105      	movs	r1, #5
 80024a6:	2051      	movs	r0, #81	@ 0x51
 80024a8:	f000 fbbd 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80024ac:	2051      	movs	r0, #81	@ 0x51
 80024ae:	f000 fbd6 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a19      	ldr	r2, [pc, #100]	@ (8002544 <HAL_I2C_MspInit+0x84>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12c      	bne.n	800253c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b18      	ldr	r3, [pc, #96]	@ (8002548 <HAL_I2C_MspInit+0x88>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	4a17      	ldr	r2, [pc, #92]	@ (8002548 <HAL_I2C_MspInit+0x88>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f2:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <HAL_I2C_MspInit+0x88>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80024fe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002504:	2312      	movs	r3, #18
 8002506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002508:	2301      	movs	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002510:	2304      	movs	r3, #4
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	480c      	ldr	r0, [pc, #48]	@ (800254c <HAL_I2C_MspInit+0x8c>)
 800251c:	f000 fde0 	bl	80030e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <HAL_I2C_MspInit+0x88>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	4a07      	ldr	r2, [pc, #28]	@ (8002548 <HAL_I2C_MspInit+0x88>)
 800252a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800252e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_I2C_MspInit+0x88>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800253c:	bf00      	nop
 800253e:	3728      	adds	r7, #40	@ 0x28
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40005400 	.word	0x40005400
 8002548:	40023800 	.word	0x40023800
 800254c:	40020400 	.word	0x40020400

08002550 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	@ 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <HAL_SPI_MspInit+0x94>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d133      	bne.n	80025da <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b1c      	ldr	r3, [pc, #112]	@ (80025e8 <HAL_SPI_MspInit+0x98>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a1b      	ldr	r2, [pc, #108]	@ (80025e8 <HAL_SPI_MspInit+0x98>)
 800257c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_SPI_MspInit+0x98>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <HAL_SPI_MspInit+0x98>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	4a14      	ldr	r2, [pc, #80]	@ (80025e8 <HAL_SPI_MspInit+0x98>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6313      	str	r3, [r2, #48]	@ 0x30
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <HAL_SPI_MspInit+0x98>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80025aa:	23e0      	movs	r3, #224	@ 0xe0
 80025ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ba:	2305      	movs	r3, #5
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4809      	ldr	r0, [pc, #36]	@ (80025ec <HAL_SPI_MspInit+0x9c>)
 80025c6:	f000 fd8b 	bl	80030e0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2105      	movs	r1, #5
 80025ce:	2023      	movs	r0, #35	@ 0x23
 80025d0:	f000 fb29 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025d4:	2023      	movs	r0, #35	@ 0x23
 80025d6:	f000 fb42 	bl	8002c5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	@ 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40013000 	.word	0x40013000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020000 	.word	0x40020000

080025f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	@ 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1d      	ldr	r2, [pc, #116]	@ (8002684 <HAL_UART_MspInit+0x94>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d133      	bne.n	800267a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <HAL_UART_MspInit+0x98>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a1b      	ldr	r2, [pc, #108]	@ (8002688 <HAL_UART_MspInit+0x98>)
 800261c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b19      	ldr	r3, [pc, #100]	@ (8002688 <HAL_UART_MspInit+0x98>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_UART_MspInit+0x98>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	4a14      	ldr	r2, [pc, #80]	@ (8002688 <HAL_UART_MspInit+0x98>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	@ 0x30
 800263e:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <HAL_UART_MspInit+0x98>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800264a:	2303      	movs	r3, #3
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800265a:	2308      	movs	r3, #8
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4809      	ldr	r0, [pc, #36]	@ (800268c <HAL_UART_MspInit+0x9c>)
 8002666:	f000 fd3b 	bl	80030e0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2105      	movs	r1, #5
 800266e:	2034      	movs	r0, #52	@ 0x34
 8002670:	f000 fad9 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002674:	2034      	movs	r0, #52	@ 0x34
 8002676:	f000 faf2 	bl	8002c5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	@ 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40004c00 	.word	0x40004c00
 8002688:	40023800 	.word	0x40023800
 800268c:	40020000 	.word	0x40020000

08002690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <NMI_Handler+0x4>

08002698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <HardFault_Handler+0x4>

080026a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <MemManage_Handler+0x4>

080026a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <BusFault_Handler+0x4>

080026b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <UsageFault_Handler+0x4>

080026b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ca:	f000 f98d 	bl	80029e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026ce:	f005 fbf9 	bl	8007ec4 <xTaskGetSchedulerState>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d001      	beq.n	80026dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80026d8:	f005 ffde 	bl	8008698 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}

080026e0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80026e4:	f001 feee 	bl	80044c4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}

080026ec <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80026f0:	f000 fb62 	bl	8002db8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800270c:	4802      	ldr	r0, [pc, #8]	@ (8002718 <SPI1_IRQHandler+0x10>)
 800270e:	f002 fd19 	bl	8005144 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200003bc 	.word	0x200003bc

0800271c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <UART4_IRQHandler+0x10>)
 8002722:	f002 ff59 	bl	80055d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000414 	.word	0x20000414

08002730 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  return 1;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <_kill>:

int _kill(int pid, int sig)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002758:	f006 fc00 	bl	8008f5c <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	2216      	movs	r2, #22
 8002760:	601a      	str	r2, [r3, #0]
  return -1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_exit>:

void _exit (int status)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002776:	f04f 31ff 	mov.w	r1, #4294967295
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffe7 	bl	800274e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <_exit+0x12>

08002784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e00a      	b.n	80027ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002796:	f3af 8000 	nop.w
 800279a:	4601      	mov	r1, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	60ba      	str	r2, [r7, #8]
 80027a2:	b2ca      	uxtb	r2, r1
 80027a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	dbf0      	blt.n	8002796 <_read+0x12>
  }

  return len;
 80027b4:	687b      	ldr	r3, [r7, #4]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e009      	b.n	80027e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	60ba      	str	r2, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	dbf1      	blt.n	80027d0 <_write+0x12>
  }
  return len;
 80027ec:	687b      	ldr	r3, [r7, #4]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_close>:

int _close(int file)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800281e:	605a      	str	r2, [r3, #4]
  return 0;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_isatty>:

int _isatty(int file)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002868:	4a14      	ldr	r2, [pc, #80]	@ (80028bc <_sbrk+0x5c>)
 800286a:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <_sbrk+0x60>)
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <_sbrk+0x64>)
 800287e:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <_sbrk+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	429a      	cmp	r2, r3
 800288e:	d207      	bcs.n	80028a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002890:	f006 fb64 	bl	8008f5c <__errno>
 8002894:	4603      	mov	r3, r0
 8002896:	220c      	movs	r2, #12
 8002898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
 800289e:	e009      	b.n	80028b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	4a05      	ldr	r2, [pc, #20]	@ (80028c4 <_sbrk+0x64>)
 80028b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20020000 	.word	0x20020000
 80028c0:	00000400 	.word	0x00000400
 80028c4:	20000494 	.word	0x20000494
 80028c8:	20004340 	.word	0x20004340

080028cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <SystemInit+0x20>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <SystemInit+0x20>)
 80028d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002928 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028f4:	f7ff ffea 	bl	80028cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028f8:	480c      	ldr	r0, [pc, #48]	@ (800292c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028fa:	490d      	ldr	r1, [pc, #52]	@ (8002930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002900:	e002      	b.n	8002908 <LoopCopyDataInit>

08002902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002906:	3304      	adds	r3, #4

08002908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800290a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800290c:	d3f9      	bcc.n	8002902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800290e:	4a0a      	ldr	r2, [pc, #40]	@ (8002938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002910:	4c0a      	ldr	r4, [pc, #40]	@ (800293c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002914:	e001      	b.n	800291a <LoopFillZerobss>

08002916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002918:	3204      	adds	r2, #4

0800291a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800291a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800291c:	d3fb      	bcc.n	8002916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800291e:	f006 fb23 	bl	8008f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002922:	f7fe fc9b 	bl	800125c <main>
  bx  lr    
 8002926:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800292c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002930:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002934:	0804c9a4 	.word	0x0804c9a4
  ldr r2, =_sbss
 8002938:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 800293c:	2000433c 	.word	0x2000433c

08002940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002940:	e7fe      	b.n	8002940 <ADC_IRQHandler>
	...

08002944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002948:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_Init+0x40>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <HAL_Init+0x40>)
 800294e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_Init+0x40>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0a      	ldr	r2, [pc, #40]	@ (8002984 <HAL_Init+0x40>)
 800295a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800295e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002960:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <HAL_Init+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <HAL_Init+0x40>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800296c:	2003      	movs	r0, #3
 800296e:	f000 f94f 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002972:	200f      	movs	r0, #15
 8002974:	f000 f808 	bl	8002988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002978:	f7ff fd56 	bl	8002428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023c00 	.word	0x40023c00

08002988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002990:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_InitTick+0x54>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <HAL_InitTick+0x58>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	4619      	mov	r1, r3
 800299a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800299e:	fbb3 f3f1 	udiv	r3, r3, r1
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f967 	bl	8002c7a <HAL_SYSTICK_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00e      	b.n	80029d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b0f      	cmp	r3, #15
 80029ba:	d80a      	bhi.n	80029d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029bc:	2200      	movs	r2, #0
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f000 f92f 	bl	8002c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c8:	4a06      	ldr	r2, [pc, #24]	@ (80029e4 <HAL_InitTick+0x5c>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e000      	b.n	80029d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	2000006c 	.word	0x2000006c
 80029e0:	20000074 	.word	0x20000074
 80029e4:	20000070 	.word	0x20000070

080029e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ec:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_IncTick+0x20>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_IncTick+0x24>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	4a04      	ldr	r2, [pc, #16]	@ (8002a0c <HAL_IncTick+0x24>)
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000074 	.word	0x20000074
 8002a0c:	20000498 	.word	0x20000498

08002a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return uwTick;
 8002a14:	4b03      	ldr	r3, [pc, #12]	@ (8002a24 <HAL_GetTick+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000498 	.word	0x20000498

08002a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff ffee 	bl	8002a10 <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d005      	beq.n	8002a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_Delay+0x44>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a4e:	bf00      	nop
 8002a50:	f7ff ffde 	bl	8002a10 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d8f7      	bhi.n	8002a50 <HAL_Delay+0x28>
  {
  }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000074 	.word	0x20000074

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4907      	ldr	r1, [pc, #28]	@ (8002b0c <__NVIC_EnableIRQ+0x38>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	@ (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	@ (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	@ 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	@ 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bdc:	d301      	bcc.n	8002be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00f      	b.n	8002c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <SysTick_Config+0x40>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bea:	210f      	movs	r1, #15
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f7ff ff8e 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <SysTick_Config+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfa:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <SysTick_Config+0x40>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff29 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff3e 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff8e 	bl	8002b64 <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5d 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff31 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ffa2 	bl	8002bcc <SysTick_Config>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff feb6 	bl	8002a10 <HAL_GetTick>
 8002ca4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d008      	beq.n	8002cc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2280      	movs	r2, #128	@ 0x80
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e052      	b.n	8002d6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0216 	bic.w	r2, r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ce2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <HAL_DMA_Abort+0x62>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0208 	bic.w	r2, r2, #8
 8002d02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d14:	e013      	b.n	8002d3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d16:	f7ff fe7b 	bl	8002a10 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d90c      	bls.n	8002d3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e015      	b.n	8002d6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e4      	bne.n	8002d16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d50:	223f      	movs	r2, #63	@ 0x3f
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d004      	beq.n	8002d90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2280      	movs	r2, #128	@ 0x80
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e00c      	b.n	8002daa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2205      	movs	r2, #5
 8002d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002dc2:	4b49      	ldr	r3, [pc, #292]	@ (8002ee8 <HAL_FLASH_IRQHandler+0x130>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d020      	beq.n	8002e10 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002dce:	4b47      	ldr	r3, [pc, #284]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002dd8:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8002dde:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	e00b      	b.n	8002e00 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002de8:	4b40      	ldr	r3, [pc, #256]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d103      	bne.n	8002dfa <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8002df2:	4b3e      	ldr	r3, [pc, #248]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	e002      	b.n	8002e00 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002e00:	f000 f88a 	bl	8002f18 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f87d 	bl	8002f04 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e0a:	4b38      	ldr	r3, [pc, #224]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002e10:	4b35      	ldr	r3, [pc, #212]	@ (8002ee8 <HAL_FLASH_IRQHandler+0x130>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d04a      	beq.n	8002eb2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ee8 <HAL_FLASH_IRQHandler+0x130>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002e22:	4b32      	ldr	r3, [pc, #200]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d12d      	bne.n	8002e88 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	4a2e      	ldr	r2, [pc, #184]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e34:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8002e36:	4b2d      	ldr	r3, [pc, #180]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d015      	beq.n	8002e6a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f853 	bl	8002ef0 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8002e4a:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	4a26      	ldr	r2, [pc, #152]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e52:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8002e54:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002e5a:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e5c:	7a1b      	ldrb	r3, [r3, #8]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f8ae 	bl	8002fc4 <FLASH_Erase_Sector>
 8002e68:	e023      	b.n	8002eb2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	4a1e      	ldr	r2, [pc, #120]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e76:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002e7c:	f000 f8ea 	bl	8003054 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f835 	bl	8002ef0 <HAL_FLASH_EndOfOperationCallback>
 8002e86:	e014      	b.n	8002eb2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002e88:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d107      	bne.n	8002ea2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002e92:	f000 f8df 	bl	8003054 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f828 	bl	8002ef0 <HAL_FLASH_EndOfOperationCallback>
 8002ea0:	e004      	b.n	8002eac <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f822 	bl	8002ef0 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002eac:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <HAL_FLASH_IRQHandler+0x134>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d111      	bne.n	8002ee0 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <HAL_FLASH_IRQHandler+0x130>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	4a09      	ldr	r2, [pc, #36]	@ (8002ee8 <HAL_FLASH_IRQHandler+0x130>)
 8002ec2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002ec6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002ec8:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <HAL_FLASH_IRQHandler+0x130>)
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	4a06      	ldr	r2, [pc, #24]	@ (8002ee8 <HAL_FLASH_IRQHandler+0x130>)
 8002ece:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed2:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002ed4:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <HAL_FLASH_IRQHandler+0x130>)
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	4a03      	ldr	r2, [pc, #12]	@ (8002ee8 <HAL_FLASH_IRQHandler+0x130>)
 8002eda:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	6113      	str	r3, [r2, #16]
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023c00 	.word	0x40023c00
 8002eec:	20000078 	.word	0x20000078

08002ef0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002f1c:	4b27      	ldr	r3, [pc, #156]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f28:	4b25      	ldr	r3, [pc, #148]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f043 0310 	orr.w	r3, r3, #16
 8002f30:	4a23      	ldr	r2, [pc, #140]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002f32:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002f34:	4b21      	ldr	r3, [pc, #132]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002f36:	2210      	movs	r2, #16
 8002f38:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f46:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f043 0308 	orr.w	r3, r3, #8
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002f50:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002f52:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002f54:	2220      	movs	r2, #32
 8002f56:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f58:	4b18      	ldr	r3, [pc, #96]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002f64:	4b16      	ldr	r3, [pc, #88]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002f6e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002f70:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002f72:	2240      	movs	r2, #64	@ 0x40
 8002f74:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002f76:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002f82:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002f8c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002f90:	2280      	movs	r2, #128	@ 0x80
 8002f92:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002f94:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002fa0:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f043 0320 	orr.w	r3, r3, #32
 8002fa8:	4a05      	ldr	r2, [pc, #20]	@ (8002fc0 <FLASH_SetErrorCode+0xa8>)
 8002faa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002fac:	4b03      	ldr	r3, [pc, #12]	@ (8002fbc <FLASH_SetErrorCode+0xa4>)
 8002fae:	2202      	movs	r2, #2
 8002fb0:	60da      	str	r2, [r3, #12]
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	20000078 	.word	0x20000078

08002fc4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e010      	b.n	8003002 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d103      	bne.n	8002fee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e009      	b.n	8003002 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d103      	bne.n	8002ffc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002ff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e002      	b.n	8003002 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002ffc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003000:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003002:	4b13      	ldr	r3, [pc, #76]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 8003008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800300c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	490f      	ldr	r1, [pc, #60]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	4a0c      	ldr	r2, [pc, #48]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 8003020:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8003024:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003026:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4313      	orrs	r3, r2
 8003030:	4a07      	ldr	r2, [pc, #28]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	4a04      	ldr	r2, [pc, #16]	@ (8003050 <FLASH_Erase_Sector+0x8c>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003042:	6113      	str	r3, [r2, #16]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40023c00 	.word	0x40023c00

08003054 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003058:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <FLASH_FlushCaches+0x88>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003060:	2b00      	cmp	r3, #0
 8003062:	d017      	beq.n	8003094 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003064:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <FLASH_FlushCaches+0x88>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <FLASH_FlushCaches+0x88>)
 800306a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800306e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003070:	4b1a      	ldr	r3, [pc, #104]	@ (80030dc <FLASH_FlushCaches+0x88>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <FLASH_FlushCaches+0x88>)
 8003076:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <FLASH_FlushCaches+0x88>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <FLASH_FlushCaches+0x88>)
 8003082:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003086:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003088:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <FLASH_FlushCaches+0x88>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a13      	ldr	r2, [pc, #76]	@ (80030dc <FLASH_FlushCaches+0x88>)
 800308e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003092:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <FLASH_FlushCaches+0x88>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800309c:	2b00      	cmp	r3, #0
 800309e:	d017      	beq.n	80030d0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80030a0:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <FLASH_FlushCaches+0x88>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0d      	ldr	r2, [pc, #52]	@ (80030dc <FLASH_FlushCaches+0x88>)
 80030a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030aa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <FLASH_FlushCaches+0x88>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <FLASH_FlushCaches+0x88>)
 80030b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <FLASH_FlushCaches+0x88>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a07      	ldr	r2, [pc, #28]	@ (80030dc <FLASH_FlushCaches+0x88>)
 80030be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c4:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <FLASH_FlushCaches+0x88>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <FLASH_FlushCaches+0x88>)
 80030ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ce:	6013      	str	r3, [r2, #0]
  }
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	@ 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e16b      	b.n	80033d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030fc:	2201      	movs	r2, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 815a 	bne.w	80033ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d005      	beq.n	8003132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312e:	2b02      	cmp	r3, #2
 8003130:	d130      	bne.n	8003194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003168:	2201      	movs	r2, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 0201 	and.w	r2, r3, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b03      	cmp	r3, #3
 800319e:	d017      	beq.n	80031d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d123      	bne.n	8003224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0203 	and.w	r2, r3, #3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80b4 	beq.w	80033ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b60      	ldr	r3, [pc, #384]	@ (80033ec <HAL_GPIO_Init+0x30c>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	4a5f      	ldr	r2, [pc, #380]	@ (80033ec <HAL_GPIO_Init+0x30c>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003274:	6453      	str	r3, [r2, #68]	@ 0x44
 8003276:	4b5d      	ldr	r3, [pc, #372]	@ (80033ec <HAL_GPIO_Init+0x30c>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003282:	4a5b      	ldr	r2, [pc, #364]	@ (80033f0 <HAL_GPIO_Init+0x310>)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a52      	ldr	r2, [pc, #328]	@ (80033f4 <HAL_GPIO_Init+0x314>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d02b      	beq.n	8003306 <HAL_GPIO_Init+0x226>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a51      	ldr	r2, [pc, #324]	@ (80033f8 <HAL_GPIO_Init+0x318>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d025      	beq.n	8003302 <HAL_GPIO_Init+0x222>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a50      	ldr	r2, [pc, #320]	@ (80033fc <HAL_GPIO_Init+0x31c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01f      	beq.n	80032fe <HAL_GPIO_Init+0x21e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003400 <HAL_GPIO_Init+0x320>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d019      	beq.n	80032fa <HAL_GPIO_Init+0x21a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003404 <HAL_GPIO_Init+0x324>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_GPIO_Init+0x216>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003408 <HAL_GPIO_Init+0x328>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00d      	beq.n	80032f2 <HAL_GPIO_Init+0x212>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4c      	ldr	r2, [pc, #304]	@ (800340c <HAL_GPIO_Init+0x32c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <HAL_GPIO_Init+0x20e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003410 <HAL_GPIO_Init+0x330>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_GPIO_Init+0x20a>
 80032e6:	2307      	movs	r3, #7
 80032e8:	e00e      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032ea:	2308      	movs	r3, #8
 80032ec:	e00c      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032ee:	2306      	movs	r3, #6
 80032f0:	e00a      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032f2:	2305      	movs	r3, #5
 80032f4:	e008      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032f6:	2304      	movs	r3, #4
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032fa:	2303      	movs	r3, #3
 80032fc:	e004      	b.n	8003308 <HAL_GPIO_Init+0x228>
 80032fe:	2302      	movs	r3, #2
 8003300:	e002      	b.n	8003308 <HAL_GPIO_Init+0x228>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_GPIO_Init+0x228>
 8003306:	2300      	movs	r3, #0
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	f002 0203 	and.w	r2, r2, #3
 800330e:	0092      	lsls	r2, r2, #2
 8003310:	4093      	lsls	r3, r2
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003318:	4935      	ldr	r1, [pc, #212]	@ (80033f0 <HAL_GPIO_Init+0x310>)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	3302      	adds	r3, #2
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003326:	4b3b      	ldr	r3, [pc, #236]	@ (8003414 <HAL_GPIO_Init+0x334>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334a:	4a32      	ldr	r2, [pc, #200]	@ (8003414 <HAL_GPIO_Init+0x334>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003350:	4b30      	ldr	r3, [pc, #192]	@ (8003414 <HAL_GPIO_Init+0x334>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003374:	4a27      	ldr	r2, [pc, #156]	@ (8003414 <HAL_GPIO_Init+0x334>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800337a:	4b26      	ldr	r3, [pc, #152]	@ (8003414 <HAL_GPIO_Init+0x334>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800339e:	4a1d      	ldr	r2, [pc, #116]	@ (8003414 <HAL_GPIO_Init+0x334>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <HAL_GPIO_Init+0x334>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033c8:	4a12      	ldr	r2, [pc, #72]	@ (8003414 <HAL_GPIO_Init+0x334>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3301      	adds	r3, #1
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	f67f ae90 	bls.w	80030fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3724      	adds	r7, #36	@ 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40013800 	.word	0x40013800
 80033f4:	40020000 	.word	0x40020000
 80033f8:	40020400 	.word	0x40020400
 80033fc:	40020800 	.word	0x40020800
 8003400:	40020c00 	.word	0x40020c00
 8003404:	40021000 	.word	0x40021000
 8003408:	40021400 	.word	0x40021400
 800340c:	40021800 	.word	0x40021800
 8003410:	40021c00 	.word	0x40021c00
 8003414:	40013c00 	.word	0x40013c00

08003418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e001      	b.n	800343a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003464:	e003      	b.n	800346e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	041a      	lsls	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	619a      	str	r2, [r3, #24]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e12b      	b.n	80036e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff f80c 	bl	80024c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	@ 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e0:	f001 fc3a 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a81      	ldr	r2, [pc, #516]	@ (80036f0 <HAL_I2C_Init+0x274>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d807      	bhi.n	8003500 <HAL_I2C_Init+0x84>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a80      	ldr	r2, [pc, #512]	@ (80036f4 <HAL_I2C_Init+0x278>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e006      	b.n	800350e <HAL_I2C_Init+0x92>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a7d      	ldr	r2, [pc, #500]	@ (80036f8 <HAL_I2C_Init+0x27c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0e7      	b.n	80036e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a78      	ldr	r2, [pc, #480]	@ (80036fc <HAL_I2C_Init+0x280>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0c9b      	lsrs	r3, r3, #18
 8003520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a6a      	ldr	r2, [pc, #424]	@ (80036f0 <HAL_I2C_Init+0x274>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <HAL_I2C_Init+0xd4>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3301      	adds	r3, #1
 800354e:	e009      	b.n	8003564 <HAL_I2C_Init+0xe8>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	4a69      	ldr	r2, [pc, #420]	@ (8003700 <HAL_I2C_Init+0x284>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	3301      	adds	r3, #1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003576:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	495c      	ldr	r1, [pc, #368]	@ (80036f0 <HAL_I2C_Init+0x274>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d819      	bhi.n	80035b8 <HAL_I2C_Init+0x13c>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e59      	subs	r1, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003592:	1c59      	adds	r1, r3, #1
 8003594:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003598:	400b      	ands	r3, r1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_I2C_Init+0x138>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1e59      	subs	r1, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b2:	e051      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 80035b4:	2304      	movs	r3, #4
 80035b6:	e04f      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d111      	bne.n	80035e4 <HAL_I2C_Init+0x168>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e58      	subs	r0, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	440b      	add	r3, r1
 80035ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d2:	3301      	adds	r3, #1
 80035d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e012      	b.n	800360a <HAL_I2C_Init+0x18e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	0099      	lsls	r1, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Init+0x196>
 800360e:	2301      	movs	r3, #1
 8003610:	e022      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10e      	bne.n	8003638 <HAL_I2C_Init+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1e58      	subs	r0, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	440b      	add	r3, r1
 8003628:	fbb0 f3f3 	udiv	r3, r0, r3
 800362c:	3301      	adds	r3, #1
 800362e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003636:	e00f      	b.n	8003658 <HAL_I2C_Init+0x1dc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e58      	subs	r0, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	0099      	lsls	r1, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	fbb0 f3f3 	udiv	r3, r0, r3
 800364e:	3301      	adds	r3, #1
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	6809      	ldr	r1, [r1, #0]
 800365c:	4313      	orrs	r3, r2
 800365e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003686:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6911      	ldr	r1, [r2, #16]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	4311      	orrs	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	430b      	orrs	r3, r1
 800369a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	000186a0 	.word	0x000186a0
 80036f4:	001e847f 	.word	0x001e847f
 80036f8:	003d08ff 	.word	0x003d08ff
 80036fc:	431bde83 	.word	0x431bde83
 8003700:	10624dd3 	.word	0x10624dd3

08003704 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	461a      	mov	r2, r3
 8003712:	4603      	mov	r3, r0
 8003714:	817b      	strh	r3, [r7, #10]
 8003716:	460b      	mov	r3, r1
 8003718:	813b      	strh	r3, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800371e:	f7ff f977 	bl	8002a10 <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b20      	cmp	r3, #32
 800372e:	f040 80d9 	bne.w	80038e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2319      	movs	r3, #25
 8003738:	2201      	movs	r2, #1
 800373a:	496d      	ldr	r1, [pc, #436]	@ (80038f0 <HAL_I2C_Mem_Write+0x1ec>)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fc8b 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
 800374a:	e0cc      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_I2C_Mem_Write+0x56>
 8003756:	2302      	movs	r3, #2
 8003758:	e0c5      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d007      	beq.n	8003780 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800378e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2221      	movs	r2, #33	@ 0x21
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2240      	movs	r2, #64	@ 0x40
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a3a      	ldr	r2, [r7, #32]
 80037aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a4d      	ldr	r2, [pc, #308]	@ (80038f4 <HAL_I2C_Mem_Write+0x1f0>)
 80037c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037c2:	88f8      	ldrh	r0, [r7, #6]
 80037c4:	893a      	ldrh	r2, [r7, #8]
 80037c6:	8979      	ldrh	r1, [r7, #10]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	4603      	mov	r3, r0
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fac2 	bl	8003d5c <I2C_RequestMemoryWrite>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d052      	beq.n	8003884 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e081      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fd50 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d107      	bne.n	800380a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003808:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06b      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11b      	bne.n	8003884 <HAL_I2C_Mem_Write+0x180>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d017      	beq.n	8003884 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1aa      	bne.n	80037e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fd43 	bl	800431c <I2C_WaitOnBTFFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d107      	bne.n	80038b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e016      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	00100002 	.word	0x00100002
 80038f4:	ffff0000 	.word	0xffff0000

080038f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	@ 0x30
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4603      	mov	r3, r0
 8003908:	817b      	strh	r3, [r7, #10]
 800390a:	460b      	mov	r3, r1
 800390c:	813b      	strh	r3, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003912:	f7ff f87d 	bl	8002a10 <HAL_GetTick>
 8003916:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b20      	cmp	r3, #32
 8003922:	f040 8214 	bne.w	8003d4e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2319      	movs	r3, #25
 800392c:	2201      	movs	r2, #1
 800392e:	497b      	ldr	r1, [pc, #492]	@ (8003b1c <HAL_I2C_Mem_Read+0x224>)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fb91 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
 800393e:	e207      	b.n	8003d50 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_I2C_Mem_Read+0x56>
 800394a:	2302      	movs	r3, #2
 800394c:	e200      	b.n	8003d50 <HAL_I2C_Mem_Read+0x458>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d007      	beq.n	8003974 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2222      	movs	r2, #34	@ 0x22
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2240      	movs	r2, #64	@ 0x40
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800399e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80039a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b20 <HAL_I2C_Mem_Read+0x228>)
 80039b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039b6:	88f8      	ldrh	r0, [r7, #6]
 80039b8:	893a      	ldrh	r2, [r7, #8]
 80039ba:	8979      	ldrh	r1, [r7, #10]
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4603      	mov	r3, r0
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fa5e 	bl	8003e88 <I2C_RequestMemoryRead>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e1bc      	b.n	8003d50 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d113      	bne.n	8003a06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039de:	2300      	movs	r3, #0
 80039e0:	623b      	str	r3, [r7, #32]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	623b      	str	r3, [r7, #32]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e190      	b.n	8003d28 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d11b      	bne.n	8003a46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e170      	b.n	8003d28 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d11b      	bne.n	8003a86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	e150      	b.n	8003d28 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a9c:	e144      	b.n	8003d28 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	f200 80f1 	bhi.w	8003c8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d123      	bne.n	8003af8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fc79 	bl	80043ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e145      	b.n	8003d50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003af6:	e117      	b.n	8003d28 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d14e      	bne.n	8003b9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	2200      	movs	r2, #0
 8003b08:	4906      	ldr	r1, [pc, #24]	@ (8003b24 <HAL_I2C_Mem_Read+0x22c>)
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 faa4 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e11a      	b.n	8003d50 <HAL_I2C_Mem_Read+0x458>
 8003b1a:	bf00      	nop
 8003b1c:	00100002 	.word	0x00100002
 8003b20:	ffff0000 	.word	0xffff0000
 8003b24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b9c:	e0c4      	b.n	8003d28 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	496c      	ldr	r1, [pc, #432]	@ (8003d58 <HAL_I2C_Mem_Read+0x460>)
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fa55 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0cb      	b.n	8003d50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c00:	2200      	movs	r2, #0
 8003c02:	4955      	ldr	r1, [pc, #340]	@ (8003d58 <HAL_I2C_Mem_Read+0x460>)
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fa27 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e09d      	b.n	8003d50 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c88:	e04e      	b.n	8003d28 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fb8c 	bl	80043ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e058      	b.n	8003d50 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d124      	bne.n	8003d28 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d107      	bne.n	8003cf6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f47f aeb6 	bne.w	8003a9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3728      	adds	r7, #40	@ 0x28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	00010004 	.word	0x00010004

08003d5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	813b      	strh	r3, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f960 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dac:	d103      	bne.n	8003db6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003db4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e05f      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	6a3a      	ldr	r2, [r7, #32]
 8003dce:	492d      	ldr	r1, [pc, #180]	@ (8003e84 <I2C_RequestMemoryWrite+0x128>)
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f9bb 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e04c      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df8:	6a39      	ldr	r1, [r7, #32]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa46 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d107      	bne.n	8003e1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e02b      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e28:	893b      	ldrh	r3, [r7, #8]
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	611a      	str	r2, [r3, #16]
 8003e32:	e021      	b.n	8003e78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e34:	893b      	ldrh	r3, [r7, #8]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fa20 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d107      	bne.n	8003e6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e005      	b.n	8003e7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e6e:	893b      	ldrh	r3, [r7, #8]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	00010002 	.word	0x00010002

08003e88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	4608      	mov	r0, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	461a      	mov	r2, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	817b      	strh	r3, [r7, #10]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	813b      	strh	r3, [r7, #8]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8c2 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee8:	d103      	bne.n	8003ef2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e0aa      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ef6:	897b      	ldrh	r3, [r7, #10]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	4952      	ldr	r1, [pc, #328]	@ (8004054 <I2C_RequestMemoryRead+0x1cc>)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f91d 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e097      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f34:	6a39      	ldr	r1, [r7, #32]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f9a8 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d107      	bne.n	8003f5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e076      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f64:	893b      	ldrh	r3, [r7, #8]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]
 8003f6e:	e021      	b.n	8003fb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f70:	893b      	ldrh	r3, [r7, #8]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f80:	6a39      	ldr	r1, [r7, #32]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f982 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d107      	bne.n	8003fa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e050      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003faa:	893b      	ldrh	r3, [r7, #8]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb6:	6a39      	ldr	r1, [r7, #32]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f967 	bl	800428c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d107      	bne.n	8003fdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e035      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f82b 	bl	8004058 <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004016:	d103      	bne.n	8004020 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800401e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e013      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004024:	897b      	ldrh	r3, [r7, #10]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	4906      	ldr	r1, [pc, #24]	@ (8004054 <I2C_RequestMemoryRead+0x1cc>)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f886 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	00010002 	.word	0x00010002

08004058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004068:	e048      	b.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d044      	beq.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004072:	f7fe fccd 	bl	8002a10 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d139      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10d      	bne.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	43da      	mvns	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	e00c      	b.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	43da      	mvns	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4013      	ands	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d116      	bne.n	80040fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e023      	b.n	8004144 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d10d      	bne.n	8004122 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	43da      	mvns	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4013      	ands	r3, r2
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	e00c      	b.n	800413c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	43da      	mvns	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4013      	ands	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	429a      	cmp	r2, r3
 8004140:	d093      	beq.n	800406a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415a:	e071      	b.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416a:	d123      	bne.n	80041b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004184:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	f043 0204 	orr.w	r2, r3, #4
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e067      	b.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d041      	beq.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041bc:	f7fe fc28 	bl	8002a10 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d136      	bne.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10c      	bne.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e00b      	b.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	43da      	mvns	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e021      	b.n	8004284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d10c      	bne.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	43da      	mvns	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e00b      	b.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f47f af6d 	bne.w	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004298:	e034      	b.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f8e3 	bl	8004466 <I2C_IsAcknowledgeFailed>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e034      	b.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d028      	beq.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b2:	f7fe fbad 	bl	8002a10 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11d      	bne.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d2:	2b80      	cmp	r3, #128	@ 0x80
 80042d4:	d016      	beq.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e007      	b.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b80      	cmp	r3, #128	@ 0x80
 8004310:	d1c3      	bne.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004328:	e034      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f89b 	bl	8004466 <I2C_IsAcknowledgeFailed>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e034      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d028      	beq.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fe fb65 	bl	8002a10 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11d      	bne.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d016      	beq.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e007      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d1c3      	bne.n	800432a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043b8:	e049      	b.n	800444e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d119      	bne.n	80043fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0210 	mvn.w	r2, #16
 80043d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e030      	b.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fc:	f7fe fb08 	bl	8002a10 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	d302      	bcc.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11d      	bne.n	800444e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441c:	2b40      	cmp	r3, #64	@ 0x40
 800441e:	d016      	beq.n	800444e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e007      	b.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b40      	cmp	r3, #64	@ 0x40
 800445a:	d1ae      	bne.n	80043ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800447c:	d11b      	bne.n	80044b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004486:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	f043 0204 	orr.w	r2, r3, #4
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80044c8:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80044d4:	f000 f808 	bl	80044e8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80044d8:	4b02      	ldr	r3, [pc, #8]	@ (80044e4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80044da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80044de:	615a      	str	r2, [r3, #20]
  }
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40013c00 	.word	0x40013c00

080044e8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e267      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d075      	beq.n	8004602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004516:	4b88      	ldr	r3, [pc, #544]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	2b04      	cmp	r3, #4
 8004520:	d00c      	beq.n	800453c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004522:	4b85      	ldr	r3, [pc, #532]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800452a:	2b08      	cmp	r3, #8
 800452c:	d112      	bne.n	8004554 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452e:	4b82      	ldr	r3, [pc, #520]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800453a:	d10b      	bne.n	8004554 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	4b7e      	ldr	r3, [pc, #504]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d05b      	beq.n	8004600 <HAL_RCC_OscConfig+0x108>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d157      	bne.n	8004600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e242      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800455c:	d106      	bne.n	800456c <HAL_RCC_OscConfig+0x74>
 800455e:	4b76      	ldr	r3, [pc, #472]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a75      	ldr	r2, [pc, #468]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e01d      	b.n	80045a8 <HAL_RCC_OscConfig+0xb0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0x98>
 8004576:	4b70      	ldr	r3, [pc, #448]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a6f      	ldr	r2, [pc, #444]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800457c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	4b6d      	ldr	r3, [pc, #436]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6c      	ldr	r2, [pc, #432]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	e00b      	b.n	80045a8 <HAL_RCC_OscConfig+0xb0>
 8004590:	4b69      	ldr	r3, [pc, #420]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a68      	ldr	r2, [pc, #416]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b66      	ldr	r3, [pc, #408]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a65      	ldr	r2, [pc, #404]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fe fa2e 	bl	8002a10 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fe fa2a 	bl	8002a10 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	@ 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e207      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0xc0>
 80045d6:	e014      	b.n	8004602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fe fa1a 	bl	8002a10 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fe fa16 	bl	8002a10 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	@ 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e1f3      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	4b51      	ldr	r3, [pc, #324]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0xe8>
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d063      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800460e:	4b4a      	ldr	r3, [pc, #296]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800461a:	4b47      	ldr	r3, [pc, #284]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004622:	2b08      	cmp	r3, #8
 8004624:	d11c      	bne.n	8004660 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004626:	4b44      	ldr	r3, [pc, #272]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	4b41      	ldr	r3, [pc, #260]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_RCC_OscConfig+0x152>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d001      	beq.n	800464a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e1c7      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464a:	4b3b      	ldr	r3, [pc, #236]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4937      	ldr	r1, [pc, #220]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	e03a      	b.n	80046d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004668:	4b34      	ldr	r3, [pc, #208]	@ (800473c <HAL_RCC_OscConfig+0x244>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fe f9cf 	bl	8002a10 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004676:	f7fe f9cb 	bl	8002a10 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1a8      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	4b2b      	ldr	r3, [pc, #172]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b28      	ldr	r3, [pc, #160]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4925      	ldr	r1, [pc, #148]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	600b      	str	r3, [r1, #0]
 80046a8:	e015      	b.n	80046d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046aa:	4b24      	ldr	r3, [pc, #144]	@ (800473c <HAL_RCC_OscConfig+0x244>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fe f9ae 	bl	8002a10 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b8:	f7fe f9aa 	bl	8002a10 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e187      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d036      	beq.n	8004750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ea:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <HAL_RCC_OscConfig+0x248>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fe f98e 	bl	8002a10 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f8:	f7fe f98a 	bl	8002a10 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e167      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <HAL_RCC_OscConfig+0x240>)
 800470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x200>
 8004716:	e01b      	b.n	8004750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004718:	4b09      	ldr	r3, [pc, #36]	@ (8004740 <HAL_RCC_OscConfig+0x248>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471e:	f7fe f977 	bl	8002a10 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	e00e      	b.n	8004744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004726:	f7fe f973 	bl	8002a10 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d907      	bls.n	8004744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e150      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
 8004738:	40023800 	.word	0x40023800
 800473c:	42470000 	.word	0x42470000
 8004740:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ea      	bne.n	8004726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8097 	beq.w	800488c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004762:	4b81      	ldr	r3, [pc, #516]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	4b7d      	ldr	r3, [pc, #500]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	4a7c      	ldr	r2, [pc, #496]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477c:	6413      	str	r3, [r2, #64]	@ 0x40
 800477e:	4b7a      	ldr	r3, [pc, #488]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478e:	4b77      	ldr	r3, [pc, #476]	@ (800496c <HAL_RCC_OscConfig+0x474>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d118      	bne.n	80047cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800479a:	4b74      	ldr	r3, [pc, #464]	@ (800496c <HAL_RCC_OscConfig+0x474>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a73      	ldr	r2, [pc, #460]	@ (800496c <HAL_RCC_OscConfig+0x474>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a6:	f7fe f933 	bl	8002a10 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ae:	f7fe f92f 	bl	8002a10 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e10c      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c0:	4b6a      	ldr	r3, [pc, #424]	@ (800496c <HAL_RCC_OscConfig+0x474>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x2ea>
 80047d4:	4b64      	ldr	r3, [pc, #400]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d8:	4a63      	ldr	r2, [pc, #396]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e0:	e01c      	b.n	800481c <HAL_RCC_OscConfig+0x324>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0x30c>
 80047ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	4a5e      	ldr	r2, [pc, #376]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047f0:	f043 0304 	orr.w	r3, r3, #4
 80047f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	6713      	str	r3, [r2, #112]	@ 0x70
 8004802:	e00b      	b.n	800481c <HAL_RCC_OscConfig+0x324>
 8004804:	4b58      	ldr	r3, [pc, #352]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004808:	4a57      	ldr	r2, [pc, #348]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004810:	4b55      	ldr	r3, [pc, #340]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004814:	4a54      	ldr	r2, [pc, #336]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004816:	f023 0304 	bic.w	r3, r3, #4
 800481a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fe f8f4 	bl	8002a10 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	e00a      	b.n	8004842 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fe f8f0 	bl	8002a10 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e0cb      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	4b49      	ldr	r3, [pc, #292]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0ee      	beq.n	800482c <HAL_RCC_OscConfig+0x334>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004850:	f7fe f8de 	bl	8002a10 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004856:	e00a      	b.n	800486e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7fe f8da 	bl	8002a10 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e0b5      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486e:	4b3e      	ldr	r3, [pc, #248]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1ee      	bne.n	8004858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d105      	bne.n	800488c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004880:	4b39      	ldr	r3, [pc, #228]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	4a38      	ldr	r2, [pc, #224]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800488a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80a1 	beq.w	80049d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004896:	4b34      	ldr	r3, [pc, #208]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d05c      	beq.n	800495c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d141      	bne.n	800492e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048aa:	4b31      	ldr	r3, [pc, #196]	@ (8004970 <HAL_RCC_OscConfig+0x478>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fe f8ae 	bl	8002a10 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fe f8aa 	bl	8002a10 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e087      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	4b27      	ldr	r3, [pc, #156]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	019b      	lsls	r3, r3, #6
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	491b      	ldr	r1, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004900:	4b1b      	ldr	r3, [pc, #108]	@ (8004970 <HAL_RCC_OscConfig+0x478>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fe f883 	bl	8002a10 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490e:	f7fe f87f 	bl	8002a10 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e05c      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004920:	4b11      	ldr	r3, [pc, #68]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x416>
 800492c:	e054      	b.n	80049d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b10      	ldr	r3, [pc, #64]	@ (8004970 <HAL_RCC_OscConfig+0x478>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fe f86c 	bl	8002a10 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493c:	f7fe f868 	bl	8002a10 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e045      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <HAL_RCC_OscConfig+0x470>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x444>
 800495a:	e03d      	b.n	80049d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e038      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
 8004968:	40023800 	.word	0x40023800
 800496c:	40007000 	.word	0x40007000
 8004970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004974:	4b1b      	ldr	r3, [pc, #108]	@ (80049e4 <HAL_RCC_OscConfig+0x4ec>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d028      	beq.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d121      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d11a      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049a4:	4013      	ands	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d111      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	085b      	lsrs	r3, r3, #1
 80049bc:	3b01      	subs	r3, #1
 80049be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800

080049e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0cc      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049fc:	4b68      	ldr	r3, [pc, #416]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d90c      	bls.n	8004a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b65      	ldr	r3, [pc, #404]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b63      	ldr	r3, [pc, #396]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0b8      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a3c:	4b59      	ldr	r3, [pc, #356]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a58      	ldr	r2, [pc, #352]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a54:	4b53      	ldr	r3, [pc, #332]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a52      	ldr	r2, [pc, #328]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a60:	4b50      	ldr	r3, [pc, #320]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	494d      	ldr	r1, [pc, #308]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d044      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b47      	ldr	r3, [pc, #284]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d119      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e06f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e067      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ac6:	4b37      	ldr	r3, [pc, #220]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f023 0203 	bic.w	r2, r3, #3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4934      	ldr	r1, [pc, #208]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad8:	f7fd ff9a 	bl	8002a10 <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae0:	f7fd ff96 	bl	8002a10 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e04f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 020c 	and.w	r2, r3, #12
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d1eb      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b08:	4b25      	ldr	r3, [pc, #148]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d20c      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b22      	ldr	r3, [pc, #136]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b20      	ldr	r3, [pc, #128]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e032      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b3c:	4b19      	ldr	r3, [pc, #100]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4916      	ldr	r1, [pc, #88]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	490e      	ldr	r1, [pc, #56]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b6e:	f000 f821 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b72:	4602      	mov	r2, r0
 8004b74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	490a      	ldr	r1, [pc, #40]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b80:	5ccb      	ldrb	r3, [r1, r3]
 8004b82:	fa22 f303 	lsr.w	r3, r2, r3
 8004b86:	4a09      	ldr	r2, [pc, #36]	@ (8004bac <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b8a:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd fefa 	bl	8002988 <HAL_InitTick>

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023c00 	.word	0x40023c00
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	0804c89c 	.word	0x0804c89c
 8004bac:	2000006c 	.word	0x2000006c
 8004bb0:	20000070 	.word	0x20000070

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb8:	b090      	sub	sp, #64	@ 0x40
 8004bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bcc:	4b59      	ldr	r3, [pc, #356]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 030c 	and.w	r3, r3, #12
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d00d      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	f200 80a1 	bhi.w	8004d20 <HAL_RCC_GetSysClockFreq+0x16c>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x34>
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_GetSysClockFreq+0x3a>
 8004be6:	e09b      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004be8:	4b53      	ldr	r3, [pc, #332]	@ (8004d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bec:	e09b      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bee:	4b53      	ldr	r3, [pc, #332]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8004bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bf2:	e098      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bfc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bfe:	4b4d      	ldr	r3, [pc, #308]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d028      	beq.n	8004c5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	2200      	movs	r2, #0
 8004c12:	623b      	str	r3, [r7, #32]
 8004c14:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4b47      	ldr	r3, [pc, #284]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c20:	fb03 f201 	mul.w	r2, r3, r1
 8004c24:	2300      	movs	r3, #0
 8004c26:	fb00 f303 	mul.w	r3, r0, r3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a43      	ldr	r2, [pc, #268]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c2e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c34:	460a      	mov	r2, r1
 8004c36:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c3a:	4413      	add	r3, r2
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c40:	2200      	movs	r2, #0
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	61fa      	str	r2, [r7, #28]
 8004c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c4e:	f7fb fb0f 	bl	8000270 <__aeabi_uldivmod>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4613      	mov	r3, r2
 8004c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c5a:	e053      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5c:	4b35      	ldr	r3, [pc, #212]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	099b      	lsrs	r3, r3, #6
 8004c62:	2200      	movs	r2, #0
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	617a      	str	r2, [r7, #20]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c6e:	f04f 0b00 	mov.w	fp, #0
 8004c72:	4652      	mov	r2, sl
 8004c74:	465b      	mov	r3, fp
 8004c76:	f04f 0000 	mov.w	r0, #0
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	0159      	lsls	r1, r3, #5
 8004c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c84:	0150      	lsls	r0, r2, #5
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	ebb2 080a 	subs.w	r8, r2, sl
 8004c8e:	eb63 090b 	sbc.w	r9, r3, fp
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ca2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ca6:	ebb2 0408 	subs.w	r4, r2, r8
 8004caa:	eb63 0509 	sbc.w	r5, r3, r9
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	00eb      	lsls	r3, r5, #3
 8004cb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cbc:	00e2      	lsls	r2, r4, #3
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	461d      	mov	r5, r3
 8004cc2:	eb14 030a 	adds.w	r3, r4, sl
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	eb45 030b 	adc.w	r3, r5, fp
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cda:	4629      	mov	r1, r5
 8004cdc:	028b      	lsls	r3, r1, #10
 8004cde:	4621      	mov	r1, r4
 8004ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	028a      	lsls	r2, r1, #10
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	60fa      	str	r2, [r7, #12]
 8004cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf8:	f7fb faba 	bl	8000270 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d04:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004d14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d1e:	e002      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d20:	4b05      	ldr	r3, [pc, #20]	@ (8004d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3740      	adds	r7, #64	@ 0x40
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d32:	bf00      	nop
 8004d34:	40023800 	.word	0x40023800
 8004d38:	00f42400 	.word	0x00f42400
 8004d3c:	017d7840 	.word	0x017d7840

08004d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d44:	4b03      	ldr	r3, [pc, #12]	@ (8004d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	2000006c 	.word	0x2000006c

08004d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d5c:	f7ff fff0 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d60:	4602      	mov	r2, r0
 8004d62:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	0a9b      	lsrs	r3, r3, #10
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	4903      	ldr	r1, [pc, #12]	@ (8004d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6e:	5ccb      	ldrb	r3, [r1, r3]
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0804c8ac 	.word	0x0804c8ac

08004d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d84:	f7ff ffdc 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	0b5b      	lsrs	r3, r3, #13
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4903      	ldr	r1, [pc, #12]	@ (8004da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40023800 	.word	0x40023800
 8004da4:	0804c8ac 	.word	0x0804c8ac

08004da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07b      	b.n	8004eb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d108      	bne.n	8004dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dca:	d009      	beq.n	8004de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	61da      	str	r2, [r3, #28]
 8004dd2:	e005      	b.n	8004de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fd fba8 	bl	8002550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e64:	ea42 0103 	orr.w	r1, r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0104 	and.w	r1, r3, #4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	f003 0210 	and.w	r2, r3, #16
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ea0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b088      	sub	sp, #32
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eca:	f7fd fda1 	bl	8002a10 <HAL_GetTick>
 8004ece:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d001      	beq.n	8004ee4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e12a      	b.n	800513a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Transmit+0x36>
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e122      	b.n	800513a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_SPI_Transmit+0x48>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e11b      	b.n	800513a <HAL_SPI_Transmit+0x280>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	88fa      	ldrh	r2, [r7, #6]
 8004f22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f50:	d10f      	bne.n	8004f72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7c:	2b40      	cmp	r3, #64	@ 0x40
 8004f7e:	d007      	beq.n	8004f90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f98:	d152      	bne.n	8005040 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_SPI_Transmit+0xee>
 8004fa2:	8b7b      	ldrh	r3, [r7, #26]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d145      	bne.n	8005034 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb8:	1c9a      	adds	r2, r3, #2
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fcc:	e032      	b.n	8005034 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d112      	bne.n	8005002 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe0:	881a      	ldrh	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fec:	1c9a      	adds	r2, r3, #2
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005000:	e018      	b.n	8005034 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005002:	f7fd fd05 	bl	8002a10 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d803      	bhi.n	800501a <HAL_SPI_Transmit+0x160>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d102      	bne.n	8005020 <HAL_SPI_Transmit+0x166>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e082      	b.n	800513a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1c7      	bne.n	8004fce <HAL_SPI_Transmit+0x114>
 800503e:	e053      	b.n	80050e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_SPI_Transmit+0x194>
 8005048:	8b7b      	ldrh	r3, [r7, #26]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d147      	bne.n	80050de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005074:	e033      	b.n	80050de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b02      	cmp	r3, #2
 8005082:	d113      	bne.n	80050ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050aa:	e018      	b.n	80050de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ac:	f7fd fcb0 	bl	8002a10 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d803      	bhi.n	80050c4 <HAL_SPI_Transmit+0x20a>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d102      	bne.n	80050ca <HAL_SPI_Transmit+0x210>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e02d      	b.n	800513a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1c6      	bne.n	8005076 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f9cf 	bl	8005490 <SPI_EndRxTxTransaction>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005138:	2300      	movs	r3, #0
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	099b      	lsrs	r3, r3, #6
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10f      	bne.n	8005188 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	099b      	lsrs	r3, r3, #6
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
    return;
 8005186:	e0d7      	b.n	8005338 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_SPI_IRQHandler+0x66>
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	09db      	lsrs	r3, r3, #7
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
    return;
 80051a8:	e0c6      	b.n	8005338 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10c      	bne.n	80051d0 <HAL_SPI_IRQHandler+0x8c>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	099b      	lsrs	r3, r3, #6
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	0a1b      	lsrs	r3, r3, #8
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80b4 	beq.w	8005338 <HAL_SPI_IRQHandler+0x1f4>
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80ad 	beq.w	8005338 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	099b      	lsrs	r3, r3, #6
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d023      	beq.n	8005232 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d011      	beq.n	800521a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fa:	f043 0204 	orr.w	r2, r3, #4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	e00b      	b.n	8005232 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	693b      	ldr	r3, [r7, #16]
        return;
 8005230:	e082      	b.n	8005338 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d014      	beq.n	8005268 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005242:	f043 0201 	orr.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00c      	beq.n	800528e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005278:	f043 0208 	orr.w	r2, r3, #8
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005280:	2300      	movs	r3, #0
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	60bb      	str	r3, [r7, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	2b00      	cmp	r3, #0
 8005294:	d04f      	beq.n	8005336 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <HAL_SPI_IRQHandler+0x17e>
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d034      	beq.n	800532c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0203 	bic.w	r2, r2, #3
 80052d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d011      	beq.n	80052fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052de:	4a18      	ldr	r2, [pc, #96]	@ (8005340 <HAL_SPI_IRQHandler+0x1fc>)
 80052e0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fd fd43 	bl	8002d72 <HAL_DMA_Abort_IT>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005302:	2b00      	cmp	r3, #0
 8005304:	d016      	beq.n	8005334 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800530a:	4a0d      	ldr	r2, [pc, #52]	@ (8005340 <HAL_SPI_IRQHandler+0x1fc>)
 800530c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005312:	4618      	mov	r0, r3
 8005314:	f7fd fd2d 	bl	8002d72 <HAL_DMA_Abort_IT>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005322:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800532a:	e003      	b.n	8005334 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f809 	bl	8005344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005332:	e000      	b.n	8005336 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005334:	bf00      	nop
    return;
 8005336:	bf00      	nop
  }
}
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	08005359 	.word	0x08005359

08005344 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff ffe6 	bl	8005344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005390:	f7fd fb3e 	bl	8002a10 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	4413      	add	r3, r2
 800539e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053a0:	f7fd fb36 	bl	8002a10 <HAL_GetTick>
 80053a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053a6:	4b39      	ldr	r3, [pc, #228]	@ (800548c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	015b      	lsls	r3, r3, #5
 80053ac:	0d1b      	lsrs	r3, r3, #20
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053b6:	e055      	b.n	8005464 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d051      	beq.n	8005464 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053c0:	f7fd fb26 	bl	8002a10 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d902      	bls.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d13d      	bne.n	8005452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ee:	d111      	bne.n	8005414 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053f8:	d004      	beq.n	8005404 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005402:	d107      	bne.n	8005414 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005412:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800541c:	d10f      	bne.n	800543e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800543c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e018      	b.n	8005484 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e002      	b.n	8005464 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	3b01      	subs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4013      	ands	r3, r2
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	429a      	cmp	r2, r3
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	429a      	cmp	r2, r3
 8005480:	d19a      	bne.n	80053b8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	2000006c 	.word	0x2000006c

08005490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2201      	movs	r2, #1
 80054a4:	2102      	movs	r1, #2
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff ff6a 	bl	8005380 <SPI_WaitFlagStateUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e032      	b.n	8005528 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005530 <SPI_EndRxTxTransaction+0xa0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005534 <SPI_EndRxTxTransaction+0xa4>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	0d5b      	lsrs	r3, r3, #21
 80054ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054e0:	d112      	bne.n	8005508 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	@ 0x80
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7ff ff47 	bl	8005380 <SPI_WaitFlagStateUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d016      	beq.n	8005526 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e00f      	b.n	8005528 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	3b01      	subs	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551e:	2b80      	cmp	r3, #128	@ 0x80
 8005520:	d0f2      	beq.n	8005508 <SPI_EndRxTxTransaction+0x78>
 8005522:	e000      	b.n	8005526 <SPI_EndRxTxTransaction+0x96>
        break;
 8005524:	bf00      	nop
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	2000006c 	.word	0x2000006c
 8005534:	165e9f81 	.word	0x165e9f81

08005538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e042      	b.n	80055d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fd f846 	bl	80025f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	@ 0x24
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800557a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fc99 	bl	8005eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b0ba      	sub	sp, #232	@ 0xe8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055fe:	2300      	movs	r3, #0
 8005600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005604:	2300      	movs	r3, #0
 8005606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10f      	bne.n	800563e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <HAL_UART_IRQHandler+0x66>
 800562a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fb7e 	bl	8005d38 <UART_Receive_IT>
      return;
 800563c:	e273      	b.n	8005b26 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800563e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80de 	beq.w	8005804 <HAL_UART_IRQHandler+0x22c>
 8005648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005658:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80d1 	beq.w	8005804 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <HAL_UART_IRQHandler+0xae>
 800566e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	f043 0201 	orr.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <HAL_UART_IRQHandler+0xd2>
 8005692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	f043 0202 	orr.w	r2, r3, #2
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00b      	beq.n	80056ce <HAL_UART_IRQHandler+0xf6>
 80056b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c6:	f043 0204 	orr.w	r2, r3, #4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d011      	beq.n	80056fe <HAL_UART_IRQHandler+0x126>
 80056da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d105      	bne.n	80056f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	f043 0208 	orr.w	r2, r3, #8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 820a 	beq.w	8005b1c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_UART_IRQHandler+0x14e>
 8005714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fb09 	bl	8005d38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005730:	2b40      	cmp	r3, #64	@ 0x40
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <HAL_UART_IRQHandler+0x17a>
 800574a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d04f      	beq.n	80057f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa14 	bl	8005b80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005762:	2b40      	cmp	r3, #64	@ 0x40
 8005764:	d141      	bne.n	80057ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3314      	adds	r3, #20
 800576c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800577c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005792:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800579e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1d9      	bne.n	8005766 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d013      	beq.n	80057e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057be:	4a8a      	ldr	r2, [pc, #552]	@ (80059e8 <HAL_UART_IRQHandler+0x410>)
 80057c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fd fad3 	bl	8002d72 <HAL_DMA_Abort_IT>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d016      	beq.n	8005800 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057dc:	4610      	mov	r0, r2
 80057de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	e00e      	b.n	8005800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f9b6 	bl	8005b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	e00a      	b.n	8005800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9b2 	bl	8005b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e006      	b.n	8005800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9ae 	bl	8005b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057fe:	e18d      	b.n	8005b1c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005800:	bf00      	nop
    return;
 8005802:	e18b      	b.n	8005b1c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005808:	2b01      	cmp	r3, #1
 800580a:	f040 8167 	bne.w	8005adc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8160 	beq.w	8005adc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8159 	beq.w	8005adc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584a:	2b40      	cmp	r3, #64	@ 0x40
 800584c:	f040 80ce 	bne.w	80059ec <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800585c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80a9 	beq.w	80059b8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800586a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800586e:	429a      	cmp	r2, r3
 8005870:	f080 80a2 	bcs.w	80059b8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800587a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005886:	f000 8088 	beq.w	800599a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1d9      	bne.n	800588a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3314      	adds	r3, #20
 80058f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005902:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800590c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e1      	bne.n	80058d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3314      	adds	r3, #20
 8005918:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3314      	adds	r3, #20
 8005932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005936:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005938:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800593c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e3      	bne.n	8005912 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800596a:	f023 0310 	bic.w	r3, r3, #16
 800596e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	330c      	adds	r3, #12
 8005978:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800597c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800597e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005982:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800598a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e3      	bne.n	8005958 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	4618      	mov	r0, r3
 8005996:	f7fd f97c 	bl	8002c92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2202      	movs	r2, #2
 800599e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8d9 	bl	8005b68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059b6:	e0b3      	b.n	8005b20 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059c0:	429a      	cmp	r2, r3
 80059c2:	f040 80ad 	bne.w	8005b20 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d0:	f040 80a6 	bne.w	8005b20 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f8c1 	bl	8005b68 <HAL_UARTEx_RxEventCallback>
      return;
 80059e6:	e09b      	b.n	8005b20 <HAL_UART_IRQHandler+0x548>
 80059e8:	08005c47 	.word	0x08005c47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 808e 	beq.w	8005b24 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8089 	beq.w	8005b24 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	330c      	adds	r3, #12
 8005a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a36:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e3      	bne.n	8005a12 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3314      	adds	r3, #20
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	623b      	str	r3, [r7, #32]
   return(result);
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3314      	adds	r3, #20
 8005a6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e3      	bne.n	8005a4a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0310 	bic.w	r3, r3, #16
 8005aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ab4:	61fa      	str	r2, [r7, #28]
 8005ab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	69b9      	ldr	r1, [r7, #24]
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e3      	bne.n	8005a90 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f847 	bl	8005b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ada:	e023      	b.n	8005b24 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d009      	beq.n	8005afc <HAL_UART_IRQHandler+0x524>
 8005ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f8b7 	bl	8005c68 <UART_Transmit_IT>
    return;
 8005afa:	e014      	b.n	8005b26 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <HAL_UART_IRQHandler+0x54e>
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f8f7 	bl	8005d08 <UART_EndTransmit_IT>
    return;
 8005b1a:	e004      	b.n	8005b26 <HAL_UART_IRQHandler+0x54e>
    return;
 8005b1c:	bf00      	nop
 8005b1e:	e002      	b.n	8005b26 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b20:	bf00      	nop
 8005b22:	e000      	b.n	8005b26 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b24:	bf00      	nop
  }
}
 8005b26:	37e8      	adds	r7, #232	@ 0xe8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b095      	sub	sp, #84	@ 0x54
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ba8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d119      	bne.n	8005c2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 0310 	bic.w	r3, r3, #16
 8005c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c18:	61ba      	str	r2, [r7, #24]
 8005c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6979      	ldr	r1, [r7, #20]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	613b      	str	r3, [r7, #16]
   return(result);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e5      	bne.n	8005bf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c3a:	bf00      	nop
 8005c3c:	3754      	adds	r7, #84	@ 0x54
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff ff7a 	bl	8005b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b21      	cmp	r3, #33	@ 0x21
 8005c7a:	d13e      	bne.n	8005cfa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c84:	d114      	bne.n	8005cb0 <UART_Transmit_IT+0x48>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d110      	bne.n	8005cb0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	1c9a      	adds	r2, r3, #2
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	621a      	str	r2, [r3, #32]
 8005cae:	e008      	b.n	8005cc2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6211      	str	r1, [r2, #32]
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10f      	bne.n	8005cf6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ce4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cf4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cfa:	2302      	movs	r3, #2
  }
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff feff 	bl	8005b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	@ 0x30
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b22      	cmp	r3, #34	@ 0x22
 8005d52:	f040 80aa 	bne.w	8005eaa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d5e:	d115      	bne.n	8005d8c <UART_Receive_IT+0x54>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d111      	bne.n	8005d8c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d8a:	e024      	b.n	8005dd6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d9a:	d007      	beq.n	8005dac <UART_Receive_IT+0x74>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <UART_Receive_IT+0x82>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	e008      	b.n	8005dcc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4619      	mov	r1, r3
 8005de4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d15d      	bne.n	8005ea6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0220 	bic.w	r2, r2, #32
 8005df8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d135      	bne.n	8005e9c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	613b      	str	r3, [r7, #16]
   return(result);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f023 0310 	bic.w	r3, r3, #16
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e56:	623a      	str	r2, [r7, #32]
 8005e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	69f9      	ldr	r1, [r7, #28]
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e5      	bne.n	8005e36 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d10a      	bne.n	8005e8e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fe67 	bl	8005b68 <HAL_UARTEx_RxEventCallback>
 8005e9a:	e002      	b.n	8005ea2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fe4f 	bl	8005b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e002      	b.n	8005eac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e000      	b.n	8005eac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
  }
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3730      	adds	r7, #48	@ 0x30
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb8:	b0c0      	sub	sp, #256	@ 0x100
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	68d9      	ldr	r1, [r3, #12]
 8005ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	ea40 0301 	orr.w	r3, r0, r1
 8005edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f0c:	f021 010c 	bic.w	r1, r1, #12
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2e:	6999      	ldr	r1, [r3, #24]
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	ea40 0301 	orr.w	r3, r0, r1
 8005f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b8f      	ldr	r3, [pc, #572]	@ (8006180 <UART_SetConfig+0x2cc>)
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d005      	beq.n	8005f54 <UART_SetConfig+0xa0>
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006184 <UART_SetConfig+0x2d0>)
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d104      	bne.n	8005f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f54:	f7fe ff14 	bl	8004d80 <HAL_RCC_GetPCLK2Freq>
 8005f58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f5c:	e003      	b.n	8005f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f5e:	f7fe fefb 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 8005f62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f70:	f040 810c 	bne.w	800618c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f86:	4622      	mov	r2, r4
 8005f88:	462b      	mov	r3, r5
 8005f8a:	1891      	adds	r1, r2, r2
 8005f8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f8e:	415b      	adcs	r3, r3
 8005f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f96:	4621      	mov	r1, r4
 8005f98:	eb12 0801 	adds.w	r8, r2, r1
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	eb43 0901 	adc.w	r9, r3, r1
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fb6:	4690      	mov	r8, r2
 8005fb8:	4699      	mov	r9, r3
 8005fba:	4623      	mov	r3, r4
 8005fbc:	eb18 0303 	adds.w	r3, r8, r3
 8005fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	eb49 0303 	adc.w	r3, r9, r3
 8005fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	18db      	adds	r3, r3, r3
 8005fe6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fe8:	4613      	mov	r3, r2
 8005fea:	eb42 0303 	adc.w	r3, r2, r3
 8005fee:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ff8:	f7fa f93a 	bl	8000270 <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4b61      	ldr	r3, [pc, #388]	@ (8006188 <UART_SetConfig+0x2d4>)
 8006002:	fba3 2302 	umull	r2, r3, r3, r2
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	011c      	lsls	r4, r3, #4
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006014:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	1891      	adds	r1, r2, r2
 8006022:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006024:	415b      	adcs	r3, r3
 8006026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800602c:	4641      	mov	r1, r8
 800602e:	eb12 0a01 	adds.w	sl, r2, r1
 8006032:	4649      	mov	r1, r9
 8006034:	eb43 0b01 	adc.w	fp, r3, r1
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800604c:	4692      	mov	sl, r2
 800604e:	469b      	mov	fp, r3
 8006050:	4643      	mov	r3, r8
 8006052:	eb1a 0303 	adds.w	r3, sl, r3
 8006056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800605a:	464b      	mov	r3, r9
 800605c:	eb4b 0303 	adc.w	r3, fp, r3
 8006060:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006070:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006078:	460b      	mov	r3, r1
 800607a:	18db      	adds	r3, r3, r3
 800607c:	643b      	str	r3, [r7, #64]	@ 0x40
 800607e:	4613      	mov	r3, r2
 8006080:	eb42 0303 	adc.w	r3, r2, r3
 8006084:	647b      	str	r3, [r7, #68]	@ 0x44
 8006086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800608a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800608e:	f7fa f8ef 	bl	8000270 <__aeabi_uldivmod>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4611      	mov	r1, r2
 8006098:	4b3b      	ldr	r3, [pc, #236]	@ (8006188 <UART_SetConfig+0x2d4>)
 800609a:	fba3 2301 	umull	r2, r3, r3, r1
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	2264      	movs	r2, #100	@ 0x64
 80060a2:	fb02 f303 	mul.w	r3, r2, r3
 80060a6:	1acb      	subs	r3, r1, r3
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060ae:	4b36      	ldr	r3, [pc, #216]	@ (8006188 <UART_SetConfig+0x2d4>)
 80060b0:	fba3 2302 	umull	r2, r3, r3, r2
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060bc:	441c      	add	r4, r3
 80060be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060d0:	4642      	mov	r2, r8
 80060d2:	464b      	mov	r3, r9
 80060d4:	1891      	adds	r1, r2, r2
 80060d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060d8:	415b      	adcs	r3, r3
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060e0:	4641      	mov	r1, r8
 80060e2:	1851      	adds	r1, r2, r1
 80060e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80060e6:	4649      	mov	r1, r9
 80060e8:	414b      	adcs	r3, r1
 80060ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060f8:	4659      	mov	r1, fp
 80060fa:	00cb      	lsls	r3, r1, #3
 80060fc:	4651      	mov	r1, sl
 80060fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006102:	4651      	mov	r1, sl
 8006104:	00ca      	lsls	r2, r1, #3
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	4603      	mov	r3, r0
 800610c:	4642      	mov	r2, r8
 800610e:	189b      	adds	r3, r3, r2
 8006110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006114:	464b      	mov	r3, r9
 8006116:	460a      	mov	r2, r1
 8006118:	eb42 0303 	adc.w	r3, r2, r3
 800611c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800612c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006134:	460b      	mov	r3, r1
 8006136:	18db      	adds	r3, r3, r3
 8006138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800613a:	4613      	mov	r3, r2
 800613c:	eb42 0303 	adc.w	r3, r2, r3
 8006140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800614a:	f7fa f891 	bl	8000270 <__aeabi_uldivmod>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <UART_SetConfig+0x2d4>)
 8006154:	fba3 1302 	umull	r1, r3, r3, r2
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	2164      	movs	r1, #100	@ 0x64
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	3332      	adds	r3, #50	@ 0x32
 8006166:	4a08      	ldr	r2, [pc, #32]	@ (8006188 <UART_SetConfig+0x2d4>)
 8006168:	fba2 2303 	umull	r2, r3, r2, r3
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	f003 0207 	and.w	r2, r3, #7
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4422      	add	r2, r4
 800617a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800617c:	e106      	b.n	800638c <UART_SetConfig+0x4d8>
 800617e:	bf00      	nop
 8006180:	40011000 	.word	0x40011000
 8006184:	40011400 	.word	0x40011400
 8006188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800618c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006190:	2200      	movs	r2, #0
 8006192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006196:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800619a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800619e:	4642      	mov	r2, r8
 80061a0:	464b      	mov	r3, r9
 80061a2:	1891      	adds	r1, r2, r2
 80061a4:	6239      	str	r1, [r7, #32]
 80061a6:	415b      	adcs	r3, r3
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061ae:	4641      	mov	r1, r8
 80061b0:	1854      	adds	r4, r2, r1
 80061b2:	4649      	mov	r1, r9
 80061b4:	eb43 0501 	adc.w	r5, r3, r1
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	00eb      	lsls	r3, r5, #3
 80061c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061c6:	00e2      	lsls	r2, r4, #3
 80061c8:	4614      	mov	r4, r2
 80061ca:	461d      	mov	r5, r3
 80061cc:	4643      	mov	r3, r8
 80061ce:	18e3      	adds	r3, r4, r3
 80061d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061d4:	464b      	mov	r3, r9
 80061d6:	eb45 0303 	adc.w	r3, r5, r3
 80061da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061fa:	4629      	mov	r1, r5
 80061fc:	008b      	lsls	r3, r1, #2
 80061fe:	4621      	mov	r1, r4
 8006200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006204:	4621      	mov	r1, r4
 8006206:	008a      	lsls	r2, r1, #2
 8006208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800620c:	f7fa f830 	bl	8000270 <__aeabi_uldivmod>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4b60      	ldr	r3, [pc, #384]	@ (8006398 <UART_SetConfig+0x4e4>)
 8006216:	fba3 2302 	umull	r2, r3, r3, r2
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	011c      	lsls	r4, r3, #4
 800621e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006222:	2200      	movs	r2, #0
 8006224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006228:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800622c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	1891      	adds	r1, r2, r2
 8006236:	61b9      	str	r1, [r7, #24]
 8006238:	415b      	adcs	r3, r3
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006240:	4641      	mov	r1, r8
 8006242:	1851      	adds	r1, r2, r1
 8006244:	6139      	str	r1, [r7, #16]
 8006246:	4649      	mov	r1, r9
 8006248:	414b      	adcs	r3, r1
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006258:	4659      	mov	r1, fp
 800625a:	00cb      	lsls	r3, r1, #3
 800625c:	4651      	mov	r1, sl
 800625e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006262:	4651      	mov	r1, sl
 8006264:	00ca      	lsls	r2, r1, #3
 8006266:	4610      	mov	r0, r2
 8006268:	4619      	mov	r1, r3
 800626a:	4603      	mov	r3, r0
 800626c:	4642      	mov	r2, r8
 800626e:	189b      	adds	r3, r3, r2
 8006270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006274:	464b      	mov	r3, r9
 8006276:	460a      	mov	r2, r1
 8006278:	eb42 0303 	adc.w	r3, r2, r3
 800627c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	67bb      	str	r3, [r7, #120]	@ 0x78
 800628a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006298:	4649      	mov	r1, r9
 800629a:	008b      	lsls	r3, r1, #2
 800629c:	4641      	mov	r1, r8
 800629e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062a2:	4641      	mov	r1, r8
 80062a4:	008a      	lsls	r2, r1, #2
 80062a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062aa:	f7f9 ffe1 	bl	8000270 <__aeabi_uldivmod>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4611      	mov	r1, r2
 80062b4:	4b38      	ldr	r3, [pc, #224]	@ (8006398 <UART_SetConfig+0x4e4>)
 80062b6:	fba3 2301 	umull	r2, r3, r3, r1
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	2264      	movs	r2, #100	@ 0x64
 80062be:	fb02 f303 	mul.w	r3, r2, r3
 80062c2:	1acb      	subs	r3, r1, r3
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	3332      	adds	r3, #50	@ 0x32
 80062c8:	4a33      	ldr	r2, [pc, #204]	@ (8006398 <UART_SetConfig+0x4e4>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062d4:	441c      	add	r4, r3
 80062d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062da:	2200      	movs	r2, #0
 80062dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80062de:	677a      	str	r2, [r7, #116]	@ 0x74
 80062e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062e4:	4642      	mov	r2, r8
 80062e6:	464b      	mov	r3, r9
 80062e8:	1891      	adds	r1, r2, r2
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	415b      	adcs	r3, r3
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062f4:	4641      	mov	r1, r8
 80062f6:	1851      	adds	r1, r2, r1
 80062f8:	6039      	str	r1, [r7, #0]
 80062fa:	4649      	mov	r1, r9
 80062fc:	414b      	adcs	r3, r1
 80062fe:	607b      	str	r3, [r7, #4]
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800630c:	4659      	mov	r1, fp
 800630e:	00cb      	lsls	r3, r1, #3
 8006310:	4651      	mov	r1, sl
 8006312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006316:	4651      	mov	r1, sl
 8006318:	00ca      	lsls	r2, r1, #3
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	4603      	mov	r3, r0
 8006320:	4642      	mov	r2, r8
 8006322:	189b      	adds	r3, r3, r2
 8006324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006326:	464b      	mov	r3, r9
 8006328:	460a      	mov	r2, r1
 800632a:	eb42 0303 	adc.w	r3, r2, r3
 800632e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	663b      	str	r3, [r7, #96]	@ 0x60
 800633a:	667a      	str	r2, [r7, #100]	@ 0x64
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006348:	4649      	mov	r1, r9
 800634a:	008b      	lsls	r3, r1, #2
 800634c:	4641      	mov	r1, r8
 800634e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006352:	4641      	mov	r1, r8
 8006354:	008a      	lsls	r2, r1, #2
 8006356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800635a:	f7f9 ff89 	bl	8000270 <__aeabi_uldivmod>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <UART_SetConfig+0x4e4>)
 8006364:	fba3 1302 	umull	r1, r3, r3, r2
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	2164      	movs	r1, #100	@ 0x64
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	3332      	adds	r3, #50	@ 0x32
 8006376:	4a08      	ldr	r2, [pc, #32]	@ (8006398 <UART_SetConfig+0x4e4>)
 8006378:	fba2 2303 	umull	r2, r3, r2, r3
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	f003 020f 	and.w	r2, r3, #15
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4422      	add	r2, r4
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006392:	46bd      	mov	sp, r7
 8006394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006398:	51eb851f 	.word	0x51eb851f

0800639c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80063aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063ae:	2b84      	cmp	r3, #132	@ 0x84
 80063b0:	d005      	beq.n	80063be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80063b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	3303      	adds	r3, #3
 80063bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80063be:	68fb      	ldr	r3, [r7, #12]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d2:	f3ef 8305 	mrs	r3, IPSR
 80063d6:	607b      	str	r3, [r7, #4]
  return(result);
 80063d8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063f4:	f001 f95c 	bl	80076b0 <vTaskStartScheduler>
  
  return osOK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	bd80      	pop	{r7, pc}

080063fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006400:	b089      	sub	sp, #36	@ 0x24
 8006402:	af04      	add	r7, sp, #16
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d020      	beq.n	8006452 <osThreadCreate+0x54>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01c      	beq.n	8006452 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685c      	ldr	r4, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691e      	ldr	r6, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff ffb6 	bl	800639c <makeFreeRtosPriority>
 8006430:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800643a:	9202      	str	r2, [sp, #8]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	9100      	str	r1, [sp, #0]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	4632      	mov	r2, r6
 8006444:	4629      	mov	r1, r5
 8006446:	4620      	mov	r0, r4
 8006448:	f000 ff64 	bl	8007314 <xTaskCreateStatic>
 800644c:	4603      	mov	r3, r0
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e01c      	b.n	800648c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685c      	ldr	r4, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800645e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff ff98 	bl	800639c <makeFreeRtosPriority>
 800646c:	4602      	mov	r2, r0
 800646e:	f107 030c 	add.w	r3, r7, #12
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	9200      	str	r2, [sp, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	4632      	mov	r2, r6
 800647a:	4629      	mov	r1, r5
 800647c:	4620      	mov	r0, r4
 800647e:	f000 ffa9 	bl	80073d4 <xTaskCreate>
 8006482:	4603      	mov	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d001      	beq.n	800648c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006488:	2300      	movs	r3, #0
 800648a:	e000      	b.n	800648e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006496 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <osDelay+0x16>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	e000      	b.n	80064ae <osDelay+0x18>
 80064ac:	2301      	movs	r3, #1
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f8c8 	bl	8007644 <vTaskDelay>
  
  return osOK;
 80064b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4619      	mov	r1, r3
 80064d4:	2001      	movs	r0, #1
 80064d6:	f000 fab6 	bl	8006a46 <xQueueCreateMutexStatic>
 80064da:	4603      	mov	r3, r0
 80064dc:	e003      	b.n	80064e6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80064de:	2001      	movs	r0, #1
 80064e0:	f000 fa99 	bl	8006a16 <xQueueCreateMutex>
 80064e4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80064fa:	2300      	movs	r3, #0
 80064fc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <osMutexWait+0x18>
    return osErrorParameter;
 8006504:	2380      	movs	r3, #128	@ 0x80
 8006506:	e03a      	b.n	800657e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d103      	bne.n	800651c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006514:	f04f 33ff 	mov.w	r3, #4294967295
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e009      	b.n	8006530 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d006      	beq.n	8006530 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <osMutexWait+0x40>
      ticks = 1;
 800652c:	2301      	movs	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006530:	f7ff ff4c 	bl	80063cc <inHandlerMode>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d017      	beq.n	800656a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800653a:	f107 0308 	add.w	r3, r7, #8
 800653e:	461a      	mov	r2, r3
 8006540:	2100      	movs	r1, #0
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fd3c 	bl	8006fc0 <xQueueReceiveFromISR>
 8006548:	4603      	mov	r3, r0
 800654a:	2b01      	cmp	r3, #1
 800654c:	d001      	beq.n	8006552 <osMutexWait+0x62>
      return osErrorOS;
 800654e:	23ff      	movs	r3, #255	@ 0xff
 8006550:	e015      	b.n	800657e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d011      	beq.n	800657c <osMutexWait+0x8c>
 8006558:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <osMutexWait+0x98>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	e008      	b.n	800657c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fc17 	bl	8006da0 <xQueueSemaphoreTake>
 8006572:	4603      	mov	r3, r0
 8006574:	2b01      	cmp	r3, #1
 8006576:	d001      	beq.n	800657c <osMutexWait+0x8c>
    return osErrorOS;
 8006578:	23ff      	movs	r3, #255	@ 0xff
 800657a:	e000      	b.n	800657e <osMutexWait+0x8e>
  }
  
  return osOK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006598:	2300      	movs	r3, #0
 800659a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800659c:	f7ff ff16 	bl	80063cc <inHandlerMode>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d016      	beq.n	80065d4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80065a6:	f107 0308 	add.w	r3, r7, #8
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fb67 	bl	8006c80 <xQueueGiveFromISR>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d001      	beq.n	80065bc <osMutexRelease+0x30>
      return osErrorOS;
 80065b8:	23ff      	movs	r3, #255	@ 0xff
 80065ba:	e017      	b.n	80065ec <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <osMutexRelease+0x5e>
 80065c2:	4b0c      	ldr	r3, [pc, #48]	@ (80065f4 <osMutexRelease+0x68>)
 80065c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	e00a      	b.n	80065ea <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80065d4:	2300      	movs	r3, #0
 80065d6:	2200      	movs	r2, #0
 80065d8:	2100      	movs	r1, #0
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fa4e 	bl	8006a7c <xQueueGenericSend>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d001      	beq.n	80065ea <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80065e6:	23ff      	movs	r3, #255	@ 0xff
 80065e8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80065ea:	68fb      	ldr	r3, [r7, #12]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	e000ed04 	.word	0xe000ed04

080065f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f103 0208 	add.w	r2, r3, #8
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f04f 32ff 	mov.w	r2, #4294967295
 8006610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f103 0208 	add.w	r2, r3, #8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f103 0208 	add.w	r2, r3, #8
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006652:	b480      	push	{r7}
 8006654:	b085      	sub	sp, #20
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	601a      	str	r2, [r3, #0]
}
 800668e:	bf00      	nop
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d103      	bne.n	80066ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	e00c      	b.n	80066d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3308      	adds	r3, #8
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e002      	b.n	80066c8 <vListInsert+0x2e>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d2f6      	bcs.n	80066c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	601a      	str	r2, [r3, #0]
}
 8006700:	bf00      	nop
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6892      	ldr	r2, [r2, #8]
 8006722:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6852      	ldr	r2, [r2, #4]
 800672c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d103      	bne.n	8006740 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	1e5a      	subs	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10b      	bne.n	800678c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006786:	bf00      	nop
 8006788:	bf00      	nop
 800678a:	e7fd      	b.n	8006788 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800678c:	f001 fef4 	bl	8008578 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006798:	68f9      	ldr	r1, [r7, #12]
 800679a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067bc:	3b01      	subs	r3, #1
 80067be:	68f9      	ldr	r1, [r7, #12]
 80067c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80067c2:	fb01 f303 	mul.w	r3, r1, r3
 80067c6:	441a      	add	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	22ff      	movs	r2, #255	@ 0xff
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	22ff      	movs	r2, #255	@ 0xff
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d114      	bne.n	800680c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d01a      	beq.n	8006820 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3310      	adds	r3, #16
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 f9a8 	bl	8007b44 <xTaskRemoveFromEventList>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d012      	beq.n	8006820 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <xQueueGenericReset+0xd0>)
 80067fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	e009      	b.n	8006820 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3310      	adds	r3, #16
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fef1 	bl	80065f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3324      	adds	r3, #36	@ 0x24
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff feec 	bl	80065f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006820:	f001 fedc 	bl	80085dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006824:	2301      	movs	r3, #1
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	e000ed04 	.word	0xe000ed04

08006834 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08e      	sub	sp, #56	@ 0x38
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10b      	bne.n	8006860 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10b      	bne.n	800687e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	e7fd      	b.n	800687a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <xQueueGenericCreateStatic+0x56>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <xQueueGenericCreateStatic+0x5a>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <xQueueGenericCreateStatic+0x5c>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	623b      	str	r3, [r7, #32]
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <xQueueGenericCreateStatic+0x84>
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <xQueueGenericCreateStatic+0x88>
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <xQueueGenericCreateStatic+0x8a>
 80068bc:	2300      	movs	r3, #0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10b      	bne.n	80068da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	61fb      	str	r3, [r7, #28]
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop
 80068d8:	e7fd      	b.n	80068d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80068da:	2348      	movs	r3, #72	@ 0x48
 80068dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b48      	cmp	r3, #72	@ 0x48
 80068e2:	d00b      	beq.n	80068fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	61bb      	str	r3, [r7, #24]
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	e7fd      	b.n	80068f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00d      	beq.n	8006924 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006910:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f840 	bl	80069a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006926:	4618      	mov	r0, r3
 8006928:	3730      	adds	r7, #48	@ 0x30
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800692e:	b580      	push	{r7, lr}
 8006930:	b08a      	sub	sp, #40	@ 0x28
 8006932:	af02      	add	r7, sp, #8
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	4613      	mov	r3, r2
 800693a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	613b      	str	r3, [r7, #16]
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	3348      	adds	r3, #72	@ 0x48
 8006968:	4618      	mov	r0, r3
 800696a:	f001 ff27 	bl	80087bc <pvPortMalloc>
 800696e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d011      	beq.n	800699a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	3348      	adds	r3, #72	@ 0x48
 800697e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006988:	79fa      	ldrb	r2, [r7, #7]
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	4613      	mov	r3, r2
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	68b9      	ldr	r1, [r7, #8]
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f805 	bl	80069a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800699a:	69bb      	ldr	r3, [r7, #24]
	}
 800699c:	4618      	mov	r0, r3
 800699e:	3720      	adds	r7, #32
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d103      	bne.n	80069c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e002      	b.n	80069c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069d2:	2101      	movs	r1, #1
 80069d4:	69b8      	ldr	r0, [r7, #24]
 80069d6:	f7ff fec3 	bl	8006760 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00e      	beq.n	8006a0e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006a02:	2300      	movs	r3, #0
 8006a04:	2200      	movs	r2, #0
 8006a06:	2100      	movs	r1, #0
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f837 	bl	8006a7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a20:	2301      	movs	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6939      	ldr	r1, [r7, #16]
 8006a2e:	6978      	ldr	r0, [r7, #20]
 8006a30:	f7ff ff7d 	bl	800692e <xQueueGenericCreate>
 8006a34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7ff ffd3 	bl	80069e2 <prvInitialiseMutex>

		return xNewQueue;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
	}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b088      	sub	sp, #32
 8006a4a:	af02      	add	r7, sp, #8
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	6039      	str	r1, [r7, #0]
 8006a50:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a52:	2301      	movs	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	2300      	movs	r3, #0
 8006a58:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2200      	movs	r2, #0
 8006a62:	6939      	ldr	r1, [r7, #16]
 8006a64:	6978      	ldr	r0, [r7, #20]
 8006a66:	f7ff fee5 	bl	8006834 <xQueueGenericCreateStatic>
 8006a6a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff ffb8 	bl	80069e2 <prvInitialiseMutex>

		return xNewQueue;
 8006a72:	68fb      	ldr	r3, [r7, #12]
	}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08e      	sub	sp, #56	@ 0x38
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10b      	bne.n	8006ab0 <xQueueGenericSend+0x34>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006aaa:	bf00      	nop
 8006aac:	bf00      	nop
 8006aae:	e7fd      	b.n	8006aac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d103      	bne.n	8006abe <xQueueGenericSend+0x42>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <xQueueGenericSend+0x46>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <xQueueGenericSend+0x48>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10b      	bne.n	8006ae0 <xQueueGenericSend+0x64>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	e7fd      	b.n	8006adc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d103      	bne.n	8006aee <xQueueGenericSend+0x72>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <xQueueGenericSend+0x76>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <xQueueGenericSend+0x78>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <xQueueGenericSend+0x94>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	623b      	str	r3, [r7, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	e7fd      	b.n	8006b0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b10:	f001 f9d8 	bl	8007ec4 <xTaskGetSchedulerState>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <xQueueGenericSend+0xa4>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <xQueueGenericSend+0xa8>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <xQueueGenericSend+0xaa>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10b      	bne.n	8006b42 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	61fb      	str	r3, [r7, #28]
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	e7fd      	b.n	8006b3e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b42:	f001 fd19 	bl	8008578 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d302      	bcc.n	8006b58 <xQueueGenericSend+0xdc>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d129      	bne.n	8006bac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b5e:	f000 fac9 	bl	80070f4 <prvCopyDataToQueue>
 8006b62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	3324      	adds	r3, #36	@ 0x24
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 ffe7 	bl	8007b44 <xTaskRemoveFromEventList>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d013      	beq.n	8006ba4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c7c <xQueueGenericSend+0x200>)
 8006b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	e00a      	b.n	8006ba4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d007      	beq.n	8006ba4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b94:	4b39      	ldr	r3, [pc, #228]	@ (8006c7c <xQueueGenericSend+0x200>)
 8006b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ba4:	f001 fd1a 	bl	80085dc <vPortExitCritical>
				return pdPASS;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e063      	b.n	8006c74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bb2:	f001 fd13 	bl	80085dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e05c      	b.n	8006c74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d106      	bne.n	8006bce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bc0:	f107 0314 	add.w	r3, r7, #20
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 f821 	bl	8007c0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bce:	f001 fd05 	bl	80085dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bd2:	f000 fdcf 	bl	8007774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bd6:	f001 fccf 	bl	8008578 <vPortEnterCritical>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006be0:	b25b      	sxtb	r3, r3
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d103      	bne.n	8006bf0 <xQueueGenericSend+0x174>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bf6:	b25b      	sxtb	r3, r3
 8006bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfc:	d103      	bne.n	8006c06 <xQueueGenericSend+0x18a>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c06:	f001 fce9 	bl	80085dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c0a:	1d3a      	adds	r2, r7, #4
 8006c0c:	f107 0314 	add.w	r3, r7, #20
 8006c10:	4611      	mov	r1, r2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 f810 	bl	8007c38 <xTaskCheckForTimeOut>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d124      	bne.n	8006c68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c20:	f000 fb60 	bl	80072e4 <prvIsQueueFull>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d018      	beq.n	8006c5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	3310      	adds	r3, #16
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4611      	mov	r1, r2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 ff60 	bl	8007af8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c3a:	f000 faeb 	bl	8007214 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c3e:	f000 fda7 	bl	8007790 <xTaskResumeAll>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f47f af7c 	bne.w	8006b42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c7c <xQueueGenericSend+0x200>)
 8006c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	e772      	b.n	8006b42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c5e:	f000 fad9 	bl	8007214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c62:	f000 fd95 	bl	8007790 <xTaskResumeAll>
 8006c66:	e76c      	b.n	8006b42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c6a:	f000 fad3 	bl	8007214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c6e:	f000 fd8f 	bl	8007790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3738      	adds	r7, #56	@ 0x38
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08e      	sub	sp, #56	@ 0x38
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10b      	bne.n	8006cac <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	623b      	str	r3, [r7, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	61fb      	str	r3, [r7, #28]
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d103      	bne.n	8006cdc <xQueueGiveFromISR+0x5c>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <xQueueGiveFromISR+0x60>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e000      	b.n	8006ce2 <xQueueGiveFromISR+0x62>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10b      	bne.n	8006cfe <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	61bb      	str	r3, [r7, #24]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cfe:	f001 fd1b 	bl	8008738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d02:	f3ef 8211 	mrs	r2, BASEPRI
 8006d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	617a      	str	r2, [r7, #20]
 8006d18:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d22b      	bcs.n	8006d86 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d40:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d112      	bne.n	8006d70 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d016      	beq.n	8006d80 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	3324      	adds	r3, #36	@ 0x24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fef4 	bl	8007b44 <xTaskRemoveFromEventList>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00e      	beq.n	8006d80 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e007      	b.n	8006d80 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d74:	3301      	adds	r3, #1
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	b25a      	sxtb	r2, r3
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d80:	2301      	movs	r3, #1
 8006d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d84:	e001      	b.n	8006d8a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3738      	adds	r7, #56	@ 0x38
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08e      	sub	sp, #56	@ 0x38
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	623b      	str	r3, [r7, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	61fb      	str	r3, [r7, #28]
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	e7fd      	b.n	8006df0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006df4:	f001 f866 	bl	8007ec4 <xTaskGetSchedulerState>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <xQueueSemaphoreTake+0x64>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <xQueueSemaphoreTake+0x68>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <xQueueSemaphoreTake+0x6a>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	61bb      	str	r3, [r7, #24]
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	e7fd      	b.n	8006e22 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e26:	f001 fba7 	bl	8008578 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d024      	beq.n	8006e80 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e38:	1e5a      	subs	r2, r3, #1
 8006e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d104      	bne.n	8006e50 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e46:	f001 f9e9 	bl	800821c <pvTaskIncrementMutexHeldCount>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00f      	beq.n	8006e78 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5a:	3310      	adds	r3, #16
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fe71 	bl	8007b44 <xTaskRemoveFromEventList>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e68:	4b54      	ldr	r3, [pc, #336]	@ (8006fbc <xQueueSemaphoreTake+0x21c>)
 8006e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e78:	f001 fbb0 	bl	80085dc <vPortExitCritical>
				return pdPASS;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e098      	b.n	8006fb2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d112      	bne.n	8006eac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	617b      	str	r3, [r7, #20]
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	e7fd      	b.n	8006ea0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ea4:	f001 fb9a 	bl	80085dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e082      	b.n	8006fb2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb2:	f107 030c 	add.w	r3, r7, #12
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 fea8 	bl	8007c0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec0:	f001 fb8c 	bl	80085dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec4:	f000 fc56 	bl	8007774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ec8:	f001 fb56 	bl	8008578 <vPortEnterCritical>
 8006ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ece:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ed2:	b25b      	sxtb	r3, r3
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed8:	d103      	bne.n	8006ee2 <xQueueSemaphoreTake+0x142>
 8006eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ee8:	b25b      	sxtb	r3, r3
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eee:	d103      	bne.n	8006ef8 <xQueueSemaphoreTake+0x158>
 8006ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ef8:	f001 fb70 	bl	80085dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006efc:	463a      	mov	r2, r7
 8006efe:	f107 030c 	add.w	r3, r7, #12
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fe97 	bl	8007c38 <xTaskCheckForTimeOut>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d132      	bne.n	8006f76 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f12:	f000 f9d1 	bl	80072b8 <prvIsQueueEmpty>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d026      	beq.n	8006f6a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006f24:	f001 fb28 	bl	8008578 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 ffe7 	bl	8007f00 <xTaskPriorityInherit>
 8006f32:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006f34:	f001 fb52 	bl	80085dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3a:	3324      	adds	r3, #36	@ 0x24
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fdd9 	bl	8007af8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f48:	f000 f964 	bl	8007214 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f4c:	f000 fc20 	bl	8007790 <xTaskResumeAll>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f47f af67 	bne.w	8006e26 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006f58:	4b18      	ldr	r3, [pc, #96]	@ (8006fbc <xQueueSemaphoreTake+0x21c>)
 8006f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	e75d      	b.n	8006e26 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f6c:	f000 f952 	bl	8007214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f70:	f000 fc0e 	bl	8007790 <xTaskResumeAll>
 8006f74:	e757      	b.n	8006e26 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f78:	f000 f94c 	bl	8007214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f7c:	f000 fc08 	bl	8007790 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f82:	f000 f999 	bl	80072b8 <prvIsQueueEmpty>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f43f af4c 	beq.w	8006e26 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00d      	beq.n	8006fb0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006f94:	f001 faf0 	bl	8008578 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f9a:	f000 f893 	bl	80070c4 <prvGetDisinheritPriorityAfterTimeout>
 8006f9e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 f8a8 	bl	80080fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006fac:	f001 fb16 	bl	80085dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3738      	adds	r7, #56	@ 0x38
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08e      	sub	sp, #56	@ 0x38
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	623b      	str	r3, [r7, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d103      	bne.n	8006ffc <xQueueReceiveFromISR+0x3c>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <xQueueReceiveFromISR+0x40>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <xQueueReceiveFromISR+0x42>
 8007000:	2300      	movs	r3, #0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10b      	bne.n	800701e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	61fb      	str	r3, [r7, #28]
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	e7fd      	b.n	800701a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800701e:	f001 fb8b 	bl	8008738 <vPortValidateInterruptPriority>
	__asm volatile
 8007022:	f3ef 8211 	mrs	r2, BASEPRI
 8007026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	61ba      	str	r2, [r7, #24]
 8007038:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800703a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800703c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007042:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	2b00      	cmp	r3, #0
 8007048:	d02f      	beq.n	80070aa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007058:	f000 f8b6 	bl	80071c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	1e5a      	subs	r2, r3, #1
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007064:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d112      	bne.n	8007094 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d016      	beq.n	80070a4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	3310      	adds	r3, #16
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fd62 	bl	8007b44 <xTaskRemoveFromEventList>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e007      	b.n	80070a4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007098:	3301      	adds	r3, #1
 800709a:	b2db      	uxtb	r3, r3
 800709c:	b25a      	sxtb	r2, r3
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80070a4:	2301      	movs	r3, #1
 80070a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a8:	e001      	b.n	80070ae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f383 8811 	msr	BASEPRI, r3
}
 80070b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3738      	adds	r7, #56	@ 0x38
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d006      	beq.n	80070e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f1c3 0307 	rsb	r3, r3, #7
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e001      	b.n	80070e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070e6:	68fb      	ldr	r3, [r7, #12]
	}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007108:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10d      	bne.n	800712e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d14d      	bne.n	80071b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	4618      	mov	r0, r3
 8007120:	f000 ff64 	bl	8007fec <xTaskPriorityDisinherit>
 8007124:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	609a      	str	r2, [r3, #8]
 800712c:	e043      	b.n	80071b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d119      	bne.n	8007168 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6858      	ldr	r0, [r3, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	461a      	mov	r2, r3
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	f001 ff39 	bl	8008fb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	441a      	add	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	429a      	cmp	r2, r3
 800715c:	d32b      	bcc.n	80071b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	e026      	b.n	80071b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	68d8      	ldr	r0, [r3, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007170:	461a      	mov	r2, r3
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	f001 ff1f 	bl	8008fb6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007180:	425b      	negs	r3, r3
 8007182:	441a      	add	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d207      	bcs.n	80071a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719c:	425b      	negs	r3, r3
 800719e:	441a      	add	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d105      	bne.n	80071b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80071be:	697b      	ldr	r3, [r7, #20]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d018      	beq.n	800720c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	441a      	add	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d303      	bcc.n	80071fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68d9      	ldr	r1, [r3, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007204:	461a      	mov	r2, r3
 8007206:	6838      	ldr	r0, [r7, #0]
 8007208:	f001 fed5 	bl	8008fb6 <memcpy>
	}
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800721c:	f001 f9ac 	bl	8008578 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007226:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007228:	e011      	b.n	800724e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	d012      	beq.n	8007258 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3324      	adds	r3, #36	@ 0x24
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fc84 	bl	8007b44 <xTaskRemoveFromEventList>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007242:	f000 fd5d 	bl	8007d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	3b01      	subs	r3, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800724e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007252:	2b00      	cmp	r3, #0
 8007254:	dce9      	bgt.n	800722a <prvUnlockQueue+0x16>
 8007256:	e000      	b.n	800725a <prvUnlockQueue+0x46>
					break;
 8007258:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	22ff      	movs	r2, #255	@ 0xff
 800725e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007262:	f001 f9bb 	bl	80085dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007266:	f001 f987 	bl	8008578 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007270:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007272:	e011      	b.n	8007298 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d012      	beq.n	80072a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3310      	adds	r3, #16
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fc5f 	bl	8007b44 <xTaskRemoveFromEventList>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800728c:	f000 fd38 	bl	8007d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	3b01      	subs	r3, #1
 8007294:	b2db      	uxtb	r3, r3
 8007296:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	dce9      	bgt.n	8007274 <prvUnlockQueue+0x60>
 80072a0:	e000      	b.n	80072a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	22ff      	movs	r2, #255	@ 0xff
 80072a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80072ac:	f001 f996 	bl	80085dc <vPortExitCritical>
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072c0:	f001 f95a 	bl	8008578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072cc:	2301      	movs	r3, #1
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e001      	b.n	80072d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072d6:	f001 f981 	bl	80085dc <vPortExitCritical>

	return xReturn;
 80072da:	68fb      	ldr	r3, [r7, #12]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072ec:	f001 f944 	bl	8008578 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d102      	bne.n	8007302 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	e001      	b.n	8007306 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007306:	f001 f969 	bl	80085dc <vPortExitCritical>

	return xReturn;
 800730a:	68fb      	ldr	r3, [r7, #12]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08e      	sub	sp, #56	@ 0x38
 8007318:	af04      	add	r7, sp, #16
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10b      	bne.n	8007340 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	623b      	str	r3, [r7, #32]
}
 800733a:	bf00      	nop
 800733c:	bf00      	nop
 800733e:	e7fd      	b.n	800733c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10b      	bne.n	800735e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	61fb      	str	r3, [r7, #28]
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	e7fd      	b.n	800735a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800735e:	2354      	movs	r3, #84	@ 0x54
 8007360:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b54      	cmp	r3, #84	@ 0x54
 8007366:	d00b      	beq.n	8007380 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	61bb      	str	r3, [r7, #24]
}
 800737a:	bf00      	nop
 800737c:	bf00      	nop
 800737e:	e7fd      	b.n	800737c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007380:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01e      	beq.n	80073c6 <xTaskCreateStatic+0xb2>
 8007388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01b      	beq.n	80073c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800738e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007390:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007396:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	2202      	movs	r2, #2
 800739c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073a0:	2300      	movs	r3, #0
 80073a2:	9303      	str	r3, [sp, #12]
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	9302      	str	r3, [sp, #8]
 80073a8:	f107 0314 	add.w	r3, r7, #20
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f850 	bl	800745e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073c0:	f000 f8d6 	bl	8007570 <prvAddNewTaskToReadyList>
 80073c4:	e001      	b.n	80073ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073ca:	697b      	ldr	r3, [r7, #20]
	}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3728      	adds	r7, #40	@ 0x28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08c      	sub	sp, #48	@ 0x30
 80073d8:	af04      	add	r7, sp, #16
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	4613      	mov	r3, r2
 80073e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 f9e7 	bl	80087bc <pvPortMalloc>
 80073ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00e      	beq.n	8007414 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073f6:	2054      	movs	r0, #84	@ 0x54
 80073f8:	f001 f9e0 	bl	80087bc <pvPortMalloc>
 80073fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	631a      	str	r2, [r3, #48]	@ 0x30
 800740a:	e005      	b.n	8007418 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800740c:	6978      	ldr	r0, [r7, #20]
 800740e:	f001 faa3 	bl	8008958 <vPortFree>
 8007412:	e001      	b.n	8007418 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007414:	2300      	movs	r3, #0
 8007416:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d017      	beq.n	800744e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007426:	88fa      	ldrh	r2, [r7, #6]
 8007428:	2300      	movs	r3, #0
 800742a:	9303      	str	r3, [sp, #12]
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	9302      	str	r3, [sp, #8]
 8007430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f80e 	bl	800745e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007442:	69f8      	ldr	r0, [r7, #28]
 8007444:	f000 f894 	bl	8007570 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007448:	2301      	movs	r3, #1
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	e002      	b.n	8007454 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800744e:	f04f 33ff 	mov.w	r3, #4294967295
 8007452:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007454:	69bb      	ldr	r3, [r7, #24]
	}
 8007456:	4618      	mov	r0, r3
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b088      	sub	sp, #32
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
 800746a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007476:	3b01      	subs	r3, #1
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	f023 0307 	bic.w	r3, r3, #7
 8007484:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	617b      	str	r3, [r7, #20]
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	e7fd      	b.n	80074a4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01f      	beq.n	80074ee <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	e012      	b.n	80074da <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	7819      	ldrb	r1, [r3, #0]
 80074bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	4413      	add	r3, r2
 80074c2:	3334      	adds	r3, #52	@ 0x34
 80074c4:	460a      	mov	r2, r1
 80074c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d006      	beq.n	80074e2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3301      	adds	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	2b0f      	cmp	r3, #15
 80074de:	d9e9      	bls.n	80074b4 <prvInitialiseNewTask+0x56>
 80074e0:	e000      	b.n	80074e4 <prvInitialiseNewTask+0x86>
			{
				break;
 80074e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074ec:	e003      	b.n	80074f6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f8:	2b06      	cmp	r3, #6
 80074fa:	d901      	bls.n	8007500 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074fc:	2306      	movs	r3, #6
 80074fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007504:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800750a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	2200      	movs	r2, #0
 8007510:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	3304      	adds	r3, #4
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff f88e 	bl	8006638 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800751c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751e:	3318      	adds	r3, #24
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff f889 	bl	8006638 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800752a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752e:	f1c3 0207 	rsb	r2, r3, #7
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800753a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800753c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753e:	2200      	movs	r2, #0
 8007540:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	68f9      	ldr	r1, [r7, #12]
 800754e:	69b8      	ldr	r0, [r7, #24]
 8007550:	f000 fede 	bl	8008310 <pxPortInitialiseStack>
 8007554:	4602      	mov	r2, r0
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800755a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007566:	bf00      	nop
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007578:	f000 fffe 	bl	8008578 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800757c:	4b2a      	ldr	r3, [pc, #168]	@ (8007628 <prvAddNewTaskToReadyList+0xb8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	4a29      	ldr	r2, [pc, #164]	@ (8007628 <prvAddNewTaskToReadyList+0xb8>)
 8007584:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007586:	4b29      	ldr	r3, [pc, #164]	@ (800762c <prvAddNewTaskToReadyList+0xbc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800758e:	4a27      	ldr	r2, [pc, #156]	@ (800762c <prvAddNewTaskToReadyList+0xbc>)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007594:	4b24      	ldr	r3, [pc, #144]	@ (8007628 <prvAddNewTaskToReadyList+0xb8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d110      	bne.n	80075be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800759c:	f000 fbd4 	bl	8007d48 <prvInitialiseTaskLists>
 80075a0:	e00d      	b.n	80075be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075a2:	4b23      	ldr	r3, [pc, #140]	@ (8007630 <prvAddNewTaskToReadyList+0xc0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075aa:	4b20      	ldr	r3, [pc, #128]	@ (800762c <prvAddNewTaskToReadyList+0xbc>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d802      	bhi.n	80075be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b8:	4a1c      	ldr	r2, [pc, #112]	@ (800762c <prvAddNewTaskToReadyList+0xbc>)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075be:	4b1d      	ldr	r3, [pc, #116]	@ (8007634 <prvAddNewTaskToReadyList+0xc4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007634 <prvAddNewTaskToReadyList+0xc4>)
 80075c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	2201      	movs	r2, #1
 80075ce:	409a      	lsls	r2, r3
 80075d0:	4b19      	ldr	r3, [pc, #100]	@ (8007638 <prvAddNewTaskToReadyList+0xc8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	4a18      	ldr	r2, [pc, #96]	@ (8007638 <prvAddNewTaskToReadyList+0xc8>)
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4a15      	ldr	r2, [pc, #84]	@ (800763c <prvAddNewTaskToReadyList+0xcc>)
 80075e8:	441a      	add	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4619      	mov	r1, r3
 80075f0:	4610      	mov	r0, r2
 80075f2:	f7ff f82e 	bl	8006652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075f6:	f000 fff1 	bl	80085dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <prvAddNewTaskToReadyList+0xc0>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00e      	beq.n	8007620 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007602:	4b0a      	ldr	r3, [pc, #40]	@ (800762c <prvAddNewTaskToReadyList+0xbc>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760c:	429a      	cmp	r2, r3
 800760e:	d207      	bcs.n	8007620 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007610:	4b0b      	ldr	r3, [pc, #44]	@ (8007640 <prvAddNewTaskToReadyList+0xd0>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	2000059c 	.word	0x2000059c
 800762c:	2000049c 	.word	0x2000049c
 8007630:	200005a8 	.word	0x200005a8
 8007634:	200005b8 	.word	0x200005b8
 8007638:	200005a4 	.word	0x200005a4
 800763c:	200004a0 	.word	0x200004a0
 8007640:	e000ed04 	.word	0xe000ed04

08007644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d018      	beq.n	8007688 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007656:	4b14      	ldr	r3, [pc, #80]	@ (80076a8 <vTaskDelay+0x64>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00b      	beq.n	8007676 <vTaskDelay+0x32>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	60bb      	str	r3, [r7, #8]
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	e7fd      	b.n	8007672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007676:	f000 f87d 	bl	8007774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800767a:	2100      	movs	r1, #0
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fde1 	bl	8008244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007682:	f000 f885 	bl	8007790 <xTaskResumeAll>
 8007686:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d107      	bne.n	800769e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800768e:	4b07      	ldr	r3, [pc, #28]	@ (80076ac <vTaskDelay+0x68>)
 8007690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	200005c4 	.word	0x200005c4
 80076ac:	e000ed04 	.word	0xe000ed04

080076b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	@ 0x28
 80076b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076be:	463a      	mov	r2, r7
 80076c0:	1d39      	adds	r1, r7, #4
 80076c2:	f107 0308 	add.w	r3, r7, #8
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7f9 fb8c 	bl	8000de4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	9202      	str	r2, [sp, #8]
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	2300      	movs	r3, #0
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	2300      	movs	r3, #0
 80076dc:	460a      	mov	r2, r1
 80076de:	491f      	ldr	r1, [pc, #124]	@ (800775c <vTaskStartScheduler+0xac>)
 80076e0:	481f      	ldr	r0, [pc, #124]	@ (8007760 <vTaskStartScheduler+0xb0>)
 80076e2:	f7ff fe17 	bl	8007314 <xTaskCreateStatic>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007764 <vTaskStartScheduler+0xb4>)
 80076ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <vTaskStartScheduler+0xb4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076f4:	2301      	movs	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	e001      	b.n	80076fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d116      	bne.n	8007732 <vTaskStartScheduler+0x82>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	613b      	str	r3, [r7, #16]
}
 8007716:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007718:	4b13      	ldr	r3, [pc, #76]	@ (8007768 <vTaskStartScheduler+0xb8>)
 800771a:	f04f 32ff 	mov.w	r2, #4294967295
 800771e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007720:	4b12      	ldr	r3, [pc, #72]	@ (800776c <vTaskStartScheduler+0xbc>)
 8007722:	2201      	movs	r2, #1
 8007724:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007726:	4b12      	ldr	r3, [pc, #72]	@ (8007770 <vTaskStartScheduler+0xc0>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800772c:	f000 fe80 	bl	8008430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007730:	e00f      	b.n	8007752 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d10b      	bne.n	8007752 <vTaskStartScheduler+0xa2>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	60fb      	str	r3, [r7, #12]
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <vTaskStartScheduler+0x9e>
}
 8007752:	bf00      	nop
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	0800a258 	.word	0x0800a258
 8007760:	08007d19 	.word	0x08007d19
 8007764:	200005c0 	.word	0x200005c0
 8007768:	200005bc 	.word	0x200005bc
 800776c:	200005a8 	.word	0x200005a8
 8007770:	200005a0 	.word	0x200005a0

08007774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007778:	4b04      	ldr	r3, [pc, #16]	@ (800778c <vTaskSuspendAll+0x18>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3301      	adds	r3, #1
 800777e:	4a03      	ldr	r2, [pc, #12]	@ (800778c <vTaskSuspendAll+0x18>)
 8007780:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007782:	bf00      	nop
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	200005c4 	.word	0x200005c4

08007790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800779a:	2300      	movs	r3, #0
 800779c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800779e:	4b42      	ldr	r3, [pc, #264]	@ (80078a8 <xTaskResumeAll+0x118>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10b      	bne.n	80077be <xTaskResumeAll+0x2e>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	603b      	str	r3, [r7, #0]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077be:	f000 fedb 	bl	8008578 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077c2:	4b39      	ldr	r3, [pc, #228]	@ (80078a8 <xTaskResumeAll+0x118>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	4a37      	ldr	r2, [pc, #220]	@ (80078a8 <xTaskResumeAll+0x118>)
 80077ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077cc:	4b36      	ldr	r3, [pc, #216]	@ (80078a8 <xTaskResumeAll+0x118>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d161      	bne.n	8007898 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077d4:	4b35      	ldr	r3, [pc, #212]	@ (80078ac <xTaskResumeAll+0x11c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d05d      	beq.n	8007898 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077dc:	e02e      	b.n	800783c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077de:	4b34      	ldr	r3, [pc, #208]	@ (80078b0 <xTaskResumeAll+0x120>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3318      	adds	r3, #24
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe ff8e 	bl	800670c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fe ff89 	bl	800670c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fe:	2201      	movs	r2, #1
 8007800:	409a      	lsls	r2, r3
 8007802:	4b2c      	ldr	r3, [pc, #176]	@ (80078b4 <xTaskResumeAll+0x124>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4313      	orrs	r3, r2
 8007808:	4a2a      	ldr	r2, [pc, #168]	@ (80078b4 <xTaskResumeAll+0x124>)
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4a27      	ldr	r2, [pc, #156]	@ (80078b8 <xTaskResumeAll+0x128>)
 800781a:	441a      	add	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f7fe ff15 	bl	8006652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782c:	4b23      	ldr	r3, [pc, #140]	@ (80078bc <xTaskResumeAll+0x12c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007832:	429a      	cmp	r2, r3
 8007834:	d302      	bcc.n	800783c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007836:	4b22      	ldr	r3, [pc, #136]	@ (80078c0 <xTaskResumeAll+0x130>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800783c:	4b1c      	ldr	r3, [pc, #112]	@ (80078b0 <xTaskResumeAll+0x120>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1cc      	bne.n	80077de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800784a:	f000 fb1b 	bl	8007e84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800784e:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <xTaskResumeAll+0x134>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d010      	beq.n	800787c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800785a:	f000 f837 	bl	80078cc <xTaskIncrementTick>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007864:	4b16      	ldr	r3, [pc, #88]	@ (80078c0 <xTaskResumeAll+0x130>)
 8007866:	2201      	movs	r2, #1
 8007868:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3b01      	subs	r3, #1
 800786e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1f1      	bne.n	800785a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007876:	4b13      	ldr	r3, [pc, #76]	@ (80078c4 <xTaskResumeAll+0x134>)
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800787c:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <xTaskResumeAll+0x130>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d009      	beq.n	8007898 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007884:	2301      	movs	r3, #1
 8007886:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007888:	4b0f      	ldr	r3, [pc, #60]	@ (80078c8 <xTaskResumeAll+0x138>)
 800788a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007898:	f000 fea0 	bl	80085dc <vPortExitCritical>

	return xAlreadyYielded;
 800789c:	68bb      	ldr	r3, [r7, #8]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200005c4 	.word	0x200005c4
 80078ac:	2000059c 	.word	0x2000059c
 80078b0:	2000055c 	.word	0x2000055c
 80078b4:	200005a4 	.word	0x200005a4
 80078b8:	200004a0 	.word	0x200004a0
 80078bc:	2000049c 	.word	0x2000049c
 80078c0:	200005b0 	.word	0x200005b0
 80078c4:	200005ac 	.word	0x200005ac
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078d6:	4b4f      	ldr	r3, [pc, #316]	@ (8007a14 <xTaskIncrementTick+0x148>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 808f 	bne.w	80079fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078e0:	4b4d      	ldr	r3, [pc, #308]	@ (8007a18 <xTaskIncrementTick+0x14c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078e8:	4a4b      	ldr	r2, [pc, #300]	@ (8007a18 <xTaskIncrementTick+0x14c>)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d121      	bne.n	8007938 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078f4:	4b49      	ldr	r3, [pc, #292]	@ (8007a1c <xTaskIncrementTick+0x150>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <xTaskIncrementTick+0x4a>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	603b      	str	r3, [r7, #0]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <xTaskIncrementTick+0x46>
 8007916:	4b41      	ldr	r3, [pc, #260]	@ (8007a1c <xTaskIncrementTick+0x150>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	4b40      	ldr	r3, [pc, #256]	@ (8007a20 <xTaskIncrementTick+0x154>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a3e      	ldr	r2, [pc, #248]	@ (8007a1c <xTaskIncrementTick+0x150>)
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	4a3e      	ldr	r2, [pc, #248]	@ (8007a20 <xTaskIncrementTick+0x154>)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a24 <xTaskIncrementTick+0x158>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3301      	adds	r3, #1
 8007930:	4a3c      	ldr	r2, [pc, #240]	@ (8007a24 <xTaskIncrementTick+0x158>)
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	f000 faa6 	bl	8007e84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007938:	4b3b      	ldr	r3, [pc, #236]	@ (8007a28 <xTaskIncrementTick+0x15c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	429a      	cmp	r2, r3
 8007940:	d348      	bcc.n	80079d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007942:	4b36      	ldr	r3, [pc, #216]	@ (8007a1c <xTaskIncrementTick+0x150>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800794c:	4b36      	ldr	r3, [pc, #216]	@ (8007a28 <xTaskIncrementTick+0x15c>)
 800794e:	f04f 32ff 	mov.w	r2, #4294967295
 8007952:	601a      	str	r2, [r3, #0]
					break;
 8007954:	e03e      	b.n	80079d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007956:	4b31      	ldr	r3, [pc, #196]	@ (8007a1c <xTaskIncrementTick+0x150>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	429a      	cmp	r2, r3
 800796c:	d203      	bcs.n	8007976 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800796e:	4a2e      	ldr	r2, [pc, #184]	@ (8007a28 <xTaskIncrementTick+0x15c>)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007974:	e02e      	b.n	80079d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3304      	adds	r3, #4
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fec6 	bl	800670c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	3318      	adds	r3, #24
 800798c:	4618      	mov	r0, r3
 800798e:	f7fe febd 	bl	800670c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007996:	2201      	movs	r2, #1
 8007998:	409a      	lsls	r2, r3
 800799a:	4b24      	ldr	r3, [pc, #144]	@ (8007a2c <xTaskIncrementTick+0x160>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4313      	orrs	r3, r2
 80079a0:	4a22      	ldr	r2, [pc, #136]	@ (8007a2c <xTaskIncrementTick+0x160>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007a30 <xTaskIncrementTick+0x164>)
 80079b2:	441a      	add	r2, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe fe49 	bl	8006652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a34 <xTaskIncrementTick+0x168>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d3b9      	bcc.n	8007942 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80079ce:	2301      	movs	r3, #1
 80079d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079d2:	e7b6      	b.n	8007942 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079d4:	4b17      	ldr	r3, [pc, #92]	@ (8007a34 <xTaskIncrementTick+0x168>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079da:	4915      	ldr	r1, [pc, #84]	@ (8007a30 <xTaskIncrementTick+0x164>)
 80079dc:	4613      	mov	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	440b      	add	r3, r1
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d901      	bls.n	80079f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079f0:	4b11      	ldr	r3, [pc, #68]	@ (8007a38 <xTaskIncrementTick+0x16c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d007      	beq.n	8007a08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	e004      	b.n	8007a08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079fe:	4b0f      	ldr	r3, [pc, #60]	@ (8007a3c <xTaskIncrementTick+0x170>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3301      	adds	r3, #1
 8007a04:	4a0d      	ldr	r2, [pc, #52]	@ (8007a3c <xTaskIncrementTick+0x170>)
 8007a06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a08:	697b      	ldr	r3, [r7, #20]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	200005c4 	.word	0x200005c4
 8007a18:	200005a0 	.word	0x200005a0
 8007a1c:	20000554 	.word	0x20000554
 8007a20:	20000558 	.word	0x20000558
 8007a24:	200005b4 	.word	0x200005b4
 8007a28:	200005bc 	.word	0x200005bc
 8007a2c:	200005a4 	.word	0x200005a4
 8007a30:	200004a0 	.word	0x200004a0
 8007a34:	2000049c 	.word	0x2000049c
 8007a38:	200005b0 	.word	0x200005b0
 8007a3c:	200005ac 	.word	0x200005ac

08007a40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a46:	4b27      	ldr	r3, [pc, #156]	@ (8007ae4 <vTaskSwitchContext+0xa4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a4e:	4b26      	ldr	r3, [pc, #152]	@ (8007ae8 <vTaskSwitchContext+0xa8>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a54:	e040      	b.n	8007ad8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007a56:	4b24      	ldr	r3, [pc, #144]	@ (8007ae8 <vTaskSwitchContext+0xa8>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5c:	4b23      	ldr	r3, [pc, #140]	@ (8007aec <vTaskSwitchContext+0xac>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	fab3 f383 	clz	r3, r3
 8007a68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a6a:	7afb      	ldrb	r3, [r7, #11]
 8007a6c:	f1c3 031f 	rsb	r3, r3, #31
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	491f      	ldr	r1, [pc, #124]	@ (8007af0 <vTaskSwitchContext+0xb0>)
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	440b      	add	r3, r1
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	607b      	str	r3, [r7, #4]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <vTaskSwitchContext+0x5a>
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4a11      	ldr	r2, [pc, #68]	@ (8007af0 <vTaskSwitchContext+0xb0>)
 8007aaa:	4413      	add	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	605a      	str	r2, [r3, #4]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d104      	bne.n	8007ace <vTaskSwitchContext+0x8e>
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	4a07      	ldr	r2, [pc, #28]	@ (8007af4 <vTaskSwitchContext+0xb4>)
 8007ad6:	6013      	str	r3, [r2, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	200005c4 	.word	0x200005c4
 8007ae8:	200005b0 	.word	0x200005b0
 8007aec:	200005a4 	.word	0x200005a4
 8007af0:	200004a0 	.word	0x200004a0
 8007af4:	2000049c 	.word	0x2000049c

08007af8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	60fb      	str	r3, [r7, #12]
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	e7fd      	b.n	8007b1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b20:	4b07      	ldr	r3, [pc, #28]	@ (8007b40 <vTaskPlaceOnEventList+0x48>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3318      	adds	r3, #24
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7fe fdb6 	bl	800669a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b2e:	2101      	movs	r1, #1
 8007b30:	6838      	ldr	r0, [r7, #0]
 8007b32:	f000 fb87 	bl	8008244 <prvAddCurrentTaskToDelayedList>
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	2000049c 	.word	0x2000049c

08007b44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	60fb      	str	r3, [r7, #12]
}
 8007b6c:	bf00      	nop
 8007b6e:	bf00      	nop
 8007b70:	e7fd      	b.n	8007b6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3318      	adds	r3, #24
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fdc8 	bl	800670c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf4 <xTaskRemoveFromEventList+0xb0>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d11c      	bne.n	8007bbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fe fdbf 	bl	800670c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b92:	2201      	movs	r2, #1
 8007b94:	409a      	lsls	r2, r3
 8007b96:	4b18      	ldr	r3, [pc, #96]	@ (8007bf8 <xTaskRemoveFromEventList+0xb4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	4a16      	ldr	r2, [pc, #88]	@ (8007bf8 <xTaskRemoveFromEventList+0xb4>)
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4a13      	ldr	r2, [pc, #76]	@ (8007bfc <xTaskRemoveFromEventList+0xb8>)
 8007bae:	441a      	add	r2, r3
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fe fd4b 	bl	8006652 <vListInsertEnd>
 8007bbc:	e005      	b.n	8007bca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	3318      	adds	r3, #24
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	480e      	ldr	r0, [pc, #56]	@ (8007c00 <xTaskRemoveFromEventList+0xbc>)
 8007bc6:	f7fe fd44 	bl	8006652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <xTaskRemoveFromEventList+0xc0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d905      	bls.n	8007be4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c08 <xTaskRemoveFromEventList+0xc4>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e001      	b.n	8007be8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007be8:	697b      	ldr	r3, [r7, #20]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	200005c4 	.word	0x200005c4
 8007bf8:	200005a4 	.word	0x200005a4
 8007bfc:	200004a0 	.word	0x200004a0
 8007c00:	2000055c 	.word	0x2000055c
 8007c04:	2000049c 	.word	0x2000049c
 8007c08:	200005b0 	.word	0x200005b0

08007c0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c14:	4b06      	ldr	r3, [pc, #24]	@ (8007c30 <vTaskInternalSetTimeOutState+0x24>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c1c:	4b05      	ldr	r3, [pc, #20]	@ (8007c34 <vTaskInternalSetTimeOutState+0x28>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	605a      	str	r2, [r3, #4]
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	200005b4 	.word	0x200005b4
 8007c34:	200005a0 	.word	0x200005a0

08007c38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10b      	bne.n	8007c60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	613b      	str	r3, [r7, #16]
}
 8007c5a:	bf00      	nop
 8007c5c:	bf00      	nop
 8007c5e:	e7fd      	b.n	8007c5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10b      	bne.n	8007c7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	60fb      	str	r3, [r7, #12]
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c7e:	f000 fc7b 	bl	8008578 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c82:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf8 <xTaskCheckForTimeOut+0xc0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9a:	d102      	bne.n	8007ca2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61fb      	str	r3, [r7, #28]
 8007ca0:	e023      	b.n	8007cea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	4b15      	ldr	r3, [pc, #84]	@ (8007cfc <xTaskCheckForTimeOut+0xc4>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d007      	beq.n	8007cbe <xTaskCheckForTimeOut+0x86>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d302      	bcc.n	8007cbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	61fb      	str	r3, [r7, #28]
 8007cbc:	e015      	b.n	8007cea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d20b      	bcs.n	8007ce0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff ff99 	bl	8007c0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	e004      	b.n	8007cea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cea:	f000 fc77 	bl	80085dc <vPortExitCritical>

	return xReturn;
 8007cee:	69fb      	ldr	r3, [r7, #28]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3720      	adds	r7, #32
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	200005a0 	.word	0x200005a0
 8007cfc:	200005b4 	.word	0x200005b4

08007d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d04:	4b03      	ldr	r3, [pc, #12]	@ (8007d14 <vTaskMissedYield+0x14>)
 8007d06:	2201      	movs	r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	200005b0 	.word	0x200005b0

08007d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d20:	f000 f852 	bl	8007dc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d24:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <prvIdleTask+0x28>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d9f9      	bls.n	8007d20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d2c:	4b05      	ldr	r3, [pc, #20]	@ (8007d44 <prvIdleTask+0x2c>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d3c:	e7f0      	b.n	8007d20 <prvIdleTask+0x8>
 8007d3e:	bf00      	nop
 8007d40:	200004a0 	.word	0x200004a0
 8007d44:	e000ed04 	.word	0xe000ed04

08007d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d4e:	2300      	movs	r3, #0
 8007d50:	607b      	str	r3, [r7, #4]
 8007d52:	e00c      	b.n	8007d6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4a12      	ldr	r2, [pc, #72]	@ (8007da8 <prvInitialiseTaskLists+0x60>)
 8007d60:	4413      	add	r3, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fc48 	bl	80065f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	607b      	str	r3, [r7, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b06      	cmp	r3, #6
 8007d72:	d9ef      	bls.n	8007d54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d74:	480d      	ldr	r0, [pc, #52]	@ (8007dac <prvInitialiseTaskLists+0x64>)
 8007d76:	f7fe fc3f 	bl	80065f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d7a:	480d      	ldr	r0, [pc, #52]	@ (8007db0 <prvInitialiseTaskLists+0x68>)
 8007d7c:	f7fe fc3c 	bl	80065f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d80:	480c      	ldr	r0, [pc, #48]	@ (8007db4 <prvInitialiseTaskLists+0x6c>)
 8007d82:	f7fe fc39 	bl	80065f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d86:	480c      	ldr	r0, [pc, #48]	@ (8007db8 <prvInitialiseTaskLists+0x70>)
 8007d88:	f7fe fc36 	bl	80065f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d8c:	480b      	ldr	r0, [pc, #44]	@ (8007dbc <prvInitialiseTaskLists+0x74>)
 8007d8e:	f7fe fc33 	bl	80065f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d92:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc0 <prvInitialiseTaskLists+0x78>)
 8007d94:	4a05      	ldr	r2, [pc, #20]	@ (8007dac <prvInitialiseTaskLists+0x64>)
 8007d96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d98:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc4 <prvInitialiseTaskLists+0x7c>)
 8007d9a:	4a05      	ldr	r2, [pc, #20]	@ (8007db0 <prvInitialiseTaskLists+0x68>)
 8007d9c:	601a      	str	r2, [r3, #0]
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	200004a0 	.word	0x200004a0
 8007dac:	2000052c 	.word	0x2000052c
 8007db0:	20000540 	.word	0x20000540
 8007db4:	2000055c 	.word	0x2000055c
 8007db8:	20000570 	.word	0x20000570
 8007dbc:	20000588 	.word	0x20000588
 8007dc0:	20000554 	.word	0x20000554
 8007dc4:	20000558 	.word	0x20000558

08007dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dce:	e019      	b.n	8007e04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007dd0:	f000 fbd2 	bl	8008578 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd4:	4b10      	ldr	r3, [pc, #64]	@ (8007e18 <prvCheckTasksWaitingTermination+0x50>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fc93 	bl	800670c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007de6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <prvCheckTasksWaitingTermination+0x54>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	4a0b      	ldr	r2, [pc, #44]	@ (8007e1c <prvCheckTasksWaitingTermination+0x54>)
 8007dee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007df0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <prvCheckTasksWaitingTermination+0x58>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	4a0a      	ldr	r2, [pc, #40]	@ (8007e20 <prvCheckTasksWaitingTermination+0x58>)
 8007df8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dfa:	f000 fbef 	bl	80085dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f810 	bl	8007e24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <prvCheckTasksWaitingTermination+0x58>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e1      	bne.n	8007dd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000570 	.word	0x20000570
 8007e1c:	2000059c 	.word	0x2000059c
 8007e20:	20000584 	.word	0x20000584

08007e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d108      	bne.n	8007e48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fd8c 	bl	8008958 <vPortFree>
				vPortFree( pxTCB );
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fd89 	bl	8008958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e46:	e019      	b.n	8007e7c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d103      	bne.n	8007e5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fd80 	bl	8008958 <vPortFree>
	}
 8007e58:	e010      	b.n	8007e7c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d00b      	beq.n	8007e7c <prvDeleteTCB+0x58>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	60fb      	str	r3, [r7, #12]
}
 8007e76:	bf00      	nop
 8007e78:	bf00      	nop
 8007e7a:	e7fd      	b.n	8007e78 <prvDeleteTCB+0x54>
	}
 8007e7c:	bf00      	nop
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ebc <prvResetNextTaskUnblockTime+0x38>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e94:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8007e96:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e9c:	e008      	b.n	8007eb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9e:	4b07      	ldr	r3, [pc, #28]	@ (8007ebc <prvResetNextTaskUnblockTime+0x38>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4a04      	ldr	r2, [pc, #16]	@ (8007ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8007eae:	6013      	str	r3, [r2, #0]
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	20000554 	.word	0x20000554
 8007ec0:	200005bc 	.word	0x200005bc

08007ec4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef8 <xTaskGetSchedulerState+0x34>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	607b      	str	r3, [r7, #4]
 8007ed6:	e008      	b.n	8007eea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed8:	4b08      	ldr	r3, [pc, #32]	@ (8007efc <xTaskGetSchedulerState+0x38>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	607b      	str	r3, [r7, #4]
 8007ee4:	e001      	b.n	8007eea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007eea:	687b      	ldr	r3, [r7, #4]
	}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	200005a8 	.word	0x200005a8
 8007efc:	200005c4 	.word	0x200005c4

08007f00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d05e      	beq.n	8007fd4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1a:	4b31      	ldr	r3, [pc, #196]	@ (8007fe0 <xTaskPriorityInherit+0xe0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d24e      	bcs.n	8007fc2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db06      	blt.n	8007f3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8007fe0 <xTaskPriorityInherit+0xe0>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f32:	f1c3 0207 	rsb	r2, r3, #7
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6959      	ldr	r1, [r3, #20]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4a26      	ldr	r2, [pc, #152]	@ (8007fe4 <xTaskPriorityInherit+0xe4>)
 8007f4c:	4413      	add	r3, r2
 8007f4e:	4299      	cmp	r1, r3
 8007f50:	d12f      	bne.n	8007fb2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fbd8 	bl	800670c <uxListRemove>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f66:	2201      	movs	r2, #1
 8007f68:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6c:	43da      	mvns	r2, r3
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe8 <xTaskPriorityInherit+0xe8>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4013      	ands	r3, r2
 8007f74:	4a1c      	ldr	r2, [pc, #112]	@ (8007fe8 <xTaskPriorityInherit+0xe8>)
 8007f76:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f78:	4b19      	ldr	r3, [pc, #100]	@ (8007fe0 <xTaskPriorityInherit+0xe0>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f86:	2201      	movs	r2, #1
 8007f88:	409a      	lsls	r2, r3
 8007f8a:	4b17      	ldr	r3, [pc, #92]	@ (8007fe8 <xTaskPriorityInherit+0xe8>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	4a15      	ldr	r2, [pc, #84]	@ (8007fe8 <xTaskPriorityInherit+0xe8>)
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f98:	4613      	mov	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4a10      	ldr	r2, [pc, #64]	@ (8007fe4 <xTaskPriorityInherit+0xe4>)
 8007fa2:	441a      	add	r2, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4610      	mov	r0, r2
 8007fac:	f7fe fb51 	bl	8006652 <vListInsertEnd>
 8007fb0:	e004      	b.n	8007fbc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe0 <xTaskPriorityInherit+0xe0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	e008      	b.n	8007fd4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fc6:	4b06      	ldr	r3, [pc, #24]	@ (8007fe0 <xTaskPriorityInherit+0xe0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d201      	bcs.n	8007fd4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
	}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	2000049c 	.word	0x2000049c
 8007fe4:	200004a0 	.word	0x200004a0
 8007fe8:	200005a4 	.word	0x200005a4

08007fec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d070      	beq.n	80080e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008002:	4b3b      	ldr	r3, [pc, #236]	@ (80080f0 <xTaskPriorityDisinherit+0x104>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	429a      	cmp	r2, r3
 800800a:	d00b      	beq.n	8008024 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	60fb      	str	r3, [r7, #12]
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10b      	bne.n	8008044 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	60bb      	str	r3, [r7, #8]
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	e7fd      	b.n	8008040 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008048:	1e5a      	subs	r2, r3, #1
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008056:	429a      	cmp	r2, r3
 8008058:	d044      	beq.n	80080e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800805e:	2b00      	cmp	r3, #0
 8008060:	d140      	bne.n	80080e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	3304      	adds	r3, #4
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fb50 	bl	800670c <uxListRemove>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d115      	bne.n	800809e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008076:	491f      	ldr	r1, [pc, #124]	@ (80080f4 <xTaskPriorityDisinherit+0x108>)
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <xTaskPriorityDisinherit+0xb2>
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808c:	2201      	movs	r2, #1
 800808e:	fa02 f303 	lsl.w	r3, r2, r3
 8008092:	43da      	mvns	r2, r3
 8008094:	4b18      	ldr	r3, [pc, #96]	@ (80080f8 <xTaskPriorityDisinherit+0x10c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4013      	ands	r3, r2
 800809a:	4a17      	ldr	r2, [pc, #92]	@ (80080f8 <xTaskPriorityDisinherit+0x10c>)
 800809c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080aa:	f1c3 0207 	rsb	r2, r3, #7
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b6:	2201      	movs	r2, #1
 80080b8:	409a      	lsls	r2, r3
 80080ba:	4b0f      	ldr	r3, [pc, #60]	@ (80080f8 <xTaskPriorityDisinherit+0x10c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4313      	orrs	r3, r2
 80080c0:	4a0d      	ldr	r2, [pc, #52]	@ (80080f8 <xTaskPriorityDisinherit+0x10c>)
 80080c2:	6013      	str	r3, [r2, #0]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4a08      	ldr	r2, [pc, #32]	@ (80080f4 <xTaskPriorityDisinherit+0x108>)
 80080d2:	441a      	add	r2, r3
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4619      	mov	r1, r3
 80080da:	4610      	mov	r0, r2
 80080dc:	f7fe fab9 	bl	8006652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080e0:	2301      	movs	r3, #1
 80080e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080e4:	697b      	ldr	r3, [r7, #20]
	}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	2000049c 	.word	0x2000049c
 80080f4:	200004a0 	.word	0x200004a0
 80080f8:	200005a4 	.word	0x200005a4

080080fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800810a:	2301      	movs	r3, #1
 800810c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d079      	beq.n	8008208 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10b      	bne.n	8008134 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	60fb      	str	r3, [r7, #12]
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	e7fd      	b.n	8008130 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d902      	bls.n	8008144 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	e002      	b.n	800814a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008148:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	429a      	cmp	r2, r3
 8008152:	d059      	beq.n	8008208 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	429a      	cmp	r2, r3
 800815c:	d154      	bne.n	8008208 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800815e:	4b2c      	ldr	r3, [pc, #176]	@ (8008210 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	429a      	cmp	r2, r3
 8008166:	d10b      	bne.n	8008180 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	60bb      	str	r3, [r7, #8]
}
 800817a:	bf00      	nop
 800817c:	bf00      	nop
 800817e:	e7fd      	b.n	800817c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008184:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	db04      	blt.n	800819e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f1c3 0207 	rsb	r2, r3, #7
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	6959      	ldr	r1, [r3, #20]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4a19      	ldr	r2, [pc, #100]	@ (8008214 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081ae:	4413      	add	r3, r2
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d129      	bne.n	8008208 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe faa7 	bl	800670c <uxListRemove>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c8:	2201      	movs	r2, #1
 80081ca:	fa02 f303 	lsl.w	r3, r2, r3
 80081ce:	43da      	mvns	r2, r3
 80081d0:	4b11      	ldr	r3, [pc, #68]	@ (8008218 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4013      	ands	r3, r2
 80081d6:	4a10      	ldr	r2, [pc, #64]	@ (8008218 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081de:	2201      	movs	r2, #1
 80081e0:	409a      	lsls	r2, r3
 80081e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008218 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	4a0b      	ldr	r2, [pc, #44]	@ (8008218 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4a06      	ldr	r2, [pc, #24]	@ (8008214 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081fa:	441a      	add	r2, r3
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7fe fa25 	bl	8006652 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008208:	bf00      	nop
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	2000049c 	.word	0x2000049c
 8008214:	200004a0 	.word	0x200004a0
 8008218:	200005a4 	.word	0x200005a4

0800821c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800821c:	b480      	push	{r7}
 800821e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008220:	4b07      	ldr	r3, [pc, #28]	@ (8008240 <pvTaskIncrementMutexHeldCount+0x24>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <pvTaskIncrementMutexHeldCount+0x24>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800822e:	3201      	adds	r2, #1
 8008230:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008232:	4b03      	ldr	r3, [pc, #12]	@ (8008240 <pvTaskIncrementMutexHeldCount+0x24>)
 8008234:	681b      	ldr	r3, [r3, #0]
	}
 8008236:	4618      	mov	r0, r3
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	2000049c 	.word	0x2000049c

08008244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800824e:	4b29      	ldr	r3, [pc, #164]	@ (80082f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008254:	4b28      	ldr	r3, [pc, #160]	@ (80082f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3304      	adds	r3, #4
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fa56 	bl	800670c <uxListRemove>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10b      	bne.n	800827e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008266:	4b24      	ldr	r3, [pc, #144]	@ (80082f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826c:	2201      	movs	r2, #1
 800826e:	fa02 f303 	lsl.w	r3, r2, r3
 8008272:	43da      	mvns	r2, r3
 8008274:	4b21      	ldr	r3, [pc, #132]	@ (80082fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4013      	ands	r3, r2
 800827a:	4a20      	ldr	r2, [pc, #128]	@ (80082fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800827c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008284:	d10a      	bne.n	800829c <prvAddCurrentTaskToDelayedList+0x58>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d007      	beq.n	800829c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800828c:	4b1a      	ldr	r3, [pc, #104]	@ (80082f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	481a      	ldr	r0, [pc, #104]	@ (8008300 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008296:	f7fe f9dc 	bl	8006652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800829a:	e026      	b.n	80082ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4413      	add	r3, r2
 80082a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082a4:	4b14      	ldr	r3, [pc, #80]	@ (80082f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d209      	bcs.n	80082c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b4:	4b13      	ldr	r3, [pc, #76]	@ (8008304 <prvAddCurrentTaskToDelayedList+0xc0>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4b0f      	ldr	r3, [pc, #60]	@ (80082f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3304      	adds	r3, #4
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f7fe f9ea 	bl	800669a <vListInsert>
}
 80082c6:	e010      	b.n	80082ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008308 <prvAddCurrentTaskToDelayedList+0xc4>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fe f9e0 	bl	800669a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082da:	4b0c      	ldr	r3, [pc, #48]	@ (800830c <prvAddCurrentTaskToDelayedList+0xc8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d202      	bcs.n	80082ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082e4:	4a09      	ldr	r2, [pc, #36]	@ (800830c <prvAddCurrentTaskToDelayedList+0xc8>)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6013      	str	r3, [r2, #0]
}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	200005a0 	.word	0x200005a0
 80082f8:	2000049c 	.word	0x2000049c
 80082fc:	200005a4 	.word	0x200005a4
 8008300:	20000588 	.word	0x20000588
 8008304:	20000558 	.word	0x20000558
 8008308:	20000554 	.word	0x20000554
 800830c:	200005bc 	.word	0x200005bc

08008310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3b04      	subs	r3, #4
 8008320:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3b04      	subs	r3, #4
 800832e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f023 0201 	bic.w	r2, r3, #1
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3b04      	subs	r3, #4
 800833e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008340:	4a0c      	ldr	r2, [pc, #48]	@ (8008374 <pxPortInitialiseStack+0x64>)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3b14      	subs	r3, #20
 800834a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3b04      	subs	r3, #4
 8008356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f06f 0202 	mvn.w	r2, #2
 800835e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	3b20      	subs	r3, #32
 8008364:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008366:	68fb      	ldr	r3, [r7, #12]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	08008379 	.word	0x08008379

08008378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008382:	4b13      	ldr	r3, [pc, #76]	@ (80083d0 <prvTaskExitError+0x58>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838a:	d00b      	beq.n	80083a4 <prvTaskExitError+0x2c>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60fb      	str	r3, [r7, #12]
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	e7fd      	b.n	80083a0 <prvTaskExitError+0x28>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	60bb      	str	r3, [r7, #8]
}
 80083b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083b8:	bf00      	nop
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0fc      	beq.n	80083ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	20000098 	.word	0x20000098
	...

080083e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083e0:	4b07      	ldr	r3, [pc, #28]	@ (8008400 <pxCurrentTCBConst2>)
 80083e2:	6819      	ldr	r1, [r3, #0]
 80083e4:	6808      	ldr	r0, [r1, #0]
 80083e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ea:	f380 8809 	msr	PSP, r0
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f04f 0000 	mov.w	r0, #0
 80083f6:	f380 8811 	msr	BASEPRI, r0
 80083fa:	4770      	bx	lr
 80083fc:	f3af 8000 	nop.w

08008400 <pxCurrentTCBConst2>:
 8008400:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop

08008408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008408:	4808      	ldr	r0, [pc, #32]	@ (800842c <prvPortStartFirstTask+0x24>)
 800840a:	6800      	ldr	r0, [r0, #0]
 800840c:	6800      	ldr	r0, [r0, #0]
 800840e:	f380 8808 	msr	MSP, r0
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f380 8814 	msr	CONTROL, r0
 800841a:	b662      	cpsie	i
 800841c:	b661      	cpsie	f
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	df00      	svc	0
 8008428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800842a:	bf00      	nop
 800842c:	e000ed08 	.word	0xe000ed08

08008430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008436:	4b47      	ldr	r3, [pc, #284]	@ (8008554 <xPortStartScheduler+0x124>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a47      	ldr	r2, [pc, #284]	@ (8008558 <xPortStartScheduler+0x128>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d10b      	bne.n	8008458 <xPortStartScheduler+0x28>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	60fb      	str	r3, [r7, #12]
}
 8008452:	bf00      	nop
 8008454:	bf00      	nop
 8008456:	e7fd      	b.n	8008454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008458:	4b3e      	ldr	r3, [pc, #248]	@ (8008554 <xPortStartScheduler+0x124>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a3f      	ldr	r2, [pc, #252]	@ (800855c <xPortStartScheduler+0x12c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d10b      	bne.n	800847a <xPortStartScheduler+0x4a>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	613b      	str	r3, [r7, #16]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800847a:	4b39      	ldr	r3, [pc, #228]	@ (8008560 <xPortStartScheduler+0x130>)
 800847c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	22ff      	movs	r2, #255	@ 0xff
 800848a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800849c:	b2da      	uxtb	r2, r3
 800849e:	4b31      	ldr	r3, [pc, #196]	@ (8008564 <xPortStartScheduler+0x134>)
 80084a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084a2:	4b31      	ldr	r3, [pc, #196]	@ (8008568 <xPortStartScheduler+0x138>)
 80084a4:	2207      	movs	r2, #7
 80084a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084a8:	e009      	b.n	80084be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80084aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008568 <xPortStartScheduler+0x138>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008568 <xPortStartScheduler+0x138>)
 80084b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c6:	2b80      	cmp	r3, #128	@ 0x80
 80084c8:	d0ef      	beq.n	80084aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084ca:	4b27      	ldr	r3, [pc, #156]	@ (8008568 <xPortStartScheduler+0x138>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f1c3 0307 	rsb	r3, r3, #7
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d00b      	beq.n	80084ee <xPortStartScheduler+0xbe>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60bb      	str	r3, [r7, #8]
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	e7fd      	b.n	80084ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008568 <xPortStartScheduler+0x138>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008568 <xPortStartScheduler+0x138>)
 80084f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008568 <xPortStartScheduler+0x138>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008500:	4a19      	ldr	r2, [pc, #100]	@ (8008568 <xPortStartScheduler+0x138>)
 8008502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	b2da      	uxtb	r2, r3
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800850c:	4b17      	ldr	r3, [pc, #92]	@ (800856c <xPortStartScheduler+0x13c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a16      	ldr	r2, [pc, #88]	@ (800856c <xPortStartScheduler+0x13c>)
 8008512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008518:	4b14      	ldr	r3, [pc, #80]	@ (800856c <xPortStartScheduler+0x13c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a13      	ldr	r2, [pc, #76]	@ (800856c <xPortStartScheduler+0x13c>)
 800851e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008524:	f000 f8da 	bl	80086dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008528:	4b11      	ldr	r3, [pc, #68]	@ (8008570 <xPortStartScheduler+0x140>)
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800852e:	f000 f8f9 	bl	8008724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008532:	4b10      	ldr	r3, [pc, #64]	@ (8008574 <xPortStartScheduler+0x144>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a0f      	ldr	r2, [pc, #60]	@ (8008574 <xPortStartScheduler+0x144>)
 8008538:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800853c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800853e:	f7ff ff63 	bl	8008408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008542:	f7ff fa7d 	bl	8007a40 <vTaskSwitchContext>
	prvTaskExitError();
 8008546:	f7ff ff17 	bl	8008378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	e000ed00 	.word	0xe000ed00
 8008558:	410fc271 	.word	0x410fc271
 800855c:	410fc270 	.word	0x410fc270
 8008560:	e000e400 	.word	0xe000e400
 8008564:	200005c8 	.word	0x200005c8
 8008568:	200005cc 	.word	0x200005cc
 800856c:	e000ed20 	.word	0xe000ed20
 8008570:	20000098 	.word	0x20000098
 8008574:	e000ef34 	.word	0xe000ef34

08008578 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	607b      	str	r3, [r7, #4]
}
 8008590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008592:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <vPortEnterCritical+0x5c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3301      	adds	r3, #1
 8008598:	4a0e      	ldr	r2, [pc, #56]	@ (80085d4 <vPortEnterCritical+0x5c>)
 800859a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800859c:	4b0d      	ldr	r3, [pc, #52]	@ (80085d4 <vPortEnterCritical+0x5c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d110      	bne.n	80085c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085a4:	4b0c      	ldr	r3, [pc, #48]	@ (80085d8 <vPortEnterCritical+0x60>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00b      	beq.n	80085c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	603b      	str	r3, [r7, #0]
}
 80085c0:	bf00      	nop
 80085c2:	bf00      	nop
 80085c4:	e7fd      	b.n	80085c2 <vPortEnterCritical+0x4a>
	}
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000098 	.word	0x20000098
 80085d8:	e000ed04 	.word	0xe000ed04

080085dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085e2:	4b12      	ldr	r3, [pc, #72]	@ (800862c <vPortExitCritical+0x50>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <vPortExitCritical+0x26>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	607b      	str	r3, [r7, #4]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008602:	4b0a      	ldr	r3, [pc, #40]	@ (800862c <vPortExitCritical+0x50>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3b01      	subs	r3, #1
 8008608:	4a08      	ldr	r2, [pc, #32]	@ (800862c <vPortExitCritical+0x50>)
 800860a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800860c:	4b07      	ldr	r3, [pc, #28]	@ (800862c <vPortExitCritical+0x50>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d105      	bne.n	8008620 <vPortExitCritical+0x44>
 8008614:	2300      	movs	r3, #0
 8008616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	f383 8811 	msr	BASEPRI, r3
}
 800861e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	20000098 	.word	0x20000098

08008630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008630:	f3ef 8009 	mrs	r0, PSP
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	4b15      	ldr	r3, [pc, #84]	@ (8008690 <pxCurrentTCBConst>)
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	f01e 0f10 	tst.w	lr, #16
 8008640:	bf08      	it	eq
 8008642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	6010      	str	r0, [r2, #0]
 800864c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008650:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008654:	f380 8811 	msr	BASEPRI, r0
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f7ff f9ee 	bl	8007a40 <vTaskSwitchContext>
 8008664:	f04f 0000 	mov.w	r0, #0
 8008668:	f380 8811 	msr	BASEPRI, r0
 800866c:	bc09      	pop	{r0, r3}
 800866e:	6819      	ldr	r1, [r3, #0]
 8008670:	6808      	ldr	r0, [r1, #0]
 8008672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008676:	f01e 0f10 	tst.w	lr, #16
 800867a:	bf08      	it	eq
 800867c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008680:	f380 8809 	msr	PSP, r0
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	f3af 8000 	nop.w

08008690 <pxCurrentTCBConst>:
 8008690:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop

08008698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	607b      	str	r3, [r7, #4]
}
 80086b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086b2:	f7ff f90b 	bl	80078cc <xTaskIncrementTick>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086bc:	4b06      	ldr	r3, [pc, #24]	@ (80086d8 <xPortSysTickHandler+0x40>)
 80086be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	2300      	movs	r3, #0
 80086c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f383 8811 	msr	BASEPRI, r3
}
 80086ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008710 <vPortSetupTimerInterrupt+0x34>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008714 <vPortSetupTimerInterrupt+0x38>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <vPortSetupTimerInterrupt+0x3c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a0a      	ldr	r2, [pc, #40]	@ (800871c <vPortSetupTimerInterrupt+0x40>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	099b      	lsrs	r3, r3, #6
 80086f8:	4a09      	ldr	r2, [pc, #36]	@ (8008720 <vPortSetupTimerInterrupt+0x44>)
 80086fa:	3b01      	subs	r3, #1
 80086fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086fe:	4b04      	ldr	r3, [pc, #16]	@ (8008710 <vPortSetupTimerInterrupt+0x34>)
 8008700:	2207      	movs	r2, #7
 8008702:	601a      	str	r2, [r3, #0]
}
 8008704:	bf00      	nop
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	e000e010 	.word	0xe000e010
 8008714:	e000e018 	.word	0xe000e018
 8008718:	2000006c 	.word	0x2000006c
 800871c:	10624dd3 	.word	0x10624dd3
 8008720:	e000e014 	.word	0xe000e014

08008724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008734 <vPortEnableVFP+0x10>
 8008728:	6801      	ldr	r1, [r0, #0]
 800872a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800872e:	6001      	str	r1, [r0, #0]
 8008730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008732:	bf00      	nop
 8008734:	e000ed88 	.word	0xe000ed88

08008738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800873e:	f3ef 8305 	mrs	r3, IPSR
 8008742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b0f      	cmp	r3, #15
 8008748:	d915      	bls.n	8008776 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800874a:	4a18      	ldr	r2, [pc, #96]	@ (80087ac <vPortValidateInterruptPriority+0x74>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008754:	4b16      	ldr	r3, [pc, #88]	@ (80087b0 <vPortValidateInterruptPriority+0x78>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	7afa      	ldrb	r2, [r7, #11]
 800875a:	429a      	cmp	r2, r3
 800875c:	d20b      	bcs.n	8008776 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	607b      	str	r3, [r7, #4]
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	e7fd      	b.n	8008772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008776:	4b0f      	ldr	r3, [pc, #60]	@ (80087b4 <vPortValidateInterruptPriority+0x7c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800877e:	4b0e      	ldr	r3, [pc, #56]	@ (80087b8 <vPortValidateInterruptPriority+0x80>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	429a      	cmp	r2, r3
 8008784:	d90b      	bls.n	800879e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	603b      	str	r3, [r7, #0]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <vPortValidateInterruptPriority+0x62>
	}
 800879e:	bf00      	nop
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	e000e3f0 	.word	0xe000e3f0
 80087b0:	200005c8 	.word	0x200005c8
 80087b4:	e000ed0c 	.word	0xe000ed0c
 80087b8:	200005cc 	.word	0x200005cc

080087bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08a      	sub	sp, #40	@ 0x28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087c8:	f7fe ffd4 	bl	8007774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087cc:	4b5c      	ldr	r3, [pc, #368]	@ (8008940 <pvPortMalloc+0x184>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087d4:	f000 f924 	bl	8008a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008944 <pvPortMalloc+0x188>)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4013      	ands	r3, r2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f040 8095 	bne.w	8008910 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d01e      	beq.n	800882a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80087ec:	2208      	movs	r2, #8
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4413      	add	r3, r2
 80087f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d015      	beq.n	800882a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f023 0307 	bic.w	r3, r3, #7
 8008804:	3308      	adds	r3, #8
 8008806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f003 0307 	and.w	r3, r3, #7
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <pvPortMalloc+0x6e>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	617b      	str	r3, [r7, #20]
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	e7fd      	b.n	8008826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d06f      	beq.n	8008910 <pvPortMalloc+0x154>
 8008830:	4b45      	ldr	r3, [pc, #276]	@ (8008948 <pvPortMalloc+0x18c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	429a      	cmp	r2, r3
 8008838:	d86a      	bhi.n	8008910 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800883a:	4b44      	ldr	r3, [pc, #272]	@ (800894c <pvPortMalloc+0x190>)
 800883c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800883e:	4b43      	ldr	r3, [pc, #268]	@ (800894c <pvPortMalloc+0x190>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008844:	e004      	b.n	8008850 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800884a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <pvPortMalloc+0xa6>
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f1      	bne.n	8008846 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008862:	4b37      	ldr	r3, [pc, #220]	@ (8008940 <pvPortMalloc+0x184>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008868:	429a      	cmp	r2, r3
 800886a:	d051      	beq.n	8008910 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2208      	movs	r2, #8
 8008872:	4413      	add	r3, r2
 8008874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	1ad2      	subs	r2, r2, r3
 8008886:	2308      	movs	r3, #8
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	429a      	cmp	r2, r3
 800888c:	d920      	bls.n	80088d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800888e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <pvPortMalloc+0xfc>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
}
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	e7fd      	b.n	80088b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088ca:	69b8      	ldr	r0, [r7, #24]
 80088cc:	f000 f90a 	bl	8008ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008948 <pvPortMalloc+0x18c>)
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	4a1b      	ldr	r2, [pc, #108]	@ (8008948 <pvPortMalloc+0x18c>)
 80088dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088de:	4b1a      	ldr	r3, [pc, #104]	@ (8008948 <pvPortMalloc+0x18c>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008950 <pvPortMalloc+0x194>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d203      	bcs.n	80088f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088ea:	4b17      	ldr	r3, [pc, #92]	@ (8008948 <pvPortMalloc+0x18c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a18      	ldr	r2, [pc, #96]	@ (8008950 <pvPortMalloc+0x194>)
 80088f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	4b13      	ldr	r3, [pc, #76]	@ (8008944 <pvPortMalloc+0x188>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	431a      	orrs	r2, r3
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008906:	4b13      	ldr	r3, [pc, #76]	@ (8008954 <pvPortMalloc+0x198>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3301      	adds	r3, #1
 800890c:	4a11      	ldr	r2, [pc, #68]	@ (8008954 <pvPortMalloc+0x198>)
 800890e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008910:	f7fe ff3e 	bl	8007790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f003 0307 	and.w	r3, r3, #7
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <pvPortMalloc+0x17a>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60fb      	str	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <pvPortMalloc+0x176>
	return pvReturn;
 8008936:	69fb      	ldr	r3, [r7, #28]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3728      	adds	r7, #40	@ 0x28
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	200041d8 	.word	0x200041d8
 8008944:	200041ec 	.word	0x200041ec
 8008948:	200041dc 	.word	0x200041dc
 800894c:	200041d0 	.word	0x200041d0
 8008950:	200041e0 	.word	0x200041e0
 8008954:	200041e4 	.word	0x200041e4

08008958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d04f      	beq.n	8008a0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800896a:	2308      	movs	r3, #8
 800896c:	425b      	negs	r3, r3
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4413      	add	r3, r2
 8008972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	4b25      	ldr	r3, [pc, #148]	@ (8008a14 <vPortFree+0xbc>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4013      	ands	r3, r2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10b      	bne.n	800899e <vPortFree+0x46>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	60fb      	str	r3, [r7, #12]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00b      	beq.n	80089be <vPortFree+0x66>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	e7fd      	b.n	80089ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	4b14      	ldr	r3, [pc, #80]	@ (8008a14 <vPortFree+0xbc>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4013      	ands	r3, r2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01e      	beq.n	8008a0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d11a      	bne.n	8008a0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a14 <vPortFree+0xbc>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	43db      	mvns	r3, r3
 80089de:	401a      	ands	r2, r3
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089e4:	f7fe fec6 	bl	8007774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008a18 <vPortFree+0xc0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4413      	add	r3, r2
 80089f2:	4a09      	ldr	r2, [pc, #36]	@ (8008a18 <vPortFree+0xc0>)
 80089f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089f6:	6938      	ldr	r0, [r7, #16]
 80089f8:	f000 f874 	bl	8008ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <vPortFree+0xc4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3301      	adds	r3, #1
 8008a02:	4a06      	ldr	r2, [pc, #24]	@ (8008a1c <vPortFree+0xc4>)
 8008a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a06:	f7fe fec3 	bl	8007790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a0a:	bf00      	nop
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	200041ec 	.word	0x200041ec
 8008a18:	200041dc 	.word	0x200041dc
 8008a1c:	200041e8 	.word	0x200041e8

08008a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a2c:	4b27      	ldr	r3, [pc, #156]	@ (8008acc <prvHeapInit+0xac>)
 8008a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00c      	beq.n	8008a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3307      	adds	r3, #7
 8008a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0307 	bic.w	r3, r3, #7
 8008a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008acc <prvHeapInit+0xac>)
 8008a50:	4413      	add	r3, r2
 8008a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a58:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad0 <prvHeapInit+0xb0>)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ad0 <prvHeapInit+0xb0>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	4413      	add	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f023 0307 	bic.w	r3, r3, #7
 8008a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4a15      	ldr	r2, [pc, #84]	@ (8008ad4 <prvHeapInit+0xb4>)
 8008a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a82:	4b14      	ldr	r3, [pc, #80]	@ (8008ad4 <prvHeapInit+0xb4>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2200      	movs	r2, #0
 8008a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a8a:	4b12      	ldr	r3, [pc, #72]	@ (8008ad4 <prvHeapInit+0xb4>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	1ad2      	subs	r2, r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad4 <prvHeapInit+0xb4>)
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad8 <prvHeapInit+0xb8>)
 8008aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	4a09      	ldr	r2, [pc, #36]	@ (8008adc <prvHeapInit+0xbc>)
 8008ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ab8:	4b09      	ldr	r3, [pc, #36]	@ (8008ae0 <prvHeapInit+0xc0>)
 8008aba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008abe:	601a      	str	r2, [r3, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	200005d0 	.word	0x200005d0
 8008ad0:	200041d0 	.word	0x200041d0
 8008ad4:	200041d8 	.word	0x200041d8
 8008ad8:	200041e0 	.word	0x200041e0
 8008adc:	200041dc 	.word	0x200041dc
 8008ae0:	200041ec 	.word	0x200041ec

08008ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008aec:	4b28      	ldr	r3, [pc, #160]	@ (8008b90 <prvInsertBlockIntoFreeList+0xac>)
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e002      	b.n	8008af8 <prvInsertBlockIntoFreeList+0x14>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d8f7      	bhi.n	8008af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d108      	bne.n	8008b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	441a      	add	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	441a      	add	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d118      	bne.n	8008b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b15      	ldr	r3, [pc, #84]	@ (8008b94 <prvInsertBlockIntoFreeList+0xb0>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d00d      	beq.n	8008b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	441a      	add	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	e008      	b.n	8008b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b62:	4b0c      	ldr	r3, [pc, #48]	@ (8008b94 <prvInsertBlockIntoFreeList+0xb0>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e003      	b.n	8008b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d002      	beq.n	8008b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b82:	bf00      	nop
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	200041d0 	.word	0x200041d0
 8008b94:	200041d8 	.word	0x200041d8

08008b98 <srand>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4b10      	ldr	r3, [pc, #64]	@ (8008bdc <srand+0x44>)
 8008b9c:	681d      	ldr	r5, [r3, #0]
 8008b9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	b9b3      	cbnz	r3, 8008bd2 <srand+0x3a>
 8008ba4:	2018      	movs	r0, #24
 8008ba6:	f000 fa7d 	bl	80090a4 <malloc>
 8008baa:	4602      	mov	r2, r0
 8008bac:	6328      	str	r0, [r5, #48]	@ 0x30
 8008bae:	b920      	cbnz	r0, 8008bba <srand+0x22>
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8008be0 <srand+0x48>)
 8008bb2:	480c      	ldr	r0, [pc, #48]	@ (8008be4 <srand+0x4c>)
 8008bb4:	2146      	movs	r1, #70	@ 0x46
 8008bb6:	f000 fa0d 	bl	8008fd4 <__assert_func>
 8008bba:	490b      	ldr	r1, [pc, #44]	@ (8008be8 <srand+0x50>)
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008bec <srand+0x54>)
 8008bbe:	e9c0 1300 	strd	r1, r3, [r0]
 8008bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf0 <srand+0x58>)
 8008bc4:	6083      	str	r3, [r0, #8]
 8008bc6:	230b      	movs	r3, #11
 8008bc8:	8183      	strh	r3, [r0, #12]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	2001      	movs	r0, #1
 8008bce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008bd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	611c      	str	r4, [r3, #16]
 8008bd8:	615a      	str	r2, [r3, #20]
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	200000a8 	.word	0x200000a8
 8008be0:	0804c8b4 	.word	0x0804c8b4
 8008be4:	0804c8cb 	.word	0x0804c8cb
 8008be8:	abcd330e 	.word	0xabcd330e
 8008bec:	e66d1234 	.word	0xe66d1234
 8008bf0:	0005deec 	.word	0x0005deec

08008bf4 <rand>:
 8008bf4:	4b16      	ldr	r3, [pc, #88]	@ (8008c50 <rand+0x5c>)
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	681c      	ldr	r4, [r3, #0]
 8008bfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008bfc:	b9b3      	cbnz	r3, 8008c2c <rand+0x38>
 8008bfe:	2018      	movs	r0, #24
 8008c00:	f000 fa50 	bl	80090a4 <malloc>
 8008c04:	4602      	mov	r2, r0
 8008c06:	6320      	str	r0, [r4, #48]	@ 0x30
 8008c08:	b920      	cbnz	r0, 8008c14 <rand+0x20>
 8008c0a:	4b12      	ldr	r3, [pc, #72]	@ (8008c54 <rand+0x60>)
 8008c0c:	4812      	ldr	r0, [pc, #72]	@ (8008c58 <rand+0x64>)
 8008c0e:	2152      	movs	r1, #82	@ 0x52
 8008c10:	f000 f9e0 	bl	8008fd4 <__assert_func>
 8008c14:	4911      	ldr	r1, [pc, #68]	@ (8008c5c <rand+0x68>)
 8008c16:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <rand+0x6c>)
 8008c18:	e9c0 1300 	strd	r1, r3, [r0]
 8008c1c:	4b11      	ldr	r3, [pc, #68]	@ (8008c64 <rand+0x70>)
 8008c1e:	6083      	str	r3, [r0, #8]
 8008c20:	230b      	movs	r3, #11
 8008c22:	8183      	strh	r3, [r0, #12]
 8008c24:	2100      	movs	r1, #0
 8008c26:	2001      	movs	r0, #1
 8008c28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008c2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008c2e:	480e      	ldr	r0, [pc, #56]	@ (8008c68 <rand+0x74>)
 8008c30:	690b      	ldr	r3, [r1, #16]
 8008c32:	694c      	ldr	r4, [r1, #20]
 8008c34:	4a0d      	ldr	r2, [pc, #52]	@ (8008c6c <rand+0x78>)
 8008c36:	4358      	muls	r0, r3
 8008c38:	fb02 0004 	mla	r0, r2, r4, r0
 8008c3c:	fba3 3202 	umull	r3, r2, r3, r2
 8008c40:	3301      	adds	r3, #1
 8008c42:	eb40 0002 	adc.w	r0, r0, r2
 8008c46:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008c4a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008c4e:	bd10      	pop	{r4, pc}
 8008c50:	200000a8 	.word	0x200000a8
 8008c54:	0804c8b4 	.word	0x0804c8b4
 8008c58:	0804c8cb 	.word	0x0804c8cb
 8008c5c:	abcd330e 	.word	0xabcd330e
 8008c60:	e66d1234 	.word	0xe66d1234
 8008c64:	0005deec 	.word	0x0005deec
 8008c68:	5851f42d 	.word	0x5851f42d
 8008c6c:	4c957f2d 	.word	0x4c957f2d

08008c70 <std>:
 8008c70:	2300      	movs	r3, #0
 8008c72:	b510      	push	{r4, lr}
 8008c74:	4604      	mov	r4, r0
 8008c76:	e9c0 3300 	strd	r3, r3, [r0]
 8008c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c7e:	6083      	str	r3, [r0, #8]
 8008c80:	8181      	strh	r1, [r0, #12]
 8008c82:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c84:	81c2      	strh	r2, [r0, #14]
 8008c86:	6183      	str	r3, [r0, #24]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	2208      	movs	r2, #8
 8008c8c:	305c      	adds	r0, #92	@ 0x5c
 8008c8e:	f000 f916 	bl	8008ebe <memset>
 8008c92:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc8 <std+0x58>)
 8008c94:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ccc <std+0x5c>)
 8008c98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd0 <std+0x60>)
 8008c9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd4 <std+0x64>)
 8008ca0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd8 <std+0x68>)
 8008ca4:	6224      	str	r4, [r4, #32]
 8008ca6:	429c      	cmp	r4, r3
 8008ca8:	d006      	beq.n	8008cb8 <std+0x48>
 8008caa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cae:	4294      	cmp	r4, r2
 8008cb0:	d002      	beq.n	8008cb8 <std+0x48>
 8008cb2:	33d0      	adds	r3, #208	@ 0xd0
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	d105      	bne.n	8008cc4 <std+0x54>
 8008cb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc0:	f000 b976 	b.w	8008fb0 <__retarget_lock_init_recursive>
 8008cc4:	bd10      	pop	{r4, pc}
 8008cc6:	bf00      	nop
 8008cc8:	08008e39 	.word	0x08008e39
 8008ccc:	08008e5b 	.word	0x08008e5b
 8008cd0:	08008e93 	.word	0x08008e93
 8008cd4:	08008eb7 	.word	0x08008eb7
 8008cd8:	200041f0 	.word	0x200041f0

08008cdc <stdio_exit_handler>:
 8008cdc:	4a02      	ldr	r2, [pc, #8]	@ (8008ce8 <stdio_exit_handler+0xc>)
 8008cde:	4903      	ldr	r1, [pc, #12]	@ (8008cec <stdio_exit_handler+0x10>)
 8008ce0:	4803      	ldr	r0, [pc, #12]	@ (8008cf0 <stdio_exit_handler+0x14>)
 8008ce2:	f000 b869 	b.w	8008db8 <_fwalk_sglue>
 8008ce6:	bf00      	nop
 8008ce8:	2000009c 	.word	0x2000009c
 8008cec:	080098e1 	.word	0x080098e1
 8008cf0:	200000ac 	.word	0x200000ac

08008cf4 <cleanup_stdio>:
 8008cf4:	6841      	ldr	r1, [r0, #4]
 8008cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8008d28 <cleanup_stdio+0x34>)
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	b510      	push	{r4, lr}
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	d001      	beq.n	8008d04 <cleanup_stdio+0x10>
 8008d00:	f000 fdee 	bl	80098e0 <_fflush_r>
 8008d04:	68a1      	ldr	r1, [r4, #8]
 8008d06:	4b09      	ldr	r3, [pc, #36]	@ (8008d2c <cleanup_stdio+0x38>)
 8008d08:	4299      	cmp	r1, r3
 8008d0a:	d002      	beq.n	8008d12 <cleanup_stdio+0x1e>
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f000 fde7 	bl	80098e0 <_fflush_r>
 8008d12:	68e1      	ldr	r1, [r4, #12]
 8008d14:	4b06      	ldr	r3, [pc, #24]	@ (8008d30 <cleanup_stdio+0x3c>)
 8008d16:	4299      	cmp	r1, r3
 8008d18:	d004      	beq.n	8008d24 <cleanup_stdio+0x30>
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d20:	f000 bdde 	b.w	80098e0 <_fflush_r>
 8008d24:	bd10      	pop	{r4, pc}
 8008d26:	bf00      	nop
 8008d28:	200041f0 	.word	0x200041f0
 8008d2c:	20004258 	.word	0x20004258
 8008d30:	200042c0 	.word	0x200042c0

08008d34 <global_stdio_init.part.0>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	4b0b      	ldr	r3, [pc, #44]	@ (8008d64 <global_stdio_init.part.0+0x30>)
 8008d38:	4c0b      	ldr	r4, [pc, #44]	@ (8008d68 <global_stdio_init.part.0+0x34>)
 8008d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d6c <global_stdio_init.part.0+0x38>)
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	2200      	movs	r2, #0
 8008d42:	2104      	movs	r1, #4
 8008d44:	f7ff ff94 	bl	8008c70 <std>
 8008d48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	2109      	movs	r1, #9
 8008d50:	f7ff ff8e 	bl	8008c70 <std>
 8008d54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d58:	2202      	movs	r2, #2
 8008d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d5e:	2112      	movs	r1, #18
 8008d60:	f7ff bf86 	b.w	8008c70 <std>
 8008d64:	20004328 	.word	0x20004328
 8008d68:	200041f0 	.word	0x200041f0
 8008d6c:	08008cdd 	.word	0x08008cdd

08008d70 <__sfp_lock_acquire>:
 8008d70:	4801      	ldr	r0, [pc, #4]	@ (8008d78 <__sfp_lock_acquire+0x8>)
 8008d72:	f000 b91e 	b.w	8008fb2 <__retarget_lock_acquire_recursive>
 8008d76:	bf00      	nop
 8008d78:	20004331 	.word	0x20004331

08008d7c <__sfp_lock_release>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	@ (8008d84 <__sfp_lock_release+0x8>)
 8008d7e:	f000 b919 	b.w	8008fb4 <__retarget_lock_release_recursive>
 8008d82:	bf00      	nop
 8008d84:	20004331 	.word	0x20004331

08008d88 <__sinit>:
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	f7ff fff0 	bl	8008d70 <__sfp_lock_acquire>
 8008d90:	6a23      	ldr	r3, [r4, #32]
 8008d92:	b11b      	cbz	r3, 8008d9c <__sinit+0x14>
 8008d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d98:	f7ff bff0 	b.w	8008d7c <__sfp_lock_release>
 8008d9c:	4b04      	ldr	r3, [pc, #16]	@ (8008db0 <__sinit+0x28>)
 8008d9e:	6223      	str	r3, [r4, #32]
 8008da0:	4b04      	ldr	r3, [pc, #16]	@ (8008db4 <__sinit+0x2c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1f5      	bne.n	8008d94 <__sinit+0xc>
 8008da8:	f7ff ffc4 	bl	8008d34 <global_stdio_init.part.0>
 8008dac:	e7f2      	b.n	8008d94 <__sinit+0xc>
 8008dae:	bf00      	nop
 8008db0:	08008cf5 	.word	0x08008cf5
 8008db4:	20004328 	.word	0x20004328

08008db8 <_fwalk_sglue>:
 8008db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	4688      	mov	r8, r1
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dc8:	f1b9 0901 	subs.w	r9, r9, #1
 8008dcc:	d505      	bpl.n	8008dda <_fwalk_sglue+0x22>
 8008dce:	6824      	ldr	r4, [r4, #0]
 8008dd0:	2c00      	cmp	r4, #0
 8008dd2:	d1f7      	bne.n	8008dc4 <_fwalk_sglue+0xc>
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d907      	bls.n	8008df0 <_fwalk_sglue+0x38>
 8008de0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008de4:	3301      	adds	r3, #1
 8008de6:	d003      	beq.n	8008df0 <_fwalk_sglue+0x38>
 8008de8:	4629      	mov	r1, r5
 8008dea:	4638      	mov	r0, r7
 8008dec:	47c0      	blx	r8
 8008dee:	4306      	orrs	r6, r0
 8008df0:	3568      	adds	r5, #104	@ 0x68
 8008df2:	e7e9      	b.n	8008dc8 <_fwalk_sglue+0x10>

08008df4 <siprintf>:
 8008df4:	b40e      	push	{r1, r2, r3}
 8008df6:	b510      	push	{r4, lr}
 8008df8:	b09d      	sub	sp, #116	@ 0x74
 8008dfa:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008dfc:	9002      	str	r0, [sp, #8]
 8008dfe:	9006      	str	r0, [sp, #24]
 8008e00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e04:	480a      	ldr	r0, [pc, #40]	@ (8008e30 <siprintf+0x3c>)
 8008e06:	9107      	str	r1, [sp, #28]
 8008e08:	9104      	str	r1, [sp, #16]
 8008e0a:	490a      	ldr	r1, [pc, #40]	@ (8008e34 <siprintf+0x40>)
 8008e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e10:	9105      	str	r1, [sp, #20]
 8008e12:	2400      	movs	r4, #0
 8008e14:	a902      	add	r1, sp, #8
 8008e16:	6800      	ldr	r0, [r0, #0]
 8008e18:	9301      	str	r3, [sp, #4]
 8008e1a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008e1c:	f000 fa54 	bl	80092c8 <_svfiprintf_r>
 8008e20:	9b02      	ldr	r3, [sp, #8]
 8008e22:	701c      	strb	r4, [r3, #0]
 8008e24:	b01d      	add	sp, #116	@ 0x74
 8008e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e2a:	b003      	add	sp, #12
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	200000a8 	.word	0x200000a8
 8008e34:	ffff0208 	.word	0xffff0208

08008e38 <__sread>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e40:	f000 f868 	bl	8008f14 <_read_r>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	bfab      	itete	ge
 8008e48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e4c:	181b      	addge	r3, r3, r0
 8008e4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e52:	bfac      	ite	ge
 8008e54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e56:	81a3      	strhlt	r3, [r4, #12]
 8008e58:	bd10      	pop	{r4, pc}

08008e5a <__swrite>:
 8008e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5e:	461f      	mov	r7, r3
 8008e60:	898b      	ldrh	r3, [r1, #12]
 8008e62:	05db      	lsls	r3, r3, #23
 8008e64:	4605      	mov	r5, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	4616      	mov	r6, r2
 8008e6a:	d505      	bpl.n	8008e78 <__swrite+0x1e>
 8008e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e70:	2302      	movs	r3, #2
 8008e72:	2200      	movs	r2, #0
 8008e74:	f000 f83c 	bl	8008ef0 <_lseek_r>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	4632      	mov	r2, r6
 8008e86:	463b      	mov	r3, r7
 8008e88:	4628      	mov	r0, r5
 8008e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8e:	f000 b853 	b.w	8008f38 <_write_r>

08008e92 <__sseek>:
 8008e92:	b510      	push	{r4, lr}
 8008e94:	460c      	mov	r4, r1
 8008e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9a:	f000 f829 	bl	8008ef0 <_lseek_r>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	bf15      	itete	ne
 8008ea4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ea6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008eaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008eae:	81a3      	strheq	r3, [r4, #12]
 8008eb0:	bf18      	it	ne
 8008eb2:	81a3      	strhne	r3, [r4, #12]
 8008eb4:	bd10      	pop	{r4, pc}

08008eb6 <__sclose>:
 8008eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eba:	f000 b809 	b.w	8008ed0 <_close_r>

08008ebe <memset>:
 8008ebe:	4402      	add	r2, r0
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d100      	bne.n	8008ec8 <memset+0xa>
 8008ec6:	4770      	bx	lr
 8008ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8008ecc:	e7f9      	b.n	8008ec2 <memset+0x4>
	...

08008ed0 <_close_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d06      	ldr	r5, [pc, #24]	@ (8008eec <_close_r+0x1c>)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	602b      	str	r3, [r5, #0]
 8008edc:	f7f9 fc8b 	bl	80027f6 <_close>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_close_r+0x1a>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_close_r+0x1a>
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	2000432c 	.word	0x2000432c

08008ef0 <_lseek_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4d07      	ldr	r5, [pc, #28]	@ (8008f10 <_lseek_r+0x20>)
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4611      	mov	r1, r2
 8008efa:	2200      	movs	r2, #0
 8008efc:	602a      	str	r2, [r5, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	f7f9 fca0 	bl	8002844 <_lseek>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_lseek_r+0x1e>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_lseek_r+0x1e>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	2000432c 	.word	0x2000432c

08008f14 <_read_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4d07      	ldr	r5, [pc, #28]	@ (8008f34 <_read_r+0x20>)
 8008f18:	4604      	mov	r4, r0
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	602a      	str	r2, [r5, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f7f9 fc2e 	bl	8002784 <_read>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_read_r+0x1e>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_read_r+0x1e>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	2000432c 	.word	0x2000432c

08008f38 <_write_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d07      	ldr	r5, [pc, #28]	@ (8008f58 <_write_r+0x20>)
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	4608      	mov	r0, r1
 8008f40:	4611      	mov	r1, r2
 8008f42:	2200      	movs	r2, #0
 8008f44:	602a      	str	r2, [r5, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	f7f9 fc39 	bl	80027be <_write>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_write_r+0x1e>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_write_r+0x1e>
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	2000432c 	.word	0x2000432c

08008f5c <__errno>:
 8008f5c:	4b01      	ldr	r3, [pc, #4]	@ (8008f64 <__errno+0x8>)
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	200000a8 	.word	0x200000a8

08008f68 <__libc_init_array>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8008fa0 <__libc_init_array+0x38>)
 8008f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8008fa4 <__libc_init_array+0x3c>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	2600      	movs	r6, #0
 8008f74:	42a6      	cmp	r6, r4
 8008f76:	d109      	bne.n	8008f8c <__libc_init_array+0x24>
 8008f78:	4d0b      	ldr	r5, [pc, #44]	@ (8008fa8 <__libc_init_array+0x40>)
 8008f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8008fac <__libc_init_array+0x44>)
 8008f7c:	f000 ffee 	bl	8009f5c <_init>
 8008f80:	1b64      	subs	r4, r4, r5
 8008f82:	10a4      	asrs	r4, r4, #2
 8008f84:	2600      	movs	r6, #0
 8008f86:	42a6      	cmp	r6, r4
 8008f88:	d105      	bne.n	8008f96 <__libc_init_array+0x2e>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f90:	4798      	blx	r3
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7ee      	b.n	8008f74 <__libc_init_array+0xc>
 8008f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9a:	4798      	blx	r3
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	e7f2      	b.n	8008f86 <__libc_init_array+0x1e>
 8008fa0:	0804c99c 	.word	0x0804c99c
 8008fa4:	0804c99c 	.word	0x0804c99c
 8008fa8:	0804c99c 	.word	0x0804c99c
 8008fac:	0804c9a0 	.word	0x0804c9a0

08008fb0 <__retarget_lock_init_recursive>:
 8008fb0:	4770      	bx	lr

08008fb2 <__retarget_lock_acquire_recursive>:
 8008fb2:	4770      	bx	lr

08008fb4 <__retarget_lock_release_recursive>:
 8008fb4:	4770      	bx	lr

08008fb6 <memcpy>:
 8008fb6:	440a      	add	r2, r1
 8008fb8:	4291      	cmp	r1, r2
 8008fba:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fbe:	d100      	bne.n	8008fc2 <memcpy+0xc>
 8008fc0:	4770      	bx	lr
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fcc:	4291      	cmp	r1, r2
 8008fce:	d1f9      	bne.n	8008fc4 <memcpy+0xe>
 8008fd0:	bd10      	pop	{r4, pc}
	...

08008fd4 <__assert_func>:
 8008fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fd6:	4614      	mov	r4, r2
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4b09      	ldr	r3, [pc, #36]	@ (8009000 <__assert_func+0x2c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4605      	mov	r5, r0
 8008fe0:	68d8      	ldr	r0, [r3, #12]
 8008fe2:	b14c      	cbz	r4, 8008ff8 <__assert_func+0x24>
 8008fe4:	4b07      	ldr	r3, [pc, #28]	@ (8009004 <__assert_func+0x30>)
 8008fe6:	9100      	str	r1, [sp, #0]
 8008fe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fec:	4906      	ldr	r1, [pc, #24]	@ (8009008 <__assert_func+0x34>)
 8008fee:	462b      	mov	r3, r5
 8008ff0:	f000 fc9e 	bl	8009930 <fiprintf>
 8008ff4:	f000 fcd8 	bl	80099a8 <abort>
 8008ff8:	4b04      	ldr	r3, [pc, #16]	@ (800900c <__assert_func+0x38>)
 8008ffa:	461c      	mov	r4, r3
 8008ffc:	e7f3      	b.n	8008fe6 <__assert_func+0x12>
 8008ffe:	bf00      	nop
 8009000:	200000a8 	.word	0x200000a8
 8009004:	0804c923 	.word	0x0804c923
 8009008:	0804c930 	.word	0x0804c930
 800900c:	0804c95e 	.word	0x0804c95e

08009010 <_free_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4605      	mov	r5, r0
 8009014:	2900      	cmp	r1, #0
 8009016:	d041      	beq.n	800909c <_free_r+0x8c>
 8009018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800901c:	1f0c      	subs	r4, r1, #4
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfb8      	it	lt
 8009022:	18e4      	addlt	r4, r4, r3
 8009024:	f000 f8e8 	bl	80091f8 <__malloc_lock>
 8009028:	4a1d      	ldr	r2, [pc, #116]	@ (80090a0 <_free_r+0x90>)
 800902a:	6813      	ldr	r3, [r2, #0]
 800902c:	b933      	cbnz	r3, 800903c <_free_r+0x2c>
 800902e:	6063      	str	r3, [r4, #4]
 8009030:	6014      	str	r4, [r2, #0]
 8009032:	4628      	mov	r0, r5
 8009034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009038:	f000 b8e4 	b.w	8009204 <__malloc_unlock>
 800903c:	42a3      	cmp	r3, r4
 800903e:	d908      	bls.n	8009052 <_free_r+0x42>
 8009040:	6820      	ldr	r0, [r4, #0]
 8009042:	1821      	adds	r1, r4, r0
 8009044:	428b      	cmp	r3, r1
 8009046:	bf01      	itttt	eq
 8009048:	6819      	ldreq	r1, [r3, #0]
 800904a:	685b      	ldreq	r3, [r3, #4]
 800904c:	1809      	addeq	r1, r1, r0
 800904e:	6021      	streq	r1, [r4, #0]
 8009050:	e7ed      	b.n	800902e <_free_r+0x1e>
 8009052:	461a      	mov	r2, r3
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	b10b      	cbz	r3, 800905c <_free_r+0x4c>
 8009058:	42a3      	cmp	r3, r4
 800905a:	d9fa      	bls.n	8009052 <_free_r+0x42>
 800905c:	6811      	ldr	r1, [r2, #0]
 800905e:	1850      	adds	r0, r2, r1
 8009060:	42a0      	cmp	r0, r4
 8009062:	d10b      	bne.n	800907c <_free_r+0x6c>
 8009064:	6820      	ldr	r0, [r4, #0]
 8009066:	4401      	add	r1, r0
 8009068:	1850      	adds	r0, r2, r1
 800906a:	4283      	cmp	r3, r0
 800906c:	6011      	str	r1, [r2, #0]
 800906e:	d1e0      	bne.n	8009032 <_free_r+0x22>
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	6053      	str	r3, [r2, #4]
 8009076:	4408      	add	r0, r1
 8009078:	6010      	str	r0, [r2, #0]
 800907a:	e7da      	b.n	8009032 <_free_r+0x22>
 800907c:	d902      	bls.n	8009084 <_free_r+0x74>
 800907e:	230c      	movs	r3, #12
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	e7d6      	b.n	8009032 <_free_r+0x22>
 8009084:	6820      	ldr	r0, [r4, #0]
 8009086:	1821      	adds	r1, r4, r0
 8009088:	428b      	cmp	r3, r1
 800908a:	bf04      	itt	eq
 800908c:	6819      	ldreq	r1, [r3, #0]
 800908e:	685b      	ldreq	r3, [r3, #4]
 8009090:	6063      	str	r3, [r4, #4]
 8009092:	bf04      	itt	eq
 8009094:	1809      	addeq	r1, r1, r0
 8009096:	6021      	streq	r1, [r4, #0]
 8009098:	6054      	str	r4, [r2, #4]
 800909a:	e7ca      	b.n	8009032 <_free_r+0x22>
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	bf00      	nop
 80090a0:	20004338 	.word	0x20004338

080090a4 <malloc>:
 80090a4:	4b02      	ldr	r3, [pc, #8]	@ (80090b0 <malloc+0xc>)
 80090a6:	4601      	mov	r1, r0
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f000 b825 	b.w	80090f8 <_malloc_r>
 80090ae:	bf00      	nop
 80090b0:	200000a8 	.word	0x200000a8

080090b4 <sbrk_aligned>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	4e0f      	ldr	r6, [pc, #60]	@ (80090f4 <sbrk_aligned+0x40>)
 80090b8:	460c      	mov	r4, r1
 80090ba:	6831      	ldr	r1, [r6, #0]
 80090bc:	4605      	mov	r5, r0
 80090be:	b911      	cbnz	r1, 80090c6 <sbrk_aligned+0x12>
 80090c0:	f000 fc62 	bl	8009988 <_sbrk_r>
 80090c4:	6030      	str	r0, [r6, #0]
 80090c6:	4621      	mov	r1, r4
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 fc5d 	bl	8009988 <_sbrk_r>
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	d103      	bne.n	80090da <sbrk_aligned+0x26>
 80090d2:	f04f 34ff 	mov.w	r4, #4294967295
 80090d6:	4620      	mov	r0, r4
 80090d8:	bd70      	pop	{r4, r5, r6, pc}
 80090da:	1cc4      	adds	r4, r0, #3
 80090dc:	f024 0403 	bic.w	r4, r4, #3
 80090e0:	42a0      	cmp	r0, r4
 80090e2:	d0f8      	beq.n	80090d6 <sbrk_aligned+0x22>
 80090e4:	1a21      	subs	r1, r4, r0
 80090e6:	4628      	mov	r0, r5
 80090e8:	f000 fc4e 	bl	8009988 <_sbrk_r>
 80090ec:	3001      	adds	r0, #1
 80090ee:	d1f2      	bne.n	80090d6 <sbrk_aligned+0x22>
 80090f0:	e7ef      	b.n	80090d2 <sbrk_aligned+0x1e>
 80090f2:	bf00      	nop
 80090f4:	20004334 	.word	0x20004334

080090f8 <_malloc_r>:
 80090f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090fc:	1ccd      	adds	r5, r1, #3
 80090fe:	f025 0503 	bic.w	r5, r5, #3
 8009102:	3508      	adds	r5, #8
 8009104:	2d0c      	cmp	r5, #12
 8009106:	bf38      	it	cc
 8009108:	250c      	movcc	r5, #12
 800910a:	2d00      	cmp	r5, #0
 800910c:	4606      	mov	r6, r0
 800910e:	db01      	blt.n	8009114 <_malloc_r+0x1c>
 8009110:	42a9      	cmp	r1, r5
 8009112:	d904      	bls.n	800911e <_malloc_r+0x26>
 8009114:	230c      	movs	r3, #12
 8009116:	6033      	str	r3, [r6, #0]
 8009118:	2000      	movs	r0, #0
 800911a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800911e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091f4 <_malloc_r+0xfc>
 8009122:	f000 f869 	bl	80091f8 <__malloc_lock>
 8009126:	f8d8 3000 	ldr.w	r3, [r8]
 800912a:	461c      	mov	r4, r3
 800912c:	bb44      	cbnz	r4, 8009180 <_malloc_r+0x88>
 800912e:	4629      	mov	r1, r5
 8009130:	4630      	mov	r0, r6
 8009132:	f7ff ffbf 	bl	80090b4 <sbrk_aligned>
 8009136:	1c43      	adds	r3, r0, #1
 8009138:	4604      	mov	r4, r0
 800913a:	d158      	bne.n	80091ee <_malloc_r+0xf6>
 800913c:	f8d8 4000 	ldr.w	r4, [r8]
 8009140:	4627      	mov	r7, r4
 8009142:	2f00      	cmp	r7, #0
 8009144:	d143      	bne.n	80091ce <_malloc_r+0xd6>
 8009146:	2c00      	cmp	r4, #0
 8009148:	d04b      	beq.n	80091e2 <_malloc_r+0xea>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	4639      	mov	r1, r7
 800914e:	4630      	mov	r0, r6
 8009150:	eb04 0903 	add.w	r9, r4, r3
 8009154:	f000 fc18 	bl	8009988 <_sbrk_r>
 8009158:	4581      	cmp	r9, r0
 800915a:	d142      	bne.n	80091e2 <_malloc_r+0xea>
 800915c:	6821      	ldr	r1, [r4, #0]
 800915e:	1a6d      	subs	r5, r5, r1
 8009160:	4629      	mov	r1, r5
 8009162:	4630      	mov	r0, r6
 8009164:	f7ff ffa6 	bl	80090b4 <sbrk_aligned>
 8009168:	3001      	adds	r0, #1
 800916a:	d03a      	beq.n	80091e2 <_malloc_r+0xea>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	442b      	add	r3, r5
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	f8d8 3000 	ldr.w	r3, [r8]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	bb62      	cbnz	r2, 80091d4 <_malloc_r+0xdc>
 800917a:	f8c8 7000 	str.w	r7, [r8]
 800917e:	e00f      	b.n	80091a0 <_malloc_r+0xa8>
 8009180:	6822      	ldr	r2, [r4, #0]
 8009182:	1b52      	subs	r2, r2, r5
 8009184:	d420      	bmi.n	80091c8 <_malloc_r+0xd0>
 8009186:	2a0b      	cmp	r2, #11
 8009188:	d917      	bls.n	80091ba <_malloc_r+0xc2>
 800918a:	1961      	adds	r1, r4, r5
 800918c:	42a3      	cmp	r3, r4
 800918e:	6025      	str	r5, [r4, #0]
 8009190:	bf18      	it	ne
 8009192:	6059      	strne	r1, [r3, #4]
 8009194:	6863      	ldr	r3, [r4, #4]
 8009196:	bf08      	it	eq
 8009198:	f8c8 1000 	streq.w	r1, [r8]
 800919c:	5162      	str	r2, [r4, r5]
 800919e:	604b      	str	r3, [r1, #4]
 80091a0:	4630      	mov	r0, r6
 80091a2:	f000 f82f 	bl	8009204 <__malloc_unlock>
 80091a6:	f104 000b 	add.w	r0, r4, #11
 80091aa:	1d23      	adds	r3, r4, #4
 80091ac:	f020 0007 	bic.w	r0, r0, #7
 80091b0:	1ac2      	subs	r2, r0, r3
 80091b2:	bf1c      	itt	ne
 80091b4:	1a1b      	subne	r3, r3, r0
 80091b6:	50a3      	strne	r3, [r4, r2]
 80091b8:	e7af      	b.n	800911a <_malloc_r+0x22>
 80091ba:	6862      	ldr	r2, [r4, #4]
 80091bc:	42a3      	cmp	r3, r4
 80091be:	bf0c      	ite	eq
 80091c0:	f8c8 2000 	streq.w	r2, [r8]
 80091c4:	605a      	strne	r2, [r3, #4]
 80091c6:	e7eb      	b.n	80091a0 <_malloc_r+0xa8>
 80091c8:	4623      	mov	r3, r4
 80091ca:	6864      	ldr	r4, [r4, #4]
 80091cc:	e7ae      	b.n	800912c <_malloc_r+0x34>
 80091ce:	463c      	mov	r4, r7
 80091d0:	687f      	ldr	r7, [r7, #4]
 80091d2:	e7b6      	b.n	8009142 <_malloc_r+0x4a>
 80091d4:	461a      	mov	r2, r3
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d1fb      	bne.n	80091d4 <_malloc_r+0xdc>
 80091dc:	2300      	movs	r3, #0
 80091de:	6053      	str	r3, [r2, #4]
 80091e0:	e7de      	b.n	80091a0 <_malloc_r+0xa8>
 80091e2:	230c      	movs	r3, #12
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	4630      	mov	r0, r6
 80091e8:	f000 f80c 	bl	8009204 <__malloc_unlock>
 80091ec:	e794      	b.n	8009118 <_malloc_r+0x20>
 80091ee:	6005      	str	r5, [r0, #0]
 80091f0:	e7d6      	b.n	80091a0 <_malloc_r+0xa8>
 80091f2:	bf00      	nop
 80091f4:	20004338 	.word	0x20004338

080091f8 <__malloc_lock>:
 80091f8:	4801      	ldr	r0, [pc, #4]	@ (8009200 <__malloc_lock+0x8>)
 80091fa:	f7ff beda 	b.w	8008fb2 <__retarget_lock_acquire_recursive>
 80091fe:	bf00      	nop
 8009200:	20004330 	.word	0x20004330

08009204 <__malloc_unlock>:
 8009204:	4801      	ldr	r0, [pc, #4]	@ (800920c <__malloc_unlock+0x8>)
 8009206:	f7ff bed5 	b.w	8008fb4 <__retarget_lock_release_recursive>
 800920a:	bf00      	nop
 800920c:	20004330 	.word	0x20004330

08009210 <__ssputs_r>:
 8009210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009214:	688e      	ldr	r6, [r1, #8]
 8009216:	461f      	mov	r7, r3
 8009218:	42be      	cmp	r6, r7
 800921a:	680b      	ldr	r3, [r1, #0]
 800921c:	4682      	mov	sl, r0
 800921e:	460c      	mov	r4, r1
 8009220:	4690      	mov	r8, r2
 8009222:	d82d      	bhi.n	8009280 <__ssputs_r+0x70>
 8009224:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009228:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800922c:	d026      	beq.n	800927c <__ssputs_r+0x6c>
 800922e:	6965      	ldr	r5, [r4, #20]
 8009230:	6909      	ldr	r1, [r1, #16]
 8009232:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009236:	eba3 0901 	sub.w	r9, r3, r1
 800923a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800923e:	1c7b      	adds	r3, r7, #1
 8009240:	444b      	add	r3, r9
 8009242:	106d      	asrs	r5, r5, #1
 8009244:	429d      	cmp	r5, r3
 8009246:	bf38      	it	cc
 8009248:	461d      	movcc	r5, r3
 800924a:	0553      	lsls	r3, r2, #21
 800924c:	d527      	bpl.n	800929e <__ssputs_r+0x8e>
 800924e:	4629      	mov	r1, r5
 8009250:	f7ff ff52 	bl	80090f8 <_malloc_r>
 8009254:	4606      	mov	r6, r0
 8009256:	b360      	cbz	r0, 80092b2 <__ssputs_r+0xa2>
 8009258:	6921      	ldr	r1, [r4, #16]
 800925a:	464a      	mov	r2, r9
 800925c:	f7ff feab 	bl	8008fb6 <memcpy>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	6126      	str	r6, [r4, #16]
 800926e:	6165      	str	r5, [r4, #20]
 8009270:	444e      	add	r6, r9
 8009272:	eba5 0509 	sub.w	r5, r5, r9
 8009276:	6026      	str	r6, [r4, #0]
 8009278:	60a5      	str	r5, [r4, #8]
 800927a:	463e      	mov	r6, r7
 800927c:	42be      	cmp	r6, r7
 800927e:	d900      	bls.n	8009282 <__ssputs_r+0x72>
 8009280:	463e      	mov	r6, r7
 8009282:	6820      	ldr	r0, [r4, #0]
 8009284:	4632      	mov	r2, r6
 8009286:	4641      	mov	r1, r8
 8009288:	f000 fb64 	bl	8009954 <memmove>
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	1b9b      	subs	r3, r3, r6
 8009290:	60a3      	str	r3, [r4, #8]
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	4433      	add	r3, r6
 8009296:	6023      	str	r3, [r4, #0]
 8009298:	2000      	movs	r0, #0
 800929a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929e:	462a      	mov	r2, r5
 80092a0:	f000 fb89 	bl	80099b6 <_realloc_r>
 80092a4:	4606      	mov	r6, r0
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d1e0      	bne.n	800926c <__ssputs_r+0x5c>
 80092aa:	6921      	ldr	r1, [r4, #16]
 80092ac:	4650      	mov	r0, sl
 80092ae:	f7ff feaf 	bl	8009010 <_free_r>
 80092b2:	230c      	movs	r3, #12
 80092b4:	f8ca 3000 	str.w	r3, [sl]
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	e7e9      	b.n	800929a <__ssputs_r+0x8a>
	...

080092c8 <_svfiprintf_r>:
 80092c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	4698      	mov	r8, r3
 80092ce:	898b      	ldrh	r3, [r1, #12]
 80092d0:	061b      	lsls	r3, r3, #24
 80092d2:	b09d      	sub	sp, #116	@ 0x74
 80092d4:	4607      	mov	r7, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	4614      	mov	r4, r2
 80092da:	d510      	bpl.n	80092fe <_svfiprintf_r+0x36>
 80092dc:	690b      	ldr	r3, [r1, #16]
 80092de:	b973      	cbnz	r3, 80092fe <_svfiprintf_r+0x36>
 80092e0:	2140      	movs	r1, #64	@ 0x40
 80092e2:	f7ff ff09 	bl	80090f8 <_malloc_r>
 80092e6:	6028      	str	r0, [r5, #0]
 80092e8:	6128      	str	r0, [r5, #16]
 80092ea:	b930      	cbnz	r0, 80092fa <_svfiprintf_r+0x32>
 80092ec:	230c      	movs	r3, #12
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	b01d      	add	sp, #116	@ 0x74
 80092f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fa:	2340      	movs	r3, #64	@ 0x40
 80092fc:	616b      	str	r3, [r5, #20]
 80092fe:	2300      	movs	r3, #0
 8009300:	9309      	str	r3, [sp, #36]	@ 0x24
 8009302:	2320      	movs	r3, #32
 8009304:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009308:	f8cd 800c 	str.w	r8, [sp, #12]
 800930c:	2330      	movs	r3, #48	@ 0x30
 800930e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094ac <_svfiprintf_r+0x1e4>
 8009312:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009316:	f04f 0901 	mov.w	r9, #1
 800931a:	4623      	mov	r3, r4
 800931c:	469a      	mov	sl, r3
 800931e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009322:	b10a      	cbz	r2, 8009328 <_svfiprintf_r+0x60>
 8009324:	2a25      	cmp	r2, #37	@ 0x25
 8009326:	d1f9      	bne.n	800931c <_svfiprintf_r+0x54>
 8009328:	ebba 0b04 	subs.w	fp, sl, r4
 800932c:	d00b      	beq.n	8009346 <_svfiprintf_r+0x7e>
 800932e:	465b      	mov	r3, fp
 8009330:	4622      	mov	r2, r4
 8009332:	4629      	mov	r1, r5
 8009334:	4638      	mov	r0, r7
 8009336:	f7ff ff6b 	bl	8009210 <__ssputs_r>
 800933a:	3001      	adds	r0, #1
 800933c:	f000 80a7 	beq.w	800948e <_svfiprintf_r+0x1c6>
 8009340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009342:	445a      	add	r2, fp
 8009344:	9209      	str	r2, [sp, #36]	@ 0x24
 8009346:	f89a 3000 	ldrb.w	r3, [sl]
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 809f 	beq.w	800948e <_svfiprintf_r+0x1c6>
 8009350:	2300      	movs	r3, #0
 8009352:	f04f 32ff 	mov.w	r2, #4294967295
 8009356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800935a:	f10a 0a01 	add.w	sl, sl, #1
 800935e:	9304      	str	r3, [sp, #16]
 8009360:	9307      	str	r3, [sp, #28]
 8009362:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009366:	931a      	str	r3, [sp, #104]	@ 0x68
 8009368:	4654      	mov	r4, sl
 800936a:	2205      	movs	r2, #5
 800936c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009370:	484e      	ldr	r0, [pc, #312]	@ (80094ac <_svfiprintf_r+0x1e4>)
 8009372:	f7f6 ff2d 	bl	80001d0 <memchr>
 8009376:	9a04      	ldr	r2, [sp, #16]
 8009378:	b9d8      	cbnz	r0, 80093b2 <_svfiprintf_r+0xea>
 800937a:	06d0      	lsls	r0, r2, #27
 800937c:	bf44      	itt	mi
 800937e:	2320      	movmi	r3, #32
 8009380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009384:	0711      	lsls	r1, r2, #28
 8009386:	bf44      	itt	mi
 8009388:	232b      	movmi	r3, #43	@ 0x2b
 800938a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800938e:	f89a 3000 	ldrb.w	r3, [sl]
 8009392:	2b2a      	cmp	r3, #42	@ 0x2a
 8009394:	d015      	beq.n	80093c2 <_svfiprintf_r+0xfa>
 8009396:	9a07      	ldr	r2, [sp, #28]
 8009398:	4654      	mov	r4, sl
 800939a:	2000      	movs	r0, #0
 800939c:	f04f 0c0a 	mov.w	ip, #10
 80093a0:	4621      	mov	r1, r4
 80093a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093a6:	3b30      	subs	r3, #48	@ 0x30
 80093a8:	2b09      	cmp	r3, #9
 80093aa:	d94b      	bls.n	8009444 <_svfiprintf_r+0x17c>
 80093ac:	b1b0      	cbz	r0, 80093dc <_svfiprintf_r+0x114>
 80093ae:	9207      	str	r2, [sp, #28]
 80093b0:	e014      	b.n	80093dc <_svfiprintf_r+0x114>
 80093b2:	eba0 0308 	sub.w	r3, r0, r8
 80093b6:	fa09 f303 	lsl.w	r3, r9, r3
 80093ba:	4313      	orrs	r3, r2
 80093bc:	9304      	str	r3, [sp, #16]
 80093be:	46a2      	mov	sl, r4
 80093c0:	e7d2      	b.n	8009368 <_svfiprintf_r+0xa0>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	1d19      	adds	r1, r3, #4
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	9103      	str	r1, [sp, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	bfbb      	ittet	lt
 80093ce:	425b      	neglt	r3, r3
 80093d0:	f042 0202 	orrlt.w	r2, r2, #2
 80093d4:	9307      	strge	r3, [sp, #28]
 80093d6:	9307      	strlt	r3, [sp, #28]
 80093d8:	bfb8      	it	lt
 80093da:	9204      	strlt	r2, [sp, #16]
 80093dc:	7823      	ldrb	r3, [r4, #0]
 80093de:	2b2e      	cmp	r3, #46	@ 0x2e
 80093e0:	d10a      	bne.n	80093f8 <_svfiprintf_r+0x130>
 80093e2:	7863      	ldrb	r3, [r4, #1]
 80093e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80093e6:	d132      	bne.n	800944e <_svfiprintf_r+0x186>
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	1d1a      	adds	r2, r3, #4
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	9203      	str	r2, [sp, #12]
 80093f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093f4:	3402      	adds	r4, #2
 80093f6:	9305      	str	r3, [sp, #20]
 80093f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80094bc <_svfiprintf_r+0x1f4>
 80093fc:	7821      	ldrb	r1, [r4, #0]
 80093fe:	2203      	movs	r2, #3
 8009400:	4650      	mov	r0, sl
 8009402:	f7f6 fee5 	bl	80001d0 <memchr>
 8009406:	b138      	cbz	r0, 8009418 <_svfiprintf_r+0x150>
 8009408:	9b04      	ldr	r3, [sp, #16]
 800940a:	eba0 000a 	sub.w	r0, r0, sl
 800940e:	2240      	movs	r2, #64	@ 0x40
 8009410:	4082      	lsls	r2, r0
 8009412:	4313      	orrs	r3, r2
 8009414:	3401      	adds	r4, #1
 8009416:	9304      	str	r3, [sp, #16]
 8009418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800941c:	4824      	ldr	r0, [pc, #144]	@ (80094b0 <_svfiprintf_r+0x1e8>)
 800941e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009422:	2206      	movs	r2, #6
 8009424:	f7f6 fed4 	bl	80001d0 <memchr>
 8009428:	2800      	cmp	r0, #0
 800942a:	d036      	beq.n	800949a <_svfiprintf_r+0x1d2>
 800942c:	4b21      	ldr	r3, [pc, #132]	@ (80094b4 <_svfiprintf_r+0x1ec>)
 800942e:	bb1b      	cbnz	r3, 8009478 <_svfiprintf_r+0x1b0>
 8009430:	9b03      	ldr	r3, [sp, #12]
 8009432:	3307      	adds	r3, #7
 8009434:	f023 0307 	bic.w	r3, r3, #7
 8009438:	3308      	adds	r3, #8
 800943a:	9303      	str	r3, [sp, #12]
 800943c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800943e:	4433      	add	r3, r6
 8009440:	9309      	str	r3, [sp, #36]	@ 0x24
 8009442:	e76a      	b.n	800931a <_svfiprintf_r+0x52>
 8009444:	fb0c 3202 	mla	r2, ip, r2, r3
 8009448:	460c      	mov	r4, r1
 800944a:	2001      	movs	r0, #1
 800944c:	e7a8      	b.n	80093a0 <_svfiprintf_r+0xd8>
 800944e:	2300      	movs	r3, #0
 8009450:	3401      	adds	r4, #1
 8009452:	9305      	str	r3, [sp, #20]
 8009454:	4619      	mov	r1, r3
 8009456:	f04f 0c0a 	mov.w	ip, #10
 800945a:	4620      	mov	r0, r4
 800945c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009460:	3a30      	subs	r2, #48	@ 0x30
 8009462:	2a09      	cmp	r2, #9
 8009464:	d903      	bls.n	800946e <_svfiprintf_r+0x1a6>
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0c6      	beq.n	80093f8 <_svfiprintf_r+0x130>
 800946a:	9105      	str	r1, [sp, #20]
 800946c:	e7c4      	b.n	80093f8 <_svfiprintf_r+0x130>
 800946e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009472:	4604      	mov	r4, r0
 8009474:	2301      	movs	r3, #1
 8009476:	e7f0      	b.n	800945a <_svfiprintf_r+0x192>
 8009478:	ab03      	add	r3, sp, #12
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	462a      	mov	r2, r5
 800947e:	4b0e      	ldr	r3, [pc, #56]	@ (80094b8 <_svfiprintf_r+0x1f0>)
 8009480:	a904      	add	r1, sp, #16
 8009482:	4638      	mov	r0, r7
 8009484:	f3af 8000 	nop.w
 8009488:	1c42      	adds	r2, r0, #1
 800948a:	4606      	mov	r6, r0
 800948c:	d1d6      	bne.n	800943c <_svfiprintf_r+0x174>
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	065b      	lsls	r3, r3, #25
 8009492:	f53f af2d 	bmi.w	80092f0 <_svfiprintf_r+0x28>
 8009496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009498:	e72c      	b.n	80092f4 <_svfiprintf_r+0x2c>
 800949a:	ab03      	add	r3, sp, #12
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	462a      	mov	r2, r5
 80094a0:	4b05      	ldr	r3, [pc, #20]	@ (80094b8 <_svfiprintf_r+0x1f0>)
 80094a2:	a904      	add	r1, sp, #16
 80094a4:	4638      	mov	r0, r7
 80094a6:	f000 f879 	bl	800959c <_printf_i>
 80094aa:	e7ed      	b.n	8009488 <_svfiprintf_r+0x1c0>
 80094ac:	0804c95f 	.word	0x0804c95f
 80094b0:	0804c969 	.word	0x0804c969
 80094b4:	00000000 	.word	0x00000000
 80094b8:	08009211 	.word	0x08009211
 80094bc:	0804c965 	.word	0x0804c965

080094c0 <_printf_common>:
 80094c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	4616      	mov	r6, r2
 80094c6:	4698      	mov	r8, r3
 80094c8:	688a      	ldr	r2, [r1, #8]
 80094ca:	690b      	ldr	r3, [r1, #16]
 80094cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094d0:	4293      	cmp	r3, r2
 80094d2:	bfb8      	it	lt
 80094d4:	4613      	movlt	r3, r2
 80094d6:	6033      	str	r3, [r6, #0]
 80094d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094dc:	4607      	mov	r7, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	b10a      	cbz	r2, 80094e6 <_printf_common+0x26>
 80094e2:	3301      	adds	r3, #1
 80094e4:	6033      	str	r3, [r6, #0]
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	0699      	lsls	r1, r3, #26
 80094ea:	bf42      	ittt	mi
 80094ec:	6833      	ldrmi	r3, [r6, #0]
 80094ee:	3302      	addmi	r3, #2
 80094f0:	6033      	strmi	r3, [r6, #0]
 80094f2:	6825      	ldr	r5, [r4, #0]
 80094f4:	f015 0506 	ands.w	r5, r5, #6
 80094f8:	d106      	bne.n	8009508 <_printf_common+0x48>
 80094fa:	f104 0a19 	add.w	sl, r4, #25
 80094fe:	68e3      	ldr	r3, [r4, #12]
 8009500:	6832      	ldr	r2, [r6, #0]
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	42ab      	cmp	r3, r5
 8009506:	dc26      	bgt.n	8009556 <_printf_common+0x96>
 8009508:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800950c:	6822      	ldr	r2, [r4, #0]
 800950e:	3b00      	subs	r3, #0
 8009510:	bf18      	it	ne
 8009512:	2301      	movne	r3, #1
 8009514:	0692      	lsls	r2, r2, #26
 8009516:	d42b      	bmi.n	8009570 <_printf_common+0xb0>
 8009518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800951c:	4641      	mov	r1, r8
 800951e:	4638      	mov	r0, r7
 8009520:	47c8      	blx	r9
 8009522:	3001      	adds	r0, #1
 8009524:	d01e      	beq.n	8009564 <_printf_common+0xa4>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	6922      	ldr	r2, [r4, #16]
 800952a:	f003 0306 	and.w	r3, r3, #6
 800952e:	2b04      	cmp	r3, #4
 8009530:	bf02      	ittt	eq
 8009532:	68e5      	ldreq	r5, [r4, #12]
 8009534:	6833      	ldreq	r3, [r6, #0]
 8009536:	1aed      	subeq	r5, r5, r3
 8009538:	68a3      	ldr	r3, [r4, #8]
 800953a:	bf0c      	ite	eq
 800953c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009540:	2500      	movne	r5, #0
 8009542:	4293      	cmp	r3, r2
 8009544:	bfc4      	itt	gt
 8009546:	1a9b      	subgt	r3, r3, r2
 8009548:	18ed      	addgt	r5, r5, r3
 800954a:	2600      	movs	r6, #0
 800954c:	341a      	adds	r4, #26
 800954e:	42b5      	cmp	r5, r6
 8009550:	d11a      	bne.n	8009588 <_printf_common+0xc8>
 8009552:	2000      	movs	r0, #0
 8009554:	e008      	b.n	8009568 <_printf_common+0xa8>
 8009556:	2301      	movs	r3, #1
 8009558:	4652      	mov	r2, sl
 800955a:	4641      	mov	r1, r8
 800955c:	4638      	mov	r0, r7
 800955e:	47c8      	blx	r9
 8009560:	3001      	adds	r0, #1
 8009562:	d103      	bne.n	800956c <_printf_common+0xac>
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956c:	3501      	adds	r5, #1
 800956e:	e7c6      	b.n	80094fe <_printf_common+0x3e>
 8009570:	18e1      	adds	r1, r4, r3
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	2030      	movs	r0, #48	@ 0x30
 8009576:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800957a:	4422      	add	r2, r4
 800957c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009584:	3302      	adds	r3, #2
 8009586:	e7c7      	b.n	8009518 <_printf_common+0x58>
 8009588:	2301      	movs	r3, #1
 800958a:	4622      	mov	r2, r4
 800958c:	4641      	mov	r1, r8
 800958e:	4638      	mov	r0, r7
 8009590:	47c8      	blx	r9
 8009592:	3001      	adds	r0, #1
 8009594:	d0e6      	beq.n	8009564 <_printf_common+0xa4>
 8009596:	3601      	adds	r6, #1
 8009598:	e7d9      	b.n	800954e <_printf_common+0x8e>
	...

0800959c <_printf_i>:
 800959c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095a0:	7e0f      	ldrb	r7, [r1, #24]
 80095a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095a4:	2f78      	cmp	r7, #120	@ 0x78
 80095a6:	4691      	mov	r9, r2
 80095a8:	4680      	mov	r8, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	469a      	mov	sl, r3
 80095ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095b2:	d807      	bhi.n	80095c4 <_printf_i+0x28>
 80095b4:	2f62      	cmp	r7, #98	@ 0x62
 80095b6:	d80a      	bhi.n	80095ce <_printf_i+0x32>
 80095b8:	2f00      	cmp	r7, #0
 80095ba:	f000 80d1 	beq.w	8009760 <_printf_i+0x1c4>
 80095be:	2f58      	cmp	r7, #88	@ 0x58
 80095c0:	f000 80b8 	beq.w	8009734 <_printf_i+0x198>
 80095c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095cc:	e03a      	b.n	8009644 <_printf_i+0xa8>
 80095ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095d2:	2b15      	cmp	r3, #21
 80095d4:	d8f6      	bhi.n	80095c4 <_printf_i+0x28>
 80095d6:	a101      	add	r1, pc, #4	@ (adr r1, 80095dc <_printf_i+0x40>)
 80095d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095dc:	08009635 	.word	0x08009635
 80095e0:	08009649 	.word	0x08009649
 80095e4:	080095c5 	.word	0x080095c5
 80095e8:	080095c5 	.word	0x080095c5
 80095ec:	080095c5 	.word	0x080095c5
 80095f0:	080095c5 	.word	0x080095c5
 80095f4:	08009649 	.word	0x08009649
 80095f8:	080095c5 	.word	0x080095c5
 80095fc:	080095c5 	.word	0x080095c5
 8009600:	080095c5 	.word	0x080095c5
 8009604:	080095c5 	.word	0x080095c5
 8009608:	08009747 	.word	0x08009747
 800960c:	08009673 	.word	0x08009673
 8009610:	08009701 	.word	0x08009701
 8009614:	080095c5 	.word	0x080095c5
 8009618:	080095c5 	.word	0x080095c5
 800961c:	08009769 	.word	0x08009769
 8009620:	080095c5 	.word	0x080095c5
 8009624:	08009673 	.word	0x08009673
 8009628:	080095c5 	.word	0x080095c5
 800962c:	080095c5 	.word	0x080095c5
 8009630:	08009709 	.word	0x08009709
 8009634:	6833      	ldr	r3, [r6, #0]
 8009636:	1d1a      	adds	r2, r3, #4
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6032      	str	r2, [r6, #0]
 800963c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009640:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009644:	2301      	movs	r3, #1
 8009646:	e09c      	b.n	8009782 <_printf_i+0x1e6>
 8009648:	6833      	ldr	r3, [r6, #0]
 800964a:	6820      	ldr	r0, [r4, #0]
 800964c:	1d19      	adds	r1, r3, #4
 800964e:	6031      	str	r1, [r6, #0]
 8009650:	0606      	lsls	r6, r0, #24
 8009652:	d501      	bpl.n	8009658 <_printf_i+0xbc>
 8009654:	681d      	ldr	r5, [r3, #0]
 8009656:	e003      	b.n	8009660 <_printf_i+0xc4>
 8009658:	0645      	lsls	r5, r0, #25
 800965a:	d5fb      	bpl.n	8009654 <_printf_i+0xb8>
 800965c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009660:	2d00      	cmp	r5, #0
 8009662:	da03      	bge.n	800966c <_printf_i+0xd0>
 8009664:	232d      	movs	r3, #45	@ 0x2d
 8009666:	426d      	negs	r5, r5
 8009668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800966c:	4858      	ldr	r0, [pc, #352]	@ (80097d0 <_printf_i+0x234>)
 800966e:	230a      	movs	r3, #10
 8009670:	e011      	b.n	8009696 <_printf_i+0xfa>
 8009672:	6821      	ldr	r1, [r4, #0]
 8009674:	6833      	ldr	r3, [r6, #0]
 8009676:	0608      	lsls	r0, r1, #24
 8009678:	f853 5b04 	ldr.w	r5, [r3], #4
 800967c:	d402      	bmi.n	8009684 <_printf_i+0xe8>
 800967e:	0649      	lsls	r1, r1, #25
 8009680:	bf48      	it	mi
 8009682:	b2ad      	uxthmi	r5, r5
 8009684:	2f6f      	cmp	r7, #111	@ 0x6f
 8009686:	4852      	ldr	r0, [pc, #328]	@ (80097d0 <_printf_i+0x234>)
 8009688:	6033      	str	r3, [r6, #0]
 800968a:	bf14      	ite	ne
 800968c:	230a      	movne	r3, #10
 800968e:	2308      	moveq	r3, #8
 8009690:	2100      	movs	r1, #0
 8009692:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009696:	6866      	ldr	r6, [r4, #4]
 8009698:	60a6      	str	r6, [r4, #8]
 800969a:	2e00      	cmp	r6, #0
 800969c:	db05      	blt.n	80096aa <_printf_i+0x10e>
 800969e:	6821      	ldr	r1, [r4, #0]
 80096a0:	432e      	orrs	r6, r5
 80096a2:	f021 0104 	bic.w	r1, r1, #4
 80096a6:	6021      	str	r1, [r4, #0]
 80096a8:	d04b      	beq.n	8009742 <_printf_i+0x1a6>
 80096aa:	4616      	mov	r6, r2
 80096ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80096b0:	fb03 5711 	mls	r7, r3, r1, r5
 80096b4:	5dc7      	ldrb	r7, [r0, r7]
 80096b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096ba:	462f      	mov	r7, r5
 80096bc:	42bb      	cmp	r3, r7
 80096be:	460d      	mov	r5, r1
 80096c0:	d9f4      	bls.n	80096ac <_printf_i+0x110>
 80096c2:	2b08      	cmp	r3, #8
 80096c4:	d10b      	bne.n	80096de <_printf_i+0x142>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	07df      	lsls	r7, r3, #31
 80096ca:	d508      	bpl.n	80096de <_printf_i+0x142>
 80096cc:	6923      	ldr	r3, [r4, #16]
 80096ce:	6861      	ldr	r1, [r4, #4]
 80096d0:	4299      	cmp	r1, r3
 80096d2:	bfde      	ittt	le
 80096d4:	2330      	movle	r3, #48	@ 0x30
 80096d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096de:	1b92      	subs	r2, r2, r6
 80096e0:	6122      	str	r2, [r4, #16]
 80096e2:	f8cd a000 	str.w	sl, [sp]
 80096e6:	464b      	mov	r3, r9
 80096e8:	aa03      	add	r2, sp, #12
 80096ea:	4621      	mov	r1, r4
 80096ec:	4640      	mov	r0, r8
 80096ee:	f7ff fee7 	bl	80094c0 <_printf_common>
 80096f2:	3001      	adds	r0, #1
 80096f4:	d14a      	bne.n	800978c <_printf_i+0x1f0>
 80096f6:	f04f 30ff 	mov.w	r0, #4294967295
 80096fa:	b004      	add	sp, #16
 80096fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	f043 0320 	orr.w	r3, r3, #32
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	4832      	ldr	r0, [pc, #200]	@ (80097d4 <_printf_i+0x238>)
 800970a:	2778      	movs	r7, #120	@ 0x78
 800970c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	6831      	ldr	r1, [r6, #0]
 8009714:	061f      	lsls	r7, r3, #24
 8009716:	f851 5b04 	ldr.w	r5, [r1], #4
 800971a:	d402      	bmi.n	8009722 <_printf_i+0x186>
 800971c:	065f      	lsls	r7, r3, #25
 800971e:	bf48      	it	mi
 8009720:	b2ad      	uxthmi	r5, r5
 8009722:	6031      	str	r1, [r6, #0]
 8009724:	07d9      	lsls	r1, r3, #31
 8009726:	bf44      	itt	mi
 8009728:	f043 0320 	orrmi.w	r3, r3, #32
 800972c:	6023      	strmi	r3, [r4, #0]
 800972e:	b11d      	cbz	r5, 8009738 <_printf_i+0x19c>
 8009730:	2310      	movs	r3, #16
 8009732:	e7ad      	b.n	8009690 <_printf_i+0xf4>
 8009734:	4826      	ldr	r0, [pc, #152]	@ (80097d0 <_printf_i+0x234>)
 8009736:	e7e9      	b.n	800970c <_printf_i+0x170>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	f023 0320 	bic.w	r3, r3, #32
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	e7f6      	b.n	8009730 <_printf_i+0x194>
 8009742:	4616      	mov	r6, r2
 8009744:	e7bd      	b.n	80096c2 <_printf_i+0x126>
 8009746:	6833      	ldr	r3, [r6, #0]
 8009748:	6825      	ldr	r5, [r4, #0]
 800974a:	6961      	ldr	r1, [r4, #20]
 800974c:	1d18      	adds	r0, r3, #4
 800974e:	6030      	str	r0, [r6, #0]
 8009750:	062e      	lsls	r6, r5, #24
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	d501      	bpl.n	800975a <_printf_i+0x1be>
 8009756:	6019      	str	r1, [r3, #0]
 8009758:	e002      	b.n	8009760 <_printf_i+0x1c4>
 800975a:	0668      	lsls	r0, r5, #25
 800975c:	d5fb      	bpl.n	8009756 <_printf_i+0x1ba>
 800975e:	8019      	strh	r1, [r3, #0]
 8009760:	2300      	movs	r3, #0
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	4616      	mov	r6, r2
 8009766:	e7bc      	b.n	80096e2 <_printf_i+0x146>
 8009768:	6833      	ldr	r3, [r6, #0]
 800976a:	1d1a      	adds	r2, r3, #4
 800976c:	6032      	str	r2, [r6, #0]
 800976e:	681e      	ldr	r6, [r3, #0]
 8009770:	6862      	ldr	r2, [r4, #4]
 8009772:	2100      	movs	r1, #0
 8009774:	4630      	mov	r0, r6
 8009776:	f7f6 fd2b 	bl	80001d0 <memchr>
 800977a:	b108      	cbz	r0, 8009780 <_printf_i+0x1e4>
 800977c:	1b80      	subs	r0, r0, r6
 800977e:	6060      	str	r0, [r4, #4]
 8009780:	6863      	ldr	r3, [r4, #4]
 8009782:	6123      	str	r3, [r4, #16]
 8009784:	2300      	movs	r3, #0
 8009786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800978a:	e7aa      	b.n	80096e2 <_printf_i+0x146>
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	4632      	mov	r2, r6
 8009790:	4649      	mov	r1, r9
 8009792:	4640      	mov	r0, r8
 8009794:	47d0      	blx	sl
 8009796:	3001      	adds	r0, #1
 8009798:	d0ad      	beq.n	80096f6 <_printf_i+0x15a>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	079b      	lsls	r3, r3, #30
 800979e:	d413      	bmi.n	80097c8 <_printf_i+0x22c>
 80097a0:	68e0      	ldr	r0, [r4, #12]
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	4298      	cmp	r0, r3
 80097a6:	bfb8      	it	lt
 80097a8:	4618      	movlt	r0, r3
 80097aa:	e7a6      	b.n	80096fa <_printf_i+0x15e>
 80097ac:	2301      	movs	r3, #1
 80097ae:	4632      	mov	r2, r6
 80097b0:	4649      	mov	r1, r9
 80097b2:	4640      	mov	r0, r8
 80097b4:	47d0      	blx	sl
 80097b6:	3001      	adds	r0, #1
 80097b8:	d09d      	beq.n	80096f6 <_printf_i+0x15a>
 80097ba:	3501      	adds	r5, #1
 80097bc:	68e3      	ldr	r3, [r4, #12]
 80097be:	9903      	ldr	r1, [sp, #12]
 80097c0:	1a5b      	subs	r3, r3, r1
 80097c2:	42ab      	cmp	r3, r5
 80097c4:	dcf2      	bgt.n	80097ac <_printf_i+0x210>
 80097c6:	e7eb      	b.n	80097a0 <_printf_i+0x204>
 80097c8:	2500      	movs	r5, #0
 80097ca:	f104 0619 	add.w	r6, r4, #25
 80097ce:	e7f5      	b.n	80097bc <_printf_i+0x220>
 80097d0:	0804c970 	.word	0x0804c970
 80097d4:	0804c981 	.word	0x0804c981

080097d8 <__sflush_r>:
 80097d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e0:	0716      	lsls	r6, r2, #28
 80097e2:	4605      	mov	r5, r0
 80097e4:	460c      	mov	r4, r1
 80097e6:	d454      	bmi.n	8009892 <__sflush_r+0xba>
 80097e8:	684b      	ldr	r3, [r1, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dc02      	bgt.n	80097f4 <__sflush_r+0x1c>
 80097ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dd48      	ble.n	8009886 <__sflush_r+0xae>
 80097f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097f6:	2e00      	cmp	r6, #0
 80097f8:	d045      	beq.n	8009886 <__sflush_r+0xae>
 80097fa:	2300      	movs	r3, #0
 80097fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009800:	682f      	ldr	r7, [r5, #0]
 8009802:	6a21      	ldr	r1, [r4, #32]
 8009804:	602b      	str	r3, [r5, #0]
 8009806:	d030      	beq.n	800986a <__sflush_r+0x92>
 8009808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	0759      	lsls	r1, r3, #29
 800980e:	d505      	bpl.n	800981c <__sflush_r+0x44>
 8009810:	6863      	ldr	r3, [r4, #4]
 8009812:	1ad2      	subs	r2, r2, r3
 8009814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009816:	b10b      	cbz	r3, 800981c <__sflush_r+0x44>
 8009818:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	2300      	movs	r3, #0
 800981e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009820:	6a21      	ldr	r1, [r4, #32]
 8009822:	4628      	mov	r0, r5
 8009824:	47b0      	blx	r6
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	d106      	bne.n	800983a <__sflush_r+0x62>
 800982c:	6829      	ldr	r1, [r5, #0]
 800982e:	291d      	cmp	r1, #29
 8009830:	d82b      	bhi.n	800988a <__sflush_r+0xb2>
 8009832:	4a2a      	ldr	r2, [pc, #168]	@ (80098dc <__sflush_r+0x104>)
 8009834:	40ca      	lsrs	r2, r1
 8009836:	07d6      	lsls	r6, r2, #31
 8009838:	d527      	bpl.n	800988a <__sflush_r+0xb2>
 800983a:	2200      	movs	r2, #0
 800983c:	6062      	str	r2, [r4, #4]
 800983e:	04d9      	lsls	r1, r3, #19
 8009840:	6922      	ldr	r2, [r4, #16]
 8009842:	6022      	str	r2, [r4, #0]
 8009844:	d504      	bpl.n	8009850 <__sflush_r+0x78>
 8009846:	1c42      	adds	r2, r0, #1
 8009848:	d101      	bne.n	800984e <__sflush_r+0x76>
 800984a:	682b      	ldr	r3, [r5, #0]
 800984c:	b903      	cbnz	r3, 8009850 <__sflush_r+0x78>
 800984e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009852:	602f      	str	r7, [r5, #0]
 8009854:	b1b9      	cbz	r1, 8009886 <__sflush_r+0xae>
 8009856:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800985a:	4299      	cmp	r1, r3
 800985c:	d002      	beq.n	8009864 <__sflush_r+0x8c>
 800985e:	4628      	mov	r0, r5
 8009860:	f7ff fbd6 	bl	8009010 <_free_r>
 8009864:	2300      	movs	r3, #0
 8009866:	6363      	str	r3, [r4, #52]	@ 0x34
 8009868:	e00d      	b.n	8009886 <__sflush_r+0xae>
 800986a:	2301      	movs	r3, #1
 800986c:	4628      	mov	r0, r5
 800986e:	47b0      	blx	r6
 8009870:	4602      	mov	r2, r0
 8009872:	1c50      	adds	r0, r2, #1
 8009874:	d1c9      	bne.n	800980a <__sflush_r+0x32>
 8009876:	682b      	ldr	r3, [r5, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0c6      	beq.n	800980a <__sflush_r+0x32>
 800987c:	2b1d      	cmp	r3, #29
 800987e:	d001      	beq.n	8009884 <__sflush_r+0xac>
 8009880:	2b16      	cmp	r3, #22
 8009882:	d11e      	bne.n	80098c2 <__sflush_r+0xea>
 8009884:	602f      	str	r7, [r5, #0]
 8009886:	2000      	movs	r0, #0
 8009888:	e022      	b.n	80098d0 <__sflush_r+0xf8>
 800988a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988e:	b21b      	sxth	r3, r3
 8009890:	e01b      	b.n	80098ca <__sflush_r+0xf2>
 8009892:	690f      	ldr	r7, [r1, #16]
 8009894:	2f00      	cmp	r7, #0
 8009896:	d0f6      	beq.n	8009886 <__sflush_r+0xae>
 8009898:	0793      	lsls	r3, r2, #30
 800989a:	680e      	ldr	r6, [r1, #0]
 800989c:	bf08      	it	eq
 800989e:	694b      	ldreq	r3, [r1, #20]
 80098a0:	600f      	str	r7, [r1, #0]
 80098a2:	bf18      	it	ne
 80098a4:	2300      	movne	r3, #0
 80098a6:	eba6 0807 	sub.w	r8, r6, r7
 80098aa:	608b      	str	r3, [r1, #8]
 80098ac:	f1b8 0f00 	cmp.w	r8, #0
 80098b0:	dde9      	ble.n	8009886 <__sflush_r+0xae>
 80098b2:	6a21      	ldr	r1, [r4, #32]
 80098b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80098b6:	4643      	mov	r3, r8
 80098b8:	463a      	mov	r2, r7
 80098ba:	4628      	mov	r0, r5
 80098bc:	47b0      	blx	r6
 80098be:	2800      	cmp	r0, #0
 80098c0:	dc08      	bgt.n	80098d4 <__sflush_r+0xfc>
 80098c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d4:	4407      	add	r7, r0
 80098d6:	eba8 0800 	sub.w	r8, r8, r0
 80098da:	e7e7      	b.n	80098ac <__sflush_r+0xd4>
 80098dc:	20400001 	.word	0x20400001

080098e0 <_fflush_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	690b      	ldr	r3, [r1, #16]
 80098e4:	4605      	mov	r5, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	b913      	cbnz	r3, 80098f0 <_fflush_r+0x10>
 80098ea:	2500      	movs	r5, #0
 80098ec:	4628      	mov	r0, r5
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	b118      	cbz	r0, 80098fa <_fflush_r+0x1a>
 80098f2:	6a03      	ldr	r3, [r0, #32]
 80098f4:	b90b      	cbnz	r3, 80098fa <_fflush_r+0x1a>
 80098f6:	f7ff fa47 	bl	8008d88 <__sinit>
 80098fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0f3      	beq.n	80098ea <_fflush_r+0xa>
 8009902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009904:	07d0      	lsls	r0, r2, #31
 8009906:	d404      	bmi.n	8009912 <_fflush_r+0x32>
 8009908:	0599      	lsls	r1, r3, #22
 800990a:	d402      	bmi.n	8009912 <_fflush_r+0x32>
 800990c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800990e:	f7ff fb50 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 8009912:	4628      	mov	r0, r5
 8009914:	4621      	mov	r1, r4
 8009916:	f7ff ff5f 	bl	80097d8 <__sflush_r>
 800991a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800991c:	07da      	lsls	r2, r3, #31
 800991e:	4605      	mov	r5, r0
 8009920:	d4e4      	bmi.n	80098ec <_fflush_r+0xc>
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	059b      	lsls	r3, r3, #22
 8009926:	d4e1      	bmi.n	80098ec <_fflush_r+0xc>
 8009928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800992a:	f7ff fb43 	bl	8008fb4 <__retarget_lock_release_recursive>
 800992e:	e7dd      	b.n	80098ec <_fflush_r+0xc>

08009930 <fiprintf>:
 8009930:	b40e      	push	{r1, r2, r3}
 8009932:	b503      	push	{r0, r1, lr}
 8009934:	4601      	mov	r1, r0
 8009936:	ab03      	add	r3, sp, #12
 8009938:	4805      	ldr	r0, [pc, #20]	@ (8009950 <fiprintf+0x20>)
 800993a:	f853 2b04 	ldr.w	r2, [r3], #4
 800993e:	6800      	ldr	r0, [r0, #0]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	f000 f88f 	bl	8009a64 <_vfiprintf_r>
 8009946:	b002      	add	sp, #8
 8009948:	f85d eb04 	ldr.w	lr, [sp], #4
 800994c:	b003      	add	sp, #12
 800994e:	4770      	bx	lr
 8009950:	200000a8 	.word	0x200000a8

08009954 <memmove>:
 8009954:	4288      	cmp	r0, r1
 8009956:	b510      	push	{r4, lr}
 8009958:	eb01 0402 	add.w	r4, r1, r2
 800995c:	d902      	bls.n	8009964 <memmove+0x10>
 800995e:	4284      	cmp	r4, r0
 8009960:	4623      	mov	r3, r4
 8009962:	d807      	bhi.n	8009974 <memmove+0x20>
 8009964:	1e43      	subs	r3, r0, #1
 8009966:	42a1      	cmp	r1, r4
 8009968:	d008      	beq.n	800997c <memmove+0x28>
 800996a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800996e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009972:	e7f8      	b.n	8009966 <memmove+0x12>
 8009974:	4402      	add	r2, r0
 8009976:	4601      	mov	r1, r0
 8009978:	428a      	cmp	r2, r1
 800997a:	d100      	bne.n	800997e <memmove+0x2a>
 800997c:	bd10      	pop	{r4, pc}
 800997e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009986:	e7f7      	b.n	8009978 <memmove+0x24>

08009988 <_sbrk_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d06      	ldr	r5, [pc, #24]	@ (80099a4 <_sbrk_r+0x1c>)
 800998c:	2300      	movs	r3, #0
 800998e:	4604      	mov	r4, r0
 8009990:	4608      	mov	r0, r1
 8009992:	602b      	str	r3, [r5, #0]
 8009994:	f7f8 ff64 	bl	8002860 <_sbrk>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_sbrk_r+0x1a>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_sbrk_r+0x1a>
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	2000432c 	.word	0x2000432c

080099a8 <abort>:
 80099a8:	b508      	push	{r3, lr}
 80099aa:	2006      	movs	r0, #6
 80099ac:	f000 fa2e 	bl	8009e0c <raise>
 80099b0:	2001      	movs	r0, #1
 80099b2:	f7f8 fedc 	bl	800276e <_exit>

080099b6 <_realloc_r>:
 80099b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ba:	4607      	mov	r7, r0
 80099bc:	4614      	mov	r4, r2
 80099be:	460d      	mov	r5, r1
 80099c0:	b921      	cbnz	r1, 80099cc <_realloc_r+0x16>
 80099c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099c6:	4611      	mov	r1, r2
 80099c8:	f7ff bb96 	b.w	80090f8 <_malloc_r>
 80099cc:	b92a      	cbnz	r2, 80099da <_realloc_r+0x24>
 80099ce:	f7ff fb1f 	bl	8009010 <_free_r>
 80099d2:	4625      	mov	r5, r4
 80099d4:	4628      	mov	r0, r5
 80099d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099da:	f000 fa33 	bl	8009e44 <_malloc_usable_size_r>
 80099de:	4284      	cmp	r4, r0
 80099e0:	4606      	mov	r6, r0
 80099e2:	d802      	bhi.n	80099ea <_realloc_r+0x34>
 80099e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099e8:	d8f4      	bhi.n	80099d4 <_realloc_r+0x1e>
 80099ea:	4621      	mov	r1, r4
 80099ec:	4638      	mov	r0, r7
 80099ee:	f7ff fb83 	bl	80090f8 <_malloc_r>
 80099f2:	4680      	mov	r8, r0
 80099f4:	b908      	cbnz	r0, 80099fa <_realloc_r+0x44>
 80099f6:	4645      	mov	r5, r8
 80099f8:	e7ec      	b.n	80099d4 <_realloc_r+0x1e>
 80099fa:	42b4      	cmp	r4, r6
 80099fc:	4622      	mov	r2, r4
 80099fe:	4629      	mov	r1, r5
 8009a00:	bf28      	it	cs
 8009a02:	4632      	movcs	r2, r6
 8009a04:	f7ff fad7 	bl	8008fb6 <memcpy>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	f7ff fb00 	bl	8009010 <_free_r>
 8009a10:	e7f1      	b.n	80099f6 <_realloc_r+0x40>

08009a12 <__sfputc_r>:
 8009a12:	6893      	ldr	r3, [r2, #8]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	b410      	push	{r4}
 8009a1a:	6093      	str	r3, [r2, #8]
 8009a1c:	da08      	bge.n	8009a30 <__sfputc_r+0x1e>
 8009a1e:	6994      	ldr	r4, [r2, #24]
 8009a20:	42a3      	cmp	r3, r4
 8009a22:	db01      	blt.n	8009a28 <__sfputc_r+0x16>
 8009a24:	290a      	cmp	r1, #10
 8009a26:	d103      	bne.n	8009a30 <__sfputc_r+0x1e>
 8009a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a2c:	f000 b932 	b.w	8009c94 <__swbuf_r>
 8009a30:	6813      	ldr	r3, [r2, #0]
 8009a32:	1c58      	adds	r0, r3, #1
 8009a34:	6010      	str	r0, [r2, #0]
 8009a36:	7019      	strb	r1, [r3, #0]
 8009a38:	4608      	mov	r0, r1
 8009a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <__sfputs_r>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	4614      	mov	r4, r2
 8009a48:	18d5      	adds	r5, r2, r3
 8009a4a:	42ac      	cmp	r4, r5
 8009a4c:	d101      	bne.n	8009a52 <__sfputs_r+0x12>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e007      	b.n	8009a62 <__sfputs_r+0x22>
 8009a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a56:	463a      	mov	r2, r7
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f7ff ffda 	bl	8009a12 <__sfputc_r>
 8009a5e:	1c43      	adds	r3, r0, #1
 8009a60:	d1f3      	bne.n	8009a4a <__sfputs_r+0xa>
 8009a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a64 <_vfiprintf_r>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	460d      	mov	r5, r1
 8009a6a:	b09d      	sub	sp, #116	@ 0x74
 8009a6c:	4614      	mov	r4, r2
 8009a6e:	4698      	mov	r8, r3
 8009a70:	4606      	mov	r6, r0
 8009a72:	b118      	cbz	r0, 8009a7c <_vfiprintf_r+0x18>
 8009a74:	6a03      	ldr	r3, [r0, #32]
 8009a76:	b90b      	cbnz	r3, 8009a7c <_vfiprintf_r+0x18>
 8009a78:	f7ff f986 	bl	8008d88 <__sinit>
 8009a7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a7e:	07d9      	lsls	r1, r3, #31
 8009a80:	d405      	bmi.n	8009a8e <_vfiprintf_r+0x2a>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	059a      	lsls	r2, r3, #22
 8009a86:	d402      	bmi.n	8009a8e <_vfiprintf_r+0x2a>
 8009a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a8a:	f7ff fa92 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	071b      	lsls	r3, r3, #28
 8009a92:	d501      	bpl.n	8009a98 <_vfiprintf_r+0x34>
 8009a94:	692b      	ldr	r3, [r5, #16]
 8009a96:	b99b      	cbnz	r3, 8009ac0 <_vfiprintf_r+0x5c>
 8009a98:	4629      	mov	r1, r5
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 f938 	bl	8009d10 <__swsetup_r>
 8009aa0:	b170      	cbz	r0, 8009ac0 <_vfiprintf_r+0x5c>
 8009aa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aa4:	07dc      	lsls	r4, r3, #31
 8009aa6:	d504      	bpl.n	8009ab2 <_vfiprintf_r+0x4e>
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	b01d      	add	sp, #116	@ 0x74
 8009aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab2:	89ab      	ldrh	r3, [r5, #12]
 8009ab4:	0598      	lsls	r0, r3, #22
 8009ab6:	d4f7      	bmi.n	8009aa8 <_vfiprintf_r+0x44>
 8009ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aba:	f7ff fa7b 	bl	8008fb4 <__retarget_lock_release_recursive>
 8009abe:	e7f3      	b.n	8009aa8 <_vfiprintf_r+0x44>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ac4:	2320      	movs	r3, #32
 8009ac6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ace:	2330      	movs	r3, #48	@ 0x30
 8009ad0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c80 <_vfiprintf_r+0x21c>
 8009ad4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ad8:	f04f 0901 	mov.w	r9, #1
 8009adc:	4623      	mov	r3, r4
 8009ade:	469a      	mov	sl, r3
 8009ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae4:	b10a      	cbz	r2, 8009aea <_vfiprintf_r+0x86>
 8009ae6:	2a25      	cmp	r2, #37	@ 0x25
 8009ae8:	d1f9      	bne.n	8009ade <_vfiprintf_r+0x7a>
 8009aea:	ebba 0b04 	subs.w	fp, sl, r4
 8009aee:	d00b      	beq.n	8009b08 <_vfiprintf_r+0xa4>
 8009af0:	465b      	mov	r3, fp
 8009af2:	4622      	mov	r2, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7ff ffa2 	bl	8009a40 <__sfputs_r>
 8009afc:	3001      	adds	r0, #1
 8009afe:	f000 80a7 	beq.w	8009c50 <_vfiprintf_r+0x1ec>
 8009b02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b04:	445a      	add	r2, fp
 8009b06:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b08:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 809f 	beq.w	8009c50 <_vfiprintf_r+0x1ec>
 8009b12:	2300      	movs	r3, #0
 8009b14:	f04f 32ff 	mov.w	r2, #4294967295
 8009b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b1c:	f10a 0a01 	add.w	sl, sl, #1
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	9307      	str	r3, [sp, #28]
 8009b24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b28:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b2a:	4654      	mov	r4, sl
 8009b2c:	2205      	movs	r2, #5
 8009b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b32:	4853      	ldr	r0, [pc, #332]	@ (8009c80 <_vfiprintf_r+0x21c>)
 8009b34:	f7f6 fb4c 	bl	80001d0 <memchr>
 8009b38:	9a04      	ldr	r2, [sp, #16]
 8009b3a:	b9d8      	cbnz	r0, 8009b74 <_vfiprintf_r+0x110>
 8009b3c:	06d1      	lsls	r1, r2, #27
 8009b3e:	bf44      	itt	mi
 8009b40:	2320      	movmi	r3, #32
 8009b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b46:	0713      	lsls	r3, r2, #28
 8009b48:	bf44      	itt	mi
 8009b4a:	232b      	movmi	r3, #43	@ 0x2b
 8009b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b50:	f89a 3000 	ldrb.w	r3, [sl]
 8009b54:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b56:	d015      	beq.n	8009b84 <_vfiprintf_r+0x120>
 8009b58:	9a07      	ldr	r2, [sp, #28]
 8009b5a:	4654      	mov	r4, sl
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f04f 0c0a 	mov.w	ip, #10
 8009b62:	4621      	mov	r1, r4
 8009b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b68:	3b30      	subs	r3, #48	@ 0x30
 8009b6a:	2b09      	cmp	r3, #9
 8009b6c:	d94b      	bls.n	8009c06 <_vfiprintf_r+0x1a2>
 8009b6e:	b1b0      	cbz	r0, 8009b9e <_vfiprintf_r+0x13a>
 8009b70:	9207      	str	r2, [sp, #28]
 8009b72:	e014      	b.n	8009b9e <_vfiprintf_r+0x13a>
 8009b74:	eba0 0308 	sub.w	r3, r0, r8
 8009b78:	fa09 f303 	lsl.w	r3, r9, r3
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	9304      	str	r3, [sp, #16]
 8009b80:	46a2      	mov	sl, r4
 8009b82:	e7d2      	b.n	8009b2a <_vfiprintf_r+0xc6>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	1d19      	adds	r1, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	9103      	str	r1, [sp, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bfbb      	ittet	lt
 8009b90:	425b      	neglt	r3, r3
 8009b92:	f042 0202 	orrlt.w	r2, r2, #2
 8009b96:	9307      	strge	r3, [sp, #28]
 8009b98:	9307      	strlt	r3, [sp, #28]
 8009b9a:	bfb8      	it	lt
 8009b9c:	9204      	strlt	r2, [sp, #16]
 8009b9e:	7823      	ldrb	r3, [r4, #0]
 8009ba0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ba2:	d10a      	bne.n	8009bba <_vfiprintf_r+0x156>
 8009ba4:	7863      	ldrb	r3, [r4, #1]
 8009ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ba8:	d132      	bne.n	8009c10 <_vfiprintf_r+0x1ac>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	1d1a      	adds	r2, r3, #4
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	9203      	str	r2, [sp, #12]
 8009bb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bb6:	3402      	adds	r4, #2
 8009bb8:	9305      	str	r3, [sp, #20]
 8009bba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c90 <_vfiprintf_r+0x22c>
 8009bbe:	7821      	ldrb	r1, [r4, #0]
 8009bc0:	2203      	movs	r2, #3
 8009bc2:	4650      	mov	r0, sl
 8009bc4:	f7f6 fb04 	bl	80001d0 <memchr>
 8009bc8:	b138      	cbz	r0, 8009bda <_vfiprintf_r+0x176>
 8009bca:	9b04      	ldr	r3, [sp, #16]
 8009bcc:	eba0 000a 	sub.w	r0, r0, sl
 8009bd0:	2240      	movs	r2, #64	@ 0x40
 8009bd2:	4082      	lsls	r2, r0
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	3401      	adds	r4, #1
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bde:	4829      	ldr	r0, [pc, #164]	@ (8009c84 <_vfiprintf_r+0x220>)
 8009be0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009be4:	2206      	movs	r2, #6
 8009be6:	f7f6 faf3 	bl	80001d0 <memchr>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d03f      	beq.n	8009c6e <_vfiprintf_r+0x20a>
 8009bee:	4b26      	ldr	r3, [pc, #152]	@ (8009c88 <_vfiprintf_r+0x224>)
 8009bf0:	bb1b      	cbnz	r3, 8009c3a <_vfiprintf_r+0x1d6>
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	3307      	adds	r3, #7
 8009bf6:	f023 0307 	bic.w	r3, r3, #7
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c00:	443b      	add	r3, r7
 8009c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c04:	e76a      	b.n	8009adc <_vfiprintf_r+0x78>
 8009c06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	2001      	movs	r0, #1
 8009c0e:	e7a8      	b.n	8009b62 <_vfiprintf_r+0xfe>
 8009c10:	2300      	movs	r3, #0
 8009c12:	3401      	adds	r4, #1
 8009c14:	9305      	str	r3, [sp, #20]
 8009c16:	4619      	mov	r1, r3
 8009c18:	f04f 0c0a 	mov.w	ip, #10
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c22:	3a30      	subs	r2, #48	@ 0x30
 8009c24:	2a09      	cmp	r2, #9
 8009c26:	d903      	bls.n	8009c30 <_vfiprintf_r+0x1cc>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0c6      	beq.n	8009bba <_vfiprintf_r+0x156>
 8009c2c:	9105      	str	r1, [sp, #20]
 8009c2e:	e7c4      	b.n	8009bba <_vfiprintf_r+0x156>
 8009c30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c34:	4604      	mov	r4, r0
 8009c36:	2301      	movs	r3, #1
 8009c38:	e7f0      	b.n	8009c1c <_vfiprintf_r+0x1b8>
 8009c3a:	ab03      	add	r3, sp, #12
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	462a      	mov	r2, r5
 8009c40:	4b12      	ldr	r3, [pc, #72]	@ (8009c8c <_vfiprintf_r+0x228>)
 8009c42:	a904      	add	r1, sp, #16
 8009c44:	4630      	mov	r0, r6
 8009c46:	f3af 8000 	nop.w
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	1c78      	adds	r0, r7, #1
 8009c4e:	d1d6      	bne.n	8009bfe <_vfiprintf_r+0x19a>
 8009c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c52:	07d9      	lsls	r1, r3, #31
 8009c54:	d405      	bmi.n	8009c62 <_vfiprintf_r+0x1fe>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	059a      	lsls	r2, r3, #22
 8009c5a:	d402      	bmi.n	8009c62 <_vfiprintf_r+0x1fe>
 8009c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c5e:	f7ff f9a9 	bl	8008fb4 <__retarget_lock_release_recursive>
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	065b      	lsls	r3, r3, #25
 8009c66:	f53f af1f 	bmi.w	8009aa8 <_vfiprintf_r+0x44>
 8009c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c6c:	e71e      	b.n	8009aac <_vfiprintf_r+0x48>
 8009c6e:	ab03      	add	r3, sp, #12
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	462a      	mov	r2, r5
 8009c74:	4b05      	ldr	r3, [pc, #20]	@ (8009c8c <_vfiprintf_r+0x228>)
 8009c76:	a904      	add	r1, sp, #16
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7ff fc8f 	bl	800959c <_printf_i>
 8009c7e:	e7e4      	b.n	8009c4a <_vfiprintf_r+0x1e6>
 8009c80:	0804c95f 	.word	0x0804c95f
 8009c84:	0804c969 	.word	0x0804c969
 8009c88:	00000000 	.word	0x00000000
 8009c8c:	08009a41 	.word	0x08009a41
 8009c90:	0804c965 	.word	0x0804c965

08009c94 <__swbuf_r>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	460e      	mov	r6, r1
 8009c98:	4614      	mov	r4, r2
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	b118      	cbz	r0, 8009ca6 <__swbuf_r+0x12>
 8009c9e:	6a03      	ldr	r3, [r0, #32]
 8009ca0:	b90b      	cbnz	r3, 8009ca6 <__swbuf_r+0x12>
 8009ca2:	f7ff f871 	bl	8008d88 <__sinit>
 8009ca6:	69a3      	ldr	r3, [r4, #24]
 8009ca8:	60a3      	str	r3, [r4, #8]
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	071a      	lsls	r2, r3, #28
 8009cae:	d501      	bpl.n	8009cb4 <__swbuf_r+0x20>
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	b943      	cbnz	r3, 8009cc6 <__swbuf_r+0x32>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f000 f82a 	bl	8009d10 <__swsetup_r>
 8009cbc:	b118      	cbz	r0, 8009cc6 <__swbuf_r+0x32>
 8009cbe:	f04f 37ff 	mov.w	r7, #4294967295
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	6922      	ldr	r2, [r4, #16]
 8009cca:	1a98      	subs	r0, r3, r2
 8009ccc:	6963      	ldr	r3, [r4, #20]
 8009cce:	b2f6      	uxtb	r6, r6
 8009cd0:	4283      	cmp	r3, r0
 8009cd2:	4637      	mov	r7, r6
 8009cd4:	dc05      	bgt.n	8009ce2 <__swbuf_r+0x4e>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f7ff fe01 	bl	80098e0 <_fflush_r>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d1ed      	bne.n	8009cbe <__swbuf_r+0x2a>
 8009ce2:	68a3      	ldr	r3, [r4, #8]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	60a3      	str	r3, [r4, #8]
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	6022      	str	r2, [r4, #0]
 8009cee:	701e      	strb	r6, [r3, #0]
 8009cf0:	6962      	ldr	r2, [r4, #20]
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d004      	beq.n	8009d02 <__swbuf_r+0x6e>
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	07db      	lsls	r3, r3, #31
 8009cfc:	d5e1      	bpl.n	8009cc2 <__swbuf_r+0x2e>
 8009cfe:	2e0a      	cmp	r6, #10
 8009d00:	d1df      	bne.n	8009cc2 <__swbuf_r+0x2e>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4628      	mov	r0, r5
 8009d06:	f7ff fdeb 	bl	80098e0 <_fflush_r>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d0d9      	beq.n	8009cc2 <__swbuf_r+0x2e>
 8009d0e:	e7d6      	b.n	8009cbe <__swbuf_r+0x2a>

08009d10 <__swsetup_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4b29      	ldr	r3, [pc, #164]	@ (8009db8 <__swsetup_r+0xa8>)
 8009d14:	4605      	mov	r5, r0
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	460c      	mov	r4, r1
 8009d1a:	b118      	cbz	r0, 8009d24 <__swsetup_r+0x14>
 8009d1c:	6a03      	ldr	r3, [r0, #32]
 8009d1e:	b90b      	cbnz	r3, 8009d24 <__swsetup_r+0x14>
 8009d20:	f7ff f832 	bl	8008d88 <__sinit>
 8009d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d28:	0719      	lsls	r1, r3, #28
 8009d2a:	d422      	bmi.n	8009d72 <__swsetup_r+0x62>
 8009d2c:	06da      	lsls	r2, r3, #27
 8009d2e:	d407      	bmi.n	8009d40 <__swsetup_r+0x30>
 8009d30:	2209      	movs	r2, #9
 8009d32:	602a      	str	r2, [r5, #0]
 8009d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3e:	e033      	b.n	8009da8 <__swsetup_r+0x98>
 8009d40:	0758      	lsls	r0, r3, #29
 8009d42:	d512      	bpl.n	8009d6a <__swsetup_r+0x5a>
 8009d44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d46:	b141      	cbz	r1, 8009d5a <__swsetup_r+0x4a>
 8009d48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d4c:	4299      	cmp	r1, r3
 8009d4e:	d002      	beq.n	8009d56 <__swsetup_r+0x46>
 8009d50:	4628      	mov	r0, r5
 8009d52:	f7ff f95d 	bl	8009010 <_free_r>
 8009d56:	2300      	movs	r3, #0
 8009d58:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d60:	81a3      	strh	r3, [r4, #12]
 8009d62:	2300      	movs	r3, #0
 8009d64:	6063      	str	r3, [r4, #4]
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	f043 0308 	orr.w	r3, r3, #8
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	6923      	ldr	r3, [r4, #16]
 8009d74:	b94b      	cbnz	r3, 8009d8a <__swsetup_r+0x7a>
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d80:	d003      	beq.n	8009d8a <__swsetup_r+0x7a>
 8009d82:	4621      	mov	r1, r4
 8009d84:	4628      	mov	r0, r5
 8009d86:	f000 f88b 	bl	8009ea0 <__smakebuf_r>
 8009d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8e:	f013 0201 	ands.w	r2, r3, #1
 8009d92:	d00a      	beq.n	8009daa <__swsetup_r+0x9a>
 8009d94:	2200      	movs	r2, #0
 8009d96:	60a2      	str	r2, [r4, #8]
 8009d98:	6962      	ldr	r2, [r4, #20]
 8009d9a:	4252      	negs	r2, r2
 8009d9c:	61a2      	str	r2, [r4, #24]
 8009d9e:	6922      	ldr	r2, [r4, #16]
 8009da0:	b942      	cbnz	r2, 8009db4 <__swsetup_r+0xa4>
 8009da2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009da6:	d1c5      	bne.n	8009d34 <__swsetup_r+0x24>
 8009da8:	bd38      	pop	{r3, r4, r5, pc}
 8009daa:	0799      	lsls	r1, r3, #30
 8009dac:	bf58      	it	pl
 8009dae:	6962      	ldrpl	r2, [r4, #20]
 8009db0:	60a2      	str	r2, [r4, #8]
 8009db2:	e7f4      	b.n	8009d9e <__swsetup_r+0x8e>
 8009db4:	2000      	movs	r0, #0
 8009db6:	e7f7      	b.n	8009da8 <__swsetup_r+0x98>
 8009db8:	200000a8 	.word	0x200000a8

08009dbc <_raise_r>:
 8009dbc:	291f      	cmp	r1, #31
 8009dbe:	b538      	push	{r3, r4, r5, lr}
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	d904      	bls.n	8009dd0 <_raise_r+0x14>
 8009dc6:	2316      	movs	r3, #22
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dd2:	b112      	cbz	r2, 8009dda <_raise_r+0x1e>
 8009dd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dd8:	b94b      	cbnz	r3, 8009dee <_raise_r+0x32>
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f000 f830 	bl	8009e40 <_getpid_r>
 8009de0:	4622      	mov	r2, r4
 8009de2:	4601      	mov	r1, r0
 8009de4:	4628      	mov	r0, r5
 8009de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dea:	f000 b817 	b.w	8009e1c <_kill_r>
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d00a      	beq.n	8009e08 <_raise_r+0x4c>
 8009df2:	1c59      	adds	r1, r3, #1
 8009df4:	d103      	bne.n	8009dfe <_raise_r+0x42>
 8009df6:	2316      	movs	r3, #22
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	e7e7      	b.n	8009dce <_raise_r+0x12>
 8009dfe:	2100      	movs	r1, #0
 8009e00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e04:	4620      	mov	r0, r4
 8009e06:	4798      	blx	r3
 8009e08:	2000      	movs	r0, #0
 8009e0a:	e7e0      	b.n	8009dce <_raise_r+0x12>

08009e0c <raise>:
 8009e0c:	4b02      	ldr	r3, [pc, #8]	@ (8009e18 <raise+0xc>)
 8009e0e:	4601      	mov	r1, r0
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	f7ff bfd3 	b.w	8009dbc <_raise_r>
 8009e16:	bf00      	nop
 8009e18:	200000a8 	.word	0x200000a8

08009e1c <_kill_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d07      	ldr	r5, [pc, #28]	@ (8009e3c <_kill_r+0x20>)
 8009e20:	2300      	movs	r3, #0
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	4611      	mov	r1, r2
 8009e28:	602b      	str	r3, [r5, #0]
 8009e2a:	f7f8 fc90 	bl	800274e <_kill>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	d102      	bne.n	8009e38 <_kill_r+0x1c>
 8009e32:	682b      	ldr	r3, [r5, #0]
 8009e34:	b103      	cbz	r3, 8009e38 <_kill_r+0x1c>
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	bd38      	pop	{r3, r4, r5, pc}
 8009e3a:	bf00      	nop
 8009e3c:	2000432c 	.word	0x2000432c

08009e40 <_getpid_r>:
 8009e40:	f7f8 bc7d 	b.w	800273e <_getpid>

08009e44 <_malloc_usable_size_r>:
 8009e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e48:	1f18      	subs	r0, r3, #4
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	bfbc      	itt	lt
 8009e4e:	580b      	ldrlt	r3, [r1, r0]
 8009e50:	18c0      	addlt	r0, r0, r3
 8009e52:	4770      	bx	lr

08009e54 <__swhatbuf_r>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	460c      	mov	r4, r1
 8009e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	b096      	sub	sp, #88	@ 0x58
 8009e60:	4615      	mov	r5, r2
 8009e62:	461e      	mov	r6, r3
 8009e64:	da0d      	bge.n	8009e82 <__swhatbuf_r+0x2e>
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e6c:	f04f 0100 	mov.w	r1, #0
 8009e70:	bf14      	ite	ne
 8009e72:	2340      	movne	r3, #64	@ 0x40
 8009e74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e78:	2000      	movs	r0, #0
 8009e7a:	6031      	str	r1, [r6, #0]
 8009e7c:	602b      	str	r3, [r5, #0]
 8009e7e:	b016      	add	sp, #88	@ 0x58
 8009e80:	bd70      	pop	{r4, r5, r6, pc}
 8009e82:	466a      	mov	r2, sp
 8009e84:	f000 f848 	bl	8009f18 <_fstat_r>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	dbec      	blt.n	8009e66 <__swhatbuf_r+0x12>
 8009e8c:	9901      	ldr	r1, [sp, #4]
 8009e8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e96:	4259      	negs	r1, r3
 8009e98:	4159      	adcs	r1, r3
 8009e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e9e:	e7eb      	b.n	8009e78 <__swhatbuf_r+0x24>

08009ea0 <__smakebuf_r>:
 8009ea0:	898b      	ldrh	r3, [r1, #12]
 8009ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ea4:	079d      	lsls	r5, r3, #30
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	d507      	bpl.n	8009ebc <__smakebuf_r+0x1c>
 8009eac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	6123      	str	r3, [r4, #16]
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	6163      	str	r3, [r4, #20]
 8009eb8:	b003      	add	sp, #12
 8009eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ebc:	ab01      	add	r3, sp, #4
 8009ebe:	466a      	mov	r2, sp
 8009ec0:	f7ff ffc8 	bl	8009e54 <__swhatbuf_r>
 8009ec4:	9f00      	ldr	r7, [sp, #0]
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	4639      	mov	r1, r7
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff f914 	bl	80090f8 <_malloc_r>
 8009ed0:	b948      	cbnz	r0, 8009ee6 <__smakebuf_r+0x46>
 8009ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed6:	059a      	lsls	r2, r3, #22
 8009ed8:	d4ee      	bmi.n	8009eb8 <__smakebuf_r+0x18>
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	f043 0302 	orr.w	r3, r3, #2
 8009ee2:	81a3      	strh	r3, [r4, #12]
 8009ee4:	e7e2      	b.n	8009eac <__smakebuf_r+0xc>
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	6020      	str	r0, [r4, #0]
 8009eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eee:	81a3      	strh	r3, [r4, #12]
 8009ef0:	9b01      	ldr	r3, [sp, #4]
 8009ef2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ef6:	b15b      	cbz	r3, 8009f10 <__smakebuf_r+0x70>
 8009ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009efc:	4630      	mov	r0, r6
 8009efe:	f000 f81d 	bl	8009f3c <_isatty_r>
 8009f02:	b128      	cbz	r0, 8009f10 <__smakebuf_r+0x70>
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	f023 0303 	bic.w	r3, r3, #3
 8009f0a:	f043 0301 	orr.w	r3, r3, #1
 8009f0e:	81a3      	strh	r3, [r4, #12]
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	431d      	orrs	r5, r3
 8009f14:	81a5      	strh	r5, [r4, #12]
 8009f16:	e7cf      	b.n	8009eb8 <__smakebuf_r+0x18>

08009f18 <_fstat_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d07      	ldr	r5, [pc, #28]	@ (8009f38 <_fstat_r+0x20>)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	4611      	mov	r1, r2
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	f7f8 fc72 	bl	800280e <_fstat>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	d102      	bne.n	8009f34 <_fstat_r+0x1c>
 8009f2e:	682b      	ldr	r3, [r5, #0]
 8009f30:	b103      	cbz	r3, 8009f34 <_fstat_r+0x1c>
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	bf00      	nop
 8009f38:	2000432c 	.word	0x2000432c

08009f3c <_isatty_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d06      	ldr	r5, [pc, #24]	@ (8009f58 <_isatty_r+0x1c>)
 8009f40:	2300      	movs	r3, #0
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	602b      	str	r3, [r5, #0]
 8009f48:	f7f8 fc71 	bl	800282e <_isatty>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d102      	bne.n	8009f56 <_isatty_r+0x1a>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	b103      	cbz	r3, 8009f56 <_isatty_r+0x1a>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	2000432c 	.word	0x2000432c

08009f5c <_init>:
 8009f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5e:	bf00      	nop
 8009f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f62:	bc08      	pop	{r3}
 8009f64:	469e      	mov	lr, r3
 8009f66:	4770      	bx	lr

08009f68 <_fini>:
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	bf00      	nop
 8009f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6e:	bc08      	pop	{r3}
 8009f70:	469e      	mov	lr, r3
 8009f72:	4770      	bx	lr
