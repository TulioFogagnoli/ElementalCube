
ElementalCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007520  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  080076b0  080076b0  000086b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c7c  08007c7c  000090e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007c7c  08007c7c  00008c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c84  08007c84  000090e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c84  08007c84  00008c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c88  08007c88  00008c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08007c8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090e4  2**0
                  CONTENTS
 10 .bss          000041d8  200000e4  200000e4  000090e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042bc  200042bc  000090e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132ed  00000000  00000000  00009114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037c7  00000000  00000000  0001c401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  0001fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022854  00000000  00000000  00020da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001514c  00000000  00000000  000435fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce514  00000000  00000000  00058748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126c5c  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000d93  00000000  00000000  00126c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004cb4  00000000  00000000  00127a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0012c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007698 	.word	0x08007698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	08007698 	.word	0x08007698

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000100 	.word	0x20000100
 80005cc:	20000154 	.word	0x20000154

080005d0 <ClearScreen>:
#include "game_screen.h"
#include "st7789.h"
#include "stdint.h"

void ClearScreen() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af02      	add	r7, sp, #8
    ST7789_FillRectangle(0, 0, 240, 240, ST7789_BLACK);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	23f0      	movs	r3, #240	@ 0xf0
 80005dc:	22f0      	movs	r2, #240	@ 0xf0
 80005de:	2100      	movs	r1, #0
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 ff99 	bl	8001518 <ST7789_FillRectangle>
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <DrawMenu>:

void DrawMenu(const char* title, const char** options, int numOptions, int currentSelection) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	@ 0x40
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
 80005f8:	603b      	str	r3, [r7, #0]
    char buffer[30];
    sprintf(buffer, "%s", title);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	4926      	ldr	r1, [pc, #152]	@ (800069c <DrawMenu+0xb0>)
 8000602:	4618      	mov	r0, r3
 8000604:	f006 fba8 	bl	8006d58 <siprintf>
    ST7789_DrawText(10, 10, buffer, ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8000608:	f107 0214 	add.w	r2, r7, #20
 800060c:	2302      	movs	r3, #2
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	2300      	movs	r3, #0
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000618:	210a      	movs	r1, #10
 800061a:	200a      	movs	r0, #10
 800061c:	f001 f8a4 	bl	8001768 <ST7789_DrawText>

    for (int i = 0; i < numOptions; i++) {
 8000620:	2300      	movs	r3, #0
 8000622:	637b      	str	r3, [r7, #52]	@ 0x34
 8000624:	e031      	b.n	800068a <DrawMenu+0x9e>
        uint16_t color = (i == currentSelection) ? ST7789_YELLOW : ST7789_WHITE;
 8000626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	d102      	bne.n	8000634 <DrawMenu+0x48>
 800062e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000632:	e001      	b.n	8000638 <DrawMenu+0x4c>
 8000634:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000638:	867b      	strh	r3, [r7, #50]	@ 0x32
        sprintf(buffer, "%s %s", (i == currentSelection) ? ">" : " ", options[i]);
 800063a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d101      	bne.n	8000646 <DrawMenu+0x5a>
 8000642:	4917      	ldr	r1, [pc, #92]	@ (80006a0 <DrawMenu+0xb4>)
 8000644:	e000      	b.n	8000648 <DrawMenu+0x5c>
 8000646:	4917      	ldr	r1, [pc, #92]	@ (80006a4 <DrawMenu+0xb8>)
 8000648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4413      	add	r3, r2
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f107 0014 	add.w	r0, r7, #20
 8000656:	460a      	mov	r2, r1
 8000658:	4913      	ldr	r1, [pc, #76]	@ (80006a8 <DrawMenu+0xbc>)
 800065a:	f006 fb7d 	bl	8006d58 <siprintf>
        ST7789_DrawText(10, 40 + (i * 20), buffer, color, ST7789_BLACK, ST7789_SIZE);
 800065e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000660:	b29b      	uxth	r3, r3
 8000662:	461a      	mov	r2, r3
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	4413      	add	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	b29b      	uxth	r3, r3
 800066c:	3328      	adds	r3, #40	@ 0x28
 800066e:	b299      	uxth	r1, r3
 8000670:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000672:	f107 0214 	add.w	r2, r7, #20
 8000676:	2002      	movs	r0, #2
 8000678:	9001      	str	r0, [sp, #4]
 800067a:	2000      	movs	r0, #0
 800067c:	9000      	str	r0, [sp, #0]
 800067e:	200a      	movs	r0, #10
 8000680:	f001 f872 	bl	8001768 <ST7789_DrawText>
    for (int i = 0; i < numOptions; i++) {
 8000684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000686:	3301      	adds	r3, #1
 8000688:	637b      	str	r3, [r7, #52]	@ 0x34
 800068a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	dbc9      	blt.n	8000626 <DrawMenu+0x3a>
    }
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3738      	adds	r7, #56	@ 0x38
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	080076b0 	.word	0x080076b0
 80006a0:	080076b4 	.word	0x080076b4
 80006a4:	080076b8 	.word	0x080076b8
 80006a8:	080076bc 	.word	0x080076bc

080006ac <KEYPAD_Scan>:
Keypad_Pin_t C_PINS[4] = {{C4_GPIO_Port, C4_Pin}, {C3_GPIO_Port, C3_Pin}, {C2_GPIO_Port, C2_Pin}, {C1_GPIO_Port, C1_Pin}};
// Pinos das linhas (entradas)
Keypad_Pin_t R_PINS[4] = {{R2_GPIO_Port, R2_Pin}, {R1_GPIO_Port, R1_Pin}, {R3_GPIO_Port, R3_Pin}, {R4_GPIO_Port, R4_Pin}};


char KEYPAD_Scan(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
    // Coloca todas as colunas em nível alto
    for (int i = 0; i < 4; i++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	e00f      	b.n	80006d8 <KEYPAD_Scan+0x2c>
        HAL_GPIO_WritePin(C_PINS[i].PORT, C_PINS[i].PIN, GPIO_PIN_SET);
 80006b8:	4a3e      	ldr	r2, [pc, #248]	@ (80007b4 <KEYPAD_Scan+0x108>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006c0:	4a3c      	ldr	r2, [pc, #240]	@ (80007b4 <KEYPAD_Scan+0x108>)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	4413      	add	r3, r2
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	f001 ffbf 	bl	8002650 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	ddec      	ble.n	80006b8 <KEYPAD_Scan+0xc>
    }

    // Loop para varrer cada coluna
    for (int col = 0; col < 4; col++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	e05e      	b.n	80007a2 <KEYPAD_Scan+0xf6>
        // Ativa a coluna atual (coloca em nível baixo)
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_RESET);
 80006e4:	4a33      	ldr	r2, [pc, #204]	@ (80007b4 <KEYPAD_Scan+0x108>)
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006ec:	4a31      	ldr	r2, [pc, #196]	@ (80007b4 <KEYPAD_Scan+0x108>)
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	4413      	add	r3, r2
 80006f4:	889b      	ldrh	r3, [r3, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	f001 ffa9 	bl	8002650 <HAL_GPIO_WritePin>

        // Verifica qual linha foi para nível baixo
        for (int row = 0; row < 4; row++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	e03b      	b.n	800077c <KEYPAD_Scan+0xd0>
            if (HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET) {
 8000704:	4a2c      	ldr	r2, [pc, #176]	@ (80007b8 <KEYPAD_Scan+0x10c>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800070c:	492a      	ldr	r1, [pc, #168]	@ (80007b8 <KEYPAD_Scan+0x10c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	440b      	add	r3, r1
 8000714:	889b      	ldrh	r3, [r3, #4]
 8000716:	4619      	mov	r1, r3
 8000718:	4610      	mov	r0, r2
 800071a:	f001 ff81 	bl	8002620 <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d128      	bne.n	8000776 <KEYPAD_Scan+0xca>
                // Botão pressionado!
                
                // --- Debounce e espera soltar a tecla ---
                HAL_Delay(50); // Simples debounce por atraso
 8000724:	2032      	movs	r0, #50	@ 0x32
 8000726:	f001 fa83 	bl	8001c30 <HAL_Delay>

                // Espera o usuário soltar a tecla para não ler a mesma tecla várias vezes
                while(HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET);
 800072a:	bf00      	nop
 800072c:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <KEYPAD_Scan+0x10c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000734:	4920      	ldr	r1, [pc, #128]	@ (80007b8 <KEYPAD_Scan+0x10c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	440b      	add	r3, r1
 800073c:	889b      	ldrh	r3, [r3, #4]
 800073e:	4619      	mov	r1, r3
 8000740:	4610      	mov	r0, r2
 8000742:	f001 ff6d 	bl	8002620 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0ef      	beq.n	800072c <KEYPAD_Scan+0x80>
                
                // Restaura a coluna para nível alto antes de retornar
                HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 800074c:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <KEYPAD_Scan+0x108>)
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000754:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <KEYPAD_Scan+0x108>)
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	4413      	add	r3, r2
 800075c:	889b      	ldrh	r3, [r3, #4]
 800075e:	2201      	movs	r2, #1
 8000760:	4619      	mov	r1, r3
 8000762:	f001 ff75 	bl	8002650 <HAL_GPIO_WritePin>

                return KEYPAD_MAP[row][col];
 8000766:	4a15      	ldr	r2, [pc, #84]	@ (80007bc <KEYPAD_Scan+0x110>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	441a      	add	r2, r3
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	e019      	b.n	80007aa <KEYPAD_Scan+0xfe>
        for (int row = 0; row < 4; row++) {
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b03      	cmp	r3, #3
 8000780:	ddc0      	ble.n	8000704 <KEYPAD_Scan+0x58>
            }
        }

        // Desativa a coluna atual antes de ir para a próxima
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8000782:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <KEYPAD_Scan+0x108>)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800078a:	4a0a      	ldr	r2, [pc, #40]	@ (80007b4 <KEYPAD_Scan+0x108>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	4413      	add	r3, r2
 8000792:	889b      	ldrh	r3, [r3, #4]
 8000794:	2201      	movs	r2, #1
 8000796:	4619      	mov	r1, r3
 8000798:	f001 ff5a 	bl	8002650 <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	3301      	adds	r3, #1
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	dd9d      	ble.n	80006e4 <KEYPAD_Scan+0x38>
    }

    return '\0'; // Retorna nulo se nenhuma tecla for pressionada
 80007a8:	2300      	movs	r3, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000020 	.word	0x20000020
 80007bc:	08007c20 	.word	0x08007c20

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b09c      	sub	sp, #112	@ 0x70
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f001 f9c1 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f861 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 f927 	bl	8000a20 <MX_GPIO_Init>
  MX_UART4_Init();
 80007d2:	f000 f8fb 	bl	80009cc <MX_UART4_Init>
  MX_SPI1_Init();
 80007d6:	f000 f8c3 	bl	8000960 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7789_Init();
 80007da:	f000 fe45 	bl	8001468 <ST7789_Init>
  ST7789_FillScreen(ST7789_BLACK);
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 ff08 	bl	80015f4 <ST7789_FillScreen>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  osMutexDef(gameMutex);
 80007e4:	2300      	movs	r3, #0
 80007e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80007e8:	2300      	movs	r3, #0
 80007ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 80007ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 ff44 	bl	800467e <osMutexCreate>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000874 <main+0xb4>)
 80007fa:	6013      	str	r3, [r2, #0]

  osThreadDef(initPutHalTask, StartInputHalTask, osPriorityNormal, 0, 128);
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <main+0xb8>)
 80007fe:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000802:	461d      	mov	r5, r3
 8000804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800080c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  inputHalTaskHandle = osThreadCreate(osThread(initPutHalTask), NULL);
 8000810:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fed1 	bl	80045be <osThreadCreate>
 800081c:	4603      	mov	r3, r0
 800081e:	4a17      	ldr	r2, [pc, #92]	@ (800087c <main+0xbc>)
 8000820:	6013      	str	r3, [r2, #0]

  osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 256);
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <main+0xc0>)
 8000824:	f107 041c 	add.w	r4, r7, #28
 8000828:	461d      	mov	r5, r3
 800082a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f003 febe 	bl	80045be <osThreadCreate>
 8000842:	4603      	mov	r3, r0
 8000844:	4a0f      	ldr	r2, [pc, #60]	@ (8000884 <main+0xc4>)
 8000846:	6013      	str	r3, [r2, #0]

  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <main+0xc8>)
 800084a:	463c      	mov	r4, r7
 800084c:	461d      	mov	r5, r3
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 800085a:	463b      	mov	r3, r7
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fead 	bl	80045be <osThreadCreate>
 8000864:	4603      	mov	r3, r0
 8000866:	4a09      	ldr	r2, [pc, #36]	@ (800088c <main+0xcc>)
 8000868:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800086a:	f003 fea1 	bl	80045b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <main+0xae>
 8000872:	bf00      	nop
 8000874:	20000400 	.word	0x20000400
 8000878:	08007734 	.word	0x08007734
 800087c:	200003f4 	.word	0x200003f4
 8000880:	0800775c 	.word	0x0800775c
 8000884:	200003f8 	.word	0x200003f8
 8000888:	08007784 	.word	0x08007784
 800088c:	200003fc 	.word	0x200003fc

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	@ 0x50
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2230      	movs	r2, #48	@ 0x30
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 fa7c 	bl	8006d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <SystemClock_Config+0xc8>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	4a26      	ldr	r2, [pc, #152]	@ (8000958 <SystemClock_Config+0xc8>)
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c4:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <SystemClock_Config+0xc8>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b21      	ldr	r3, [pc, #132]	@ (800095c <SystemClock_Config+0xcc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a20      	ldr	r2, [pc, #128]	@ (800095c <SystemClock_Config+0xcc>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b1e      	ldr	r3, [pc, #120]	@ (800095c <SystemClock_Config+0xcc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000900:	2308      	movs	r3, #8
 8000902:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000904:	2332      	movs	r3, #50	@ 0x32
 8000906:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000908:	2302      	movs	r3, #2
 800090a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800090c:	2304      	movs	r3, #4
 800090e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fecf 	bl	80026b8 <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000920:	f000 fce8 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	230f      	movs	r3, #15
 8000926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000928:	2302      	movs	r3, #2
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2101      	movs	r1, #1
 8000940:	4618      	mov	r0, r3
 8000942:	f002 f931 	bl	8002ba8 <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800094c:	f000 fcd2 	bl	80012f4 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3750      	adds	r7, #80	@ 0x50
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <MX_SPI1_Init+0x64>)
 8000966:	4a18      	ldr	r2, [pc, #96]	@ (80009c8 <MX_SPI1_Init+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <MX_SPI1_Init+0x64>)
 800096c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_SPI1_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_SPI1_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_SPI1_Init+0x64>)
 8000980:	2202      	movs	r2, #2
 8000982:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_SPI1_Init+0x64>)
 8000986:	2201      	movs	r2, #1
 8000988:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_SPI1_Init+0x64>)
 800098c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000990:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_SPI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_SPI1_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_SPI1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_SPI1_Init+0x64>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_SPI1_Init+0x64>)
 80009b2:	f002 fad9 	bl	8002f68 <HAL_SPI_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009bc:	f000 fc9a 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000354 	.word	0x20000354
 80009c8:	40013000 	.word	0x40013000

080009cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009d0:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_UART4_Init+0x4c>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <MX_UART4_Init+0x50>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <MX_UART4_Init+0x4c>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_UART4_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_UART4_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_UART4_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_UART4_Init+0x4c>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_UART4_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_UART4_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_UART4_Init+0x4c>)
 8000a04:	f002 fe78 	bl	80036f8 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a0e:	f000 fc71 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200003ac 	.word	0x200003ac
 8000a1c:	40004c00 	.word	0x40004c00

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a49      	ldr	r2, [pc, #292]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b47      	ldr	r3, [pc, #284]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b43      	ldr	r3, [pc, #268]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a42      	ldr	r2, [pc, #264]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b40      	ldr	r3, [pc, #256]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b3c      	ldr	r3, [pc, #240]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a3b      	ldr	r2, [pc, #236]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a34      	ldr	r2, [pc, #208]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b32      	ldr	r3, [pc, #200]	@ (8000b64 <MX_GPIO_Init+0x144>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|LCD_DC_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2182      	movs	r1, #130	@ 0x82
 8000aaa:	482f      	ldr	r0, [pc, #188]	@ (8000b68 <MX_GPIO_Init+0x148>)
 8000aac:	f001 fdd0 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab6:	482d      	ldr	r0, [pc, #180]	@ (8000b6c <MX_GPIO_Init+0x14c>)
 8000ab8:	f001 fdca 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	210f      	movs	r1, #15
 8000ac0:	482b      	ldr	r0, [pc, #172]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000ac2:	f001 fdc5 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	@ 0x40
 8000aca:	482a      	ldr	r0, [pc, #168]	@ (8000b74 <MX_GPIO_Init+0x154>)
 8000acc:	f001 fdc0 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LCD_DC_Pin;
 8000ad0:	2382      	movs	r3, #130	@ 0x82
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <MX_GPIO_Init+0x148>)
 8000ae8:	f001 fbfe 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000aec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <MX_GPIO_Init+0x14c>)
 8000b06:	f001 fbef 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000b22:	f001 fbe1 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8000b26:	23f0      	movs	r3, #240	@ 0xf0
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <MX_GPIO_Init+0x150>)
 8000b3a:	f001 fbd5 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000b3e:	2340      	movs	r3, #64	@ 0x40
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <MX_GPIO_Init+0x154>)
 8000b56:	f001 fbc7 	bl	80022e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	@ 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	40020400 	.word	0x40020400

08000b78 <StartInputHalTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartInputHalTask(void const * argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char cCurrent;
  /* Infinite loop */
  for(;;) // O loop infinito de uma tarefa RTOS é "for(;;)"
  {
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8000b80:	f7ff fd94 	bl	80006ac <KEYPAD_Scan>
 8000b84:	4603      	mov	r3, r0
 8000b86:	73fb      	strb	r3, [r7, #15]
    if(cCurrent != '\0')
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <StartInputHalTask+0x1c>
    {
      keyPressed = cCurrent;
 8000b8e:	4a03      	ldr	r2, [pc, #12]	@ (8000b9c <StartInputHalTask+0x24>)
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	7013      	strb	r3, [r2, #0]
    }
    osDelay(50);
 8000b94:	2032      	movs	r0, #50	@ 0x32
 8000b96:	f003 fd5e 	bl	8004656 <osDelay>
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8000b9a:	e7f1      	b.n	8000b80 <StartInputHalTask+0x8>
 8000b9c:	20000404 	.word	0x20000404

08000ba0 <StartGameTask>:
  }
}

void StartGameTask(void const * argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  char cLocalKeyPressed;

  for(;;)
  {
    cLocalKeyPressed = NONE_KEY;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

    osMutexWait(gameMutexHandle, osWaitForever);
 8000bac:	4bbf      	ldr	r3, [pc, #764]	@ (8000eac <StartGameTask+0x30c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 fd7b 	bl	80046b0 <osMutexWait>
    if (keyPressed != NONE_KEY) {
 8000bba:	4bbd      	ldr	r3, [pc, #756]	@ (8000eb0 <StartGameTask+0x310>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d005      	beq.n	8000bd0 <StartGameTask+0x30>
        cLocalKeyPressed = keyPressed;
 8000bc4:	4bba      	ldr	r3, [pc, #744]	@ (8000eb0 <StartGameTask+0x310>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	73fb      	strb	r3, [r7, #15]
        keyPressed = NONE_KEY; 
 8000bca:	4bb9      	ldr	r3, [pc, #740]	@ (8000eb0 <StartGameTask+0x310>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 8000bd0:	4bb6      	ldr	r3, [pc, #728]	@ (8000eac <StartGameTask+0x30c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fdb9 	bl	800474c <osMutexRelease>

    if (cLocalKeyPressed != NONE_KEY)
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 81f0 	beq.w	8000fc2 <StartGameTask+0x422>
    {
      osMutexWait(gameMutexHandle, osWaitForever);
 8000be2:	4bb2      	ldr	r3, [pc, #712]	@ (8000eac <StartGameTask+0x30c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fd60 	bl	80046b0 <osMutexWait>
      switch(eCurrentState)
 8000bf0:	4bb0      	ldr	r3, [pc, #704]	@ (8000eb4 <StartGameTask+0x314>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b05      	cmp	r3, #5
 8000bf8:	f200 81d2 	bhi.w	8000fa0 <StartGameTask+0x400>
 8000bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8000c04 <StartGameTask+0x64>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c1d 	.word	0x08000c1d
 8000c08:	08000c39 	.word	0x08000c39
 8000c0c:	08000d0d 	.word	0x08000d0d
 8000c10:	08000de7 	.word	0x08000de7
 8000c14:	08000f79 	.word	0x08000f79
 8000c18:	08000f8d 	.word	0x08000f8d
      {
        case eInitGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c20:	f040 81c5 	bne.w	8000fae <StartGameTask+0x40e>
          {
            eCurrentState = eDificultSelect;
 8000c24:	4ba3      	ldr	r3, [pc, #652]	@ (8000eb4 <StartGameTask+0x314>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
            selectedOption = 0;
 8000c2a:	4ba3      	ldr	r3, [pc, #652]	@ (8000eb8 <StartGameTask+0x318>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8000c30:	4ba2      	ldr	r3, [pc, #648]	@ (8000ebc <StartGameTask+0x31c>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
            }
          break;
 8000c36:	e1ba      	b.n	8000fae <StartGameTask+0x40e>
        }
        case eDificultSelect:
        {
          switch(cLocalKeyPressed)
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	3b23      	subs	r3, #35	@ 0x23
 8000c3c:	2b15      	cmp	r3, #21
 8000c3e:	d863      	bhi.n	8000d08 <StartGameTask+0x168>
 8000c40:	a201      	add	r2, pc, #4	@ (adr r2, 8000c48 <StartGameTask+0xa8>)
 8000c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c46:	bf00      	nop
 8000c48:	08000cdd 	.word	0x08000cdd
 8000c4c:	08000d09 	.word	0x08000d09
 8000c50:	08000d09 	.word	0x08000d09
 8000c54:	08000d09 	.word	0x08000d09
 8000c58:	08000d09 	.word	0x08000d09
 8000c5c:	08000d09 	.word	0x08000d09
 8000c60:	08000d09 	.word	0x08000d09
 8000c64:	08000ceb 	.word	0x08000ceb
 8000c68:	08000d09 	.word	0x08000d09
 8000c6c:	08000d09 	.word	0x08000d09
 8000c70:	08000d09 	.word	0x08000d09
 8000c74:	08000d09 	.word	0x08000d09
 8000c78:	08000d09 	.word	0x08000d09
 8000c7c:	08000d09 	.word	0x08000d09
 8000c80:	08000d09 	.word	0x08000d09
 8000c84:	08000cbf 	.word	0x08000cbf
 8000c88:	08000d09 	.word	0x08000d09
 8000c8c:	08000d09 	.word	0x08000d09
 8000c90:	08000d09 	.word	0x08000d09
 8000c94:	08000d09 	.word	0x08000d09
 8000c98:	08000d09 	.word	0x08000d09
 8000c9c:	08000ca1 	.word	0x08000ca1
          {
            case UP_KEY:
            {
              selectedOption = (selectedOption < MENU_OPTIONS_DIFFICULTY - 1) ? selectedOption + 1 : 0;
 8000ca0:	4b85      	ldr	r3, [pc, #532]	@ (8000eb8 <StartGameTask+0x318>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	dc03      	bgt.n	8000cb0 <StartGameTask+0x110>
 8000ca8:	4b83      	ldr	r3, [pc, #524]	@ (8000eb8 <StartGameTask+0x318>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	e000      	b.n	8000cb2 <StartGameTask+0x112>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	4a81      	ldr	r2, [pc, #516]	@ (8000eb8 <StartGameTask+0x318>)
 8000cb4:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000cb6:	4b81      	ldr	r3, [pc, #516]	@ (8000ebc <StartGameTask+0x31c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
              break;
 8000cbc:	e025      	b.n	8000d0a <StartGameTask+0x16a>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_DIFFICULTY - 1;
 8000cbe:	4b7e      	ldr	r3, [pc, #504]	@ (8000eb8 <StartGameTask+0x318>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	dd03      	ble.n	8000cce <StartGameTask+0x12e>
 8000cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8000eb8 <StartGameTask+0x318>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <StartGameTask+0x130>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	4a79      	ldr	r2, [pc, #484]	@ (8000eb8 <StartGameTask+0x318>)
 8000cd2:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000cd4:	4b79      	ldr	r3, [pc, #484]	@ (8000ebc <StartGameTask+0x31c>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
              break;
 8000cda:	e016      	b.n	8000d0a <StartGameTask+0x16a>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8000cdc:	4b77      	ldr	r3, [pc, #476]	@ (8000ebc <StartGameTask+0x31c>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
              eCurrentState = eInitGame;
 8000ce2:	4b74      	ldr	r3, [pc, #464]	@ (8000eb4 <StartGameTask+0x314>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
              break;
 8000ce8:	e00f      	b.n	8000d0a <StartGameTask+0x16a>
            }
            case CONFIRM_KEY:
            {
              selectedDifficulty = (EDificult)selectedOption;
 8000cea:	4b73      	ldr	r3, [pc, #460]	@ (8000eb8 <StartGameTask+0x318>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b73      	ldr	r3, [pc, #460]	@ (8000ec0 <StartGameTask+0x320>)
 8000cf2:	701a      	strb	r2, [r3, #0]
              eCurrentState = ePersonaSelect;
 8000cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb4 <StartGameTask+0x314>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	701a      	strb	r2, [r3, #0]
              selectedOption = FALSE; // Reseta para o próximo menu
 8000cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb8 <StartGameTask+0x318>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000d00:	4b6e      	ldr	r3, [pc, #440]	@ (8000ebc <StartGameTask+0x31c>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
              break;
 8000d06:	e000      	b.n	8000d0a <StartGameTask+0x16a>
            }
            default:
            {
              break;
 8000d08:	bf00      	nop
            }
          }
          break;
 8000d0a:	e155      	b.n	8000fb8 <StartGameTask+0x418>
        }
        case ePersonaSelect:
        {
          switch(cLocalKeyPressed)
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	3b23      	subs	r3, #35	@ 0x23
 8000d10:	2b15      	cmp	r3, #21
 8000d12:	d866      	bhi.n	8000de2 <StartGameTask+0x242>
 8000d14:	a201      	add	r2, pc, #4	@ (adr r2, 8000d1c <StartGameTask+0x17c>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000db1 	.word	0x08000db1
 8000d20:	08000de3 	.word	0x08000de3
 8000d24:	08000de3 	.word	0x08000de3
 8000d28:	08000de3 	.word	0x08000de3
 8000d2c:	08000de3 	.word	0x08000de3
 8000d30:	08000de3 	.word	0x08000de3
 8000d34:	08000de3 	.word	0x08000de3
 8000d38:	08000dbf 	.word	0x08000dbf
 8000d3c:	08000de3 	.word	0x08000de3
 8000d40:	08000de3 	.word	0x08000de3
 8000d44:	08000de3 	.word	0x08000de3
 8000d48:	08000de3 	.word	0x08000de3
 8000d4c:	08000de3 	.word	0x08000de3
 8000d50:	08000de3 	.word	0x08000de3
 8000d54:	08000de3 	.word	0x08000de3
 8000d58:	08000d93 	.word	0x08000d93
 8000d5c:	08000de3 	.word	0x08000de3
 8000d60:	08000de3 	.word	0x08000de3
 8000d64:	08000de3 	.word	0x08000de3
 8000d68:	08000de3 	.word	0x08000de3
 8000d6c:	08000de3 	.word	0x08000de3
 8000d70:	08000d75 	.word	0x08000d75
          {
            case UP_KEY:
            {                  
              selectedOption = (selectedOption < MENU_OPTIONS_PERSONA - 1) ? selectedOption + 1 : 0;
 8000d74:	4b50      	ldr	r3, [pc, #320]	@ (8000eb8 <StartGameTask+0x318>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	dc03      	bgt.n	8000d84 <StartGameTask+0x1e4>
 8000d7c:	4b4e      	ldr	r3, [pc, #312]	@ (8000eb8 <StartGameTask+0x318>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	e000      	b.n	8000d86 <StartGameTask+0x1e6>
 8000d84:	2300      	movs	r3, #0
 8000d86:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb8 <StartGameTask+0x318>)
 8000d88:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	@ (8000ebc <StartGameTask+0x31c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
              break;
 8000d90:	e028      	b.n	8000de4 <StartGameTask+0x244>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_PERSONA - 1;
 8000d92:	4b49      	ldr	r3, [pc, #292]	@ (8000eb8 <StartGameTask+0x318>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	dd03      	ble.n	8000da2 <StartGameTask+0x202>
 8000d9a:	4b47      	ldr	r3, [pc, #284]	@ (8000eb8 <StartGameTask+0x318>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	e000      	b.n	8000da4 <StartGameTask+0x204>
 8000da2:	2304      	movs	r3, #4
 8000da4:	4a44      	ldr	r2, [pc, #272]	@ (8000eb8 <StartGameTask+0x318>)
 8000da6:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000da8:	4b44      	ldr	r3, [pc, #272]	@ (8000ebc <StartGameTask+0x31c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
              break;
 8000dae:	e019      	b.n	8000de4 <StartGameTask+0x244>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8000db0:	4b42      	ldr	r3, [pc, #264]	@ (8000ebc <StartGameTask+0x31c>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
              eCurrentState = eDificultSelect;
 8000db6:	4b3f      	ldr	r3, [pc, #252]	@ (8000eb4 <StartGameTask+0x314>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
              break;
 8000dbc:	e012      	b.n	8000de4 <StartGameTask+0x244>
            }
            case CONFIRM_KEY:
            {
              selectedPersona.ePersonaElemental = (EElemental)selectedOption;
 8000dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb8 <StartGameTask+0x318>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec4 <StartGameTask+0x324>)
 8000dc6:	705a      	strb	r2, [r3, #1]
              eCurrentState = eBattleInit;
 8000dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb4 <StartGameTask+0x314>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	@ (8000ebc <StartGameTask+0x31c>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0;     // Zera o contador de ataques
 8000dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec8 <StartGameTask+0x328>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;   // Inicia com a primeira opção (Fogo) pré-selecionada
 8000dda:	4b37      	ldr	r3, [pc, #220]	@ (8000eb8 <StartGameTask+0x318>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]

              break;
 8000de0:	e000      	b.n	8000de4 <StartGameTask+0x244>
            }
            default:
            {
              break;
 8000de2:	bf00      	nop
            }
          }
          break;
 8000de4:	e0e8      	b.n	8000fb8 <StartGameTask+0x418>
        }
        case eBattleInit:
        {
          switch (cLocalKeyPressed)
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	3b23      	subs	r3, #35	@ 0x23
 8000dea:	2b21      	cmp	r3, #33	@ 0x21
 8000dec:	f200 80c2 	bhi.w	8000f74 <StartGameTask+0x3d4>
 8000df0:	a201      	add	r2, pc, #4	@ (adr r2, 8000df8 <StartGameTask+0x258>)
 8000df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df6:	bf00      	nop
 8000df8:	08000f67 	.word	0x08000f67
 8000dfc:	08000f75 	.word	0x08000f75
 8000e00:	08000f75 	.word	0x08000f75
 8000e04:	08000f75 	.word	0x08000f75
 8000e08:	08000f75 	.word	0x08000f75
 8000e0c:	08000f75 	.word	0x08000f75
 8000e10:	08000f75 	.word	0x08000f75
 8000e14:	08000edb 	.word	0x08000edb
 8000e18:	08000f75 	.word	0x08000f75
 8000e1c:	08000f75 	.word	0x08000f75
 8000e20:	08000f75 	.word	0x08000f75
 8000e24:	08000f75 	.word	0x08000f75
 8000e28:	08000f75 	.word	0x08000f75
 8000e2c:	08000f75 	.word	0x08000f75
 8000e30:	08000f75 	.word	0x08000f75
 8000e34:	08000f75 	.word	0x08000f75
 8000e38:	08000f75 	.word	0x08000f75
 8000e3c:	08000f75 	.word	0x08000f75
 8000e40:	08000f75 	.word	0x08000f75
 8000e44:	08000f75 	.word	0x08000f75
 8000e48:	08000f75 	.word	0x08000f75
 8000e4c:	08000f75 	.word	0x08000f75
 8000e50:	08000f75 	.word	0x08000f75
 8000e54:	08000f75 	.word	0x08000f75
 8000e58:	08000f75 	.word	0x08000f75
 8000e5c:	08000f75 	.word	0x08000f75
 8000e60:	08000f75 	.word	0x08000f75
 8000e64:	08000f75 	.word	0x08000f75
 8000e68:	08000f75 	.word	0x08000f75
 8000e6c:	08000f75 	.word	0x08000f75
 8000e70:	08000e81 	.word	0x08000e81
 8000e74:	08000e8f 	.word	0x08000e8f
 8000e78:	08000e9d 	.word	0x08000e9d
 8000e7c:	08000ecd 	.word	0x08000ecd
          {
            case FIRE_KEY:
            {
              selectedOption = 0;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <StartGameTask+0x318>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <StartGameTask+0x31c>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
              break;
 8000e8c:	e073      	b.n	8000f76 <StartGameTask+0x3d6>
            }
            case WATER_KEY:
            {
              selectedOption = 1;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <StartGameTask+0x318>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <StartGameTask+0x31c>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
              break;
 8000e9a:	e06c      	b.n	8000f76 <StartGameTask+0x3d6>
            }
            case AIR_KEY: 
            {
              selectedOption = 2;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <StartGameTask+0x318>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <StartGameTask+0x31c>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
              break;
 8000ea8:	e065      	b.n	8000f76 <StartGameTask+0x3d6>
 8000eaa:	bf00      	nop
 8000eac:	20000400 	.word	0x20000400
 8000eb0:	20000404 	.word	0x20000404
 8000eb4:	20000405 	.word	0x20000405
 8000eb8:	20000408 	.word	0x20000408
 8000ebc:	20000040 	.word	0x20000040
 8000ec0:	2000040c 	.word	0x2000040c
 8000ec4:	20000410 	.word	0x20000410
 8000ec8:	20000416 	.word	0x20000416
            }
            case EARTH_KEY: 
            {
              selectedOption = 3;
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8000fcc <StartGameTask+0x42c>)
 8000ece:	2203      	movs	r2, #3
 8000ed0:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fd0 <StartGameTask+0x430>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
              break;
 8000ed8:	e04d      	b.n	8000f76 <StartGameTask+0x3d6>
            }
            case CONFIRM_KEY:
            {
              switch(selectedOption)
 8000eda:	4b3c      	ldr	r3, [pc, #240]	@ (8000fcc <StartGameTask+0x42c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d82e      	bhi.n	8000f40 <StartGameTask+0x3a0>
 8000ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee8 <StartGameTask+0x348>)
 8000ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee8:	08000ef9 	.word	0x08000ef9
 8000eec:	08000f0b 	.word	0x08000f0b
 8000ef0:	08000f1d 	.word	0x08000f1d
 8000ef4:	08000f2f 	.word	0x08000f2f
              {
                  case 0: selectedPersona.eAttackSequential[u8ContAttack] = eRed;    break;
 8000ef8:	4b36      	ldr	r3, [pc, #216]	@ (8000fd4 <StartGameTask+0x434>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b35      	ldr	r3, [pc, #212]	@ (8000fd8 <StartGameTask+0x438>)
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	709a      	strb	r2, [r3, #2]
 8000f08:	e01a      	b.n	8000f40 <StartGameTask+0x3a0>
                  case 1: selectedPersona.eAttackSequential[u8ContAttack] = eBlue;   break;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <StartGameTask+0x434>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b31      	ldr	r3, [pc, #196]	@ (8000fd8 <StartGameTask+0x438>)
 8000f14:	4413      	add	r3, r2
 8000f16:	2201      	movs	r2, #1
 8000f18:	709a      	strb	r2, [r3, #2]
 8000f1a:	e011      	b.n	8000f40 <StartGameTask+0x3a0>
                  case 2: selectedPersona.eAttackSequential[u8ContAttack] = eGreen;  break;
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <StartGameTask+0x434>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd8 <StartGameTask+0x438>)
 8000f26:	4413      	add	r3, r2
 8000f28:	2202      	movs	r2, #2
 8000f2a:	709a      	strb	r2, [r3, #2]
 8000f2c:	e008      	b.n	8000f40 <StartGameTask+0x3a0>
                  case 3: selectedPersona.eAttackSequential[u8ContAttack] = eYellow; break;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <StartGameTask+0x434>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <StartGameTask+0x438>)
 8000f38:	4413      	add	r3, r2
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	709a      	strb	r2, [r3, #2]
 8000f3e:	bf00      	nop
              }
              
              u8ContAttack++; 
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <StartGameTask+0x434>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <StartGameTask+0x434>)
 8000f4c:	701a      	strb	r2, [r3, #0]
              
              if (u8ContAttack >= 4)
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <StartGameTask+0x434>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d902      	bls.n	8000f5e <StartGameTask+0x3be>
              {
                eCurrentState = ePlayerTurn;
 8000f58:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <StartGameTask+0x43c>)
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	701a      	strb	r2, [r3, #0]
              }
              
              u8CleanScreen = TRUE;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <StartGameTask+0x430>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
              break;
 8000f64:	e007      	b.n	8000f76 <StartGameTask+0x3d6>
            }
            case BACK_KEY:
            {
              eCurrentState = ePersonaSelect;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <StartGameTask+0x43c>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <StartGameTask+0x430>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
              break;
 8000f72:	e000      	b.n	8000f76 <StartGameTask+0x3d6>
            }
            default:
            {
              break;
 8000f74:	bf00      	nop
            }
          }
          break;
 8000f76:	e01f      	b.n	8000fb8 <StartGameTask+0x418>
        }
        case ePlayerTurn:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f7c:	d119      	bne.n	8000fb2 <StartGameTask+0x412>
          {
            eCurrentState = eEndGame;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <StartGameTask+0x43c>)
 8000f80:	2205      	movs	r2, #5
 8000f82:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <StartGameTask+0x430>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
          }
          break;
 8000f8a:	e012      	b.n	8000fb2 <StartGameTask+0x412>
        }
        case eEndGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f90:	d111      	bne.n	8000fb6 <StartGameTask+0x416>
          {
            eCurrentState = eInitGame;
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <StartGameTask+0x43c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <StartGameTask+0x430>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
          }
          break;
 8000f9e:	e00a      	b.n	8000fb6 <StartGameTask+0x416>
        }
        default:
        {
          // Estado desconhecido, volta para o início por segurança
          eCurrentState = eInitGame;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <StartGameTask+0x43c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
          u8CleanScreen = TRUE;
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <StartGameTask+0x430>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
          break;
 8000fac:	e004      	b.n	8000fb8 <StartGameTask+0x418>
          break;
 8000fae:	bf00      	nop
 8000fb0:	e002      	b.n	8000fb8 <StartGameTask+0x418>
          break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <StartGameTask+0x418>
          break;
 8000fb6:	bf00      	nop
        }
      }
      osMutexRelease(gameMutexHandle);
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <StartGameTask+0x440>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fbc5 	bl	800474c <osMutexRelease>
    }
    osDelay(50);
 8000fc2:	2032      	movs	r0, #50	@ 0x32
 8000fc4:	f003 fb47 	bl	8004656 <osDelay>
    cLocalKeyPressed = NONE_KEY;
 8000fc8:	e5ee      	b.n	8000ba8 <StartGameTask+0x8>
 8000fca:	bf00      	nop
 8000fcc:	20000408 	.word	0x20000408
 8000fd0:	20000040 	.word	0x20000040
 8000fd4:	20000416 	.word	0x20000416
 8000fd8:	20000410 	.word	0x20000410
 8000fdc:	20000405 	.word	0x20000405
 8000fe0:	20000400 	.word	0x20000400

08000fe4 <StartDisplayTask>:
  }
}

void StartDisplayTask(void const * argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b090      	sub	sp, #64	@ 0x40
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  char buffer[30];
  uint8_t u8RedrawScreen = FALSE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for(;;)
  {

    osMutexWait(gameMutexHandle, osWaitForever);
 8000ff2:	4bab      	ldr	r3, [pc, #684]	@ (80012a0 <StartDisplayTask+0x2bc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fb58 	bl	80046b0 <osMutexWait>
    if (TRUE == u8CleanScreen) {
 8001000:	4ba8      	ldr	r3, [pc, #672]	@ (80012a4 <StartDisplayTask+0x2c0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d105      	bne.n	8001016 <StartDisplayTask+0x32>
        u8RedrawScreen = TRUE;
 800100a:	2301      	movs	r3, #1
 800100c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        u8CleanScreen = FALSE; 
 8001010:	4ba4      	ldr	r3, [pc, #656]	@ (80012a4 <StartDisplayTask+0x2c0>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 8001016:	4ba2      	ldr	r3, [pc, #648]	@ (80012a0 <StartDisplayTask+0x2bc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fb96 	bl	800474c <osMutexRelease>


    if(TRUE == u8RedrawScreen)
 8001020:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001024:	2b01      	cmp	r3, #1
 8001026:	f040 8137 	bne.w	8001298 <StartDisplayTask+0x2b4>
    {
      ClearScreen();
 800102a:	f7ff fad1 	bl	80005d0 <ClearScreen>

      switch(eCurrentState)
 800102e:	4b9e      	ldr	r3, [pc, #632]	@ (80012a8 <StartDisplayTask+0x2c4>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b05      	cmp	r3, #5
 8001036:	f200 8120 	bhi.w	800127a <StartDisplayTask+0x296>
 800103a:	a201      	add	r2, pc, #4	@ (adr r2, 8001040 <StartDisplayTask+0x5c>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001059 	.word	0x08001059
 8001044:	08001087 	.word	0x08001087
 8001048:	08001097 	.word	0x08001097
 800104c:	080010a7 	.word	0x080010a7
 8001050:	0800124b 	.word	0x0800124b
 8001054:	08001263 	.word	0x08001263
      {
          case eInitGame:
          {
            ST7789_DrawText(10, 10, "ElementalCube!", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8001058:	2302      	movs	r3, #2
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	2300      	movs	r3, #0
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001064:	4a91      	ldr	r2, [pc, #580]	@ (80012ac <StartDisplayTask+0x2c8>)
 8001066:	210a      	movs	r1, #10
 8001068:	200a      	movs	r0, #10
 800106a:	f000 fb7d 	bl	8001768 <ST7789_DrawText>
            ST7789_DrawText(10, 40, "Pressione *", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 800106e:	2302      	movs	r3, #2
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2300      	movs	r3, #0
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107a:	4a8d      	ldr	r2, [pc, #564]	@ (80012b0 <StartDisplayTask+0x2cc>)
 800107c:	2128      	movs	r1, #40	@ 0x28
 800107e:	200a      	movs	r0, #10
 8001080:	f000 fb72 	bl	8001768 <ST7789_DrawText>
            break;
 8001084:	e105      	b.n	8001292 <StartDisplayTask+0x2ae>
          }
          case eDificultSelect:
          {
            DrawMenu("Selecione Dificuldade", difficultyOptions, MENU_OPTIONS_DIFFICULTY, selectedOption);
 8001086:	4b8b      	ldr	r3, [pc, #556]	@ (80012b4 <StartDisplayTask+0x2d0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2203      	movs	r2, #3
 800108c:	498a      	ldr	r1, [pc, #552]	@ (80012b8 <StartDisplayTask+0x2d4>)
 800108e:	488b      	ldr	r0, [pc, #556]	@ (80012bc <StartDisplayTask+0x2d8>)
 8001090:	f7ff faac 	bl	80005ec <DrawMenu>
            break;
 8001094:	e0fd      	b.n	8001292 <StartDisplayTask+0x2ae>
          }
          case ePersonaSelect:
          {
            DrawMenu("Selecione Personagem", personaOptions, MENU_OPTIONS_PERSONA, selectedOption);
 8001096:	4b87      	ldr	r3, [pc, #540]	@ (80012b4 <StartDisplayTask+0x2d0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2205      	movs	r2, #5
 800109c:	4988      	ldr	r1, [pc, #544]	@ (80012c0 <StartDisplayTask+0x2dc>)
 800109e:	4889      	ldr	r0, [pc, #548]	@ (80012c4 <StartDisplayTask+0x2e0>)
 80010a0:	f7ff faa4 	bl	80005ec <DrawMenu>
            break;
 80010a4:	e0f5      	b.n	8001292 <StartDisplayTask+0x2ae>
          }
          case eBattleInit:
          {
            sprintf(buffer, "Selecione o %d ataque", (u8ContAttack + 1));
 80010a6:	4b88      	ldr	r3, [pc, #544]	@ (80012c8 <StartDisplayTask+0x2e4>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4986      	ldr	r1, [pc, #536]	@ (80012cc <StartDisplayTask+0x2e8>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 fe4f 	bl	8006d58 <siprintf>
            ST7789_DrawText(10, 10, buffer, ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 80010ba:	f107 0208 	add.w	r2, r7, #8
 80010be:	2302      	movs	r3, #2
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	2300      	movs	r3, #0
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ca:	210a      	movs	r1, #10
 80010cc:	200a      	movs	r0, #10
 80010ce:	f000 fb4b 	bl	8001768 <ST7789_DrawText>

            uint16_t colorFogo  = (selectedOption == 0) ? ST7789_YELLOW : ST7789_WHITE;
 80010d2:	4b78      	ldr	r3, [pc, #480]	@ (80012b4 <StartDisplayTask+0x2d0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d102      	bne.n	80010e0 <StartDisplayTask+0xfc>
 80010da:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010de:	e001      	b.n	80010e4 <StartDisplayTask+0x100>
 80010e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e4:	867b      	strh	r3, [r7, #50]	@ 0x32
            uint16_t colorAgua  = (selectedOption == 1) ? ST7789_YELLOW : ST7789_WHITE;
 80010e6:	4b73      	ldr	r3, [pc, #460]	@ (80012b4 <StartDisplayTask+0x2d0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d102      	bne.n	80010f4 <StartDisplayTask+0x110>
 80010ee:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010f2:	e001      	b.n	80010f8 <StartDisplayTask+0x114>
 80010f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f8:	863b      	strh	r3, [r7, #48]	@ 0x30
            uint16_t colorAr    = (selectedOption == 2) ? ST7789_YELLOW : ST7789_WHITE;
 80010fa:	4b6e      	ldr	r3, [pc, #440]	@ (80012b4 <StartDisplayTask+0x2d0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d102      	bne.n	8001108 <StartDisplayTask+0x124>
 8001102:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001106:	e001      	b.n	800110c <StartDisplayTask+0x128>
 8001108:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            uint16_t colorTerra = (selectedOption == 3) ? ST7789_YELLOW : ST7789_WHITE;
 800110e:	4b69      	ldr	r3, [pc, #420]	@ (80012b4 <StartDisplayTask+0x2d0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d102      	bne.n	800111c <StartDisplayTask+0x138>
 8001116:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800111a:	e001      	b.n	8001120 <StartDisplayTask+0x13c>
 800111c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001120:	85bb      	strh	r3, [r7, #44]	@ 0x2c

            ST7789_FillRectangle(10, 40, 20, 20, ST7789_RED);
 8001122:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2314      	movs	r3, #20
 800112a:	2214      	movs	r2, #20
 800112c:	2128      	movs	r1, #40	@ 0x28
 800112e:	200a      	movs	r0, #10
 8001130:	f000 f9f2 	bl	8001518 <ST7789_FillRectangle>
            ST7789_DrawText(40, 45, "A - Fogo", colorFogo, ST7789_BLACK, ST7789_SIZE);
 8001134:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001136:	2202      	movs	r2, #2
 8001138:	9201      	str	r2, [sp, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	4a64      	ldr	r2, [pc, #400]	@ (80012d0 <StartDisplayTask+0x2ec>)
 8001140:	212d      	movs	r1, #45	@ 0x2d
 8001142:	2028      	movs	r0, #40	@ 0x28
 8001144:	f000 fb10 	bl	8001768 <ST7789_DrawText>

            ST7789_FillRectangle(10, 70, 20, 20, ST7789_BLUE);
 8001148:	231f      	movs	r3, #31
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2314      	movs	r3, #20
 800114e:	2214      	movs	r2, #20
 8001150:	2146      	movs	r1, #70	@ 0x46
 8001152:	200a      	movs	r0, #10
 8001154:	f000 f9e0 	bl	8001518 <ST7789_FillRectangle>
            ST7789_DrawText(40, 75, "B - Agua", colorAgua, ST7789_BLACK, ST7789_SIZE);
 8001158:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800115a:	2202      	movs	r2, #2
 800115c:	9201      	str	r2, [sp, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	4a5c      	ldr	r2, [pc, #368]	@ (80012d4 <StartDisplayTask+0x2f0>)
 8001164:	214b      	movs	r1, #75	@ 0x4b
 8001166:	2028      	movs	r0, #40	@ 0x28
 8001168:	f000 fafe 	bl	8001768 <ST7789_DrawText>

            ST7789_FillRectangle(10, 100, 20, 20, ST7789_CYAN);
 800116c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2314      	movs	r3, #20
 8001174:	2214      	movs	r2, #20
 8001176:	2164      	movs	r1, #100	@ 0x64
 8001178:	200a      	movs	r0, #10
 800117a:	f000 f9cd 	bl	8001518 <ST7789_FillRectangle>
            ST7789_DrawText(40, 105, "C - Ar", colorAr, ST7789_BLACK, ST7789_SIZE);
 800117e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001180:	2202      	movs	r2, #2
 8001182:	9201      	str	r2, [sp, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	9200      	str	r2, [sp, #0]
 8001188:	4a53      	ldr	r2, [pc, #332]	@ (80012d8 <StartDisplayTask+0x2f4>)
 800118a:	2169      	movs	r1, #105	@ 0x69
 800118c:	2028      	movs	r0, #40	@ 0x28
 800118e:	f000 faeb 	bl	8001768 <ST7789_DrawText>

            ST7789_FillRectangle(10, 130, 20, 20, ST7789_BROWN);
 8001192:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2314      	movs	r3, #20
 800119a:	2214      	movs	r2, #20
 800119c:	2182      	movs	r1, #130	@ 0x82
 800119e:	200a      	movs	r0, #10
 80011a0:	f000 f9ba 	bl	8001518 <ST7789_FillRectangle>
            ST7789_DrawText(40, 135, "D - Terra", colorTerra, ST7789_BLACK, ST7789_SIZE);
 80011a4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011a6:	2202      	movs	r2, #2
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	4a4b      	ldr	r2, [pc, #300]	@ (80012dc <StartDisplayTask+0x2f8>)
 80011b0:	2187      	movs	r1, #135	@ 0x87
 80011b2:	2028      	movs	r0, #40	@ 0x28
 80011b4:	f000 fad8 	bl	8001768 <ST7789_DrawText>

            for(uint8_t i = 0; i < u8ContAttack; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80011be:	e03c      	b.n	800123a <StartDisplayTask+0x256>
            {
              char* attackName = "";
 80011c0:	4b47      	ldr	r3, [pc, #284]	@ (80012e0 <StartDisplayTask+0x2fc>)
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
              uint16_t attackColor = ST7789_WHITE;
 80011c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c8:	86bb      	strh	r3, [r7, #52]	@ 0x34
              switch(selectedPersona.eAttackSequential[i])
 80011ca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80011ce:	4a45      	ldr	r2, [pc, #276]	@ (80012e4 <StartDisplayTask+0x300>)
 80011d0:	4413      	add	r3, r2
 80011d2:	789b      	ldrb	r3, [r3, #2]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d819      	bhi.n	800120e <StartDisplayTask+0x22a>
 80011da:	a201      	add	r2, pc, #4	@ (adr r2, 80011e0 <StartDisplayTask+0x1fc>)
 80011dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e0:	080011f1 	.word	0x080011f1
 80011e4:	080011f9 	.word	0x080011f9
 80011e8:	080011ff 	.word	0x080011ff
 80011ec:	08001207 	.word	0x08001207
              {
                  case eRed:    attackColor = ST7789_RED;   break;
 80011f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80011f6:	e00a      	b.n	800120e <StartDisplayTask+0x22a>
                  case eBlue:   attackColor = ST7789_BLUE;  break;
 80011f8:	231f      	movs	r3, #31
 80011fa:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80011fc:	e007      	b.n	800120e <StartDisplayTask+0x22a>
                  case eGreen:  attackColor = ST7789_CYAN;  break;
 80011fe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001202:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001204:	e003      	b.n	800120e <StartDisplayTask+0x22a>
                  case eYellow: attackColor = ST7789_BROWN; break;
 8001206:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 800120a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800120c:	bf00      	nop
              }
              ST7789_FillRectangle(10 + (i * 30), 180, 20, 20, attackColor);
 800120e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	b29b      	uxth	r3, r3
 800121e:	330a      	adds	r3, #10
 8001220:	b298      	uxth	r0, r3
 8001222:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2314      	movs	r3, #20
 8001228:	2214      	movs	r2, #20
 800122a:	21b4      	movs	r1, #180	@ 0xb4
 800122c:	f000 f974 	bl	8001518 <ST7789_FillRectangle>
            for(uint8_t i = 0; i < u8ContAttack; i++)
 8001230:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001234:	3301      	adds	r3, #1
 8001236:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800123a:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <StartDisplayTask+0x2e4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001244:	429a      	cmp	r2, r3
 8001246:	d3bb      	bcc.n	80011c0 <StartDisplayTask+0x1dc>
            }
            break;
 8001248:	e023      	b.n	8001292 <StartDisplayTask+0x2ae>
          }
          case ePlayerTurn:
          {
            ST7789_DrawText(10, 10, "Seu Turno!", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 800124a:	2302      	movs	r3, #2
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	2300      	movs	r3, #0
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001256:	4a24      	ldr	r2, [pc, #144]	@ (80012e8 <StartDisplayTask+0x304>)
 8001258:	210a      	movs	r1, #10
 800125a:	200a      	movs	r0, #10
 800125c:	f000 fa84 	bl	8001768 <ST7789_DrawText>
            break;
 8001260:	e017      	b.n	8001292 <StartDisplayTask+0x2ae>
          }
          case eEndGame:
          {
            ST7789_DrawText(10, 10, "Fim de Jogo!", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8001262:	2302      	movs	r3, #2
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800126e:	4a1f      	ldr	r2, [pc, #124]	@ (80012ec <StartDisplayTask+0x308>)
 8001270:	210a      	movs	r1, #10
 8001272:	200a      	movs	r0, #10
 8001274:	f000 fa78 	bl	8001768 <ST7789_DrawText>
            break;
 8001278:	e00b      	b.n	8001292 <StartDisplayTask+0x2ae>
          }
          default:
          {
            ST7789_DrawText(10, 10, "Erro de Estado!", ST7789_RED, ST7789_BLACK, ST7789_SIZE);
 800127a:	2302      	movs	r3, #2
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001286:	4a1a      	ldr	r2, [pc, #104]	@ (80012f0 <StartDisplayTask+0x30c>)
 8001288:	210a      	movs	r1, #10
 800128a:	200a      	movs	r0, #10
 800128c:	f000 fa6c 	bl	8001768 <ST7789_DrawText>
            break;
 8001290:	bf00      	nop
          }
      }
      u8RedrawScreen = FALSE;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    osDelay(5);
 8001298:	2005      	movs	r0, #5
 800129a:	f003 f9dc 	bl	8004656 <osDelay>
    osMutexWait(gameMutexHandle, osWaitForever);
 800129e:	e6a8      	b.n	8000ff2 <StartDisplayTask+0xe>
 80012a0:	20000400 	.word	0x20000400
 80012a4:	20000040 	.word	0x20000040
 80012a8:	20000405 	.word	0x20000405
 80012ac:	080077a0 	.word	0x080077a0
 80012b0:	080077b0 	.word	0x080077b0
 80012b4:	20000408 	.word	0x20000408
 80012b8:	20000044 	.word	0x20000044
 80012bc:	080077bc 	.word	0x080077bc
 80012c0:	20000050 	.word	0x20000050
 80012c4:	080077d4 	.word	0x080077d4
 80012c8:	20000416 	.word	0x20000416
 80012cc:	080077ec 	.word	0x080077ec
 80012d0:	08007804 	.word	0x08007804
 80012d4:	08007810 	.word	0x08007810
 80012d8:	0800781c 	.word	0x0800781c
 80012dc:	08007824 	.word	0x08007824
 80012e0:	08007830 	.word	0x08007830
 80012e4:	20000410 	.word	0x20000410
 80012e8:	08007834 	.word	0x08007834
 80012ec:	08007840 	.word	0x08007840
 80012f0:	08007850 	.word	0x08007850

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <ST7789_Select>:
#define LCD_DC_PIN    LCD_DC_Pin
#define LCD_RST_PORT  LCD_RST_GPIO_Port
#define LCD_RST_PIN   LCD_RST_Pin

// Funções privadas (auxiliares)
static void ST7789_Select(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2140      	movs	r1, #64	@ 0x40
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <ST7789_Select+0x14>)
 800130a:	f001 f9a1 	bl	8002650 <HAL_GPIO_WritePin>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020400 	.word	0x40020400

08001318 <ST7789_Unselect>:

static void ST7789_Unselect(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2140      	movs	r1, #64	@ 0x40
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <ST7789_Unselect+0x14>)
 8001322:	f001 f995 	bl	8002650 <HAL_GPIO_WritePin>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40020400 	.word	0x40020400

08001330 <ST7789_Reset>:

static void ST7789_Reset(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800133a:	4808      	ldr	r0, [pc, #32]	@ (800135c <ST7789_Reset+0x2c>)
 800133c:	f001 f988 	bl	8002650 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001340:	2005      	movs	r0, #5
 8001342:	f000 fc75 	bl	8001c30 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800134c:	4803      	ldr	r0, [pc, #12]	@ (800135c <ST7789_Reset+0x2c>)
 800134e:	f001 f97f 	bl	8002650 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001352:	2005      	movs	r0, #5
 8001354:	f000 fc6c 	bl	8001c30 <HAL_Delay>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40020000 	.word	0x40020000

08001360 <ST7789_WriteCommand>:

static void ST7789_WriteCommand(uint8_t cmd) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET); // Modo Comando
 800136a:	2200      	movs	r2, #0
 800136c:	2180      	movs	r1, #128	@ 0x80
 800136e:	4809      	ldr	r0, [pc, #36]	@ (8001394 <ST7789_WriteCommand+0x34>)
 8001370:	f001 f96e 	bl	8002650 <HAL_GPIO_WritePin>
    ST7789_Select();
 8001374:	f7ff ffc4 	bl	8001300 <ST7789_Select>
    HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001378:	1df9      	adds	r1, r7, #7
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	2201      	movs	r2, #1
 8001380:	4805      	ldr	r0, [pc, #20]	@ (8001398 <ST7789_WriteCommand+0x38>)
 8001382:	f001 fe7a 	bl	800307a <HAL_SPI_Transmit>
    ST7789_Unselect();
 8001386:	f7ff ffc7 	bl	8001318 <ST7789_Unselect>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020800 	.word	0x40020800
 8001398:	20000354 	.word	0x20000354

0800139c <ST7789_WriteData>:

static void ST7789_WriteData(uint8_t* buff, size_t buff_size) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET); // Modo Dado
 80013a6:	2201      	movs	r2, #1
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <ST7789_WriteData+0x34>)
 80013ac:	f001 f950 	bl	8002650 <HAL_GPIO_WritePin>
    ST7789_Select();
 80013b0:	f7ff ffa6 	bl	8001300 <ST7789_Select>
    HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <ST7789_WriteData+0x38>)
 80013c0:	f001 fe5b 	bl	800307a <HAL_SPI_Transmit>
    ST7789_Unselect();
 80013c4:	f7ff ffa8 	bl	8001318 <ST7789_Unselect>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020800 	.word	0x40020800
 80013d4:	20000354 	.word	0x20000354

080013d8 <ST7789_SetAddressWindow>:

// Define a "janela" de memória onde os pixels serão escritos
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4604      	mov	r4, r0
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4623      	mov	r3, r4
 80013e8:	80fb      	strh	r3, [r7, #6]
 80013ea:	4603      	mov	r3, r0
 80013ec:	80bb      	strh	r3, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	807b      	strh	r3, [r7, #2]
 80013f2:	4613      	mov	r3, r2
 80013f4:	803b      	strh	r3, [r7, #0]
    uint8_t data[4];

    // Column Address Set
    ST7789_WriteCommand(0x2A);
 80013f6:	202a      	movs	r0, #42	@ 0x2a
 80013f8:	f7ff ffb2 	bl	8001360 <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b29b      	uxth	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	733b      	strb	r3, [r7, #12]
    data[1] = x0 & 0xFF;
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	737b      	strb	r3, [r7, #13]
    data[2] = (x1 >> 8) & 0xFF;
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	b29b      	uxth	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	73bb      	strb	r3, [r7, #14]
    data[3] = x1 & 0xFF;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	73fb      	strb	r3, [r7, #15]
    ST7789_WriteData(data, sizeof(data));
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2104      	movs	r1, #4
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ffba 	bl	800139c <ST7789_WriteData>

    // Row Address Set
    ST7789_WriteCommand(0x2B);
 8001428:	202b      	movs	r0, #43	@ 0x2b
 800142a:	f7ff ff99 	bl	8001360 <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	733b      	strb	r3, [r7, #12]
    data[1] = y0 & 0xFF;
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	737b      	strb	r3, [r7, #13]
    data[2] = (y1 >> 8) & 0xFF;
 800143e:	883b      	ldrh	r3, [r7, #0]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	b29b      	uxth	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	73bb      	strb	r3, [r7, #14]
    data[3] = y1 & 0xFF;
 8001448:	883b      	ldrh	r3, [r7, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	73fb      	strb	r3, [r7, #15]
    ST7789_WriteData(data, sizeof(data));
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2104      	movs	r1, #4
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ffa1 	bl	800139c <ST7789_WriteData>

    // Write to RAM
    ST7789_WriteCommand(0x2C);
 800145a:	202c      	movs	r0, #44	@ 0x2c
 800145c:	f7ff ff80 	bl	8001360 <ST7789_WriteCommand>
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}

08001468 <ST7789_Init>:

// Função de inicialização com a sequência de comandos para o ST7789
void ST7789_Init(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
    ST7789_Reset();
 800146e:	f7ff ff5f 	bl	8001330 <ST7789_Reset>

    ST7789_WriteCommand(0x11); // Sleep Out
 8001472:	2011      	movs	r0, #17
 8001474:	f7ff ff74 	bl	8001360 <ST7789_WriteCommand>
    HAL_Delay(120);
 8001478:	2078      	movs	r0, #120	@ 0x78
 800147a:	f000 fbd9 	bl	8001c30 <HAL_Delay>

    ST7789_WriteCommand(0x36); // Memory Data Access Control
 800147e:	2036      	movs	r0, #54	@ 0x36
 8001480:	f7ff ff6e 	bl	8001360 <ST7789_WriteCommand>
    uint8_t madctl = 0x00;
 8001484:	2300      	movs	r3, #0
 8001486:	71fb      	strb	r3, [r7, #7]
    ST7789_WriteData(&madctl, 1);
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	2101      	movs	r1, #1
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff85 	bl	800139c <ST7789_WriteData>

    ST7789_WriteCommand(0x3A); // Interface Pixel Format
 8001492:	203a      	movs	r0, #58	@ 0x3a
 8001494:	f7ff ff64 	bl	8001360 <ST7789_WriteCommand>
    uint8_t pixfmt = 0x55; // 16 bits/pixel
 8001498:	2355      	movs	r3, #85	@ 0x55
 800149a:	71bb      	strb	r3, [r7, #6]
    ST7789_WriteData(&pixfmt, 1);
 800149c:	1dbb      	adds	r3, r7, #6
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff7b 	bl	800139c <ST7789_WriteData>

    ST7789_WriteCommand(0x21); // Display Inversion On
 80014a6:	2021      	movs	r0, #33	@ 0x21
 80014a8:	f7ff ff5a 	bl	8001360 <ST7789_WriteCommand>

    ST7789_WriteCommand(0x13); // Normal Display Mode On
 80014ac:	2013      	movs	r0, #19
 80014ae:	f7ff ff57 	bl	8001360 <ST7789_WriteCommand>

    ST7789_WriteCommand(0x29); // Display On
 80014b2:	2029      	movs	r0, #41	@ 0x29
 80014b4:	f7ff ff54 	bl	8001360 <ST7789_WriteCommand>
    HAL_Delay(120);
 80014b8:	2078      	movs	r0, #120	@ 0x78
 80014ba:	f000 fbb9 	bl	8001c30 <HAL_Delay>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <ST7789_DrawPixel>:

// Funções públicas (implementação)
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	460b      	mov	r3, r1
 80014d2:	80bb      	strh	r3, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	807b      	strh	r3, [r7, #2]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	2bef      	cmp	r3, #239	@ 0xef
 80014dc:	d817      	bhi.n	800150e <ST7789_DrawPixel+0x48>
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	2bef      	cmp	r3, #239	@ 0xef
 80014e2:	d814      	bhi.n	800150e <ST7789_DrawPixel+0x48>

    ST7789_SetAddressWindow(x, y, x, y);
 80014e4:	88bb      	ldrh	r3, [r7, #4]
 80014e6:	88fa      	ldrh	r2, [r7, #6]
 80014e8:	88b9      	ldrh	r1, [r7, #4]
 80014ea:	88f8      	ldrh	r0, [r7, #6]
 80014ec:	f7ff ff74 	bl	80013d8 <ST7789_SetAddressWindow>
    uint8_t data[] = { (color >> 8) & 0xFF, color & 0xFF };
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	733b      	strb	r3, [r7, #12]
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	737b      	strb	r3, [r7, #13]
    ST7789_WriteData(data, sizeof(data));
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	2102      	movs	r1, #2
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff48 	bl	800139c <ST7789_WriteData>
 800150c:	e000      	b.n	8001510 <ST7789_DrawPixel+0x4a>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 800150e:	bf00      	nop
}
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <ST7789_FillRectangle>:

void ST7789_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	4623      	mov	r3, r4
 8001528:	80fb      	strh	r3, [r7, #6]
 800152a:	4603      	mov	r3, r0
 800152c:	80bb      	strh	r3, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	807b      	strh	r3, [r7, #2]
 8001532:	4613      	mov	r3, r2
 8001534:	803b      	strh	r3, [r7, #0]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	2bef      	cmp	r3, #239	@ 0xef
 800153a:	d853      	bhi.n	80015e4 <ST7789_FillRectangle+0xcc>
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	2bef      	cmp	r3, #239	@ 0xef
 8001540:	d850      	bhi.n	80015e4 <ST7789_FillRectangle+0xcc>
    if ((x + w - 1) >= ST7789_WIDTH) w = ST7789_WIDTH - x;
 8001542:	88fa      	ldrh	r2, [r7, #6]
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	4413      	add	r3, r2
 8001548:	2bf0      	cmp	r3, #240	@ 0xf0
 800154a:	dd03      	ble.n	8001554 <ST7789_FillRectangle+0x3c>
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001552:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 8001554:	88ba      	ldrh	r2, [r7, #4]
 8001556:	883b      	ldrh	r3, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	2bf0      	cmp	r3, #240	@ 0xf0
 800155c:	dd03      	ble.n	8001566 <ST7789_FillRectangle+0x4e>
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001564:	803b      	strh	r3, [r7, #0]

    ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001566:	88fa      	ldrh	r2, [r7, #6]
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	4413      	add	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b29c      	uxth	r4, r3
 8001572:	88ba      	ldrh	r2, [r7, #4]
 8001574:	883b      	ldrh	r3, [r7, #0]
 8001576:	4413      	add	r3, r2
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	b29b      	uxth	r3, r3
 800157e:	88b9      	ldrh	r1, [r7, #4]
 8001580:	88f8      	ldrh	r0, [r7, #6]
 8001582:	4622      	mov	r2, r4
 8001584:	f7ff ff28 	bl	80013d8 <ST7789_SetAddressWindow>

    uint8_t data[] = { (color >> 8) & 0xFF, color & 0xFF };
 8001588:	8c3b      	ldrh	r3, [r7, #32]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	733b      	strb	r3, [r7, #12]
 8001592:	8c3b      	ldrh	r3, [r7, #32]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET); // Data mode
 8001598:	2201      	movs	r2, #1
 800159a:	2180      	movs	r1, #128	@ 0x80
 800159c:	4813      	ldr	r0, [pc, #76]	@ (80015ec <ST7789_FillRectangle+0xd4>)
 800159e:	f001 f857 	bl	8002650 <HAL_GPIO_WritePin>
    ST7789_Select();
 80015a2:	f7ff fead 	bl	8001300 <ST7789_Select>

    for (y = 0; y < h; y++) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	80bb      	strh	r3, [r7, #4]
 80015aa:	e014      	b.n	80015d6 <ST7789_FillRectangle+0xbe>
        for (x = 0; x < w; x++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	80fb      	strh	r3, [r7, #6]
 80015b0:	e00a      	b.n	80015c8 <ST7789_FillRectangle+0xb0>
            HAL_SPI_Transmit(&ST7789_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80015b2:	f107 010c 	add.w	r1, r7, #12
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	2202      	movs	r2, #2
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <ST7789_FillRectangle+0xd8>)
 80015be:	f001 fd5c 	bl	800307a <HAL_SPI_Transmit>
        for (x = 0; x < w; x++) {
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	3301      	adds	r3, #1
 80015c6:	80fb      	strh	r3, [r7, #6]
 80015c8:	88fa      	ldrh	r2, [r7, #6]
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d3f0      	bcc.n	80015b2 <ST7789_FillRectangle+0x9a>
    for (y = 0; y < h; y++) {
 80015d0:	88bb      	ldrh	r3, [r7, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	80bb      	strh	r3, [r7, #4]
 80015d6:	88ba      	ldrh	r2, [r7, #4]
 80015d8:	883b      	ldrh	r3, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3e6      	bcc.n	80015ac <ST7789_FillRectangle+0x94>
        }
    }
    ST7789_Unselect();
 80015de:	f7ff fe9b 	bl	8001318 <ST7789_Unselect>
 80015e2:	e000      	b.n	80015e6 <ST7789_FillRectangle+0xce>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 80015e4:	bf00      	nop
}
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd90      	pop	{r4, r7, pc}
 80015ec:	40020800 	.word	0x40020800
 80015f0:	20000354 	.word	0x20000354

080015f4 <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
    ST7789_FillRectangle(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	23f0      	movs	r3, #240	@ 0xf0
 8001604:	22f0      	movs	r2, #240	@ 0xf0
 8001606:	2100      	movs	r1, #0
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ff85 	bl	8001518 <ST7789_FillRectangle>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <ST7789_DrawChar>:
 * @param y Coordenada Y do canto superior esquerdo.
 * @param ch O caractere a ser desenhado.
 * @param foreground Cor do caractere.
 * @param background Cor do fundo.
 */
void ST7789_DrawChar(uint16_t x, uint16_t y, char ch, uint16_t foreground, uint16_t background, uint8_t size) {
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af02      	add	r7, sp, #8
 800161e:	4604      	mov	r4, r0
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	4623      	mov	r3, r4
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	4603      	mov	r3, r0
 800162c:	80bb      	strh	r3, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	70fb      	strb	r3, [r7, #3]
 8001632:	4613      	mov	r3, r2
 8001634:	803b      	strh	r3, [r7, #0]
    if (x + (FONT_WIDTH * size) > ST7789_WIDTH || y + (FONT_HEIGHT * size) > ST7789_HEIGHT) {
 8001636:	88f9      	ldrh	r1, [r7, #6]
 8001638:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	440b      	add	r3, r1
 8001644:	2bf0      	cmp	r3, #240	@ 0xf0
 8001646:	f300 8089 	bgt.w	800175c <ST7789_DrawChar+0x144>
 800164a:	88b9      	ldrh	r1, [r7, #4]
 800164c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	440b      	add	r3, r1
 800165a:	2bf0      	cmp	r3, #240	@ 0xf0
 800165c:	dc7e      	bgt.n	800175c <ST7789_DrawChar+0x144>
        return; // Garante que o caractere ampliado ainda caiba na tela
    }

    uint32_t font_idx = (ch - ' ') * FONT_HEIGHT;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	f1a3 0220 	sub.w	r2, r3, #32
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < FONT_HEIGHT; i++) {
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e06f      	b.n	8001754 <ST7789_DrawChar+0x13c>
        uint8_t line_data = font[font_idx + i];
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	4a3a      	ldr	r2, [pc, #232]	@ (8001764 <ST7789_DrawChar+0x14c>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	72fb      	strb	r3, [r7, #11]
        for (int j = 0; j < FONT_WIDTH; j++) {
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	e060      	b.n	8001748 <ST7789_DrawChar+0x130>
            if ((line_data >> j) & 1) {
 8001686:	7afa      	ldrb	r2, [r7, #11]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	fa42 f303 	asr.w	r3, r2, r3
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d034      	beq.n	8001700 <ST7789_DrawChar+0xe8>
                // Em vez de desenhar um pixel, desenha um retângulo do tamanho do scale
                if (size == 1) {
 8001696:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10e      	bne.n	80016bc <ST7789_DrawChar+0xa4>
                    ST7789_DrawPixel(x + j, y + i, foreground);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	4413      	add	r3, r2
 80016a6:	b298      	uxth	r0, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	883a      	ldrh	r2, [r7, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff ff06 	bl	80014c6 <ST7789_DrawPixel>
 80016ba:	e042      	b.n	8001742 <ST7789_DrawChar+0x12a>
                } else {
                    ST7789_FillRectangle(x + (i * size), y + (j * size), size, size, foreground);
 80016bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	fb12 f303 	smulbb	r3, r2, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	4413      	add	r3, r2
 80016d0:	b298      	uxth	r0, r3
 80016d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	fb12 f303 	smulbb	r3, r2, r3
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	b299      	uxth	r1, r3
 80016e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016f2:	b29c      	uxth	r4, r3
 80016f4:	883b      	ldrh	r3, [r7, #0]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4623      	mov	r3, r4
 80016fa:	f7ff ff0d 	bl	8001518 <ST7789_FillRectangle>
 80016fe:	e020      	b.n	8001742 <ST7789_DrawChar+0x12a>
                }
            } else {
                 // Faz o mesmo para o fundo, para não deixar "buracos"
                 ST7789_FillRectangle(x + (i * size), y + (j * size), size, size, background);
 8001700:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001704:	b29a      	uxth	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	b29b      	uxth	r3, r3
 800170a:	fb12 f303 	smulbb	r3, r2, r3
 800170e:	b29a      	uxth	r2, r3
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	4413      	add	r3, r2
 8001714:	b298      	uxth	r0, r3
 8001716:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800171a:	b29a      	uxth	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	b29b      	uxth	r3, r3
 8001720:	fb12 f303 	smulbb	r3, r2, r3
 8001724:	b29a      	uxth	r2, r3
 8001726:	88bb      	ldrh	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	b299      	uxth	r1, r3
 800172c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001730:	b29a      	uxth	r2, r3
 8001732:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001736:	b29c      	uxth	r4, r3
 8001738:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4623      	mov	r3, r4
 800173e:	f7ff feeb 	bl	8001518 <ST7789_FillRectangle>
        for (int j = 0; j < FONT_WIDTH; j++) {
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	3301      	adds	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b06      	cmp	r3, #6
 800174c:	dd9b      	ble.n	8001686 <ST7789_DrawChar+0x6e>
    for (int i = 0; i < FONT_HEIGHT; i++) {
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2b09      	cmp	r3, #9
 8001758:	dd8c      	ble.n	8001674 <ST7789_DrawChar+0x5c>
 800175a:	e000      	b.n	800175e <ST7789_DrawChar+0x146>
        return; // Garante que o caractere ampliado ainda caiba na tela
 800175c:	bf00      	nop
            }
        }
    }
}
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	08007868 	.word	0x08007868

08001768 <ST7789_DrawText>:
 * @param y Coordenada Y do início do texto.
 * @param str Ponteiro para a string a ser desenhada.
 * @param foreground Cor do texto.
 * @param background Cor do fundo.
 */
void ST7789_DrawText(uint16_t x, uint16_t y, const char* str, uint16_t foreground, uint16_t background, uint8_t size) {
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b089      	sub	sp, #36	@ 0x24
 800176c:	af02      	add	r7, sp, #8
 800176e:	60ba      	str	r2, [r7, #8]
 8001770:	461a      	mov	r2, r3
 8001772:	4603      	mov	r3, r0
 8001774:	81fb      	strh	r3, [r7, #14]
 8001776:	460b      	mov	r3, r1
 8001778:	81bb      	strh	r3, [r7, #12]
 800177a:	4613      	mov	r3, r2
 800177c:	80fb      	strh	r3, [r7, #6]
    uint16_t current_x = x;
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	82fb      	strh	r3, [r7, #22]

    while (*str) {
 8001782:	e022      	b.n	80017ca <ST7789_DrawText+0x62>
        // A largura de cada caractere agora é multiplicada pelo tamanho
        if (current_x + (FONT_WIDTH * size) > ST7789_WIDTH) {
 8001784:	8af9      	ldrh	r1, [r7, #22]
 8001786:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	440b      	add	r3, r1
 8001792:	2bf0      	cmp	r3, #240	@ 0xf0
 8001794:	dc1e      	bgt.n	80017d4 <ST7789_DrawText+0x6c>
            break; 
        }

        ST7789_DrawChar(current_x, y, *str, foreground, background, size);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	88fc      	ldrh	r4, [r7, #6]
 800179c:	89b9      	ldrh	r1, [r7, #12]
 800179e:	8af8      	ldrh	r0, [r7, #22]
 80017a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4623      	mov	r3, r4
 80017ac:	f7ff ff34 	bl	8001618 <ST7789_DrawChar>
        current_x += (FONT_WIDTH * size); // Avança o cursor pela largura correta
 80017b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	00d2      	lsls	r2, r2, #3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b29a      	uxth	r2, r3
 80017be:	8afb      	ldrh	r3, [r7, #22]
 80017c0:	4413      	add	r3, r2
 80017c2:	82fb      	strh	r3, [r7, #22]
        str++;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
    while (*str) {
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1d8      	bne.n	8001784 <ST7789_DrawText+0x1c>
    }
}
 80017d2:	e000      	b.n	80017d6 <ST7789_DrawText+0x6e>
            break; 
 80017d4:	bf00      	nop
}
 80017d6:	bf00      	nop
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
	...

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_MspInit+0x94>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a21      	ldr	r2, [pc, #132]	@ (8001874 <HAL_MspInit+0x94>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <HAL_MspInit+0x94>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_MspInit+0x94>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	4a1a      	ldr	r2, [pc, #104]	@ (8001874 <HAL_MspInit+0x94>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	@ 0x40
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_MspInit+0x94>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	210f      	movs	r1, #15
 8001822:	f06f 0001 	mvn.w	r0, #1
 8001826:	f000 fb02 	bl	8001e2e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2105      	movs	r1, #5
 800182e:	2001      	movs	r0, #1
 8001830:	f000 fafd 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001834:	2001      	movs	r0, #1
 8001836:	f000 fb16 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2105      	movs	r1, #5
 800183e:	2004      	movs	r0, #4
 8001840:	f000 faf5 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001844:	2004      	movs	r0, #4
 8001846:	f000 fb0e 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2005      	movs	r0, #5
 8001850:	f000 faed 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001854:	2005      	movs	r0, #5
 8001856:	f000 fb06 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2105      	movs	r1, #5
 800185e:	2051      	movs	r0, #81	@ 0x51
 8001860:	f000 fae5 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001864:	2051      	movs	r0, #81	@ 0x51
 8001866:	f000 fafe 	bl	8001e66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <HAL_SPI_MspInit+0x94>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d133      	bne.n	8001902 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <HAL_SPI_MspInit+0x98>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001910 <HAL_SPI_MspInit+0x98>)
 80018a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_SPI_MspInit+0x98>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_SPI_MspInit+0x98>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <HAL_SPI_MspInit+0x98>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_SPI_MspInit+0x98>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018d2:	23e0      	movs	r3, #224	@ 0xe0
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018e2:	2305      	movs	r3, #5
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4809      	ldr	r0, [pc, #36]	@ (8001914 <HAL_SPI_MspInit+0x9c>)
 80018ee:	f000 fcfb 	bl	80022e8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2105      	movs	r1, #5
 80018f6:	2023      	movs	r0, #35	@ 0x23
 80018f8:	f000 fa99 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018fc:	2023      	movs	r0, #35	@ 0x23
 80018fe:	f000 fab2 	bl	8001e66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	@ 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40013000 	.word	0x40013000
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	@ 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <HAL_UART_MspInit+0x94>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d133      	bne.n	80019a2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <HAL_UART_MspInit+0x98>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a1b      	ldr	r2, [pc, #108]	@ (80019b0 <HAL_UART_MspInit+0x98>)
 8001944:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_UART_MspInit+0x98>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_UART_MspInit+0x98>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <HAL_UART_MspInit+0x98>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_UART_MspInit+0x98>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001972:	2303      	movs	r3, #3
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001982:	2308      	movs	r3, #8
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	4809      	ldr	r0, [pc, #36]	@ (80019b4 <HAL_UART_MspInit+0x9c>)
 800198e:	f000 fcab 	bl	80022e8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2105      	movs	r1, #5
 8001996:	2034      	movs	r0, #52	@ 0x34
 8001998:	f000 fa49 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800199c:	2034      	movs	r0, #52	@ 0x34
 800199e:	f000 fa62 	bl	8001e66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	@ 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40004c00 	.word	0x40004c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f2:	f000 f8fd 	bl	8001bf0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80019f6:	f004 fb45 	bl	8006084 <xTaskGetSchedulerState>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d001      	beq.n	8001a04 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a00:	f004 ff2a 	bl	8006858 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001a0c:	f000 fe3a 	bl	8002684 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001a18:	f000 fad2 	bl	8001fc0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <SPI1_IRQHandler+0x10>)
 8001a36:	f001 fc65 	bl	8003304 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000354 	.word	0x20000354

08001a44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <UART4_IRQHandler+0x10>)
 8001a4a:	f001 fea5 	bl	8003798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200003ac 	.word	0x200003ac

08001a58 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f005 f988 	bl	8006dac <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20020000 	.word	0x20020000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	20000418 	.word	0x20000418
 8001ad0:	200042c0 	.word	0x200042c0

08001ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <SystemInit+0x20>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ade:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <SystemInit+0x20>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001afc:	f7ff ffea 	bl	8001ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b00:	480c      	ldr	r0, [pc, #48]	@ (8001b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b02:	490d      	ldr	r1, [pc, #52]	@ (8001b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b04:	4a0d      	ldr	r2, [pc, #52]	@ (8001b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b18:	4c0a      	ldr	r4, [pc, #40]	@ (8001b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b26:	f005 f947 	bl	8006db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2a:	f7fe fe49 	bl	80007c0 <main>
  bx  lr    
 8001b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8001b3c:	08007c8c 	.word	0x08007c8c
  ldr r2, =_sbss
 8001b40:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8001b44:	200042bc 	.word	0x200042bc

08001b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b50:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <HAL_Init+0x40>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <HAL_Init+0x40>)
 8001b62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <HAL_Init+0x40>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b74:	2003      	movs	r0, #3
 8001b76:	f000 f94f 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7a:	200f      	movs	r0, #15
 8001b7c:	f000 f808 	bl	8001b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b80:	f7ff fe2e 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_InitTick+0x54>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_InitTick+0x58>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f967 	bl	8001e82 <HAL_SYSTICK_Config>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00e      	b.n	8001bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b0f      	cmp	r3, #15
 8001bc2:	d80a      	bhi.n	8001bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f000 f92f 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd0:	4a06      	ldr	r2, [pc, #24]	@ (8001bec <HAL_InitTick+0x5c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e000      	b.n	8001bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000064 	.word	0x20000064
 8001be8:	2000006c 	.word	0x2000006c
 8001bec:	20000068 	.word	0x20000068

08001bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	@ (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	2000006c 	.word	0x2000006c
 8001c14:	2000041c 	.word	0x2000041c

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000041c 	.word	0x2000041c

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d005      	beq.n	8001c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_Delay+0x44>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c56:	bf00      	nop
 8001c58:	f7ff ffde 	bl	8001c18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d8f7      	bhi.n	8001c58 <HAL_Delay+0x28>
  {
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000006c 	.word	0x2000006c

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	@ (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	@ (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff29 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff3e 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff8e 	bl	8001d6c <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5d 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff31 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa2 	bl	8001dd4 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff feb6 	bl	8001c18 <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d008      	beq.n	8001ecc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e052      	b.n	8001f72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0216 	bic.w	r2, r2, #22
 8001eda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d103      	bne.n	8001efc <HAL_DMA_Abort+0x62>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0208 	bic.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1c:	e013      	b.n	8001f46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1e:	f7ff fe7b 	bl	8001c18 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d90c      	bls.n	8001f46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e015      	b.n	8001f72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e4      	bne.n	8001f1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	223f      	movs	r2, #63	@ 0x3f
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d004      	beq.n	8001f98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e00c      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2205      	movs	r2, #5
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001fca:	4b49      	ldr	r3, [pc, #292]	@ (80020f0 <HAL_FLASH_IRQHandler+0x130>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8001fe0:	4b44      	ldr	r3, [pc, #272]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8001fe6:	4b43      	ldr	r3, [pc, #268]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	e00b      	b.n	8002008 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001ff0:	4b40      	ldr	r3, [pc, #256]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d103      	bne.n	8002002 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	e002      	b.n	8002008 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002002:	4b3c      	ldr	r3, [pc, #240]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002008:	f000 f88a 	bl	8002120 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f87d 	bl	800210c <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002012:	4b38      	ldr	r3, [pc, #224]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002018:	4b35      	ldr	r3, [pc, #212]	@ (80020f0 <HAL_FLASH_IRQHandler+0x130>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d04a      	beq.n	80020ba <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002024:	4b32      	ldr	r3, [pc, #200]	@ (80020f0 <HAL_FLASH_IRQHandler+0x130>)
 8002026:	2201      	movs	r2, #1
 8002028:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800202a:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d12d      	bne.n	8002090 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002034:	4b2f      	ldr	r3, [pc, #188]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	3b01      	subs	r3, #1
 800203a:	4a2e      	ldr	r2, [pc, #184]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 800203c:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d015      	beq.n	8002072 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8002046:	4b2b      	ldr	r3, [pc, #172]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f853 	bl	80020f8 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8002052:	4b28      	ldr	r3, [pc, #160]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	3301      	adds	r3, #1
 8002058:	4a26      	ldr	r2, [pc, #152]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 800205a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800205c:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002062:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8002064:	7a1b      	ldrb	r3, [r3, #8]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8ae 	bl	80021cc <FLASH_Erase_Sector>
 8002070:	e023      	b.n	80020ba <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	4a1e      	ldr	r2, [pc, #120]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800207e:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002084:	f000 f8ea 	bl	800225c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f835 	bl	80020f8 <HAL_FLASH_EndOfOperationCallback>
 800208e:	e014      	b.n	80020ba <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 800209a:	f000 f8df 	bl	800225c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f828 	bl	80020f8 <HAL_FLASH_EndOfOperationCallback>
 80020a8:	e004      	b.n	80020b4 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f822 	bl	80020f8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80020b4:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80020ba:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <HAL_FLASH_IRQHandler+0x134>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d111      	bne.n	80020e8 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80020c4:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <HAL_FLASH_IRQHandler+0x130>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	4a09      	ldr	r2, [pc, #36]	@ (80020f0 <HAL_FLASH_IRQHandler+0x130>)
 80020ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020ce:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80020d0:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <HAL_FLASH_IRQHandler+0x130>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4a06      	ldr	r2, [pc, #24]	@ (80020f0 <HAL_FLASH_IRQHandler+0x130>)
 80020d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020da:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <HAL_FLASH_IRQHandler+0x130>)
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	4a03      	ldr	r2, [pc, #12]	@ (80020f0 <HAL_FLASH_IRQHandler+0x130>)
 80020e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	6113      	str	r3, [r2, #16]
  }
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023c00 	.word	0x40023c00
 80020f4:	20000070 	.word	0x20000070

080020f8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002124:	4b27      	ldr	r3, [pc, #156]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	4a23      	ldr	r2, [pc, #140]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 800213a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800213c:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 800213e:	2210      	movs	r2, #16
 8002140:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f043 0308 	orr.w	r3, r3, #8
 8002156:	4a1c      	ldr	r2, [pc, #112]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 8002158:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 800215c:	2220      	movs	r2, #32
 800215e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002160:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800216c:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 8002176:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 800217a:	2240      	movs	r2, #64	@ 0x40
 800217c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800218a:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 8002194:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002196:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800219c:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	4a05      	ldr	r2, [pc, #20]	@ (80021c8 <FLASH_SetErrorCode+0xa8>)
 80021b2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <FLASH_SetErrorCode+0xa4>)
 80021b6:	2202      	movs	r2, #2
 80021b8:	60da      	str	r2, [r3, #12]
  }
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40023c00 	.word	0x40023c00
 80021c8:	20000070 	.word	0x20000070

080021cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	e010      	b.n	800220a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d103      	bne.n	80021f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80021ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e009      	b.n	800220a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d103      	bne.n	8002204 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80021fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e002      	b.n	800220a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002204:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002208:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 8002210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002214:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	490f      	ldr	r1, [pc, #60]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	4a0c      	ldr	r2, [pc, #48]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 8002228:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 800222c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4313      	orrs	r3, r2
 8002238:	4a07      	ldr	r2, [pc, #28]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <FLASH_Erase_Sector+0x8c>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800224a:	6113      	str	r3, [r2, #16]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40023c00 	.word	0x40023c00

0800225c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002260:	4b20      	ldr	r3, [pc, #128]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002268:	2b00      	cmp	r3, #0
 800226a:	d017      	beq.n	800229c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800226c:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 8002272:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002276:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002278:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 800227e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a16      	ldr	r2, [pc, #88]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 800228a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800228e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a13      	ldr	r2, [pc, #76]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 8002296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800229a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 80022ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022b2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80022b4:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 80022ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 80022c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <FLASH_FlushCaches+0x88>)
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022d6:	6013      	str	r3, [r2, #0]
  }
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023c00 	.word	0x40023c00

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e16b      	b.n	80025dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 815a 	bne.w	80025d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d005      	beq.n	800233a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002336:	2b02      	cmp	r3, #2
 8002338:	d130      	bne.n	800239c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 0201 	and.w	r2, r3, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d017      	beq.n	80023d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d123      	bne.n	800242c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80b4 	beq.w	80025d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b60      	ldr	r3, [pc, #384]	@ (80025f4 <HAL_GPIO_Init+0x30c>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	4a5f      	ldr	r2, [pc, #380]	@ (80025f4 <HAL_GPIO_Init+0x30c>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800247c:	6453      	str	r3, [r2, #68]	@ 0x44
 800247e:	4b5d      	ldr	r3, [pc, #372]	@ (80025f4 <HAL_GPIO_Init+0x30c>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248a:	4a5b      	ldr	r2, [pc, #364]	@ (80025f8 <HAL_GPIO_Init+0x310>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a52      	ldr	r2, [pc, #328]	@ (80025fc <HAL_GPIO_Init+0x314>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02b      	beq.n	800250e <HAL_GPIO_Init+0x226>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a51      	ldr	r2, [pc, #324]	@ (8002600 <HAL_GPIO_Init+0x318>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x222>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a50      	ldr	r2, [pc, #320]	@ (8002604 <HAL_GPIO_Init+0x31c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x21e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002608 <HAL_GPIO_Init+0x320>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x21a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4e      	ldr	r2, [pc, #312]	@ (800260c <HAL_GPIO_Init+0x324>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x216>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002610 <HAL_GPIO_Init+0x328>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x212>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002614 <HAL_GPIO_Init+0x32c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x20e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002618 <HAL_GPIO_Init+0x330>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x20a>
 80024ee:	2307      	movs	r3, #7
 80024f0:	e00e      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024f2:	2308      	movs	r3, #8
 80024f4:	e00c      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024f6:	2306      	movs	r3, #6
 80024f8:	e00a      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024fa:	2305      	movs	r3, #5
 80024fc:	e008      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024fe:	2304      	movs	r3, #4
 8002500:	e006      	b.n	8002510 <HAL_GPIO_Init+0x228>
 8002502:	2303      	movs	r3, #3
 8002504:	e004      	b.n	8002510 <HAL_GPIO_Init+0x228>
 8002506:	2302      	movs	r3, #2
 8002508:	e002      	b.n	8002510 <HAL_GPIO_Init+0x228>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_GPIO_Init+0x228>
 800250e:	2300      	movs	r3, #0
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	f002 0203 	and.w	r2, r2, #3
 8002516:	0092      	lsls	r2, r2, #2
 8002518:	4093      	lsls	r3, r2
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002520:	4935      	ldr	r1, [pc, #212]	@ (80025f8 <HAL_GPIO_Init+0x310>)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	3302      	adds	r3, #2
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252e:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <HAL_GPIO_Init+0x334>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002552:	4a32      	ldr	r2, [pc, #200]	@ (800261c <HAL_GPIO_Init+0x334>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002558:	4b30      	ldr	r3, [pc, #192]	@ (800261c <HAL_GPIO_Init+0x334>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800257c:	4a27      	ldr	r2, [pc, #156]	@ (800261c <HAL_GPIO_Init+0x334>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002582:	4b26      	ldr	r3, [pc, #152]	@ (800261c <HAL_GPIO_Init+0x334>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a6:	4a1d      	ldr	r2, [pc, #116]	@ (800261c <HAL_GPIO_Init+0x334>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_GPIO_Init+0x334>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d0:	4a12      	ldr	r2, [pc, #72]	@ (800261c <HAL_GPIO_Init+0x334>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3301      	adds	r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b0f      	cmp	r3, #15
 80025e0:	f67f ae90 	bls.w	8002304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3724      	adds	r7, #36	@ 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400
 8002604:	40020800 	.word	0x40020800
 8002608:	40020c00 	.word	0x40020c00
 800260c:	40021000 	.word	0x40021000
 8002610:	40021400 	.word	0x40021400
 8002614:	40021800 	.word	0x40021800
 8002618:	40021c00 	.word	0x40021c00
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e001      	b.n	8002642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002694:	f000 f808 	bl	80026a8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002698:	4b02      	ldr	r3, [pc, #8]	@ (80026a4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800269a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800269e:	615a      	str	r2, [r3, #20]
  }
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40013c00 	.word	0x40013c00

080026a8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e267      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d075      	beq.n	80027c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026d6:	4b88      	ldr	r3, [pc, #544]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d00c      	beq.n	80026fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4b85      	ldr	r3, [pc, #532]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d112      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b82      	ldr	r3, [pc, #520]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026fa:	d10b      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	4b7e      	ldr	r3, [pc, #504]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x108>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d157      	bne.n	80027c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e242      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x74>
 800271e:	4b76      	ldr	r3, [pc, #472]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a75      	ldr	r2, [pc, #468]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e01d      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x98>
 8002736:	4b70      	ldr	r3, [pc, #448]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6f      	ldr	r2, [pc, #444]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b6d      	ldr	r3, [pc, #436]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6c      	ldr	r2, [pc, #432]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 8002750:	4b69      	ldr	r3, [pc, #420]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a68      	ldr	r2, [pc, #416]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a65      	ldr	r2, [pc, #404]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff fa52 	bl	8001c18 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff fa4e 	bl	8001c18 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	@ 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e207      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b5b      	ldr	r3, [pc, #364]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xc0>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff fa3e 	bl	8001c18 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a0:	f7ff fa3a 	bl	8001c18 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	@ 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1f3      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b51      	ldr	r3, [pc, #324]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0xe8>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d063      	beq.n	8002896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027ce:	4b4a      	ldr	r3, [pc, #296]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b47      	ldr	r3, [pc, #284]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d11c      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b44      	ldr	r3, [pc, #272]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d116      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	4b41      	ldr	r3, [pc, #260]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e1c7      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b3b      	ldr	r3, [pc, #236]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4937      	ldr	r1, [pc, #220]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	e03a      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002828:	4b34      	ldr	r3, [pc, #208]	@ (80028fc <HAL_RCC_OscConfig+0x244>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7ff f9f3 	bl	8001c18 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7ff f9ef 	bl	8001c18 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1a8      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b28      	ldr	r3, [pc, #160]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4925      	ldr	r1, [pc, #148]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
 8002868:	e015      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <HAL_RCC_OscConfig+0x244>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff f9d2 	bl	8001c18 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002878:	f7ff f9ce 	bl	8001c18 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e187      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d036      	beq.n	8002910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <HAL_RCC_OscConfig+0x248>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff f9b2 	bl	8001c18 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7ff f9ae 	bl	8001c18 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e167      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_OscConfig+0x240>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x200>
 80028d6:	e01b      	b.n	8002910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCC_OscConfig+0x248>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7ff f99b 	bl	8001c18 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	e00e      	b.n	8002904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e6:	f7ff f997 	bl	8001c18 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d907      	bls.n	8002904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e150      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	42470000 	.word	0x42470000
 8002900:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002904:	4b88      	ldr	r3, [pc, #544]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ea      	bne.n	80028e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8097 	beq.w	8002a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4b81      	ldr	r3, [pc, #516]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	4b7d      	ldr	r3, [pc, #500]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a7c      	ldr	r2, [pc, #496]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b77      	ldr	r3, [pc, #476]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295a:	4b74      	ldr	r3, [pc, #464]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a73      	ldr	r2, [pc, #460]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002966:	f7ff f957 	bl	8001c18 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7ff f953 	bl	8001c18 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e10c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b6a      	ldr	r3, [pc, #424]	@ (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2ea>
 8002994:	4b64      	ldr	r3, [pc, #400]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	4a63      	ldr	r2, [pc, #396]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a0:	e01c      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x30c>
 80029aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029c4:	4b58      	ldr	r3, [pc, #352]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	4a57      	ldr	r2, [pc, #348]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d0:	4b55      	ldr	r3, [pc, #340]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	4a54      	ldr	r2, [pc, #336]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 0304 	bic.w	r3, r3, #4
 80029da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d015      	beq.n	8002a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7ff f918 	bl	8001c18 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7ff f914 	bl	8001c18 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0cb      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ee      	beq.n	80029ec <HAL_RCC_OscConfig+0x334>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7ff f902 	bl	8001c18 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7ff f8fe 	bl	8001c18 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0b5      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ee      	bne.n	8002a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	4a38      	ldr	r2, [pc, #224]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80a1 	beq.w	8002b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a56:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d05c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d141      	bne.n	8002aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b31      	ldr	r3, [pc, #196]	@ (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff f8d2 	bl	8001c18 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7ff f8ce 	bl	8001c18 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e087      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69da      	ldr	r2, [r3, #28]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	019b      	lsls	r3, r3, #6
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	491b      	ldr	r1, [pc, #108]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7ff f8a7 	bl	8001c18 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ace:	f7ff f8a3 	bl	8001c18 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e05c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae0:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x416>
 8002aec:	e054      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7ff f890 	bl	8001c18 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7ff f88c 	bl	8001c18 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e045      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x444>
 8002b1a:	e03d      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e038      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d028      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d121      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d11a      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b64:	4013      	ands	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d111      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0cc      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b68      	ldr	r3, [pc, #416]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d90c      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b65      	ldr	r3, [pc, #404]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a58      	ldr	r2, [pc, #352]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a52      	ldr	r2, [pc, #328]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d044      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d119      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	4b3f      	ldr	r3, [pc, #252]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e067      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b37      	ldr	r3, [pc, #220]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4934      	ldr	r1, [pc, #208]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c98:	f7fe ffbe 	bl	8001c18 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7fe ffba 	bl	8001c18 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e04f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b25      	ldr	r3, [pc, #148]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d20c      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490a      	ldr	r1, [pc, #40]	@ (8002d68 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ff1e 	bl	8001b90 <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08007c30 	.word	0x08007c30
 8002d6c:	20000064 	.word	0x20000064
 8002d70:	20000068 	.word	0x20000068

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d78:	b090      	sub	sp, #64	@ 0x40
 8002d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	f200 80a1 	bhi.w	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x3a>
 8002da6:	e09b      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dac:	e09b      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002db2:	e098      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002de0:	fb03 f201 	mul.w	r2, r3, r1
 8002de4:	2300      	movs	r3, #0
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	4a43      	ldr	r2, [pc, #268]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002dee:	fba0 1202 	umull	r1, r2, r0, r2
 8002df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002df4:	460a      	mov	r2, r1
 8002df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dfa:	4413      	add	r3, r2
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e00:	2200      	movs	r2, #0
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	61fa      	str	r2, [r7, #28]
 8002e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e0e:	f7fd fa2f 	bl	8000270 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4613      	mov	r3, r2
 8002e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e1a:	e053      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1c:	4b35      	ldr	r3, [pc, #212]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	2200      	movs	r2, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	617a      	str	r2, [r7, #20]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e2e:	f04f 0b00 	mov.w	fp, #0
 8002e32:	4652      	mov	r2, sl
 8002e34:	465b      	mov	r3, fp
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	0159      	lsls	r1, r3, #5
 8002e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e44:	0150      	lsls	r0, r2, #5
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e66:	ebb2 0408 	subs.w	r4, r2, r8
 8002e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	00eb      	lsls	r3, r5, #3
 8002e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7c:	00e2      	lsls	r2, r4, #3
 8002e7e:	4614      	mov	r4, r2
 8002e80:	461d      	mov	r5, r3
 8002e82:	eb14 030a 	adds.w	r3, r4, sl
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	eb45 030b 	adc.w	r3, r5, fp
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	028b      	lsls	r3, r1, #10
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	028a      	lsls	r2, r1, #10
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb8:	f7fd f9da 	bl	8000270 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3740      	adds	r7, #64	@ 0x40
 8002eec:	46bd      	mov	sp, r7
 8002eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	017d7840 	.word	0x017d7840

08002f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000064 	.word	0x20000064

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	f7ff fff0 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0a9b      	lsrs	r3, r3, #10
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	@ (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08007c40 	.word	0x08007c40

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f44:	f7ff ffdc 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0b5b      	lsrs	r3, r3, #13
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	08007c40 	.word	0x08007c40

08002f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e07b      	b.n	8003072 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d108      	bne.n	8002f94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f8a:	d009      	beq.n	8002fa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
 8002f92:	e005      	b.n	8002fa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fe fc5c 	bl	8001878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003024:	ea42 0103 	orr.w	r1, r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	f003 0104 	and.w	r1, r3, #4
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	f003 0210 	and.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003060:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b088      	sub	sp, #32
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800308a:	f7fe fdc5 	bl	8001c18 <HAL_GetTick>
 800308e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
 80030a2:	e12a      	b.n	80032fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_SPI_Transmit+0x36>
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e122      	b.n	80032fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_SPI_Transmit+0x48>
 80030be:	2302      	movs	r3, #2
 80030c0:	e11b      	b.n	80032fa <HAL_SPI_Transmit+0x280>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2203      	movs	r2, #3
 80030ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	88fa      	ldrh	r2, [r7, #6]
 80030e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	88fa      	ldrh	r2, [r7, #6]
 80030e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003110:	d10f      	bne.n	8003132 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003120:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003130:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d007      	beq.n	8003150 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800314e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003158:	d152      	bne.n	8003200 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_SPI_Transmit+0xee>
 8003162:	8b7b      	ldrh	r3, [r7, #26]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d145      	bne.n	80031f4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316c:	881a      	ldrh	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003178:	1c9a      	adds	r2, r3, #2
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800318c:	e032      	b.n	80031f4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d112      	bne.n	80031c2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	1c9a      	adds	r2, r3, #2
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031c0:	e018      	b.n	80031f4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031c2:	f7fe fd29 	bl	8001c18 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d803      	bhi.n	80031da <HAL_SPI_Transmit+0x160>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d102      	bne.n	80031e0 <HAL_SPI_Transmit+0x166>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e082      	b.n	80032fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1c7      	bne.n	800318e <HAL_SPI_Transmit+0x114>
 80031fe:	e053      	b.n	80032a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_Transmit+0x194>
 8003208:	8b7b      	ldrh	r3, [r7, #26]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d147      	bne.n	800329e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003234:	e033      	b.n	800329e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d113      	bne.n	800326c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	86da      	strh	r2, [r3, #54]	@ 0x36
 800326a:	e018      	b.n	800329e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800326c:	f7fe fcd4 	bl	8001c18 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d803      	bhi.n	8003284 <HAL_SPI_Transmit+0x20a>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d102      	bne.n	800328a <HAL_SPI_Transmit+0x210>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e02d      	b.n	80032fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1c6      	bne.n	8003236 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	6839      	ldr	r1, [r7, #0]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f9cf 	bl	8003650 <SPI_EndRxTxTransaction>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
  }
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10f      	bne.n	8003348 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
    return;
 8003346:	e0d7      	b.n	80034f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_SPI_IRQHandler+0x66>
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	09db      	lsrs	r3, r3, #7
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
    return;
 8003368:	e0c6      	b.n	80034f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10c      	bne.n	8003390 <HAL_SPI_IRQHandler+0x8c>
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80b4 	beq.w	80034f8 <HAL_SPI_IRQHandler+0x1f4>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80ad 	beq.w	80034f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d023      	beq.n	80033f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d011      	beq.n	80033da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	f043 0204 	orr.w	r2, r3, #4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	e00b      	b.n	80033f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]
        return;
 80033f0:	e082      	b.n	80034f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d014      	beq.n	8003428 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003438:	f043 0208 	orr.w	r2, r3, #8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003452:	2b00      	cmp	r3, #0
 8003454:	d04f      	beq.n	80034f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003464:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <HAL_SPI_IRQHandler+0x17e>
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d034      	beq.n	80034ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0203 	bic.w	r2, r2, #3
 8003490:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349e:	4a18      	ldr	r2, [pc, #96]	@ (8003500 <HAL_SPI_IRQHandler+0x1fc>)
 80034a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe fd67 	bl	8001f7a <HAL_DMA_Abort_IT>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003500 <HAL_SPI_IRQHandler+0x1fc>)
 80034cc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fd51 	bl	8001f7a <HAL_DMA_Abort_IT>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80034ea:	e003      	b.n	80034f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f809 	bl	8003504 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80034f2:	e000      	b.n	80034f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80034f4:	bf00      	nop
    return;
 80034f6:	bf00      	nop
  }
}
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	08003519 	.word	0x08003519

08003504 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ffe6 	bl	8003504 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003550:	f7fe fb62 	bl	8001c18 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4413      	add	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003560:	f7fe fb5a 	bl	8001c18 <HAL_GetTick>
 8003564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003566:	4b39      	ldr	r3, [pc, #228]	@ (800364c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	015b      	lsls	r3, r3, #5
 800356c:	0d1b      	lsrs	r3, r3, #20
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003576:	e055      	b.n	8003624 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d051      	beq.n	8003624 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003580:	f7fe fb4a 	bl	8001c18 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	429a      	cmp	r2, r3
 800358e:	d902      	bls.n	8003596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d13d      	bne.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ae:	d111      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b8:	d004      	beq.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c2:	d107      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035dc:	d10f      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e018      	b.n	8003644 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	e002      	b.n	8003624 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3b01      	subs	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	429a      	cmp	r2, r3
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	429a      	cmp	r2, r3
 8003640:	d19a      	bne.n	8003578 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000064 	.word	0x20000064

08003650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2201      	movs	r2, #1
 8003664:	2102      	movs	r1, #2
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff ff6a 	bl	8003540 <SPI_WaitFlagStateUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e032      	b.n	80036e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003682:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <SPI_EndRxTxTransaction+0xa0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <SPI_EndRxTxTransaction+0xa4>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	0d5b      	lsrs	r3, r3, #21
 800368e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036a0:	d112      	bne.n	80036c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2180      	movs	r1, #128	@ 0x80
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff ff47 	bl	8003540 <SPI_WaitFlagStateUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d016      	beq.n	80036e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e00f      	b.n	80036e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b80      	cmp	r3, #128	@ 0x80
 80036e0:	d0f2      	beq.n	80036c8 <SPI_EndRxTxTransaction+0x78>
 80036e2:	e000      	b.n	80036e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80036e4:	bf00      	nop
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000064 	.word	0x20000064
 80036f4:	165e9f81 	.word	0x165e9f81

080036f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e042      	b.n	8003790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe f8fa 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	@ 0x24
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800373a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fc99 	bl	8004074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b0ba      	sub	sp, #232	@ 0xe8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_UART_IRQHandler+0x66>
 80037ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fb7e 	bl	8003ef8 <UART_Receive_IT>
      return;
 80037fc:	e273      	b.n	8003ce6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80de 	beq.w	80039c4 <HAL_UART_IRQHandler+0x22c>
 8003808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003818:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80d1 	beq.w	80039c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_UART_IRQHandler+0xae>
 800382e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_UART_IRQHandler+0xd2>
 8003852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f043 0202 	orr.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_UART_IRQHandler+0xf6>
 8003876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003886:	f043 0204 	orr.w	r2, r3, #4
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d011      	beq.n	80038be <HAL_UART_IRQHandler+0x126>
 800389a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	f043 0208 	orr.w	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 820a 	beq.w	8003cdc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_UART_IRQHandler+0x14e>
 80038d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fb09 	bl	8003ef8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f0:	2b40      	cmp	r3, #64	@ 0x40
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <HAL_UART_IRQHandler+0x17a>
 800390a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d04f      	beq.n	80039b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fa14 	bl	8003d40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003922:	2b40      	cmp	r3, #64	@ 0x40
 8003924:	d141      	bne.n	80039aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800393c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3314      	adds	r3, #20
 800394e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003952:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800395e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800396a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1d9      	bne.n	8003926 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d013      	beq.n	80039a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397e:	4a8a      	ldr	r2, [pc, #552]	@ (8003ba8 <HAL_UART_IRQHandler+0x410>)
 8003980:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe faf7 	bl	8001f7a <HAL_DMA_Abort_IT>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d016      	beq.n	80039c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800399c:	4610      	mov	r0, r2
 800399e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e00e      	b.n	80039c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9b6 	bl	8003d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e00a      	b.n	80039c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9b2 	bl	8003d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	e006      	b.n	80039c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9ae 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039be:	e18d      	b.n	8003cdc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	bf00      	nop
    return;
 80039c2:	e18b      	b.n	8003cdc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f040 8167 	bne.w	8003c9c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8160 	beq.w	8003c9c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8159 	beq.w	8003c9c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0a:	2b40      	cmp	r3, #64	@ 0x40
 8003a0c:	f040 80ce 	bne.w	8003bac <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80a9 	beq.w	8003b78 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	f080 80a2 	bcs.w	8003b78 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a46:	f000 8088 	beq.w	8003b5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1d9      	bne.n	8003a4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003aa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003aba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e1      	bne.n	8003a96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3314      	adds	r3, #20
 8003af2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003af6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003af8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003afc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e3      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b2a:	f023 0310 	bic.w	r3, r3, #16
 8003b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b3c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b3e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e3      	bne.n	8003b18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe f9a0 	bl	8001e9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8d9 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003b76:	e0b3      	b.n	8003ce0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f040 80ad 	bne.w	8003ce0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b90:	f040 80a6 	bne.w	8003ce0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f8c1 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
      return;
 8003ba6:	e09b      	b.n	8003ce0 <HAL_UART_IRQHandler+0x548>
 8003ba8:	08003e07 	.word	0x08003e07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 808e 	beq.w	8003ce4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8089 	beq.w	8003ce4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003be8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003bf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e3      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	623b      	str	r3, [r7, #32]
   return(result);
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3314      	adds	r3, #20
 8003c2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e3      	bne.n	8003c0a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0310 	bic.w	r3, r3, #16
 8003c66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c74:	61fa      	str	r2, [r7, #28]
 8003c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	617b      	str	r3, [r7, #20]
   return(result);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e3      	bne.n	8003c50 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f847 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c9a:	e023      	b.n	8003ce4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_UART_IRQHandler+0x524>
 8003ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8b7 	bl	8003e28 <UART_Transmit_IT>
    return;
 8003cba:	e014      	b.n	8003ce6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x54e>
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f8f7 	bl	8003ec8 <UART_EndTransmit_IT>
    return;
 8003cda:	e004      	b.n	8003ce6 <HAL_UART_IRQHandler+0x54e>
    return;
 8003cdc:	bf00      	nop
 8003cde:	e002      	b.n	8003ce6 <HAL_UART_IRQHandler+0x54e>
      return;
 8003ce0:	bf00      	nop
 8003ce2:	e000      	b.n	8003ce6 <HAL_UART_IRQHandler+0x54e>
      return;
 8003ce4:	bf00      	nop
  }
}
 8003ce6:	37e8      	adds	r7, #232	@ 0xe8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b095      	sub	sp, #84	@ 0x54
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d68:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e5      	bne.n	8003d48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e5      	bne.n	8003d7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d119      	bne.n	8003dec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f023 0310 	bic.w	r3, r3, #16
 8003dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dd8:	61ba      	str	r2, [r7, #24]
 8003dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	6979      	ldr	r1, [r7, #20]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	613b      	str	r3, [r7, #16]
   return(result);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e5      	bne.n	8003db8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dfa:	bf00      	nop
 8003dfc:	3754      	adds	r7, #84	@ 0x54
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff ff7a 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b21      	cmp	r3, #33	@ 0x21
 8003e3a:	d13e      	bne.n	8003eba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e44:	d114      	bne.n	8003e70 <UART_Transmit_IT+0x48>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d110      	bne.n	8003e70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]
 8003e6e:	e008      	b.n	8003e82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	1c59      	adds	r1, r3, #1
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6211      	str	r1, [r2, #32]
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10f      	bne.n	8003eb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ea4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ede:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff feff 	bl	8003cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08c      	sub	sp, #48	@ 0x30
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b22      	cmp	r3, #34	@ 0x22
 8003f12:	f040 80aa 	bne.w	800406a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	d115      	bne.n	8003f4c <UART_Receive_IT+0x54>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d111      	bne.n	8003f4c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	1c9a      	adds	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f4a:	e024      	b.n	8003f96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f5a:	d007      	beq.n	8003f6c <UART_Receive_IT+0x74>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <UART_Receive_IT+0x82>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e008      	b.n	8003f8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d15d      	bne.n	8004066 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0220 	bic.w	r2, r2, #32
 8003fb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d135      	bne.n	800405c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	613b      	str	r3, [r7, #16]
   return(result);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f023 0310 	bic.w	r3, r3, #16
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004016:	623a      	str	r2, [r7, #32]
 8004018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	69f9      	ldr	r1, [r7, #28]
 800401c:	6a3a      	ldr	r2, [r7, #32]
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	61bb      	str	r3, [r7, #24]
   return(result);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e5      	bne.n	8003ff6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b10      	cmp	r3, #16
 8004036:	d10a      	bne.n	800404e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004052:	4619      	mov	r1, r3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fe67 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
 800405a:	e002      	b.n	8004062 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fe4f 	bl	8003d00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e002      	b.n	800406c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3730      	adds	r7, #48	@ 0x30
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b0c0      	sub	sp, #256	@ 0x100
 800407a:	af00      	add	r7, sp, #0
 800407c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	68d9      	ldr	r1, [r3, #12]
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	ea40 0301 	orr.w	r3, r0, r1
 800409c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040cc:	f021 010c 	bic.w	r1, r1, #12
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040da:	430b      	orrs	r3, r1
 80040dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ee:	6999      	ldr	r1, [r3, #24]
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	ea40 0301 	orr.w	r3, r0, r1
 80040fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b8f      	ldr	r3, [pc, #572]	@ (8004340 <UART_SetConfig+0x2cc>)
 8004104:	429a      	cmp	r2, r3
 8004106:	d005      	beq.n	8004114 <UART_SetConfig+0xa0>
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b8d      	ldr	r3, [pc, #564]	@ (8004344 <UART_SetConfig+0x2d0>)
 8004110:	429a      	cmp	r2, r3
 8004112:	d104      	bne.n	800411e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004114:	f7fe ff14 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 8004118:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800411c:	e003      	b.n	8004126 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800411e:	f7fe fefb 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8004122:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004130:	f040 810c 	bne.w	800434c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800413e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004142:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004146:	4622      	mov	r2, r4
 8004148:	462b      	mov	r3, r5
 800414a:	1891      	adds	r1, r2, r2
 800414c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800414e:	415b      	adcs	r3, r3
 8004150:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004152:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004156:	4621      	mov	r1, r4
 8004158:	eb12 0801 	adds.w	r8, r2, r1
 800415c:	4629      	mov	r1, r5
 800415e:	eb43 0901 	adc.w	r9, r3, r1
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800416e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004176:	4690      	mov	r8, r2
 8004178:	4699      	mov	r9, r3
 800417a:	4623      	mov	r3, r4
 800417c:	eb18 0303 	adds.w	r3, r8, r3
 8004180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004184:	462b      	mov	r3, r5
 8004186:	eb49 0303 	adc.w	r3, r9, r3
 800418a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800419a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800419e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041a2:	460b      	mov	r3, r1
 80041a4:	18db      	adds	r3, r3, r3
 80041a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041a8:	4613      	mov	r3, r2
 80041aa:	eb42 0303 	adc.w	r3, r2, r3
 80041ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80041b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041b8:	f7fc f85a 	bl	8000270 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4b61      	ldr	r3, [pc, #388]	@ (8004348 <UART_SetConfig+0x2d4>)
 80041c2:	fba3 2302 	umull	r2, r3, r3, r2
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	011c      	lsls	r4, r3, #4
 80041ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	1891      	adds	r1, r2, r2
 80041e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041e4:	415b      	adcs	r3, r3
 80041e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041ec:	4641      	mov	r1, r8
 80041ee:	eb12 0a01 	adds.w	sl, r2, r1
 80041f2:	4649      	mov	r1, r9
 80041f4:	eb43 0b01 	adc.w	fp, r3, r1
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004204:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004208:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800420c:	4692      	mov	sl, r2
 800420e:	469b      	mov	fp, r3
 8004210:	4643      	mov	r3, r8
 8004212:	eb1a 0303 	adds.w	r3, sl, r3
 8004216:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800421a:	464b      	mov	r3, r9
 800421c:	eb4b 0303 	adc.w	r3, fp, r3
 8004220:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004230:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004234:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004238:	460b      	mov	r3, r1
 800423a:	18db      	adds	r3, r3, r3
 800423c:	643b      	str	r3, [r7, #64]	@ 0x40
 800423e:	4613      	mov	r3, r2
 8004240:	eb42 0303 	adc.w	r3, r2, r3
 8004244:	647b      	str	r3, [r7, #68]	@ 0x44
 8004246:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800424a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800424e:	f7fc f80f 	bl	8000270 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4611      	mov	r1, r2
 8004258:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <UART_SetConfig+0x2d4>)
 800425a:	fba3 2301 	umull	r2, r3, r3, r1
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2264      	movs	r2, #100	@ 0x64
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	1acb      	subs	r3, r1, r3
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800426e:	4b36      	ldr	r3, [pc, #216]	@ (8004348 <UART_SetConfig+0x2d4>)
 8004270:	fba3 2302 	umull	r2, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800427c:	441c      	add	r4, r3
 800427e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004288:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800428c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	1891      	adds	r1, r2, r2
 8004296:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004298:	415b      	adcs	r3, r3
 800429a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800429c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042a0:	4641      	mov	r1, r8
 80042a2:	1851      	adds	r1, r2, r1
 80042a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80042a6:	4649      	mov	r1, r9
 80042a8:	414b      	adcs	r3, r1
 80042aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042b8:	4659      	mov	r1, fp
 80042ba:	00cb      	lsls	r3, r1, #3
 80042bc:	4651      	mov	r1, sl
 80042be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042c2:	4651      	mov	r1, sl
 80042c4:	00ca      	lsls	r2, r1, #3
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	4642      	mov	r2, r8
 80042ce:	189b      	adds	r3, r3, r2
 80042d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042d4:	464b      	mov	r3, r9
 80042d6:	460a      	mov	r2, r1
 80042d8:	eb42 0303 	adc.w	r3, r2, r3
 80042dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042f4:	460b      	mov	r3, r1
 80042f6:	18db      	adds	r3, r3, r3
 80042f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042fa:	4613      	mov	r3, r2
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004302:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004306:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800430a:	f7fb ffb1 	bl	8000270 <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <UART_SetConfig+0x2d4>)
 8004314:	fba3 1302 	umull	r1, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2164      	movs	r1, #100	@ 0x64
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	3332      	adds	r3, #50	@ 0x32
 8004326:	4a08      	ldr	r2, [pc, #32]	@ (8004348 <UART_SetConfig+0x2d4>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f003 0207 	and.w	r2, r3, #7
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4422      	add	r2, r4
 800433a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800433c:	e106      	b.n	800454c <UART_SetConfig+0x4d8>
 800433e:	bf00      	nop
 8004340:	40011000 	.word	0x40011000
 8004344:	40011400 	.word	0x40011400
 8004348:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800434c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004350:	2200      	movs	r2, #0
 8004352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004356:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800435a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800435e:	4642      	mov	r2, r8
 8004360:	464b      	mov	r3, r9
 8004362:	1891      	adds	r1, r2, r2
 8004364:	6239      	str	r1, [r7, #32]
 8004366:	415b      	adcs	r3, r3
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
 800436a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800436e:	4641      	mov	r1, r8
 8004370:	1854      	adds	r4, r2, r1
 8004372:	4649      	mov	r1, r9
 8004374:	eb43 0501 	adc.w	r5, r3, r1
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	00eb      	lsls	r3, r5, #3
 8004382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004386:	00e2      	lsls	r2, r4, #3
 8004388:	4614      	mov	r4, r2
 800438a:	461d      	mov	r5, r3
 800438c:	4643      	mov	r3, r8
 800438e:	18e3      	adds	r3, r4, r3
 8004390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004394:	464b      	mov	r3, r9
 8004396:	eb45 0303 	adc.w	r3, r5, r3
 800439a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043ba:	4629      	mov	r1, r5
 80043bc:	008b      	lsls	r3, r1, #2
 80043be:	4621      	mov	r1, r4
 80043c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043c4:	4621      	mov	r1, r4
 80043c6:	008a      	lsls	r2, r1, #2
 80043c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043cc:	f7fb ff50 	bl	8000270 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4b60      	ldr	r3, [pc, #384]	@ (8004558 <UART_SetConfig+0x4e4>)
 80043d6:	fba3 2302 	umull	r2, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	011c      	lsls	r4, r3, #4
 80043de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	1891      	adds	r1, r2, r2
 80043f6:	61b9      	str	r1, [r7, #24]
 80043f8:	415b      	adcs	r3, r3
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004400:	4641      	mov	r1, r8
 8004402:	1851      	adds	r1, r2, r1
 8004404:	6139      	str	r1, [r7, #16]
 8004406:	4649      	mov	r1, r9
 8004408:	414b      	adcs	r3, r1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004418:	4659      	mov	r1, fp
 800441a:	00cb      	lsls	r3, r1, #3
 800441c:	4651      	mov	r1, sl
 800441e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004422:	4651      	mov	r1, sl
 8004424:	00ca      	lsls	r2, r1, #3
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	4603      	mov	r3, r0
 800442c:	4642      	mov	r2, r8
 800442e:	189b      	adds	r3, r3, r2
 8004430:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004434:	464b      	mov	r3, r9
 8004436:	460a      	mov	r2, r1
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	67bb      	str	r3, [r7, #120]	@ 0x78
 800444a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004458:	4649      	mov	r1, r9
 800445a:	008b      	lsls	r3, r1, #2
 800445c:	4641      	mov	r1, r8
 800445e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004462:	4641      	mov	r1, r8
 8004464:	008a      	lsls	r2, r1, #2
 8004466:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800446a:	f7fb ff01 	bl	8000270 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4611      	mov	r1, r2
 8004474:	4b38      	ldr	r3, [pc, #224]	@ (8004558 <UART_SetConfig+0x4e4>)
 8004476:	fba3 2301 	umull	r2, r3, r3, r1
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2264      	movs	r2, #100	@ 0x64
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	1acb      	subs	r3, r1, r3
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	3332      	adds	r3, #50	@ 0x32
 8004488:	4a33      	ldr	r2, [pc, #204]	@ (8004558 <UART_SetConfig+0x4e4>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004494:	441c      	add	r4, r3
 8004496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449a:	2200      	movs	r2, #0
 800449c:	673b      	str	r3, [r7, #112]	@ 0x70
 800449e:	677a      	str	r2, [r7, #116]	@ 0x74
 80044a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	415b      	adcs	r3, r3
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044b4:	4641      	mov	r1, r8
 80044b6:	1851      	adds	r1, r2, r1
 80044b8:	6039      	str	r1, [r7, #0]
 80044ba:	4649      	mov	r1, r9
 80044bc:	414b      	adcs	r3, r1
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044cc:	4659      	mov	r1, fp
 80044ce:	00cb      	lsls	r3, r1, #3
 80044d0:	4651      	mov	r1, sl
 80044d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d6:	4651      	mov	r1, sl
 80044d8:	00ca      	lsls	r2, r1, #3
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	4642      	mov	r2, r8
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e6:	464b      	mov	r3, r9
 80044e8:	460a      	mov	r2, r1
 80044ea:	eb42 0303 	adc.w	r3, r2, r3
 80044ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80044fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004508:	4649      	mov	r1, r9
 800450a:	008b      	lsls	r3, r1, #2
 800450c:	4641      	mov	r1, r8
 800450e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004512:	4641      	mov	r1, r8
 8004514:	008a      	lsls	r2, r1, #2
 8004516:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800451a:	f7fb fea9 	bl	8000270 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <UART_SetConfig+0x4e4>)
 8004524:	fba3 1302 	umull	r1, r3, r3, r2
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	2164      	movs	r1, #100	@ 0x64
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	3332      	adds	r3, #50	@ 0x32
 8004536:	4a08      	ldr	r2, [pc, #32]	@ (8004558 <UART_SetConfig+0x4e4>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	f003 020f 	and.w	r2, r3, #15
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4422      	add	r2, r4
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004552:	46bd      	mov	sp, r7
 8004554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004558:	51eb851f 	.word	0x51eb851f

0800455c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800456a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800456e:	2b84      	cmp	r3, #132	@ 0x84
 8004570:	d005      	beq.n	800457e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	3303      	adds	r3, #3
 800457c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004592:	f3ef 8305 	mrs	r3, IPSR
 8004596:	607b      	str	r3, [r7, #4]
  return(result);
 8004598:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045b4:	f001 f95c 	bl	8005870 <vTaskStartScheduler>
  
  return osOK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	bd80      	pop	{r7, pc}

080045be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c0:	b089      	sub	sp, #36	@ 0x24
 80045c2:	af04      	add	r7, sp, #16
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <osThreadCreate+0x54>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01c      	beq.n	8004612 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685c      	ldr	r4, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691e      	ldr	r6, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ffb6 	bl	800455c <makeFreeRtosPriority>
 80045f0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045fa:	9202      	str	r2, [sp, #8]
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	9100      	str	r1, [sp, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	4632      	mov	r2, r6
 8004604:	4629      	mov	r1, r5
 8004606:	4620      	mov	r0, r4
 8004608:	f000 ff64 	bl	80054d4 <xTaskCreateStatic>
 800460c:	4603      	mov	r3, r0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e01c      	b.n	800464c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685c      	ldr	r4, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800461e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ff98 	bl	800455c <makeFreeRtosPriority>
 800462c:	4602      	mov	r2, r0
 800462e:	f107 030c 	add.w	r3, r7, #12
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	9200      	str	r2, [sp, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	4632      	mov	r2, r6
 800463a:	4629      	mov	r1, r5
 800463c:	4620      	mov	r0, r4
 800463e:	f000 ffa9 	bl	8005594 <xTaskCreate>
 8004642:	4603      	mov	r3, r0
 8004644:	2b01      	cmp	r3, #1
 8004646:	d001      	beq.n	800464c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800464c:	68fb      	ldr	r3, [r7, #12]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004656 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <osDelay+0x16>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	e000      	b.n	800466e <osDelay+0x18>
 800466c:	2301      	movs	r3, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f001 f8c8 	bl	8005804 <vTaskDelay>
  
  return osOK;
 8004674:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4619      	mov	r1, r3
 8004694:	2001      	movs	r0, #1
 8004696:	f000 fab6 	bl	8004c06 <xQueueCreateMutexStatic>
 800469a:	4603      	mov	r3, r0
 800469c:	e003      	b.n	80046a6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800469e:	2001      	movs	r0, #1
 80046a0:	f000 fa99 	bl	8004bd6 <xQueueCreateMutex>
 80046a4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <osMutexWait+0x18>
    return osErrorParameter;
 80046c4:	2380      	movs	r3, #128	@ 0x80
 80046c6:	e03a      	b.n	800473e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d103      	bne.n	80046dc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	e009      	b.n	80046f0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <osMutexWait+0x40>
      ticks = 1;
 80046ec:	2301      	movs	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80046f0:	f7ff ff4c 	bl	800458c <inHandlerMode>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d017      	beq.n	800472a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	461a      	mov	r2, r3
 8004700:	2100      	movs	r1, #0
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fd3c 	bl	8005180 <xQueueReceiveFromISR>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d001      	beq.n	8004712 <osMutexWait+0x62>
      return osErrorOS;
 800470e:	23ff      	movs	r3, #255	@ 0xff
 8004710:	e015      	b.n	800473e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d011      	beq.n	800473c <osMutexWait+0x8c>
 8004718:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <osMutexWait+0x98>)
 800471a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	e008      	b.n	800473c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fc17 	bl	8004f60 <xQueueSemaphoreTake>
 8004732:	4603      	mov	r3, r0
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <osMutexWait+0x8c>
    return osErrorOS;
 8004738:	23ff      	movs	r3, #255	@ 0xff
 800473a:	e000      	b.n	800473e <osMutexWait+0x8e>
  }
  
  return osOK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800475c:	f7ff ff16 	bl	800458c <inHandlerMode>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004766:	f107 0308 	add.w	r3, r7, #8
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fb67 	bl	8004e40 <xQueueGiveFromISR>
 8004772:	4603      	mov	r3, r0
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <osMutexRelease+0x30>
      return osErrorOS;
 8004778:	23ff      	movs	r3, #255	@ 0xff
 800477a:	e017      	b.n	80047ac <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d013      	beq.n	80047aa <osMutexRelease+0x5e>
 8004782:	4b0c      	ldr	r3, [pc, #48]	@ (80047b4 <osMutexRelease+0x68>)
 8004784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	e00a      	b.n	80047aa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004794:	2300      	movs	r3, #0
 8004796:	2200      	movs	r2, #0
 8004798:	2100      	movs	r1, #0
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa4e 	bl	8004c3c <xQueueGenericSend>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80047a6:	23ff      	movs	r3, #255	@ 0xff
 80047a8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f103 0208 	add.w	r2, r3, #8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f04f 32ff 	mov.w	r2, #4294967295
 80047d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f103 0208 	add.w	r2, r3, #8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f103 0208 	add.w	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d103      	bne.n	800487a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	e00c      	b.n	8004894 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3308      	adds	r3, #8
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e002      	b.n	8004888 <vListInsert+0x2e>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	d2f6      	bcs.n	8004882 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	601a      	str	r2, [r3, #0]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6892      	ldr	r2, [r2, #8]
 80048e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6852      	ldr	r2, [r2, #4]
 80048ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d103      	bne.n	8004900 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	1e5a      	subs	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800494c:	f001 fef4 	bl	8006738 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497c:	3b01      	subs	r3, #1
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	22ff      	movs	r2, #255	@ 0xff
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	22ff      	movs	r2, #255	@ 0xff
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d114      	bne.n	80049cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01a      	beq.n	80049e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3310      	adds	r3, #16
 80049ae:	4618      	mov	r0, r3
 80049b0:	f001 f9a8 	bl	8005d04 <xTaskRemoveFromEventList>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d012      	beq.n	80049e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049ba:	4b0d      	ldr	r3, [pc, #52]	@ (80049f0 <xQueueGenericReset+0xd0>)
 80049bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	e009      	b.n	80049e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3310      	adds	r3, #16
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fef1 	bl	80047b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3324      	adds	r3, #36	@ 0x24
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff feec 	bl	80047b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049e0:	f001 fedc 	bl	800679c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049e4:	2301      	movs	r3, #1
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08e      	sub	sp, #56	@ 0x38
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	e7fd      	b.n	8004a3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <xQueueGenericCreateStatic+0x56>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <xQueueGenericCreateStatic+0x5a>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <xQueueGenericCreateStatic+0x5c>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	623b      	str	r3, [r7, #32]
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	e7fd      	b.n	8004a68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <xQueueGenericCreateStatic+0x84>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <xQueueGenericCreateStatic+0x88>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <xQueueGenericCreateStatic+0x8a>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	61fb      	str	r3, [r7, #28]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a9a:	2348      	movs	r3, #72	@ 0x48
 8004a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b48      	cmp	r3, #72	@ 0x48
 8004aa2:	d00b      	beq.n	8004abc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61bb      	str	r3, [r7, #24]
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004abc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00d      	beq.n	8004ae4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ad0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f840 	bl	8004b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3730      	adds	r7, #48	@ 0x30
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b08a      	sub	sp, #40	@ 0x28
 8004af2:	af02      	add	r7, sp, #8
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	4613      	mov	r3, r2
 8004afa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	613b      	str	r3, [r7, #16]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	3348      	adds	r3, #72	@ 0x48
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 ff27 	bl	800697c <pvPortMalloc>
 8004b2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d011      	beq.n	8004b5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3348      	adds	r3, #72	@ 0x48
 8004b3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b48:	79fa      	ldrb	r2, [r7, #7]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f805 	bl	8004b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e002      	b.n	8004b86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b92:	2101      	movs	r1, #1
 8004b94:	69b8      	ldr	r0, [r7, #24]
 8004b96:	f7ff fec3 	bl	8004920 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00e      	beq.n	8004bce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f837 	bl	8004c3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6939      	ldr	r1, [r7, #16]
 8004bee:	6978      	ldr	r0, [r7, #20]
 8004bf0:	f7ff ff7d 	bl	8004aee <xQueueGenericCreate>
 8004bf4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff ffd3 	bl	8004ba2 <prvInitialiseMutex>

		return xNewQueue;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
	}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b088      	sub	sp, #32
 8004c0a:	af02      	add	r7, sp, #8
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	6039      	str	r1, [r7, #0]
 8004c10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c12:	2301      	movs	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2200      	movs	r2, #0
 8004c22:	6939      	ldr	r1, [r7, #16]
 8004c24:	6978      	ldr	r0, [r7, #20]
 8004c26:	f7ff fee5 	bl	80049f4 <xQueueGenericCreateStatic>
 8004c2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff ffb8 	bl	8004ba2 <prvInitialiseMutex>

		return xNewQueue;
 8004c32:	68fb      	ldr	r3, [r7, #12]
	}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08e      	sub	sp, #56	@ 0x38
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <xQueueGenericSend+0x34>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c6a:	bf00      	nop
 8004c6c:	bf00      	nop
 8004c6e:	e7fd      	b.n	8004c6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <xQueueGenericSend+0x42>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <xQueueGenericSend+0x46>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xQueueGenericSend+0x48>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <xQueueGenericSend+0x64>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c9a:	bf00      	nop
 8004c9c:	bf00      	nop
 8004c9e:	e7fd      	b.n	8004c9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d103      	bne.n	8004cae <xQueueGenericSend+0x72>
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <xQueueGenericSend+0x76>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericSend+0x78>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <xQueueGenericSend+0x94>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	623b      	str	r3, [r7, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cd0:	f001 f9d8 	bl	8006084 <xTaskGetSchedulerState>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <xQueueGenericSend+0xa4>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <xQueueGenericSend+0xa8>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <xQueueGenericSend+0xaa>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10b      	bne.n	8004d02 <xQueueGenericSend+0xc6>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	61fb      	str	r3, [r7, #28]
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d02:	f001 fd19 	bl	8006738 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <xQueueGenericSend+0xdc>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d129      	bne.n	8004d6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d1e:	f000 fac9 	bl	80052b4 <prvCopyDataToQueue>
 8004d22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d010      	beq.n	8004d4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	3324      	adds	r3, #36	@ 0x24
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 ffe7 	bl	8005d04 <xTaskRemoveFromEventList>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e3c <xQueueGenericSend+0x200>)
 8004d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	e00a      	b.n	8004d64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d54:	4b39      	ldr	r3, [pc, #228]	@ (8004e3c <xQueueGenericSend+0x200>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d64:	f001 fd1a 	bl	800679c <vPortExitCritical>
				return pdPASS;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e063      	b.n	8004e34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d72:	f001 fd13 	bl	800679c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e05c      	b.n	8004e34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d80:	f107 0314 	add.w	r3, r7, #20
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f821 	bl	8005dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d8e:	f001 fd05 	bl	800679c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d92:	f000 fdcf 	bl	8005934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d96:	f001 fccf 	bl	8006738 <vPortEnterCritical>
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004da0:	b25b      	sxtb	r3, r3
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d103      	bne.n	8004db0 <xQueueGenericSend+0x174>
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004db6:	b25b      	sxtb	r3, r3
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d103      	bne.n	8004dc6 <xQueueGenericSend+0x18a>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dc6:	f001 fce9 	bl	800679c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dca:	1d3a      	adds	r2, r7, #4
 8004dcc:	f107 0314 	add.w	r3, r7, #20
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 f810 	bl	8005df8 <xTaskCheckForTimeOut>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d124      	bne.n	8004e28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004de0:	f000 fb60 	bl	80054a4 <prvIsQueueFull>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d018      	beq.n	8004e1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	3310      	adds	r3, #16
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 ff60 	bl	8005cb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004df8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dfa:	f000 faeb 	bl	80053d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dfe:	f000 fda7 	bl	8005950 <xTaskResumeAll>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f47f af7c 	bne.w	8004d02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e3c <xQueueGenericSend+0x200>)
 8004e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	e772      	b.n	8004d02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e1e:	f000 fad9 	bl	80053d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e22:	f000 fd95 	bl	8005950 <xTaskResumeAll>
 8004e26:	e76c      	b.n	8004d02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e2a:	f000 fad3 	bl	80053d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e2e:	f000 fd8f 	bl	8005950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3738      	adds	r7, #56	@ 0x38
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08e      	sub	sp, #56	@ 0x38
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	623b      	str	r3, [r7, #32]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00b      	beq.n	8004e8c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61fb      	str	r3, [r7, #28]
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <xQueueGiveFromISR+0x5c>
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <xQueueGiveFromISR+0x60>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <xQueueGiveFromISR+0x62>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10b      	bne.n	8004ebe <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	61bb      	str	r3, [r7, #24]
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	e7fd      	b.n	8004eba <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ebe:	f001 fd1b 	bl	80068f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	617a      	str	r2, [r7, #20]
 8004ed8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004eda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d22b      	bcs.n	8004f46 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d112      	bne.n	8004f30 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	3324      	adds	r3, #36	@ 0x24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fef4 	bl	8005d04 <xTaskRemoveFromEventList>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00e      	beq.n	8004f40 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e007      	b.n	8004f40 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f34:	3301      	adds	r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	b25a      	sxtb	r2, r3
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f40:	2301      	movs	r3, #1
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f44:	e001      	b.n	8004f4a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3738      	adds	r7, #56	@ 0x38
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08e      	sub	sp, #56	@ 0x38
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10b      	bne.n	8004f94 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	623b      	str	r3, [r7, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
 8004f92:	e7fd      	b.n	8004f90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00b      	beq.n	8004fb4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	61fb      	str	r3, [r7, #28]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fb4:	f001 f866 	bl	8006084 <xTaskGetSchedulerState>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <xQueueSemaphoreTake+0x64>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <xQueueSemaphoreTake+0x68>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <xQueueSemaphoreTake+0x6a>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	61bb      	str	r3, [r7, #24]
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fe6:	f001 fba7 	bl	8006738 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d024      	beq.n	8005040 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff8:	1e5a      	subs	r2, r3, #1
 8004ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005006:	f001 f9e9 	bl	80063dc <pvTaskIncrementMutexHeldCount>
 800500a:	4602      	mov	r2, r0
 800500c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00f      	beq.n	8005038 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501a:	3310      	adds	r3, #16
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fe71 	bl	8005d04 <xTaskRemoveFromEventList>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005028:	4b54      	ldr	r3, [pc, #336]	@ (800517c <xQueueSemaphoreTake+0x21c>)
 800502a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005038:	f001 fbb0 	bl	800679c <vPortExitCritical>
				return pdPASS;
 800503c:	2301      	movs	r3, #1
 800503e:	e098      	b.n	8005172 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d112      	bne.n	800506c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	617b      	str	r3, [r7, #20]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005064:	f001 fb9a 	bl	800679c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005068:	2300      	movs	r3, #0
 800506a:	e082      	b.n	8005172 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800506c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005072:	f107 030c 	add.w	r3, r7, #12
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fea8 	bl	8005dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005080:	f001 fb8c 	bl	800679c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005084:	f000 fc56 	bl	8005934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005088:	f001 fb56 	bl	8006738 <vPortEnterCritical>
 800508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005092:	b25b      	sxtb	r3, r3
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d103      	bne.n	80050a2 <xQueueSemaphoreTake+0x142>
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050a8:	b25b      	sxtb	r3, r3
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d103      	bne.n	80050b8 <xQueueSemaphoreTake+0x158>
 80050b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050b8:	f001 fb70 	bl	800679c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050bc:	463a      	mov	r2, r7
 80050be:	f107 030c 	add.w	r3, r7, #12
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fe97 	bl	8005df8 <xTaskCheckForTimeOut>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d132      	bne.n	8005136 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050d2:	f000 f9d1 	bl	8005478 <prvIsQueueEmpty>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d026      	beq.n	800512a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80050e4:	f001 fb28 	bl	8006738 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 ffe7 	bl	80060c0 <xTaskPriorityInherit>
 80050f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80050f4:	f001 fb52 	bl	800679c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fa:	3324      	adds	r3, #36	@ 0x24
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fdd9 	bl	8005cb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005106:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005108:	f000 f964 	bl	80053d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800510c:	f000 fc20 	bl	8005950 <xTaskResumeAll>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	f47f af67 	bne.w	8004fe6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005118:	4b18      	ldr	r3, [pc, #96]	@ (800517c <xQueueSemaphoreTake+0x21c>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	e75d      	b.n	8004fe6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800512a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800512c:	f000 f952 	bl	80053d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005130:	f000 fc0e 	bl	8005950 <xTaskResumeAll>
 8005134:	e757      	b.n	8004fe6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005136:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005138:	f000 f94c 	bl	80053d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800513c:	f000 fc08 	bl	8005950 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005140:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005142:	f000 f999 	bl	8005478 <prvIsQueueEmpty>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	f43f af4c 	beq.w	8004fe6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005154:	f001 faf0 	bl	8006738 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005158:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800515a:	f000 f893 	bl	8005284 <prvGetDisinheritPriorityAfterTimeout>
 800515e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005166:	4618      	mov	r0, r3
 8005168:	f001 f8a8 	bl	80062bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800516c:	f001 fb16 	bl	800679c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005170:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005172:	4618      	mov	r0, r3
 8005174:	3738      	adds	r7, #56	@ 0x38
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08e      	sub	sp, #56	@ 0x38
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10b      	bne.n	80051ae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	623b      	str	r3, [r7, #32]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d103      	bne.n	80051bc <xQueueReceiveFromISR+0x3c>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <xQueueReceiveFromISR+0x40>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <xQueueReceiveFromISR+0x42>
 80051c0:	2300      	movs	r3, #0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	61fb      	str	r3, [r7, #28]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051de:	f001 fb8b 	bl	80068f8 <vPortValidateInterruptPriority>
	__asm volatile
 80051e2:	f3ef 8211 	mrs	r2, BASEPRI
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	61ba      	str	r2, [r7, #24]
 80051f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80051fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005202:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005206:	2b00      	cmp	r3, #0
 8005208:	d02f      	beq.n	800526a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800520a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005218:	f000 f8b6 	bl	8005388 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	1e5a      	subs	r2, r3, #1
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005224:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d112      	bne.n	8005254 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d016      	beq.n	8005264 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	3310      	adds	r3, #16
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fd62 	bl	8005d04 <xTaskRemoveFromEventList>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00e      	beq.n	8005264 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e007      	b.n	8005264 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005258:	3301      	adds	r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	b25a      	sxtb	r2, r3
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005264:	2301      	movs	r3, #1
 8005266:	637b      	str	r3, [r7, #52]	@ 0x34
 8005268:	e001      	b.n	800526e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800526a:	2300      	movs	r3, #0
 800526c:	637b      	str	r3, [r7, #52]	@ 0x34
 800526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005270:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f383 8811 	msr	BASEPRI, r3
}
 8005278:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800527a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800527c:	4618      	mov	r0, r3
 800527e:	3738      	adds	r7, #56	@ 0x38
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	d006      	beq.n	80052a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f1c3 0307 	rsb	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e001      	b.n	80052a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80052a6:	68fb      	ldr	r3, [r7, #12]
	}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d14d      	bne.n	8005376 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 ff64 	bl	80061ac <xTaskPriorityDisinherit>
 80052e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	e043      	b.n	8005376 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d119      	bne.n	8005328 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6858      	ldr	r0, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	461a      	mov	r2, r3
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	f001 fd80 	bl	8006e04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530c:	441a      	add	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	d32b      	bcc.n	8005376 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	605a      	str	r2, [r3, #4]
 8005326:	e026      	b.n	8005376 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68d8      	ldr	r0, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	461a      	mov	r2, r3
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	f001 fd66 	bl	8006e04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	425b      	negs	r3, r3
 8005342:	441a      	add	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d207      	bcs.n	8005364 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	425b      	negs	r3, r3
 800535e:	441a      	add	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d105      	bne.n	8005376 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	3b01      	subs	r3, #1
 8005374:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800537e:	697b      	ldr	r3, [r7, #20]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d018      	beq.n	80053cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	441a      	add	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d303      	bcc.n	80053bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68d9      	ldr	r1, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	461a      	mov	r2, r3
 80053c6:	6838      	ldr	r0, [r7, #0]
 80053c8:	f001 fd1c 	bl	8006e04 <memcpy>
	}
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053dc:	f001 f9ac 	bl	8006738 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053e8:	e011      	b.n	800540e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3324      	adds	r3, #36	@ 0x24
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fc84 	bl	8005d04 <xTaskRemoveFromEventList>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005402:	f000 fd5d 	bl	8005ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	3b01      	subs	r3, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800540e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005412:	2b00      	cmp	r3, #0
 8005414:	dce9      	bgt.n	80053ea <prvUnlockQueue+0x16>
 8005416:	e000      	b.n	800541a <prvUnlockQueue+0x46>
					break;
 8005418:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	22ff      	movs	r2, #255	@ 0xff
 800541e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005422:	f001 f9bb 	bl	800679c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005426:	f001 f987 	bl	8006738 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005430:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005432:	e011      	b.n	8005458 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d012      	beq.n	8005462 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3310      	adds	r3, #16
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fc5f 	bl	8005d04 <xTaskRemoveFromEventList>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800544c:	f000 fd38 	bl	8005ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005450:	7bbb      	ldrb	r3, [r7, #14]
 8005452:	3b01      	subs	r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dce9      	bgt.n	8005434 <prvUnlockQueue+0x60>
 8005460:	e000      	b.n	8005464 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005462:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	22ff      	movs	r2, #255	@ 0xff
 8005468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800546c:	f001 f996 	bl	800679c <vPortExitCritical>
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005480:	f001 f95a 	bl	8006738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e001      	b.n	8005496 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005496:	f001 f981 	bl	800679c <vPortExitCritical>

	return xReturn;
 800549a:	68fb      	ldr	r3, [r7, #12]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054ac:	f001 f944 	bl	8006738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d102      	bne.n	80054c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054bc:	2301      	movs	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e001      	b.n	80054c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054c6:	f001 f969 	bl	800679c <vPortExitCritical>

	return xReturn;
 80054ca:	68fb      	ldr	r3, [r7, #12]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08e      	sub	sp, #56	@ 0x38
 80054d8:	af04      	add	r7, sp, #16
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <xTaskCreateStatic+0x2c>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	623b      	str	r3, [r7, #32]
}
 80054fa:	bf00      	nop
 80054fc:	bf00      	nop
 80054fe:	e7fd      	b.n	80054fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	61fb      	str	r3, [r7, #28]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800551e:	2354      	movs	r3, #84	@ 0x54
 8005520:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b54      	cmp	r3, #84	@ 0x54
 8005526:	d00b      	beq.n	8005540 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	61bb      	str	r3, [r7, #24]
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	e7fd      	b.n	800553c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005540:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01e      	beq.n	8005586 <xTaskCreateStatic+0xb2>
 8005548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01b      	beq.n	8005586 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005556:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005560:	2300      	movs	r3, #0
 8005562:	9303      	str	r3, [sp, #12]
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	9302      	str	r3, [sp, #8]
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f850 	bl	800561e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800557e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005580:	f000 f8d6 	bl	8005730 <prvAddNewTaskToReadyList>
 8005584:	e001      	b.n	800558a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800558a:	697b      	ldr	r3, [r7, #20]
	}
 800558c:	4618      	mov	r0, r3
 800558e:	3728      	adds	r7, #40	@ 0x28
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	@ 0x30
 8005598:	af04      	add	r7, sp, #16
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 f9e7 	bl	800697c <pvPortMalloc>
 80055ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00e      	beq.n	80055d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055b6:	2054      	movs	r0, #84	@ 0x54
 80055b8:	f001 f9e0 	bl	800697c <pvPortMalloc>
 80055bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80055ca:	e005      	b.n	80055d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055cc:	6978      	ldr	r0, [r7, #20]
 80055ce:	f001 faa3 	bl	8006b18 <vPortFree>
 80055d2:	e001      	b.n	80055d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	2300      	movs	r3, #0
 80055ea:	9303      	str	r3, [sp, #12]
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	9302      	str	r3, [sp, #8]
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f2:	9301      	str	r3, [sp, #4]
 80055f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f80e 	bl	800561e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005602:	69f8      	ldr	r0, [r7, #28]
 8005604:	f000 f894 	bl	8005730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005608:	2301      	movs	r3, #1
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e002      	b.n	8005614 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800560e:	f04f 33ff 	mov.w	r3, #4294967295
 8005612:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005614:	69bb      	ldr	r3, [r7, #24]
	}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b088      	sub	sp, #32
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005636:	3b01      	subs	r3, #1
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f023 0307 	bic.w	r3, r3, #7
 8005644:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	617b      	str	r3, [r7, #20]
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	e7fd      	b.n	8005664 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01f      	beq.n	80056ae <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	e012      	b.n	800569a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	7819      	ldrb	r1, [r3, #0]
 800567c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	3334      	adds	r3, #52	@ 0x34
 8005684:	460a      	mov	r2, r1
 8005686:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d006      	beq.n	80056a2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3301      	adds	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2b0f      	cmp	r3, #15
 800569e:	d9e9      	bls.n	8005674 <prvInitialiseNewTask+0x56>
 80056a0:	e000      	b.n	80056a4 <prvInitialiseNewTask+0x86>
			{
				break;
 80056a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056ac:	e003      	b.n	80056b6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b8:	2b06      	cmp	r3, #6
 80056ba:	d901      	bls.n	80056c0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056bc:	2306      	movs	r3, #6
 80056be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056ca:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	2200      	movs	r2, #0
 80056d0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff f88e 	bl	80047f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056de:	3318      	adds	r3, #24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff f889 	bl	80047f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ee:	f1c3 0207 	rsb	r2, r3, #7
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fe:	2200      	movs	r2, #0
 8005700:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	69b8      	ldr	r0, [r7, #24]
 8005710:	f000 fede 	bl	80064d0 <pxPortInitialiseStack>
 8005714:	4602      	mov	r2, r0
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800571a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005726:	bf00      	nop
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005738:	f000 fffe 	bl	8006738 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800573c:	4b2a      	ldr	r3, [pc, #168]	@ (80057e8 <prvAddNewTaskToReadyList+0xb8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3301      	adds	r3, #1
 8005742:	4a29      	ldr	r2, [pc, #164]	@ (80057e8 <prvAddNewTaskToReadyList+0xb8>)
 8005744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005746:	4b29      	ldr	r3, [pc, #164]	@ (80057ec <prvAddNewTaskToReadyList+0xbc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800574e:	4a27      	ldr	r2, [pc, #156]	@ (80057ec <prvAddNewTaskToReadyList+0xbc>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005754:	4b24      	ldr	r3, [pc, #144]	@ (80057e8 <prvAddNewTaskToReadyList+0xb8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d110      	bne.n	800577e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800575c:	f000 fbd4 	bl	8005f08 <prvInitialiseTaskLists>
 8005760:	e00d      	b.n	800577e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005762:	4b23      	ldr	r3, [pc, #140]	@ (80057f0 <prvAddNewTaskToReadyList+0xc0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800576a:	4b20      	ldr	r3, [pc, #128]	@ (80057ec <prvAddNewTaskToReadyList+0xbc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	429a      	cmp	r2, r3
 8005776:	d802      	bhi.n	800577e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005778:	4a1c      	ldr	r2, [pc, #112]	@ (80057ec <prvAddNewTaskToReadyList+0xbc>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800577e:	4b1d      	ldr	r3, [pc, #116]	@ (80057f4 <prvAddNewTaskToReadyList+0xc4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	4a1b      	ldr	r2, [pc, #108]	@ (80057f4 <prvAddNewTaskToReadyList+0xc4>)
 8005786:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	2201      	movs	r2, #1
 800578e:	409a      	lsls	r2, r3
 8005790:	4b19      	ldr	r3, [pc, #100]	@ (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4313      	orrs	r3, r2
 8005796:	4a18      	ldr	r2, [pc, #96]	@ (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4a15      	ldr	r2, [pc, #84]	@ (80057fc <prvAddNewTaskToReadyList+0xcc>)
 80057a8:	441a      	add	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3304      	adds	r3, #4
 80057ae:	4619      	mov	r1, r3
 80057b0:	4610      	mov	r0, r2
 80057b2:	f7ff f82e 	bl	8004812 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057b6:	f000 fff1 	bl	800679c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057ba:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <prvAddNewTaskToReadyList+0xc0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00e      	beq.n	80057e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057c2:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <prvAddNewTaskToReadyList+0xbc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d207      	bcs.n	80057e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <prvAddNewTaskToReadyList+0xd0>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000520 	.word	0x20000520
 80057ec:	20000420 	.word	0x20000420
 80057f0:	2000052c 	.word	0x2000052c
 80057f4:	2000053c 	.word	0x2000053c
 80057f8:	20000528 	.word	0x20000528
 80057fc:	20000424 	.word	0x20000424
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005816:	4b14      	ldr	r3, [pc, #80]	@ (8005868 <vTaskDelay+0x64>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <vTaskDelay+0x32>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	60bb      	str	r3, [r7, #8]
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	e7fd      	b.n	8005832 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005836:	f000 f87d 	bl	8005934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800583a:	2100      	movs	r1, #0
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fde1 	bl	8006404 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005842:	f000 f885 	bl	8005950 <xTaskResumeAll>
 8005846:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d107      	bne.n	800585e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800584e:	4b07      	ldr	r3, [pc, #28]	@ (800586c <vTaskDelay+0x68>)
 8005850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800585e:	bf00      	nop
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000548 	.word	0x20000548
 800586c:	e000ed04 	.word	0xe000ed04

08005870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08a      	sub	sp, #40	@ 0x28
 8005874:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800587e:	463a      	mov	r2, r7
 8005880:	1d39      	adds	r1, r7, #4
 8005882:	f107 0308 	add.w	r3, r7, #8
 8005886:	4618      	mov	r0, r3
 8005888:	f7fa fe88 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	9202      	str	r2, [sp, #8]
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	2300      	movs	r3, #0
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	2300      	movs	r3, #0
 800589c:	460a      	mov	r2, r1
 800589e:	491f      	ldr	r1, [pc, #124]	@ (800591c <vTaskStartScheduler+0xac>)
 80058a0:	481f      	ldr	r0, [pc, #124]	@ (8005920 <vTaskStartScheduler+0xb0>)
 80058a2:	f7ff fe17 	bl	80054d4 <xTaskCreateStatic>
 80058a6:	4603      	mov	r3, r0
 80058a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005924 <vTaskStartScheduler+0xb4>)
 80058aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005924 <vTaskStartScheduler+0xb4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058b4:	2301      	movs	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e001      	b.n	80058be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d116      	bne.n	80058f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	613b      	str	r3, [r7, #16]
}
 80058d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d8:	4b13      	ldr	r3, [pc, #76]	@ (8005928 <vTaskStartScheduler+0xb8>)
 80058da:	f04f 32ff 	mov.w	r2, #4294967295
 80058de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058e0:	4b12      	ldr	r3, [pc, #72]	@ (800592c <vTaskStartScheduler+0xbc>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058e6:	4b12      	ldr	r3, [pc, #72]	@ (8005930 <vTaskStartScheduler+0xc0>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058ec:	f000 fe80 	bl	80065f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058f0:	e00f      	b.n	8005912 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d10b      	bne.n	8005912 <vTaskStartScheduler+0xa2>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	60fb      	str	r3, [r7, #12]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <vTaskStartScheduler+0x9e>
}
 8005912:	bf00      	nop
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	08007860 	.word	0x08007860
 8005920:	08005ed9 	.word	0x08005ed9
 8005924:	20000544 	.word	0x20000544
 8005928:	20000540 	.word	0x20000540
 800592c:	2000052c 	.word	0x2000052c
 8005930:	20000524 	.word	0x20000524

08005934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005938:	4b04      	ldr	r3, [pc, #16]	@ (800594c <vTaskSuspendAll+0x18>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	4a03      	ldr	r2, [pc, #12]	@ (800594c <vTaskSuspendAll+0x18>)
 8005940:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000548 	.word	0x20000548

08005950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800595e:	4b42      	ldr	r3, [pc, #264]	@ (8005a68 <xTaskResumeAll+0x118>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <xTaskResumeAll+0x2e>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	603b      	str	r3, [r7, #0]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800597e:	f000 fedb 	bl	8006738 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005982:	4b39      	ldr	r3, [pc, #228]	@ (8005a68 <xTaskResumeAll+0x118>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3b01      	subs	r3, #1
 8005988:	4a37      	ldr	r2, [pc, #220]	@ (8005a68 <xTaskResumeAll+0x118>)
 800598a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598c:	4b36      	ldr	r3, [pc, #216]	@ (8005a68 <xTaskResumeAll+0x118>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d161      	bne.n	8005a58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005994:	4b35      	ldr	r3, [pc, #212]	@ (8005a6c <xTaskResumeAll+0x11c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05d      	beq.n	8005a58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800599c:	e02e      	b.n	80059fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599e:	4b34      	ldr	r3, [pc, #208]	@ (8005a70 <xTaskResumeAll+0x120>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3318      	adds	r3, #24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe ff8e 	bl	80048cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe ff89 	bl	80048cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059be:	2201      	movs	r2, #1
 80059c0:	409a      	lsls	r2, r3
 80059c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a74 <xTaskResumeAll+0x124>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005a74 <xTaskResumeAll+0x124>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a27      	ldr	r2, [pc, #156]	@ (8005a78 <xTaskResumeAll+0x128>)
 80059da:	441a      	add	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe ff15 	bl	8004812 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ec:	4b23      	ldr	r3, [pc, #140]	@ (8005a7c <xTaskResumeAll+0x12c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80059f6:	4b22      	ldr	r3, [pc, #136]	@ (8005a80 <xTaskResumeAll+0x130>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005a70 <xTaskResumeAll+0x120>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1cc      	bne.n	800599e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a0a:	f000 fb1b 	bl	8006044 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a84 <xTaskResumeAll+0x134>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d010      	beq.n	8005a3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a1a:	f000 f837 	bl	8005a8c <xTaskIncrementTick>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a24:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <xTaskResumeAll+0x130>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f1      	bne.n	8005a1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005a36:	4b13      	ldr	r3, [pc, #76]	@ (8005a84 <xTaskResumeAll+0x134>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a3c:	4b10      	ldr	r3, [pc, #64]	@ (8005a80 <xTaskResumeAll+0x130>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a48:	4b0f      	ldr	r3, [pc, #60]	@ (8005a88 <xTaskResumeAll+0x138>)
 8005a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a58:	f000 fea0 	bl	800679c <vPortExitCritical>

	return xAlreadyYielded;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000548 	.word	0x20000548
 8005a6c:	20000520 	.word	0x20000520
 8005a70:	200004e0 	.word	0x200004e0
 8005a74:	20000528 	.word	0x20000528
 8005a78:	20000424 	.word	0x20000424
 8005a7c:	20000420 	.word	0x20000420
 8005a80:	20000534 	.word	0x20000534
 8005a84:	20000530 	.word	0x20000530
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a96:	4b4f      	ldr	r3, [pc, #316]	@ (8005bd4 <xTaskIncrementTick+0x148>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f040 808f 	bne.w	8005bbe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd8 <xTaskIncrementTick+0x14c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005aa8:	4a4b      	ldr	r2, [pc, #300]	@ (8005bd8 <xTaskIncrementTick+0x14c>)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d121      	bne.n	8005af8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ab4:	4b49      	ldr	r3, [pc, #292]	@ (8005bdc <xTaskIncrementTick+0x150>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	603b      	str	r3, [r7, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	e7fd      	b.n	8005ad2 <xTaskIncrementTick+0x46>
 8005ad6:	4b41      	ldr	r3, [pc, #260]	@ (8005bdc <xTaskIncrementTick+0x150>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	4b40      	ldr	r3, [pc, #256]	@ (8005be0 <xTaskIncrementTick+0x154>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8005bdc <xTaskIncrementTick+0x150>)
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8005be0 <xTaskIncrementTick+0x154>)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4b3e      	ldr	r3, [pc, #248]	@ (8005be4 <xTaskIncrementTick+0x158>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3301      	adds	r3, #1
 8005af0:	4a3c      	ldr	r2, [pc, #240]	@ (8005be4 <xTaskIncrementTick+0x158>)
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	f000 faa6 	bl	8006044 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005af8:	4b3b      	ldr	r3, [pc, #236]	@ (8005be8 <xTaskIncrementTick+0x15c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d348      	bcc.n	8005b94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b02:	4b36      	ldr	r3, [pc, #216]	@ (8005bdc <xTaskIncrementTick+0x150>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d104      	bne.n	8005b16 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b0c:	4b36      	ldr	r3, [pc, #216]	@ (8005be8 <xTaskIncrementTick+0x15c>)
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b12:	601a      	str	r2, [r3, #0]
					break;
 8005b14:	e03e      	b.n	8005b94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b16:	4b31      	ldr	r3, [pc, #196]	@ (8005bdc <xTaskIncrementTick+0x150>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d203      	bcs.n	8005b36 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8005be8 <xTaskIncrementTick+0x15c>)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b34:	e02e      	b.n	8005b94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fec6 	bl	80048cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d004      	beq.n	8005b52 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe febd 	bl	80048cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	2201      	movs	r2, #1
 8005b58:	409a      	lsls	r2, r3
 8005b5a:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <xTaskIncrementTick+0x160>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	4a22      	ldr	r2, [pc, #136]	@ (8005bec <xTaskIncrementTick+0x160>)
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf0 <xTaskIncrementTick+0x164>)
 8005b72:	441a      	add	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f7fe fe49 	bl	8004812 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b84:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf4 <xTaskIncrementTick+0x168>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d3b9      	bcc.n	8005b02 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b92:	e7b6      	b.n	8005b02 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b94:	4b17      	ldr	r3, [pc, #92]	@ (8005bf4 <xTaskIncrementTick+0x168>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9a:	4915      	ldr	r1, [pc, #84]	@ (8005bf0 <xTaskIncrementTick+0x164>)
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d901      	bls.n	8005bb0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005bac:	2301      	movs	r3, #1
 8005bae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bb0:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <xTaskIncrementTick+0x16c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e004      	b.n	8005bc8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8005bfc <xTaskIncrementTick+0x170>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8005bfc <xTaskIncrementTick+0x170>)
 8005bc6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005bc8:	697b      	ldr	r3, [r7, #20]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000548 	.word	0x20000548
 8005bd8:	20000524 	.word	0x20000524
 8005bdc:	200004d8 	.word	0x200004d8
 8005be0:	200004dc 	.word	0x200004dc
 8005be4:	20000538 	.word	0x20000538
 8005be8:	20000540 	.word	0x20000540
 8005bec:	20000528 	.word	0x20000528
 8005bf0:	20000424 	.word	0x20000424
 8005bf4:	20000420 	.word	0x20000420
 8005bf8:	20000534 	.word	0x20000534
 8005bfc:	20000530 	.word	0x20000530

08005c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c06:	4b27      	ldr	r3, [pc, #156]	@ (8005ca4 <vTaskSwitchContext+0xa4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c0e:	4b26      	ldr	r3, [pc, #152]	@ (8005ca8 <vTaskSwitchContext+0xa8>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c14:	e040      	b.n	8005c98 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005c16:	4b24      	ldr	r3, [pc, #144]	@ (8005ca8 <vTaskSwitchContext+0xa8>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1c:	4b23      	ldr	r3, [pc, #140]	@ (8005cac <vTaskSwitchContext+0xac>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	fab3 f383 	clz	r3, r3
 8005c28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c2a:	7afb      	ldrb	r3, [r7, #11]
 8005c2c:	f1c3 031f 	rsb	r3, r3, #31
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	491f      	ldr	r1, [pc, #124]	@ (8005cb0 <vTaskSwitchContext+0xb0>)
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10b      	bne.n	8005c5e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	607b      	str	r3, [r7, #4]
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	e7fd      	b.n	8005c5a <vTaskSwitchContext+0x5a>
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <vTaskSwitchContext+0xb0>)
 8005c6a:	4413      	add	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	3308      	adds	r3, #8
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d104      	bne.n	8005c8e <vTaskSwitchContext+0x8e>
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	4a07      	ldr	r2, [pc, #28]	@ (8005cb4 <vTaskSwitchContext+0xb4>)
 8005c96:	6013      	str	r3, [r2, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	20000548 	.word	0x20000548
 8005ca8:	20000534 	.word	0x20000534
 8005cac:	20000528 	.word	0x20000528
 8005cb0:	20000424 	.word	0x20000424
 8005cb4:	20000420 	.word	0x20000420

08005cb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	60fb      	str	r3, [r7, #12]
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ce0:	4b07      	ldr	r3, [pc, #28]	@ (8005d00 <vTaskPlaceOnEventList+0x48>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3318      	adds	r3, #24
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7fe fdb6 	bl	800485a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cee:	2101      	movs	r1, #1
 8005cf0:	6838      	ldr	r0, [r7, #0]
 8005cf2:	f000 fb87 	bl	8006404 <prvAddCurrentTaskToDelayedList>
}
 8005cf6:	bf00      	nop
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000420 	.word	0x20000420

08005d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	60fb      	str	r3, [r7, #12]
}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	e7fd      	b.n	8005d2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	3318      	adds	r3, #24
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fdc8 	bl	80048cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005db4 <xTaskRemoveFromEventList+0xb0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11c      	bne.n	8005d7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fe fdbf 	bl	80048cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	2201      	movs	r2, #1
 8005d54:	409a      	lsls	r2, r3
 8005d56:	4b18      	ldr	r3, [pc, #96]	@ (8005db8 <xTaskRemoveFromEventList+0xb4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	4a16      	ldr	r2, [pc, #88]	@ (8005db8 <xTaskRemoveFromEventList+0xb4>)
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4a13      	ldr	r2, [pc, #76]	@ (8005dbc <xTaskRemoveFromEventList+0xb8>)
 8005d6e:	441a      	add	r2, r3
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f7fe fd4b 	bl	8004812 <vListInsertEnd>
 8005d7c:	e005      	b.n	8005d8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3318      	adds	r3, #24
 8005d82:	4619      	mov	r1, r3
 8005d84:	480e      	ldr	r0, [pc, #56]	@ (8005dc0 <xTaskRemoveFromEventList+0xbc>)
 8005d86:	f7fe fd44 	bl	8004812 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <xTaskRemoveFromEventList+0xc0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d905      	bls.n	8005da4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <xTaskRemoveFromEventList+0xc4>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e001      	b.n	8005da8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005da8:	697b      	ldr	r3, [r7, #20]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000548 	.word	0x20000548
 8005db8:	20000528 	.word	0x20000528
 8005dbc:	20000424 	.word	0x20000424
 8005dc0:	200004e0 	.word	0x200004e0
 8005dc4:	20000420 	.word	0x20000420
 8005dc8:	20000534 	.word	0x20000534

08005dcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dd4:	4b06      	ldr	r3, [pc, #24]	@ (8005df0 <vTaskInternalSetTimeOutState+0x24>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ddc:	4b05      	ldr	r3, [pc, #20]	@ (8005df4 <vTaskInternalSetTimeOutState+0x28>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	605a      	str	r2, [r3, #4]
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	20000538 	.word	0x20000538
 8005df4:	20000524 	.word	0x20000524

08005df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	613b      	str	r3, [r7, #16]
}
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	e7fd      	b.n	8005e1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10b      	bne.n	8005e3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	60fb      	str	r3, [r7, #12]
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	e7fd      	b.n	8005e3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e3e:	f000 fc7b 	bl	8006738 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e42:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb8 <xTaskCheckForTimeOut+0xc0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d102      	bne.n	8005e62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	e023      	b.n	8005eaa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b15      	ldr	r3, [pc, #84]	@ (8005ebc <xTaskCheckForTimeOut+0xc4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d007      	beq.n	8005e7e <xTaskCheckForTimeOut+0x86>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d302      	bcc.n	8005e7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e015      	b.n	8005eaa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d20b      	bcs.n	8005ea0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff ff99 	bl	8005dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	61fb      	str	r3, [r7, #28]
 8005e9e:	e004      	b.n	8005eaa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eaa:	f000 fc77 	bl	800679c <vPortExitCritical>

	return xReturn;
 8005eae:	69fb      	ldr	r3, [r7, #28]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20000524 	.word	0x20000524
 8005ebc:	20000538 	.word	0x20000538

08005ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ec4:	4b03      	ldr	r3, [pc, #12]	@ (8005ed4 <vTaskMissedYield+0x14>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000534 	.word	0x20000534

08005ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ee0:	f000 f852 	bl	8005f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ee4:	4b06      	ldr	r3, [pc, #24]	@ (8005f00 <prvIdleTask+0x28>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d9f9      	bls.n	8005ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005eec:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <prvIdleTask+0x2c>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005efc:	e7f0      	b.n	8005ee0 <prvIdleTask+0x8>
 8005efe:	bf00      	nop
 8005f00:	20000424 	.word	0x20000424
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e00c      	b.n	8005f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4a12      	ldr	r2, [pc, #72]	@ (8005f68 <prvInitialiseTaskLists+0x60>)
 8005f20:	4413      	add	r3, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fc48 	bl	80047b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d9ef      	bls.n	8005f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f34:	480d      	ldr	r0, [pc, #52]	@ (8005f6c <prvInitialiseTaskLists+0x64>)
 8005f36:	f7fe fc3f 	bl	80047b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f3a:	480d      	ldr	r0, [pc, #52]	@ (8005f70 <prvInitialiseTaskLists+0x68>)
 8005f3c:	f7fe fc3c 	bl	80047b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f40:	480c      	ldr	r0, [pc, #48]	@ (8005f74 <prvInitialiseTaskLists+0x6c>)
 8005f42:	f7fe fc39 	bl	80047b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f46:	480c      	ldr	r0, [pc, #48]	@ (8005f78 <prvInitialiseTaskLists+0x70>)
 8005f48:	f7fe fc36 	bl	80047b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f4c:	480b      	ldr	r0, [pc, #44]	@ (8005f7c <prvInitialiseTaskLists+0x74>)
 8005f4e:	f7fe fc33 	bl	80047b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f52:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <prvInitialiseTaskLists+0x78>)
 8005f54:	4a05      	ldr	r2, [pc, #20]	@ (8005f6c <prvInitialiseTaskLists+0x64>)
 8005f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f58:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <prvInitialiseTaskLists+0x7c>)
 8005f5a:	4a05      	ldr	r2, [pc, #20]	@ (8005f70 <prvInitialiseTaskLists+0x68>)
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000424 	.word	0x20000424
 8005f6c:	200004b0 	.word	0x200004b0
 8005f70:	200004c4 	.word	0x200004c4
 8005f74:	200004e0 	.word	0x200004e0
 8005f78:	200004f4 	.word	0x200004f4
 8005f7c:	2000050c 	.word	0x2000050c
 8005f80:	200004d8 	.word	0x200004d8
 8005f84:	200004dc 	.word	0x200004dc

08005f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f8e:	e019      	b.n	8005fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f90:	f000 fbd2 	bl	8006738 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f94:	4b10      	ldr	r3, [pc, #64]	@ (8005fd8 <prvCheckTasksWaitingTermination+0x50>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fe fc93 	bl	80048cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <prvCheckTasksWaitingTermination+0x54>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	4a0b      	ldr	r2, [pc, #44]	@ (8005fdc <prvCheckTasksWaitingTermination+0x54>)
 8005fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <prvCheckTasksWaitingTermination+0x58>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe0 <prvCheckTasksWaitingTermination+0x58>)
 8005fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fba:	f000 fbef 	bl	800679c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f810 	bl	8005fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <prvCheckTasksWaitingTermination+0x58>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e1      	bne.n	8005f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200004f4 	.word	0x200004f4
 8005fdc:	20000520 	.word	0x20000520
 8005fe0:	20000508 	.word	0x20000508

08005fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d108      	bne.n	8006008 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fd8c 	bl	8006b18 <vPortFree>
				vPortFree( pxTCB );
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fd89 	bl	8006b18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006006:	e019      	b.n	800603c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800600e:	2b01      	cmp	r3, #1
 8006010:	d103      	bne.n	800601a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fd80 	bl	8006b18 <vPortFree>
	}
 8006018:	e010      	b.n	800603c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006020:	2b02      	cmp	r3, #2
 8006022:	d00b      	beq.n	800603c <prvDeleteTCB+0x58>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	60fb      	str	r3, [r7, #12]
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	e7fd      	b.n	8006038 <prvDeleteTCB+0x54>
	}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800604a:	4b0c      	ldr	r3, [pc, #48]	@ (800607c <prvResetNextTaskUnblockTime+0x38>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006054:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <prvResetNextTaskUnblockTime+0x3c>)
 8006056:	f04f 32ff 	mov.w	r2, #4294967295
 800605a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800605c:	e008      	b.n	8006070 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605e:	4b07      	ldr	r3, [pc, #28]	@ (800607c <prvResetNextTaskUnblockTime+0x38>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4a04      	ldr	r2, [pc, #16]	@ (8006080 <prvResetNextTaskUnblockTime+0x3c>)
 800606e:	6013      	str	r3, [r2, #0]
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	200004d8 	.word	0x200004d8
 8006080:	20000540 	.word	0x20000540

08006084 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800608a:	4b0b      	ldr	r3, [pc, #44]	@ (80060b8 <xTaskGetSchedulerState+0x34>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d102      	bne.n	8006098 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006092:	2301      	movs	r3, #1
 8006094:	607b      	str	r3, [r7, #4]
 8006096:	e008      	b.n	80060aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006098:	4b08      	ldr	r3, [pc, #32]	@ (80060bc <xTaskGetSchedulerState+0x38>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d102      	bne.n	80060a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060a0:	2302      	movs	r3, #2
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	e001      	b.n	80060aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060a6:	2300      	movs	r3, #0
 80060a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060aa:	687b      	ldr	r3, [r7, #4]
	}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	2000052c 	.word	0x2000052c
 80060bc:	20000548 	.word	0x20000548

080060c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d05e      	beq.n	8006194 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060da:	4b31      	ldr	r3, [pc, #196]	@ (80061a0 <xTaskPriorityInherit+0xe0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d24e      	bcs.n	8006182 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	db06      	blt.n	80060fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ec:	4b2c      	ldr	r3, [pc, #176]	@ (80061a0 <xTaskPriorityInherit+0xe0>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f2:	f1c3 0207 	rsb	r2, r3, #7
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6959      	ldr	r1, [r3, #20]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4a26      	ldr	r2, [pc, #152]	@ (80061a4 <xTaskPriorityInherit+0xe4>)
 800610c:	4413      	add	r3, r2
 800610e:	4299      	cmp	r1, r3
 8006110:	d12f      	bne.n	8006172 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3304      	adds	r3, #4
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fbd8 	bl	80048cc <uxListRemove>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	2201      	movs	r2, #1
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	43da      	mvns	r2, r3
 800612e:	4b1e      	ldr	r3, [pc, #120]	@ (80061a8 <xTaskPriorityInherit+0xe8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4013      	ands	r3, r2
 8006134:	4a1c      	ldr	r2, [pc, #112]	@ (80061a8 <xTaskPriorityInherit+0xe8>)
 8006136:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006138:	4b19      	ldr	r3, [pc, #100]	@ (80061a0 <xTaskPriorityInherit+0xe0>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	2201      	movs	r2, #1
 8006148:	409a      	lsls	r2, r3
 800614a:	4b17      	ldr	r3, [pc, #92]	@ (80061a8 <xTaskPriorityInherit+0xe8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4313      	orrs	r3, r2
 8006150:	4a15      	ldr	r2, [pc, #84]	@ (80061a8 <xTaskPriorityInherit+0xe8>)
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4a10      	ldr	r2, [pc, #64]	@ (80061a4 <xTaskPriorityInherit+0xe4>)
 8006162:	441a      	add	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe fb51 	bl	8004812 <vListInsertEnd>
 8006170:	e004      	b.n	800617c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006172:	4b0b      	ldr	r3, [pc, #44]	@ (80061a0 <xTaskPriorityInherit+0xe0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e008      	b.n	8006194 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006186:	4b06      	ldr	r3, [pc, #24]	@ (80061a0 <xTaskPriorityInherit+0xe0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618c:	429a      	cmp	r2, r3
 800618e:	d201      	bcs.n	8006194 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006194:	68fb      	ldr	r3, [r7, #12]
	}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000420 	.word	0x20000420
 80061a4:	20000424 	.word	0x20000424
 80061a8:	20000528 	.word	0x20000528

080061ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d070      	beq.n	80062a4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061c2:	4b3b      	ldr	r3, [pc, #236]	@ (80062b0 <xTaskPriorityDisinherit+0x104>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d00b      	beq.n	80061e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60fb      	str	r3, [r7, #12]
}
 80061de:	bf00      	nop
 80061e0:	bf00      	nop
 80061e2:	e7fd      	b.n	80061e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10b      	bne.n	8006204 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	60bb      	str	r3, [r7, #8]
}
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
 8006202:	e7fd      	b.n	8006200 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006208:	1e5a      	subs	r2, r3, #1
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006216:	429a      	cmp	r2, r3
 8006218:	d044      	beq.n	80062a4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621e:	2b00      	cmp	r3, #0
 8006220:	d140      	bne.n	80062a4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3304      	adds	r3, #4
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe fb50 	bl	80048cc <uxListRemove>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d115      	bne.n	800625e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006236:	491f      	ldr	r1, [pc, #124]	@ (80062b4 <xTaskPriorityDisinherit+0x108>)
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xTaskPriorityDisinherit+0xb2>
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624c:	2201      	movs	r2, #1
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	43da      	mvns	r2, r3
 8006254:	4b18      	ldr	r3, [pc, #96]	@ (80062b8 <xTaskPriorityDisinherit+0x10c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4013      	ands	r3, r2
 800625a:	4a17      	ldr	r2, [pc, #92]	@ (80062b8 <xTaskPriorityDisinherit+0x10c>)
 800625c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626a:	f1c3 0207 	rsb	r2, r3, #7
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	2201      	movs	r2, #1
 8006278:	409a      	lsls	r2, r3
 800627a:	4b0f      	ldr	r3, [pc, #60]	@ (80062b8 <xTaskPriorityDisinherit+0x10c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4313      	orrs	r3, r2
 8006280:	4a0d      	ldr	r2, [pc, #52]	@ (80062b8 <xTaskPriorityDisinherit+0x10c>)
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4a08      	ldr	r2, [pc, #32]	@ (80062b4 <xTaskPriorityDisinherit+0x108>)
 8006292:	441a      	add	r2, r3
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f7fe fab9 	bl	8004812 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062a4:	697b      	ldr	r3, [r7, #20]
	}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000420 	.word	0x20000420
 80062b4:	20000424 	.word	0x20000424
 80062b8:	20000528 	.word	0x20000528

080062bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80062ca:	2301      	movs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d079      	beq.n	80063c8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	60fb      	str	r3, [r7, #12]
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d902      	bls.n	8006304 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	e002      	b.n	800630a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006308:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	429a      	cmp	r2, r3
 8006312:	d059      	beq.n	80063c8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	429a      	cmp	r2, r3
 800631c:	d154      	bne.n	80063c8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800631e:	4b2c      	ldr	r3, [pc, #176]	@ (80063d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	429a      	cmp	r2, r3
 8006326:	d10b      	bne.n	8006340 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	60bb      	str	r3, [r7, #8]
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	db04      	blt.n	800635e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f1c3 0207 	rsb	r2, r3, #7
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	6959      	ldr	r1, [r3, #20]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4a19      	ldr	r2, [pc, #100]	@ (80063d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800636e:	4413      	add	r3, r2
 8006370:	4299      	cmp	r1, r3
 8006372:	d129      	bne.n	80063c8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	3304      	adds	r3, #4
 8006378:	4618      	mov	r0, r3
 800637a:	f7fe faa7 	bl	80048cc <uxListRemove>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	2201      	movs	r2, #1
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	43da      	mvns	r2, r3
 8006390:	4b11      	ldr	r3, [pc, #68]	@ (80063d8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4013      	ands	r3, r2
 8006396:	4a10      	ldr	r2, [pc, #64]	@ (80063d8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006398:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639e:	2201      	movs	r2, #1
 80063a0:	409a      	lsls	r2, r3
 80063a2:	4b0d      	ldr	r3, [pc, #52]	@ (80063d8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	4a0b      	ldr	r2, [pc, #44]	@ (80063d8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4a06      	ldr	r2, [pc, #24]	@ (80063d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80063ba:	441a      	add	r2, r3
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	3304      	adds	r3, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f7fe fa25 	bl	8004812 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063c8:	bf00      	nop
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000420 	.word	0x20000420
 80063d4:	20000424 	.word	0x20000424
 80063d8:	20000528 	.word	0x20000528

080063dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80063e0:	4b07      	ldr	r3, [pc, #28]	@ (8006400 <pvTaskIncrementMutexHeldCount+0x24>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80063e8:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <pvTaskIncrementMutexHeldCount+0x24>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063ee:	3201      	adds	r2, #1
 80063f0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80063f2:	4b03      	ldr	r3, [pc, #12]	@ (8006400 <pvTaskIncrementMutexHeldCount+0x24>)
 80063f4:	681b      	ldr	r3, [r3, #0]
	}
 80063f6:	4618      	mov	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	20000420 	.word	0x20000420

08006404 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800640e:	4b29      	ldr	r3, [pc, #164]	@ (80064b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006414:	4b28      	ldr	r3, [pc, #160]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3304      	adds	r3, #4
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fa56 	bl	80048cc <uxListRemove>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006426:	4b24      	ldr	r3, [pc, #144]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642c:	2201      	movs	r2, #1
 800642e:	fa02 f303 	lsl.w	r3, r2, r3
 8006432:	43da      	mvns	r2, r3
 8006434:	4b21      	ldr	r3, [pc, #132]	@ (80064bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4013      	ands	r3, r2
 800643a:	4a20      	ldr	r2, [pc, #128]	@ (80064bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800643c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d10a      	bne.n	800645c <prvAddCurrentTaskToDelayedList+0x58>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d007      	beq.n	800645c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800644c:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	481a      	ldr	r0, [pc, #104]	@ (80064c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006456:	f7fe f9dc 	bl	8004812 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800645a:	e026      	b.n	80064aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4413      	add	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006464:	4b14      	ldr	r3, [pc, #80]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	429a      	cmp	r2, r3
 8006472:	d209      	bcs.n	8006488 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006474:	4b13      	ldr	r3, [pc, #76]	@ (80064c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4b0f      	ldr	r3, [pc, #60]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3304      	adds	r3, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f7fe f9ea 	bl	800485a <vListInsert>
}
 8006486:	e010      	b.n	80064aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006488:	4b0f      	ldr	r3, [pc, #60]	@ (80064c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	4b0a      	ldr	r3, [pc, #40]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3304      	adds	r3, #4
 8006492:	4619      	mov	r1, r3
 8006494:	4610      	mov	r0, r2
 8006496:	f7fe f9e0 	bl	800485a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800649a:	4b0c      	ldr	r3, [pc, #48]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d202      	bcs.n	80064aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80064a4:	4a09      	ldr	r2, [pc, #36]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6013      	str	r3, [r2, #0]
}
 80064aa:	bf00      	nop
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000524 	.word	0x20000524
 80064b8:	20000420 	.word	0x20000420
 80064bc:	20000528 	.word	0x20000528
 80064c0:	2000050c 	.word	0x2000050c
 80064c4:	200004dc 	.word	0x200004dc
 80064c8:	200004d8 	.word	0x200004d8
 80064cc:	20000540 	.word	0x20000540

080064d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3b04      	subs	r3, #4
 80064e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3b04      	subs	r3, #4
 80064ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3b04      	subs	r3, #4
 80064fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006500:	4a0c      	ldr	r2, [pc, #48]	@ (8006534 <pxPortInitialiseStack+0x64>)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3b14      	subs	r3, #20
 800650a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3b04      	subs	r3, #4
 8006516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f06f 0202 	mvn.w	r2, #2
 800651e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3b20      	subs	r3, #32
 8006524:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006526:	68fb      	ldr	r3, [r7, #12]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	08006539 	.word	0x08006539

08006538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006542:	4b13      	ldr	r3, [pc, #76]	@ (8006590 <prvTaskExitError+0x58>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d00b      	beq.n	8006564 <prvTaskExitError+0x2c>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60fb      	str	r3, [r7, #12]
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	e7fd      	b.n	8006560 <prvTaskExitError+0x28>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	60bb      	str	r3, [r7, #8]
}
 8006576:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006578:	bf00      	nop
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0fc      	beq.n	800657a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	20000090 	.word	0x20000090
	...

080065a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065a0:	4b07      	ldr	r3, [pc, #28]	@ (80065c0 <pxCurrentTCBConst2>)
 80065a2:	6819      	ldr	r1, [r3, #0]
 80065a4:	6808      	ldr	r0, [r1, #0]
 80065a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	f380 8809 	msr	PSP, r0
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f380 8811 	msr	BASEPRI, r0
 80065ba:	4770      	bx	lr
 80065bc:	f3af 8000 	nop.w

080065c0 <pxCurrentTCBConst2>:
 80065c0:	20000420 	.word	0x20000420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop

080065c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065c8:	4808      	ldr	r0, [pc, #32]	@ (80065ec <prvPortStartFirstTask+0x24>)
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	6800      	ldr	r0, [r0, #0]
 80065ce:	f380 8808 	msr	MSP, r0
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8814 	msr	CONTROL, r0
 80065da:	b662      	cpsie	i
 80065dc:	b661      	cpsie	f
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	df00      	svc	0
 80065e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065ea:	bf00      	nop
 80065ec:	e000ed08 	.word	0xe000ed08

080065f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065f6:	4b47      	ldr	r3, [pc, #284]	@ (8006714 <xPortStartScheduler+0x124>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a47      	ldr	r2, [pc, #284]	@ (8006718 <xPortStartScheduler+0x128>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10b      	bne.n	8006618 <xPortStartScheduler+0x28>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	e7fd      	b.n	8006614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006618:	4b3e      	ldr	r3, [pc, #248]	@ (8006714 <xPortStartScheduler+0x124>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a3f      	ldr	r2, [pc, #252]	@ (800671c <xPortStartScheduler+0x12c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d10b      	bne.n	800663a <xPortStartScheduler+0x4a>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	613b      	str	r3, [r7, #16]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800663a:	4b39      	ldr	r3, [pc, #228]	@ (8006720 <xPortStartScheduler+0x130>)
 800663c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	22ff      	movs	r2, #255	@ 0xff
 800664a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800665c:	b2da      	uxtb	r2, r3
 800665e:	4b31      	ldr	r3, [pc, #196]	@ (8006724 <xPortStartScheduler+0x134>)
 8006660:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006662:	4b31      	ldr	r3, [pc, #196]	@ (8006728 <xPortStartScheduler+0x138>)
 8006664:	2207      	movs	r2, #7
 8006666:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006668:	e009      	b.n	800667e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800666a:	4b2f      	ldr	r3, [pc, #188]	@ (8006728 <xPortStartScheduler+0x138>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3b01      	subs	r3, #1
 8006670:	4a2d      	ldr	r2, [pc, #180]	@ (8006728 <xPortStartScheduler+0x138>)
 8006672:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	b2db      	uxtb	r3, r3
 800667c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	b2db      	uxtb	r3, r3
 8006682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006686:	2b80      	cmp	r3, #128	@ 0x80
 8006688:	d0ef      	beq.n	800666a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800668a:	4b27      	ldr	r3, [pc, #156]	@ (8006728 <xPortStartScheduler+0x138>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f1c3 0307 	rsb	r3, r3, #7
 8006692:	2b04      	cmp	r3, #4
 8006694:	d00b      	beq.n	80066ae <xPortStartScheduler+0xbe>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60bb      	str	r3, [r7, #8]
}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	e7fd      	b.n	80066aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006728 <xPortStartScheduler+0x138>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006728 <xPortStartScheduler+0x138>)
 80066b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006728 <xPortStartScheduler+0x138>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066c0:	4a19      	ldr	r2, [pc, #100]	@ (8006728 <xPortStartScheduler+0x138>)
 80066c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066cc:	4b17      	ldr	r3, [pc, #92]	@ (800672c <xPortStartScheduler+0x13c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a16      	ldr	r2, [pc, #88]	@ (800672c <xPortStartScheduler+0x13c>)
 80066d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066d8:	4b14      	ldr	r3, [pc, #80]	@ (800672c <xPortStartScheduler+0x13c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a13      	ldr	r2, [pc, #76]	@ (800672c <xPortStartScheduler+0x13c>)
 80066de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066e4:	f000 f8da 	bl	800689c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066e8:	4b11      	ldr	r3, [pc, #68]	@ (8006730 <xPortStartScheduler+0x140>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066ee:	f000 f8f9 	bl	80068e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066f2:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <xPortStartScheduler+0x144>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006734 <xPortStartScheduler+0x144>)
 80066f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066fe:	f7ff ff63 	bl	80065c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006702:	f7ff fa7d 	bl	8005c00 <vTaskSwitchContext>
	prvTaskExitError();
 8006706:	f7ff ff17 	bl	8006538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	e000ed00 	.word	0xe000ed00
 8006718:	410fc271 	.word	0x410fc271
 800671c:	410fc270 	.word	0x410fc270
 8006720:	e000e400 	.word	0xe000e400
 8006724:	2000054c 	.word	0x2000054c
 8006728:	20000550 	.word	0x20000550
 800672c:	e000ed20 	.word	0xe000ed20
 8006730:	20000090 	.word	0x20000090
 8006734:	e000ef34 	.word	0xe000ef34

08006738 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	607b      	str	r3, [r7, #4]
}
 8006750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006752:	4b10      	ldr	r3, [pc, #64]	@ (8006794 <vPortEnterCritical+0x5c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3301      	adds	r3, #1
 8006758:	4a0e      	ldr	r2, [pc, #56]	@ (8006794 <vPortEnterCritical+0x5c>)
 800675a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800675c:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <vPortEnterCritical+0x5c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d110      	bne.n	8006786 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006764:	4b0c      	ldr	r3, [pc, #48]	@ (8006798 <vPortEnterCritical+0x60>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00b      	beq.n	8006786 <vPortEnterCritical+0x4e>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	603b      	str	r3, [r7, #0]
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	e7fd      	b.n	8006782 <vPortEnterCritical+0x4a>
	}
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000090 	.word	0x20000090
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067a2:	4b12      	ldr	r3, [pc, #72]	@ (80067ec <vPortExitCritical+0x50>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10b      	bne.n	80067c2 <vPortExitCritical+0x26>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	607b      	str	r3, [r7, #4]
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	e7fd      	b.n	80067be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067c2:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <vPortExitCritical+0x50>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	4a08      	ldr	r2, [pc, #32]	@ (80067ec <vPortExitCritical+0x50>)
 80067ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067cc:	4b07      	ldr	r3, [pc, #28]	@ (80067ec <vPortExitCritical+0x50>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <vPortExitCritical+0x44>
 80067d4:	2300      	movs	r3, #0
 80067d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f383 8811 	msr	BASEPRI, r3
}
 80067de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000090 	.word	0x20000090

080067f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067f0:	f3ef 8009 	mrs	r0, PSP
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	4b15      	ldr	r3, [pc, #84]	@ (8006850 <pxCurrentTCBConst>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	f01e 0f10 	tst.w	lr, #16
 8006800:	bf08      	it	eq
 8006802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	6010      	str	r0, [r2, #0]
 800680c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006814:	f380 8811 	msr	BASEPRI, r0
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f7ff f9ee 	bl	8005c00 <vTaskSwitchContext>
 8006824:	f04f 0000 	mov.w	r0, #0
 8006828:	f380 8811 	msr	BASEPRI, r0
 800682c:	bc09      	pop	{r0, r3}
 800682e:	6819      	ldr	r1, [r3, #0]
 8006830:	6808      	ldr	r0, [r1, #0]
 8006832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006836:	f01e 0f10 	tst.w	lr, #16
 800683a:	bf08      	it	eq
 800683c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006840:	f380 8809 	msr	PSP, r0
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	f3af 8000 	nop.w

08006850 <pxCurrentTCBConst>:
 8006850:	20000420 	.word	0x20000420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop

08006858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	607b      	str	r3, [r7, #4]
}
 8006870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006872:	f7ff f90b 	bl	8005a8c <xTaskIncrementTick>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800687c:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <xPortSysTickHandler+0x40>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	2300      	movs	r3, #0
 8006886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	f383 8811 	msr	BASEPRI, r3
}
 800688e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	e000ed04 	.word	0xe000ed04

0800689c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068a0:	4b0b      	ldr	r3, [pc, #44]	@ (80068d0 <vPortSetupTimerInterrupt+0x34>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068a6:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <vPortSetupTimerInterrupt+0x38>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068ac:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <vPortSetupTimerInterrupt+0x3c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a0a      	ldr	r2, [pc, #40]	@ (80068dc <vPortSetupTimerInterrupt+0x40>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	099b      	lsrs	r3, r3, #6
 80068b8:	4a09      	ldr	r2, [pc, #36]	@ (80068e0 <vPortSetupTimerInterrupt+0x44>)
 80068ba:	3b01      	subs	r3, #1
 80068bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068be:	4b04      	ldr	r3, [pc, #16]	@ (80068d0 <vPortSetupTimerInterrupt+0x34>)
 80068c0:	2207      	movs	r2, #7
 80068c2:	601a      	str	r2, [r3, #0]
}
 80068c4:	bf00      	nop
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	e000e010 	.word	0xe000e010
 80068d4:	e000e018 	.word	0xe000e018
 80068d8:	20000064 	.word	0x20000064
 80068dc:	10624dd3 	.word	0x10624dd3
 80068e0:	e000e014 	.word	0xe000e014

080068e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068f4 <vPortEnableVFP+0x10>
 80068e8:	6801      	ldr	r1, [r0, #0]
 80068ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068ee:	6001      	str	r1, [r0, #0]
 80068f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068f2:	bf00      	nop
 80068f4:	e000ed88 	.word	0xe000ed88

080068f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068fe:	f3ef 8305 	mrs	r3, IPSR
 8006902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b0f      	cmp	r3, #15
 8006908:	d915      	bls.n	8006936 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800690a:	4a18      	ldr	r2, [pc, #96]	@ (800696c <vPortValidateInterruptPriority+0x74>)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006914:	4b16      	ldr	r3, [pc, #88]	@ (8006970 <vPortValidateInterruptPriority+0x78>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	7afa      	ldrb	r2, [r7, #11]
 800691a:	429a      	cmp	r2, r3
 800691c:	d20b      	bcs.n	8006936 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	607b      	str	r3, [r7, #4]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006936:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <vPortValidateInterruptPriority+0x7c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800693e:	4b0e      	ldr	r3, [pc, #56]	@ (8006978 <vPortValidateInterruptPriority+0x80>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d90b      	bls.n	800695e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	603b      	str	r3, [r7, #0]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <vPortValidateInterruptPriority+0x62>
	}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	e000e3f0 	.word	0xe000e3f0
 8006970:	2000054c 	.word	0x2000054c
 8006974:	e000ed0c 	.word	0xe000ed0c
 8006978:	20000550 	.word	0x20000550

0800697c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	@ 0x28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006988:	f7fe ffd4 	bl	8005934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800698c:	4b5c      	ldr	r3, [pc, #368]	@ (8006b00 <pvPortMalloc+0x184>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006994:	f000 f924 	bl	8006be0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006998:	4b5a      	ldr	r3, [pc, #360]	@ (8006b04 <pvPortMalloc+0x188>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4013      	ands	r3, r2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f040 8095 	bne.w	8006ad0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01e      	beq.n	80069ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80069ac:	2208      	movs	r2, #8
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d015      	beq.n	80069ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f023 0307 	bic.w	r3, r3, #7
 80069c4:	3308      	adds	r3, #8
 80069c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00b      	beq.n	80069ea <pvPortMalloc+0x6e>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	617b      	str	r3, [r7, #20]
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d06f      	beq.n	8006ad0 <pvPortMalloc+0x154>
 80069f0:	4b45      	ldr	r3, [pc, #276]	@ (8006b08 <pvPortMalloc+0x18c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d86a      	bhi.n	8006ad0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069fa:	4b44      	ldr	r3, [pc, #272]	@ (8006b0c <pvPortMalloc+0x190>)
 80069fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069fe:	4b43      	ldr	r3, [pc, #268]	@ (8006b0c <pvPortMalloc+0x190>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a04:	e004      	b.n	8006a10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d903      	bls.n	8006a22 <pvPortMalloc+0xa6>
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f1      	bne.n	8006a06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a22:	4b37      	ldr	r3, [pc, #220]	@ (8006b00 <pvPortMalloc+0x184>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d051      	beq.n	8006ad0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2208      	movs	r2, #8
 8006a32:	4413      	add	r3, r2
 8006a34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	1ad2      	subs	r2, r2, r3
 8006a46:	2308      	movs	r3, #8
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d920      	bls.n	8006a90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4413      	add	r3, r2
 8006a54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00b      	beq.n	8006a78 <pvPortMalloc+0xfc>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a8a:	69b8      	ldr	r0, [r7, #24]
 8006a8c:	f000 f90a 	bl	8006ca4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a90:	4b1d      	ldr	r3, [pc, #116]	@ (8006b08 <pvPortMalloc+0x18c>)
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006b08 <pvPortMalloc+0x18c>)
 8006a9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b08 <pvPortMalloc+0x18c>)
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8006b10 <pvPortMalloc+0x194>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d203      	bcs.n	8006ab2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006aaa:	4b17      	ldr	r3, [pc, #92]	@ (8006b08 <pvPortMalloc+0x18c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a18      	ldr	r2, [pc, #96]	@ (8006b10 <pvPortMalloc+0x194>)
 8006ab0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	4b13      	ldr	r3, [pc, #76]	@ (8006b04 <pvPortMalloc+0x188>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ac6:	4b13      	ldr	r3, [pc, #76]	@ (8006b14 <pvPortMalloc+0x198>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	4a11      	ldr	r2, [pc, #68]	@ (8006b14 <pvPortMalloc+0x198>)
 8006ace:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ad0:	f7fe ff3e 	bl	8005950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <pvPortMalloc+0x17a>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <pvPortMalloc+0x176>
	return pvReturn;
 8006af6:	69fb      	ldr	r3, [r7, #28]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3728      	adds	r7, #40	@ 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	2000415c 	.word	0x2000415c
 8006b04:	20004170 	.word	0x20004170
 8006b08:	20004160 	.word	0x20004160
 8006b0c:	20004154 	.word	0x20004154
 8006b10:	20004164 	.word	0x20004164
 8006b14:	20004168 	.word	0x20004168

08006b18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d04f      	beq.n	8006bca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	425b      	negs	r3, r3
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4413      	add	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	4b25      	ldr	r3, [pc, #148]	@ (8006bd4 <vPortFree+0xbc>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4013      	ands	r3, r2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10b      	bne.n	8006b5e <vPortFree+0x46>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	60fb      	str	r3, [r7, #12]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00b      	beq.n	8006b7e <vPortFree+0x66>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60bb      	str	r3, [r7, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	e7fd      	b.n	8006b7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	4b14      	ldr	r3, [pc, #80]	@ (8006bd4 <vPortFree+0xbc>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01e      	beq.n	8006bca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d11a      	bne.n	8006bca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd4 <vPortFree+0xbc>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ba4:	f7fe fec6 	bl	8005934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd8 <vPortFree+0xc0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	4a09      	ldr	r2, [pc, #36]	@ (8006bd8 <vPortFree+0xc0>)
 8006bb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bb6:	6938      	ldr	r0, [r7, #16]
 8006bb8:	f000 f874 	bl	8006ca4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bbc:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <vPortFree+0xc4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	4a06      	ldr	r2, [pc, #24]	@ (8006bdc <vPortFree+0xc4>)
 8006bc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bc6:	f7fe fec3 	bl	8005950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bca:	bf00      	nop
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20004170 	.word	0x20004170
 8006bd8:	20004160 	.word	0x20004160
 8006bdc:	2000416c 	.word	0x2000416c

08006be0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006be6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006bea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bec:	4b27      	ldr	r3, [pc, #156]	@ (8006c8c <prvHeapInit+0xac>)
 8006bee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00c      	beq.n	8006c14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3307      	adds	r3, #7
 8006bfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0307 	bic.w	r3, r3, #7
 8006c06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c8c <prvHeapInit+0xac>)
 8006c10:	4413      	add	r3, r2
 8006c12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c18:	4a1d      	ldr	r2, [pc, #116]	@ (8006c90 <prvHeapInit+0xb0>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006c90 <prvHeapInit+0xb0>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4413      	add	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c2c:	2208      	movs	r2, #8
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1a9b      	subs	r3, r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <prvHeapInit+0xb4>)
 8006c40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c42:	4b14      	ldr	r3, [pc, #80]	@ (8006c94 <prvHeapInit+0xb4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2200      	movs	r2, #0
 8006c48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c4a:	4b12      	ldr	r3, [pc, #72]	@ (8006c94 <prvHeapInit+0xb4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	1ad2      	subs	r2, r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c60:	4b0c      	ldr	r3, [pc, #48]	@ (8006c94 <prvHeapInit+0xb4>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c98 <prvHeapInit+0xb8>)
 8006c6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	4a09      	ldr	r2, [pc, #36]	@ (8006c9c <prvHeapInit+0xbc>)
 8006c76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c78:	4b09      	ldr	r3, [pc, #36]	@ (8006ca0 <prvHeapInit+0xc0>)
 8006c7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c7e:	601a      	str	r2, [r3, #0]
}
 8006c80:	bf00      	nop
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	20000554 	.word	0x20000554
 8006c90:	20004154 	.word	0x20004154
 8006c94:	2000415c 	.word	0x2000415c
 8006c98:	20004164 	.word	0x20004164
 8006c9c:	20004160 	.word	0x20004160
 8006ca0:	20004170 	.word	0x20004170

08006ca4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cac:	4b28      	ldr	r3, [pc, #160]	@ (8006d50 <prvInsertBlockIntoFreeList+0xac>)
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	e002      	b.n	8006cb8 <prvInsertBlockIntoFreeList+0x14>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d8f7      	bhi.n	8006cb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d108      	bne.n	8006ce6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	441a      	add	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	441a      	add	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d118      	bne.n	8006d2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b15      	ldr	r3, [pc, #84]	@ (8006d54 <prvInsertBlockIntoFreeList+0xb0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d00d      	beq.n	8006d22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	441a      	add	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	e008      	b.n	8006d34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d22:	4b0c      	ldr	r3, [pc, #48]	@ (8006d54 <prvInsertBlockIntoFreeList+0xb0>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	e003      	b.n	8006d34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d002      	beq.n	8006d42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d42:	bf00      	nop
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20004154 	.word	0x20004154
 8006d54:	2000415c 	.word	0x2000415c

08006d58 <siprintf>:
 8006d58:	b40e      	push	{r1, r2, r3}
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	b09d      	sub	sp, #116	@ 0x74
 8006d5e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006d60:	9002      	str	r0, [sp, #8]
 8006d62:	9006      	str	r0, [sp, #24]
 8006d64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d68:	480a      	ldr	r0, [pc, #40]	@ (8006d94 <siprintf+0x3c>)
 8006d6a:	9107      	str	r1, [sp, #28]
 8006d6c:	9104      	str	r1, [sp, #16]
 8006d6e:	490a      	ldr	r1, [pc, #40]	@ (8006d98 <siprintf+0x40>)
 8006d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d74:	9105      	str	r1, [sp, #20]
 8006d76:	2400      	movs	r4, #0
 8006d78:	a902      	add	r1, sp, #8
 8006d7a:	6800      	ldr	r0, [r0, #0]
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006d80:	f000 f9a2 	bl	80070c8 <_svfiprintf_r>
 8006d84:	9b02      	ldr	r3, [sp, #8]
 8006d86:	701c      	strb	r4, [r3, #0]
 8006d88:	b01d      	add	sp, #116	@ 0x74
 8006d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d8e:	b003      	add	sp, #12
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000094 	.word	0x20000094
 8006d98:	ffff0208 	.word	0xffff0208

08006d9c <memset>:
 8006d9c:	4402      	add	r2, r0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d100      	bne.n	8006da6 <memset+0xa>
 8006da4:	4770      	bx	lr
 8006da6:	f803 1b01 	strb.w	r1, [r3], #1
 8006daa:	e7f9      	b.n	8006da0 <memset+0x4>

08006dac <__errno>:
 8006dac:	4b01      	ldr	r3, [pc, #4]	@ (8006db4 <__errno+0x8>)
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000094 	.word	0x20000094

08006db8 <__libc_init_array>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	4d0d      	ldr	r5, [pc, #52]	@ (8006df0 <__libc_init_array+0x38>)
 8006dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8006df4 <__libc_init_array+0x3c>)
 8006dbe:	1b64      	subs	r4, r4, r5
 8006dc0:	10a4      	asrs	r4, r4, #2
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	42a6      	cmp	r6, r4
 8006dc6:	d109      	bne.n	8006ddc <__libc_init_array+0x24>
 8006dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8006df8 <__libc_init_array+0x40>)
 8006dca:	4c0c      	ldr	r4, [pc, #48]	@ (8006dfc <__libc_init_array+0x44>)
 8006dcc:	f000 fc64 	bl	8007698 <_init>
 8006dd0:	1b64      	subs	r4, r4, r5
 8006dd2:	10a4      	asrs	r4, r4, #2
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	42a6      	cmp	r6, r4
 8006dd8:	d105      	bne.n	8006de6 <__libc_init_array+0x2e>
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de0:	4798      	blx	r3
 8006de2:	3601      	adds	r6, #1
 8006de4:	e7ee      	b.n	8006dc4 <__libc_init_array+0xc>
 8006de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dea:	4798      	blx	r3
 8006dec:	3601      	adds	r6, #1
 8006dee:	e7f2      	b.n	8006dd6 <__libc_init_array+0x1e>
 8006df0:	08007c84 	.word	0x08007c84
 8006df4:	08007c84 	.word	0x08007c84
 8006df8:	08007c84 	.word	0x08007c84
 8006dfc:	08007c88 	.word	0x08007c88

08006e00 <__retarget_lock_acquire_recursive>:
 8006e00:	4770      	bx	lr

08006e02 <__retarget_lock_release_recursive>:
 8006e02:	4770      	bx	lr

08006e04 <memcpy>:
 8006e04:	440a      	add	r2, r1
 8006e06:	4291      	cmp	r1, r2
 8006e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e0c:	d100      	bne.n	8006e10 <memcpy+0xc>
 8006e0e:	4770      	bx	lr
 8006e10:	b510      	push	{r4, lr}
 8006e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e1a:	4291      	cmp	r1, r2
 8006e1c:	d1f9      	bne.n	8006e12 <memcpy+0xe>
 8006e1e:	bd10      	pop	{r4, pc}

08006e20 <_free_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4605      	mov	r5, r0
 8006e24:	2900      	cmp	r1, #0
 8006e26:	d041      	beq.n	8006eac <_free_r+0x8c>
 8006e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e2c:	1f0c      	subs	r4, r1, #4
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	bfb8      	it	lt
 8006e32:	18e4      	addlt	r4, r4, r3
 8006e34:	f000 f8e0 	bl	8006ff8 <__malloc_lock>
 8006e38:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb0 <_free_r+0x90>)
 8006e3a:	6813      	ldr	r3, [r2, #0]
 8006e3c:	b933      	cbnz	r3, 8006e4c <_free_r+0x2c>
 8006e3e:	6063      	str	r3, [r4, #4]
 8006e40:	6014      	str	r4, [r2, #0]
 8006e42:	4628      	mov	r0, r5
 8006e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e48:	f000 b8dc 	b.w	8007004 <__malloc_unlock>
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d908      	bls.n	8006e62 <_free_r+0x42>
 8006e50:	6820      	ldr	r0, [r4, #0]
 8006e52:	1821      	adds	r1, r4, r0
 8006e54:	428b      	cmp	r3, r1
 8006e56:	bf01      	itttt	eq
 8006e58:	6819      	ldreq	r1, [r3, #0]
 8006e5a:	685b      	ldreq	r3, [r3, #4]
 8006e5c:	1809      	addeq	r1, r1, r0
 8006e5e:	6021      	streq	r1, [r4, #0]
 8006e60:	e7ed      	b.n	8006e3e <_free_r+0x1e>
 8006e62:	461a      	mov	r2, r3
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	b10b      	cbz	r3, 8006e6c <_free_r+0x4c>
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d9fa      	bls.n	8006e62 <_free_r+0x42>
 8006e6c:	6811      	ldr	r1, [r2, #0]
 8006e6e:	1850      	adds	r0, r2, r1
 8006e70:	42a0      	cmp	r0, r4
 8006e72:	d10b      	bne.n	8006e8c <_free_r+0x6c>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	4401      	add	r1, r0
 8006e78:	1850      	adds	r0, r2, r1
 8006e7a:	4283      	cmp	r3, r0
 8006e7c:	6011      	str	r1, [r2, #0]
 8006e7e:	d1e0      	bne.n	8006e42 <_free_r+0x22>
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	6053      	str	r3, [r2, #4]
 8006e86:	4408      	add	r0, r1
 8006e88:	6010      	str	r0, [r2, #0]
 8006e8a:	e7da      	b.n	8006e42 <_free_r+0x22>
 8006e8c:	d902      	bls.n	8006e94 <_free_r+0x74>
 8006e8e:	230c      	movs	r3, #12
 8006e90:	602b      	str	r3, [r5, #0]
 8006e92:	e7d6      	b.n	8006e42 <_free_r+0x22>
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	1821      	adds	r1, r4, r0
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	bf04      	itt	eq
 8006e9c:	6819      	ldreq	r1, [r3, #0]
 8006e9e:	685b      	ldreq	r3, [r3, #4]
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	bf04      	itt	eq
 8006ea4:	1809      	addeq	r1, r1, r0
 8006ea6:	6021      	streq	r1, [r4, #0]
 8006ea8:	6054      	str	r4, [r2, #4]
 8006eaa:	e7ca      	b.n	8006e42 <_free_r+0x22>
 8006eac:	bd38      	pop	{r3, r4, r5, pc}
 8006eae:	bf00      	nop
 8006eb0:	200042b8 	.word	0x200042b8

08006eb4 <sbrk_aligned>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8006ef4 <sbrk_aligned+0x40>)
 8006eb8:	460c      	mov	r4, r1
 8006eba:	6831      	ldr	r1, [r6, #0]
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	b911      	cbnz	r1, 8006ec6 <sbrk_aligned+0x12>
 8006ec0:	f000 fba4 	bl	800760c <_sbrk_r>
 8006ec4:	6030      	str	r0, [r6, #0]
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 fb9f 	bl	800760c <_sbrk_r>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d103      	bne.n	8006eda <sbrk_aligned+0x26>
 8006ed2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	bd70      	pop	{r4, r5, r6, pc}
 8006eda:	1cc4      	adds	r4, r0, #3
 8006edc:	f024 0403 	bic.w	r4, r4, #3
 8006ee0:	42a0      	cmp	r0, r4
 8006ee2:	d0f8      	beq.n	8006ed6 <sbrk_aligned+0x22>
 8006ee4:	1a21      	subs	r1, r4, r0
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 fb90 	bl	800760c <_sbrk_r>
 8006eec:	3001      	adds	r0, #1
 8006eee:	d1f2      	bne.n	8006ed6 <sbrk_aligned+0x22>
 8006ef0:	e7ef      	b.n	8006ed2 <sbrk_aligned+0x1e>
 8006ef2:	bf00      	nop
 8006ef4:	200042b4 	.word	0x200042b4

08006ef8 <_malloc_r>:
 8006ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006efc:	1ccd      	adds	r5, r1, #3
 8006efe:	f025 0503 	bic.w	r5, r5, #3
 8006f02:	3508      	adds	r5, #8
 8006f04:	2d0c      	cmp	r5, #12
 8006f06:	bf38      	it	cc
 8006f08:	250c      	movcc	r5, #12
 8006f0a:	2d00      	cmp	r5, #0
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	db01      	blt.n	8006f14 <_malloc_r+0x1c>
 8006f10:	42a9      	cmp	r1, r5
 8006f12:	d904      	bls.n	8006f1e <_malloc_r+0x26>
 8006f14:	230c      	movs	r3, #12
 8006f16:	6033      	str	r3, [r6, #0]
 8006f18:	2000      	movs	r0, #0
 8006f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ff4 <_malloc_r+0xfc>
 8006f22:	f000 f869 	bl	8006ff8 <__malloc_lock>
 8006f26:	f8d8 3000 	ldr.w	r3, [r8]
 8006f2a:	461c      	mov	r4, r3
 8006f2c:	bb44      	cbnz	r4, 8006f80 <_malloc_r+0x88>
 8006f2e:	4629      	mov	r1, r5
 8006f30:	4630      	mov	r0, r6
 8006f32:	f7ff ffbf 	bl	8006eb4 <sbrk_aligned>
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	4604      	mov	r4, r0
 8006f3a:	d158      	bne.n	8006fee <_malloc_r+0xf6>
 8006f3c:	f8d8 4000 	ldr.w	r4, [r8]
 8006f40:	4627      	mov	r7, r4
 8006f42:	2f00      	cmp	r7, #0
 8006f44:	d143      	bne.n	8006fce <_malloc_r+0xd6>
 8006f46:	2c00      	cmp	r4, #0
 8006f48:	d04b      	beq.n	8006fe2 <_malloc_r+0xea>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	4639      	mov	r1, r7
 8006f4e:	4630      	mov	r0, r6
 8006f50:	eb04 0903 	add.w	r9, r4, r3
 8006f54:	f000 fb5a 	bl	800760c <_sbrk_r>
 8006f58:	4581      	cmp	r9, r0
 8006f5a:	d142      	bne.n	8006fe2 <_malloc_r+0xea>
 8006f5c:	6821      	ldr	r1, [r4, #0]
 8006f5e:	1a6d      	subs	r5, r5, r1
 8006f60:	4629      	mov	r1, r5
 8006f62:	4630      	mov	r0, r6
 8006f64:	f7ff ffa6 	bl	8006eb4 <sbrk_aligned>
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d03a      	beq.n	8006fe2 <_malloc_r+0xea>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	442b      	add	r3, r5
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	f8d8 3000 	ldr.w	r3, [r8]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	bb62      	cbnz	r2, 8006fd4 <_malloc_r+0xdc>
 8006f7a:	f8c8 7000 	str.w	r7, [r8]
 8006f7e:	e00f      	b.n	8006fa0 <_malloc_r+0xa8>
 8006f80:	6822      	ldr	r2, [r4, #0]
 8006f82:	1b52      	subs	r2, r2, r5
 8006f84:	d420      	bmi.n	8006fc8 <_malloc_r+0xd0>
 8006f86:	2a0b      	cmp	r2, #11
 8006f88:	d917      	bls.n	8006fba <_malloc_r+0xc2>
 8006f8a:	1961      	adds	r1, r4, r5
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	6025      	str	r5, [r4, #0]
 8006f90:	bf18      	it	ne
 8006f92:	6059      	strne	r1, [r3, #4]
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	bf08      	it	eq
 8006f98:	f8c8 1000 	streq.w	r1, [r8]
 8006f9c:	5162      	str	r2, [r4, r5]
 8006f9e:	604b      	str	r3, [r1, #4]
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f000 f82f 	bl	8007004 <__malloc_unlock>
 8006fa6:	f104 000b 	add.w	r0, r4, #11
 8006faa:	1d23      	adds	r3, r4, #4
 8006fac:	f020 0007 	bic.w	r0, r0, #7
 8006fb0:	1ac2      	subs	r2, r0, r3
 8006fb2:	bf1c      	itt	ne
 8006fb4:	1a1b      	subne	r3, r3, r0
 8006fb6:	50a3      	strne	r3, [r4, r2]
 8006fb8:	e7af      	b.n	8006f1a <_malloc_r+0x22>
 8006fba:	6862      	ldr	r2, [r4, #4]
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	bf0c      	ite	eq
 8006fc0:	f8c8 2000 	streq.w	r2, [r8]
 8006fc4:	605a      	strne	r2, [r3, #4]
 8006fc6:	e7eb      	b.n	8006fa0 <_malloc_r+0xa8>
 8006fc8:	4623      	mov	r3, r4
 8006fca:	6864      	ldr	r4, [r4, #4]
 8006fcc:	e7ae      	b.n	8006f2c <_malloc_r+0x34>
 8006fce:	463c      	mov	r4, r7
 8006fd0:	687f      	ldr	r7, [r7, #4]
 8006fd2:	e7b6      	b.n	8006f42 <_malloc_r+0x4a>
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	42a3      	cmp	r3, r4
 8006fda:	d1fb      	bne.n	8006fd4 <_malloc_r+0xdc>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	6053      	str	r3, [r2, #4]
 8006fe0:	e7de      	b.n	8006fa0 <_malloc_r+0xa8>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	6033      	str	r3, [r6, #0]
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f000 f80c 	bl	8007004 <__malloc_unlock>
 8006fec:	e794      	b.n	8006f18 <_malloc_r+0x20>
 8006fee:	6005      	str	r5, [r0, #0]
 8006ff0:	e7d6      	b.n	8006fa0 <_malloc_r+0xa8>
 8006ff2:	bf00      	nop
 8006ff4:	200042b8 	.word	0x200042b8

08006ff8 <__malloc_lock>:
 8006ff8:	4801      	ldr	r0, [pc, #4]	@ (8007000 <__malloc_lock+0x8>)
 8006ffa:	f7ff bf01 	b.w	8006e00 <__retarget_lock_acquire_recursive>
 8006ffe:	bf00      	nop
 8007000:	200042b0 	.word	0x200042b0

08007004 <__malloc_unlock>:
 8007004:	4801      	ldr	r0, [pc, #4]	@ (800700c <__malloc_unlock+0x8>)
 8007006:	f7ff befc 	b.w	8006e02 <__retarget_lock_release_recursive>
 800700a:	bf00      	nop
 800700c:	200042b0 	.word	0x200042b0

08007010 <__ssputs_r>:
 8007010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007014:	688e      	ldr	r6, [r1, #8]
 8007016:	461f      	mov	r7, r3
 8007018:	42be      	cmp	r6, r7
 800701a:	680b      	ldr	r3, [r1, #0]
 800701c:	4682      	mov	sl, r0
 800701e:	460c      	mov	r4, r1
 8007020:	4690      	mov	r8, r2
 8007022:	d82d      	bhi.n	8007080 <__ssputs_r+0x70>
 8007024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007028:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800702c:	d026      	beq.n	800707c <__ssputs_r+0x6c>
 800702e:	6965      	ldr	r5, [r4, #20]
 8007030:	6909      	ldr	r1, [r1, #16]
 8007032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007036:	eba3 0901 	sub.w	r9, r3, r1
 800703a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800703e:	1c7b      	adds	r3, r7, #1
 8007040:	444b      	add	r3, r9
 8007042:	106d      	asrs	r5, r5, #1
 8007044:	429d      	cmp	r5, r3
 8007046:	bf38      	it	cc
 8007048:	461d      	movcc	r5, r3
 800704a:	0553      	lsls	r3, r2, #21
 800704c:	d527      	bpl.n	800709e <__ssputs_r+0x8e>
 800704e:	4629      	mov	r1, r5
 8007050:	f7ff ff52 	bl	8006ef8 <_malloc_r>
 8007054:	4606      	mov	r6, r0
 8007056:	b360      	cbz	r0, 80070b2 <__ssputs_r+0xa2>
 8007058:	6921      	ldr	r1, [r4, #16]
 800705a:	464a      	mov	r2, r9
 800705c:	f7ff fed2 	bl	8006e04 <memcpy>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	6126      	str	r6, [r4, #16]
 800706e:	6165      	str	r5, [r4, #20]
 8007070:	444e      	add	r6, r9
 8007072:	eba5 0509 	sub.w	r5, r5, r9
 8007076:	6026      	str	r6, [r4, #0]
 8007078:	60a5      	str	r5, [r4, #8]
 800707a:	463e      	mov	r6, r7
 800707c:	42be      	cmp	r6, r7
 800707e:	d900      	bls.n	8007082 <__ssputs_r+0x72>
 8007080:	463e      	mov	r6, r7
 8007082:	6820      	ldr	r0, [r4, #0]
 8007084:	4632      	mov	r2, r6
 8007086:	4641      	mov	r1, r8
 8007088:	f000 faa6 	bl	80075d8 <memmove>
 800708c:	68a3      	ldr	r3, [r4, #8]
 800708e:	1b9b      	subs	r3, r3, r6
 8007090:	60a3      	str	r3, [r4, #8]
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	4433      	add	r3, r6
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	2000      	movs	r0, #0
 800709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709e:	462a      	mov	r2, r5
 80070a0:	f000 fac4 	bl	800762c <_realloc_r>
 80070a4:	4606      	mov	r6, r0
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d1e0      	bne.n	800706c <__ssputs_r+0x5c>
 80070aa:	6921      	ldr	r1, [r4, #16]
 80070ac:	4650      	mov	r0, sl
 80070ae:	f7ff feb7 	bl	8006e20 <_free_r>
 80070b2:	230c      	movs	r3, #12
 80070b4:	f8ca 3000 	str.w	r3, [sl]
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	e7e9      	b.n	800709a <__ssputs_r+0x8a>
	...

080070c8 <_svfiprintf_r>:
 80070c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	4698      	mov	r8, r3
 80070ce:	898b      	ldrh	r3, [r1, #12]
 80070d0:	061b      	lsls	r3, r3, #24
 80070d2:	b09d      	sub	sp, #116	@ 0x74
 80070d4:	4607      	mov	r7, r0
 80070d6:	460d      	mov	r5, r1
 80070d8:	4614      	mov	r4, r2
 80070da:	d510      	bpl.n	80070fe <_svfiprintf_r+0x36>
 80070dc:	690b      	ldr	r3, [r1, #16]
 80070de:	b973      	cbnz	r3, 80070fe <_svfiprintf_r+0x36>
 80070e0:	2140      	movs	r1, #64	@ 0x40
 80070e2:	f7ff ff09 	bl	8006ef8 <_malloc_r>
 80070e6:	6028      	str	r0, [r5, #0]
 80070e8:	6128      	str	r0, [r5, #16]
 80070ea:	b930      	cbnz	r0, 80070fa <_svfiprintf_r+0x32>
 80070ec:	230c      	movs	r3, #12
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	b01d      	add	sp, #116	@ 0x74
 80070f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fa:	2340      	movs	r3, #64	@ 0x40
 80070fc:	616b      	str	r3, [r5, #20]
 80070fe:	2300      	movs	r3, #0
 8007100:	9309      	str	r3, [sp, #36]	@ 0x24
 8007102:	2320      	movs	r3, #32
 8007104:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007108:	f8cd 800c 	str.w	r8, [sp, #12]
 800710c:	2330      	movs	r3, #48	@ 0x30
 800710e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80072ac <_svfiprintf_r+0x1e4>
 8007112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007116:	f04f 0901 	mov.w	r9, #1
 800711a:	4623      	mov	r3, r4
 800711c:	469a      	mov	sl, r3
 800711e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007122:	b10a      	cbz	r2, 8007128 <_svfiprintf_r+0x60>
 8007124:	2a25      	cmp	r2, #37	@ 0x25
 8007126:	d1f9      	bne.n	800711c <_svfiprintf_r+0x54>
 8007128:	ebba 0b04 	subs.w	fp, sl, r4
 800712c:	d00b      	beq.n	8007146 <_svfiprintf_r+0x7e>
 800712e:	465b      	mov	r3, fp
 8007130:	4622      	mov	r2, r4
 8007132:	4629      	mov	r1, r5
 8007134:	4638      	mov	r0, r7
 8007136:	f7ff ff6b 	bl	8007010 <__ssputs_r>
 800713a:	3001      	adds	r0, #1
 800713c:	f000 80a7 	beq.w	800728e <_svfiprintf_r+0x1c6>
 8007140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007142:	445a      	add	r2, fp
 8007144:	9209      	str	r2, [sp, #36]	@ 0x24
 8007146:	f89a 3000 	ldrb.w	r3, [sl]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 809f 	beq.w	800728e <_svfiprintf_r+0x1c6>
 8007150:	2300      	movs	r3, #0
 8007152:	f04f 32ff 	mov.w	r2, #4294967295
 8007156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800715a:	f10a 0a01 	add.w	sl, sl, #1
 800715e:	9304      	str	r3, [sp, #16]
 8007160:	9307      	str	r3, [sp, #28]
 8007162:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007166:	931a      	str	r3, [sp, #104]	@ 0x68
 8007168:	4654      	mov	r4, sl
 800716a:	2205      	movs	r2, #5
 800716c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007170:	484e      	ldr	r0, [pc, #312]	@ (80072ac <_svfiprintf_r+0x1e4>)
 8007172:	f7f9 f82d 	bl	80001d0 <memchr>
 8007176:	9a04      	ldr	r2, [sp, #16]
 8007178:	b9d8      	cbnz	r0, 80071b2 <_svfiprintf_r+0xea>
 800717a:	06d0      	lsls	r0, r2, #27
 800717c:	bf44      	itt	mi
 800717e:	2320      	movmi	r3, #32
 8007180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007184:	0711      	lsls	r1, r2, #28
 8007186:	bf44      	itt	mi
 8007188:	232b      	movmi	r3, #43	@ 0x2b
 800718a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800718e:	f89a 3000 	ldrb.w	r3, [sl]
 8007192:	2b2a      	cmp	r3, #42	@ 0x2a
 8007194:	d015      	beq.n	80071c2 <_svfiprintf_r+0xfa>
 8007196:	9a07      	ldr	r2, [sp, #28]
 8007198:	4654      	mov	r4, sl
 800719a:	2000      	movs	r0, #0
 800719c:	f04f 0c0a 	mov.w	ip, #10
 80071a0:	4621      	mov	r1, r4
 80071a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071a6:	3b30      	subs	r3, #48	@ 0x30
 80071a8:	2b09      	cmp	r3, #9
 80071aa:	d94b      	bls.n	8007244 <_svfiprintf_r+0x17c>
 80071ac:	b1b0      	cbz	r0, 80071dc <_svfiprintf_r+0x114>
 80071ae:	9207      	str	r2, [sp, #28]
 80071b0:	e014      	b.n	80071dc <_svfiprintf_r+0x114>
 80071b2:	eba0 0308 	sub.w	r3, r0, r8
 80071b6:	fa09 f303 	lsl.w	r3, r9, r3
 80071ba:	4313      	orrs	r3, r2
 80071bc:	9304      	str	r3, [sp, #16]
 80071be:	46a2      	mov	sl, r4
 80071c0:	e7d2      	b.n	8007168 <_svfiprintf_r+0xa0>
 80071c2:	9b03      	ldr	r3, [sp, #12]
 80071c4:	1d19      	adds	r1, r3, #4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	9103      	str	r1, [sp, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bfbb      	ittet	lt
 80071ce:	425b      	neglt	r3, r3
 80071d0:	f042 0202 	orrlt.w	r2, r2, #2
 80071d4:	9307      	strge	r3, [sp, #28]
 80071d6:	9307      	strlt	r3, [sp, #28]
 80071d8:	bfb8      	it	lt
 80071da:	9204      	strlt	r2, [sp, #16]
 80071dc:	7823      	ldrb	r3, [r4, #0]
 80071de:	2b2e      	cmp	r3, #46	@ 0x2e
 80071e0:	d10a      	bne.n	80071f8 <_svfiprintf_r+0x130>
 80071e2:	7863      	ldrb	r3, [r4, #1]
 80071e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80071e6:	d132      	bne.n	800724e <_svfiprintf_r+0x186>
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	1d1a      	adds	r2, r3, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	9203      	str	r2, [sp, #12]
 80071f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071f4:	3402      	adds	r4, #2
 80071f6:	9305      	str	r3, [sp, #20]
 80071f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80072bc <_svfiprintf_r+0x1f4>
 80071fc:	7821      	ldrb	r1, [r4, #0]
 80071fe:	2203      	movs	r2, #3
 8007200:	4650      	mov	r0, sl
 8007202:	f7f8 ffe5 	bl	80001d0 <memchr>
 8007206:	b138      	cbz	r0, 8007218 <_svfiprintf_r+0x150>
 8007208:	9b04      	ldr	r3, [sp, #16]
 800720a:	eba0 000a 	sub.w	r0, r0, sl
 800720e:	2240      	movs	r2, #64	@ 0x40
 8007210:	4082      	lsls	r2, r0
 8007212:	4313      	orrs	r3, r2
 8007214:	3401      	adds	r4, #1
 8007216:	9304      	str	r3, [sp, #16]
 8007218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721c:	4824      	ldr	r0, [pc, #144]	@ (80072b0 <_svfiprintf_r+0x1e8>)
 800721e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007222:	2206      	movs	r2, #6
 8007224:	f7f8 ffd4 	bl	80001d0 <memchr>
 8007228:	2800      	cmp	r0, #0
 800722a:	d036      	beq.n	800729a <_svfiprintf_r+0x1d2>
 800722c:	4b21      	ldr	r3, [pc, #132]	@ (80072b4 <_svfiprintf_r+0x1ec>)
 800722e:	bb1b      	cbnz	r3, 8007278 <_svfiprintf_r+0x1b0>
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	3307      	adds	r3, #7
 8007234:	f023 0307 	bic.w	r3, r3, #7
 8007238:	3308      	adds	r3, #8
 800723a:	9303      	str	r3, [sp, #12]
 800723c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723e:	4433      	add	r3, r6
 8007240:	9309      	str	r3, [sp, #36]	@ 0x24
 8007242:	e76a      	b.n	800711a <_svfiprintf_r+0x52>
 8007244:	fb0c 3202 	mla	r2, ip, r2, r3
 8007248:	460c      	mov	r4, r1
 800724a:	2001      	movs	r0, #1
 800724c:	e7a8      	b.n	80071a0 <_svfiprintf_r+0xd8>
 800724e:	2300      	movs	r3, #0
 8007250:	3401      	adds	r4, #1
 8007252:	9305      	str	r3, [sp, #20]
 8007254:	4619      	mov	r1, r3
 8007256:	f04f 0c0a 	mov.w	ip, #10
 800725a:	4620      	mov	r0, r4
 800725c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007260:	3a30      	subs	r2, #48	@ 0x30
 8007262:	2a09      	cmp	r2, #9
 8007264:	d903      	bls.n	800726e <_svfiprintf_r+0x1a6>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0c6      	beq.n	80071f8 <_svfiprintf_r+0x130>
 800726a:	9105      	str	r1, [sp, #20]
 800726c:	e7c4      	b.n	80071f8 <_svfiprintf_r+0x130>
 800726e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007272:	4604      	mov	r4, r0
 8007274:	2301      	movs	r3, #1
 8007276:	e7f0      	b.n	800725a <_svfiprintf_r+0x192>
 8007278:	ab03      	add	r3, sp, #12
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	462a      	mov	r2, r5
 800727e:	4b0e      	ldr	r3, [pc, #56]	@ (80072b8 <_svfiprintf_r+0x1f0>)
 8007280:	a904      	add	r1, sp, #16
 8007282:	4638      	mov	r0, r7
 8007284:	f3af 8000 	nop.w
 8007288:	1c42      	adds	r2, r0, #1
 800728a:	4606      	mov	r6, r0
 800728c:	d1d6      	bne.n	800723c <_svfiprintf_r+0x174>
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	065b      	lsls	r3, r3, #25
 8007292:	f53f af2d 	bmi.w	80070f0 <_svfiprintf_r+0x28>
 8007296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007298:	e72c      	b.n	80070f4 <_svfiprintf_r+0x2c>
 800729a:	ab03      	add	r3, sp, #12
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	462a      	mov	r2, r5
 80072a0:	4b05      	ldr	r3, [pc, #20]	@ (80072b8 <_svfiprintf_r+0x1f0>)
 80072a2:	a904      	add	r1, sp, #16
 80072a4:	4638      	mov	r0, r7
 80072a6:	f000 f879 	bl	800739c <_printf_i>
 80072aa:	e7ed      	b.n	8007288 <_svfiprintf_r+0x1c0>
 80072ac:	08007c48 	.word	0x08007c48
 80072b0:	08007c52 	.word	0x08007c52
 80072b4:	00000000 	.word	0x00000000
 80072b8:	08007011 	.word	0x08007011
 80072bc:	08007c4e 	.word	0x08007c4e

080072c0 <_printf_common>:
 80072c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c4:	4616      	mov	r6, r2
 80072c6:	4698      	mov	r8, r3
 80072c8:	688a      	ldr	r2, [r1, #8]
 80072ca:	690b      	ldr	r3, [r1, #16]
 80072cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	bfb8      	it	lt
 80072d4:	4613      	movlt	r3, r2
 80072d6:	6033      	str	r3, [r6, #0]
 80072d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072dc:	4607      	mov	r7, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b10a      	cbz	r2, 80072e6 <_printf_common+0x26>
 80072e2:	3301      	adds	r3, #1
 80072e4:	6033      	str	r3, [r6, #0]
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	0699      	lsls	r1, r3, #26
 80072ea:	bf42      	ittt	mi
 80072ec:	6833      	ldrmi	r3, [r6, #0]
 80072ee:	3302      	addmi	r3, #2
 80072f0:	6033      	strmi	r3, [r6, #0]
 80072f2:	6825      	ldr	r5, [r4, #0]
 80072f4:	f015 0506 	ands.w	r5, r5, #6
 80072f8:	d106      	bne.n	8007308 <_printf_common+0x48>
 80072fa:	f104 0a19 	add.w	sl, r4, #25
 80072fe:	68e3      	ldr	r3, [r4, #12]
 8007300:	6832      	ldr	r2, [r6, #0]
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	42ab      	cmp	r3, r5
 8007306:	dc26      	bgt.n	8007356 <_printf_common+0x96>
 8007308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	3b00      	subs	r3, #0
 8007310:	bf18      	it	ne
 8007312:	2301      	movne	r3, #1
 8007314:	0692      	lsls	r2, r2, #26
 8007316:	d42b      	bmi.n	8007370 <_printf_common+0xb0>
 8007318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800731c:	4641      	mov	r1, r8
 800731e:	4638      	mov	r0, r7
 8007320:	47c8      	blx	r9
 8007322:	3001      	adds	r0, #1
 8007324:	d01e      	beq.n	8007364 <_printf_common+0xa4>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	6922      	ldr	r2, [r4, #16]
 800732a:	f003 0306 	and.w	r3, r3, #6
 800732e:	2b04      	cmp	r3, #4
 8007330:	bf02      	ittt	eq
 8007332:	68e5      	ldreq	r5, [r4, #12]
 8007334:	6833      	ldreq	r3, [r6, #0]
 8007336:	1aed      	subeq	r5, r5, r3
 8007338:	68a3      	ldr	r3, [r4, #8]
 800733a:	bf0c      	ite	eq
 800733c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007340:	2500      	movne	r5, #0
 8007342:	4293      	cmp	r3, r2
 8007344:	bfc4      	itt	gt
 8007346:	1a9b      	subgt	r3, r3, r2
 8007348:	18ed      	addgt	r5, r5, r3
 800734a:	2600      	movs	r6, #0
 800734c:	341a      	adds	r4, #26
 800734e:	42b5      	cmp	r5, r6
 8007350:	d11a      	bne.n	8007388 <_printf_common+0xc8>
 8007352:	2000      	movs	r0, #0
 8007354:	e008      	b.n	8007368 <_printf_common+0xa8>
 8007356:	2301      	movs	r3, #1
 8007358:	4652      	mov	r2, sl
 800735a:	4641      	mov	r1, r8
 800735c:	4638      	mov	r0, r7
 800735e:	47c8      	blx	r9
 8007360:	3001      	adds	r0, #1
 8007362:	d103      	bne.n	800736c <_printf_common+0xac>
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736c:	3501      	adds	r5, #1
 800736e:	e7c6      	b.n	80072fe <_printf_common+0x3e>
 8007370:	18e1      	adds	r1, r4, r3
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	2030      	movs	r0, #48	@ 0x30
 8007376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800737a:	4422      	add	r2, r4
 800737c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007384:	3302      	adds	r3, #2
 8007386:	e7c7      	b.n	8007318 <_printf_common+0x58>
 8007388:	2301      	movs	r3, #1
 800738a:	4622      	mov	r2, r4
 800738c:	4641      	mov	r1, r8
 800738e:	4638      	mov	r0, r7
 8007390:	47c8      	blx	r9
 8007392:	3001      	adds	r0, #1
 8007394:	d0e6      	beq.n	8007364 <_printf_common+0xa4>
 8007396:	3601      	adds	r6, #1
 8007398:	e7d9      	b.n	800734e <_printf_common+0x8e>
	...

0800739c <_printf_i>:
 800739c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	7e0f      	ldrb	r7, [r1, #24]
 80073a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073a4:	2f78      	cmp	r7, #120	@ 0x78
 80073a6:	4691      	mov	r9, r2
 80073a8:	4680      	mov	r8, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	469a      	mov	sl, r3
 80073ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073b2:	d807      	bhi.n	80073c4 <_printf_i+0x28>
 80073b4:	2f62      	cmp	r7, #98	@ 0x62
 80073b6:	d80a      	bhi.n	80073ce <_printf_i+0x32>
 80073b8:	2f00      	cmp	r7, #0
 80073ba:	f000 80d1 	beq.w	8007560 <_printf_i+0x1c4>
 80073be:	2f58      	cmp	r7, #88	@ 0x58
 80073c0:	f000 80b8 	beq.w	8007534 <_printf_i+0x198>
 80073c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073cc:	e03a      	b.n	8007444 <_printf_i+0xa8>
 80073ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073d2:	2b15      	cmp	r3, #21
 80073d4:	d8f6      	bhi.n	80073c4 <_printf_i+0x28>
 80073d6:	a101      	add	r1, pc, #4	@ (adr r1, 80073dc <_printf_i+0x40>)
 80073d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073dc:	08007435 	.word	0x08007435
 80073e0:	08007449 	.word	0x08007449
 80073e4:	080073c5 	.word	0x080073c5
 80073e8:	080073c5 	.word	0x080073c5
 80073ec:	080073c5 	.word	0x080073c5
 80073f0:	080073c5 	.word	0x080073c5
 80073f4:	08007449 	.word	0x08007449
 80073f8:	080073c5 	.word	0x080073c5
 80073fc:	080073c5 	.word	0x080073c5
 8007400:	080073c5 	.word	0x080073c5
 8007404:	080073c5 	.word	0x080073c5
 8007408:	08007547 	.word	0x08007547
 800740c:	08007473 	.word	0x08007473
 8007410:	08007501 	.word	0x08007501
 8007414:	080073c5 	.word	0x080073c5
 8007418:	080073c5 	.word	0x080073c5
 800741c:	08007569 	.word	0x08007569
 8007420:	080073c5 	.word	0x080073c5
 8007424:	08007473 	.word	0x08007473
 8007428:	080073c5 	.word	0x080073c5
 800742c:	080073c5 	.word	0x080073c5
 8007430:	08007509 	.word	0x08007509
 8007434:	6833      	ldr	r3, [r6, #0]
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6032      	str	r2, [r6, #0]
 800743c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007444:	2301      	movs	r3, #1
 8007446:	e09c      	b.n	8007582 <_printf_i+0x1e6>
 8007448:	6833      	ldr	r3, [r6, #0]
 800744a:	6820      	ldr	r0, [r4, #0]
 800744c:	1d19      	adds	r1, r3, #4
 800744e:	6031      	str	r1, [r6, #0]
 8007450:	0606      	lsls	r6, r0, #24
 8007452:	d501      	bpl.n	8007458 <_printf_i+0xbc>
 8007454:	681d      	ldr	r5, [r3, #0]
 8007456:	e003      	b.n	8007460 <_printf_i+0xc4>
 8007458:	0645      	lsls	r5, r0, #25
 800745a:	d5fb      	bpl.n	8007454 <_printf_i+0xb8>
 800745c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007460:	2d00      	cmp	r5, #0
 8007462:	da03      	bge.n	800746c <_printf_i+0xd0>
 8007464:	232d      	movs	r3, #45	@ 0x2d
 8007466:	426d      	negs	r5, r5
 8007468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800746c:	4858      	ldr	r0, [pc, #352]	@ (80075d0 <_printf_i+0x234>)
 800746e:	230a      	movs	r3, #10
 8007470:	e011      	b.n	8007496 <_printf_i+0xfa>
 8007472:	6821      	ldr	r1, [r4, #0]
 8007474:	6833      	ldr	r3, [r6, #0]
 8007476:	0608      	lsls	r0, r1, #24
 8007478:	f853 5b04 	ldr.w	r5, [r3], #4
 800747c:	d402      	bmi.n	8007484 <_printf_i+0xe8>
 800747e:	0649      	lsls	r1, r1, #25
 8007480:	bf48      	it	mi
 8007482:	b2ad      	uxthmi	r5, r5
 8007484:	2f6f      	cmp	r7, #111	@ 0x6f
 8007486:	4852      	ldr	r0, [pc, #328]	@ (80075d0 <_printf_i+0x234>)
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	bf14      	ite	ne
 800748c:	230a      	movne	r3, #10
 800748e:	2308      	moveq	r3, #8
 8007490:	2100      	movs	r1, #0
 8007492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007496:	6866      	ldr	r6, [r4, #4]
 8007498:	60a6      	str	r6, [r4, #8]
 800749a:	2e00      	cmp	r6, #0
 800749c:	db05      	blt.n	80074aa <_printf_i+0x10e>
 800749e:	6821      	ldr	r1, [r4, #0]
 80074a0:	432e      	orrs	r6, r5
 80074a2:	f021 0104 	bic.w	r1, r1, #4
 80074a6:	6021      	str	r1, [r4, #0]
 80074a8:	d04b      	beq.n	8007542 <_printf_i+0x1a6>
 80074aa:	4616      	mov	r6, r2
 80074ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80074b0:	fb03 5711 	mls	r7, r3, r1, r5
 80074b4:	5dc7      	ldrb	r7, [r0, r7]
 80074b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074ba:	462f      	mov	r7, r5
 80074bc:	42bb      	cmp	r3, r7
 80074be:	460d      	mov	r5, r1
 80074c0:	d9f4      	bls.n	80074ac <_printf_i+0x110>
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d10b      	bne.n	80074de <_printf_i+0x142>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	07df      	lsls	r7, r3, #31
 80074ca:	d508      	bpl.n	80074de <_printf_i+0x142>
 80074cc:	6923      	ldr	r3, [r4, #16]
 80074ce:	6861      	ldr	r1, [r4, #4]
 80074d0:	4299      	cmp	r1, r3
 80074d2:	bfde      	ittt	le
 80074d4:	2330      	movle	r3, #48	@ 0x30
 80074d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074de:	1b92      	subs	r2, r2, r6
 80074e0:	6122      	str	r2, [r4, #16]
 80074e2:	f8cd a000 	str.w	sl, [sp]
 80074e6:	464b      	mov	r3, r9
 80074e8:	aa03      	add	r2, sp, #12
 80074ea:	4621      	mov	r1, r4
 80074ec:	4640      	mov	r0, r8
 80074ee:	f7ff fee7 	bl	80072c0 <_printf_common>
 80074f2:	3001      	adds	r0, #1
 80074f4:	d14a      	bne.n	800758c <_printf_i+0x1f0>
 80074f6:	f04f 30ff 	mov.w	r0, #4294967295
 80074fa:	b004      	add	sp, #16
 80074fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	f043 0320 	orr.w	r3, r3, #32
 8007506:	6023      	str	r3, [r4, #0]
 8007508:	4832      	ldr	r0, [pc, #200]	@ (80075d4 <_printf_i+0x238>)
 800750a:	2778      	movs	r7, #120	@ 0x78
 800750c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	6831      	ldr	r1, [r6, #0]
 8007514:	061f      	lsls	r7, r3, #24
 8007516:	f851 5b04 	ldr.w	r5, [r1], #4
 800751a:	d402      	bmi.n	8007522 <_printf_i+0x186>
 800751c:	065f      	lsls	r7, r3, #25
 800751e:	bf48      	it	mi
 8007520:	b2ad      	uxthmi	r5, r5
 8007522:	6031      	str	r1, [r6, #0]
 8007524:	07d9      	lsls	r1, r3, #31
 8007526:	bf44      	itt	mi
 8007528:	f043 0320 	orrmi.w	r3, r3, #32
 800752c:	6023      	strmi	r3, [r4, #0]
 800752e:	b11d      	cbz	r5, 8007538 <_printf_i+0x19c>
 8007530:	2310      	movs	r3, #16
 8007532:	e7ad      	b.n	8007490 <_printf_i+0xf4>
 8007534:	4826      	ldr	r0, [pc, #152]	@ (80075d0 <_printf_i+0x234>)
 8007536:	e7e9      	b.n	800750c <_printf_i+0x170>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	f023 0320 	bic.w	r3, r3, #32
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	e7f6      	b.n	8007530 <_printf_i+0x194>
 8007542:	4616      	mov	r6, r2
 8007544:	e7bd      	b.n	80074c2 <_printf_i+0x126>
 8007546:	6833      	ldr	r3, [r6, #0]
 8007548:	6825      	ldr	r5, [r4, #0]
 800754a:	6961      	ldr	r1, [r4, #20]
 800754c:	1d18      	adds	r0, r3, #4
 800754e:	6030      	str	r0, [r6, #0]
 8007550:	062e      	lsls	r6, r5, #24
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	d501      	bpl.n	800755a <_printf_i+0x1be>
 8007556:	6019      	str	r1, [r3, #0]
 8007558:	e002      	b.n	8007560 <_printf_i+0x1c4>
 800755a:	0668      	lsls	r0, r5, #25
 800755c:	d5fb      	bpl.n	8007556 <_printf_i+0x1ba>
 800755e:	8019      	strh	r1, [r3, #0]
 8007560:	2300      	movs	r3, #0
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	4616      	mov	r6, r2
 8007566:	e7bc      	b.n	80074e2 <_printf_i+0x146>
 8007568:	6833      	ldr	r3, [r6, #0]
 800756a:	1d1a      	adds	r2, r3, #4
 800756c:	6032      	str	r2, [r6, #0]
 800756e:	681e      	ldr	r6, [r3, #0]
 8007570:	6862      	ldr	r2, [r4, #4]
 8007572:	2100      	movs	r1, #0
 8007574:	4630      	mov	r0, r6
 8007576:	f7f8 fe2b 	bl	80001d0 <memchr>
 800757a:	b108      	cbz	r0, 8007580 <_printf_i+0x1e4>
 800757c:	1b80      	subs	r0, r0, r6
 800757e:	6060      	str	r0, [r4, #4]
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	6123      	str	r3, [r4, #16]
 8007584:	2300      	movs	r3, #0
 8007586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800758a:	e7aa      	b.n	80074e2 <_printf_i+0x146>
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	4632      	mov	r2, r6
 8007590:	4649      	mov	r1, r9
 8007592:	4640      	mov	r0, r8
 8007594:	47d0      	blx	sl
 8007596:	3001      	adds	r0, #1
 8007598:	d0ad      	beq.n	80074f6 <_printf_i+0x15a>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	079b      	lsls	r3, r3, #30
 800759e:	d413      	bmi.n	80075c8 <_printf_i+0x22c>
 80075a0:	68e0      	ldr	r0, [r4, #12]
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	4298      	cmp	r0, r3
 80075a6:	bfb8      	it	lt
 80075a8:	4618      	movlt	r0, r3
 80075aa:	e7a6      	b.n	80074fa <_printf_i+0x15e>
 80075ac:	2301      	movs	r3, #1
 80075ae:	4632      	mov	r2, r6
 80075b0:	4649      	mov	r1, r9
 80075b2:	4640      	mov	r0, r8
 80075b4:	47d0      	blx	sl
 80075b6:	3001      	adds	r0, #1
 80075b8:	d09d      	beq.n	80074f6 <_printf_i+0x15a>
 80075ba:	3501      	adds	r5, #1
 80075bc:	68e3      	ldr	r3, [r4, #12]
 80075be:	9903      	ldr	r1, [sp, #12]
 80075c0:	1a5b      	subs	r3, r3, r1
 80075c2:	42ab      	cmp	r3, r5
 80075c4:	dcf2      	bgt.n	80075ac <_printf_i+0x210>
 80075c6:	e7eb      	b.n	80075a0 <_printf_i+0x204>
 80075c8:	2500      	movs	r5, #0
 80075ca:	f104 0619 	add.w	r6, r4, #25
 80075ce:	e7f5      	b.n	80075bc <_printf_i+0x220>
 80075d0:	08007c59 	.word	0x08007c59
 80075d4:	08007c6a 	.word	0x08007c6a

080075d8 <memmove>:
 80075d8:	4288      	cmp	r0, r1
 80075da:	b510      	push	{r4, lr}
 80075dc:	eb01 0402 	add.w	r4, r1, r2
 80075e0:	d902      	bls.n	80075e8 <memmove+0x10>
 80075e2:	4284      	cmp	r4, r0
 80075e4:	4623      	mov	r3, r4
 80075e6:	d807      	bhi.n	80075f8 <memmove+0x20>
 80075e8:	1e43      	subs	r3, r0, #1
 80075ea:	42a1      	cmp	r1, r4
 80075ec:	d008      	beq.n	8007600 <memmove+0x28>
 80075ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075f6:	e7f8      	b.n	80075ea <memmove+0x12>
 80075f8:	4402      	add	r2, r0
 80075fa:	4601      	mov	r1, r0
 80075fc:	428a      	cmp	r2, r1
 80075fe:	d100      	bne.n	8007602 <memmove+0x2a>
 8007600:	bd10      	pop	{r4, pc}
 8007602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800760a:	e7f7      	b.n	80075fc <memmove+0x24>

0800760c <_sbrk_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	@ (8007628 <_sbrk_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7fa fa26 	bl	8001a68 <_sbrk>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_sbrk_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_sbrk_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	200042ac 	.word	0x200042ac

0800762c <_realloc_r>:
 800762c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007630:	4607      	mov	r7, r0
 8007632:	4614      	mov	r4, r2
 8007634:	460d      	mov	r5, r1
 8007636:	b921      	cbnz	r1, 8007642 <_realloc_r+0x16>
 8007638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	4611      	mov	r1, r2
 800763e:	f7ff bc5b 	b.w	8006ef8 <_malloc_r>
 8007642:	b92a      	cbnz	r2, 8007650 <_realloc_r+0x24>
 8007644:	f7ff fbec 	bl	8006e20 <_free_r>
 8007648:	4625      	mov	r5, r4
 800764a:	4628      	mov	r0, r5
 800764c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007650:	f000 f81a 	bl	8007688 <_malloc_usable_size_r>
 8007654:	4284      	cmp	r4, r0
 8007656:	4606      	mov	r6, r0
 8007658:	d802      	bhi.n	8007660 <_realloc_r+0x34>
 800765a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800765e:	d8f4      	bhi.n	800764a <_realloc_r+0x1e>
 8007660:	4621      	mov	r1, r4
 8007662:	4638      	mov	r0, r7
 8007664:	f7ff fc48 	bl	8006ef8 <_malloc_r>
 8007668:	4680      	mov	r8, r0
 800766a:	b908      	cbnz	r0, 8007670 <_realloc_r+0x44>
 800766c:	4645      	mov	r5, r8
 800766e:	e7ec      	b.n	800764a <_realloc_r+0x1e>
 8007670:	42b4      	cmp	r4, r6
 8007672:	4622      	mov	r2, r4
 8007674:	4629      	mov	r1, r5
 8007676:	bf28      	it	cs
 8007678:	4632      	movcs	r2, r6
 800767a:	f7ff fbc3 	bl	8006e04 <memcpy>
 800767e:	4629      	mov	r1, r5
 8007680:	4638      	mov	r0, r7
 8007682:	f7ff fbcd 	bl	8006e20 <_free_r>
 8007686:	e7f1      	b.n	800766c <_realloc_r+0x40>

08007688 <_malloc_usable_size_r>:
 8007688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768c:	1f18      	subs	r0, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfbc      	itt	lt
 8007692:	580b      	ldrlt	r3, [r1, r0]
 8007694:	18c0      	addlt	r0, r0, r3
 8007696:	4770      	bx	lr

08007698 <_init>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr

080076a4 <_fini>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr
