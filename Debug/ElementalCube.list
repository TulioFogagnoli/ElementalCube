
ElementalCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b78  08009f54  08009f54  0000af54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aacc  0800aacc  0000c0f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aacc  0800aacc  0000bacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aad4  0800aad4  0000c0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aad4  0800aad4  0000bad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aad8  0800aad8  0000bad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800aadc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c0f8  2**0
                  CONTENTS
 10 .bss          00004244  200000f8  200000f8  0000c0f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000433c  2000433c  0000c0f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c0f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016cdd  00000000  00000000  0000c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ed6  00000000  00000000  00022e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00026ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001050  00000000  00000000  00028228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b3b  00000000  00000000  00029278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a7c6  00000000  00000000  0004ddb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d311b  00000000  00000000  00068579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b694  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006150  00000000  00000000  0013b6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00141828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f3c 	.word	0x08009f3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08009f3c 	.word	0x08009f3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <ILI9488_Select>:
/* vim: set ai et ts:4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9488.h"

// Funções estáticas (privadas para este arquivo)
static void ILI9488_Select() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2110      	movs	r1, #16
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <ILI9488_Select+0x14>)
 80005a6:	f002 ff3f 	bl	8003428 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <ILI9488_Unselect>:

void ILI9488_Unselect() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2110      	movs	r1, #16
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <ILI9488_Unselect+0x14>)
 80005be:	f002 ff33 	bl	8003428 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <ILI9488_Reset>:

static void ILI9488_Reset() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <ILI9488_Reset+0x28>)
 80005d6:	f002 ff27 	bl	8003428 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80005da:	2032      	movs	r0, #50	@ 0x32
 80005dc:	f002 fa14 	bl	8002a08 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2101      	movs	r1, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <ILI9488_Reset+0x28>)
 80005e6:	f002 ff1f 	bl	8003428 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 80005ea:	2078      	movs	r0, #120	@ 0x78
 80005ec:	f002 fa0c 	bl	8002a08 <HAL_Delay>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020400 	.word	0x40020400

080005f8 <ILI9488_WriteCommand>:

static void ILI9488_WriteCommand(uint8_t cmd) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2102      	movs	r1, #2
 8000606:	4807      	ldr	r0, [pc, #28]	@ (8000624 <ILI9488_WriteCommand+0x2c>)
 8000608:	f002 ff0e 	bl	8003428 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800060c:	1df9      	adds	r1, r7, #7
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2201      	movs	r2, #1
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <ILI9488_WriteCommand+0x30>)
 8000616:	f004 fc40 	bl	8004e9a <HAL_SPI_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020400 	.word	0x40020400
 8000628:	200003bc 	.word	0x200003bc

0800062c <ILI9488_WriteData>:

static void ILI9488_WriteData(uint8_t* buff, size_t buff_size) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2102      	movs	r1, #2
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <ILI9488_WriteData+0x2c>)
 800063c:	f002 fef4 	bl	8003428 <HAL_GPIO_WritePin>
    // Não otimizar para chunks pequenos como 1 ou 3 bytes
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b29a      	uxth	r2, r3
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4804      	ldr	r0, [pc, #16]	@ (800065c <ILI9488_WriteData+0x30>)
 800064c:	f004 fc25 	bl	8004e9a <HAL_SPI_Transmit>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020400 	.word	0x40020400
 800065c:	200003bc 	.word	0x200003bc

08000660 <ILI9488_WriteSmallData>:

static void ILI9488_WriteSmallData(uint8_t data) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <ILI9488_WriteSmallData+0x2c>)
 8000670:	f002 feda 	bl	8003428 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000674:	1df9      	adds	r1, r7, #7
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <ILI9488_WriteSmallData+0x30>)
 800067e:	f004 fc0c 	bl	8004e9a <HAL_SPI_Transmit>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020400 	.word	0x40020400
 8000690:	200003bc 	.word	0x200003bc

08000694 <ILI9488_SetAddressWindow>:


static void ILI9488_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4623      	mov	r3, r4
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4603      	mov	r3, r0
 80006a8:	80bb      	strh	r3, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	807b      	strh	r3, [r7, #2]
 80006ae:	4613      	mov	r3, r2
 80006b0:	803b      	strh	r3, [r7, #0]
    // Column Address Set
    ILI9488_WriteCommand(0x2A);
 80006b2:	202a      	movs	r0, #42	@ 0x2a
 80006b4:	f7ff ffa0 	bl	80005f8 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	733b      	strb	r3, [r7, #12]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	737b      	strb	r3, [r7, #13]
 80006c8:	887b      	ldrh	r3, [r7, #2]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73bb      	strb	r3, [r7, #14]
 80006d2:	887b      	ldrh	r3, [r7, #2]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
        ILI9488_WriteData(data, sizeof(data));
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffa4 	bl	800062c <ILI9488_WriteData>
    }
    // Page Address Set
    ILI9488_WriteCommand(0x2B);
 80006e4:	202b      	movs	r0, #43	@ 0x2b
 80006e6:	f7ff ff87 	bl	80005f8 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006ea:	88bb      	ldrh	r3, [r7, #4]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	723b      	strb	r3, [r7, #8]
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	727b      	strb	r3, [r7, #9]
 80006fa:	883b      	ldrh	r3, [r7, #0]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	72bb      	strb	r3, [r7, #10]
 8000704:	883b      	ldrh	r3, [r7, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	72fb      	strb	r3, [r7, #11]
        ILI9488_WriteData(data, sizeof(data));
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2104      	movs	r1, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff8b 	bl	800062c <ILI9488_WriteData>
    }
    // Memory Write
    ILI9488_WriteCommand(0x2C);
 8000716:	202c      	movs	r0, #44	@ 0x2c
 8000718:	f7ff ff6e 	bl	80005f8 <ILI9488_WriteCommand>
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <ILI9488_Init>:

void ILI9488_Init() {
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b095      	sub	sp, #84	@ 0x54
 8000728:	af00      	add	r7, sp, #0
    ILI9488_Select();
 800072a:	f7ff ff37 	bl	800059c <ILI9488_Select>
    ILI9488_Reset();
 800072e:	f7ff ff4d 	bl	80005cc <ILI9488_Reset>

    ILI9488_WriteCommand(0xE0); // Positive Gamma Control
 8000732:	20e0      	movs	r0, #224	@ 0xe0
 8000734:	f7ff ff60 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x03, 0x09, 0x08, 0x16, 0x0A, 0x3F, 0x78, 0x4C, 0x09, 0x0A, 0x08, 0x16, 0x1A, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 8000738:	4b5b      	ldr	r3, [pc, #364]	@ (80008a8 <ILI9488_Init+0x184>)
 800073a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800073e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000740:	c407      	stmia	r4!, {r0, r1, r2}
 8000742:	8023      	strh	r3, [r4, #0]
 8000744:	3402      	adds	r4, #2
 8000746:	0c1b      	lsrs	r3, r3, #16
 8000748:	7023      	strb	r3, [r4, #0]
 800074a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800074e:	210f      	movs	r1, #15
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff6b 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE1); // Negative Gamma Control
 8000756:	20e1      	movs	r0, #225	@ 0xe1
 8000758:	f7ff ff4e 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x16, 0x19, 0x03, 0x0F, 0x05, 0x32, 0x45, 0x46, 0x04, 0x0E, 0x0D, 0x35, 0x37, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 800075c:	4b53      	ldr	r3, [pc, #332]	@ (80008ac <ILI9488_Init+0x188>)
 800075e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000764:	c407      	stmia	r4!, {r0, r1, r2}
 8000766:	8023      	strh	r3, [r4, #0]
 8000768:	3402      	adds	r4, #2
 800076a:	0c1b      	lsrs	r3, r3, #16
 800076c:	7023      	strb	r3, [r4, #0]
 800076e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000772:	210f      	movs	r1, #15
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff59 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC0); // Power Control 1
 800077a:	20c0      	movs	r0, #192	@ 0xc0
 800077c:	f7ff ff3c 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x17, 0x15}; ILI9488_WriteData(data, sizeof(data)); }
 8000780:	f241 5317 	movw	r3, #5399	@ 0x1517
 8000784:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800078a:	2102      	movs	r1, #2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff4d 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC1); // Power Control 2
 8000792:	20c1      	movs	r0, #193	@ 0xc1
 8000794:	f7ff ff30 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x41}; ILI9488_WriteData(data, sizeof(data)); }
 8000798:	2341      	movs	r3, #65	@ 0x41
 800079a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800079e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a2:	2101      	movs	r1, #1
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff41 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC5); // VCOM Control
 80007aa:	20c5      	movs	r0, #197	@ 0xc5
 80007ac:	f7ff ff24 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x12, 0x80}; ILI9488_WriteData(data, sizeof(data)); }
 80007b0:	4a3f      	ldr	r2, [pc, #252]	@ (80008b0 <ILI9488_Init+0x18c>)
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	6812      	ldr	r2, [r2, #0]
 80007b8:	4611      	mov	r1, r2
 80007ba:	8019      	strh	r1, [r3, #0]
 80007bc:	3302      	adds	r3, #2
 80007be:	0c12      	lsrs	r2, r2, #16
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	2103      	movs	r1, #3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff2f 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0x36); // Memory Access Control
 80007ce:	2036      	movs	r0, #54	@ 0x36
 80007d0:	f7ff ff12 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {ILI9488_ROTATION}; ILI9488_WriteData(data, sizeof(data)); }
 80007d4:	2328      	movs	r3, #40	@ 0x28
 80007d6:	f887 3020 	strb.w	r3, [r7, #32]
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff23 	bl	800062c <ILI9488_WriteData>
    
    // ============ MUDANÇA IMPORTANTE ANTERIOR ============
    ILI9488_WriteCommand(0x3A); // Interface Pixel Format
 80007e6:	203a      	movs	r0, #58	@ 0x3a
 80007e8:	f7ff ff06 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x66}; ILI9488_WriteSmallData(data[0]); } // 0x66 para 18 bits/pixel
 80007ec:	2366      	movs	r3, #102	@ 0x66
 80007ee:	773b      	strb	r3, [r7, #28]
 80007f0:	7f3b      	ldrb	r3, [r7, #28]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff34 	bl	8000660 <ILI9488_WriteSmallData>

    ILI9488_WriteCommand(0xB0); // Interface Mode Control
 80007f8:	20b0      	movs	r0, #176	@ 0xb0
 80007fa:	f7ff fefd 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 80007fe:	2300      	movs	r3, #0
 8000800:	763b      	strb	r3, [r7, #24]
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	2101      	movs	r1, #1
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff0f 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB1); // Frame Rate Control
 800080e:	20b1      	movs	r0, #177	@ 0xb1
 8000810:	f7ff fef2 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xB0, 0x11}; ILI9488_WriteData(data, sizeof(data)); }
 8000814:	f241 13b0 	movw	r3, #4528	@ 0x11b0
 8000818:	82bb      	strh	r3, [r7, #20]
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2102      	movs	r1, #2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff03 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB4); // Display Inversion Control
 8000826:	20b4      	movs	r0, #180	@ 0xb4
 8000828:	f7ff fee6 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02}; ILI9488_WriteData(data, sizeof(data)); }
 800082c:	2302      	movs	r3, #2
 800082e:	743b      	strb	r3, [r7, #16]
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2101      	movs	r1, #1
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fef8 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB6); // Display Function Control
 800083c:	20b6      	movs	r0, #182	@ 0xb6
 800083e:	f7ff fedb 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02, 0x02, 0x3B}; ILI9488_WriteData(data, sizeof(data)); }
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <ILI9488_Init+0x190>)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	4611      	mov	r1, r2
 800084c:	8019      	strh	r1, [r3, #0]
 800084e:	3302      	adds	r3, #2
 8000850:	0c12      	lsrs	r2, r2, #16
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2103      	movs	r1, #3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fee6 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE9); // Set Image Function
 8000860:	20e9      	movs	r0, #233	@ 0xe9
 8000862:	f7ff fec9 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 8000866:	2300      	movs	r3, #0
 8000868:	723b      	strb	r3, [r7, #8]
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2101      	movs	r1, #1
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fedb 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xF7); // Adjust Control 3
 8000876:	20f7      	movs	r0, #247	@ 0xf7
 8000878:	f7ff febe 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xA9, 0x51, 0x2C, 0x82}; ILI9488_WriteData(data, sizeof(data)); }
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <ILI9488_Init+0x194>)
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2104      	movs	r1, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fed1 	bl	800062c <ILI9488_WriteData>
    
    ILI9488_WriteCommand(0x11); // Sleep Out
 800088a:	2011      	movs	r0, #17
 800088c:	f7ff feb4 	bl	80005f8 <ILI9488_WriteCommand>
    HAL_Delay(120);
 8000890:	2078      	movs	r0, #120	@ 0x78
 8000892:	f002 f8b9 	bl	8002a08 <HAL_Delay>
    ILI9488_WriteCommand(0x29); // Display ON
 8000896:	2029      	movs	r0, #41	@ 0x29
 8000898:	f7ff feae 	bl	80005f8 <ILI9488_WriteCommand>
    ILI9488_Unselect();
 800089c:	f7ff fe8a 	bl	80005b4 <ILI9488_Unselect>
}
 80008a0:	bf00      	nop
 80008a2:	3754      	adds	r7, #84	@ 0x54
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	08009f54 	.word	0x08009f54
 80008ac:	08009f64 	.word	0x08009f64
 80008b0:	08009f74 	.word	0x08009f74
 80008b4:	08009f78 	.word	0x08009f78
 80008b8:	822c51a9 	.word	0x822c51a9

080008bc <ILI9488_WriteChar>:
    
    ILI9488_Unselect();
}

// ============== NOVA FUNÇÃO DE ESCRITA DE CARACTERE (3 BYTES) ==============
static void ILI9488_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008bc:	b082      	sub	sp, #8
 80008be:	b580      	push	{r7, lr}
 80008c0:	b08a      	sub	sp, #40	@ 0x28
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
 80008ca:	460b      	mov	r3, r1
 80008cc:	80bb      	strh	r3, [r7, #4]
 80008ce:	4613      	mov	r3, r2
 80008d0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ILI9488_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80008d2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008d6:	461a      	mov	r2, r3
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	4413      	add	r3, r2
 80008dc:	b29b      	uxth	r3, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008e6:	4619      	mov	r1, r3
 80008e8:	88bb      	ldrh	r3, [r7, #4]
 80008ea:	440b      	add	r3, r1
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	3b01      	subs	r3, #1
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	88b9      	ldrh	r1, [r7, #4]
 80008f4:	88f8      	ldrh	r0, [r7, #6]
 80008f6:	f7ff fecd 	bl	8000694 <ILI9488_SetAddressWindow>

    // Converte as cores de background e foreground para 3 bytes uma única vez
    uint8_t color_r = ((color >> 11) << 3);
 80008fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80008fc:	0adb      	lsrs	r3, r3, #11
 80008fe:	b29b      	uxth	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	77fb      	strb	r3, [r7, #31]
    uint8_t color_g = ((color >> 5) & 0x3F) << 2;
 8000906:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000908:	095b      	lsrs	r3, r3, #5
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	77bb      	strb	r3, [r7, #30]
    uint8_t color_b = (color & 0x1F) << 3;
 8000912:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000914:	b2db      	uxtb	r3, r3
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	777b      	strb	r3, [r7, #29]

    uint8_t bgcolor_r = ((bgcolor >> 11) << 3);
 800091a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800091e:	0adb      	lsrs	r3, r3, #11
 8000920:	b29b      	uxth	r3, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	773b      	strb	r3, [r7, #28]
    uint8_t bgcolor_g = ((bgcolor >> 5) & 0x3F) << 2;
 8000928:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	b29b      	uxth	r3, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	76fb      	strb	r3, [r7, #27]
    uint8_t bgcolor_b = (bgcolor & 0x1F) << 3;
 8000936:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800093a:	b2db      	uxtb	r3, r3
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	76bb      	strb	r3, [r7, #26]
    
    for(i = 0; i < font.height; i++) {
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
 8000944:	e03d      	b.n	80009c2 <ILI9488_WriteChar+0x106>
        b = font.data[(ch - 32) * font.height + i];
 8000946:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	3b20      	subs	r3, #32
 800094c:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000950:	fb01 f303 	mul.w	r3, r1, r3
 8000954:	4619      	mov	r1, r3
 8000956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
 8000966:	e023      	b.n	80009b0 <ILI9488_WriteChar+0xf4>
            if((b << j) & 0x8000) {
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00c      	beq.n	8000992 <ILI9488_WriteChar+0xd6>
                uint8_t pixel[] = {color_r, color_g, color_b};
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	743b      	strb	r3, [r7, #16]
 800097c:	7fbb      	ldrb	r3, [r7, #30]
 800097e:	747b      	strb	r3, [r7, #17]
 8000980:	7f7b      	ldrb	r3, [r7, #29]
 8000982:	74bb      	strb	r3, [r7, #18]
                ILI9488_WriteData(pixel, sizeof(pixel));
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	2103      	movs	r1, #3
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fe4e 	bl	800062c <ILI9488_WriteData>
 8000990:	e00b      	b.n	80009aa <ILI9488_WriteChar+0xee>
            } else {
                uint8_t pixel[] = {bgcolor_r, bgcolor_g, bgcolor_b};
 8000992:	7f3b      	ldrb	r3, [r7, #28]
 8000994:	733b      	strb	r3, [r7, #12]
 8000996:	7efb      	ldrb	r3, [r7, #27]
 8000998:	737b      	strb	r3, [r7, #13]
 800099a:	7ebb      	ldrb	r3, [r7, #26]
 800099c:	73bb      	strb	r3, [r7, #14]
                ILI9488_WriteData(pixel, sizeof(pixel));
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2103      	movs	r1, #3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe41 	bl	800062c <ILI9488_WriteData>
        for(j = 0; j < font.width; j++) {
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	3301      	adds	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
 80009b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80009b4:	461a      	mov	r2, r3
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d3d5      	bcc.n	8000968 <ILI9488_WriteChar+0xac>
    for(i = 0; i < font.height; i++) {
 80009bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009be:	3301      	adds	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009c6:	461a      	mov	r2, r3
 80009c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d3bb      	bcc.n	8000946 <ILI9488_WriteChar+0x8a>
            }
        }
    }
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	@ 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009da:	b002      	add	sp, #8
 80009dc:	4770      	bx	lr
	...

080009e0 <ILI9488_FillRectangle>:

// ============== NOVA FUNÇÃO DE PREENCHER RETÂNGULO (3 BYTES) ==============
void ILI9488_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4604      	mov	r4, r0
 80009e8:	4608      	mov	r0, r1
 80009ea:	4611      	mov	r1, r2
 80009ec:	461a      	mov	r2, r3
 80009ee:	4623      	mov	r3, r4
 80009f0:	80fb      	strh	r3, [r7, #6]
 80009f2:	4603      	mov	r3, r0
 80009f4:	80bb      	strh	r3, [r7, #4]
 80009f6:	460b      	mov	r3, r1
 80009f8:	807b      	strh	r3, [r7, #2]
 80009fa:	4613      	mov	r3, r2
 80009fc:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a04:	f080 8083 	bcs.w	8000b0e <ILI9488_FillRectangle+0x12e>
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a0e:	d27e      	bcs.n	8000b0e <ILI9488_FillRectangle+0x12e>
    if((x + w) > ILI9488_WIDTH) w = ILI9488_WIDTH - x;
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	4413      	add	r3, r2
 8000a16:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a1a:	dd03      	ble.n	8000a24 <ILI9488_FillRectangle+0x44>
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8000a22:	807b      	strh	r3, [r7, #2]
    if((y + h) > ILI9488_HEIGHT) h = ILI9488_HEIGHT - y;
 8000a24:	88ba      	ldrh	r2, [r7, #4]
 8000a26:	883b      	ldrh	r3, [r7, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a2e:	dd03      	ble.n	8000a38 <ILI9488_FillRectangle+0x58>
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000a36:	803b      	strh	r3, [r7, #0]

    ILI9488_Select();
 8000a38:	f7ff fdb0 	bl	800059c <ILI9488_Select>
    ILI9488_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000a3c:	88fa      	ldrh	r2, [r7, #6]
 8000a3e:	887b      	ldrh	r3, [r7, #2]
 8000a40:	4413      	add	r3, r2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	3b01      	subs	r3, #1
 8000a46:	b29c      	uxth	r4, r3
 8000a48:	88ba      	ldrh	r2, [r7, #4]
 8000a4a:	883b      	ldrh	r3, [r7, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	3b01      	subs	r3, #1
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	88b9      	ldrh	r1, [r7, #4]
 8000a56:	88f8      	ldrh	r0, [r7, #6]
 8000a58:	4622      	mov	r2, r4
 8000a5a:	f7ff fe1b 	bl	8000694 <ILI9488_SetAddressWindow>
    
    // Converte a cor para 3 bytes
    uint8_t r = (color >> 11) & 0x1F;
 8000a5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a60:	0adb      	lsrs	r3, r3, #11
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f003 031f 	and.w	r3, r3, #31
 8000a6a:	74fb      	strb	r3, [r7, #19]
    uint8_t g = (color >> 5) & 0x3F;
 8000a6c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a78:	74bb      	strb	r3, [r7, #18]
    uint8_t b = color & 0x1F;
 8000a7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f003 031f 	and.w	r3, r3, #31
 8000a82:	747b      	strb	r3, [r7, #17]

    r = (r << 3) | (r >> 2);
 8000a84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	b25a      	sxtb	r2, r3
 8000a8c:	7cfb      	ldrb	r3, [r7, #19]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	74fb      	strb	r3, [r7, #19]
    g = (g << 2) | (g >> 4);
 8000a9a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	7cbb      	ldrb	r3, [r7, #18]
 8000aa4:	091b      	lsrs	r3, r3, #4
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	74bb      	strb	r3, [r7, #18]
    b = (b << 3) | (b >> 2);
 8000ab0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	7c7b      	ldrb	r3, [r7, #17]
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	747b      	strb	r3, [r7, #17]
    
    uint8_t data[] = {r, g, b};
 8000ac6:	7cfb      	ldrb	r3, [r7, #19]
 8000ac8:	733b      	strb	r3, [r7, #12]
 8000aca:	7cbb      	ldrb	r3, [r7, #18]
 8000acc:	737b      	strb	r3, [r7, #13]
 8000ace:	7c7b      	ldrb	r3, [r7, #17]
 8000ad0:	73bb      	strb	r3, [r7, #14]
    
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4810      	ldr	r0, [pc, #64]	@ (8000b18 <ILI9488_FillRectangle+0x138>)
 8000ad8:	f002 fca6 	bl	8003428 <HAL_GPIO_WritePin>
    for(uint32_t i = 0; i < (h * w); i++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <ILI9488_FillRectangle+0x118>
        HAL_SPI_Transmit(&ILI9488_SPI_PORT, data, 3, HAL_MAX_DELAY);
 8000ae2:	f107 010c 	add.w	r1, r7, #12
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	2203      	movs	r2, #3
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <ILI9488_FillRectangle+0x13c>)
 8000aee:	f004 f9d4 	bl	8004e9a <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < (h * w); i++) {
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	883b      	ldrh	r3, [r7, #0]
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d3ec      	bcc.n	8000ae2 <ILI9488_FillRectangle+0x102>
    }

    ILI9488_Unselect();
 8000b08:	f7ff fd54 	bl	80005b4 <ILI9488_Unselect>
 8000b0c:	e000      	b.n	8000b10 <ILI9488_FillRectangle+0x130>
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 8000b0e:	bf00      	nop
}
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	200003bc 	.word	0x200003bc

08000b20 <ILI9488_WriteString>:

// O restante das funções não precisa de alteração pois dependem das que foram corrigidas

void ILI9488_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b20:	b082      	sub	sp, #8
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af04      	add	r7, sp, #16
 8000b28:	603a      	str	r2, [r7, #0]
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	80fb      	strh	r3, [r7, #6]
 8000b30:	460b      	mov	r3, r1
 8000b32:	80bb      	strh	r3, [r7, #4]
    ILI9488_Select();
 8000b34:	f7ff fd32 	bl	800059c <ILI9488_Select>
    while(*str) {
 8000b38:	e02f      	b.n	8000b9a <ILI9488_WriteString+0x7a>
        if(x + font.width >= ILI9488_WIDTH) {
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	7d3a      	ldrb	r2, [r7, #20]
 8000b3e:	4413      	add	r3, r2
 8000b40:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000b44:	db14      	blt.n	8000b70 <ILI9488_WriteString+0x50>
            x = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b4a:	7d7b      	ldrb	r3, [r7, #21]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9488_HEIGHT) break;
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	7d7a      	ldrb	r2, [r7, #21]
 8000b58:	4413      	add	r3, r2
 8000b5a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b5e:	da21      	bge.n	8000ba4 <ILI9488_WriteString+0x84>
            if(*str == ' ') {
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d103      	bne.n	8000b70 <ILI9488_WriteString+0x50>
                str++;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	603b      	str	r3, [r7, #0]
                continue;
 8000b6e:	e014      	b.n	8000b9a <ILI9488_WriteString+0x7a>
            }
        }
        ILI9488_WriteChar(x, y, *str, font, color, bgcolor);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	88b9      	ldrh	r1, [r7, #4]
 8000b76:	88f8      	ldrh	r0, [r7, #6]
 8000b78:	8c3b      	ldrh	r3, [r7, #32]
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	8bbb      	ldrh	r3, [r7, #28]
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f7ff fe99 	bl	80008bc <ILI9488_WriteChar>
        x += font.width;
 8000b8a:	7d3b      	ldrb	r3, [r7, #20]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4413      	add	r3, r2
 8000b92:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1cb      	bne.n	8000b3a <ILI9488_WriteString+0x1a>
 8000ba2:	e000      	b.n	8000ba6 <ILI9488_WriteString+0x86>
            if(y + font.height >= ILI9488_HEIGHT) break;
 8000ba4:	bf00      	nop
    }
    ILI9488_Unselect();
 8000ba6:	f7ff fd05 	bl	80005b4 <ILI9488_Unselect>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb4:	b002      	add	sp, #8
 8000bb6:	4770      	bx	lr

08000bb8 <ILI9488_FillScreen>:

void ILI9488_FillScreen(uint16_t color) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, color);
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000bca:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff ff05 	bl	80009e0 <ILI9488_FillRectangle>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <TCS3472_Init>:
/**
 * @brief Inicializa o sensor TCS3472.
 * @param hi2c: Ponteiro para a handle do I2C a ser usado.
 * @return true se a inicialização foi bem-sucedida, false caso contrário.
 */
bool TCS3472_Init(I2C_HandleTypeDef *hi2c) {
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b088      	sub	sp, #32
 8000be2:	af04      	add	r7, sp, #16
 8000be4:	6078      	str	r0, [r7, #4]
    uint8_t reg_data;

    // 1. Verifica se o sensor está a responder lendo o seu ID
    // O ID do TCS3472 deve ser 0x44 ou 0x4D
    HAL_I2C_Mem_Read(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ID), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	2301      	movs	r3, #1
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	f107 030f 	add.w	r3, r7, #15
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2292      	movs	r2, #146	@ 0x92
 8000bfa:	2152      	movs	r1, #82	@ 0x52
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f002 fe6b 	bl	80038d8 <HAL_I2C_Mem_Read>
    if (reg_data != 0x44 && reg_data != 0x4D) {
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	2b44      	cmp	r3, #68	@ 0x44
 8000c06:	d004      	beq.n	8000c12 <TCS3472_Init+0x34>
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	2b4d      	cmp	r3, #77	@ 0x4d
 8000c0c:	d001      	beq.n	8000c12 <TCS3472_Init+0x34>
        return false; // Falha na comunicação
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e046      	b.n	8000ca0 <TCS3472_Init+0xc2>
    }

    // 2. Configura o tempo de integração do sensor (afeta a sensibilidade)
    // 0xEB = 70ms. Valores mais altos = mais sensível à luz fraca.
    reg_data = 0xEB;
 8000c12:	23eb      	movs	r3, #235	@ 0xeb
 8000c14:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ATIME), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	f107 030f 	add.w	r3, r7, #15
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	2281      	movs	r2, #129	@ 0x81
 8000c2a:	2152      	movs	r1, #82	@ 0x52
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f002 fd59 	bl	80036e4 <HAL_I2C_Mem_Write>

    // 3. Configura o ganho do sensor (1x, 4x, 16x, 60x)
    // 0x00 = Ganho 1x
    reg_data = 0x00;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_CONTROL), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	9302      	str	r3, [sp, #8]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	f107 030f 	add.w	r3, r7, #15
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	228f      	movs	r2, #143	@ 0x8f
 8000c4a:	2152      	movs	r1, #82	@ 0x52
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f002 fd49 	bl	80036e4 <HAL_I2C_Mem_Write>

    // 4. Ativa o oscilador interno e o conversor ADC de cor
    reg_data = TCS3472_ENABLE_PON;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ENABLE), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	f107 030f 	add.w	r3, r7, #15
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	2280      	movs	r2, #128	@ 0x80
 8000c6a:	2152      	movs	r1, #82	@ 0x52
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f002 fd39 	bl	80036e4 <HAL_I2C_Mem_Write>
    HAL_Delay(3); // Espera o oscilador estabilizar
 8000c72:	2003      	movs	r0, #3
 8000c74:	f001 fec8 	bl	8002a08 <HAL_Delay>
    reg_data |= TCS3472_ENABLE_AEN;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ENABLE), 1, &reg_data, 1, HAL_MAX_DELAY);
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	9302      	str	r3, [sp, #8]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	9301      	str	r3, [sp, #4]
 8000c8c:	f107 030f 	add.w	r3, r7, #15
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2301      	movs	r3, #1
 8000c94:	2280      	movs	r2, #128	@ 0x80
 8000c96:	2152      	movs	r1, #82	@ 0x52
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f002 fd23 	bl	80036e4 <HAL_I2C_Mem_Write>

    return true; // Sucesso
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <TCS3472_ReadData>:
/**
 * @brief Lê os valores de Vermelho, Verde, Azul e Clear do sensor.
 * @param hi2c: Ponteiro para a handle do I2C a ser usado.
 * @param color_data: Ponteiro para a estrutura onde os dados serão armazenados.
 */
void TCS3472_ReadData(I2C_HandleTypeDef *hi2c, TCS3472_Data* color_data) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af04      	add	r7, sp, #16
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
    uint8_t buffer[8];

    // Lê os 8 bytes de dados de cor (Clear, Red, Green, Blue - 2 bytes cada)
    // O sensor auto-incrementa o endereço do registo, por isso podemos ler tudo de uma vez
    HAL_I2C_Mem_Read(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_CDATAL), 1, buffer, 8, HAL_MAX_DELAY);
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	9302      	str	r3, [sp, #8]
 8000cb8:	2308      	movs	r3, #8
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	2294      	movs	r2, #148	@ 0x94
 8000cc6:	2152      	movs	r1, #82	@ 0x52
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f002 fe05 	bl	80038d8 <HAL_I2C_Mem_Read>

    color_data->clear = (buffer[1] << 8) | buffer[0];
 8000cce:	7a7b      	ldrb	r3, [r7, #9]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	7a3b      	ldrb	r3, [r7, #8]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	80da      	strh	r2, [r3, #6]
    color_data->red   = (buffer[3] << 8) | buffer[2];
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	7abb      	ldrb	r3, [r7, #10]
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	801a      	strh	r2, [r3, #0]
    color_data->green = (buffer[5] << 8) | buffer[4];
 8000cfa:	7b7b      	ldrb	r3, [r7, #13]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	7b3b      	ldrb	r3, [r7, #12]
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	805a      	strh	r2, [r3, #2]
    color_data->blue  = (buffer[7] << 8) | buffer[6];
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	809a      	strh	r2, [r3, #4]
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <vApplicationGetIdleTaskMemory+0x30>)
 8000d46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2280      	movs	r2, #128	@ 0x80
 8000d4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000114 	.word	0x20000114
 8000d60:	20000168 	.word	0x20000168

08000d64 <vInitBattle>:
 * @brief Executa a lógica de batalha turno a turno, atualizando a vida dos jogadores.
 * @param pUserPlayer: Ponteiro para o jogador do usuário.
 * @param pCpuPlayer: Ponteiro para o jogador da CPU.
 */
void vInitBattle(EWizard* pUserPlayer, EWizard* pCpuPlayer)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	75fb      	strb	r3, [r7, #23]
 8000d72:	e092      	b.n	8000e9a <vInitBattle+0x136>
  {
    // Pega os ataques deste turno
    EColor userAttack = pUserPlayer->eAttackSequential[u8Idx];
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	789b      	ldrb	r3, [r3, #2]
 8000d7c:	753b      	strb	r3, [r7, #20]
    EColor cpuAttack = pCpuPlayer->eAttackSequential[u8Idx];
 8000d7e:	7dfb      	ldrb	r3, [r7, #23]
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	4413      	add	r3, r2
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	74fb      	strb	r3, [r7, #19]

    // Calcula o resultado do ataque do Jogador -> CPU
    EAttackOutcome userOutcome = eGetAttackOutcome(userAttack, cpuAttack);
 8000d88:	7cfa      	ldrb	r2, [r7, #19]
 8000d8a:	7d3b      	ldrb	r3, [r7, #20]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f88c 	bl	8000eac <eGetAttackOutcome>
 8000d94:	4603      	mov	r3, r0
 8000d96:	74bb      	strb	r3, [r7, #18]
    uint8_t userDamage = BASE_ATTACK_DAMAGE;
 8000d98:	230a      	movs	r3, #10
 8000d9a:	75bb      	strb	r3, [r7, #22]

    if (userOutcome == eOutcome_SuperEffective)
 8000d9c:	7cbb      	ldrb	r3, [r7, #18]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10f      	bne.n	8000dc2 <vInitBattle+0x5e>
    {
      userDamage *= SUPER_EFFECTIVE_MODIFIER;
 8000da2:	7dbb      	ldrb	r3, [r7, #22]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dac:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000dbc:	793b      	ldrb	r3, [r7, #4]
 8000dbe:	75bb      	strb	r3, [r7, #22]
 8000dc0:	e011      	b.n	8000de6 <vInitBattle+0x82>
    }
    else if (userOutcome == eOutcome_NotEffective)
 8000dc2:	7cbb      	ldrb	r3, [r7, #18]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d10e      	bne.n	8000de6 <vInitBattle+0x82>
    {
      userDamage *= NOT_EFFECTIVE_MODIFIER;
 8000dc8:	7dbb      	ldrb	r3, [r7, #22]
 8000dca:	ee07 3a90 	vmov	s15, r3
 8000dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dde:	edc7 7a01 	vstr	s15, [r7, #4]
 8000de2:	793b      	ldrb	r3, [r7, #4]
 8000de4:	75bb      	strb	r3, [r7, #22]
    }

    // Calcula o resultado do ataque da CPU -> Jogador
    EAttackOutcome cpuOutcome = eGetAttackOutcome(cpuAttack, userAttack);
 8000de6:	7d3a      	ldrb	r2, [r7, #20]
 8000de8:	7cfb      	ldrb	r3, [r7, #19]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 f85d 	bl	8000eac <eGetAttackOutcome>
 8000df2:	4603      	mov	r3, r0
 8000df4:	747b      	strb	r3, [r7, #17]
    uint8_t cpuDamage = BASE_ATTACK_DAMAGE;
 8000df6:	230a      	movs	r3, #10
 8000df8:	757b      	strb	r3, [r7, #21]

    if (cpuOutcome == eOutcome_SuperEffective)
 8000dfa:	7c7b      	ldrb	r3, [r7, #17]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10f      	bne.n	8000e20 <vInitBattle+0xbc>
    {
      cpuDamage *= SUPER_EFFECTIVE_MODIFIER;
 8000e00:	7d7b      	ldrb	r3, [r7, #21]
 8000e02:	ee07 3a90 	vmov	s15, r3
 8000e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e0a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e16:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e1a:	793b      	ldrb	r3, [r7, #4]
 8000e1c:	757b      	strb	r3, [r7, #21]
 8000e1e:	e011      	b.n	8000e44 <vInitBattle+0xe0>
    }
    else if (cpuOutcome == eOutcome_NotEffective)
 8000e20:	7c7b      	ldrb	r3, [r7, #17]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d10e      	bne.n	8000e44 <vInitBattle+0xe0>
    {
      cpuDamage *= NOT_EFFECTIVE_MODIFIER;
 8000e26:	7d7b      	ldrb	r3, [r7, #21]
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e40:	793b      	ldrb	r3, [r7, #4]
 8000e42:	757b      	strb	r3, [r7, #21]
    }

    // Aplica o dano, garantindo que a vida não fique negativa
    if (pCpuPlayer->u8HeartPoints >= userDamage)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	7dba      	ldrb	r2, [r7, #22]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d807      	bhi.n	8000e5e <vInitBattle+0xfa>
    {
      pCpuPlayer->u8HeartPoints -= userDamage;
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	7dbb      	ldrb	r3, [r7, #22]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e002      	b.n	8000e64 <vInitBattle+0x100>
    }
    else
    {
      pCpuPlayer->u8HeartPoints = 0;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
    }

    if (pUserPlayer->u8HeartPoints >= cpuDamage)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	7d7a      	ldrb	r2, [r7, #21]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d807      	bhi.n	8000e7e <vInitBattle+0x11a>
    {
      pUserPlayer->u8HeartPoints -= cpuDamage;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	7d7b      	ldrb	r3, [r7, #21]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	e002      	b.n	8000e84 <vInitBattle+0x120>
    }
    else
    {
      pUserPlayer->u8HeartPoints = 0;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
    }
    
    // Se a vida de alguém chegar a 0, a batalha pode parar mais cedo
    if(pUserPlayer->u8HeartPoints == 0 || pCpuPlayer->u8HeartPoints == 0)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00a      	beq.n	8000ea2 <vInitBattle+0x13e>
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <vInitBattle+0x13e>
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	3301      	adds	r3, #1
 8000e98:	75fb      	strb	r3, [r7, #23]
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	f67f af69 	bls.w	8000d74 <vInitBattle+0x10>
    {
        break; // Encerra o loop for
    }
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <eGetAttackOutcome>:
 * @param eAttackerAttack: O elemento do atacante.
 * @param eDefenderAttack: O elemento do defensor no mesmo turno.
 * @retval EAttackOutcome: O resultado da interação.
 */
EAttackOutcome eGetAttackOutcome(EColor eAttackerAttack, EColor eDefenderAttack)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
  switch (eAttackerAttack)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	d859      	bhi.n	8000f76 <eGetAttackOutcome+0xca>
 8000ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec8 <eGetAttackOutcome+0x1c>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000ee1 	.word	0x08000ee1
 8000ecc:	08000eff 	.word	0x08000eff
 8000ed0:	08000f3b 	.word	0x08000f3b
 8000ed4:	08000f1d 	.word	0x08000f1d
 8000ed8:	08000f4f 	.word	0x08000f4f
 8000edc:	08000f63 	.word	0x08000f63
  {
    case eRed: // FOGO
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Fogo > Terra
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d101      	bne.n	8000eea <eGetAttackOutcome+0x3e>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e053      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective;  //  Fogo > Sombra
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d101      	bne.n	8000ef4 <eGetAttackOutcome+0x48>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e04e      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlue) return eOutcome_NotEffective;     // Fogo < Agua
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d13f      	bne.n	8000f7a <eGetAttackOutcome+0xce>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e049      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      break;

    case eBlue: // ÁGUA
      if (eDefenderAttack == eRed) return eOutcome_SuperEffective;    // Agua > Fogo
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <eGetAttackOutcome+0x5c>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e044      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eGreen) return eOutcome_SuperEffective;  // Agua > Ar
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d101      	bne.n	8000f12 <eGetAttackOutcome+0x66>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e03f      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;   // Agua < Terra
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d132      	bne.n	8000f7e <eGetAttackOutcome+0xd2>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e03a      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      break;

    case eYellow: // TERRA
      if (eDefenderAttack == eBlue) return eOutcome_SuperEffective;   // Terra > Agua
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <eGetAttackOutcome+0x7a>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e035      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective;  // Terra > Luz
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d101      	bne.n	8000f30 <eGetAttackOutcome+0x84>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e030      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Terra < Fogo
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d125      	bne.n	8000f82 <eGetAttackOutcome+0xd6>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e02b      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      break;

    case eGreen: // AR
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Ar > Terra
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d101      	bne.n	8000f44 <eGetAttackOutcome+0x98>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e026      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Ar < Fogo
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d11d      	bne.n	8000f86 <eGetAttackOutcome+0xda>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e021      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      break;
    
    case eWhite: // LUZ
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective; // Luz > Sombra
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d101      	bne.n	8000f58 <eGetAttackOutcome+0xac>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e01c      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;  // Luz < Terra
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d115      	bne.n	8000f8a <eGetAttackOutcome+0xde>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e017      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      break;

    case eBlack: // SOMBRA
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective; // Sombra > Luz
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d101      	bne.n	8000f6c <eGetAttackOutcome+0xc0>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e012      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;     // Sombra < Fogo
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10d      	bne.n	8000f8e <eGetAttackOutcome+0xe2>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e00d      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      break;

    default:
      return eOutcome_Neutral;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e00b      	b.n	8000f92 <eGetAttackOutcome+0xe6>
      break;
 8000f7a:	bf00      	nop
 8000f7c:	e008      	b.n	8000f90 <eGetAttackOutcome+0xe4>
      break;
 8000f7e:	bf00      	nop
 8000f80:	e006      	b.n	8000f90 <eGetAttackOutcome+0xe4>
      break;
 8000f82:	bf00      	nop
 8000f84:	e004      	b.n	8000f90 <eGetAttackOutcome+0xe4>
      break;
 8000f86:	bf00      	nop
 8000f88:	e002      	b.n	8000f90 <eGetAttackOutcome+0xe4>
      break;
 8000f8a:	bf00      	nop
 8000f8c:	e000      	b.n	8000f90 <eGetAttackOutcome+0xe4>
      break;
 8000f8e:	bf00      	nop
  }
  return eOutcome_Neutral; // Retorno padrão se nenhuma regra se aplicar
 8000f90:	2300      	movs	r3, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <ClearScreen>:
#include "ILI9488.h"
#include "fonts.h"
#include "stdint.h"
#include <stdio.h>

void ClearScreen() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af02      	add	r7, sp, #8
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, ILI9488_BLACK);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fae:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fd13 	bl	80009e0 <ILI9488_FillRectangle>
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <DrawMenu>:

void DrawMenu(const char* title, const char** options, int numOptions, int currentSelection) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b092      	sub	sp, #72	@ 0x48
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
    char buffer[30];

    // Desenha o título com a fonte maior, mais abaixo no ecrã
    sprintf(buffer, "%s", title);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	492a      	ldr	r1, [pc, #168]	@ (8001080 <DrawMenu+0xc0>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f007 fefc 	bl	8008dd4 <siprintf>
    ILI9488_WriteString(0, 0, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8000fdc:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <DrawMenu+0xc4>)
 8000fde:	f107 0114 	add.w	r1, r7, #20
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	9202      	str	r2, [sp, #8]
 8000fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	9200      	str	r2, [sp, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fd92 	bl	8000b20 <ILI9488_WriteString>

    // Desenha as opções com mais espaçamento vertical
    for (int i = 0; i < numOptions; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001000:	e035      	b.n	800106e <DrawMenu+0xae>
        uint16_t color = (i == currentSelection) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001002:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d102      	bne.n	8001010 <DrawMenu+0x50>
 800100a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800100e:	e001      	b.n	8001014 <DrawMenu+0x54>
 8001010:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001014:	867b      	strh	r3, [r7, #50]	@ 0x32
        sprintf(buffer, "%s %s", (i == currentSelection) ? ">" : " ", options[i]);
 8001016:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d101      	bne.n	8001022 <DrawMenu+0x62>
 800101e:	491a      	ldr	r1, [pc, #104]	@ (8001088 <DrawMenu+0xc8>)
 8001020:	e000      	b.n	8001024 <DrawMenu+0x64>
 8001022:	491a      	ldr	r1, [pc, #104]	@ (800108c <DrawMenu+0xcc>)
 8001024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	4413      	add	r3, r2
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f107 0014 	add.w	r0, r7, #20
 8001032:	460a      	mov	r2, r1
 8001034:	4916      	ldr	r1, [pc, #88]	@ (8001090 <DrawMenu+0xd0>)
 8001036:	f007 fecd 	bl	8008dd4 <siprintf>
        // Aumenta o espaçamento entre as linhas (de 15 para 25)
        ILI9488_WriteString(0, 30 + (i * 20), buffer, Font_7x10, color, ILI9488_BLACK);
 800103a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800103c:	b29b      	uxth	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	b29b      	uxth	r3, r3
 8001048:	331e      	adds	r3, #30
 800104a:	b299      	uxth	r1, r3
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <DrawMenu+0xc4>)
 800104e:	f107 0014 	add.w	r0, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	9202      	str	r2, [sp, #8]
 8001056:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001058:	9201      	str	r2, [sp, #4]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	9200      	str	r2, [sp, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4602      	mov	r2, r0
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fd5c 	bl	8000b20 <ILI9488_WriteString>
    for (int i = 0; i < numOptions; i++) {
 8001068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800106a:	3301      	adds	r3, #1
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
 800106e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	429a      	cmp	r2, r3
 8001074:	dbc5      	blt.n	8001002 <DrawMenu+0x42>
    }
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3738      	adds	r7, #56	@ 0x38
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	08009f7c 	.word	0x08009f7c
 8001084:	20000000 	.word	0x20000000
 8001088:	08009f80 	.word	0x08009f80
 800108c:	08009f84 	.word	0x08009f84
 8001090:	08009f88 	.word	0x08009f88

08001094 <KEYPAD_Scan>:
Keypad_Pin_t C_PINS[4] = {{C4_GPIO_Port, C4_Pin}, {C3_GPIO_Port, C3_Pin}, {C2_GPIO_Port, C2_Pin}, {C1_GPIO_Port, C1_Pin}};
// Pinos das linhas (entradas)
Keypad_Pin_t R_PINS[4] = {{R2_GPIO_Port, R2_Pin}, {R1_GPIO_Port, R1_Pin}, {R3_GPIO_Port, R3_Pin}, {R4_GPIO_Port, R4_Pin}};


char KEYPAD_Scan(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
    // Coloca todas as colunas em nível alto
    for (int i = 0; i < 4; i++) {
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e00f      	b.n	80010c0 <KEYPAD_Scan+0x2c>
        HAL_GPIO_WritePin(C_PINS[i].PORT, C_PINS[i].PIN, GPIO_PIN_SET);
 80010a0:	4a3e      	ldr	r2, [pc, #248]	@ (800119c <KEYPAD_Scan+0x108>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010a8:	4a3c      	ldr	r2, [pc, #240]	@ (800119c <KEYPAD_Scan+0x108>)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	889b      	ldrh	r3, [r3, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	f002 f9b7 	bl	8003428 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	ddec      	ble.n	80010a0 <KEYPAD_Scan+0xc>
    }

    // Loop para varrer cada coluna
    for (int col = 0; col < 4; col++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	e05e      	b.n	800118a <KEYPAD_Scan+0xf6>
        // Ativa a coluna atual (coloca em nível baixo)
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_RESET);
 80010cc:	4a33      	ldr	r2, [pc, #204]	@ (800119c <KEYPAD_Scan+0x108>)
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80010d4:	4a31      	ldr	r2, [pc, #196]	@ (800119c <KEYPAD_Scan+0x108>)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	f002 f9a1 	bl	8003428 <HAL_GPIO_WritePin>

        // Verifica qual linha foi para nível baixo
        for (int row = 0; row < 4; row++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	e03b      	b.n	8001164 <KEYPAD_Scan+0xd0>
            if (HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET) {
 80010ec:	4a2c      	ldr	r2, [pc, #176]	@ (80011a0 <KEYPAD_Scan+0x10c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80010f4:	492a      	ldr	r1, [pc, #168]	@ (80011a0 <KEYPAD_Scan+0x10c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	889b      	ldrh	r3, [r3, #4]
 80010fe:	4619      	mov	r1, r3
 8001100:	4610      	mov	r0, r2
 8001102:	f002 f979 	bl	80033f8 <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d128      	bne.n	800115e <KEYPAD_Scan+0xca>
                // Botão pressionado!
                
                // --- Debounce e espera soltar a tecla ---
                HAL_Delay(50); // Simples debounce por atraso
 800110c:	2032      	movs	r0, #50	@ 0x32
 800110e:	f001 fc7b 	bl	8002a08 <HAL_Delay>

                // Espera o usuário soltar a tecla para não ler a mesma tecla várias vezes
                while(HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET);
 8001112:	bf00      	nop
 8001114:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <KEYPAD_Scan+0x10c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800111c:	4920      	ldr	r1, [pc, #128]	@ (80011a0 <KEYPAD_Scan+0x10c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	889b      	ldrh	r3, [r3, #4]
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f002 f965 	bl	80033f8 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0ef      	beq.n	8001114 <KEYPAD_Scan+0x80>
                
                // Restaura a coluna para nível alto antes de retornar
                HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8001134:	4a19      	ldr	r2, [pc, #100]	@ (800119c <KEYPAD_Scan+0x108>)
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800113c:	4a17      	ldr	r2, [pc, #92]	@ (800119c <KEYPAD_Scan+0x108>)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	889b      	ldrh	r3, [r3, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	4619      	mov	r1, r3
 800114a:	f002 f96d 	bl	8003428 <HAL_GPIO_WritePin>

                return KEYPAD_MAP[row][col];
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <KEYPAD_Scan+0x110>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	441a      	add	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	e019      	b.n	8001192 <KEYPAD_Scan+0xfe>
        for (int row = 0; row < 4; row++) {
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b03      	cmp	r3, #3
 8001168:	ddc0      	ble.n	80010ec <KEYPAD_Scan+0x58>
            }
        }

        // Desativa a coluna atual antes de ir para a próxima
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <KEYPAD_Scan+0x108>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <KEYPAD_Scan+0x108>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	4619      	mov	r1, r3
 8001180:	f002 f952 	bl	8003428 <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3301      	adds	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b03      	cmp	r3, #3
 800118e:	dd9d      	ble.n	80010cc <KEYPAD_Scan+0x38>
    }

    return '\0'; // Retorna nulo se nenhuma tecla for pressionada
 8001190:	2300      	movs	r3, #0
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000028 	.word	0x20000028
 80011a4:	0800a9c4 	.word	0x0800a9c4

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b09c      	sub	sp, #112	@ 0x70
 80011ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ae:	f001 fbb9 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b2:	f000 f8ab 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b6:	f000 f9a1 	bl	80014fc <MX_GPIO_Init>
  MX_SPI1_Init();
 80011ba:	f000 f93f 	bl	800143c <MX_SPI1_Init>
  MX_UART4_Init();
 80011be:	f000 f973 	bl	80014a8 <MX_UART4_Init>
  MX_I2C1_Init();
 80011c2:	f000 f90d 	bl	80013e0 <MX_I2C1_Init>
  // ETAPA DE INICIALIZAÇÃO
  //--------------------------------------------------------------------

  // 1. Inicializa o display. Ele usará a velocidade alta do SPI configurada
  //    no MX_SPI1_Init(), o que é ótimo para performance gráfica.
  ILI9488_Init();
 80011c6:	f7ff faad 	bl	8000724 <ILI9488_Init>

  // 2. Acende o backlight do display.
  //    (Assumindo que seu pino é o LCD_LED_Pin, como no seu MX_GPIO_Init)
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2180      	movs	r1, #128	@ 0x80
 80011ce:	4842      	ldr	r0, [pc, #264]	@ (80012d8 <main+0x130>)
 80011d0:	f002 f92a 	bl	8003428 <HAL_GPIO_WritePin>

  // 3. Prepara a tela para o usuário com uma mensagem de boas-vindas.
  ILI9488_FillScreen(ILI9488_BLACK);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff fcef 	bl	8000bb8 <ILI9488_FillScreen>
  if (TCS3472_Init(&hi2c1))
 80011da:	4840      	ldr	r0, [pc, #256]	@ (80012dc <main+0x134>)
 80011dc:	f7ff fcff 	bl	8000bde <TCS3472_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00e      	beq.n	8001204 <main+0x5c>
  {
    // Sucesso! Mostra uma mensagem no display
    ILI9488_WriteString(10, 200, "Sensor de Cor OK!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 80011e6:	4b3e      	ldr	r3, [pc, #248]	@ (80012e0 <main+0x138>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	9202      	str	r2, [sp, #8]
 80011ec:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80011f0:	9201      	str	r2, [sp, #4]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	9200      	str	r2, [sp, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a3a      	ldr	r2, [pc, #232]	@ (80012e4 <main+0x13c>)
 80011fa:	21c8      	movs	r1, #200	@ 0xc8
 80011fc:	200a      	movs	r0, #10
 80011fe:	f7ff fc8f 	bl	8000b20 <ILI9488_WriteString>
 8001202:	e00d      	b.n	8001220 <main+0x78>
  }
  else
  {
    // Falha! Mostra uma mensagem de erro
    ILI9488_WriteString(10, 200, "Erro no Sensor de Cor!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8001204:	4b36      	ldr	r3, [pc, #216]	@ (80012e0 <main+0x138>)
 8001206:	2200      	movs	r2, #0
 8001208:	9202      	str	r2, [sp, #8]
 800120a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a34      	ldr	r2, [pc, #208]	@ (80012e8 <main+0x140>)
 8001218:	21c8      	movs	r1, #200	@ 0xc8
 800121a:	200a      	movs	r0, #10
 800121c:	f7ff fc80 	bl	8000b20 <ILI9488_WriteString>
  }

  ILI9488_WriteString(20, 120, "Sistema Iniciado!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8001220:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <main+0x138>)
 8001222:	2200      	movs	r2, #0
 8001224:	9202      	str	r2, [sp, #8]
 8001226:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800122a:	9201      	str	r2, [sp, #4]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a2e      	ldr	r2, [pc, #184]	@ (80012ec <main+0x144>)
 8001234:	2178      	movs	r1, #120	@ 0x78
 8001236:	2014      	movs	r0, #20
 8001238:	f7ff fc72 	bl	8000b20 <ILI9488_WriteString>
  HAL_Delay(2000); // Uma pequena pausa para o usuário ler a mensagem.
 800123c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001240:	f001 fbe2 	bl	8002a08 <HAL_Delay>

  // 4. Limpa a tela para começar a desenhar.
  ILI9488_FillScreen(ILI9488_BLACK);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff fcb7 	bl	8000bb8 <ILI9488_FillScreen>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osMutexDef(gameMutex);
 800124a:	2300      	movs	r3, #0
 800124c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800124e:	2300      	movs	r3, #0
 8001250:	65fb      	str	r3, [r7, #92]	@ 0x5c
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 8001252:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001256:	4618      	mov	r0, r3
 8001258:	f005 f921 	bl	800649e <osMutexCreate>
 800125c:	4603      	mov	r3, r0
 800125e:	4a24      	ldr	r2, [pc, #144]	@ (80012f0 <main+0x148>)
 8001260:	6013      	str	r3, [r2, #0]

  osThreadDef(initPutHalTask, StartInputHalTask, osPriorityNormal, 0, 128);
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <main+0x14c>)
 8001264:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001268:	461d      	mov	r5, r3
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  inputHalTaskHandle = osThreadCreate(osThread(initPutHalTask), NULL);
 8001276:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f005 f8ae 	bl	80063de <osThreadCreate>
 8001282:	4603      	mov	r3, r0
 8001284:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <main+0x150>)
 8001286:	6013      	str	r3, [r2, #0]

  osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 256);
 8001288:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <main+0x154>)
 800128a:	f107 0420 	add.w	r4, r7, #32
 800128e:	461d      	mov	r5, r3
 8001290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001294:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f005 f89b 	bl	80063de <osThreadCreate>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a15      	ldr	r2, [pc, #84]	@ (8001300 <main+0x158>)
 80012ac:	6013      	str	r3, [r2, #0]

  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <main+0x15c>)
 80012b0:	1d3c      	adds	r4, r7, #4
 80012b2:	461d      	mov	r5, r3
 80012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f005 f88a 	bl	80063de <osThreadCreate>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <main+0x160>)
 80012ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012d0:	f005 f87e 	bl	80063d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <main+0x12c>
 80012d8:	40020800 	.word	0x40020800
 80012dc:	20000368 	.word	0x20000368
 80012e0:	20000000 	.word	0x20000000
 80012e4:	08009ff0 	.word	0x08009ff0
 80012e8:	0800a004 	.word	0x0800a004
 80012ec:	0800a01c 	.word	0x0800a01c
 80012f0:	20000468 	.word	0x20000468
 80012f4:	0800a040 	.word	0x0800a040
 80012f8:	2000045c 	.word	0x2000045c
 80012fc:	0800a068 	.word	0x0800a068
 8001300:	20000460 	.word	0x20000460
 8001304:	0800a090 	.word	0x0800a090
 8001308:	20000464 	.word	0x20000464

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	@ 0x50
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	2230      	movs	r2, #48	@ 0x30
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f007 fdbf 	bl	8008e9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <SystemClock_Config+0xcc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	4a27      	ldr	r2, [pc, #156]	@ (80013d8 <SystemClock_Config+0xcc>)
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001340:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <SystemClock_Config+0xcc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <SystemClock_Config+0xd0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <SystemClock_Config+0xd0>)
 8001356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <SystemClock_Config+0xd0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001370:	2310      	movs	r3, #16
 8001372:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001378:	2300      	movs	r3, #0
 800137a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800137c:	2308      	movs	r3, #8
 800137e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001380:	23a8      	movs	r3, #168	@ 0xa8
 8001382:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001388:	2304      	movs	r3, #4
 800138a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	4618      	mov	r0, r3
 8001392:	f003 f8a1 	bl	80044d8 <HAL_RCC_OscConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800139c:	f001 f82e 	bl	80023fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a0:	230f      	movs	r3, #15
 80013a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a4:	2302      	movs	r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2105      	movs	r1, #5
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fb02 	bl	80049c8 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ca:	f001 f817 	bl	80023fc <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	@ 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2C1_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <MX_I2C1_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_I2C1_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_I2C1_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_I2C1_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2C1_Init+0x50>)
 800141e:	f002 f81d 	bl	800345c <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 ffe8 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000368 	.word	0x20000368
 8001434:	40005400 	.word	0x40005400
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001442:	4a18      	ldr	r2, [pc, #96]	@ (80014a4 <MX_SPI1_Init+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001470:	2208      	movs	r2, #8
 8001472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_SPI1_Init+0x64>)
 8001488:	220a      	movs	r2, #10
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_SPI1_Init+0x64>)
 800148e:	f003 fc7b 	bl	8004d88 <HAL_SPI_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001498:	f000 ffb0 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200003bc 	.word	0x200003bc
 80014a4:	40013000 	.word	0x40013000

080014a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_UART4_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <MX_UART4_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <MX_UART4_Init+0x4c>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_UART4_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_UART4_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <MX_UART4_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_UART4_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <MX_UART4_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_UART4_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_UART4_Init+0x4c>)
 80014e0:	f004 f81a 	bl	8005518 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80014ea:	f000 ff87 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000414 	.word	0x20000414
 80014f8:	40004c00 	.word	0x40004c00

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b49      	ldr	r3, [pc, #292]	@ (800163c <MX_GPIO_Init+0x140>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a48      	ldr	r2, [pc, #288]	@ (800163c <MX_GPIO_Init+0x140>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b46      	ldr	r3, [pc, #280]	@ (800163c <MX_GPIO_Init+0x140>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b42      	ldr	r3, [pc, #264]	@ (800163c <MX_GPIO_Init+0x140>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a41      	ldr	r2, [pc, #260]	@ (800163c <MX_GPIO_Init+0x140>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b3f      	ldr	r3, [pc, #252]	@ (800163c <MX_GPIO_Init+0x140>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b3b      	ldr	r3, [pc, #236]	@ (800163c <MX_GPIO_Init+0x140>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a3a      	ldr	r2, [pc, #232]	@ (800163c <MX_GPIO_Init+0x140>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b38      	ldr	r3, [pc, #224]	@ (800163c <MX_GPIO_Init+0x140>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b34      	ldr	r3, [pc, #208]	@ (800163c <MX_GPIO_Init+0x140>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a33      	ldr	r2, [pc, #204]	@ (800163c <MX_GPIO_Init+0x140>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b31      	ldr	r3, [pc, #196]	@ (800163c <MX_GPIO_Init+0x140>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2110      	movs	r1, #16
 8001586:	482e      	ldr	r0, [pc, #184]	@ (8001640 <MX_GPIO_Init+0x144>)
 8001588:	f001 ff4e 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2103      	movs	r1, #3
 8001590:	482c      	ldr	r0, [pc, #176]	@ (8001644 <MX_GPIO_Init+0x148>)
 8001592:	f001 ff49 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2180      	movs	r1, #128	@ 0x80
 800159a:	482b      	ldr	r0, [pc, #172]	@ (8001648 <MX_GPIO_Init+0x14c>)
 800159c:	f001 ff44 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	210f      	movs	r1, #15
 80015a4:	4829      	ldr	r0, [pc, #164]	@ (800164c <MX_GPIO_Init+0x150>)
 80015a6:	f001 ff3f 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80015aa:	2310      	movs	r3, #16
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	481f      	ldr	r0, [pc, #124]	@ (8001640 <MX_GPIO_Init+0x144>)
 80015c2:	f001 fd7d 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 80015c6:	2303      	movs	r3, #3
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4819      	ldr	r0, [pc, #100]	@ (8001644 <MX_GPIO_Init+0x148>)
 80015de:	f001 fd6f 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_LED_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4813      	ldr	r0, [pc, #76]	@ (8001648 <MX_GPIO_Init+0x14c>)
 80015fa:	f001 fd61 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 80015fe:	230f      	movs	r3, #15
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	480d      	ldr	r0, [pc, #52]	@ (800164c <MX_GPIO_Init+0x150>)
 8001616:	f001 fd53 	bl	80030c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 800161a:	23f0      	movs	r3, #240	@ 0xf0
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001622:	2301      	movs	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4807      	ldr	r0, [pc, #28]	@ (800164c <MX_GPIO_Init+0x150>)
 800162e:	f001 fd47 	bl	80030c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	@ 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	40020800 	.word	0x40020800
 800164c:	40020c00 	.word	0x40020c00

08001650 <StartInputHalTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartInputHalTask(void const * argument)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char cCurrent;
  /* Infinite loop */
  for(;;) // O loop infinito de uma tarefa RTOS é "for(;;)"
  {
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8001658:	f7ff fd1c 	bl	8001094 <KEYPAD_Scan>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]
    if(cCurrent != '\0')
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <StartInputHalTask+0x1c>
    {
      keyPressed = cCurrent;
 8001666:	4a05      	ldr	r2, [pc, #20]	@ (800167c <StartInputHalTask+0x2c>)
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	7013      	strb	r3, [r2, #0]
    }
    TCS3472_ReadData(&hi2c1, &colorData);
 800166c:	4904      	ldr	r1, [pc, #16]	@ (8001680 <StartInputHalTask+0x30>)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <StartInputHalTask+0x34>)
 8001670:	f7ff fb1a 	bl	8000ca8 <TCS3472_ReadData>
    osDelay(50);
 8001674:	2032      	movs	r0, #50	@ 0x32
 8001676:	f004 fefe 	bl	8006476 <osDelay>
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 800167a:	e7ed      	b.n	8001658 <StartInputHalTask+0x8>
 800167c:	2000046c 	.word	0x2000046c
 8001680:	20000488 	.word	0x20000488
 8001684:	20000368 	.word	0x20000368

08001688 <StartGameTask>:
  }
}

void StartGameTask(void const * argument)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  char cLocalKeyPressed;
  for(;;)
  {
    cLocalKeyPressed = NONE_KEY;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
    
    osMutexWait(gameMutexHandle, osWaitForever);
 8001694:	4baf      	ldr	r3, [pc, #700]	@ (8001954 <StartGameTask+0x2cc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	4618      	mov	r0, r3
 800169e:	f004 ff17 	bl	80064d0 <osMutexWait>
    if (keyPressed != NONE_KEY) {
 80016a2:	4bad      	ldr	r3, [pc, #692]	@ (8001958 <StartGameTask+0x2d0>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <StartGameTask+0x30>
      cLocalKeyPressed = keyPressed;
 80016ac:	4baa      	ldr	r3, [pc, #680]	@ (8001958 <StartGameTask+0x2d0>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	73fb      	strb	r3, [r7, #15]
      keyPressed = NONE_KEY; 
 80016b2:	4ba9      	ldr	r3, [pc, #676]	@ (8001958 <StartGameTask+0x2d0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 80016b8:	4ba6      	ldr	r3, [pc, #664]	@ (8001954 <StartGameTask+0x2cc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 ff55 	bl	800656c <osMutexRelease>
    
    if (cLocalKeyPressed != NONE_KEY)
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8273 	beq.w	8001bb0 <StartGameTask+0x528>
    {
      osMutexWait(gameMutexHandle, osWaitForever);
 80016ca:	4ba2      	ldr	r3, [pc, #648]	@ (8001954 <StartGameTask+0x2cc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f04f 31ff 	mov.w	r1, #4294967295
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 fefc 	bl	80064d0 <osMutexWait>
      switch(eCurrentState)
 80016d8:	4ba0      	ldr	r3, [pc, #640]	@ (800195c <StartGameTask+0x2d4>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b05      	cmp	r3, #5
 80016e0:	f200 8255 	bhi.w	8001b8e <StartGameTask+0x506>
 80016e4:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <StartGameTask+0x64>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	08001705 	.word	0x08001705
 80016f0:	0800172d 	.word	0x0800172d
 80016f4:	08001801 	.word	0x08001801
 80016f8:	08001985 	.word	0x08001985
 80016fc:	08001afd 	.word	0x08001afd
 8001700:	08001b7b 	.word	0x08001b7b
      {
        case eInitGame:
        {
          eUserPlayer.u8HeartPoints = 100;
 8001704:	4b96      	ldr	r3, [pc, #600]	@ (8001960 <StartGameTask+0x2d8>)
 8001706:	2264      	movs	r2, #100	@ 0x64
 8001708:	701a      	strb	r2, [r3, #0]
          eCpuPlayer.u8HeartPoints = 100;
 800170a:	4b96      	ldr	r3, [pc, #600]	@ (8001964 <StartGameTask+0x2dc>)
 800170c:	2264      	movs	r2, #100	@ 0x64
 800170e:	701a      	strb	r2, [r3, #0]
          if(cLocalKeyPressed == CONFIRM_KEY)
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b2a      	cmp	r3, #42	@ 0x2a
 8001714:	f040 8242 	bne.w	8001b9c <StartGameTask+0x514>
          {
            eCurrentState = eDificultSelect;
 8001718:	4b90      	ldr	r3, [pc, #576]	@ (800195c <StartGameTask+0x2d4>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
            selectedOption = 0;
 800171e:	4b92      	ldr	r3, [pc, #584]	@ (8001968 <StartGameTask+0x2e0>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8001724:	4b91      	ldr	r3, [pc, #580]	@ (800196c <StartGameTask+0x2e4>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
            }
          break;
 800172a:	e237      	b.n	8001b9c <StartGameTask+0x514>
        }
        case eDificultSelect:
        {
          switch(cLocalKeyPressed)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	3b23      	subs	r3, #35	@ 0x23
 8001730:	2b15      	cmp	r3, #21
 8001732:	d863      	bhi.n	80017fc <StartGameTask+0x174>
 8001734:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <StartGameTask+0xb4>)
 8001736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173a:	bf00      	nop
 800173c:	080017d1 	.word	0x080017d1
 8001740:	080017fd 	.word	0x080017fd
 8001744:	080017fd 	.word	0x080017fd
 8001748:	080017fd 	.word	0x080017fd
 800174c:	080017fd 	.word	0x080017fd
 8001750:	080017fd 	.word	0x080017fd
 8001754:	080017fd 	.word	0x080017fd
 8001758:	080017df 	.word	0x080017df
 800175c:	080017fd 	.word	0x080017fd
 8001760:	080017fd 	.word	0x080017fd
 8001764:	080017fd 	.word	0x080017fd
 8001768:	080017fd 	.word	0x080017fd
 800176c:	080017fd 	.word	0x080017fd
 8001770:	080017fd 	.word	0x080017fd
 8001774:	080017fd 	.word	0x080017fd
 8001778:	080017b3 	.word	0x080017b3
 800177c:	080017fd 	.word	0x080017fd
 8001780:	080017fd 	.word	0x080017fd
 8001784:	080017fd 	.word	0x080017fd
 8001788:	080017fd 	.word	0x080017fd
 800178c:	080017fd 	.word	0x080017fd
 8001790:	08001795 	.word	0x08001795
          {
            case UP_KEY:
            {
              selectedOption = (selectedOption < MENU_OPTIONS_DIFFICULTY - 1) ? selectedOption + 1 : 0;
 8001794:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <StartGameTask+0x2e0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	dc03      	bgt.n	80017a4 <StartGameTask+0x11c>
 800179c:	4b72      	ldr	r3, [pc, #456]	@ (8001968 <StartGameTask+0x2e0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	e000      	b.n	80017a6 <StartGameTask+0x11e>
 80017a4:	2300      	movs	r3, #0
 80017a6:	4a70      	ldr	r2, [pc, #448]	@ (8001968 <StartGameTask+0x2e0>)
 80017a8:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 80017aa:	4b70      	ldr	r3, [pc, #448]	@ (800196c <StartGameTask+0x2e4>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
              break;
 80017b0:	e025      	b.n	80017fe <StartGameTask+0x176>
  }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_DIFFICULTY - 1;
 80017b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001968 <StartGameTask+0x2e0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dd03      	ble.n	80017c2 <StartGameTask+0x13a>
 80017ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001968 <StartGameTask+0x2e0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3b01      	subs	r3, #1
 80017c0:	e000      	b.n	80017c4 <StartGameTask+0x13c>
 80017c2:	2302      	movs	r3, #2
 80017c4:	4a68      	ldr	r2, [pc, #416]	@ (8001968 <StartGameTask+0x2e0>)
 80017c6:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 80017c8:	4b68      	ldr	r3, [pc, #416]	@ (800196c <StartGameTask+0x2e4>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
              break;
 80017ce:	e016      	b.n	80017fe <StartGameTask+0x176>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 80017d0:	4b66      	ldr	r3, [pc, #408]	@ (800196c <StartGameTask+0x2e4>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
              eCurrentState = eInitGame;
 80017d6:	4b61      	ldr	r3, [pc, #388]	@ (800195c <StartGameTask+0x2d4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
              break;
 80017dc:	e00f      	b.n	80017fe <StartGameTask+0x176>
            }
            case CONFIRM_KEY:
            {
              selectedDifficulty = (EDificult)selectedOption;
 80017de:	4b62      	ldr	r3, [pc, #392]	@ (8001968 <StartGameTask+0x2e0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b62      	ldr	r3, [pc, #392]	@ (8001970 <StartGameTask+0x2e8>)
 80017e6:	701a      	strb	r2, [r3, #0]
              eCurrentState = ePersonaSelect;
 80017e8:	4b5c      	ldr	r3, [pc, #368]	@ (800195c <StartGameTask+0x2d4>)
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
              selectedOption = FALSE; // Reseta para o próximo menu
 80017ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001968 <StartGameTask+0x2e0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80017f4:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <StartGameTask+0x2e4>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
              break;
 80017fa:	e000      	b.n	80017fe <StartGameTask+0x176>
            }
            default:
            {
              break;
 80017fc:	bf00      	nop
            }
          }
          break;
 80017fe:	e1d2      	b.n	8001ba6 <StartGameTask+0x51e>
        }
        case ePersonaSelect:
        {
          switch(cLocalKeyPressed)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	3b23      	subs	r3, #35	@ 0x23
 8001804:	2b15      	cmp	r3, #21
 8001806:	f200 80a2 	bhi.w	800194e <StartGameTask+0x2c6>
 800180a:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <StartGameTask+0x188>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	080018a5 	.word	0x080018a5
 8001814:	0800194f 	.word	0x0800194f
 8001818:	0800194f 	.word	0x0800194f
 800181c:	0800194f 	.word	0x0800194f
 8001820:	0800194f 	.word	0x0800194f
 8001824:	0800194f 	.word	0x0800194f
 8001828:	0800194f 	.word	0x0800194f
 800182c:	080018b3 	.word	0x080018b3
 8001830:	0800194f 	.word	0x0800194f
 8001834:	0800194f 	.word	0x0800194f
 8001838:	0800194f 	.word	0x0800194f
 800183c:	0800194f 	.word	0x0800194f
 8001840:	0800194f 	.word	0x0800194f
 8001844:	0800194f 	.word	0x0800194f
 8001848:	0800194f 	.word	0x0800194f
 800184c:	08001887 	.word	0x08001887
 8001850:	0800194f 	.word	0x0800194f
 8001854:	0800194f 	.word	0x0800194f
 8001858:	0800194f 	.word	0x0800194f
 800185c:	0800194f 	.word	0x0800194f
 8001860:	0800194f 	.word	0x0800194f
 8001864:	08001869 	.word	0x08001869
          {
            case UP_KEY:
            {                  
              selectedOption = (selectedOption < MENU_OPTIONS_PERSONA - 1) ? selectedOption + 1 : 0;
 8001868:	4b3f      	ldr	r3, [pc, #252]	@ (8001968 <StartGameTask+0x2e0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b03      	cmp	r3, #3
 800186e:	dc03      	bgt.n	8001878 <StartGameTask+0x1f0>
 8001870:	4b3d      	ldr	r3, [pc, #244]	@ (8001968 <StartGameTask+0x2e0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	e000      	b.n	800187a <StartGameTask+0x1f2>
 8001878:	2300      	movs	r3, #0
 800187a:	4a3b      	ldr	r2, [pc, #236]	@ (8001968 <StartGameTask+0x2e0>)
 800187c:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800187e:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <StartGameTask+0x2e4>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
              break;
 8001884:	e064      	b.n	8001950 <StartGameTask+0x2c8>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_PERSONA - 1;
 8001886:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <StartGameTask+0x2e0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	dd03      	ble.n	8001896 <StartGameTask+0x20e>
 800188e:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <StartGameTask+0x2e0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3b01      	subs	r3, #1
 8001894:	e000      	b.n	8001898 <StartGameTask+0x210>
 8001896:	2304      	movs	r3, #4
 8001898:	4a33      	ldr	r2, [pc, #204]	@ (8001968 <StartGameTask+0x2e0>)
 800189a:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800189c:	4b33      	ldr	r3, [pc, #204]	@ (800196c <StartGameTask+0x2e4>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
              break;
 80018a2:	e055      	b.n	8001950 <StartGameTask+0x2c8>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 80018a4:	4b31      	ldr	r3, [pc, #196]	@ (800196c <StartGameTask+0x2e4>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
              eCurrentState = eDificultSelect;
 80018aa:	4b2c      	ldr	r3, [pc, #176]	@ (800195c <StartGameTask+0x2d4>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
              break;
 80018b0:	e04e      	b.n	8001950 <StartGameTask+0x2c8>
            }
            case CONFIRM_KEY:
            {
              eUserPlayer.ePersonaElemental = (EElemental)selectedOption;
 80018b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001968 <StartGameTask+0x2e0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <StartGameTask+0x2d8>)
 80018ba:	705a      	strb	r2, [r3, #1]
              eCurrentState = eBattleInit;
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <StartGameTask+0x2d4>)
 80018be:	2203      	movs	r2, #3
 80018c0:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80018c2:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <StartGameTask+0x2e4>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0;     // Zera o contador de ataques
 80018c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <StartGameTask+0x2ec>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;   // Inicia com a primeira opção (Fogo) pré-selecionada
 80018ce:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <StartGameTask+0x2e0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 80018d4:	2204      	movs	r2, #4
 80018d6:	2100      	movs	r1, #0
 80018d8:	4827      	ldr	r0, [pc, #156]	@ (8001978 <StartGameTask+0x2f0>)
 80018da:	f007 fae0 	bl	8008e9e <memset>
              memset((void*)eCpuPlayer.eAttackSequential, 0, sizeof(eCpuPlayer.eAttackSequential));
 80018de:	2204      	movs	r2, #4
 80018e0:	2100      	movs	r1, #0
 80018e2:	4826      	ldr	r0, [pc, #152]	@ (800197c <StartGameTask+0x2f4>)
 80018e4:	f007 fadb 	bl	8008e9e <memset>

              srand(HAL_GetTick()); 
 80018e8:	f001 f882 	bl	80029f0 <HAL_GetTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f007 f942 	bl	8008b78 <srand>
              eCpuPlayer.ePersonaElemental = (rand() % 6);
 80018f4:	f007 f96e 	bl	8008bd4 <rand>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <StartGameTask+0x2f8>)
 80018fc:	fb83 3102 	smull	r3, r1, r3, r2
 8001900:	17d3      	asrs	r3, r2, #31
 8001902:	1ac9      	subs	r1, r1, r3
 8001904:	460b      	mov	r3, r1
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	440b      	add	r3, r1
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	1ad1      	subs	r1, r2, r3
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <StartGameTask+0x2dc>)
 8001912:	705a      	strb	r2, [r3, #1]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001914:	2300      	movs	r3, #0
 8001916:	73bb      	strb	r3, [r7, #14]
 8001918:	e015      	b.n	8001946 <StartGameTask+0x2be>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6); 
 800191a:	f007 f95b 	bl	8008bd4 <rand>
 800191e:	4602      	mov	r2, r0
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <StartGameTask+0x2f8>)
 8001922:	fb83 3102 	smull	r3, r1, r3, r2
 8001926:	17d3      	asrs	r3, r2, #31
 8001928:	1ac9      	subs	r1, r1, r3
 800192a:	460b      	mov	r3, r1
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	440b      	add	r3, r1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	1ad1      	subs	r1, r2, r3
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	b2c9      	uxtb	r1, r1
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <StartGameTask+0x2dc>)
 800193a:	4413      	add	r3, r2
 800193c:	460a      	mov	r2, r1
 800193e:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001940:	7bbb      	ldrb	r3, [r7, #14]
 8001942:	3301      	adds	r3, #1
 8001944:	73bb      	strb	r3, [r7, #14]
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d9e6      	bls.n	800191a <StartGameTask+0x292>
              }
              break;
 800194c:	e000      	b.n	8001950 <StartGameTask+0x2c8>
            }
            default:
            {
              break;
 800194e:	bf00      	nop
            }
          }
          break;
 8001950:	e129      	b.n	8001ba6 <StartGameTask+0x51e>
 8001952:	bf00      	nop
 8001954:	20000468 	.word	0x20000468
 8001958:	2000046c 	.word	0x2000046c
 800195c:	2000046d 	.word	0x2000046d
 8001960:	20000478 	.word	0x20000478
 8001964:	20000480 	.word	0x20000480
 8001968:	20000470 	.word	0x20000470
 800196c:	20000048 	.word	0x20000048
 8001970:	20000474 	.word	0x20000474
 8001974:	20000490 	.word	0x20000490
 8001978:	2000047a 	.word	0x2000047a
 800197c:	20000482 	.word	0x20000482
 8001980:	2aaaaaab 	.word	0x2aaaaaab
        }
        case eBattleInit:
        {
          switch (cLocalKeyPressed)
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	3b23      	subs	r3, #35	@ 0x23
 8001988:	2b21      	cmp	r3, #33	@ 0x21
 800198a:	f200 80b5 	bhi.w	8001af8 <StartGameTask+0x470>
 800198e:	a201      	add	r2, pc, #4	@ (adr r2, 8001994 <StartGameTask+0x30c>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	08001aeb 	.word	0x08001aeb
 8001998:	08001af9 	.word	0x08001af9
 800199c:	08001af9 	.word	0x08001af9
 80019a0:	08001af9 	.word	0x08001af9
 80019a4:	08001af9 	.word	0x08001af9
 80019a8:	08001af9 	.word	0x08001af9
 80019ac:	08001af9 	.word	0x08001af9
 80019b0:	08001a55 	.word	0x08001a55
 80019b4:	08001af9 	.word	0x08001af9
 80019b8:	08001af9 	.word	0x08001af9
 80019bc:	08001af9 	.word	0x08001af9
 80019c0:	08001af9 	.word	0x08001af9
 80019c4:	08001af9 	.word	0x08001af9
 80019c8:	08001af9 	.word	0x08001af9
 80019cc:	08001af9 	.word	0x08001af9
 80019d0:	08001af9 	.word	0x08001af9
 80019d4:	08001af9 	.word	0x08001af9
 80019d8:	08001af9 	.word	0x08001af9
 80019dc:	08001af9 	.word	0x08001af9
 80019e0:	08001af9 	.word	0x08001af9
 80019e4:	08001af9 	.word	0x08001af9
 80019e8:	08001af9 	.word	0x08001af9
 80019ec:	08001af9 	.word	0x08001af9
 80019f0:	08001af9 	.word	0x08001af9
 80019f4:	08001af9 	.word	0x08001af9
 80019f8:	08001af9 	.word	0x08001af9
 80019fc:	08001af9 	.word	0x08001af9
 8001a00:	08001af9 	.word	0x08001af9
 8001a04:	08001af9 	.word	0x08001af9
 8001a08:	08001af9 	.word	0x08001af9
 8001a0c:	08001a1d 	.word	0x08001a1d
 8001a10:	08001a2b 	.word	0x08001a2b
 8001a14:	08001a39 	.word	0x08001a39
 8001a18:	08001a47 	.word	0x08001a47
          {
            case FIRE_KEY:
            {
              selectedOption = 0;
 8001a1c:	4b66      	ldr	r3, [pc, #408]	@ (8001bb8 <StartGameTask+0x530>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001a22:	4b66      	ldr	r3, [pc, #408]	@ (8001bbc <StartGameTask+0x534>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
              break;
 8001a28:	e067      	b.n	8001afa <StartGameTask+0x472>
            }
            case WATER_KEY:
            {
              selectedOption = 1;
 8001a2a:	4b63      	ldr	r3, [pc, #396]	@ (8001bb8 <StartGameTask+0x530>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001a30:	4b62      	ldr	r3, [pc, #392]	@ (8001bbc <StartGameTask+0x534>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
              break;
 8001a36:	e060      	b.n	8001afa <StartGameTask+0x472>
            }
            case AIR_KEY: 
            {
              selectedOption = 2;
 8001a38:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb8 <StartGameTask+0x530>)
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bbc <StartGameTask+0x534>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
              break;
 8001a44:	e059      	b.n	8001afa <StartGameTask+0x472>
            }
            case EARTH_KEY: 
            {
              selectedOption = 3;
 8001a46:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb8 <StartGameTask+0x530>)
 8001a48:	2203      	movs	r2, #3
 8001a4a:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bbc <StartGameTask+0x534>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
              break;
 8001a52:	e052      	b.n	8001afa <StartGameTask+0x472>
            }
            case CONFIRM_KEY:
            {
              switch(selectedOption)
 8001a54:	4b58      	ldr	r3, [pc, #352]	@ (8001bb8 <StartGameTask+0x530>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d82f      	bhi.n	8001abc <StartGameTask+0x434>
 8001a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a64 <StartGameTask+0x3dc>)
 8001a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a62:	bf00      	nop
 8001a64:	08001a75 	.word	0x08001a75
 8001a68:	08001a87 	.word	0x08001a87
 8001a6c:	08001a99 	.word	0x08001a99
 8001a70:	08001aab 	.word	0x08001aab
              {
                  case 0: eUserPlayer.eAttackSequential[u8ContAttack] = eRed;    break;
 8001a74:	4b52      	ldr	r3, [pc, #328]	@ (8001bc0 <StartGameTask+0x538>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b51      	ldr	r3, [pc, #324]	@ (8001bc4 <StartGameTask+0x53c>)
 8001a7e:	4413      	add	r3, r2
 8001a80:	2200      	movs	r2, #0
 8001a82:	709a      	strb	r2, [r3, #2]
 8001a84:	e01a      	b.n	8001abc <StartGameTask+0x434>
                  case 1: eUserPlayer.eAttackSequential[u8ContAttack] = eBlue;   break;
 8001a86:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc0 <StartGameTask+0x538>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc4 <StartGameTask+0x53c>)
 8001a90:	4413      	add	r3, r2
 8001a92:	2201      	movs	r2, #1
 8001a94:	709a      	strb	r2, [r3, #2]
 8001a96:	e011      	b.n	8001abc <StartGameTask+0x434>
                  case 2: eUserPlayer.eAttackSequential[u8ContAttack] = eGreen;  break;
 8001a98:	4b49      	ldr	r3, [pc, #292]	@ (8001bc0 <StartGameTask+0x538>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b48      	ldr	r3, [pc, #288]	@ (8001bc4 <StartGameTask+0x53c>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	709a      	strb	r2, [r3, #2]
 8001aa8:	e008      	b.n	8001abc <StartGameTask+0x434>
                  case 3: eUserPlayer.eAttackSequential[u8ContAttack] = eYellow; break;
 8001aaa:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <StartGameTask+0x538>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b44      	ldr	r3, [pc, #272]	@ (8001bc4 <StartGameTask+0x53c>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	709a      	strb	r2, [r3, #2]
 8001aba:	bf00      	nop
              }
              
              u8ContAttack++; 
 8001abc:	4b40      	ldr	r3, [pc, #256]	@ (8001bc0 <StartGameTask+0x538>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc0 <StartGameTask+0x538>)
 8001ac8:	701a      	strb	r2, [r3, #0]
              
              if (u8ContAttack >= ATTACKS_NUMBERS)
 8001aca:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <StartGameTask+0x538>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d906      	bls.n	8001ae2 <StartGameTask+0x45a>
              {
                vInitBattle(&eUserPlayer, &eCpuPlayer);
 8001ad4:	493c      	ldr	r1, [pc, #240]	@ (8001bc8 <StartGameTask+0x540>)
 8001ad6:	483b      	ldr	r0, [pc, #236]	@ (8001bc4 <StartGameTask+0x53c>)
 8001ad8:	f7ff f944 	bl	8000d64 <vInitBattle>
                eCurrentState = ePlayerTurn;
 8001adc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <StartGameTask+0x544>)
 8001ade:	2204      	movs	r2, #4
 8001ae0:	701a      	strb	r2, [r3, #0]
              }
              
              u8CleanScreen = TRUE;
 8001ae2:	4b36      	ldr	r3, [pc, #216]	@ (8001bbc <StartGameTask+0x534>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
              break;
 8001ae8:	e007      	b.n	8001afa <StartGameTask+0x472>
            }
            case BACK_KEY:
            {
              eCurrentState = ePersonaSelect;
 8001aea:	4b38      	ldr	r3, [pc, #224]	@ (8001bcc <StartGameTask+0x544>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001af0:	4b32      	ldr	r3, [pc, #200]	@ (8001bbc <StartGameTask+0x534>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
              break;
 8001af6:	e000      	b.n	8001afa <StartGameTask+0x472>
            }
            default:
            {
              break;
 8001af8:	bf00      	nop
            }
          }
          break;
 8001afa:	e054      	b.n	8001ba6 <StartGameTask+0x51e>
        }
        case ePlayerTurn:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b00:	d14e      	bne.n	8001ba0 <StartGameTask+0x518>
          {            
            if (eUserPlayer.u8HeartPoints == 0 || eCpuPlayer.u8HeartPoints == 0)
 8001b02:	4b30      	ldr	r3, [pc, #192]	@ (8001bc4 <StartGameTask+0x53c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <StartGameTask+0x48e>
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <StartGameTask+0x540>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <StartGameTask+0x496>
            {
              eCurrentState = eEndGame; 
 8001b16:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <StartGameTask+0x544>)
 8001b18:	2205      	movs	r2, #5
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e029      	b.n	8001b72 <StartGameTask+0x4ea>
            }
            else
            {
              // Ninguém perdeu, volta para selecionar novos ataques
              eCurrentState = eBattleInit;
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bcc <StartGameTask+0x544>)
 8001b20:	2203      	movs	r2, #3
 8001b22:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0; // Prepara para o novo round
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <StartGameTask+0x538>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;
 8001b2a:	4b23      	ldr	r3, [pc, #140]	@ (8001bb8 <StartGameTask+0x530>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 8001b30:	2204      	movs	r2, #4
 8001b32:	2100      	movs	r1, #0
 8001b34:	4826      	ldr	r0, [pc, #152]	@ (8001bd0 <StartGameTask+0x548>)
 8001b36:	f007 f9b2 	bl	8008e9e <memset>
              
              // Gera novos ataques para a CPU para o próximo round
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	737b      	strb	r3, [r7, #13]
 8001b3e:	e015      	b.n	8001b6c <StartGameTask+0x4e4>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6);
 8001b40:	f007 f848 	bl	8008bd4 <rand>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <StartGameTask+0x54c>)
 8001b48:	fb83 3102 	smull	r3, r1, r3, r2
 8001b4c:	17d3      	asrs	r3, r2, #31
 8001b4e:	1ac9      	subs	r1, r1, r3
 8001b50:	460b      	mov	r3, r1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	1ad1      	subs	r1, r2, r3
 8001b5a:	7b7b      	ldrb	r3, [r7, #13]
 8001b5c:	b2c9      	uxtb	r1, r1
 8001b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc8 <StartGameTask+0x540>)
 8001b60:	4413      	add	r3, r2
 8001b62:	460a      	mov	r2, r1
 8001b64:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001b66:	7b7b      	ldrb	r3, [r7, #13]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	737b      	strb	r3, [r7, #13]
 8001b6c:	7b7b      	ldrb	r3, [r7, #13]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d9e6      	bls.n	8001b40 <StartGameTask+0x4b8>
              }
            }
            u8CleanScreen = TRUE;
 8001b72:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <StartGameTask+0x534>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001b78:	e012      	b.n	8001ba0 <StartGameTask+0x518>
        }
        case eEndGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b7e:	d111      	bne.n	8001ba4 <StartGameTask+0x51c>
          {
            eCurrentState = eInitGame;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <StartGameTask+0x544>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <StartGameTask+0x534>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001b8c:	e00a      	b.n	8001ba4 <StartGameTask+0x51c>
        }
        default:
        {
          // Estado desconhecido, volta para o início por segurança
          eCurrentState = eInitGame;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <StartGameTask+0x544>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
          u8CleanScreen = TRUE;
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <StartGameTask+0x534>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
          break;
 8001b9a:	e004      	b.n	8001ba6 <StartGameTask+0x51e>
          break;
 8001b9c:	bf00      	nop
 8001b9e:	e002      	b.n	8001ba6 <StartGameTask+0x51e>
          break;
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <StartGameTask+0x51e>
          break;
 8001ba4:	bf00      	nop
        }
      }
      osMutexRelease(gameMutexHandle);
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <StartGameTask+0x550>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f004 fcde 	bl	800656c <osMutexRelease>
    }
    osDelay(50);
 8001bb0:	2032      	movs	r0, #50	@ 0x32
 8001bb2:	f004 fc60 	bl	8006476 <osDelay>
    cLocalKeyPressed = NONE_KEY;
 8001bb6:	e56b      	b.n	8001690 <StartGameTask+0x8>
 8001bb8:	20000470 	.word	0x20000470
 8001bbc:	20000048 	.word	0x20000048
 8001bc0:	20000490 	.word	0x20000490
 8001bc4:	20000478 	.word	0x20000478
 8001bc8:	20000480 	.word	0x20000480
 8001bcc:	2000046d 	.word	0x2000046d
 8001bd0:	2000047a 	.word	0x2000047a
 8001bd4:	2aaaaaab 	.word	0x2aaaaaab
 8001bd8:	20000468 	.word	0x20000468

08001bdc <StartDisplayTask>:
  }
}

void StartDisplayTask(void const * argument)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	@ 0x50
 8001be0:	af04      	add	r7, sp, #16
 8001be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  char buffer[30];
  uint8_t u8RedrawScreen = FALSE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  for(;;)
  {
    osMutexWait(gameMutexHandle, osWaitForever);
 8001bea:	4bae      	ldr	r3, [pc, #696]	@ (8001ea4 <StartDisplayTask+0x2c8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fc6c 	bl	80064d0 <osMutexWait>
    if (TRUE == u8CleanScreen) {
 8001bf8:	4bab      	ldr	r3, [pc, #684]	@ (8001ea8 <StartDisplayTask+0x2cc>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d105      	bne.n	8001c0e <StartDisplayTask+0x32>
        u8RedrawScreen = TRUE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        u8CleanScreen = FALSE;
 8001c08:	4ba7      	ldr	r3, [pc, #668]	@ (8001ea8 <StartDisplayTask+0x2cc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 8001c0e:	4ba5      	ldr	r3, [pc, #660]	@ (8001ea4 <StartDisplayTask+0x2c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fcaa 	bl	800656c <osMutexRelease>



    if(TRUE == u8RedrawScreen)
 8001c18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	f040 83d3 	bne.w	80023c8 <StartDisplayTask+0x7ec>
    {
      ClearScreen();
 8001c22:	f7ff f9bd 	bl	8000fa0 <ClearScreen>

      switch(eCurrentState)
 8001c26:	4ba1      	ldr	r3, [pc, #644]	@ (8001eac <StartDisplayTask+0x2d0>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	f200 83b9 	bhi.w	80023a4 <StartDisplayTask+0x7c8>
 8001c32:	a201      	add	r2, pc, #4	@ (adr r2, 8001c38 <StartDisplayTask+0x5c>)
 8001c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c38:	08001c51 	.word	0x08001c51
 8001c3c:	08001cfb 	.word	0x08001cfb
 8001c40:	08001d0b 	.word	0x08001d0b
 8001c44:	08001d1b 	.word	0x08001d1b
 8001c48:	08002097 	.word	0x08002097
 8001c4c:	080022db 	.word	0x080022db
      {
          case eInitGame:
          {
            ILI9488_WriteString(5, 10, "ElementalCube!", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001c50:	4b97      	ldr	r3, [pc, #604]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	9202      	str	r2, [sp, #8]
 8001c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c5a:	9201      	str	r2, [sp, #4]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	9200      	str	r2, [sp, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a94      	ldr	r2, [pc, #592]	@ (8001eb4 <StartDisplayTask+0x2d8>)
 8001c64:	210a      	movs	r1, #10
 8001c66:	2005      	movs	r0, #5
 8001c68:	f7fe ff5a 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(5, 30, "Pressione *", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001c6c:	4b90      	ldr	r3, [pc, #576]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	9202      	str	r2, [sp, #8]
 8001c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c76:	9201      	str	r2, [sp, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	9200      	str	r2, [sp, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a8e      	ldr	r2, [pc, #568]	@ (8001eb8 <StartDisplayTask+0x2dc>)
 8001c80:	211e      	movs	r1, #30
 8001c82:	2005      	movs	r0, #5
 8001c84:	f7fe ff4c 	bl	8000b20 <ILI9488_WriteString>

            sprintf(buffer, "R:%04u G:%04u", colorData.red, colorData.green);
 8001c88:	4b8c      	ldr	r3, [pc, #560]	@ (8001ebc <StartDisplayTask+0x2e0>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b8a      	ldr	r3, [pc, #552]	@ (8001ebc <StartDisplayTask+0x2e0>)
 8001c92:	885b      	ldrh	r3, [r3, #2]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f107 0008 	add.w	r0, r7, #8
 8001c9a:	4989      	ldr	r1, [pc, #548]	@ (8001ec0 <StartDisplayTask+0x2e4>)
 8001c9c:	f007 f89a 	bl	8008dd4 <siprintf>
            ILI9488_WriteString(10, 200, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001ca0:	4b83      	ldr	r3, [pc, #524]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001ca2:	f107 0108 	add.w	r1, r7, #8
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	9202      	str	r2, [sp, #8]
 8001caa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cae:	9201      	str	r2, [sp, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	9200      	str	r2, [sp, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	21c8      	movs	r1, #200	@ 0xc8
 8001cba:	200a      	movs	r0, #10
 8001cbc:	f7fe ff30 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "B:%04u C:%04u", colorData.blue, colorData.clear);
 8001cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8001ebc <StartDisplayTask+0x2e0>)
 8001cc2:	889b      	ldrh	r3, [r3, #4]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8001ebc <StartDisplayTask+0x2e0>)
 8001cca:	88db      	ldrh	r3, [r3, #6]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f107 0008 	add.w	r0, r7, #8
 8001cd2:	497c      	ldr	r1, [pc, #496]	@ (8001ec4 <StartDisplayTask+0x2e8>)
 8001cd4:	f007 f87e 	bl	8008dd4 <siprintf>
            ILI9488_WriteString(10, 220, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001cd8:	4b75      	ldr	r3, [pc, #468]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001cda:	f107 0108 	add.w	r1, r7, #8
 8001cde:	2200      	movs	r2, #0
 8001ce0:	9202      	str	r2, [sp, #8]
 8001ce2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ce6:	9201      	str	r2, [sp, #4]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	9200      	str	r2, [sp, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	460a      	mov	r2, r1
 8001cf0:	21dc      	movs	r1, #220	@ 0xdc
 8001cf2:	200a      	movs	r0, #10
 8001cf4:	f7fe ff14 	bl	8000b20 <ILI9488_WriteString>
            break;
 8001cf8:	e363      	b.n	80023c2 <StartDisplayTask+0x7e6>
          }
          case eDificultSelect:
          {
            DrawMenu("Selecione Dificuldade", difficultyOptions, MENU_OPTIONS_DIFFICULTY, selectedOption);
 8001cfa:	4b73      	ldr	r3, [pc, #460]	@ (8001ec8 <StartDisplayTask+0x2ec>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2203      	movs	r2, #3
 8001d00:	4972      	ldr	r1, [pc, #456]	@ (8001ecc <StartDisplayTask+0x2f0>)
 8001d02:	4873      	ldr	r0, [pc, #460]	@ (8001ed0 <StartDisplayTask+0x2f4>)
 8001d04:	f7ff f95c 	bl	8000fc0 <DrawMenu>
            break;
 8001d08:	e35b      	b.n	80023c2 <StartDisplayTask+0x7e6>
          }
          case ePersonaSelect:
          {
            DrawMenu("Selecione Personagem", personaOptions, MENU_OPTIONS_PERSONA, selectedOption);
 8001d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec8 <StartDisplayTask+0x2ec>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2205      	movs	r2, #5
 8001d10:	4970      	ldr	r1, [pc, #448]	@ (8001ed4 <StartDisplayTask+0x2f8>)
 8001d12:	4871      	ldr	r0, [pc, #452]	@ (8001ed8 <StartDisplayTask+0x2fc>)
 8001d14:	f7ff f954 	bl	8000fc0 <DrawMenu>
            break;
 8001d18:	e353      	b.n	80023c2 <StartDisplayTask+0x7e6>
          }
          case eBattleInit:
          {
            sprintf(buffer, "Selecione o %d ataque", (u8ContAttack + 1));
 8001d1a:	4b70      	ldr	r3, [pc, #448]	@ (8001edc <StartDisplayTask+0x300>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	496e      	ldr	r1, [pc, #440]	@ (8001ee0 <StartDisplayTask+0x304>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f007 f853 	bl	8008dd4 <siprintf>
            ILI9488_WriteString(10, 15, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001d2e:	4b60      	ldr	r3, [pc, #384]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001d30:	f107 0108 	add.w	r1, r7, #8
 8001d34:	2200      	movs	r2, #0
 8001d36:	9202      	str	r2, [sp, #8]
 8001d38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d3c:	9201      	str	r2, [sp, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	9200      	str	r2, [sp, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	460a      	mov	r2, r1
 8001d46:	210f      	movs	r1, #15
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f7fe fee9 	bl	8000b20 <ILI9488_WriteString>

            uint16_t colorFogo  = (selectedOption == 0) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec8 <StartDisplayTask+0x2ec>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <StartDisplayTask+0x180>
 8001d56:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d5a:	e001      	b.n	8001d60 <StartDisplayTask+0x184>
 8001d5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d60:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            uint16_t colorAgua  = (selectedOption == 1) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001d62:	4b59      	ldr	r3, [pc, #356]	@ (8001ec8 <StartDisplayTask+0x2ec>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <StartDisplayTask+0x194>
 8001d6a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d6e:	e001      	b.n	8001d74 <StartDisplayTask+0x198>
 8001d70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d74:	857b      	strh	r3, [r7, #42]	@ 0x2a
            uint16_t colorAr    = (selectedOption == 2) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001d76:	4b54      	ldr	r3, [pc, #336]	@ (8001ec8 <StartDisplayTask+0x2ec>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d102      	bne.n	8001d84 <StartDisplayTask+0x1a8>
 8001d7e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d82:	e001      	b.n	8001d88 <StartDisplayTask+0x1ac>
 8001d84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d88:	853b      	strh	r3, [r7, #40]	@ 0x28
            uint16_t colorTerra = (selectedOption == 3) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec8 <StartDisplayTask+0x2ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d102      	bne.n	8001d98 <StartDisplayTask+0x1bc>
 8001d92:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d96:	e001      	b.n	8001d9c <StartDisplayTask+0x1c0>
 8001d98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d9c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            ILI9488_FillRectangle(5, 50, 20, 20, ILI9488_RED);
 8001d9e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2314      	movs	r3, #20
 8001da6:	2214      	movs	r2, #20
 8001da8:	2132      	movs	r1, #50	@ 0x32
 8001daa:	2005      	movs	r0, #5
 8001dac:	f7fe fe18 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(40, 55, "A - Fogo", Font_7x10, colorFogo, ILI9488_BLACK);
 8001db0:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	9202      	str	r2, [sp, #8]
 8001db6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001db8:	9201      	str	r2, [sp, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	9200      	str	r2, [sp, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a48      	ldr	r2, [pc, #288]	@ (8001ee4 <StartDisplayTask+0x308>)
 8001dc2:	2137      	movs	r1, #55	@ 0x37
 8001dc4:	2028      	movs	r0, #40	@ 0x28
 8001dc6:	f7fe feab 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_FillRectangle(5, 85, 20, 20, ILI9488_BLUE);
 8001dca:	231f      	movs	r3, #31
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2314      	movs	r3, #20
 8001dd0:	2214      	movs	r2, #20
 8001dd2:	2155      	movs	r1, #85	@ 0x55
 8001dd4:	2005      	movs	r0, #5
 8001dd6:	f7fe fe03 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(40, 90, "B - Agua", Font_7x10, colorAgua, ILI9488_BLACK);
 8001dda:	4b35      	ldr	r3, [pc, #212]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	9202      	str	r2, [sp, #8]
 8001de0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001de2:	9201      	str	r2, [sp, #4]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	9200      	str	r2, [sp, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee8 <StartDisplayTask+0x30c>)
 8001dec:	215a      	movs	r1, #90	@ 0x5a
 8001dee:	2028      	movs	r0, #40	@ 0x28
 8001df0:	f7fe fe96 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_FillRectangle(200, 50, 25, 25, ILI9488_CYAN);
 8001df4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2319      	movs	r3, #25
 8001dfc:	2219      	movs	r2, #25
 8001dfe:	2132      	movs	r1, #50	@ 0x32
 8001e00:	20c8      	movs	r0, #200	@ 0xc8
 8001e02:	f7fe fded 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(235, 55, "C - Ar", Font_7x10, colorAr, ILI9488_BLACK);
 8001e06:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	9202      	str	r2, [sp, #8]
 8001e0c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001e0e:	9201      	str	r2, [sp, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a35      	ldr	r2, [pc, #212]	@ (8001eec <StartDisplayTask+0x310>)
 8001e18:	2137      	movs	r1, #55	@ 0x37
 8001e1a:	20eb      	movs	r0, #235	@ 0xeb
 8001e1c:	f7fe fe80 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_FillRectangle(200, 85, 25, 25, ILI9488_BROWN);
 8001e20:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2319      	movs	r3, #25
 8001e28:	2219      	movs	r2, #25
 8001e2a:	2155      	movs	r1, #85	@ 0x55
 8001e2c:	20c8      	movs	r0, #200	@ 0xc8
 8001e2e:	f7fe fdd7 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(235, 90, "D - Terra", Font_7x10, colorTerra, ILI9488_BLACK);
 8001e32:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	9202      	str	r2, [sp, #8]
 8001e38:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e3a:	9201      	str	r2, [sp, #4]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	9200      	str	r2, [sp, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef0 <StartDisplayTask+0x314>)
 8001e44:	215a      	movs	r1, #90	@ 0x5a
 8001e46:	20eb      	movs	r0, #235	@ 0xeb
 8001e48:	f7fe fe6a 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(5, 110, "Player:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	9202      	str	r2, [sp, #8]
 8001e52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	9200      	str	r2, [sp, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <StartDisplayTask+0x318>)
 8001e60:	216e      	movs	r1, #110	@ 0x6e
 8001e62:	2005      	movs	r0, #5
 8001e64:	f7fe fe5c 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(5, 150, "CPU:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <StartDisplayTask+0x2d4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	9202      	str	r2, [sp, #8]
 8001e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e72:	9201      	str	r2, [sp, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	9200      	str	r2, [sp, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef8 <StartDisplayTask+0x31c>)
 8001e7c:	2196      	movs	r1, #150	@ 0x96
 8001e7e:	2005      	movs	r0, #5
 8001e80:	f7fe fe4e 	bl	8000b20 <ILI9488_WriteString>

            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001e8a:	e0ac      	b.n	8001fe6 <StartDisplayTask+0x40a>
            {
              uint8_t showAttack = FALSE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
              if (selectedDifficulty == eDificultEasy) { showAttack = TRUE; }
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <StartDisplayTask+0x320>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d131      	bne.n	8001f00 <StartDisplayTask+0x324>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001ea2:	e03d      	b.n	8001f20 <StartDisplayTask+0x344>
 8001ea4:	20000468 	.word	0x20000468
 8001ea8:	20000048 	.word	0x20000048
 8001eac:	2000046d 	.word	0x2000046d
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	0800a0ac 	.word	0x0800a0ac
 8001eb8:	0800a0bc 	.word	0x0800a0bc
 8001ebc:	20000488 	.word	0x20000488
 8001ec0:	0800a0c8 	.word	0x0800a0c8
 8001ec4:	0800a0d8 	.word	0x0800a0d8
 8001ec8:	20000470 	.word	0x20000470
 8001ecc:	2000004c 	.word	0x2000004c
 8001ed0:	0800a0e8 	.word	0x0800a0e8
 8001ed4:	20000058 	.word	0x20000058
 8001ed8:	0800a100 	.word	0x0800a100
 8001edc:	20000490 	.word	0x20000490
 8001ee0:	0800a118 	.word	0x0800a118
 8001ee4:	0800a130 	.word	0x0800a130
 8001ee8:	0800a13c 	.word	0x0800a13c
 8001eec:	0800a148 	.word	0x0800a148
 8001ef0:	0800a150 	.word	0x0800a150
 8001ef4:	0800a15c 	.word	0x0800a15c
 8001ef8:	0800a164 	.word	0x0800a164
 8001efc:	20000474 	.word	0x20000474
              else if (selectedDifficulty == eDificultMedium) { if (i == 0 || i == 2) { showAttack = TRUE; } }
 8001f00:	4ba6      	ldr	r3, [pc, #664]	@ (800219c <StartDisplayTask+0x5c0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10a      	bne.n	8001f20 <StartDisplayTask+0x344>
 8001f0a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <StartDisplayTask+0x33e>
 8001f12:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d102      	bne.n	8001f20 <StartDisplayTask+0x344>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
              if(showAttack) {
 8001f20:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d042      	beq.n	8001fae <StartDisplayTask+0x3d2>
                uint16_t attackColor = ILI9488_WHITE;
 8001f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
                switch(eCpuPlayer.eAttackSequential[i]) {
 8001f2e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f32:	4a9b      	ldr	r2, [pc, #620]	@ (80021a0 <StartDisplayTask+0x5c4>)
 8001f34:	4413      	add	r3, r2
 8001f36:	789b      	ldrb	r3, [r3, #2]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d825      	bhi.n	8001f8a <StartDisplayTask+0x3ae>
 8001f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <StartDisplayTask+0x368>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f5d 	.word	0x08001f5d
 8001f48:	08001f65 	.word	0x08001f65
 8001f4c:	08001f6b 	.word	0x08001f6b
 8001f50:	08001f73 	.word	0x08001f73
 8001f54:	08001f7b 	.word	0x08001f7b
 8001f58:	08001f83 	.word	0x08001f83
                    case eRed:    attackColor = ILI9488_RED;   break;
 8001f5c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f60:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f62:	e012      	b.n	8001f8a <StartDisplayTask+0x3ae>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 8001f64:	231f      	movs	r3, #31
 8001f66:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f68:	e00f      	b.n	8001f8a <StartDisplayTask+0x3ae>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 8001f6a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001f6e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f70:	e00b      	b.n	8001f8a <StartDisplayTask+0x3ae>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 8001f72:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001f76:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f78:	e007      	b.n	8001f8a <StartDisplayTask+0x3ae>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 8001f7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f7e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f80:	e003      	b.n	8001f8a <StartDisplayTask+0x3ae>
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 8001f82:	f246 330c 	movw	r3, #25356	@ 0x630c
 8001f86:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001f88:	bf00      	nop
                }
                ILI9488_FillRectangle(5 + (i * 30), 160, 20, 20, attackColor);
 8001f8a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3305      	adds	r3, #5
 8001f9c:	b298      	uxth	r0, r3
 8001f9e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2314      	movs	r3, #20
 8001fa4:	2214      	movs	r2, #20
 8001fa6:	21a0      	movs	r1, #160	@ 0xa0
 8001fa8:	f7fe fd1a 	bl	80009e0 <ILI9488_FillRectangle>
 8001fac:	e016      	b.n	8001fdc <StartDisplayTask+0x400>
              } else {
                ILI9488_WriteString(5 + (i * 30), 160, "??", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001fae:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3305      	adds	r3, #5
 8001fc0:	b298      	uxth	r0, r3
 8001fc2:	4b78      	ldr	r3, [pc, #480]	@ (80021a4 <StartDisplayTask+0x5c8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	9202      	str	r2, [sp, #8]
 8001fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fcc:	9201      	str	r2, [sp, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	9200      	str	r2, [sp, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a74      	ldr	r2, [pc, #464]	@ (80021a8 <StartDisplayTask+0x5cc>)
 8001fd6:	21a0      	movs	r1, #160	@ 0xa0
 8001fd8:	f7fe fda2 	bl	8000b20 <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001fdc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001fe6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	f67f af4e 	bls.w	8001e8c <StartDisplayTask+0x2b0>
              }
            }
            for(uint8_t i = 0; i < u8ContAttack; i++) {
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001ff6:	e046      	b.n	8002086 <StartDisplayTask+0x4aa>
              uint16_t attackColor = ILI9488_WHITE;
 8001ff8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ffc:	86fb      	strh	r3, [r7, #54]	@ 0x36
              switch(eUserPlayer.eAttackSequential[i]) {
 8001ffe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002002:	4a6a      	ldr	r2, [pc, #424]	@ (80021ac <StartDisplayTask+0x5d0>)
 8002004:	4413      	add	r3, r2
 8002006:	789b      	ldrb	r3, [r3, #2]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b05      	cmp	r3, #5
 800200c:	d825      	bhi.n	800205a <StartDisplayTask+0x47e>
 800200e:	a201      	add	r2, pc, #4	@ (adr r2, 8002014 <StartDisplayTask+0x438>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	0800202d 	.word	0x0800202d
 8002018:	08002035 	.word	0x08002035
 800201c:	0800203b 	.word	0x0800203b
 8002020:	08002043 	.word	0x08002043
 8002024:	0800204b 	.word	0x0800204b
 8002028:	08002053 	.word	0x08002053
                  case eRed:    attackColor = ILI9488_RED;   break;
 800202c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002030:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002032:	e012      	b.n	800205a <StartDisplayTask+0x47e>
                  case eBlue:   attackColor = ILI9488_BLUE;  break;
 8002034:	231f      	movs	r3, #31
 8002036:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002038:	e00f      	b.n	800205a <StartDisplayTask+0x47e>
                  case eGreen:  attackColor = ILI9488_CYAN;  break;
 800203a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800203e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002040:	e00b      	b.n	800205a <StartDisplayTask+0x47e>
                  case eYellow: attackColor = ILI9488_BROWN; break;
 8002042:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8002046:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002048:	e007      	b.n	800205a <StartDisplayTask+0x47e>
                  case eWhite:  attackColor = ILI9488_WHITE; break;
 800204a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800204e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002050:	e003      	b.n	800205a <StartDisplayTask+0x47e>
                  case eBlack:  attackColor = ILI9488_GRAY;  break;
 8002052:	f246 330c 	movw	r3, #25356	@ 0x630c
 8002056:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002058:	bf00      	nop
              }
              ILI9488_FillRectangle(5 + (i * 30), 120, 20, 20, attackColor);
 800205a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800205e:	b29b      	uxth	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	b29b      	uxth	r3, r3
 800206a:	3305      	adds	r3, #5
 800206c:	b298      	uxth	r0, r3
 800206e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2314      	movs	r3, #20
 8002074:	2214      	movs	r2, #20
 8002076:	2178      	movs	r1, #120	@ 0x78
 8002078:	f7fe fcb2 	bl	80009e0 <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < u8ContAttack; i++) {
 800207c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002080:	3301      	adds	r3, #1
 8002082:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8002086:	4b4a      	ldr	r3, [pc, #296]	@ (80021b0 <StartDisplayTask+0x5d4>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8002090:	429a      	cmp	r2, r3
 8002092:	d3b1      	bcc.n	8001ff8 <StartDisplayTask+0x41c>
            }
            break;
 8002094:	e195      	b.n	80023c2 <StartDisplayTask+0x7e6>
          }
          case ePlayerTurn:
          {
            ILI9488_WriteString(10, 20, "Resultado do Round", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002096:	4b43      	ldr	r3, [pc, #268]	@ (80021a4 <StartDisplayTask+0x5c8>)
 8002098:	2200      	movs	r2, #0
 800209a:	9202      	str	r2, [sp, #8]
 800209c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020a0:	9201      	str	r2, [sp, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	9200      	str	r2, [sp, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a42      	ldr	r2, [pc, #264]	@ (80021b4 <StartDisplayTask+0x5d8>)
 80020aa:	2114      	movs	r1, #20
 80020ac:	200a      	movs	r0, #10
 80020ae:	f7fe fd37 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "Sua Vida: %d", eUserPlayer.u8HeartPoints);
 80020b2:	4b3e      	ldr	r3, [pc, #248]	@ (80021ac <StartDisplayTask+0x5d0>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	493e      	ldr	r1, [pc, #248]	@ (80021b8 <StartDisplayTask+0x5dc>)
 80020c0:	4618      	mov	r0, r3
 80020c2:	f006 fe87 	bl	8008dd4 <siprintf>
            ILI9488_WriteString(10, 60, buffer, Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 80020c6:	4b37      	ldr	r3, [pc, #220]	@ (80021a4 <StartDisplayTask+0x5c8>)
 80020c8:	f107 0108 	add.w	r1, r7, #8
 80020cc:	2200      	movs	r2, #0
 80020ce:	9202      	str	r2, [sp, #8]
 80020d0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80020d4:	9201      	str	r2, [sp, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	9200      	str	r2, [sp, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	460a      	mov	r2, r1
 80020de:	213c      	movs	r1, #60	@ 0x3c
 80020e0:	200a      	movs	r0, #10
 80020e2:	f7fe fd1d 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "Vida CPU: %d", eCpuPlayer.u8HeartPoints);
 80020e6:	4b2e      	ldr	r3, [pc, #184]	@ (80021a0 <StartDisplayTask+0x5c4>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	4932      	ldr	r1, [pc, #200]	@ (80021bc <StartDisplayTask+0x5e0>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fe6d 	bl	8008dd4 <siprintf>
            ILI9488_WriteString(10, 90, buffer, Font_7x10, ILI9488_RED, ILI9488_BLACK);
 80020fa:	4b2a      	ldr	r3, [pc, #168]	@ (80021a4 <StartDisplayTask+0x5c8>)
 80020fc:	f107 0108 	add.w	r1, r7, #8
 8002100:	2200      	movs	r2, #0
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002108:	9201      	str	r2, [sp, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	460a      	mov	r2, r1
 8002112:	215a      	movs	r1, #90	@ 0x5a
 8002114:	200a      	movs	r0, #10
 8002116:	f7fe fd03 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(10, 130, "Seus Ataques:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 800211a:	4b22      	ldr	r3, [pc, #136]	@ (80021a4 <StartDisplayTask+0x5c8>)
 800211c:	2200      	movs	r2, #0
 800211e:	9202      	str	r2, [sp, #8]
 8002120:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002124:	9201      	str	r2, [sp, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	9200      	str	r2, [sp, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a24      	ldr	r2, [pc, #144]	@ (80021c0 <StartDisplayTask+0x5e4>)
 800212e:	2182      	movs	r1, #130	@ 0x82
 8002130:	200a      	movs	r0, #10
 8002132:	f7fe fcf5 	bl	8000b20 <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002136:	2300      	movs	r3, #0
 8002138:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800213c:	e05c      	b.n	80021f8 <StartDisplayTask+0x61c>
                uint16_t attackColor = ILI9488_WHITE;
 800213e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002142:	867b      	strh	r3, [r7, #50]	@ 0x32
                switch(eUserPlayer.eAttackSequential[i]) {
 8002144:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002148:	4a18      	ldr	r2, [pc, #96]	@ (80021ac <StartDisplayTask+0x5d0>)
 800214a:	4413      	add	r3, r2
 800214c:	789b      	ldrb	r3, [r3, #2]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b05      	cmp	r3, #5
 8002152:	d83b      	bhi.n	80021cc <StartDisplayTask+0x5f0>
 8002154:	a201      	add	r2, pc, #4	@ (adr r2, 800215c <StartDisplayTask+0x580>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	08002175 	.word	0x08002175
 8002160:	0800217d 	.word	0x0800217d
 8002164:	08002183 	.word	0x08002183
 8002168:	0800218b 	.word	0x0800218b
 800216c:	08002193 	.word	0x08002193
 8002170:	080021c5 	.word	0x080021c5
                    case eRed:    attackColor = ILI9488_RED;   break;
 8002174:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002178:	867b      	strh	r3, [r7, #50]	@ 0x32
 800217a:	e027      	b.n	80021cc <StartDisplayTask+0x5f0>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 800217c:	231f      	movs	r3, #31
 800217e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8002180:	e024      	b.n	80021cc <StartDisplayTask+0x5f0>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 8002182:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002186:	867b      	strh	r3, [r7, #50]	@ 0x32
 8002188:	e020      	b.n	80021cc <StartDisplayTask+0x5f0>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 800218a:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 800218e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8002190:	e01c      	b.n	80021cc <StartDisplayTask+0x5f0>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 8002192:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002196:	867b      	strh	r3, [r7, #50]	@ 0x32
 8002198:	e018      	b.n	80021cc <StartDisplayTask+0x5f0>
 800219a:	bf00      	nop
 800219c:	20000474 	.word	0x20000474
 80021a0:	20000480 	.word	0x20000480
 80021a4:	20000000 	.word	0x20000000
 80021a8:	0800a16c 	.word	0x0800a16c
 80021ac:	20000478 	.word	0x20000478
 80021b0:	20000490 	.word	0x20000490
 80021b4:	0800a170 	.word	0x0800a170
 80021b8:	0800a184 	.word	0x0800a184
 80021bc:	0800a194 	.word	0x0800a194
 80021c0:	0800a1a4 	.word	0x0800a1a4
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 80021c4:	f246 330c 	movw	r3, #25356	@ 0x630c
 80021c8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80021ca:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 150, 20, 20, attackColor);
 80021cc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	b29b      	uxth	r3, r3
 80021dc:	330a      	adds	r3, #10
 80021de:	b298      	uxth	r0, r3
 80021e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2314      	movs	r3, #20
 80021e6:	2214      	movs	r2, #20
 80021e8:	2196      	movs	r1, #150	@ 0x96
 80021ea:	f7fe fbf9 	bl	80009e0 <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 80021ee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80021f2:	3301      	adds	r3, #1
 80021f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80021f8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d99e      	bls.n	800213e <StartDisplayTask+0x562>
            }
            ILI9488_WriteString(10, 190, "Ataques CPU:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002200:	4b73      	ldr	r3, [pc, #460]	@ (80023d0 <StartDisplayTask+0x7f4>)
 8002202:	2200      	movs	r2, #0
 8002204:	9202      	str	r2, [sp, #8]
 8002206:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800220a:	9201      	str	r2, [sp, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	9200      	str	r2, [sp, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a70      	ldr	r2, [pc, #448]	@ (80023d4 <StartDisplayTask+0x7f8>)
 8002214:	21be      	movs	r1, #190	@ 0xbe
 8002216:	200a      	movs	r0, #10
 8002218:	f7fe fc82 	bl	8000b20 <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 800221c:	2300      	movs	r3, #0
 800221e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002222:	e046      	b.n	80022b2 <StartDisplayTask+0x6d6>
                uint16_t attackColor = ILI9488_WHITE;
 8002224:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002228:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                switch(eCpuPlayer.eAttackSequential[i]) {
 800222a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800222e:	4a6a      	ldr	r2, [pc, #424]	@ (80023d8 <StartDisplayTask+0x7fc>)
 8002230:	4413      	add	r3, r2
 8002232:	789b      	ldrb	r3, [r3, #2]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b05      	cmp	r3, #5
 8002238:	d825      	bhi.n	8002286 <StartDisplayTask+0x6aa>
 800223a:	a201      	add	r2, pc, #4	@ (adr r2, 8002240 <StartDisplayTask+0x664>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	08002259 	.word	0x08002259
 8002244:	08002261 	.word	0x08002261
 8002248:	08002267 	.word	0x08002267
 800224c:	0800226f 	.word	0x0800226f
 8002250:	08002277 	.word	0x08002277
 8002254:	0800227f 	.word	0x0800227f
                    case eRed:    attackColor = ILI9488_RED;   break;
 8002258:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800225c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800225e:	e012      	b.n	8002286 <StartDisplayTask+0x6aa>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 8002260:	231f      	movs	r3, #31
 8002262:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002264:	e00f      	b.n	8002286 <StartDisplayTask+0x6aa>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 8002266:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800226a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800226c:	e00b      	b.n	8002286 <StartDisplayTask+0x6aa>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 800226e:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8002272:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002274:	e007      	b.n	8002286 <StartDisplayTask+0x6aa>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 8002276:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800227a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800227c:	e003      	b.n	8002286 <StartDisplayTask+0x6aa>
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 800227e:	f246 330c 	movw	r3, #25356	@ 0x630c
 8002282:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002284:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 210, 20, 20, attackColor);
 8002286:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800228a:	b29b      	uxth	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	b29b      	uxth	r3, r3
 8002296:	330a      	adds	r3, #10
 8002298:	b298      	uxth	r0, r3
 800229a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2314      	movs	r3, #20
 80022a0:	2214      	movs	r2, #20
 80022a2:	21d2      	movs	r1, #210	@ 0xd2
 80022a4:	f7fe fb9c 	bl	80009e0 <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 80022a8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80022ac:	3301      	adds	r3, #1
 80022ae:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80022b2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d9b4      	bls.n	8002224 <StartDisplayTask+0x648>
            }
            ILI9488_WriteString(10, 280, "Pressione * para continuar...", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 80022ba:	4b45      	ldr	r3, [pc, #276]	@ (80023d0 <StartDisplayTask+0x7f4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	9202      	str	r2, [sp, #8]
 80022c0:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80022c4:	9201      	str	r2, [sp, #4]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	9200      	str	r2, [sp, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a43      	ldr	r2, [pc, #268]	@ (80023dc <StartDisplayTask+0x800>)
 80022ce:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80022d2:	200a      	movs	r0, #10
 80022d4:	f7fe fc24 	bl	8000b20 <ILI9488_WriteString>
            break;
 80022d8:	e073      	b.n	80023c2 <StartDisplayTask+0x7e6>
          }
          case eEndGame:
          {
            if (eUserPlayer.u8HeartPoints > 0) {
 80022da:	4b41      	ldr	r3, [pc, #260]	@ (80023e0 <StartDisplayTask+0x804>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00e      	beq.n	8002302 <StartDisplayTask+0x726>
                ILI9488_WriteString(70, 80, "VITORIA!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 80022e4:	4b3a      	ldr	r3, [pc, #232]	@ (80023d0 <StartDisplayTask+0x7f4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	9202      	str	r2, [sp, #8]
 80022ea:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80022ee:	9201      	str	r2, [sp, #4]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	9200      	str	r2, [sp, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a3b      	ldr	r2, [pc, #236]	@ (80023e4 <StartDisplayTask+0x808>)
 80022f8:	2150      	movs	r1, #80	@ 0x50
 80022fa:	2046      	movs	r0, #70	@ 0x46
 80022fc:	f7fe fc10 	bl	8000b20 <ILI9488_WriteString>
 8002300:	e00d      	b.n	800231e <StartDisplayTask+0x742>
            } else {
                ILI9488_WriteString(70, 80, "DERROTA!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8002302:	4b33      	ldr	r3, [pc, #204]	@ (80023d0 <StartDisplayTask+0x7f4>)
 8002304:	2200      	movs	r2, #0
 8002306:	9202      	str	r2, [sp, #8]
 8002308:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800230c:	9201      	str	r2, [sp, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	9200      	str	r2, [sp, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a34      	ldr	r2, [pc, #208]	@ (80023e8 <StartDisplayTask+0x80c>)
 8002316:	2150      	movs	r1, #80	@ 0x50
 8002318:	2046      	movs	r0, #70	@ 0x46
 800231a:	f7fe fc01 	bl	8000b20 <ILI9488_WriteString>
            }
            sprintf(buffer, "Sua Vida Final: %d", eUserPlayer.u8HeartPoints);
 800231e:	4b30      	ldr	r3, [pc, #192]	@ (80023e0 <StartDisplayTask+0x804>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	4930      	ldr	r1, [pc, #192]	@ (80023ec <StartDisplayTask+0x810>)
 800232c:	4618      	mov	r0, r3
 800232e:	f006 fd51 	bl	8008dd4 <siprintf>
            ILI9488_WriteString(10, 140, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002332:	4b27      	ldr	r3, [pc, #156]	@ (80023d0 <StartDisplayTask+0x7f4>)
 8002334:	f107 0108 	add.w	r1, r7, #8
 8002338:	2200      	movs	r2, #0
 800233a:	9202      	str	r2, [sp, #8]
 800233c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002340:	9201      	str	r2, [sp, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	9200      	str	r2, [sp, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	460a      	mov	r2, r1
 800234a:	218c      	movs	r1, #140	@ 0x8c
 800234c:	200a      	movs	r0, #10
 800234e:	f7fe fbe7 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "Vida Final CPU: %d", eCpuPlayer.u8HeartPoints);
 8002352:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <StartDisplayTask+0x7fc>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	4924      	ldr	r1, [pc, #144]	@ (80023f0 <StartDisplayTask+0x814>)
 8002360:	4618      	mov	r0, r3
 8002362:	f006 fd37 	bl	8008dd4 <siprintf>
            ILI9488_WriteString(10, 160, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002366:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <StartDisplayTask+0x7f4>)
 8002368:	f107 0108 	add.w	r1, r7, #8
 800236c:	2200      	movs	r2, #0
 800236e:	9202      	str	r2, [sp, #8]
 8002370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002374:	9201      	str	r2, [sp, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	9200      	str	r2, [sp, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	460a      	mov	r2, r1
 800237e:	21a0      	movs	r1, #160	@ 0xa0
 8002380:	200a      	movs	r0, #10
 8002382:	f7fe fbcd 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(10, 250, "Pressione * para recomecar", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 8002386:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <StartDisplayTask+0x7f4>)
 8002388:	2200      	movs	r2, #0
 800238a:	9202      	str	r2, [sp, #8]
 800238c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002390:	9201      	str	r2, [sp, #4]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	9200      	str	r2, [sp, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a16      	ldr	r2, [pc, #88]	@ (80023f4 <StartDisplayTask+0x818>)
 800239a:	21fa      	movs	r1, #250	@ 0xfa
 800239c:	200a      	movs	r0, #10
 800239e:	f7fe fbbf 	bl	8000b20 <ILI9488_WriteString>
            break;
 80023a2:	e00e      	b.n	80023c2 <StartDisplayTask+0x7e6>
          }
          default:
          {
            ILI9488_WriteString(10, 10, "Erro de Estado!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <StartDisplayTask+0x7f4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	9202      	str	r2, [sp, #8]
 80023aa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80023ae:	9201      	str	r2, [sp, #4]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	9200      	str	r2, [sp, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a10      	ldr	r2, [pc, #64]	@ (80023f8 <StartDisplayTask+0x81c>)
 80023b8:	210a      	movs	r1, #10
 80023ba:	200a      	movs	r0, #10
 80023bc:	f7fe fbb0 	bl	8000b20 <ILI9488_WriteString>
            break;
 80023c0:	bf00      	nop
          }
      }
      u8RedrawScreen = FALSE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    osDelay(5);
 80023c8:	2005      	movs	r0, #5
 80023ca:	f004 f854 	bl	8006476 <osDelay>
    osMutexWait(gameMutexHandle, osWaitForever);
 80023ce:	e40c      	b.n	8001bea <StartDisplayTask+0xe>
 80023d0:	20000000 	.word	0x20000000
 80023d4:	0800a1b4 	.word	0x0800a1b4
 80023d8:	20000480 	.word	0x20000480
 80023dc:	0800a1c4 	.word	0x0800a1c4
 80023e0:	20000478 	.word	0x20000478
 80023e4:	0800a1e4 	.word	0x0800a1e4
 80023e8:	0800a1f0 	.word	0x0800a1f0
 80023ec:	0800a1fc 	.word	0x0800a1fc
 80023f0:	0800a210 	.word	0x0800a210
 80023f4:	0800a224 	.word	0x0800a224
 80023f8:	0800a240 	.word	0x0800a240

080023fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <Error_Handler+0x8>

08002408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	4b22      	ldr	r3, [pc, #136]	@ (800249c <HAL_MspInit+0x94>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a21      	ldr	r2, [pc, #132]	@ (800249c <HAL_MspInit+0x94>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <HAL_MspInit+0x94>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <HAL_MspInit+0x94>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a1a      	ldr	r2, [pc, #104]	@ (800249c <HAL_MspInit+0x94>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b18      	ldr	r3, [pc, #96]	@ (800249c <HAL_MspInit+0x94>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	210f      	movs	r1, #15
 800244a:	f06f 0001 	mvn.w	r0, #1
 800244e:	f000 fbda 	bl	8002c06 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2105      	movs	r1, #5
 8002456:	2001      	movs	r0, #1
 8002458:	f000 fbd5 	bl	8002c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800245c:	2001      	movs	r0, #1
 800245e:	f000 fbee 	bl	8002c3e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2105      	movs	r1, #5
 8002466:	2004      	movs	r0, #4
 8002468:	f000 fbcd 	bl	8002c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800246c:	2004      	movs	r0, #4
 800246e:	f000 fbe6 	bl	8002c3e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2105      	movs	r1, #5
 8002476:	2005      	movs	r0, #5
 8002478:	f000 fbc5 	bl	8002c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800247c:	2005      	movs	r0, #5
 800247e:	f000 fbde 	bl	8002c3e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2105      	movs	r1, #5
 8002486:	2051      	movs	r0, #81	@ 0x51
 8002488:	f000 fbbd 	bl	8002c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800248c:	2051      	movs	r0, #81	@ 0x51
 800248e:	f000 fbd6 	bl	8002c3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800

080024a0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a19      	ldr	r2, [pc, #100]	@ (8002524 <HAL_I2C_MspInit+0x84>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d12c      	bne.n	800251c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <HAL_I2C_MspInit+0x88>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	4a17      	ldr	r2, [pc, #92]	@ (8002528 <HAL_I2C_MspInit+0x88>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <HAL_I2C_MspInit+0x88>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80024de:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80024e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e4:	2312      	movs	r3, #18
 80024e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024f0:	2304      	movs	r3, #4
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4619      	mov	r1, r3
 80024fa:	480c      	ldr	r0, [pc, #48]	@ (800252c <HAL_I2C_MspInit+0x8c>)
 80024fc:	f000 fde0 	bl	80030c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <HAL_I2C_MspInit+0x88>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	4a07      	ldr	r2, [pc, #28]	@ (8002528 <HAL_I2C_MspInit+0x88>)
 800250a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800250e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_I2C_MspInit+0x88>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	@ 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40005400 	.word	0x40005400
 8002528:	40023800 	.word	0x40023800
 800252c:	40020400 	.word	0x40020400

08002530 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <HAL_SPI_MspInit+0x94>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d133      	bne.n	80025ba <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <HAL_SPI_MspInit+0x98>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	4a1b      	ldr	r2, [pc, #108]	@ (80025c8 <HAL_SPI_MspInit+0x98>)
 800255c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002560:	6453      	str	r3, [r2, #68]	@ 0x44
 8002562:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_SPI_MspInit+0x98>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_SPI_MspInit+0x98>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a14      	ldr	r2, [pc, #80]	@ (80025c8 <HAL_SPI_MspInit+0x98>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <HAL_SPI_MspInit+0x98>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800258a:	23e0      	movs	r3, #224	@ 0xe0
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259a:	2305      	movs	r3, #5
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4809      	ldr	r0, [pc, #36]	@ (80025cc <HAL_SPI_MspInit+0x9c>)
 80025a6:	f000 fd8b 	bl	80030c0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2105      	movs	r1, #5
 80025ae:	2023      	movs	r0, #35	@ 0x23
 80025b0:	f000 fb29 	bl	8002c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025b4:	2023      	movs	r0, #35	@ 0x23
 80025b6:	f000 fb42 	bl	8002c3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80025ba:	bf00      	nop
 80025bc:	3728      	adds	r7, #40	@ 0x28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40013000 	.word	0x40013000
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000

080025d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	@ 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002664 <HAL_UART_MspInit+0x94>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d133      	bne.n	800265a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <HAL_UART_MspInit+0x98>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002668 <HAL_UART_MspInit+0x98>)
 80025fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002600:	6413      	str	r3, [r2, #64]	@ 0x40
 8002602:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_UART_MspInit+0x98>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <HAL_UART_MspInit+0x98>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <HAL_UART_MspInit+0x98>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <HAL_UART_MspInit+0x98>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800262a:	2303      	movs	r3, #3
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800263a:	2308      	movs	r3, #8
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4619      	mov	r1, r3
 8002644:	4809      	ldr	r0, [pc, #36]	@ (800266c <HAL_UART_MspInit+0x9c>)
 8002646:	f000 fd3b 	bl	80030c0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2105      	movs	r1, #5
 800264e:	2034      	movs	r0, #52	@ 0x34
 8002650:	f000 fad9 	bl	8002c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002654:	2034      	movs	r0, #52	@ 0x34
 8002656:	f000 faf2 	bl	8002c3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 800265a:	bf00      	nop
 800265c:	3728      	adds	r7, #40	@ 0x28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40004c00 	.word	0x40004c00
 8002668:	40023800 	.word	0x40023800
 800266c:	40020000 	.word	0x40020000

08002670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <NMI_Handler+0x4>

08002678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <HardFault_Handler+0x4>

08002680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <MemManage_Handler+0x4>

08002688 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <BusFault_Handler+0x4>

08002690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <UsageFault_Handler+0x4>

08002698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026aa:	f000 f98d 	bl	80029c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026ae:	f005 fbf9 	bl	8007ea4 <xTaskGetSchedulerState>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d001      	beq.n	80026bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80026b8:	f005 ffde 	bl	8008678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80026c4:	f001 feee 	bl	80044a4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80026d0:	f000 fb62 	bl	8002d98 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <SPI1_IRQHandler+0x10>)
 80026ee:	f002 fd19 	bl	8005124 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200003bc 	.word	0x200003bc

080026fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <UART4_IRQHandler+0x10>)
 8002702:	f002 ff59 	bl	80055b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000414 	.word	0x20000414

08002710 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  return 1;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <_kill>:

int _kill(int pid, int sig)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002738:	f006 fc00 	bl	8008f3c <__errno>
 800273c:	4603      	mov	r3, r0
 800273e:	2216      	movs	r2, #22
 8002740:	601a      	str	r2, [r3, #0]
  return -1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_exit>:

void _exit (int status)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002756:	f04f 31ff 	mov.w	r1, #4294967295
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffe7 	bl	800272e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <_exit+0x12>

08002764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e00a      	b.n	800278c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002776:	f3af 8000 	nop.w
 800277a:	4601      	mov	r1, r0
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	60ba      	str	r2, [r7, #8]
 8002782:	b2ca      	uxtb	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	dbf0      	blt.n	8002776 <_read+0x12>
  }

  return len;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e009      	b.n	80027c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	dbf1      	blt.n	80027b0 <_write+0x12>
  }
  return len;
 80027cc:	687b      	ldr	r3, [r7, #4]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_close>:

int _close(int file)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_isatty>:

int _isatty(int file)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	@ (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002870:	f006 fb64 	bl	8008f3c <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20020000 	.word	0x20020000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	20000494 	.word	0x20000494
 80028a8:	20004340 	.word	0x20004340

080028ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002908 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028d4:	f7ff ffea 	bl	80028ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	@ (8002910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	@ (800291c <LoopFillZerobss+0x22>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f006 fb23 	bl	8008f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002902:	f7fe fc51 	bl	80011a8 <main>
  bx  lr    
 8002906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002914:	0800aadc 	.word	0x0800aadc
  ldr r2, =_sbss
 8002918:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 800291c:	2000433c 	.word	0x2000433c

08002920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <HAL_Init+0x40>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <HAL_Init+0x40>)
 800293a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800293e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_Init+0x40>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f000 f94f 	bl	8002bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002952:	200f      	movs	r0, #15
 8002954:	f000 f808 	bl	8002968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002958:	f7ff fd56 	bl	8002408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002970:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_InitTick+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_InitTick+0x58>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f967 	bl	8002c5a <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f000 f92f 	bl	8002c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4a06      	ldr	r2, [pc, #24]	@ (80029c4 <HAL_InitTick+0x5c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	2000006c 	.word	0x2000006c
 80029c0:	20000074 	.word	0x20000074
 80029c4:	20000070 	.word	0x20000070

080029c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_IncTick+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_IncTick+0x24>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <HAL_IncTick+0x24>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000074 	.word	0x20000074
 80029ec:	20000498 	.word	0x20000498

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000498 	.word	0x20000498

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff ffee 	bl	80029f0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d005      	beq.n	8002a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_Delay+0x44>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a2e:	bf00      	nop
 8002a30:	f7ff ffde 	bl	80029f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f7      	bhi.n	8002a30 <HAL_Delay+0x28>
  {
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000074 	.word	0x20000074

08002a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a82:	4a04      	ldr	r2, [pc, #16]	@ (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	60d3      	str	r3, [r2, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	@ (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db0b      	blt.n	8002ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4907      	ldr	r1, [pc, #28]	@ (8002aec <__NVIC_EnableIRQ+0x38>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e100 	.word	0xe000e100

08002af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	db0a      	blt.n	8002b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	490c      	ldr	r1, [pc, #48]	@ (8002b3c <__NVIC_SetPriority+0x4c>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	0112      	lsls	r2, r2, #4
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	440b      	add	r3, r1
 8002b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b18:	e00a      	b.n	8002b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4908      	ldr	r1, [pc, #32]	@ (8002b40 <__NVIC_SetPriority+0x50>)
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3b04      	subs	r3, #4
 8002b28:	0112      	lsls	r2, r2, #4
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	761a      	strb	r2, [r3, #24]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	@ 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f1c3 0307 	rsb	r3, r3, #7
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	bf28      	it	cs
 8002b62:	2304      	movcs	r3, #4
 8002b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d902      	bls.n	8002b74 <NVIC_EncodePriority+0x30>
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3b03      	subs	r3, #3
 8002b72:	e000      	b.n	8002b76 <NVIC_EncodePriority+0x32>
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	4313      	orrs	r3, r2
         );
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3724      	adds	r7, #36	@ 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bbc:	d301      	bcc.n	8002bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00f      	b.n	8002be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bec <SysTick_Config+0x40>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bca:	210f      	movs	r1, #15
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd0:	f7ff ff8e 	bl	8002af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd4:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <SysTick_Config+0x40>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bda:	4b04      	ldr	r3, [pc, #16]	@ (8002bec <SysTick_Config+0x40>)
 8002bdc:	2207      	movs	r2, #7
 8002bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	e000e010 	.word	0xe000e010

08002bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff29 	bl	8002a50 <__NVIC_SetPriorityGrouping>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c18:	f7ff ff3e 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7ff ff8e 	bl	8002b44 <NVIC_EncodePriority>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff5d 	bl	8002af0 <__NVIC_SetPriority>
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff31 	bl	8002ab4 <__NVIC_EnableIRQ>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ffa2 	bl	8002bac <SysTick_Config>
 8002c68:	4603      	mov	r3, r0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7ff feb6 	bl	80029f0 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d008      	beq.n	8002ca4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2280      	movs	r2, #128	@ 0x80
 8002c96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e052      	b.n	8002d4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0216 	bic.w	r2, r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <HAL_DMA_Abort+0x62>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0208 	bic.w	r2, r2, #8
 8002ce2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf4:	e013      	b.n	8002d1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf6:	f7ff fe7b 	bl	80029f0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d90c      	bls.n	8002d1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e015      	b.n	8002d4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e4      	bne.n	8002cf6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d30:	223f      	movs	r2, #63	@ 0x3f
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d004      	beq.n	8002d70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2280      	movs	r2, #128	@ 0x80
 8002d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e00c      	b.n	8002d8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2205      	movs	r2, #5
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002da2:	4b49      	ldr	r3, [pc, #292]	@ (8002ec8 <HAL_FLASH_IRQHandler+0x130>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d020      	beq.n	8002df0 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002dae:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002db8:	4b44      	ldr	r3, [pc, #272]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8002dbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	e00b      	b.n	8002de0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002dc8:	4b40      	ldr	r3, [pc, #256]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d103      	bne.n	8002dda <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8002dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	e002      	b.n	8002de0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002dda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002de0:	f000 f88a 	bl	8002ef8 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f87d 	bl	8002ee4 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002dea:	4b38      	ldr	r3, [pc, #224]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002df0:	4b35      	ldr	r3, [pc, #212]	@ (8002ec8 <HAL_FLASH_IRQHandler+0x130>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d04a      	beq.n	8002e92 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002dfc:	4b32      	ldr	r3, [pc, #200]	@ (8002ec8 <HAL_FLASH_IRQHandler+0x130>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002e02:	4b32      	ldr	r3, [pc, #200]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d12d      	bne.n	8002e68 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	4a2e      	ldr	r2, [pc, #184]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e14:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8002e16:	4b2d      	ldr	r3, [pc, #180]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d015      	beq.n	8002e4a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f853 	bl	8002ed0 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8002e2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	4a26      	ldr	r2, [pc, #152]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e32:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8002e34:	4b25      	ldr	r3, [pc, #148]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e3c:	7a1b      	ldrb	r3, [r3, #8]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f8ae 	bl	8002fa4 <FLASH_Erase_Sector>
 8002e48:	e023      	b.n	8002e92 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002e5c:	f000 f8ea 	bl	8003034 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f835 	bl	8002ed0 <HAL_FLASH_EndOfOperationCallback>
 8002e66:	e014      	b.n	8002e92 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002e68:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d107      	bne.n	8002e82 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002e72:	f000 f8df 	bl	8003034 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002e76:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f828 	bl	8002ed0 <HAL_FLASH_EndOfOperationCallback>
 8002e80:	e004      	b.n	8002e8c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002e82:	4b12      	ldr	r3, [pc, #72]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f822 	bl	8002ed0 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <HAL_FLASH_IRQHandler+0x134>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d111      	bne.n	8002ec0 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <HAL_FLASH_IRQHandler+0x130>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <HAL_FLASH_IRQHandler+0x130>)
 8002ea2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002ea6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002ea8:	4b07      	ldr	r3, [pc, #28]	@ (8002ec8 <HAL_FLASH_IRQHandler+0x130>)
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	4a06      	ldr	r2, [pc, #24]	@ (8002ec8 <HAL_FLASH_IRQHandler+0x130>)
 8002eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eb2:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002eb4:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <HAL_FLASH_IRQHandler+0x130>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	4a03      	ldr	r2, [pc, #12]	@ (8002ec8 <HAL_FLASH_IRQHandler+0x130>)
 8002eba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	6113      	str	r3, [r2, #16]
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40023c00 	.word	0x40023c00
 8002ecc:	20000078 	.word	0x20000078

08002ed0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002efc:	4b27      	ldr	r3, [pc, #156]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f08:	4b25      	ldr	r3, [pc, #148]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f043 0310 	orr.w	r3, r3, #16
 8002f10:	4a23      	ldr	r2, [pc, #140]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f12:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002f14:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002f16:	2210      	movs	r2, #16
 8002f18:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002f1a:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f26:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f30:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002f32:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002f34:	2220      	movs	r2, #32
 8002f36:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f38:	4b18      	ldr	r3, [pc, #96]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002f44:	4b16      	ldr	r3, [pc, #88]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f043 0304 	orr.w	r3, r3, #4
 8002f4c:	4a14      	ldr	r2, [pc, #80]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f4e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002f50:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002f52:	2240      	movs	r2, #64	@ 0x40
 8002f54:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002f56:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f6c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002f70:	2280      	movs	r2, #128	@ 0x80
 8002f72:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002f74:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002f80:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	4a05      	ldr	r2, [pc, #20]	@ (8002fa0 <FLASH_SetErrorCode+0xa8>)
 8002f8a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002f8c:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <FLASH_SetErrorCode+0xa4>)
 8002f8e:	2202      	movs	r2, #2
 8002f90:	60da      	str	r2, [r3, #12]
  }
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40023c00 	.word	0x40023c00
 8002fa0:	20000078 	.word	0x20000078

08002fa4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e010      	b.n	8002fe2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d103      	bne.n	8002fce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002fc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e009      	b.n	8002fe2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d103      	bne.n	8002fdc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e002      	b.n	8002fe2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002fdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002fe2:	4b13      	ldr	r3, [pc, #76]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	4a12      	ldr	r2, [pc, #72]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002fee:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	490f      	ldr	r1, [pc, #60]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 8003000:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8003004:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4313      	orrs	r3, r2
 8003010:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 8003012:	f043 0302 	orr.w	r3, r3, #2
 8003016:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <FLASH_Erase_Sector+0x8c>)
 800301e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003022:	6113      	str	r3, [r2, #16]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40023c00 	.word	0x40023c00

08003034 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003038:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <FLASH_FlushCaches+0x88>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003040:	2b00      	cmp	r3, #0
 8003042:	d017      	beq.n	8003074 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003044:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <FLASH_FlushCaches+0x88>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1c      	ldr	r2, [pc, #112]	@ (80030bc <FLASH_FlushCaches+0x88>)
 800304a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800304e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003050:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <FLASH_FlushCaches+0x88>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a19      	ldr	r2, [pc, #100]	@ (80030bc <FLASH_FlushCaches+0x88>)
 8003056:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <FLASH_FlushCaches+0x88>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a16      	ldr	r2, [pc, #88]	@ (80030bc <FLASH_FlushCaches+0x88>)
 8003062:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003066:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003068:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <FLASH_FlushCaches+0x88>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a13      	ldr	r2, [pc, #76]	@ (80030bc <FLASH_FlushCaches+0x88>)
 800306e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003072:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <FLASH_FlushCaches+0x88>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003080:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <FLASH_FlushCaches+0x88>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0d      	ldr	r2, [pc, #52]	@ (80030bc <FLASH_FlushCaches+0x88>)
 8003086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800308a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <FLASH_FlushCaches+0x88>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <FLASH_FlushCaches+0x88>)
 8003092:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <FLASH_FlushCaches+0x88>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a07      	ldr	r2, [pc, #28]	@ (80030bc <FLASH_FlushCaches+0x88>)
 800309e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <FLASH_FlushCaches+0x88>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <FLASH_FlushCaches+0x88>)
 80030aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ae:	6013      	str	r3, [r2, #0]
  }
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00

080030c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	@ 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e16b      	b.n	80033b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030dc:	2201      	movs	r2, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	f040 815a 	bne.w	80033ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d005      	beq.n	8003112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310e:	2b02      	cmp	r3, #2
 8003110:	d130      	bne.n	8003174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	2203      	movs	r2, #3
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003148:	2201      	movs	r2, #1
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 0201 	and.w	r2, r3, #1
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b03      	cmp	r3, #3
 800317e:	d017      	beq.n	80031b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d123      	bne.n	8003204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	08da      	lsrs	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3208      	adds	r2, #8
 80031c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	220f      	movs	r2, #15
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	08da      	lsrs	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3208      	adds	r2, #8
 80031fe:	69b9      	ldr	r1, [r7, #24]
 8003200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2203      	movs	r2, #3
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0203 	and.w	r2, r3, #3
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80b4 	beq.w	80033ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	4b60      	ldr	r3, [pc, #384]	@ (80033cc <HAL_GPIO_Init+0x30c>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	4a5f      	ldr	r2, [pc, #380]	@ (80033cc <HAL_GPIO_Init+0x30c>)
 8003250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003254:	6453      	str	r3, [r2, #68]	@ 0x44
 8003256:	4b5d      	ldr	r3, [pc, #372]	@ (80033cc <HAL_GPIO_Init+0x30c>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003262:	4a5b      	ldr	r2, [pc, #364]	@ (80033d0 <HAL_GPIO_Init+0x310>)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	220f      	movs	r2, #15
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a52      	ldr	r2, [pc, #328]	@ (80033d4 <HAL_GPIO_Init+0x314>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02b      	beq.n	80032e6 <HAL_GPIO_Init+0x226>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a51      	ldr	r2, [pc, #324]	@ (80033d8 <HAL_GPIO_Init+0x318>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d025      	beq.n	80032e2 <HAL_GPIO_Init+0x222>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a50      	ldr	r2, [pc, #320]	@ (80033dc <HAL_GPIO_Init+0x31c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01f      	beq.n	80032de <HAL_GPIO_Init+0x21e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4f      	ldr	r2, [pc, #316]	@ (80033e0 <HAL_GPIO_Init+0x320>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d019      	beq.n	80032da <HAL_GPIO_Init+0x21a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4e      	ldr	r2, [pc, #312]	@ (80033e4 <HAL_GPIO_Init+0x324>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <HAL_GPIO_Init+0x216>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4d      	ldr	r2, [pc, #308]	@ (80033e8 <HAL_GPIO_Init+0x328>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00d      	beq.n	80032d2 <HAL_GPIO_Init+0x212>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4c      	ldr	r2, [pc, #304]	@ (80033ec <HAL_GPIO_Init+0x32c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <HAL_GPIO_Init+0x20e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4b      	ldr	r2, [pc, #300]	@ (80033f0 <HAL_GPIO_Init+0x330>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_GPIO_Init+0x20a>
 80032c6:	2307      	movs	r3, #7
 80032c8:	e00e      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032ca:	2308      	movs	r3, #8
 80032cc:	e00c      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032ce:	2306      	movs	r3, #6
 80032d0:	e00a      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032d2:	2305      	movs	r3, #5
 80032d4:	e008      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032d6:	2304      	movs	r3, #4
 80032d8:	e006      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032da:	2303      	movs	r3, #3
 80032dc:	e004      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032de:	2302      	movs	r3, #2
 80032e0:	e002      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_GPIO_Init+0x228>
 80032e6:	2300      	movs	r3, #0
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f002 0203 	and.w	r2, r2, #3
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	4093      	lsls	r3, r2
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f8:	4935      	ldr	r1, [pc, #212]	@ (80033d0 <HAL_GPIO_Init+0x310>)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3302      	adds	r3, #2
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003306:	4b3b      	ldr	r3, [pc, #236]	@ (80033f4 <HAL_GPIO_Init+0x334>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332a:	4a32      	ldr	r2, [pc, #200]	@ (80033f4 <HAL_GPIO_Init+0x334>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003330:	4b30      	ldr	r3, [pc, #192]	@ (80033f4 <HAL_GPIO_Init+0x334>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003354:	4a27      	ldr	r2, [pc, #156]	@ (80033f4 <HAL_GPIO_Init+0x334>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800335a:	4b26      	ldr	r3, [pc, #152]	@ (80033f4 <HAL_GPIO_Init+0x334>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800337e:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <HAL_GPIO_Init+0x334>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003384:	4b1b      	ldr	r3, [pc, #108]	@ (80033f4 <HAL_GPIO_Init+0x334>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033a8:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <HAL_GPIO_Init+0x334>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	f67f ae90 	bls.w	80030dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3724      	adds	r7, #36	@ 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40013800 	.word	0x40013800
 80033d4:	40020000 	.word	0x40020000
 80033d8:	40020400 	.word	0x40020400
 80033dc:	40020800 	.word	0x40020800
 80033e0:	40020c00 	.word	0x40020c00
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40021400 	.word	0x40021400
 80033ec:	40021800 	.word	0x40021800
 80033f0:	40021c00 	.word	0x40021c00
 80033f4:	40013c00 	.word	0x40013c00

080033f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	887b      	ldrh	r3, [r7, #2]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
 8003414:	e001      	b.n	800341a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800341a:	7bfb      	ldrb	r3, [r7, #15]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	807b      	strh	r3, [r7, #2]
 8003434:	4613      	mov	r3, r2
 8003436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003438:	787b      	ldrb	r3, [r7, #1]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800343e:	887a      	ldrh	r2, [r7, #2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003444:	e003      	b.n	800344e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003446:	887b      	ldrh	r3, [r7, #2]
 8003448:	041a      	lsls	r2, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	619a      	str	r2, [r3, #24]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e12b      	b.n	80036c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff f80c 	bl	80024a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2224      	movs	r2, #36	@ 0x24
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034c0:	f001 fc3a 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 80034c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4a81      	ldr	r2, [pc, #516]	@ (80036d0 <HAL_I2C_Init+0x274>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d807      	bhi.n	80034e0 <HAL_I2C_Init+0x84>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a80      	ldr	r2, [pc, #512]	@ (80036d4 <HAL_I2C_Init+0x278>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	bf94      	ite	ls
 80034d8:	2301      	movls	r3, #1
 80034da:	2300      	movhi	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e006      	b.n	80034ee <HAL_I2C_Init+0x92>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a7d      	ldr	r2, [pc, #500]	@ (80036d8 <HAL_I2C_Init+0x27c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e0e7      	b.n	80036c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a78      	ldr	r2, [pc, #480]	@ (80036dc <HAL_I2C_Init+0x280>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	0c9b      	lsrs	r3, r3, #18
 8003500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a6a      	ldr	r2, [pc, #424]	@ (80036d0 <HAL_I2C_Init+0x274>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d802      	bhi.n	8003530 <HAL_I2C_Init+0xd4>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3301      	adds	r3, #1
 800352e:	e009      	b.n	8003544 <HAL_I2C_Init+0xe8>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	4a69      	ldr	r2, [pc, #420]	@ (80036e0 <HAL_I2C_Init+0x284>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	099b      	lsrs	r3, r3, #6
 8003542:	3301      	adds	r3, #1
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	430b      	orrs	r3, r1
 800354a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003556:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	495c      	ldr	r1, [pc, #368]	@ (80036d0 <HAL_I2C_Init+0x274>)
 8003560:	428b      	cmp	r3, r1
 8003562:	d819      	bhi.n	8003598 <HAL_I2C_Init+0x13c>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e59      	subs	r1, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003578:	400b      	ands	r3, r1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_I2C_Init+0x138>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1e59      	subs	r1, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fbb1 f3f3 	udiv	r3, r1, r3
 800358c:	3301      	adds	r3, #1
 800358e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003592:	e051      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 8003594:	2304      	movs	r3, #4
 8003596:	e04f      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d111      	bne.n	80035c4 <HAL_I2C_Init+0x168>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e58      	subs	r0, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	440b      	add	r3, r1
 80035ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e012      	b.n	80035ea <HAL_I2C_Init+0x18e>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1e58      	subs	r0, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	0099      	lsls	r1, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Init+0x196>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e022      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10e      	bne.n	8003618 <HAL_I2C_Init+0x1bc>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1e58      	subs	r0, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	440b      	add	r3, r1
 8003608:	fbb0 f3f3 	udiv	r3, r0, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003616:	e00f      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	0099      	lsls	r1, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	6809      	ldr	r1, [r1, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003666:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6911      	ldr	r1, [r2, #16]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68d2      	ldr	r2, [r2, #12]
 8003672:	4311      	orrs	r1, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	430b      	orrs	r3, r1
 800367a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	000186a0 	.word	0x000186a0
 80036d4:	001e847f 	.word	0x001e847f
 80036d8:	003d08ff 	.word	0x003d08ff
 80036dc:	431bde83 	.word	0x431bde83
 80036e0:	10624dd3 	.word	0x10624dd3

080036e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	460b      	mov	r3, r1
 80036f8:	813b      	strh	r3, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036fe:	f7ff f977 	bl	80029f0 <HAL_GetTick>
 8003702:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b20      	cmp	r3, #32
 800370e:	f040 80d9 	bne.w	80038c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2319      	movs	r3, #25
 8003718:	2201      	movs	r2, #1
 800371a:	496d      	ldr	r1, [pc, #436]	@ (80038d0 <HAL_I2C_Mem_Write+0x1ec>)
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fc8b 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
 800372a:	e0cc      	b.n	80038c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_I2C_Mem_Write+0x56>
 8003736:	2302      	movs	r3, #2
 8003738:	e0c5      	b.n	80038c6 <HAL_I2C_Mem_Write+0x1e2>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	d007      	beq.n	8003760 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800376e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2221      	movs	r2, #33	@ 0x21
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2240      	movs	r2, #64	@ 0x40
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a3a      	ldr	r2, [r7, #32]
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a4d      	ldr	r2, [pc, #308]	@ (80038d4 <HAL_I2C_Mem_Write+0x1f0>)
 80037a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037a2:	88f8      	ldrh	r0, [r7, #6]
 80037a4:	893a      	ldrh	r2, [r7, #8]
 80037a6:	8979      	ldrh	r1, [r7, #10]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	4603      	mov	r3, r0
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fac2 	bl	8003d3c <I2C_RequestMemoryWrite>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d052      	beq.n	8003864 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e081      	b.n	80038c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fd50 	bl	800426c <I2C_WaitOnTXEFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d107      	bne.n	80037ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06b      	b.n	80038c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	781a      	ldrb	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b04      	cmp	r3, #4
 800382a:	d11b      	bne.n	8003864 <HAL_I2C_Mem_Write+0x180>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d017      	beq.n	8003864 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1aa      	bne.n	80037c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fd43 	bl	80042fc <I2C_WaitOnBTFFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00d      	beq.n	8003898 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	2b04      	cmp	r3, #4
 8003882:	d107      	bne.n	8003894 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003892:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e016      	b.n	80038c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	00100002 	.word	0x00100002
 80038d4:	ffff0000 	.word	0xffff0000

080038d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08c      	sub	sp, #48	@ 0x30
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	460b      	mov	r3, r1
 80038ec:	813b      	strh	r3, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038f2:	f7ff f87d 	bl	80029f0 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b20      	cmp	r3, #32
 8003902:	f040 8214 	bne.w	8003d2e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2319      	movs	r3, #25
 800390c:	2201      	movs	r2, #1
 800390e:	497b      	ldr	r1, [pc, #492]	@ (8003afc <HAL_I2C_Mem_Read+0x224>)
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fb91 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
 800391e:	e207      	b.n	8003d30 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_I2C_Mem_Read+0x56>
 800392a:	2302      	movs	r3, #2
 800392c:	e200      	b.n	8003d30 <HAL_I2C_Mem_Read+0x458>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d007      	beq.n	8003954 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2222      	movs	r2, #34	@ 0x22
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2240      	movs	r2, #64	@ 0x40
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800397e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003984:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a5b      	ldr	r2, [pc, #364]	@ (8003b00 <HAL_I2C_Mem_Read+0x228>)
 8003994:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003996:	88f8      	ldrh	r0, [r7, #6]
 8003998:	893a      	ldrh	r2, [r7, #8]
 800399a:	8979      	ldrh	r1, [r7, #10]
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	4603      	mov	r3, r0
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa5e 	bl	8003e68 <I2C_RequestMemoryRead>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1bc      	b.n	8003d30 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d113      	bne.n	80039e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	623b      	str	r3, [r7, #32]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e190      	b.n	8003d08 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d11b      	bne.n	8003a26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e170      	b.n	8003d08 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d11b      	bne.n	8003a66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	e150      	b.n	8003d08 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a7c:	e144      	b.n	8003d08 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	f200 80f1 	bhi.w	8003c6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d123      	bne.n	8003ad8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fc79 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e145      	b.n	8003d30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ad6:	e117      	b.n	8003d08 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d14e      	bne.n	8003b7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	4906      	ldr	r1, [pc, #24]	@ (8003b04 <HAL_I2C_Mem_Read+0x22c>)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 faa4 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e11a      	b.n	8003d30 <HAL_I2C_Mem_Read+0x458>
 8003afa:	bf00      	nop
 8003afc:	00100002 	.word	0x00100002
 8003b00:	ffff0000 	.word	0xffff0000
 8003b04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b7c:	e0c4      	b.n	8003d08 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b84:	2200      	movs	r2, #0
 8003b86:	496c      	ldr	r1, [pc, #432]	@ (8003d38 <HAL_I2C_Mem_Read+0x460>)
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fa55 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0cb      	b.n	8003d30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	2200      	movs	r2, #0
 8003be2:	4955      	ldr	r1, [pc, #340]	@ (8003d38 <HAL_I2C_Mem_Read+0x460>)
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fa27 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e09d      	b.n	8003d30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c68:	e04e      	b.n	8003d08 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fb8c 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e058      	b.n	8003d30 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d124      	bne.n	8003d08 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f47f aeb6 	bne.w	8003a7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e000      	b.n	8003d30 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
  }
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3728      	adds	r7, #40	@ 0x28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	00010004 	.word	0x00010004

08003d3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	4608      	mov	r0, r1
 8003d46:	4611      	mov	r1, r2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	817b      	strh	r3, [r7, #10]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	813b      	strh	r3, [r7, #8]
 8003d52:	4613      	mov	r3, r2
 8003d54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f960 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d8c:	d103      	bne.n	8003d96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e05f      	b.n	8003e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d9a:	897b      	ldrh	r3, [r7, #10]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	492d      	ldr	r1, [pc, #180]	@ (8003e64 <I2C_RequestMemoryWrite+0x128>)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f9bb 	bl	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e04c      	b.n	8003e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd8:	6a39      	ldr	r1, [r7, #32]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fa46 	bl	800426c <I2C_WaitOnTXEFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d107      	bne.n	8003dfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e02b      	b.n	8003e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e08:	893b      	ldrh	r3, [r7, #8]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	611a      	str	r2, [r3, #16]
 8003e12:	e021      	b.n	8003e58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e14:	893b      	ldrh	r3, [r7, #8]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e24:	6a39      	ldr	r1, [r7, #32]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fa20 	bl	800426c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d107      	bne.n	8003e4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e005      	b.n	8003e5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4e:	893b      	ldrh	r3, [r7, #8]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	00010002 	.word	0x00010002

08003e68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	4608      	mov	r0, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	461a      	mov	r2, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	817b      	strh	r3, [r7, #10]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	813b      	strh	r3, [r7, #8]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f8c2 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00d      	beq.n	8003ed6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec8:	d103      	bne.n	8003ed2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0aa      	b.n	800402c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed6:	897b      	ldrh	r3, [r7, #10]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	4952      	ldr	r1, [pc, #328]	@ (8004034 <I2C_RequestMemoryRead+0x1cc>)
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f91d 	bl	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e097      	b.n	800402c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f14:	6a39      	ldr	r1, [r7, #32]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f9a8 	bl	800426c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d107      	bne.n	8003f3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e076      	b.n	800402c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f44:	893b      	ldrh	r3, [r7, #8]
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	611a      	str	r2, [r3, #16]
 8003f4e:	e021      	b.n	8003f94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f50:	893b      	ldrh	r3, [r7, #8]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f60:	6a39      	ldr	r1, [r7, #32]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f982 	bl	800426c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d107      	bne.n	8003f86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e050      	b.n	800402c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f8a:	893b      	ldrh	r3, [r7, #8]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f96:	6a39      	ldr	r1, [r7, #32]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f967 	bl	800426c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00d      	beq.n	8003fc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d107      	bne.n	8003fbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e035      	b.n	800402c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f82b 	bl	8004038 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff6:	d103      	bne.n	8004000 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e013      	b.n	800402c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004004:	897b      	ldrh	r3, [r7, #10]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	6a3a      	ldr	r2, [r7, #32]
 8004018:	4906      	ldr	r1, [pc, #24]	@ (8004034 <I2C_RequestMemoryRead+0x1cc>)
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f886 	bl	800412c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	00010002 	.word	0x00010002

08004038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004048:	e048      	b.n	80040dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d044      	beq.n	80040dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7fe fccd 	bl	80029f0 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d139      	bne.n	80040dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10d      	bne.n	800408e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	43da      	mvns	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4013      	ands	r3, r2
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	e00c      	b.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	43da      	mvns	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4013      	ands	r3, r2
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d116      	bne.n	80040dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e023      	b.n	8004124 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	0c1b      	lsrs	r3, r3, #16
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10d      	bne.n	8004102 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	43da      	mvns	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4013      	ands	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	e00c      	b.n	800411c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	43da      	mvns	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4013      	ands	r3, r2
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	429a      	cmp	r2, r3
 8004120:	d093      	beq.n	800404a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800413a:	e071      	b.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414a:	d123      	bne.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e067      	b.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d041      	beq.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419c:	f7fe fc28 	bl	80029f0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d302      	bcc.n	80041b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d136      	bne.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d10c      	bne.n	80041d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	e00b      	b.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	43da      	mvns	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e021      	b.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d10c      	bne.n	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	43da      	mvns	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4013      	ands	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e00b      	b.n	800425c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	43da      	mvns	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	bf14      	ite	ne
 8004256:	2301      	movne	r3, #1
 8004258:	2300      	moveq	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	f47f af6d 	bne.w	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004278:	e034      	b.n	80042e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f8e3 	bl	8004446 <I2C_IsAcknowledgeFailed>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e034      	b.n	80042f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d028      	beq.n	80042e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004292:	f7fe fbad 	bl	80029f0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d302      	bcc.n	80042a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d11d      	bne.n	80042e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b2:	2b80      	cmp	r3, #128	@ 0x80
 80042b4:	d016      	beq.n	80042e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e007      	b.n	80042f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ee:	2b80      	cmp	r3, #128	@ 0x80
 80042f0:	d1c3      	bne.n	800427a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004308:	e034      	b.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f89b 	bl	8004446 <I2C_IsAcknowledgeFailed>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e034      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d028      	beq.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fe fb65 	bl	80029f0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11d      	bne.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b04      	cmp	r3, #4
 8004344:	d016      	beq.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d1c3      	bne.n	800430a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004398:	e049      	b.n	800442e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d119      	bne.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0210 	mvn.w	r2, #16
 80043b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e030      	b.n	800443e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fe fb08 	bl	80029f0 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11d      	bne.n	800442e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fc:	2b40      	cmp	r3, #64	@ 0x40
 80043fe:	d016      	beq.n	800442e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e007      	b.n	800443e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004438:	2b40      	cmp	r3, #64	@ 0x40
 800443a:	d1ae      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445c:	d11b      	bne.n	8004496 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004466:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	f043 0204 	orr.w	r2, r3, #4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80044a8:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80044b4:	f000 f808 	bl	80044c8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80044b8:	4b02      	ldr	r3, [pc, #8]	@ (80044c4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80044ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80044be:	615a      	str	r2, [r3, #20]
  }
}
 80044c0:	bf00      	nop
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40013c00 	.word	0x40013c00

080044c8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e267      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d075      	beq.n	80045e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044f6:	4b88      	ldr	r3, [pc, #544]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d00c      	beq.n	800451c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004502:	4b85      	ldr	r3, [pc, #532]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800450a:	2b08      	cmp	r3, #8
 800450c:	d112      	bne.n	8004534 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450e:	4b82      	ldr	r3, [pc, #520]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800451a:	d10b      	bne.n	8004534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	4b7e      	ldr	r3, [pc, #504]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05b      	beq.n	80045e0 <HAL_RCC_OscConfig+0x108>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d157      	bne.n	80045e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e242      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800453c:	d106      	bne.n	800454c <HAL_RCC_OscConfig+0x74>
 800453e:	4b76      	ldr	r3, [pc, #472]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a75      	ldr	r2, [pc, #468]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e01d      	b.n	8004588 <HAL_RCC_OscConfig+0xb0>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x98>
 8004556:	4b70      	ldr	r3, [pc, #448]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6f      	ldr	r2, [pc, #444]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800455c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b6d      	ldr	r3, [pc, #436]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a6c      	ldr	r2, [pc, #432]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e00b      	b.n	8004588 <HAL_RCC_OscConfig+0xb0>
 8004570:	4b69      	ldr	r3, [pc, #420]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a68      	ldr	r2, [pc, #416]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	4b66      	ldr	r3, [pc, #408]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a65      	ldr	r2, [pc, #404]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fe fa2e 	bl	80029f0 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fe fa2a 	bl	80029f0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	@ 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e207      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0xc0>
 80045b6:	e014      	b.n	80045e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fe fa1a 	bl	80029f0 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fe fa16 	bl	80029f0 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	@ 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e1f3      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d2:	4b51      	ldr	r3, [pc, #324]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0xe8>
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d063      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fa:	4b47      	ldr	r3, [pc, #284]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004602:	2b08      	cmp	r3, #8
 8004604:	d11c      	bne.n	8004640 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004606:	4b44      	ldr	r3, [pc, #272]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d116      	bne.n	8004640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	4b41      	ldr	r3, [pc, #260]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_RCC_OscConfig+0x152>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d001      	beq.n	800462a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e1c7      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462a:	4b3b      	ldr	r3, [pc, #236]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4937      	ldr	r1, [pc, #220]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463e:	e03a      	b.n	80046b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d020      	beq.n	800468a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004648:	4b34      	ldr	r3, [pc, #208]	@ (800471c <HAL_RCC_OscConfig+0x244>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fe f9cf 	bl	80029f0 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7fe f9cb 	bl	80029f0 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e1a8      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004668:	4b2b      	ldr	r3, [pc, #172]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b28      	ldr	r3, [pc, #160]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4925      	ldr	r1, [pc, #148]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 8004684:	4313      	orrs	r3, r2
 8004686:	600b      	str	r3, [r1, #0]
 8004688:	e015      	b.n	80046b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468a:	4b24      	ldr	r3, [pc, #144]	@ (800471c <HAL_RCC_OscConfig+0x244>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe f9ae 	bl	80029f0 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7fe f9aa 	bl	80029f0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e187      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d036      	beq.n	8004730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ca:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <HAL_RCC_OscConfig+0x248>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fe f98e 	bl	80029f0 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d8:	f7fe f98a 	bl	80029f0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e167      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <HAL_RCC_OscConfig+0x240>)
 80046ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x200>
 80046f6:	e01b      	b.n	8004730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f8:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <HAL_RCC_OscConfig+0x248>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fe:	f7fe f977 	bl	80029f0 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	e00e      	b.n	8004724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fe f973 	bl	80029f0 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d907      	bls.n	8004724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e150      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
 8004718:	40023800 	.word	0x40023800
 800471c:	42470000 	.word	0x42470000
 8004720:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	4b88      	ldr	r3, [pc, #544]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ea      	bne.n	8004706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 8097 	beq.w	800486c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473e:	2300      	movs	r3, #0
 8004740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004742:	4b81      	ldr	r3, [pc, #516]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	4b7d      	ldr	r3, [pc, #500]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	4a7c      	ldr	r2, [pc, #496]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475c:	6413      	str	r3, [r2, #64]	@ 0x40
 800475e:	4b7a      	ldr	r3, [pc, #488]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b77      	ldr	r3, [pc, #476]	@ (800494c <HAL_RCC_OscConfig+0x474>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477a:	4b74      	ldr	r3, [pc, #464]	@ (800494c <HAL_RCC_OscConfig+0x474>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a73      	ldr	r2, [pc, #460]	@ (800494c <HAL_RCC_OscConfig+0x474>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fe f933 	bl	80029f0 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fe f92f 	bl	80029f0 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e10c      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b6a      	ldr	r3, [pc, #424]	@ (800494c <HAL_RCC_OscConfig+0x474>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x2ea>
 80047b4:	4b64      	ldr	r3, [pc, #400]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	4a63      	ldr	r2, [pc, #396]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c0:	e01c      	b.n	80047fc <HAL_RCC_OscConfig+0x324>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x30c>
 80047ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047d0:	f043 0304 	orr.w	r3, r3, #4
 80047d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	4a5b      	ldr	r2, [pc, #364]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e2:	e00b      	b.n	80047fc <HAL_RCC_OscConfig+0x324>
 80047e4:	4b58      	ldr	r3, [pc, #352]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e8:	4a57      	ldr	r2, [pc, #348]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f0:	4b55      	ldr	r3, [pc, #340]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f4:	4a54      	ldr	r2, [pc, #336]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f023 0304 	bic.w	r3, r3, #4
 80047fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d015      	beq.n	8004830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fe f8f4 	bl	80029f0 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	e00a      	b.n	8004822 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fe f8f0 	bl	80029f0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e0cb      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004822:	4b49      	ldr	r3, [pc, #292]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0ee      	beq.n	800480c <HAL_RCC_OscConfig+0x334>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004830:	f7fe f8de 	bl	80029f0 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fe f8da 	bl	80029f0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0b5      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484e:	4b3e      	ldr	r3, [pc, #248]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ee      	bne.n	8004838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004860:	4b39      	ldr	r3, [pc, #228]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	4a38      	ldr	r2, [pc, #224]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800486a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80a1 	beq.w	80049b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004876:	4b34      	ldr	r3, [pc, #208]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b08      	cmp	r3, #8
 8004880:	d05c      	beq.n	800493c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d141      	bne.n	800490e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b31      	ldr	r3, [pc, #196]	@ (8004950 <HAL_RCC_OscConfig+0x478>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fe f8ae 	bl	80029f0 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fe f8aa 	bl	80029f0 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e087      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	019b      	lsls	r3, r3, #6
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	3b01      	subs	r3, #1
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	491b      	ldr	r1, [pc, #108]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004950 <HAL_RCC_OscConfig+0x478>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e6:	f7fe f883 	bl	80029f0 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ee:	f7fe f87f 	bl	80029f0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e05c      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004900:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x416>
 800490c:	e054      	b.n	80049b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490e:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <HAL_RCC_OscConfig+0x478>)
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7fe f86c 	bl	80029f0 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491c:	f7fe f868 	bl	80029f0 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e045      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_RCC_OscConfig+0x470>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f0      	bne.n	800491c <HAL_RCC_OscConfig+0x444>
 800493a:	e03d      	b.n	80049b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d107      	bne.n	8004954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e038      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
 8004948:	40023800 	.word	0x40023800
 800494c:	40007000 	.word	0x40007000
 8004950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004954:	4b1b      	ldr	r3, [pc, #108]	@ (80049c4 <HAL_RCC_OscConfig+0x4ec>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d028      	beq.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d121      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d11a      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004984:	4013      	ands	r3, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800498a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800498c:	4293      	cmp	r3, r2
 800498e:	d111      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	3b01      	subs	r3, #1
 800499e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800

080049c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0cc      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b68      	ldr	r3, [pc, #416]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d90c      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b65      	ldr	r3, [pc, #404]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b63      	ldr	r3, [pc, #396]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0b8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b59      	ldr	r3, [pc, #356]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a58      	ldr	r2, [pc, #352]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a34:	4b53      	ldr	r3, [pc, #332]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a52      	ldr	r2, [pc, #328]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b50      	ldr	r3, [pc, #320]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	494d      	ldr	r1, [pc, #308]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d044      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b47      	ldr	r3, [pc, #284]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d119      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b3f      	ldr	r3, [pc, #252]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e06f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b3b      	ldr	r3, [pc, #236]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e067      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b37      	ldr	r3, [pc, #220]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4934      	ldr	r1, [pc, #208]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd ff9a 	bl	80029f0 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fd ff96 	bl	80029f0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e04f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b25      	ldr	r3, [pc, #148]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d20c      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b22      	ldr	r3, [pc, #136]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b20      	ldr	r3, [pc, #128]	@ (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e032      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1c:	4b19      	ldr	r3, [pc, #100]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4916      	ldr	r1, [pc, #88]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b3a:	4b12      	ldr	r3, [pc, #72]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	490e      	ldr	r1, [pc, #56]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b4e:	f000 f821 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	490a      	ldr	r1, [pc, #40]	@ (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
 8004b62:	fa22 f303 	lsr.w	r3, r2, r3
 8004b66:	4a09      	ldr	r2, [pc, #36]	@ (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fd fefa 	bl	8002968 <HAL_InitTick>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023c00 	.word	0x40023c00
 8004b84:	40023800 	.word	0x40023800
 8004b88:	0800a9d4 	.word	0x0800a9d4
 8004b8c:	2000006c 	.word	0x2000006c
 8004b90:	20000070 	.word	0x20000070

08004b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b98:	b090      	sub	sp, #64	@ 0x40
 8004b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bac:	4b59      	ldr	r3, [pc, #356]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d00d      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	f200 80a1 	bhi.w	8004d00 <HAL_RCC_GetSysClockFreq+0x16c>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x3a>
 8004bc6:	e09b      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc8:	4b53      	ldr	r3, [pc, #332]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bcc:	e09b      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bce:	4b53      	ldr	r3, [pc, #332]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bd2:	e098      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bde:	4b4d      	ldr	r3, [pc, #308]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d028      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bea:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4b47      	ldr	r3, [pc, #284]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c00:	fb03 f201 	mul.w	r2, r3, r1
 8004c04:	2300      	movs	r3, #0
 8004c06:	fb00 f303 	mul.w	r3, r0, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	4a43      	ldr	r2, [pc, #268]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c0e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c14:	460a      	mov	r2, r1
 8004c16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1a:	4413      	add	r3, r2
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c20:	2200      	movs	r2, #0
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	61fa      	str	r2, [r7, #28]
 8004c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c2e:	f7fb fb1f 	bl	8000270 <__aeabi_uldivmod>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4613      	mov	r3, r2
 8004c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c3a:	e053      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3c:	4b35      	ldr	r3, [pc, #212]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	2200      	movs	r2, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	617a      	str	r2, [r7, #20]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c4e:	f04f 0b00 	mov.w	fp, #0
 8004c52:	4652      	mov	r2, sl
 8004c54:	465b      	mov	r3, fp
 8004c56:	f04f 0000 	mov.w	r0, #0
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	0159      	lsls	r1, r3, #5
 8004c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c64:	0150      	lsls	r0, r2, #5
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	ebb2 080a 	subs.w	r8, r2, sl
 8004c6e:	eb63 090b 	sbc.w	r9, r3, fp
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c86:	ebb2 0408 	subs.w	r4, r2, r8
 8004c8a:	eb63 0509 	sbc.w	r5, r3, r9
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	00eb      	lsls	r3, r5, #3
 8004c98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c9c:	00e2      	lsls	r2, r4, #3
 8004c9e:	4614      	mov	r4, r2
 8004ca0:	461d      	mov	r5, r3
 8004ca2:	eb14 030a 	adds.w	r3, r4, sl
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	eb45 030b 	adc.w	r3, r5, fp
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cba:	4629      	mov	r1, r5
 8004cbc:	028b      	lsls	r3, r1, #10
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	028a      	lsls	r2, r1, #10
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	60fa      	str	r2, [r7, #12]
 8004cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd8:	f7fb faca 	bl	8000270 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004cf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d00:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3740      	adds	r7, #64	@ 0x40
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d12:	bf00      	nop
 8004d14:	40023800 	.word	0x40023800
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	017d7840 	.word	0x017d7840

08004d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d24:	4b03      	ldr	r3, [pc, #12]	@ (8004d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	2000006c 	.word	0x2000006c

08004d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d3c:	f7ff fff0 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	0a9b      	lsrs	r3, r3, #10
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4903      	ldr	r1, [pc, #12]	@ (8004d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	0800a9e4 	.word	0x0800a9e4

08004d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d64:	f7ff ffdc 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	0b5b      	lsrs	r3, r3, #13
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4903      	ldr	r1, [pc, #12]	@ (8004d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40023800 	.word	0x40023800
 8004d84:	0800a9e4 	.word	0x0800a9e4

08004d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e07b      	b.n	8004e92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004daa:	d009      	beq.n	8004dc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	61da      	str	r2, [r3, #28]
 8004db2:	e005      	b.n	8004dc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fd fba8 	bl	8002530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e44:	ea42 0103 	orr.w	r1, r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	f003 0104 	and.w	r1, r3, #4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	f003 0210 	and.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b088      	sub	sp, #32
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eaa:	f7fd fda1 	bl	80029f0 <HAL_GetTick>
 8004eae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d001      	beq.n	8004ec4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e12a      	b.n	800511a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_SPI_Transmit+0x36>
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e122      	b.n	800511a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_SPI_Transmit+0x48>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e11b      	b.n	800511a <HAL_SPI_Transmit+0x280>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2203      	movs	r2, #3
 8004eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	88fa      	ldrh	r2, [r7, #6]
 8004f02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f30:	d10f      	bne.n	8004f52 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5c:	2b40      	cmp	r3, #64	@ 0x40
 8004f5e:	d007      	beq.n	8004f70 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f78:	d152      	bne.n	8005020 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_SPI_Transmit+0xee>
 8004f82:	8b7b      	ldrh	r3, [r7, #26]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d145      	bne.n	8005014 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	881a      	ldrh	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	1c9a      	adds	r2, r3, #2
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fac:	e032      	b.n	8005014 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d112      	bne.n	8004fe2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fcc:	1c9a      	adds	r2, r3, #2
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fe0:	e018      	b.n	8005014 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe2:	f7fd fd05 	bl	80029f0 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d803      	bhi.n	8004ffa <HAL_SPI_Transmit+0x160>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d102      	bne.n	8005000 <HAL_SPI_Transmit+0x166>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e082      	b.n	800511a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1c7      	bne.n	8004fae <HAL_SPI_Transmit+0x114>
 800501e:	e053      	b.n	80050c8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_SPI_Transmit+0x194>
 8005028:	8b7b      	ldrh	r3, [r7, #26]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d147      	bne.n	80050be <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	7812      	ldrb	r2, [r2, #0]
 800503a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005054:	e033      	b.n	80050be <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d113      	bne.n	800508c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	7812      	ldrb	r2, [r2, #0]
 8005070:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	86da      	strh	r2, [r3, #54]	@ 0x36
 800508a:	e018      	b.n	80050be <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800508c:	f7fd fcb0 	bl	80029f0 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d803      	bhi.n	80050a4 <HAL_SPI_Transmit+0x20a>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d102      	bne.n	80050aa <HAL_SPI_Transmit+0x210>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e02d      	b.n	800511a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1c6      	bne.n	8005056 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f9cf 	bl	8005470 <SPI_EndRxTxTransaction>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005118:	2300      	movs	r3, #0
  }
}
 800511a:	4618      	mov	r0, r3
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10f      	bne.n	8005168 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	099b      	lsrs	r3, r3, #6
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
    return;
 8005166:	e0d7      	b.n	8005318 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_SPI_IRQHandler+0x66>
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	09db      	lsrs	r3, r3, #7
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
    return;
 8005188:	e0c6      	b.n	8005318 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10c      	bne.n	80051b0 <HAL_SPI_IRQHandler+0x8c>
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	099b      	lsrs	r3, r3, #6
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	0a1b      	lsrs	r3, r3, #8
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80b4 	beq.w	8005318 <HAL_SPI_IRQHandler+0x1f4>
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80ad 	beq.w	8005318 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	099b      	lsrs	r3, r3, #6
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d023      	beq.n	8005212 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d011      	beq.n	80051fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051da:	f043 0204 	orr.w	r2, r3, #4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	e00b      	b.n	8005212 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	693b      	ldr	r3, [r7, #16]
        return;
 8005210:	e082      	b.n	8005318 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d014      	beq.n	8005248 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	f043 0201 	orr.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00c      	beq.n	800526e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005258:	f043 0208 	orr.w	r2, r3, #8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005260:	2300      	movs	r3, #0
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04f      	beq.n	8005316 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005284:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <HAL_SPI_IRQHandler+0x17e>
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d034      	beq.n	800530c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0203 	bic.w	r2, r2, #3
 80052b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d011      	beq.n	80052de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052be:	4a18      	ldr	r2, [pc, #96]	@ (8005320 <HAL_SPI_IRQHandler+0x1fc>)
 80052c0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fd fd43 	bl	8002d52 <HAL_DMA_Abort_IT>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d016      	beq.n	8005314 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005320 <HAL_SPI_IRQHandler+0x1fc>)
 80052ec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd fd2d 	bl	8002d52 <HAL_DMA_Abort_IT>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800530a:	e003      	b.n	8005314 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f809 	bl	8005324 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005312:	e000      	b.n	8005316 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005314:	bf00      	nop
    return;
 8005316:	bf00      	nop
  }
}
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	08005339 	.word	0x08005339

08005324 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff ffe6 	bl	8005324 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005370:	f7fd fb3e 	bl	80029f0 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	4413      	add	r3, r2
 800537e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005380:	f7fd fb36 	bl	80029f0 <HAL_GetTick>
 8005384:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005386:	4b39      	ldr	r3, [pc, #228]	@ (800546c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	015b      	lsls	r3, r3, #5
 800538c:	0d1b      	lsrs	r3, r3, #20
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	fb02 f303 	mul.w	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005396:	e055      	b.n	8005444 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d051      	beq.n	8005444 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053a0:	f7fd fb26 	bl	80029f0 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d902      	bls.n	80053b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d13d      	bne.n	8005432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ce:	d111      	bne.n	80053f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d8:	d004      	beq.n	80053e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e2:	d107      	bne.n	80053f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053fc:	d10f      	bne.n	800541e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800541c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e018      	b.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	e002      	b.n	8005444 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	3b01      	subs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	429a      	cmp	r2, r3
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	429a      	cmp	r2, r3
 8005460:	d19a      	bne.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	2000006c 	.word	0x2000006c

08005470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2201      	movs	r2, #1
 8005484:	2102      	movs	r1, #2
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff ff6a 	bl	8005360 <SPI_WaitFlagStateUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	f043 0220 	orr.w	r2, r3, #32
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e032      	b.n	8005508 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005510 <SPI_EndRxTxTransaction+0xa0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <SPI_EndRxTxTransaction+0xa4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	0d5b      	lsrs	r3, r3, #21
 80054ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054c0:	d112      	bne.n	80054e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2180      	movs	r1, #128	@ 0x80
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff ff47 	bl	8005360 <SPI_WaitFlagStateUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d016      	beq.n	8005506 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e00f      	b.n	8005508 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fe:	2b80      	cmp	r3, #128	@ 0x80
 8005500:	d0f2      	beq.n	80054e8 <SPI_EndRxTxTransaction+0x78>
 8005502:	e000      	b.n	8005506 <SPI_EndRxTxTransaction+0x96>
        break;
 8005504:	bf00      	nop
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	2000006c 	.word	0x2000006c
 8005514:	165e9f81 	.word	0x165e9f81

08005518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e042      	b.n	80055b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fd f846 	bl	80025d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	@ 0x24
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800555a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fc99 	bl	8005e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b0ba      	sub	sp, #232	@ 0xe8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_UART_IRQHandler+0x66>
 800560a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fb7e 	bl	8005d18 <UART_Receive_IT>
      return;
 800561c:	e273      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800561e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80de 	beq.w	80057e4 <HAL_UART_IRQHandler+0x22c>
 8005628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80d1 	beq.w	80057e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <HAL_UART_IRQHandler+0xae>
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_UART_IRQHandler+0xd2>
 8005672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005682:	f043 0202 	orr.w	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_UART_IRQHandler+0xf6>
 8005696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a6:	f043 0204 	orr.w	r2, r3, #4
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d011      	beq.n	80056de <HAL_UART_IRQHandler+0x126>
 80056ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d6:	f043 0208 	orr.w	r2, r3, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 820a 	beq.w	8005afc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_UART_IRQHandler+0x14e>
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fb09 	bl	8005d18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <HAL_UART_IRQHandler+0x17a>
 800572a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04f      	beq.n	80057d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fa14 	bl	8005b60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005742:	2b40      	cmp	r3, #64	@ 0x40
 8005744:	d141      	bne.n	80057ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800575c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3314      	adds	r3, #20
 800576e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005772:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800577e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800578a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1d9      	bne.n	8005746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d013      	beq.n	80057c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	4a8a      	ldr	r2, [pc, #552]	@ (80059c8 <HAL_UART_IRQHandler+0x410>)
 80057a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fd fad3 	bl	8002d52 <HAL_DMA_Abort_IT>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	e00e      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9b6 	bl	8005b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	e00a      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9b2 	bl	8005b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	e006      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f9ae 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057de:	e18d      	b.n	8005afc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	bf00      	nop
    return;
 80057e2:	e18b      	b.n	8005afc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f040 8167 	bne.w	8005abc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8160 	beq.w	8005abc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80057fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8159 	beq.w	8005abc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800580a:	2300      	movs	r3, #0
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582a:	2b40      	cmp	r3, #64	@ 0x40
 800582c:	f040 80ce 	bne.w	80059cc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800583c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80a9 	beq.w	8005998 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800584a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800584e:	429a      	cmp	r2, r3
 8005850:	f080 80a2 	bcs.w	8005998 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800585a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005866:	f000 8088 	beq.w	800597a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005880:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005896:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800589a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1d9      	bne.n	800586a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e1      	bne.n	80058b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3314      	adds	r3, #20
 80058f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3314      	adds	r3, #20
 8005912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005916:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005918:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800591c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e3      	bne.n	80058f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800594a:	f023 0310 	bic.w	r3, r3, #16
 800594e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800595c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800595e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800596a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e3      	bne.n	8005938 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	4618      	mov	r0, r3
 8005976:	f7fd f97c 	bl	8002c72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005988:	b29b      	uxth	r3, r3
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	b29b      	uxth	r3, r3
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f8d9 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005996:	e0b3      	b.n	8005b00 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800599c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059a0:	429a      	cmp	r2, r3
 80059a2:	f040 80ad 	bne.w	8005b00 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059b0:	f040 80a6 	bne.w	8005b00 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f8c1 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
      return;
 80059c6:	e09b      	b.n	8005b00 <HAL_UART_IRQHandler+0x548>
 80059c8:	08005c27 	.word	0x08005c27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 808e 	beq.w	8005b04 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80059e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8089 	beq.w	8005b04 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a16:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e3      	bne.n	80059f2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	623b      	str	r3, [r7, #32]
   return(result);
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3314      	adds	r3, #20
 8005a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e3      	bne.n	8005a2a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0310 	bic.w	r3, r3, #16
 8005a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a94:	61fa      	str	r2, [r7, #28]
 8005a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e3      	bne.n	8005a70 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f847 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aba:	e023      	b.n	8005b04 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_UART_IRQHandler+0x524>
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8b7 	bl	8005c48 <UART_Transmit_IT>
    return;
 8005ada:	e014      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <HAL_UART_IRQHandler+0x54e>
 8005ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f8f7 	bl	8005ce8 <UART_EndTransmit_IT>
    return;
 8005afa:	e004      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
    return;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b04:	bf00      	nop
  }
}
 8005b06:	37e8      	adds	r7, #232	@ 0xe8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b095      	sub	sp, #84	@ 0x54
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b88:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e5      	bne.n	8005b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3314      	adds	r3, #20
 8005ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e5      	bne.n	8005b9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d119      	bne.n	8005c0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f023 0310 	bic.w	r3, r3, #16
 8005bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bf8:	61ba      	str	r2, [r7, #24]
 8005bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	613b      	str	r3, [r7, #16]
   return(result);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e5      	bne.n	8005bd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c1a:	bf00      	nop
 8005c1c:	3754      	adds	r7, #84	@ 0x54
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f7ff ff7a 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b21      	cmp	r3, #33	@ 0x21
 8005c5a:	d13e      	bne.n	8005cda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c64:	d114      	bne.n	8005c90 <UART_Transmit_IT+0x48>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d110      	bne.n	8005c90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	1c9a      	adds	r2, r3, #2
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	621a      	str	r2, [r3, #32]
 8005c8e:	e008      	b.n	8005ca2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	1c59      	adds	r1, r3, #1
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6211      	str	r1, [r2, #32]
 8005c9a:	781a      	ldrb	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10f      	bne.n	8005cd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e000      	b.n	8005cdc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cda:	2302      	movs	r3, #2
  }
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff feff 	bl	8005b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	@ 0x30
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b22      	cmp	r3, #34	@ 0x22
 8005d32:	f040 80aa 	bne.w	8005e8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d3e:	d115      	bne.n	8005d6c <UART_Receive_IT+0x54>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d111      	bne.n	8005d6c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d6a:	e024      	b.n	8005db6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7a:	d007      	beq.n	8005d8c <UART_Receive_IT+0x74>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <UART_Receive_IT+0x82>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e008      	b.n	8005dac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005daa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d15d      	bne.n	8005e86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0220 	bic.w	r2, r2, #32
 8005dd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005de8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d135      	bne.n	8005e7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	613b      	str	r3, [r7, #16]
   return(result);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f023 0310 	bic.w	r3, r3, #16
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e36:	623a      	str	r2, [r7, #32]
 8005e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	69f9      	ldr	r1, [r7, #28]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e5      	bne.n	8005e16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d10a      	bne.n	8005e6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fe67 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
 8005e7a:	e002      	b.n	8005e82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fe4f 	bl	8005b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e002      	b.n	8005e8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e8a:	2302      	movs	r3, #2
  }
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3730      	adds	r7, #48	@ 0x30
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e98:	b0c0      	sub	sp, #256	@ 0x100
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb0:	68d9      	ldr	r1, [r3, #12]
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	ea40 0301 	orr.w	r3, r0, r1
 8005ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005eec:	f021 010c 	bic.w	r1, r1, #12
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005efa:	430b      	orrs	r3, r1
 8005efc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0e:	6999      	ldr	r1, [r3, #24]
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	ea40 0301 	orr.w	r3, r0, r1
 8005f1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b8f      	ldr	r3, [pc, #572]	@ (8006160 <UART_SetConfig+0x2cc>)
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d005      	beq.n	8005f34 <UART_SetConfig+0xa0>
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b8d      	ldr	r3, [pc, #564]	@ (8006164 <UART_SetConfig+0x2d0>)
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d104      	bne.n	8005f3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f34:	f7fe ff14 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 8005f38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f3c:	e003      	b.n	8005f46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f3e:	f7fe fefb 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 8005f42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f50:	f040 810c 	bne.w	800616c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	1891      	adds	r1, r2, r2
 8005f6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f6e:	415b      	adcs	r3, r3
 8005f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f76:	4621      	mov	r1, r4
 8005f78:	eb12 0801 	adds.w	r8, r2, r1
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	eb43 0901 	adc.w	r9, r3, r1
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f96:	4690      	mov	r8, r2
 8005f98:	4699      	mov	r9, r3
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	eb18 0303 	adds.w	r3, r8, r3
 8005fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	eb49 0303 	adc.w	r3, r9, r3
 8005faa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	18db      	adds	r3, r3, r3
 8005fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fc8:	4613      	mov	r3, r2
 8005fca:	eb42 0303 	adc.w	r3, r2, r3
 8005fce:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005fd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fd8:	f7fa f94a 	bl	8000270 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4b61      	ldr	r3, [pc, #388]	@ (8006168 <UART_SetConfig+0x2d4>)
 8005fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	011c      	lsls	r4, r3, #4
 8005fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ff4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	1891      	adds	r1, r2, r2
 8006002:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006004:	415b      	adcs	r3, r3
 8006006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800600c:	4641      	mov	r1, r8
 800600e:	eb12 0a01 	adds.w	sl, r2, r1
 8006012:	4649      	mov	r1, r9
 8006014:	eb43 0b01 	adc.w	fp, r3, r1
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800602c:	4692      	mov	sl, r2
 800602e:	469b      	mov	fp, r3
 8006030:	4643      	mov	r3, r8
 8006032:	eb1a 0303 	adds.w	r3, sl, r3
 8006036:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800603a:	464b      	mov	r3, r9
 800603c:	eb4b 0303 	adc.w	r3, fp, r3
 8006040:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006050:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006058:	460b      	mov	r3, r1
 800605a:	18db      	adds	r3, r3, r3
 800605c:	643b      	str	r3, [r7, #64]	@ 0x40
 800605e:	4613      	mov	r3, r2
 8006060:	eb42 0303 	adc.w	r3, r2, r3
 8006064:	647b      	str	r3, [r7, #68]	@ 0x44
 8006066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800606a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800606e:	f7fa f8ff 	bl	8000270 <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4611      	mov	r1, r2
 8006078:	4b3b      	ldr	r3, [pc, #236]	@ (8006168 <UART_SetConfig+0x2d4>)
 800607a:	fba3 2301 	umull	r2, r3, r3, r1
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	2264      	movs	r2, #100	@ 0x64
 8006082:	fb02 f303 	mul.w	r3, r2, r3
 8006086:	1acb      	subs	r3, r1, r3
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800608e:	4b36      	ldr	r3, [pc, #216]	@ (8006168 <UART_SetConfig+0x2d4>)
 8006090:	fba3 2302 	umull	r2, r3, r3, r2
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800609c:	441c      	add	r4, r3
 800609e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	1891      	adds	r1, r2, r2
 80060b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060b8:	415b      	adcs	r3, r3
 80060ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060c0:	4641      	mov	r1, r8
 80060c2:	1851      	adds	r1, r2, r1
 80060c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80060c6:	4649      	mov	r1, r9
 80060c8:	414b      	adcs	r3, r1
 80060ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060d8:	4659      	mov	r1, fp
 80060da:	00cb      	lsls	r3, r1, #3
 80060dc:	4651      	mov	r1, sl
 80060de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e2:	4651      	mov	r1, sl
 80060e4:	00ca      	lsls	r2, r1, #3
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	4642      	mov	r2, r8
 80060ee:	189b      	adds	r3, r3, r2
 80060f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060f4:	464b      	mov	r3, r9
 80060f6:	460a      	mov	r2, r1
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800610c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006114:	460b      	mov	r3, r1
 8006116:	18db      	adds	r3, r3, r3
 8006118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800611a:	4613      	mov	r3, r2
 800611c:	eb42 0303 	adc.w	r3, r2, r3
 8006120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800612a:	f7fa f8a1 	bl	8000270 <__aeabi_uldivmod>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4b0d      	ldr	r3, [pc, #52]	@ (8006168 <UART_SetConfig+0x2d4>)
 8006134:	fba3 1302 	umull	r1, r3, r3, r2
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	2164      	movs	r1, #100	@ 0x64
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	3332      	adds	r3, #50	@ 0x32
 8006146:	4a08      	ldr	r2, [pc, #32]	@ (8006168 <UART_SetConfig+0x2d4>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f003 0207 	and.w	r2, r3, #7
 8006152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4422      	add	r2, r4
 800615a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800615c:	e106      	b.n	800636c <UART_SetConfig+0x4d8>
 800615e:	bf00      	nop
 8006160:	40011000 	.word	0x40011000
 8006164:	40011400 	.word	0x40011400
 8006168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800616c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006176:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800617a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800617e:	4642      	mov	r2, r8
 8006180:	464b      	mov	r3, r9
 8006182:	1891      	adds	r1, r2, r2
 8006184:	6239      	str	r1, [r7, #32]
 8006186:	415b      	adcs	r3, r3
 8006188:	627b      	str	r3, [r7, #36]	@ 0x24
 800618a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800618e:	4641      	mov	r1, r8
 8006190:	1854      	adds	r4, r2, r1
 8006192:	4649      	mov	r1, r9
 8006194:	eb43 0501 	adc.w	r5, r3, r1
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	00eb      	lsls	r3, r5, #3
 80061a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061a6:	00e2      	lsls	r2, r4, #3
 80061a8:	4614      	mov	r4, r2
 80061aa:	461d      	mov	r5, r3
 80061ac:	4643      	mov	r3, r8
 80061ae:	18e3      	adds	r3, r4, r3
 80061b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061b4:	464b      	mov	r3, r9
 80061b6:	eb45 0303 	adc.w	r3, r5, r3
 80061ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061da:	4629      	mov	r1, r5
 80061dc:	008b      	lsls	r3, r1, #2
 80061de:	4621      	mov	r1, r4
 80061e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e4:	4621      	mov	r1, r4
 80061e6:	008a      	lsls	r2, r1, #2
 80061e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061ec:	f7fa f840 	bl	8000270 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4b60      	ldr	r3, [pc, #384]	@ (8006378 <UART_SetConfig+0x4e4>)
 80061f6:	fba3 2302 	umull	r2, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	011c      	lsls	r4, r3, #4
 80061fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006202:	2200      	movs	r2, #0
 8006204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006208:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800620c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	61b9      	str	r1, [r7, #24]
 8006218:	415b      	adcs	r3, r3
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006220:	4641      	mov	r1, r8
 8006222:	1851      	adds	r1, r2, r1
 8006224:	6139      	str	r1, [r7, #16]
 8006226:	4649      	mov	r1, r9
 8006228:	414b      	adcs	r3, r1
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006238:	4659      	mov	r1, fp
 800623a:	00cb      	lsls	r3, r1, #3
 800623c:	4651      	mov	r1, sl
 800623e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006242:	4651      	mov	r1, sl
 8006244:	00ca      	lsls	r2, r1, #3
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	4603      	mov	r3, r0
 800624c:	4642      	mov	r2, r8
 800624e:	189b      	adds	r3, r3, r2
 8006250:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006254:	464b      	mov	r3, r9
 8006256:	460a      	mov	r2, r1
 8006258:	eb42 0303 	adc.w	r3, r2, r3
 800625c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	67bb      	str	r3, [r7, #120]	@ 0x78
 800626a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006278:	4649      	mov	r1, r9
 800627a:	008b      	lsls	r3, r1, #2
 800627c:	4641      	mov	r1, r8
 800627e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006282:	4641      	mov	r1, r8
 8006284:	008a      	lsls	r2, r1, #2
 8006286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800628a:	f7f9 fff1 	bl	8000270 <__aeabi_uldivmod>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4611      	mov	r1, r2
 8006294:	4b38      	ldr	r3, [pc, #224]	@ (8006378 <UART_SetConfig+0x4e4>)
 8006296:	fba3 2301 	umull	r2, r3, r3, r1
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	2264      	movs	r2, #100	@ 0x64
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	1acb      	subs	r3, r1, r3
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	3332      	adds	r3, #50	@ 0x32
 80062a8:	4a33      	ldr	r2, [pc, #204]	@ (8006378 <UART_SetConfig+0x4e4>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062b4:	441c      	add	r4, r3
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ba:	2200      	movs	r2, #0
 80062bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80062be:	677a      	str	r2, [r7, #116]	@ 0x74
 80062c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062c4:	4642      	mov	r2, r8
 80062c6:	464b      	mov	r3, r9
 80062c8:	1891      	adds	r1, r2, r2
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	415b      	adcs	r3, r3
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062d4:	4641      	mov	r1, r8
 80062d6:	1851      	adds	r1, r2, r1
 80062d8:	6039      	str	r1, [r7, #0]
 80062da:	4649      	mov	r1, r9
 80062dc:	414b      	adcs	r3, r1
 80062de:	607b      	str	r3, [r7, #4]
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062ec:	4659      	mov	r1, fp
 80062ee:	00cb      	lsls	r3, r1, #3
 80062f0:	4651      	mov	r1, sl
 80062f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f6:	4651      	mov	r1, sl
 80062f8:	00ca      	lsls	r2, r1, #3
 80062fa:	4610      	mov	r0, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	4603      	mov	r3, r0
 8006300:	4642      	mov	r2, r8
 8006302:	189b      	adds	r3, r3, r2
 8006304:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006306:	464b      	mov	r3, r9
 8006308:	460a      	mov	r2, r1
 800630a:	eb42 0303 	adc.w	r3, r2, r3
 800630e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	663b      	str	r3, [r7, #96]	@ 0x60
 800631a:	667a      	str	r2, [r7, #100]	@ 0x64
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006328:	4649      	mov	r1, r9
 800632a:	008b      	lsls	r3, r1, #2
 800632c:	4641      	mov	r1, r8
 800632e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006332:	4641      	mov	r1, r8
 8006334:	008a      	lsls	r2, r1, #2
 8006336:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800633a:	f7f9 ff99 	bl	8000270 <__aeabi_uldivmod>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4b0d      	ldr	r3, [pc, #52]	@ (8006378 <UART_SetConfig+0x4e4>)
 8006344:	fba3 1302 	umull	r1, r3, r3, r2
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	2164      	movs	r1, #100	@ 0x64
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	3332      	adds	r3, #50	@ 0x32
 8006356:	4a08      	ldr	r2, [pc, #32]	@ (8006378 <UART_SetConfig+0x4e4>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	f003 020f 	and.w	r2, r3, #15
 8006362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4422      	add	r2, r4
 800636a:	609a      	str	r2, [r3, #8]
}
 800636c:	bf00      	nop
 800636e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006372:	46bd      	mov	sp, r7
 8006374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006378:	51eb851f 	.word	0x51eb851f

0800637c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800638a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800638e:	2b84      	cmp	r3, #132	@ 0x84
 8006390:	d005      	beq.n	800639e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006392:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	3303      	adds	r3, #3
 800639c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800639e:	68fb      	ldr	r3, [r7, #12]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b2:	f3ef 8305 	mrs	r3, IPSR
 80063b6:	607b      	str	r3, [r7, #4]
  return(result);
 80063b8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bf14      	ite	ne
 80063be:	2301      	movne	r3, #1
 80063c0:	2300      	moveq	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063d4:	f001 f95c 	bl	8007690 <vTaskStartScheduler>
  
  return osOK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	bd80      	pop	{r7, pc}

080063de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e0:	b089      	sub	sp, #36	@ 0x24
 80063e2:	af04      	add	r7, sp, #16
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d020      	beq.n	8006432 <osThreadCreate+0x54>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01c      	beq.n	8006432 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685c      	ldr	r4, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691e      	ldr	r6, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff ffb6 	bl	800637c <makeFreeRtosPriority>
 8006410:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800641a:	9202      	str	r2, [sp, #8]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	9100      	str	r1, [sp, #0]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	4632      	mov	r2, r6
 8006424:	4629      	mov	r1, r5
 8006426:	4620      	mov	r0, r4
 8006428:	f000 ff64 	bl	80072f4 <xTaskCreateStatic>
 800642c:	4603      	mov	r3, r0
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e01c      	b.n	800646c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685c      	ldr	r4, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800643e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff ff98 	bl	800637c <makeFreeRtosPriority>
 800644c:	4602      	mov	r2, r0
 800644e:	f107 030c 	add.w	r3, r7, #12
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	9200      	str	r2, [sp, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	4632      	mov	r2, r6
 800645a:	4629      	mov	r1, r5
 800645c:	4620      	mov	r0, r4
 800645e:	f000 ffa9 	bl	80073b4 <xTaskCreate>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d001      	beq.n	800646c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	e000      	b.n	800646e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006476 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <osDelay+0x16>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	e000      	b.n	800648e <osDelay+0x18>
 800648c:	2301      	movs	r3, #1
 800648e:	4618      	mov	r0, r3
 8006490:	f001 f8c8 	bl	8007624 <vTaskDelay>
  
  return osOK;
 8006494:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	4619      	mov	r1, r3
 80064b4:	2001      	movs	r0, #1
 80064b6:	f000 fab6 	bl	8006a26 <xQueueCreateMutexStatic>
 80064ba:	4603      	mov	r3, r0
 80064bc:	e003      	b.n	80064c6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80064be:	2001      	movs	r0, #1
 80064c0:	f000 fa99 	bl	80069f6 <xQueueCreateMutex>
 80064c4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80064da:	2300      	movs	r3, #0
 80064dc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <osMutexWait+0x18>
    return osErrorParameter;
 80064e4:	2380      	movs	r3, #128	@ 0x80
 80064e6:	e03a      	b.n	800655e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d103      	bne.n	80064fc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e009      	b.n	8006510 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d006      	beq.n	8006510 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <osMutexWait+0x40>
      ticks = 1;
 800650c:	2301      	movs	r3, #1
 800650e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006510:	f7ff ff4c 	bl	80063ac <inHandlerMode>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d017      	beq.n	800654a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800651a:	f107 0308 	add.w	r3, r7, #8
 800651e:	461a      	mov	r2, r3
 8006520:	2100      	movs	r1, #0
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fd3c 	bl	8006fa0 <xQueueReceiveFromISR>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d001      	beq.n	8006532 <osMutexWait+0x62>
      return osErrorOS;
 800652e:	23ff      	movs	r3, #255	@ 0xff
 8006530:	e015      	b.n	800655e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d011      	beq.n	800655c <osMutexWait+0x8c>
 8006538:	4b0b      	ldr	r3, [pc, #44]	@ (8006568 <osMutexWait+0x98>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	e008      	b.n	800655c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fc17 	bl	8006d80 <xQueueSemaphoreTake>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d001      	beq.n	800655c <osMutexWait+0x8c>
    return osErrorOS;
 8006558:	23ff      	movs	r3, #255	@ 0xff
 800655a:	e000      	b.n	800655e <osMutexWait+0x8e>
  }
  
  return osOK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006578:	2300      	movs	r3, #0
 800657a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800657c:	f7ff ff16 	bl	80063ac <inHandlerMode>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d016      	beq.n	80065b4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006586:	f107 0308 	add.w	r3, r7, #8
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fb67 	bl	8006c60 <xQueueGiveFromISR>
 8006592:	4603      	mov	r3, r0
 8006594:	2b01      	cmp	r3, #1
 8006596:	d001      	beq.n	800659c <osMutexRelease+0x30>
      return osErrorOS;
 8006598:	23ff      	movs	r3, #255	@ 0xff
 800659a:	e017      	b.n	80065cc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d013      	beq.n	80065ca <osMutexRelease+0x5e>
 80065a2:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <osMutexRelease+0x68>)
 80065a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	e00a      	b.n	80065ca <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80065b4:	2300      	movs	r3, #0
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa4e 	bl	8006a5c <xQueueGenericSend>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d001      	beq.n	80065ca <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80065c6:	23ff      	movs	r3, #255	@ 0xff
 80065c8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f103 0208 	add.w	r2, r3, #8
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f04f 32ff 	mov.w	r2, #4294967295
 80065f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f103 0208 	add.w	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f103 0208 	add.w	r2, r3, #8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	601a      	str	r2, [r3, #0]
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d103      	bne.n	800669a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	e00c      	b.n	80066b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3308      	adds	r3, #8
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e002      	b.n	80066a8 <vListInsert+0x2e>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d2f6      	bcs.n	80066a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	601a      	str	r2, [r3, #0]
}
 80066e0:	bf00      	nop
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6892      	ldr	r2, [r2, #8]
 8006702:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6852      	ldr	r2, [r2, #4]
 800670c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	429a      	cmp	r2, r3
 8006716:	d103      	bne.n	8006720 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	1e5a      	subs	r2, r3, #1
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10b      	bne.n	800676c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	e7fd      	b.n	8006768 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800676c:	f001 fef4 	bl	8008558 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006778:	68f9      	ldr	r1, [r7, #12]
 800677a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800677c:	fb01 f303 	mul.w	r3, r1, r3
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800679c:	3b01      	subs	r3, #1
 800679e:	68f9      	ldr	r1, [r7, #12]
 80067a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80067a2:	fb01 f303 	mul.w	r3, r1, r3
 80067a6:	441a      	add	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	22ff      	movs	r2, #255	@ 0xff
 80067b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	22ff      	movs	r2, #255	@ 0xff
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d114      	bne.n	80067ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d01a      	beq.n	8006800 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3310      	adds	r3, #16
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 f9a8 	bl	8007b24 <xTaskRemoveFromEventList>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d012      	beq.n	8006800 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067da:	4b0d      	ldr	r3, [pc, #52]	@ (8006810 <xQueueGenericReset+0xd0>)
 80067dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	e009      	b.n	8006800 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3310      	adds	r3, #16
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fef1 	bl	80065d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3324      	adds	r3, #36	@ 0x24
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff feec 	bl	80065d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006800:	f001 fedc 	bl	80085bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006804:	2301      	movs	r3, #1
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	e000ed04 	.word	0xe000ed04

08006814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08e      	sub	sp, #56	@ 0x38
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800683a:	bf00      	nop
 800683c:	bf00      	nop
 800683e:	e7fd      	b.n	800683c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <xQueueGenericCreateStatic+0x56>
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <xQueueGenericCreateStatic+0x5a>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <xQueueGenericCreateStatic+0x5c>
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	623b      	str	r3, [r7, #32]
}
 8006886:	bf00      	nop
 8006888:	bf00      	nop
 800688a:	e7fd      	b.n	8006888 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d102      	bne.n	8006898 <xQueueGenericCreateStatic+0x84>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <xQueueGenericCreateStatic+0x88>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <xQueueGenericCreateStatic+0x8a>
 800689c:	2300      	movs	r3, #0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	61fb      	str	r3, [r7, #28]
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	e7fd      	b.n	80068b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80068ba:	2348      	movs	r3, #72	@ 0x48
 80068bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b48      	cmp	r3, #72	@ 0x48
 80068c2:	d00b      	beq.n	80068dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	61bb      	str	r3, [r7, #24]
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80068e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00d      	beq.n	8006904 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	4613      	mov	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f840 	bl	8006984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006906:	4618      	mov	r0, r3
 8006908:	3730      	adds	r7, #48	@ 0x30
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800690e:	b580      	push	{r7, lr}
 8006910:	b08a      	sub	sp, #40	@ 0x28
 8006912:	af02      	add	r7, sp, #8
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	4613      	mov	r3, r2
 800691a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10b      	bne.n	800693a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	613b      	str	r3, [r7, #16]
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	e7fd      	b.n	8006936 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	fb02 f303 	mul.w	r3, r2, r3
 8006942:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	3348      	adds	r3, #72	@ 0x48
 8006948:	4618      	mov	r0, r3
 800694a:	f001 ff27 	bl	800879c <pvPortMalloc>
 800694e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d011      	beq.n	800697a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	3348      	adds	r3, #72	@ 0x48
 800695e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006968:	79fa      	ldrb	r2, [r7, #7]
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f805 	bl	8006984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800697a:	69bb      	ldr	r3, [r7, #24]
	}
 800697c:	4618      	mov	r0, r3
 800697e:	3720      	adds	r7, #32
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d103      	bne.n	80069a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	e002      	b.n	80069a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069b2:	2101      	movs	r1, #1
 80069b4:	69b8      	ldr	r0, [r7, #24]
 80069b6:	f7ff fec3 	bl	8006740 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00e      	beq.n	80069ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80069e2:	2300      	movs	r3, #0
 80069e4:	2200      	movs	r2, #0
 80069e6:	2100      	movs	r1, #0
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f837 	bl	8006a5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	4603      	mov	r3, r0
 80069fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a00:	2301      	movs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	2300      	movs	r3, #0
 8006a06:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6939      	ldr	r1, [r7, #16]
 8006a0e:	6978      	ldr	r0, [r7, #20]
 8006a10:	f7ff ff7d 	bl	800690e <xQueueGenericCreate>
 8006a14:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7ff ffd3 	bl	80069c2 <prvInitialiseMutex>

		return xNewQueue;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
	}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b088      	sub	sp, #32
 8006a2a:	af02      	add	r7, sp, #8
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	6039      	str	r1, [r7, #0]
 8006a30:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a32:	2301      	movs	r3, #1
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	2300      	movs	r3, #0
 8006a38:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2200      	movs	r2, #0
 8006a42:	6939      	ldr	r1, [r7, #16]
 8006a44:	6978      	ldr	r0, [r7, #20]
 8006a46:	f7ff fee5 	bl	8006814 <xQueueGenericCreateStatic>
 8006a4a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff ffb8 	bl	80069c2 <prvInitialiseMutex>

		return xNewQueue;
 8006a52:	68fb      	ldr	r3, [r7, #12]
	}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08e      	sub	sp, #56	@ 0x38
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <xQueueGenericSend+0x34>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <xQueueGenericSend+0x42>
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <xQueueGenericSend+0x46>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e000      	b.n	8006aa4 <xQueueGenericSend+0x48>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <xQueueGenericSend+0x64>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d103      	bne.n	8006ace <xQueueGenericSend+0x72>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <xQueueGenericSend+0x76>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <xQueueGenericSend+0x78>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <xQueueGenericSend+0x94>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	623b      	str	r3, [r7, #32]
}
 8006aea:	bf00      	nop
 8006aec:	bf00      	nop
 8006aee:	e7fd      	b.n	8006aec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006af0:	f001 f9d8 	bl	8007ea4 <xTaskGetSchedulerState>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d102      	bne.n	8006b00 <xQueueGenericSend+0xa4>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <xQueueGenericSend+0xa8>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <xQueueGenericSend+0xaa>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	61fb      	str	r3, [r7, #28]
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	e7fd      	b.n	8006b1e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b22:	f001 fd19 	bl	8008558 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d302      	bcc.n	8006b38 <xQueueGenericSend+0xdc>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d129      	bne.n	8006b8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b3e:	f000 fac9 	bl	80070d4 <prvCopyDataToQueue>
 8006b42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d010      	beq.n	8006b6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4e:	3324      	adds	r3, #36	@ 0x24
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 ffe7 	bl	8007b24 <xTaskRemoveFromEventList>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d013      	beq.n	8006b84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c5c <xQueueGenericSend+0x200>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	e00a      	b.n	8006b84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b74:	4b39      	ldr	r3, [pc, #228]	@ (8006c5c <xQueueGenericSend+0x200>)
 8006b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b84:	f001 fd1a 	bl	80085bc <vPortExitCritical>
				return pdPASS;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e063      	b.n	8006c54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d103      	bne.n	8006b9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b92:	f001 fd13 	bl	80085bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	e05c      	b.n	8006c54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ba0:	f107 0314 	add.w	r3, r7, #20
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 f821 	bl	8007bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006baa:	2301      	movs	r3, #1
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bae:	f001 fd05 	bl	80085bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bb2:	f000 fdcf 	bl	8007754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bb6:	f001 fccf 	bl	8008558 <vPortEnterCritical>
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bc0:	b25b      	sxtb	r3, r3
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc6:	d103      	bne.n	8006bd0 <xQueueGenericSend+0x174>
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bd6:	b25b      	sxtb	r3, r3
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bdc:	d103      	bne.n	8006be6 <xQueueGenericSend+0x18a>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006be6:	f001 fce9 	bl	80085bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bea:	1d3a      	adds	r2, r7, #4
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 f810 	bl	8007c18 <xTaskCheckForTimeOut>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d124      	bne.n	8006c48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c00:	f000 fb60 	bl	80072c4 <prvIsQueueFull>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d018      	beq.n	8006c3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	3310      	adds	r3, #16
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4611      	mov	r1, r2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 ff60 	bl	8007ad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c1a:	f000 faeb 	bl	80071f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c1e:	f000 fda7 	bl	8007770 <xTaskResumeAll>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f47f af7c 	bne.w	8006b22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c5c <xQueueGenericSend+0x200>)
 8006c2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	e772      	b.n	8006b22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c3e:	f000 fad9 	bl	80071f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c42:	f000 fd95 	bl	8007770 <xTaskResumeAll>
 8006c46:	e76c      	b.n	8006b22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c4a:	f000 fad3 	bl	80071f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c4e:	f000 fd8f 	bl	8007770 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3738      	adds	r7, #56	@ 0x38
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08e      	sub	sp, #56	@ 0x38
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10b      	bne.n	8006c8c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	623b      	str	r3, [r7, #32]
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	e7fd      	b.n	8006c88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	61fb      	str	r3, [r7, #28]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <xQueueGiveFromISR+0x5c>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <xQueueGiveFromISR+0x60>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <xQueueGiveFromISR+0x62>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10b      	bne.n	8006cde <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	61bb      	str	r3, [r7, #24]
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	e7fd      	b.n	8006cda <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cde:	f001 fd1b 	bl	8008718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ce2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	617a      	str	r2, [r7, #20]
 8006cf8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006cfa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d22b      	bcs.n	8006d66 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d112      	bne.n	8006d50 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d016      	beq.n	8006d60 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	3324      	adds	r3, #36	@ 0x24
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fef4 	bl	8007b24 <xTaskRemoveFromEventList>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00e      	beq.n	8006d60 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e007      	b.n	8006d60 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d54:	3301      	adds	r3, #1
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	b25a      	sxtb	r2, r3
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d60:	2301      	movs	r3, #1
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d64:	e001      	b.n	8006d6a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3738      	adds	r7, #56	@ 0x38
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08e      	sub	sp, #56	@ 0x38
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d92:	2300      	movs	r3, #0
 8006d94:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	623b      	str	r3, [r7, #32]
}
 8006dae:	bf00      	nop
 8006db0:	bf00      	nop
 8006db2:	e7fd      	b.n	8006db0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00b      	beq.n	8006dd4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	61fb      	str	r3, [r7, #28]
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dd4:	f001 f866 	bl	8007ea4 <xTaskGetSchedulerState>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d102      	bne.n	8006de4 <xQueueSemaphoreTake+0x64>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <xQueueSemaphoreTake+0x68>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <xQueueSemaphoreTake+0x6a>
 8006de8:	2300      	movs	r3, #0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10b      	bne.n	8006e06 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	61bb      	str	r3, [r7, #24]
}
 8006e00:	bf00      	nop
 8006e02:	bf00      	nop
 8006e04:	e7fd      	b.n	8006e02 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e06:	f001 fba7 	bl	8008558 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d024      	beq.n	8006e60 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e18:	1e5a      	subs	r2, r3, #1
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d104      	bne.n	8006e30 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e26:	f001 f9e9 	bl	80081fc <pvTaskIncrementMutexHeldCount>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00f      	beq.n	8006e58 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3a:	3310      	adds	r3, #16
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fe71 	bl	8007b24 <xTaskRemoveFromEventList>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e48:	4b54      	ldr	r3, [pc, #336]	@ (8006f9c <xQueueSemaphoreTake+0x21c>)
 8006e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e58:	f001 fbb0 	bl	80085bc <vPortExitCritical>
				return pdPASS;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e098      	b.n	8006f92 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d112      	bne.n	8006e8c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	617b      	str	r3, [r7, #20]
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	e7fd      	b.n	8006e80 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e84:	f001 fb9a 	bl	80085bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e082      	b.n	8006f92 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e92:	f107 030c 	add.w	r3, r7, #12
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fea8 	bl	8007bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ea0:	f001 fb8c 	bl	80085bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ea4:	f000 fc56 	bl	8007754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ea8:	f001 fb56 	bl	8008558 <vPortEnterCritical>
 8006eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eb2:	b25b      	sxtb	r3, r3
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d103      	bne.n	8006ec2 <xQueueSemaphoreTake+0x142>
 8006eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ec8:	b25b      	sxtb	r3, r3
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d103      	bne.n	8006ed8 <xQueueSemaphoreTake+0x158>
 8006ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ed8:	f001 fb70 	bl	80085bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006edc:	463a      	mov	r2, r7
 8006ede:	f107 030c 	add.w	r3, r7, #12
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fe97 	bl	8007c18 <xTaskCheckForTimeOut>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d132      	bne.n	8006f56 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ef2:	f000 f9d1 	bl	8007298 <prvIsQueueEmpty>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d026      	beq.n	8006f4a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006f04:	f001 fb28 	bl	8008558 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 ffe7 	bl	8007ee0 <xTaskPriorityInherit>
 8006f12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006f14:	f001 fb52 	bl	80085bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1a:	3324      	adds	r3, #36	@ 0x24
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fdd9 	bl	8007ad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f28:	f000 f964 	bl	80071f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f2c:	f000 fc20 	bl	8007770 <xTaskResumeAll>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f47f af67 	bne.w	8006e06 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006f38:	4b18      	ldr	r3, [pc, #96]	@ (8006f9c <xQueueSemaphoreTake+0x21c>)
 8006f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	e75d      	b.n	8006e06 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f4c:	f000 f952 	bl	80071f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f50:	f000 fc0e 	bl	8007770 <xTaskResumeAll>
 8006f54:	e757      	b.n	8006e06 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f58:	f000 f94c 	bl	80071f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f5c:	f000 fc08 	bl	8007770 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f62:	f000 f999 	bl	8007298 <prvIsQueueEmpty>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f43f af4c 	beq.w	8006e06 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00d      	beq.n	8006f90 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006f74:	f001 faf0 	bl	8008558 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f7a:	f000 f893 	bl	80070a4 <prvGetDisinheritPriorityAfterTimeout>
 8006f7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f86:	4618      	mov	r0, r3
 8006f88:	f001 f8a8 	bl	80080dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f8c:	f001 fb16 	bl	80085bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3738      	adds	r7, #56	@ 0x38
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08e      	sub	sp, #56	@ 0x38
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10b      	bne.n	8006fce <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	623b      	str	r3, [r7, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	e7fd      	b.n	8006fca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d103      	bne.n	8006fdc <xQueueReceiveFromISR+0x3c>
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <xQueueReceiveFromISR+0x40>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <xQueueReceiveFromISR+0x42>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10b      	bne.n	8006ffe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	61fb      	str	r3, [r7, #28]
}
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
 8006ffc:	e7fd      	b.n	8006ffa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ffe:	f001 fb8b 	bl	8008718 <vPortValidateInterruptPriority>
	__asm volatile
 8007002:	f3ef 8211 	mrs	r2, BASEPRI
 8007006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	61ba      	str	r2, [r7, #24]
 8007018:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800701a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800701c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d02f      	beq.n	800708a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007038:	f000 f8b6 	bl	80071a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	1e5a      	subs	r2, r3, #1
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007044:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d112      	bne.n	8007074 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d016      	beq.n	8007084 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	3310      	adds	r3, #16
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fd62 	bl	8007b24 <xTaskRemoveFromEventList>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00e      	beq.n	8007084 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00b      	beq.n	8007084 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e007      	b.n	8007084 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007078:	3301      	adds	r3, #1
 800707a:	b2db      	uxtb	r3, r3
 800707c:	b25a      	sxtb	r2, r3
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007084:	2301      	movs	r3, #1
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
 8007088:	e001      	b.n	800708e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800708a:	2300      	movs	r3, #0
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
 800708e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007090:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f383 8811 	msr	BASEPRI, r3
}
 8007098:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800709a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800709c:	4618      	mov	r0, r3
 800709e:	3738      	adds	r7, #56	@ 0x38
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1c3 0307 	rsb	r3, r3, #7
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e001      	b.n	80070c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070c6:	68fb      	ldr	r3, [r7, #12]
	}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10d      	bne.n	800710e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d14d      	bne.n	8007196 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 ff64 	bl	8007fcc <xTaskPriorityDisinherit>
 8007104:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	609a      	str	r2, [r3, #8]
 800710c:	e043      	b.n	8007196 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d119      	bne.n	8007148 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6858      	ldr	r0, [r3, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711c:	461a      	mov	r2, r3
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	f001 ff39 	bl	8008f96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712c:	441a      	add	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	429a      	cmp	r2, r3
 800713c:	d32b      	bcc.n	8007196 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	605a      	str	r2, [r3, #4]
 8007146:	e026      	b.n	8007196 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68d8      	ldr	r0, [r3, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007150:	461a      	mov	r2, r3
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	f001 ff1f 	bl	8008f96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	425b      	negs	r3, r3
 8007162:	441a      	add	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d207      	bcs.n	8007184 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717c:	425b      	negs	r3, r3
 800717e:	441a      	add	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d105      	bne.n	8007196 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	3b01      	subs	r3, #1
 8007194:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800719e:	697b      	ldr	r3, [r7, #20]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d018      	beq.n	80071ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c2:	441a      	add	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d303      	bcc.n	80071dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68d9      	ldr	r1, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e4:	461a      	mov	r2, r3
 80071e6:	6838      	ldr	r0, [r7, #0]
 80071e8:	f001 fed5 	bl	8008f96 <memcpy>
	}
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071fc:	f001 f9ac 	bl	8008558 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007206:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007208:	e011      	b.n	800722e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	d012      	beq.n	8007238 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3324      	adds	r3, #36	@ 0x24
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fc84 	bl	8007b24 <xTaskRemoveFromEventList>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007222:	f000 fd5d 	bl	8007ce0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	3b01      	subs	r3, #1
 800722a:	b2db      	uxtb	r3, r3
 800722c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800722e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dce9      	bgt.n	800720a <prvUnlockQueue+0x16>
 8007236:	e000      	b.n	800723a <prvUnlockQueue+0x46>
					break;
 8007238:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	22ff      	movs	r2, #255	@ 0xff
 800723e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007242:	f001 f9bb 	bl	80085bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007246:	f001 f987 	bl	8008558 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007250:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007252:	e011      	b.n	8007278 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d012      	beq.n	8007282 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3310      	adds	r3, #16
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fc5f 	bl	8007b24 <xTaskRemoveFromEventList>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800726c:	f000 fd38 	bl	8007ce0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	3b01      	subs	r3, #1
 8007274:	b2db      	uxtb	r3, r3
 8007276:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800727c:	2b00      	cmp	r3, #0
 800727e:	dce9      	bgt.n	8007254 <prvUnlockQueue+0x60>
 8007280:	e000      	b.n	8007284 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007282:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	22ff      	movs	r2, #255	@ 0xff
 8007288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800728c:	f001 f996 	bl	80085bc <vPortExitCritical>
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072a0:	f001 f95a 	bl	8008558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e001      	b.n	80072b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072b6:	f001 f981 	bl	80085bc <vPortExitCritical>

	return xReturn;
 80072ba:	68fb      	ldr	r3, [r7, #12]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072cc:	f001 f944 	bl	8008558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d8:	429a      	cmp	r2, r3
 80072da:	d102      	bne.n	80072e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e001      	b.n	80072e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072e6:	f001 f969 	bl	80085bc <vPortExitCritical>

	return xReturn;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08e      	sub	sp, #56	@ 0x38
 80072f8:	af04      	add	r7, sp, #16
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10b      	bne.n	8007320 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	623b      	str	r3, [r7, #32]
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	e7fd      	b.n	800731c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10b      	bne.n	800733e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	61fb      	str	r3, [r7, #28]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800733e:	2354      	movs	r3, #84	@ 0x54
 8007340:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b54      	cmp	r3, #84	@ 0x54
 8007346:	d00b      	beq.n	8007360 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	61bb      	str	r3, [r7, #24]
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007360:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01e      	beq.n	80073a6 <xTaskCreateStatic+0xb2>
 8007368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01b      	beq.n	80073a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800736e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007370:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007376:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737a:	2202      	movs	r2, #2
 800737c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007380:	2300      	movs	r3, #0
 8007382:	9303      	str	r3, [sp, #12]
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	9302      	str	r3, [sp, #8]
 8007388:	f107 0314 	add.w	r3, r7, #20
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f850 	bl	800743e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800739e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073a0:	f000 f8d6 	bl	8007550 <prvAddNewTaskToReadyList>
 80073a4:	e001      	b.n	80073aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073aa:	697b      	ldr	r3, [r7, #20]
	}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3728      	adds	r7, #40	@ 0x28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08c      	sub	sp, #48	@ 0x30
 80073b8:	af04      	add	r7, sp, #16
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	4613      	mov	r3, r2
 80073c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 f9e7 	bl	800879c <pvPortMalloc>
 80073ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00e      	beq.n	80073f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073d6:	2054      	movs	r0, #84	@ 0x54
 80073d8:	f001 f9e0 	bl	800879c <pvPortMalloc>
 80073dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80073ea:	e005      	b.n	80073f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073ec:	6978      	ldr	r0, [r7, #20]
 80073ee:	f001 faa3 	bl	8008938 <vPortFree>
 80073f2:	e001      	b.n	80073f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d017      	beq.n	800742e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007406:	88fa      	ldrh	r2, [r7, #6]
 8007408:	2300      	movs	r3, #0
 800740a:	9303      	str	r3, [sp, #12]
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	9302      	str	r3, [sp, #8]
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	9301      	str	r3, [sp, #4]
 8007414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 f80e 	bl	800743e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007422:	69f8      	ldr	r0, [r7, #28]
 8007424:	f000 f894 	bl	8007550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007428:	2301      	movs	r3, #1
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	e002      	b.n	8007434 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800742e:	f04f 33ff 	mov.w	r3, #4294967295
 8007432:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007434:	69bb      	ldr	r3, [r7, #24]
	}
 8007436:	4618      	mov	r0, r3
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b088      	sub	sp, #32
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800744c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007456:	3b01      	subs	r3, #1
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	f023 0307 	bic.w	r3, r3, #7
 8007464:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	617b      	str	r3, [r7, #20]
}
 8007482:	bf00      	nop
 8007484:	bf00      	nop
 8007486:	e7fd      	b.n	8007484 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d01f      	beq.n	80074ce <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800748e:	2300      	movs	r3, #0
 8007490:	61fb      	str	r3, [r7, #28]
 8007492:	e012      	b.n	80074ba <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	7819      	ldrb	r1, [r3, #0]
 800749c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	4413      	add	r3, r2
 80074a2:	3334      	adds	r3, #52	@ 0x34
 80074a4:	460a      	mov	r2, r1
 80074a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	4413      	add	r3, r2
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d006      	beq.n	80074c2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	3301      	adds	r3, #1
 80074b8:	61fb      	str	r3, [r7, #28]
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2b0f      	cmp	r3, #15
 80074be:	d9e9      	bls.n	8007494 <prvInitialiseNewTask+0x56>
 80074c0:	e000      	b.n	80074c4 <prvInitialiseNewTask+0x86>
			{
				break;
 80074c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074cc:	e003      	b.n	80074d6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	2b06      	cmp	r3, #6
 80074da:	d901      	bls.n	80074e0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074dc:	2306      	movs	r3, #6
 80074de:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ea:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	2200      	movs	r2, #0
 80074f0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	3304      	adds	r3, #4
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff f88e 	bl	8006618 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	3318      	adds	r3, #24
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff f889 	bl	8006618 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800750a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	f1c3 0207 	rsb	r2, r3, #7
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800751a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800751c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751e:	2200      	movs	r2, #0
 8007520:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	68f9      	ldr	r1, [r7, #12]
 800752e:	69b8      	ldr	r0, [r7, #24]
 8007530:	f000 fede 	bl	80082f0 <pxPortInitialiseStack>
 8007534:	4602      	mov	r2, r0
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800753a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007546:	bf00      	nop
 8007548:	3720      	adds	r7, #32
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007558:	f000 fffe 	bl	8008558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800755c:	4b2a      	ldr	r3, [pc, #168]	@ (8007608 <prvAddNewTaskToReadyList+0xb8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3301      	adds	r3, #1
 8007562:	4a29      	ldr	r2, [pc, #164]	@ (8007608 <prvAddNewTaskToReadyList+0xb8>)
 8007564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007566:	4b29      	ldr	r3, [pc, #164]	@ (800760c <prvAddNewTaskToReadyList+0xbc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d109      	bne.n	8007582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800756e:	4a27      	ldr	r2, [pc, #156]	@ (800760c <prvAddNewTaskToReadyList+0xbc>)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007574:	4b24      	ldr	r3, [pc, #144]	@ (8007608 <prvAddNewTaskToReadyList+0xb8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d110      	bne.n	800759e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800757c:	f000 fbd4 	bl	8007d28 <prvInitialiseTaskLists>
 8007580:	e00d      	b.n	800759e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007582:	4b23      	ldr	r3, [pc, #140]	@ (8007610 <prvAddNewTaskToReadyList+0xc0>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800758a:	4b20      	ldr	r3, [pc, #128]	@ (800760c <prvAddNewTaskToReadyList+0xbc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	429a      	cmp	r2, r3
 8007596:	d802      	bhi.n	800759e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007598:	4a1c      	ldr	r2, [pc, #112]	@ (800760c <prvAddNewTaskToReadyList+0xbc>)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800759e:	4b1d      	ldr	r3, [pc, #116]	@ (8007614 <prvAddNewTaskToReadyList+0xc4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007614 <prvAddNewTaskToReadyList+0xc4>)
 80075a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	2201      	movs	r2, #1
 80075ae:	409a      	lsls	r2, r3
 80075b0:	4b19      	ldr	r3, [pc, #100]	@ (8007618 <prvAddNewTaskToReadyList+0xc8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	4a18      	ldr	r2, [pc, #96]	@ (8007618 <prvAddNewTaskToReadyList+0xc8>)
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a15      	ldr	r2, [pc, #84]	@ (800761c <prvAddNewTaskToReadyList+0xcc>)
 80075c8:	441a      	add	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7ff f82e 	bl	8006632 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075d6:	f000 fff1 	bl	80085bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075da:	4b0d      	ldr	r3, [pc, #52]	@ (8007610 <prvAddNewTaskToReadyList+0xc0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00e      	beq.n	8007600 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075e2:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <prvAddNewTaskToReadyList+0xbc>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d207      	bcs.n	8007600 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007620 <prvAddNewTaskToReadyList+0xd0>)
 80075f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	2000059c 	.word	0x2000059c
 800760c:	2000049c 	.word	0x2000049c
 8007610:	200005a8 	.word	0x200005a8
 8007614:	200005b8 	.word	0x200005b8
 8007618:	200005a4 	.word	0x200005a4
 800761c:	200004a0 	.word	0x200004a0
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800762c:	2300      	movs	r3, #0
 800762e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d018      	beq.n	8007668 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007636:	4b14      	ldr	r3, [pc, #80]	@ (8007688 <vTaskDelay+0x64>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <vTaskDelay+0x32>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	60bb      	str	r3, [r7, #8]
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	e7fd      	b.n	8007652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007656:	f000 f87d 	bl	8007754 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800765a:	2100      	movs	r1, #0
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fde1 	bl	8008224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007662:	f000 f885 	bl	8007770 <xTaskResumeAll>
 8007666:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d107      	bne.n	800767e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800766e:	4b07      	ldr	r3, [pc, #28]	@ (800768c <vTaskDelay+0x68>)
 8007670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	200005c4 	.word	0x200005c4
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08a      	sub	sp, #40	@ 0x28
 8007694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007696:	2300      	movs	r3, #0
 8007698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800769e:	463a      	mov	r2, r7
 80076a0:	1d39      	adds	r1, r7, #4
 80076a2:	f107 0308 	add.w	r3, r7, #8
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7f9 fb42 	bl	8000d30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	9202      	str	r2, [sp, #8]
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	2300      	movs	r3, #0
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	2300      	movs	r3, #0
 80076bc:	460a      	mov	r2, r1
 80076be:	491f      	ldr	r1, [pc, #124]	@ (800773c <vTaskStartScheduler+0xac>)
 80076c0:	481f      	ldr	r0, [pc, #124]	@ (8007740 <vTaskStartScheduler+0xb0>)
 80076c2:	f7ff fe17 	bl	80072f4 <xTaskCreateStatic>
 80076c6:	4603      	mov	r3, r0
 80076c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007744 <vTaskStartScheduler+0xb4>)
 80076ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007744 <vTaskStartScheduler+0xb4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076d4:	2301      	movs	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	e001      	b.n	80076de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d116      	bne.n	8007712 <vTaskStartScheduler+0x82>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	613b      	str	r3, [r7, #16]
}
 80076f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076f8:	4b13      	ldr	r3, [pc, #76]	@ (8007748 <vTaskStartScheduler+0xb8>)
 80076fa:	f04f 32ff 	mov.w	r2, #4294967295
 80076fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007700:	4b12      	ldr	r3, [pc, #72]	@ (800774c <vTaskStartScheduler+0xbc>)
 8007702:	2201      	movs	r2, #1
 8007704:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007706:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <vTaskStartScheduler+0xc0>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800770c:	f000 fe80 	bl	8008410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007710:	e00f      	b.n	8007732 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d10b      	bne.n	8007732 <vTaskStartScheduler+0xa2>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	60fb      	str	r3, [r7, #12]
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	e7fd      	b.n	800772e <vTaskStartScheduler+0x9e>
}
 8007732:	bf00      	nop
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	0800a250 	.word	0x0800a250
 8007740:	08007cf9 	.word	0x08007cf9
 8007744:	200005c0 	.word	0x200005c0
 8007748:	200005bc 	.word	0x200005bc
 800774c:	200005a8 	.word	0x200005a8
 8007750:	200005a0 	.word	0x200005a0

08007754 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007758:	4b04      	ldr	r3, [pc, #16]	@ (800776c <vTaskSuspendAll+0x18>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3301      	adds	r3, #1
 800775e:	4a03      	ldr	r2, [pc, #12]	@ (800776c <vTaskSuspendAll+0x18>)
 8007760:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007762:	bf00      	nop
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	200005c4 	.word	0x200005c4

08007770 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800777a:	2300      	movs	r3, #0
 800777c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800777e:	4b42      	ldr	r3, [pc, #264]	@ (8007888 <xTaskResumeAll+0x118>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10b      	bne.n	800779e <xTaskResumeAll+0x2e>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	603b      	str	r3, [r7, #0]
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	e7fd      	b.n	800779a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800779e:	f000 fedb 	bl	8008558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077a2:	4b39      	ldr	r3, [pc, #228]	@ (8007888 <xTaskResumeAll+0x118>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	4a37      	ldr	r2, [pc, #220]	@ (8007888 <xTaskResumeAll+0x118>)
 80077aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ac:	4b36      	ldr	r3, [pc, #216]	@ (8007888 <xTaskResumeAll+0x118>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d161      	bne.n	8007878 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077b4:	4b35      	ldr	r3, [pc, #212]	@ (800788c <xTaskResumeAll+0x11c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d05d      	beq.n	8007878 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077bc:	e02e      	b.n	800781c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077be:	4b34      	ldr	r3, [pc, #208]	@ (8007890 <xTaskResumeAll+0x120>)
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3318      	adds	r3, #24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe ff8e 	bl	80066ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe ff89 	bl	80066ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077de:	2201      	movs	r2, #1
 80077e0:	409a      	lsls	r2, r3
 80077e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007894 <xTaskResumeAll+0x124>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007894 <xTaskResumeAll+0x124>)
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4a27      	ldr	r2, [pc, #156]	@ (8007898 <xTaskResumeAll+0x128>)
 80077fa:	441a      	add	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3304      	adds	r3, #4
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f7fe ff15 	bl	8006632 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780c:	4b23      	ldr	r3, [pc, #140]	@ (800789c <xTaskResumeAll+0x12c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007816:	4b22      	ldr	r3, [pc, #136]	@ (80078a0 <xTaskResumeAll+0x130>)
 8007818:	2201      	movs	r2, #1
 800781a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800781c:	4b1c      	ldr	r3, [pc, #112]	@ (8007890 <xTaskResumeAll+0x120>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1cc      	bne.n	80077be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800782a:	f000 fb1b 	bl	8007e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800782e:	4b1d      	ldr	r3, [pc, #116]	@ (80078a4 <xTaskResumeAll+0x134>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d010      	beq.n	800785c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800783a:	f000 f837 	bl	80078ac <xTaskIncrementTick>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007844:	4b16      	ldr	r3, [pc, #88]	@ (80078a0 <xTaskResumeAll+0x130>)
 8007846:	2201      	movs	r2, #1
 8007848:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3b01      	subs	r3, #1
 800784e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f1      	bne.n	800783a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007856:	4b13      	ldr	r3, [pc, #76]	@ (80078a4 <xTaskResumeAll+0x134>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800785c:	4b10      	ldr	r3, [pc, #64]	@ (80078a0 <xTaskResumeAll+0x130>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007864:	2301      	movs	r3, #1
 8007866:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007868:	4b0f      	ldr	r3, [pc, #60]	@ (80078a8 <xTaskResumeAll+0x138>)
 800786a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007878:	f000 fea0 	bl	80085bc <vPortExitCritical>

	return xAlreadyYielded;
 800787c:	68bb      	ldr	r3, [r7, #8]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200005c4 	.word	0x200005c4
 800788c:	2000059c 	.word	0x2000059c
 8007890:	2000055c 	.word	0x2000055c
 8007894:	200005a4 	.word	0x200005a4
 8007898:	200004a0 	.word	0x200004a0
 800789c:	2000049c 	.word	0x2000049c
 80078a0:	200005b0 	.word	0x200005b0
 80078a4:	200005ac 	.word	0x200005ac
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b6:	4b4f      	ldr	r3, [pc, #316]	@ (80079f4 <xTaskIncrementTick+0x148>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f040 808f 	bne.w	80079de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078c0:	4b4d      	ldr	r3, [pc, #308]	@ (80079f8 <xTaskIncrementTick+0x14c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3301      	adds	r3, #1
 80078c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078c8:	4a4b      	ldr	r2, [pc, #300]	@ (80079f8 <xTaskIncrementTick+0x14c>)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d121      	bne.n	8007918 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078d4:	4b49      	ldr	r3, [pc, #292]	@ (80079fc <xTaskIncrementTick+0x150>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	603b      	str	r3, [r7, #0]
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <xTaskIncrementTick+0x46>
 80078f6:	4b41      	ldr	r3, [pc, #260]	@ (80079fc <xTaskIncrementTick+0x150>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	4b40      	ldr	r3, [pc, #256]	@ (8007a00 <xTaskIncrementTick+0x154>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a3e      	ldr	r2, [pc, #248]	@ (80079fc <xTaskIncrementTick+0x150>)
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	4a3e      	ldr	r2, [pc, #248]	@ (8007a00 <xTaskIncrementTick+0x154>)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a04 <xTaskIncrementTick+0x158>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3301      	adds	r3, #1
 8007910:	4a3c      	ldr	r2, [pc, #240]	@ (8007a04 <xTaskIncrementTick+0x158>)
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	f000 faa6 	bl	8007e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007918:	4b3b      	ldr	r3, [pc, #236]	@ (8007a08 <xTaskIncrementTick+0x15c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	429a      	cmp	r2, r3
 8007920:	d348      	bcc.n	80079b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007922:	4b36      	ldr	r3, [pc, #216]	@ (80079fc <xTaskIncrementTick+0x150>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d104      	bne.n	8007936 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800792c:	4b36      	ldr	r3, [pc, #216]	@ (8007a08 <xTaskIncrementTick+0x15c>)
 800792e:	f04f 32ff 	mov.w	r2, #4294967295
 8007932:	601a      	str	r2, [r3, #0]
					break;
 8007934:	e03e      	b.n	80079b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007936:	4b31      	ldr	r3, [pc, #196]	@ (80079fc <xTaskIncrementTick+0x150>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	429a      	cmp	r2, r3
 800794c:	d203      	bcs.n	8007956 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800794e:	4a2e      	ldr	r2, [pc, #184]	@ (8007a08 <xTaskIncrementTick+0x15c>)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007954:	e02e      	b.n	80079b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	3304      	adds	r3, #4
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe fec6 	bl	80066ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	3318      	adds	r3, #24
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe febd 	bl	80066ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007976:	2201      	movs	r2, #1
 8007978:	409a      	lsls	r2, r3
 800797a:	4b24      	ldr	r3, [pc, #144]	@ (8007a0c <xTaskIncrementTick+0x160>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4313      	orrs	r3, r2
 8007980:	4a22      	ldr	r2, [pc, #136]	@ (8007a0c <xTaskIncrementTick+0x160>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4a1f      	ldr	r2, [pc, #124]	@ (8007a10 <xTaskIncrementTick+0x164>)
 8007992:	441a      	add	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f7fe fe49 	bl	8006632 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a14 <xTaskIncrementTick+0x168>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d3b9      	bcc.n	8007922 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80079ae:	2301      	movs	r3, #1
 80079b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079b2:	e7b6      	b.n	8007922 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079b4:	4b17      	ldr	r3, [pc, #92]	@ (8007a14 <xTaskIncrementTick+0x168>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ba:	4915      	ldr	r1, [pc, #84]	@ (8007a10 <xTaskIncrementTick+0x164>)
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d901      	bls.n	80079d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079d0:	4b11      	ldr	r3, [pc, #68]	@ (8007a18 <xTaskIncrementTick+0x16c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d007      	beq.n	80079e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80079d8:	2301      	movs	r3, #1
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	e004      	b.n	80079e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079de:	4b0f      	ldr	r3, [pc, #60]	@ (8007a1c <xTaskIncrementTick+0x170>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	4a0d      	ldr	r2, [pc, #52]	@ (8007a1c <xTaskIncrementTick+0x170>)
 80079e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079e8:	697b      	ldr	r3, [r7, #20]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	200005c4 	.word	0x200005c4
 80079f8:	200005a0 	.word	0x200005a0
 80079fc:	20000554 	.word	0x20000554
 8007a00:	20000558 	.word	0x20000558
 8007a04:	200005b4 	.word	0x200005b4
 8007a08:	200005bc 	.word	0x200005bc
 8007a0c:	200005a4 	.word	0x200005a4
 8007a10:	200004a0 	.word	0x200004a0
 8007a14:	2000049c 	.word	0x2000049c
 8007a18:	200005b0 	.word	0x200005b0
 8007a1c:	200005ac 	.word	0x200005ac

08007a20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a26:	4b27      	ldr	r3, [pc, #156]	@ (8007ac4 <vTaskSwitchContext+0xa4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a2e:	4b26      	ldr	r3, [pc, #152]	@ (8007ac8 <vTaskSwitchContext+0xa8>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a34:	e040      	b.n	8007ab8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007a36:	4b24      	ldr	r3, [pc, #144]	@ (8007ac8 <vTaskSwitchContext+0xa8>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3c:	4b23      	ldr	r3, [pc, #140]	@ (8007acc <vTaskSwitchContext+0xac>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	fab3 f383 	clz	r3, r3
 8007a48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a4a:	7afb      	ldrb	r3, [r7, #11]
 8007a4c:	f1c3 031f 	rsb	r3, r3, #31
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	491f      	ldr	r1, [pc, #124]	@ (8007ad0 <vTaskSwitchContext+0xb0>)
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	440b      	add	r3, r1
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10b      	bne.n	8007a7e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	607b      	str	r3, [r7, #4]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <vTaskSwitchContext+0x5a>
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4a11      	ldr	r2, [pc, #68]	@ (8007ad0 <vTaskSwitchContext+0xb0>)
 8007a8a:	4413      	add	r3, r2
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	605a      	str	r2, [r3, #4]
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d104      	bne.n	8007aae <vTaskSwitchContext+0x8e>
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	605a      	str	r2, [r3, #4]
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	4a07      	ldr	r2, [pc, #28]	@ (8007ad4 <vTaskSwitchContext+0xb4>)
 8007ab6:	6013      	str	r3, [r2, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	200005c4 	.word	0x200005c4
 8007ac8:	200005b0 	.word	0x200005b0
 8007acc:	200005a4 	.word	0x200005a4
 8007ad0:	200004a0 	.word	0x200004a0
 8007ad4:	2000049c 	.word	0x2000049c

08007ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10b      	bne.n	8007b00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	60fb      	str	r3, [r7, #12]
}
 8007afa:	bf00      	nop
 8007afc:	bf00      	nop
 8007afe:	e7fd      	b.n	8007afc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b00:	4b07      	ldr	r3, [pc, #28]	@ (8007b20 <vTaskPlaceOnEventList+0x48>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3318      	adds	r3, #24
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7fe fdb6 	bl	800667a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b0e:	2101      	movs	r1, #1
 8007b10:	6838      	ldr	r0, [r7, #0]
 8007b12:	f000 fb87 	bl	8008224 <prvAddCurrentTaskToDelayedList>
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	2000049c 	.word	0x2000049c

08007b24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10b      	bne.n	8007b52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	60fb      	str	r3, [r7, #12]
}
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	e7fd      	b.n	8007b4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3318      	adds	r3, #24
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fdc8 	bl	80066ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bd4 <xTaskRemoveFromEventList+0xb0>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d11c      	bne.n	8007b9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	3304      	adds	r3, #4
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fe fdbf 	bl	80066ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b72:	2201      	movs	r2, #1
 8007b74:	409a      	lsls	r2, r3
 8007b76:	4b18      	ldr	r3, [pc, #96]	@ (8007bd8 <xTaskRemoveFromEventList+0xb4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	4a16      	ldr	r2, [pc, #88]	@ (8007bd8 <xTaskRemoveFromEventList+0xb4>)
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4a13      	ldr	r2, [pc, #76]	@ (8007bdc <xTaskRemoveFromEventList+0xb8>)
 8007b8e:	441a      	add	r2, r3
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f7fe fd4b 	bl	8006632 <vListInsertEnd>
 8007b9c:	e005      	b.n	8007baa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	480e      	ldr	r0, [pc, #56]	@ (8007be0 <xTaskRemoveFromEventList+0xbc>)
 8007ba6:	f7fe fd44 	bl	8006632 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bae:	4b0d      	ldr	r3, [pc, #52]	@ (8007be4 <xTaskRemoveFromEventList+0xc0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d905      	bls.n	8007bc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007be8 <xTaskRemoveFromEventList+0xc4>)
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	e001      	b.n	8007bc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bc8:	697b      	ldr	r3, [r7, #20]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	200005c4 	.word	0x200005c4
 8007bd8:	200005a4 	.word	0x200005a4
 8007bdc:	200004a0 	.word	0x200004a0
 8007be0:	2000055c 	.word	0x2000055c
 8007be4:	2000049c 	.word	0x2000049c
 8007be8:	200005b0 	.word	0x200005b0

08007bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bf4:	4b06      	ldr	r3, [pc, #24]	@ (8007c10 <vTaskInternalSetTimeOutState+0x24>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bfc:	4b05      	ldr	r3, [pc, #20]	@ (8007c14 <vTaskInternalSetTimeOutState+0x28>)
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	605a      	str	r2, [r3, #4]
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	200005b4 	.word	0x200005b4
 8007c14:	200005a0 	.word	0x200005a0

08007c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10b      	bne.n	8007c40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	613b      	str	r3, [r7, #16]
}
 8007c3a:	bf00      	nop
 8007c3c:	bf00      	nop
 8007c3e:	e7fd      	b.n	8007c3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10b      	bne.n	8007c5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60fb      	str	r3, [r7, #12]
}
 8007c58:	bf00      	nop
 8007c5a:	bf00      	nop
 8007c5c:	e7fd      	b.n	8007c5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c5e:	f000 fc7b 	bl	8008558 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c62:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd8 <xTaskCheckForTimeOut+0xc0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7a:	d102      	bne.n	8007c82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	e023      	b.n	8007cca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	4b15      	ldr	r3, [pc, #84]	@ (8007cdc <xTaskCheckForTimeOut+0xc4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d007      	beq.n	8007c9e <xTaskCheckForTimeOut+0x86>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d302      	bcc.n	8007c9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	61fb      	str	r3, [r7, #28]
 8007c9c:	e015      	b.n	8007cca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d20b      	bcs.n	8007cc0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	1ad2      	subs	r2, r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7ff ff99 	bl	8007bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	61fb      	str	r3, [r7, #28]
 8007cbe:	e004      	b.n	8007cca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cca:	f000 fc77 	bl	80085bc <vPortExitCritical>

	return xReturn;
 8007cce:	69fb      	ldr	r3, [r7, #28]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	200005a0 	.word	0x200005a0
 8007cdc:	200005b4 	.word	0x200005b4

08007ce0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ce4:	4b03      	ldr	r3, [pc, #12]	@ (8007cf4 <vTaskMissedYield+0x14>)
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
}
 8007cea:	bf00      	nop
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	200005b0 	.word	0x200005b0

08007cf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d00:	f000 f852 	bl	8007da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d04:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <prvIdleTask+0x28>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d9f9      	bls.n	8007d00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d0c:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <prvIdleTask+0x2c>)
 8007d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d1c:	e7f0      	b.n	8007d00 <prvIdleTask+0x8>
 8007d1e:	bf00      	nop
 8007d20:	200004a0 	.word	0x200004a0
 8007d24:	e000ed04 	.word	0xe000ed04

08007d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d2e:	2300      	movs	r3, #0
 8007d30:	607b      	str	r3, [r7, #4]
 8007d32:	e00c      	b.n	8007d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4a12      	ldr	r2, [pc, #72]	@ (8007d88 <prvInitialiseTaskLists+0x60>)
 8007d40:	4413      	add	r3, r2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fc48 	bl	80065d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	607b      	str	r3, [r7, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b06      	cmp	r3, #6
 8007d52:	d9ef      	bls.n	8007d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d54:	480d      	ldr	r0, [pc, #52]	@ (8007d8c <prvInitialiseTaskLists+0x64>)
 8007d56:	f7fe fc3f 	bl	80065d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d5a:	480d      	ldr	r0, [pc, #52]	@ (8007d90 <prvInitialiseTaskLists+0x68>)
 8007d5c:	f7fe fc3c 	bl	80065d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d60:	480c      	ldr	r0, [pc, #48]	@ (8007d94 <prvInitialiseTaskLists+0x6c>)
 8007d62:	f7fe fc39 	bl	80065d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d66:	480c      	ldr	r0, [pc, #48]	@ (8007d98 <prvInitialiseTaskLists+0x70>)
 8007d68:	f7fe fc36 	bl	80065d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d6c:	480b      	ldr	r0, [pc, #44]	@ (8007d9c <prvInitialiseTaskLists+0x74>)
 8007d6e:	f7fe fc33 	bl	80065d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d72:	4b0b      	ldr	r3, [pc, #44]	@ (8007da0 <prvInitialiseTaskLists+0x78>)
 8007d74:	4a05      	ldr	r2, [pc, #20]	@ (8007d8c <prvInitialiseTaskLists+0x64>)
 8007d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d78:	4b0a      	ldr	r3, [pc, #40]	@ (8007da4 <prvInitialiseTaskLists+0x7c>)
 8007d7a:	4a05      	ldr	r2, [pc, #20]	@ (8007d90 <prvInitialiseTaskLists+0x68>)
 8007d7c:	601a      	str	r2, [r3, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	200004a0 	.word	0x200004a0
 8007d8c:	2000052c 	.word	0x2000052c
 8007d90:	20000540 	.word	0x20000540
 8007d94:	2000055c 	.word	0x2000055c
 8007d98:	20000570 	.word	0x20000570
 8007d9c:	20000588 	.word	0x20000588
 8007da0:	20000554 	.word	0x20000554
 8007da4:	20000558 	.word	0x20000558

08007da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dae:	e019      	b.n	8007de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007db0:	f000 fbd2 	bl	8008558 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db4:	4b10      	ldr	r3, [pc, #64]	@ (8007df8 <prvCheckTasksWaitingTermination+0x50>)
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe fc93 	bl	80066ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dfc <prvCheckTasksWaitingTermination+0x54>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8007dfc <prvCheckTasksWaitingTermination+0x54>)
 8007dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e00 <prvCheckTasksWaitingTermination+0x58>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8007e00 <prvCheckTasksWaitingTermination+0x58>)
 8007dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dda:	f000 fbef 	bl	80085bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f810 	bl	8007e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007de4:	4b06      	ldr	r3, [pc, #24]	@ (8007e00 <prvCheckTasksWaitingTermination+0x58>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e1      	bne.n	8007db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000570 	.word	0x20000570
 8007dfc:	2000059c 	.word	0x2000059c
 8007e00:	20000584 	.word	0x20000584

08007e04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d108      	bne.n	8007e28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fd8c 	bl	8008938 <vPortFree>
				vPortFree( pxTCB );
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fd89 	bl	8008938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e26:	e019      	b.n	8007e5c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d103      	bne.n	8007e3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fd80 	bl	8008938 <vPortFree>
	}
 8007e38:	e010      	b.n	8007e5c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d00b      	beq.n	8007e5c <prvDeleteTCB+0x58>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	60fb      	str	r3, [r7, #12]
}
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
 8007e5a:	e7fd      	b.n	8007e58 <prvDeleteTCB+0x54>
	}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e9c <prvResetNextTaskUnblockTime+0x38>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e74:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8007e76:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e7c:	e008      	b.n	8007e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7e:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <prvResetNextTaskUnblockTime+0x38>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4a04      	ldr	r2, [pc, #16]	@ (8007ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8007e8e:	6013      	str	r3, [r2, #0]
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20000554 	.word	0x20000554
 8007ea0:	200005bc 	.word	0x200005bc

08007ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed8 <xTaskGetSchedulerState+0x34>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	607b      	str	r3, [r7, #4]
 8007eb6:	e008      	b.n	8007eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb8:	4b08      	ldr	r3, [pc, #32]	@ (8007edc <xTaskGetSchedulerState+0x38>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	607b      	str	r3, [r7, #4]
 8007ec4:	e001      	b.n	8007eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007eca:	687b      	ldr	r3, [r7, #4]
	}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	200005a8 	.word	0x200005a8
 8007edc:	200005c4 	.word	0x200005c4

08007ee0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d05e      	beq.n	8007fb4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007efa:	4b31      	ldr	r3, [pc, #196]	@ (8007fc0 <xTaskPriorityInherit+0xe0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d24e      	bcs.n	8007fa2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	db06      	blt.n	8007f1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8007fc0 <xTaskPriorityInherit+0xe0>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f12:	f1c3 0207 	rsb	r2, r3, #7
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6959      	ldr	r1, [r3, #20]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4a26      	ldr	r2, [pc, #152]	@ (8007fc4 <xTaskPriorityInherit+0xe4>)
 8007f2c:	4413      	add	r3, r2
 8007f2e:	4299      	cmp	r1, r3
 8007f30:	d12f      	bne.n	8007f92 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	3304      	adds	r3, #4
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fbd8 	bl	80066ec <uxListRemove>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	2201      	movs	r2, #1
 8007f48:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4c:	43da      	mvns	r2, r3
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc8 <xTaskPriorityInherit+0xe8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4013      	ands	r3, r2
 8007f54:	4a1c      	ldr	r2, [pc, #112]	@ (8007fc8 <xTaskPriorityInherit+0xe8>)
 8007f56:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f58:	4b19      	ldr	r3, [pc, #100]	@ (8007fc0 <xTaskPriorityInherit+0xe0>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f66:	2201      	movs	r2, #1
 8007f68:	409a      	lsls	r2, r3
 8007f6a:	4b17      	ldr	r3, [pc, #92]	@ (8007fc8 <xTaskPriorityInherit+0xe8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	4a15      	ldr	r2, [pc, #84]	@ (8007fc8 <xTaskPriorityInherit+0xe8>)
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4a10      	ldr	r2, [pc, #64]	@ (8007fc4 <xTaskPriorityInherit+0xe4>)
 8007f82:	441a      	add	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	3304      	adds	r3, #4
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	f7fe fb51 	bl	8006632 <vListInsertEnd>
 8007f90:	e004      	b.n	8007f9c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f92:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <xTaskPriorityInherit+0xe0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e008      	b.n	8007fb4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fa6:	4b06      	ldr	r3, [pc, #24]	@ (8007fc0 <xTaskPriorityInherit+0xe0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d201      	bcs.n	8007fb4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
	}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	2000049c 	.word	0x2000049c
 8007fc4:	200004a0 	.word	0x200004a0
 8007fc8:	200005a4 	.word	0x200005a4

08007fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d070      	beq.n	80080c4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80080d0 <xTaskPriorityDisinherit+0x104>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d00b      	beq.n	8008004 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	60fb      	str	r3, [r7, #12]
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	e7fd      	b.n	8008000 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10b      	bne.n	8008024 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	60bb      	str	r3, [r7, #8]
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008028:	1e5a      	subs	r2, r3, #1
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008036:	429a      	cmp	r2, r3
 8008038:	d044      	beq.n	80080c4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803e:	2b00      	cmp	r3, #0
 8008040:	d140      	bne.n	80080c4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3304      	adds	r3, #4
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fb50 	bl	80066ec <uxListRemove>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d115      	bne.n	800807e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008056:	491f      	ldr	r1, [pc, #124]	@ (80080d4 <xTaskPriorityDisinherit+0x108>)
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	440b      	add	r3, r1
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <xTaskPriorityDisinherit+0xb2>
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	2201      	movs	r2, #1
 800806e:	fa02 f303 	lsl.w	r3, r2, r3
 8008072:	43da      	mvns	r2, r3
 8008074:	4b18      	ldr	r3, [pc, #96]	@ (80080d8 <xTaskPriorityDisinherit+0x10c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4013      	ands	r3, r2
 800807a:	4a17      	ldr	r2, [pc, #92]	@ (80080d8 <xTaskPriorityDisinherit+0x10c>)
 800807c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808a:	f1c3 0207 	rsb	r2, r3, #7
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008096:	2201      	movs	r2, #1
 8008098:	409a      	lsls	r2, r3
 800809a:	4b0f      	ldr	r3, [pc, #60]	@ (80080d8 <xTaskPriorityDisinherit+0x10c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4313      	orrs	r3, r2
 80080a0:	4a0d      	ldr	r2, [pc, #52]	@ (80080d8 <xTaskPriorityDisinherit+0x10c>)
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4a08      	ldr	r2, [pc, #32]	@ (80080d4 <xTaskPriorityDisinherit+0x108>)
 80080b2:	441a      	add	r2, r3
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	3304      	adds	r3, #4
 80080b8:	4619      	mov	r1, r3
 80080ba:	4610      	mov	r0, r2
 80080bc:	f7fe fab9 	bl	8006632 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080c4:	697b      	ldr	r3, [r7, #20]
	}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	2000049c 	.word	0x2000049c
 80080d4:	200004a0 	.word	0x200004a0
 80080d8:	200005a4 	.word	0x200005a4

080080dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080ea:	2301      	movs	r3, #1
 80080ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d079      	beq.n	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10b      	bne.n	8008114 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	60fb      	str	r3, [r7, #12]
}
 800810e:	bf00      	nop
 8008110:	bf00      	nop
 8008112:	e7fd      	b.n	8008110 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d902      	bls.n	8008124 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	e002      	b.n	800812a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008128:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812e:	69fa      	ldr	r2, [r7, #28]
 8008130:	429a      	cmp	r2, r3
 8008132:	d059      	beq.n	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	429a      	cmp	r2, r3
 800813c:	d154      	bne.n	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800813e:	4b2c      	ldr	r3, [pc, #176]	@ (80081f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	429a      	cmp	r2, r3
 8008146:	d10b      	bne.n	8008160 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	60bb      	str	r3, [r7, #8]
}
 800815a:	bf00      	nop
 800815c:	bf00      	nop
 800815e:	e7fd      	b.n	800815c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008164:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	db04      	blt.n	800817e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f1c3 0207 	rsb	r2, r3, #7
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	6959      	ldr	r1, [r3, #20]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4a19      	ldr	r2, [pc, #100]	@ (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800818e:	4413      	add	r3, r2
 8008190:	4299      	cmp	r1, r3
 8008192:	d129      	bne.n	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	3304      	adds	r3, #4
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe faa7 	bl	80066ec <uxListRemove>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a8:	2201      	movs	r2, #1
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	43da      	mvns	r2, r3
 80081b0:	4b11      	ldr	r3, [pc, #68]	@ (80081f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4013      	ands	r3, r2
 80081b6:	4a10      	ldr	r2, [pc, #64]	@ (80081f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	2201      	movs	r2, #1
 80081c0:	409a      	lsls	r2, r3
 80081c2:	4b0d      	ldr	r3, [pc, #52]	@ (80081f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	4a0b      	ldr	r2, [pc, #44]	@ (80081f8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4a06      	ldr	r2, [pc, #24]	@ (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081da:	441a      	add	r2, r3
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fe fa25 	bl	8006632 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081e8:	bf00      	nop
 80081ea:	3720      	adds	r7, #32
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	2000049c 	.word	0x2000049c
 80081f4:	200004a0 	.word	0x200004a0
 80081f8:	200005a4 	.word	0x200005a4

080081fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008200:	4b07      	ldr	r3, [pc, #28]	@ (8008220 <pvTaskIncrementMutexHeldCount+0x24>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008208:	4b05      	ldr	r3, [pc, #20]	@ (8008220 <pvTaskIncrementMutexHeldCount+0x24>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800820e:	3201      	adds	r2, #1
 8008210:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008212:	4b03      	ldr	r3, [pc, #12]	@ (8008220 <pvTaskIncrementMutexHeldCount+0x24>)
 8008214:	681b      	ldr	r3, [r3, #0]
	}
 8008216:	4618      	mov	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	2000049c 	.word	0x2000049c

08008224 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800822e:	4b29      	ldr	r3, [pc, #164]	@ (80082d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008234:	4b28      	ldr	r3, [pc, #160]	@ (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3304      	adds	r3, #4
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fa56 	bl	80066ec <uxListRemove>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008246:	4b24      	ldr	r3, [pc, #144]	@ (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	2201      	movs	r2, #1
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	43da      	mvns	r2, r3
 8008254:	4b21      	ldr	r3, [pc, #132]	@ (80082dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4013      	ands	r3, r2
 800825a:	4a20      	ldr	r2, [pc, #128]	@ (80082dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800825c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008264:	d10a      	bne.n	800827c <prvAddCurrentTaskToDelayedList+0x58>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800826c:	4b1a      	ldr	r3, [pc, #104]	@ (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3304      	adds	r3, #4
 8008272:	4619      	mov	r1, r3
 8008274:	481a      	ldr	r0, [pc, #104]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008276:	f7fe f9dc 	bl	8006632 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800827a:	e026      	b.n	80082ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4413      	add	r3, r2
 8008282:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008284:	4b14      	ldr	r3, [pc, #80]	@ (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	429a      	cmp	r2, r3
 8008292:	d209      	bcs.n	80082a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008294:	4b13      	ldr	r3, [pc, #76]	@ (80082e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	4b0f      	ldr	r3, [pc, #60]	@ (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3304      	adds	r3, #4
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f7fe f9ea 	bl	800667a <vListInsert>
}
 80082a6:	e010      	b.n	80082ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a8:	4b0f      	ldr	r3, [pc, #60]	@ (80082e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4b0a      	ldr	r3, [pc, #40]	@ (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7fe f9e0 	bl	800667a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082ba:	4b0c      	ldr	r3, [pc, #48]	@ (80082ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d202      	bcs.n	80082ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082c4:	4a09      	ldr	r2, [pc, #36]	@ (80082ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6013      	str	r3, [r2, #0]
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	200005a0 	.word	0x200005a0
 80082d8:	2000049c 	.word	0x2000049c
 80082dc:	200005a4 	.word	0x200005a4
 80082e0:	20000588 	.word	0x20000588
 80082e4:	20000558 	.word	0x20000558
 80082e8:	20000554 	.word	0x20000554
 80082ec:	200005bc 	.word	0x200005bc

080082f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3b04      	subs	r3, #4
 8008300:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3b04      	subs	r3, #4
 800830e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f023 0201 	bic.w	r2, r3, #1
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3b04      	subs	r3, #4
 800831e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008320:	4a0c      	ldr	r2, [pc, #48]	@ (8008354 <pxPortInitialiseStack+0x64>)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3b14      	subs	r3, #20
 800832a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3b04      	subs	r3, #4
 8008336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f06f 0202 	mvn.w	r2, #2
 800833e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3b20      	subs	r3, #32
 8008344:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008346:	68fb      	ldr	r3, [r7, #12]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	08008359 	.word	0x08008359

08008358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008362:	4b13      	ldr	r3, [pc, #76]	@ (80083b0 <prvTaskExitError+0x58>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836a:	d00b      	beq.n	8008384 <prvTaskExitError+0x2c>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	60fb      	str	r3, [r7, #12]
}
 800837e:	bf00      	nop
 8008380:	bf00      	nop
 8008382:	e7fd      	b.n	8008380 <prvTaskExitError+0x28>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60bb      	str	r3, [r7, #8]
}
 8008396:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008398:	bf00      	nop
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0fc      	beq.n	800839a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000098 	.word	0x20000098
	...

080083c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083c0:	4b07      	ldr	r3, [pc, #28]	@ (80083e0 <pxCurrentTCBConst2>)
 80083c2:	6819      	ldr	r1, [r3, #0]
 80083c4:	6808      	ldr	r0, [r1, #0]
 80083c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ca:	f380 8809 	msr	PSP, r0
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f04f 0000 	mov.w	r0, #0
 80083d6:	f380 8811 	msr	BASEPRI, r0
 80083da:	4770      	bx	lr
 80083dc:	f3af 8000 	nop.w

080083e0 <pxCurrentTCBConst2>:
 80083e0:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop

080083e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083e8:	4808      	ldr	r0, [pc, #32]	@ (800840c <prvPortStartFirstTask+0x24>)
 80083ea:	6800      	ldr	r0, [r0, #0]
 80083ec:	6800      	ldr	r0, [r0, #0]
 80083ee:	f380 8808 	msr	MSP, r0
 80083f2:	f04f 0000 	mov.w	r0, #0
 80083f6:	f380 8814 	msr	CONTROL, r0
 80083fa:	b662      	cpsie	i
 80083fc:	b661      	cpsie	f
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	df00      	svc	0
 8008408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800840a:	bf00      	nop
 800840c:	e000ed08 	.word	0xe000ed08

08008410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008416:	4b47      	ldr	r3, [pc, #284]	@ (8008534 <xPortStartScheduler+0x124>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a47      	ldr	r2, [pc, #284]	@ (8008538 <xPortStartScheduler+0x128>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d10b      	bne.n	8008438 <xPortStartScheduler+0x28>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	bf00      	nop
 8008436:	e7fd      	b.n	8008434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008438:	4b3e      	ldr	r3, [pc, #248]	@ (8008534 <xPortStartScheduler+0x124>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a3f      	ldr	r2, [pc, #252]	@ (800853c <xPortStartScheduler+0x12c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d10b      	bne.n	800845a <xPortStartScheduler+0x4a>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	613b      	str	r3, [r7, #16]
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800845a:	4b39      	ldr	r3, [pc, #228]	@ (8008540 <xPortStartScheduler+0x130>)
 800845c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	22ff      	movs	r2, #255	@ 0xff
 800846a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800847c:	b2da      	uxtb	r2, r3
 800847e:	4b31      	ldr	r3, [pc, #196]	@ (8008544 <xPortStartScheduler+0x134>)
 8008480:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008482:	4b31      	ldr	r3, [pc, #196]	@ (8008548 <xPortStartScheduler+0x138>)
 8008484:	2207      	movs	r2, #7
 8008486:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008488:	e009      	b.n	800849e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800848a:	4b2f      	ldr	r3, [pc, #188]	@ (8008548 <xPortStartScheduler+0x138>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3b01      	subs	r3, #1
 8008490:	4a2d      	ldr	r2, [pc, #180]	@ (8008548 <xPortStartScheduler+0x138>)
 8008492:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	b2db      	uxtb	r3, r3
 800849c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084a6:	2b80      	cmp	r3, #128	@ 0x80
 80084a8:	d0ef      	beq.n	800848a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084aa:	4b27      	ldr	r3, [pc, #156]	@ (8008548 <xPortStartScheduler+0x138>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f1c3 0307 	rsb	r3, r3, #7
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d00b      	beq.n	80084ce <xPortStartScheduler+0xbe>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	60bb      	str	r3, [r7, #8]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008548 <xPortStartScheduler+0x138>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	021b      	lsls	r3, r3, #8
 80084d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008548 <xPortStartScheduler+0x138>)
 80084d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008548 <xPortStartScheduler+0x138>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80084e0:	4a19      	ldr	r2, [pc, #100]	@ (8008548 <xPortStartScheduler+0x138>)
 80084e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084ec:	4b17      	ldr	r3, [pc, #92]	@ (800854c <xPortStartScheduler+0x13c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a16      	ldr	r2, [pc, #88]	@ (800854c <xPortStartScheduler+0x13c>)
 80084f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80084f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084f8:	4b14      	ldr	r3, [pc, #80]	@ (800854c <xPortStartScheduler+0x13c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a13      	ldr	r2, [pc, #76]	@ (800854c <xPortStartScheduler+0x13c>)
 80084fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008504:	f000 f8da 	bl	80086bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008508:	4b11      	ldr	r3, [pc, #68]	@ (8008550 <xPortStartScheduler+0x140>)
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800850e:	f000 f8f9 	bl	8008704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008512:	4b10      	ldr	r3, [pc, #64]	@ (8008554 <xPortStartScheduler+0x144>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a0f      	ldr	r2, [pc, #60]	@ (8008554 <xPortStartScheduler+0x144>)
 8008518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800851c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800851e:	f7ff ff63 	bl	80083e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008522:	f7ff fa7d 	bl	8007a20 <vTaskSwitchContext>
	prvTaskExitError();
 8008526:	f7ff ff17 	bl	8008358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	e000ed00 	.word	0xe000ed00
 8008538:	410fc271 	.word	0x410fc271
 800853c:	410fc270 	.word	0x410fc270
 8008540:	e000e400 	.word	0xe000e400
 8008544:	200005c8 	.word	0x200005c8
 8008548:	200005cc 	.word	0x200005cc
 800854c:	e000ed20 	.word	0xe000ed20
 8008550:	20000098 	.word	0x20000098
 8008554:	e000ef34 	.word	0xe000ef34

08008558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	607b      	str	r3, [r7, #4]
}
 8008570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008572:	4b10      	ldr	r3, [pc, #64]	@ (80085b4 <vPortEnterCritical+0x5c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3301      	adds	r3, #1
 8008578:	4a0e      	ldr	r2, [pc, #56]	@ (80085b4 <vPortEnterCritical+0x5c>)
 800857a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800857c:	4b0d      	ldr	r3, [pc, #52]	@ (80085b4 <vPortEnterCritical+0x5c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d110      	bne.n	80085a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008584:	4b0c      	ldr	r3, [pc, #48]	@ (80085b8 <vPortEnterCritical+0x60>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	603b      	str	r3, [r7, #0]
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	e7fd      	b.n	80085a2 <vPortEnterCritical+0x4a>
	}
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20000098 	.word	0x20000098
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085c2:	4b12      	ldr	r3, [pc, #72]	@ (800860c <vPortExitCritical+0x50>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10b      	bne.n	80085e2 <vPortExitCritical+0x26>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	607b      	str	r3, [r7, #4]
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	e7fd      	b.n	80085de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085e2:	4b0a      	ldr	r3, [pc, #40]	@ (800860c <vPortExitCritical+0x50>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	4a08      	ldr	r2, [pc, #32]	@ (800860c <vPortExitCritical+0x50>)
 80085ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085ec:	4b07      	ldr	r3, [pc, #28]	@ (800860c <vPortExitCritical+0x50>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d105      	bne.n	8008600 <vPortExitCritical+0x44>
 80085f4:	2300      	movs	r3, #0
 80085f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	f383 8811 	msr	BASEPRI, r3
}
 80085fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	20000098 	.word	0x20000098

08008610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008610:	f3ef 8009 	mrs	r0, PSP
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	4b15      	ldr	r3, [pc, #84]	@ (8008670 <pxCurrentTCBConst>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	f01e 0f10 	tst.w	lr, #16
 8008620:	bf08      	it	eq
 8008622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	6010      	str	r0, [r2, #0]
 800862c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008634:	f380 8811 	msr	BASEPRI, r0
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f7ff f9ee 	bl	8007a20 <vTaskSwitchContext>
 8008644:	f04f 0000 	mov.w	r0, #0
 8008648:	f380 8811 	msr	BASEPRI, r0
 800864c:	bc09      	pop	{r0, r3}
 800864e:	6819      	ldr	r1, [r3, #0]
 8008650:	6808      	ldr	r0, [r1, #0]
 8008652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008656:	f01e 0f10 	tst.w	lr, #16
 800865a:	bf08      	it	eq
 800865c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008660:	f380 8809 	msr	PSP, r0
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w

08008670 <pxCurrentTCBConst>:
 8008670:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop

08008678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	607b      	str	r3, [r7, #4]
}
 8008690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008692:	f7ff f90b 	bl	80078ac <xTaskIncrementTick>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800869c:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <xPortSysTickHandler+0x40>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f383 8811 	msr	BASEPRI, r3
}
 80086ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	e000ed04 	.word	0xe000ed04

080086bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086c0:	4b0b      	ldr	r3, [pc, #44]	@ (80086f0 <vPortSetupTimerInterrupt+0x34>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086c6:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <vPortSetupTimerInterrupt+0x38>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086cc:	4b0a      	ldr	r3, [pc, #40]	@ (80086f8 <vPortSetupTimerInterrupt+0x3c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a0a      	ldr	r2, [pc, #40]	@ (80086fc <vPortSetupTimerInterrupt+0x40>)
 80086d2:	fba2 2303 	umull	r2, r3, r2, r3
 80086d6:	099b      	lsrs	r3, r3, #6
 80086d8:	4a09      	ldr	r2, [pc, #36]	@ (8008700 <vPortSetupTimerInterrupt+0x44>)
 80086da:	3b01      	subs	r3, #1
 80086dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086de:	4b04      	ldr	r3, [pc, #16]	@ (80086f0 <vPortSetupTimerInterrupt+0x34>)
 80086e0:	2207      	movs	r2, #7
 80086e2:	601a      	str	r2, [r3, #0]
}
 80086e4:	bf00      	nop
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	e000e010 	.word	0xe000e010
 80086f4:	e000e018 	.word	0xe000e018
 80086f8:	2000006c 	.word	0x2000006c
 80086fc:	10624dd3 	.word	0x10624dd3
 8008700:	e000e014 	.word	0xe000e014

08008704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008714 <vPortEnableVFP+0x10>
 8008708:	6801      	ldr	r1, [r0, #0]
 800870a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800870e:	6001      	str	r1, [r0, #0]
 8008710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008712:	bf00      	nop
 8008714:	e000ed88 	.word	0xe000ed88

08008718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800871e:	f3ef 8305 	mrs	r3, IPSR
 8008722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b0f      	cmp	r3, #15
 8008728:	d915      	bls.n	8008756 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800872a:	4a18      	ldr	r2, [pc, #96]	@ (800878c <vPortValidateInterruptPriority+0x74>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008734:	4b16      	ldr	r3, [pc, #88]	@ (8008790 <vPortValidateInterruptPriority+0x78>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	7afa      	ldrb	r2, [r7, #11]
 800873a:	429a      	cmp	r2, r3
 800873c:	d20b      	bcs.n	8008756 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	607b      	str	r3, [r7, #4]
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008756:	4b0f      	ldr	r3, [pc, #60]	@ (8008794 <vPortValidateInterruptPriority+0x7c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800875e:	4b0e      	ldr	r3, [pc, #56]	@ (8008798 <vPortValidateInterruptPriority+0x80>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d90b      	bls.n	800877e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	603b      	str	r3, [r7, #0]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <vPortValidateInterruptPriority+0x62>
	}
 800877e:	bf00      	nop
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	e000e3f0 	.word	0xe000e3f0
 8008790:	200005c8 	.word	0x200005c8
 8008794:	e000ed0c 	.word	0xe000ed0c
 8008798:	200005cc 	.word	0x200005cc

0800879c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	@ 0x28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087a8:	f7fe ffd4 	bl	8007754 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008920 <pvPortMalloc+0x184>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087b4:	f000 f924 	bl	8008a00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008924 <pvPortMalloc+0x188>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4013      	ands	r3, r2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f040 8095 	bne.w	80088f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01e      	beq.n	800880a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80087cc:	2208      	movs	r2, #8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4413      	add	r3, r2
 80087d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d015      	beq.n	800880a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f023 0307 	bic.w	r3, r3, #7
 80087e4:	3308      	adds	r3, #8
 80087e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00b      	beq.n	800880a <pvPortMalloc+0x6e>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	617b      	str	r3, [r7, #20]
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop
 8008808:	e7fd      	b.n	8008806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d06f      	beq.n	80088f0 <pvPortMalloc+0x154>
 8008810:	4b45      	ldr	r3, [pc, #276]	@ (8008928 <pvPortMalloc+0x18c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	429a      	cmp	r2, r3
 8008818:	d86a      	bhi.n	80088f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800881a:	4b44      	ldr	r3, [pc, #272]	@ (800892c <pvPortMalloc+0x190>)
 800881c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800881e:	4b43      	ldr	r3, [pc, #268]	@ (800892c <pvPortMalloc+0x190>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008824:	e004      	b.n	8008830 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	429a      	cmp	r2, r3
 8008838:	d903      	bls.n	8008842 <pvPortMalloc+0xa6>
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f1      	bne.n	8008826 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008842:	4b37      	ldr	r3, [pc, #220]	@ (8008920 <pvPortMalloc+0x184>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008848:	429a      	cmp	r2, r3
 800884a:	d051      	beq.n	80088f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2208      	movs	r2, #8
 8008852:	4413      	add	r3, r2
 8008854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	685a      	ldr	r2, [r3, #4]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	1ad2      	subs	r2, r2, r3
 8008866:	2308      	movs	r3, #8
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	429a      	cmp	r2, r3
 800886c:	d920      	bls.n	80088b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800886e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4413      	add	r3, r2
 8008874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	f003 0307 	and.w	r3, r3, #7
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <pvPortMalloc+0xfc>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	613b      	str	r3, [r7, #16]
}
 8008892:	bf00      	nop
 8008894:	bf00      	nop
 8008896:	e7fd      	b.n	8008894 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	1ad2      	subs	r2, r2, r3
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088aa:	69b8      	ldr	r0, [r7, #24]
 80088ac:	f000 f90a 	bl	8008ac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008928 <pvPortMalloc+0x18c>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008928 <pvPortMalloc+0x18c>)
 80088bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088be:	4b1a      	ldr	r3, [pc, #104]	@ (8008928 <pvPortMalloc+0x18c>)
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008930 <pvPortMalloc+0x194>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d203      	bcs.n	80088d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088ca:	4b17      	ldr	r3, [pc, #92]	@ (8008928 <pvPortMalloc+0x18c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a18      	ldr	r2, [pc, #96]	@ (8008930 <pvPortMalloc+0x194>)
 80088d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	4b13      	ldr	r3, [pc, #76]	@ (8008924 <pvPortMalloc+0x188>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	431a      	orrs	r2, r3
 80088dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80088e6:	4b13      	ldr	r3, [pc, #76]	@ (8008934 <pvPortMalloc+0x198>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	4a11      	ldr	r2, [pc, #68]	@ (8008934 <pvPortMalloc+0x198>)
 80088ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088f0:	f7fe ff3e 	bl	8007770 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00b      	beq.n	8008916 <pvPortMalloc+0x17a>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	60fb      	str	r3, [r7, #12]
}
 8008910:	bf00      	nop
 8008912:	bf00      	nop
 8008914:	e7fd      	b.n	8008912 <pvPortMalloc+0x176>
	return pvReturn;
 8008916:	69fb      	ldr	r3, [r7, #28]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3728      	adds	r7, #40	@ 0x28
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	200041d8 	.word	0x200041d8
 8008924:	200041ec 	.word	0x200041ec
 8008928:	200041dc 	.word	0x200041dc
 800892c:	200041d0 	.word	0x200041d0
 8008930:	200041e0 	.word	0x200041e0
 8008934:	200041e4 	.word	0x200041e4

08008938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d04f      	beq.n	80089ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800894a:	2308      	movs	r3, #8
 800894c:	425b      	negs	r3, r3
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4413      	add	r3, r2
 8008952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	4b25      	ldr	r3, [pc, #148]	@ (80089f4 <vPortFree+0xbc>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4013      	ands	r3, r2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <vPortFree+0x46>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	60fb      	str	r3, [r7, #12]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00b      	beq.n	800899e <vPortFree+0x66>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	60bb      	str	r3, [r7, #8]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	4b14      	ldr	r3, [pc, #80]	@ (80089f4 <vPortFree+0xbc>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4013      	ands	r3, r2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01e      	beq.n	80089ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d11a      	bne.n	80089ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	4b0e      	ldr	r3, [pc, #56]	@ (80089f4 <vPortFree+0xbc>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	43db      	mvns	r3, r3
 80089be:	401a      	ands	r2, r3
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089c4:	f7fe fec6 	bl	8007754 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	4b0a      	ldr	r3, [pc, #40]	@ (80089f8 <vPortFree+0xc0>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4413      	add	r3, r2
 80089d2:	4a09      	ldr	r2, [pc, #36]	@ (80089f8 <vPortFree+0xc0>)
 80089d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089d6:	6938      	ldr	r0, [r7, #16]
 80089d8:	f000 f874 	bl	8008ac4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80089dc:	4b07      	ldr	r3, [pc, #28]	@ (80089fc <vPortFree+0xc4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3301      	adds	r3, #1
 80089e2:	4a06      	ldr	r2, [pc, #24]	@ (80089fc <vPortFree+0xc4>)
 80089e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80089e6:	f7fe fec3 	bl	8007770 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089ea:	bf00      	nop
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	200041ec 	.word	0x200041ec
 80089f8:	200041dc 	.word	0x200041dc
 80089fc:	200041e8 	.word	0x200041e8

08008a00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008a0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a0c:	4b27      	ldr	r3, [pc, #156]	@ (8008aac <prvHeapInit+0xac>)
 8008a0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00c      	beq.n	8008a34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3307      	adds	r3, #7
 8008a1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0307 	bic.w	r3, r3, #7
 8008a26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8008aac <prvHeapInit+0xac>)
 8008a30:	4413      	add	r3, r2
 8008a32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a38:	4a1d      	ldr	r2, [pc, #116]	@ (8008ab0 <prvHeapInit+0xb0>)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ab0 <prvHeapInit+0xb0>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	4413      	add	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a4c:	2208      	movs	r2, #8
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	1a9b      	subs	r3, r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f023 0307 	bic.w	r3, r3, #7
 8008a5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4a15      	ldr	r2, [pc, #84]	@ (8008ab4 <prvHeapInit+0xb4>)
 8008a60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a62:	4b14      	ldr	r3, [pc, #80]	@ (8008ab4 <prvHeapInit+0xb4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2200      	movs	r2, #0
 8008a68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a6a:	4b12      	ldr	r3, [pc, #72]	@ (8008ab4 <prvHeapInit+0xb4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	1ad2      	subs	r2, r2, r3
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a80:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab4 <prvHeapInit+0xb4>)
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8008ab8 <prvHeapInit+0xb8>)
 8008a8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	4a09      	ldr	r2, [pc, #36]	@ (8008abc <prvHeapInit+0xbc>)
 8008a96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a98:	4b09      	ldr	r3, [pc, #36]	@ (8008ac0 <prvHeapInit+0xc0>)
 8008a9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a9e:	601a      	str	r2, [r3, #0]
}
 8008aa0:	bf00      	nop
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	200005d0 	.word	0x200005d0
 8008ab0:	200041d0 	.word	0x200041d0
 8008ab4:	200041d8 	.word	0x200041d8
 8008ab8:	200041e0 	.word	0x200041e0
 8008abc:	200041dc 	.word	0x200041dc
 8008ac0:	200041ec 	.word	0x200041ec

08008ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008acc:	4b28      	ldr	r3, [pc, #160]	@ (8008b70 <prvInsertBlockIntoFreeList+0xac>)
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	e002      	b.n	8008ad8 <prvInsertBlockIntoFreeList+0x14>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d8f7      	bhi.n	8008ad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	4413      	add	r3, r2
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d108      	bne.n	8008b06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	441a      	add	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	441a      	add	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d118      	bne.n	8008b4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	4b15      	ldr	r3, [pc, #84]	@ (8008b74 <prvInsertBlockIntoFreeList+0xb0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d00d      	beq.n	8008b42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	441a      	add	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	e008      	b.n	8008b54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b42:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <prvInsertBlockIntoFreeList+0xb0>)
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	e003      	b.n	8008b54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d002      	beq.n	8008b62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b62:	bf00      	nop
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	200041d0 	.word	0x200041d0
 8008b74:	200041d8 	.word	0x200041d8

08008b78 <srand>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4b10      	ldr	r3, [pc, #64]	@ (8008bbc <srand+0x44>)
 8008b7c:	681d      	ldr	r5, [r3, #0]
 8008b7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008b80:	4604      	mov	r4, r0
 8008b82:	b9b3      	cbnz	r3, 8008bb2 <srand+0x3a>
 8008b84:	2018      	movs	r0, #24
 8008b86:	f000 fa7d 	bl	8009084 <malloc>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	6328      	str	r0, [r5, #48]	@ 0x30
 8008b8e:	b920      	cbnz	r0, 8008b9a <srand+0x22>
 8008b90:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc0 <srand+0x48>)
 8008b92:	480c      	ldr	r0, [pc, #48]	@ (8008bc4 <srand+0x4c>)
 8008b94:	2146      	movs	r1, #70	@ 0x46
 8008b96:	f000 fa0d 	bl	8008fb4 <__assert_func>
 8008b9a:	490b      	ldr	r1, [pc, #44]	@ (8008bc8 <srand+0x50>)
 8008b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008bcc <srand+0x54>)
 8008b9e:	e9c0 1300 	strd	r1, r3, [r0]
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd0 <srand+0x58>)
 8008ba4:	6083      	str	r3, [r0, #8]
 8008ba6:	230b      	movs	r3, #11
 8008ba8:	8183      	strh	r3, [r0, #12]
 8008baa:	2100      	movs	r1, #0
 8008bac:	2001      	movs	r0, #1
 8008bae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008bb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	611c      	str	r4, [r3, #16]
 8008bb8:	615a      	str	r2, [r3, #20]
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	200000a8 	.word	0x200000a8
 8008bc0:	0800a9ec 	.word	0x0800a9ec
 8008bc4:	0800aa03 	.word	0x0800aa03
 8008bc8:	abcd330e 	.word	0xabcd330e
 8008bcc:	e66d1234 	.word	0xe66d1234
 8008bd0:	0005deec 	.word	0x0005deec

08008bd4 <rand>:
 8008bd4:	4b16      	ldr	r3, [pc, #88]	@ (8008c30 <rand+0x5c>)
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	681c      	ldr	r4, [r3, #0]
 8008bda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008bdc:	b9b3      	cbnz	r3, 8008c0c <rand+0x38>
 8008bde:	2018      	movs	r0, #24
 8008be0:	f000 fa50 	bl	8009084 <malloc>
 8008be4:	4602      	mov	r2, r0
 8008be6:	6320      	str	r0, [r4, #48]	@ 0x30
 8008be8:	b920      	cbnz	r0, 8008bf4 <rand+0x20>
 8008bea:	4b12      	ldr	r3, [pc, #72]	@ (8008c34 <rand+0x60>)
 8008bec:	4812      	ldr	r0, [pc, #72]	@ (8008c38 <rand+0x64>)
 8008bee:	2152      	movs	r1, #82	@ 0x52
 8008bf0:	f000 f9e0 	bl	8008fb4 <__assert_func>
 8008bf4:	4911      	ldr	r1, [pc, #68]	@ (8008c3c <rand+0x68>)
 8008bf6:	4b12      	ldr	r3, [pc, #72]	@ (8008c40 <rand+0x6c>)
 8008bf8:	e9c0 1300 	strd	r1, r3, [r0]
 8008bfc:	4b11      	ldr	r3, [pc, #68]	@ (8008c44 <rand+0x70>)
 8008bfe:	6083      	str	r3, [r0, #8]
 8008c00:	230b      	movs	r3, #11
 8008c02:	8183      	strh	r3, [r0, #12]
 8008c04:	2100      	movs	r1, #0
 8008c06:	2001      	movs	r0, #1
 8008c08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008c0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008c0e:	480e      	ldr	r0, [pc, #56]	@ (8008c48 <rand+0x74>)
 8008c10:	690b      	ldr	r3, [r1, #16]
 8008c12:	694c      	ldr	r4, [r1, #20]
 8008c14:	4a0d      	ldr	r2, [pc, #52]	@ (8008c4c <rand+0x78>)
 8008c16:	4358      	muls	r0, r3
 8008c18:	fb02 0004 	mla	r0, r2, r4, r0
 8008c1c:	fba3 3202 	umull	r3, r2, r3, r2
 8008c20:	3301      	adds	r3, #1
 8008c22:	eb40 0002 	adc.w	r0, r0, r2
 8008c26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008c2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008c2e:	bd10      	pop	{r4, pc}
 8008c30:	200000a8 	.word	0x200000a8
 8008c34:	0800a9ec 	.word	0x0800a9ec
 8008c38:	0800aa03 	.word	0x0800aa03
 8008c3c:	abcd330e 	.word	0xabcd330e
 8008c40:	e66d1234 	.word	0xe66d1234
 8008c44:	0005deec 	.word	0x0005deec
 8008c48:	5851f42d 	.word	0x5851f42d
 8008c4c:	4c957f2d 	.word	0x4c957f2d

08008c50 <std>:
 8008c50:	2300      	movs	r3, #0
 8008c52:	b510      	push	{r4, lr}
 8008c54:	4604      	mov	r4, r0
 8008c56:	e9c0 3300 	strd	r3, r3, [r0]
 8008c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c5e:	6083      	str	r3, [r0, #8]
 8008c60:	8181      	strh	r1, [r0, #12]
 8008c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c64:	81c2      	strh	r2, [r0, #14]
 8008c66:	6183      	str	r3, [r0, #24]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	2208      	movs	r2, #8
 8008c6c:	305c      	adds	r0, #92	@ 0x5c
 8008c6e:	f000 f916 	bl	8008e9e <memset>
 8008c72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca8 <std+0x58>)
 8008c74:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c76:	4b0d      	ldr	r3, [pc, #52]	@ (8008cac <std+0x5c>)
 8008c78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb0 <std+0x60>)
 8008c7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb4 <std+0x64>)
 8008c80:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c82:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb8 <std+0x68>)
 8008c84:	6224      	str	r4, [r4, #32]
 8008c86:	429c      	cmp	r4, r3
 8008c88:	d006      	beq.n	8008c98 <std+0x48>
 8008c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c8e:	4294      	cmp	r4, r2
 8008c90:	d002      	beq.n	8008c98 <std+0x48>
 8008c92:	33d0      	adds	r3, #208	@ 0xd0
 8008c94:	429c      	cmp	r4, r3
 8008c96:	d105      	bne.n	8008ca4 <std+0x54>
 8008c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca0:	f000 b976 	b.w	8008f90 <__retarget_lock_init_recursive>
 8008ca4:	bd10      	pop	{r4, pc}
 8008ca6:	bf00      	nop
 8008ca8:	08008e19 	.word	0x08008e19
 8008cac:	08008e3b 	.word	0x08008e3b
 8008cb0:	08008e73 	.word	0x08008e73
 8008cb4:	08008e97 	.word	0x08008e97
 8008cb8:	200041f0 	.word	0x200041f0

08008cbc <stdio_exit_handler>:
 8008cbc:	4a02      	ldr	r2, [pc, #8]	@ (8008cc8 <stdio_exit_handler+0xc>)
 8008cbe:	4903      	ldr	r1, [pc, #12]	@ (8008ccc <stdio_exit_handler+0x10>)
 8008cc0:	4803      	ldr	r0, [pc, #12]	@ (8008cd0 <stdio_exit_handler+0x14>)
 8008cc2:	f000 b869 	b.w	8008d98 <_fwalk_sglue>
 8008cc6:	bf00      	nop
 8008cc8:	2000009c 	.word	0x2000009c
 8008ccc:	080098c1 	.word	0x080098c1
 8008cd0:	200000ac 	.word	0x200000ac

08008cd4 <cleanup_stdio>:
 8008cd4:	6841      	ldr	r1, [r0, #4]
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008d08 <cleanup_stdio+0x34>)
 8008cd8:	4299      	cmp	r1, r3
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	4604      	mov	r4, r0
 8008cde:	d001      	beq.n	8008ce4 <cleanup_stdio+0x10>
 8008ce0:	f000 fdee 	bl	80098c0 <_fflush_r>
 8008ce4:	68a1      	ldr	r1, [r4, #8]
 8008ce6:	4b09      	ldr	r3, [pc, #36]	@ (8008d0c <cleanup_stdio+0x38>)
 8008ce8:	4299      	cmp	r1, r3
 8008cea:	d002      	beq.n	8008cf2 <cleanup_stdio+0x1e>
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fde7 	bl	80098c0 <_fflush_r>
 8008cf2:	68e1      	ldr	r1, [r4, #12]
 8008cf4:	4b06      	ldr	r3, [pc, #24]	@ (8008d10 <cleanup_stdio+0x3c>)
 8008cf6:	4299      	cmp	r1, r3
 8008cf8:	d004      	beq.n	8008d04 <cleanup_stdio+0x30>
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d00:	f000 bdde 	b.w	80098c0 <_fflush_r>
 8008d04:	bd10      	pop	{r4, pc}
 8008d06:	bf00      	nop
 8008d08:	200041f0 	.word	0x200041f0
 8008d0c:	20004258 	.word	0x20004258
 8008d10:	200042c0 	.word	0x200042c0

08008d14 <global_stdio_init.part.0>:
 8008d14:	b510      	push	{r4, lr}
 8008d16:	4b0b      	ldr	r3, [pc, #44]	@ (8008d44 <global_stdio_init.part.0+0x30>)
 8008d18:	4c0b      	ldr	r4, [pc, #44]	@ (8008d48 <global_stdio_init.part.0+0x34>)
 8008d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d4c <global_stdio_init.part.0+0x38>)
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	2200      	movs	r2, #0
 8008d22:	2104      	movs	r1, #4
 8008d24:	f7ff ff94 	bl	8008c50 <std>
 8008d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	2109      	movs	r1, #9
 8008d30:	f7ff ff8e 	bl	8008c50 <std>
 8008d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d38:	2202      	movs	r2, #2
 8008d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d3e:	2112      	movs	r1, #18
 8008d40:	f7ff bf86 	b.w	8008c50 <std>
 8008d44:	20004328 	.word	0x20004328
 8008d48:	200041f0 	.word	0x200041f0
 8008d4c:	08008cbd 	.word	0x08008cbd

08008d50 <__sfp_lock_acquire>:
 8008d50:	4801      	ldr	r0, [pc, #4]	@ (8008d58 <__sfp_lock_acquire+0x8>)
 8008d52:	f000 b91e 	b.w	8008f92 <__retarget_lock_acquire_recursive>
 8008d56:	bf00      	nop
 8008d58:	20004331 	.word	0x20004331

08008d5c <__sfp_lock_release>:
 8008d5c:	4801      	ldr	r0, [pc, #4]	@ (8008d64 <__sfp_lock_release+0x8>)
 8008d5e:	f000 b919 	b.w	8008f94 <__retarget_lock_release_recursive>
 8008d62:	bf00      	nop
 8008d64:	20004331 	.word	0x20004331

08008d68 <__sinit>:
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	f7ff fff0 	bl	8008d50 <__sfp_lock_acquire>
 8008d70:	6a23      	ldr	r3, [r4, #32]
 8008d72:	b11b      	cbz	r3, 8008d7c <__sinit+0x14>
 8008d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d78:	f7ff bff0 	b.w	8008d5c <__sfp_lock_release>
 8008d7c:	4b04      	ldr	r3, [pc, #16]	@ (8008d90 <__sinit+0x28>)
 8008d7e:	6223      	str	r3, [r4, #32]
 8008d80:	4b04      	ldr	r3, [pc, #16]	@ (8008d94 <__sinit+0x2c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1f5      	bne.n	8008d74 <__sinit+0xc>
 8008d88:	f7ff ffc4 	bl	8008d14 <global_stdio_init.part.0>
 8008d8c:	e7f2      	b.n	8008d74 <__sinit+0xc>
 8008d8e:	bf00      	nop
 8008d90:	08008cd5 	.word	0x08008cd5
 8008d94:	20004328 	.word	0x20004328

08008d98 <_fwalk_sglue>:
 8008d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	4688      	mov	r8, r1
 8008da0:	4614      	mov	r4, r2
 8008da2:	2600      	movs	r6, #0
 8008da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008da8:	f1b9 0901 	subs.w	r9, r9, #1
 8008dac:	d505      	bpl.n	8008dba <_fwalk_sglue+0x22>
 8008dae:	6824      	ldr	r4, [r4, #0]
 8008db0:	2c00      	cmp	r4, #0
 8008db2:	d1f7      	bne.n	8008da4 <_fwalk_sglue+0xc>
 8008db4:	4630      	mov	r0, r6
 8008db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dba:	89ab      	ldrh	r3, [r5, #12]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d907      	bls.n	8008dd0 <_fwalk_sglue+0x38>
 8008dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	d003      	beq.n	8008dd0 <_fwalk_sglue+0x38>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	4638      	mov	r0, r7
 8008dcc:	47c0      	blx	r8
 8008dce:	4306      	orrs	r6, r0
 8008dd0:	3568      	adds	r5, #104	@ 0x68
 8008dd2:	e7e9      	b.n	8008da8 <_fwalk_sglue+0x10>

08008dd4 <siprintf>:
 8008dd4:	b40e      	push	{r1, r2, r3}
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	b09d      	sub	sp, #116	@ 0x74
 8008dda:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008ddc:	9002      	str	r0, [sp, #8]
 8008dde:	9006      	str	r0, [sp, #24]
 8008de0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008de4:	480a      	ldr	r0, [pc, #40]	@ (8008e10 <siprintf+0x3c>)
 8008de6:	9107      	str	r1, [sp, #28]
 8008de8:	9104      	str	r1, [sp, #16]
 8008dea:	490a      	ldr	r1, [pc, #40]	@ (8008e14 <siprintf+0x40>)
 8008dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df0:	9105      	str	r1, [sp, #20]
 8008df2:	2400      	movs	r4, #0
 8008df4:	a902      	add	r1, sp, #8
 8008df6:	6800      	ldr	r0, [r0, #0]
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008dfc:	f000 fa54 	bl	80092a8 <_svfiprintf_r>
 8008e00:	9b02      	ldr	r3, [sp, #8]
 8008e02:	701c      	strb	r4, [r3, #0]
 8008e04:	b01d      	add	sp, #116	@ 0x74
 8008e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e0a:	b003      	add	sp, #12
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	200000a8 	.word	0x200000a8
 8008e14:	ffff0208 	.word	0xffff0208

08008e18 <__sread>:
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e20:	f000 f868 	bl	8008ef4 <_read_r>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	bfab      	itete	ge
 8008e28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e2c:	181b      	addge	r3, r3, r0
 8008e2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e32:	bfac      	ite	ge
 8008e34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e36:	81a3      	strhlt	r3, [r4, #12]
 8008e38:	bd10      	pop	{r4, pc}

08008e3a <__swrite>:
 8008e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3e:	461f      	mov	r7, r3
 8008e40:	898b      	ldrh	r3, [r1, #12]
 8008e42:	05db      	lsls	r3, r3, #23
 8008e44:	4605      	mov	r5, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	4616      	mov	r6, r2
 8008e4a:	d505      	bpl.n	8008e58 <__swrite+0x1e>
 8008e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e50:	2302      	movs	r3, #2
 8008e52:	2200      	movs	r2, #0
 8008e54:	f000 f83c 	bl	8008ed0 <_lseek_r>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	4632      	mov	r2, r6
 8008e66:	463b      	mov	r3, r7
 8008e68:	4628      	mov	r0, r5
 8008e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6e:	f000 b853 	b.w	8008f18 <_write_r>

08008e72 <__sseek>:
 8008e72:	b510      	push	{r4, lr}
 8008e74:	460c      	mov	r4, r1
 8008e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7a:	f000 f829 	bl	8008ed0 <_lseek_r>
 8008e7e:	1c43      	adds	r3, r0, #1
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	bf15      	itete	ne
 8008e84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e8e:	81a3      	strheq	r3, [r4, #12]
 8008e90:	bf18      	it	ne
 8008e92:	81a3      	strhne	r3, [r4, #12]
 8008e94:	bd10      	pop	{r4, pc}

08008e96 <__sclose>:
 8008e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9a:	f000 b809 	b.w	8008eb0 <_close_r>

08008e9e <memset>:
 8008e9e:	4402      	add	r2, r0
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d100      	bne.n	8008ea8 <memset+0xa>
 8008ea6:	4770      	bx	lr
 8008ea8:	f803 1b01 	strb.w	r1, [r3], #1
 8008eac:	e7f9      	b.n	8008ea2 <memset+0x4>
	...

08008eb0 <_close_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d06      	ldr	r5, [pc, #24]	@ (8008ecc <_close_r+0x1c>)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7f9 fc8b 	bl	80027d6 <_close>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_close_r+0x1a>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_close_r+0x1a>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	2000432c 	.word	0x2000432c

08008ed0 <_lseek_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d07      	ldr	r5, [pc, #28]	@ (8008ef0 <_lseek_r+0x20>)
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	602a      	str	r2, [r5, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7f9 fca0 	bl	8002824 <_lseek>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_lseek_r+0x1e>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_lseek_r+0x1e>
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	2000432c 	.word	0x2000432c

08008ef4 <_read_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	@ (8008f14 <_read_r+0x20>)
 8008ef8:	4604      	mov	r4, r0
 8008efa:	4608      	mov	r0, r1
 8008efc:	4611      	mov	r1, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	602a      	str	r2, [r5, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7f9 fc2e 	bl	8002764 <_read>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_read_r+0x1e>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_read_r+0x1e>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	2000432c 	.word	0x2000432c

08008f18 <_write_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d07      	ldr	r5, [pc, #28]	@ (8008f38 <_write_r+0x20>)
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	4608      	mov	r0, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	2200      	movs	r2, #0
 8008f24:	602a      	str	r2, [r5, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f7f9 fc39 	bl	800279e <_write>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_write_r+0x1e>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_write_r+0x1e>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	2000432c 	.word	0x2000432c

08008f3c <__errno>:
 8008f3c:	4b01      	ldr	r3, [pc, #4]	@ (8008f44 <__errno+0x8>)
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	200000a8 	.word	0x200000a8

08008f48 <__libc_init_array>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f80 <__libc_init_array+0x38>)
 8008f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f84 <__libc_init_array+0x3c>)
 8008f4e:	1b64      	subs	r4, r4, r5
 8008f50:	10a4      	asrs	r4, r4, #2
 8008f52:	2600      	movs	r6, #0
 8008f54:	42a6      	cmp	r6, r4
 8008f56:	d109      	bne.n	8008f6c <__libc_init_array+0x24>
 8008f58:	4d0b      	ldr	r5, [pc, #44]	@ (8008f88 <__libc_init_array+0x40>)
 8008f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f8c <__libc_init_array+0x44>)
 8008f5c:	f000 ffee 	bl	8009f3c <_init>
 8008f60:	1b64      	subs	r4, r4, r5
 8008f62:	10a4      	asrs	r4, r4, #2
 8008f64:	2600      	movs	r6, #0
 8008f66:	42a6      	cmp	r6, r4
 8008f68:	d105      	bne.n	8008f76 <__libc_init_array+0x2e>
 8008f6a:	bd70      	pop	{r4, r5, r6, pc}
 8008f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f70:	4798      	blx	r3
 8008f72:	3601      	adds	r6, #1
 8008f74:	e7ee      	b.n	8008f54 <__libc_init_array+0xc>
 8008f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f7a:	4798      	blx	r3
 8008f7c:	3601      	adds	r6, #1
 8008f7e:	e7f2      	b.n	8008f66 <__libc_init_array+0x1e>
 8008f80:	0800aad4 	.word	0x0800aad4
 8008f84:	0800aad4 	.word	0x0800aad4
 8008f88:	0800aad4 	.word	0x0800aad4
 8008f8c:	0800aad8 	.word	0x0800aad8

08008f90 <__retarget_lock_init_recursive>:
 8008f90:	4770      	bx	lr

08008f92 <__retarget_lock_acquire_recursive>:
 8008f92:	4770      	bx	lr

08008f94 <__retarget_lock_release_recursive>:
 8008f94:	4770      	bx	lr

08008f96 <memcpy>:
 8008f96:	440a      	add	r2, r1
 8008f98:	4291      	cmp	r1, r2
 8008f9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f9e:	d100      	bne.n	8008fa2 <memcpy+0xc>
 8008fa0:	4770      	bx	lr
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fac:	4291      	cmp	r1, r2
 8008fae:	d1f9      	bne.n	8008fa4 <memcpy+0xe>
 8008fb0:	bd10      	pop	{r4, pc}
	...

08008fb4 <__assert_func>:
 8008fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4b09      	ldr	r3, [pc, #36]	@ (8008fe0 <__assert_func+0x2c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	68d8      	ldr	r0, [r3, #12]
 8008fc2:	b14c      	cbz	r4, 8008fd8 <__assert_func+0x24>
 8008fc4:	4b07      	ldr	r3, [pc, #28]	@ (8008fe4 <__assert_func+0x30>)
 8008fc6:	9100      	str	r1, [sp, #0]
 8008fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fcc:	4906      	ldr	r1, [pc, #24]	@ (8008fe8 <__assert_func+0x34>)
 8008fce:	462b      	mov	r3, r5
 8008fd0:	f000 fc9e 	bl	8009910 <fiprintf>
 8008fd4:	f000 fcd8 	bl	8009988 <abort>
 8008fd8:	4b04      	ldr	r3, [pc, #16]	@ (8008fec <__assert_func+0x38>)
 8008fda:	461c      	mov	r4, r3
 8008fdc:	e7f3      	b.n	8008fc6 <__assert_func+0x12>
 8008fde:	bf00      	nop
 8008fe0:	200000a8 	.word	0x200000a8
 8008fe4:	0800aa5b 	.word	0x0800aa5b
 8008fe8:	0800aa68 	.word	0x0800aa68
 8008fec:	0800aa96 	.word	0x0800aa96

08008ff0 <_free_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	2900      	cmp	r1, #0
 8008ff6:	d041      	beq.n	800907c <_free_r+0x8c>
 8008ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ffc:	1f0c      	subs	r4, r1, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfb8      	it	lt
 8009002:	18e4      	addlt	r4, r4, r3
 8009004:	f000 f8e8 	bl	80091d8 <__malloc_lock>
 8009008:	4a1d      	ldr	r2, [pc, #116]	@ (8009080 <_free_r+0x90>)
 800900a:	6813      	ldr	r3, [r2, #0]
 800900c:	b933      	cbnz	r3, 800901c <_free_r+0x2c>
 800900e:	6063      	str	r3, [r4, #4]
 8009010:	6014      	str	r4, [r2, #0]
 8009012:	4628      	mov	r0, r5
 8009014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009018:	f000 b8e4 	b.w	80091e4 <__malloc_unlock>
 800901c:	42a3      	cmp	r3, r4
 800901e:	d908      	bls.n	8009032 <_free_r+0x42>
 8009020:	6820      	ldr	r0, [r4, #0]
 8009022:	1821      	adds	r1, r4, r0
 8009024:	428b      	cmp	r3, r1
 8009026:	bf01      	itttt	eq
 8009028:	6819      	ldreq	r1, [r3, #0]
 800902a:	685b      	ldreq	r3, [r3, #4]
 800902c:	1809      	addeq	r1, r1, r0
 800902e:	6021      	streq	r1, [r4, #0]
 8009030:	e7ed      	b.n	800900e <_free_r+0x1e>
 8009032:	461a      	mov	r2, r3
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	b10b      	cbz	r3, 800903c <_free_r+0x4c>
 8009038:	42a3      	cmp	r3, r4
 800903a:	d9fa      	bls.n	8009032 <_free_r+0x42>
 800903c:	6811      	ldr	r1, [r2, #0]
 800903e:	1850      	adds	r0, r2, r1
 8009040:	42a0      	cmp	r0, r4
 8009042:	d10b      	bne.n	800905c <_free_r+0x6c>
 8009044:	6820      	ldr	r0, [r4, #0]
 8009046:	4401      	add	r1, r0
 8009048:	1850      	adds	r0, r2, r1
 800904a:	4283      	cmp	r3, r0
 800904c:	6011      	str	r1, [r2, #0]
 800904e:	d1e0      	bne.n	8009012 <_free_r+0x22>
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	6053      	str	r3, [r2, #4]
 8009056:	4408      	add	r0, r1
 8009058:	6010      	str	r0, [r2, #0]
 800905a:	e7da      	b.n	8009012 <_free_r+0x22>
 800905c:	d902      	bls.n	8009064 <_free_r+0x74>
 800905e:	230c      	movs	r3, #12
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	e7d6      	b.n	8009012 <_free_r+0x22>
 8009064:	6820      	ldr	r0, [r4, #0]
 8009066:	1821      	adds	r1, r4, r0
 8009068:	428b      	cmp	r3, r1
 800906a:	bf04      	itt	eq
 800906c:	6819      	ldreq	r1, [r3, #0]
 800906e:	685b      	ldreq	r3, [r3, #4]
 8009070:	6063      	str	r3, [r4, #4]
 8009072:	bf04      	itt	eq
 8009074:	1809      	addeq	r1, r1, r0
 8009076:	6021      	streq	r1, [r4, #0]
 8009078:	6054      	str	r4, [r2, #4]
 800907a:	e7ca      	b.n	8009012 <_free_r+0x22>
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	bf00      	nop
 8009080:	20004338 	.word	0x20004338

08009084 <malloc>:
 8009084:	4b02      	ldr	r3, [pc, #8]	@ (8009090 <malloc+0xc>)
 8009086:	4601      	mov	r1, r0
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	f000 b825 	b.w	80090d8 <_malloc_r>
 800908e:	bf00      	nop
 8009090:	200000a8 	.word	0x200000a8

08009094 <sbrk_aligned>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	4e0f      	ldr	r6, [pc, #60]	@ (80090d4 <sbrk_aligned+0x40>)
 8009098:	460c      	mov	r4, r1
 800909a:	6831      	ldr	r1, [r6, #0]
 800909c:	4605      	mov	r5, r0
 800909e:	b911      	cbnz	r1, 80090a6 <sbrk_aligned+0x12>
 80090a0:	f000 fc62 	bl	8009968 <_sbrk_r>
 80090a4:	6030      	str	r0, [r6, #0]
 80090a6:	4621      	mov	r1, r4
 80090a8:	4628      	mov	r0, r5
 80090aa:	f000 fc5d 	bl	8009968 <_sbrk_r>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	d103      	bne.n	80090ba <sbrk_aligned+0x26>
 80090b2:	f04f 34ff 	mov.w	r4, #4294967295
 80090b6:	4620      	mov	r0, r4
 80090b8:	bd70      	pop	{r4, r5, r6, pc}
 80090ba:	1cc4      	adds	r4, r0, #3
 80090bc:	f024 0403 	bic.w	r4, r4, #3
 80090c0:	42a0      	cmp	r0, r4
 80090c2:	d0f8      	beq.n	80090b6 <sbrk_aligned+0x22>
 80090c4:	1a21      	subs	r1, r4, r0
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 fc4e 	bl	8009968 <_sbrk_r>
 80090cc:	3001      	adds	r0, #1
 80090ce:	d1f2      	bne.n	80090b6 <sbrk_aligned+0x22>
 80090d0:	e7ef      	b.n	80090b2 <sbrk_aligned+0x1e>
 80090d2:	bf00      	nop
 80090d4:	20004334 	.word	0x20004334

080090d8 <_malloc_r>:
 80090d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090dc:	1ccd      	adds	r5, r1, #3
 80090de:	f025 0503 	bic.w	r5, r5, #3
 80090e2:	3508      	adds	r5, #8
 80090e4:	2d0c      	cmp	r5, #12
 80090e6:	bf38      	it	cc
 80090e8:	250c      	movcc	r5, #12
 80090ea:	2d00      	cmp	r5, #0
 80090ec:	4606      	mov	r6, r0
 80090ee:	db01      	blt.n	80090f4 <_malloc_r+0x1c>
 80090f0:	42a9      	cmp	r1, r5
 80090f2:	d904      	bls.n	80090fe <_malloc_r+0x26>
 80090f4:	230c      	movs	r3, #12
 80090f6:	6033      	str	r3, [r6, #0]
 80090f8:	2000      	movs	r0, #0
 80090fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091d4 <_malloc_r+0xfc>
 8009102:	f000 f869 	bl	80091d8 <__malloc_lock>
 8009106:	f8d8 3000 	ldr.w	r3, [r8]
 800910a:	461c      	mov	r4, r3
 800910c:	bb44      	cbnz	r4, 8009160 <_malloc_r+0x88>
 800910e:	4629      	mov	r1, r5
 8009110:	4630      	mov	r0, r6
 8009112:	f7ff ffbf 	bl	8009094 <sbrk_aligned>
 8009116:	1c43      	adds	r3, r0, #1
 8009118:	4604      	mov	r4, r0
 800911a:	d158      	bne.n	80091ce <_malloc_r+0xf6>
 800911c:	f8d8 4000 	ldr.w	r4, [r8]
 8009120:	4627      	mov	r7, r4
 8009122:	2f00      	cmp	r7, #0
 8009124:	d143      	bne.n	80091ae <_malloc_r+0xd6>
 8009126:	2c00      	cmp	r4, #0
 8009128:	d04b      	beq.n	80091c2 <_malloc_r+0xea>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	4639      	mov	r1, r7
 800912e:	4630      	mov	r0, r6
 8009130:	eb04 0903 	add.w	r9, r4, r3
 8009134:	f000 fc18 	bl	8009968 <_sbrk_r>
 8009138:	4581      	cmp	r9, r0
 800913a:	d142      	bne.n	80091c2 <_malloc_r+0xea>
 800913c:	6821      	ldr	r1, [r4, #0]
 800913e:	1a6d      	subs	r5, r5, r1
 8009140:	4629      	mov	r1, r5
 8009142:	4630      	mov	r0, r6
 8009144:	f7ff ffa6 	bl	8009094 <sbrk_aligned>
 8009148:	3001      	adds	r0, #1
 800914a:	d03a      	beq.n	80091c2 <_malloc_r+0xea>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	442b      	add	r3, r5
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	f8d8 3000 	ldr.w	r3, [r8]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	bb62      	cbnz	r2, 80091b4 <_malloc_r+0xdc>
 800915a:	f8c8 7000 	str.w	r7, [r8]
 800915e:	e00f      	b.n	8009180 <_malloc_r+0xa8>
 8009160:	6822      	ldr	r2, [r4, #0]
 8009162:	1b52      	subs	r2, r2, r5
 8009164:	d420      	bmi.n	80091a8 <_malloc_r+0xd0>
 8009166:	2a0b      	cmp	r2, #11
 8009168:	d917      	bls.n	800919a <_malloc_r+0xc2>
 800916a:	1961      	adds	r1, r4, r5
 800916c:	42a3      	cmp	r3, r4
 800916e:	6025      	str	r5, [r4, #0]
 8009170:	bf18      	it	ne
 8009172:	6059      	strne	r1, [r3, #4]
 8009174:	6863      	ldr	r3, [r4, #4]
 8009176:	bf08      	it	eq
 8009178:	f8c8 1000 	streq.w	r1, [r8]
 800917c:	5162      	str	r2, [r4, r5]
 800917e:	604b      	str	r3, [r1, #4]
 8009180:	4630      	mov	r0, r6
 8009182:	f000 f82f 	bl	80091e4 <__malloc_unlock>
 8009186:	f104 000b 	add.w	r0, r4, #11
 800918a:	1d23      	adds	r3, r4, #4
 800918c:	f020 0007 	bic.w	r0, r0, #7
 8009190:	1ac2      	subs	r2, r0, r3
 8009192:	bf1c      	itt	ne
 8009194:	1a1b      	subne	r3, r3, r0
 8009196:	50a3      	strne	r3, [r4, r2]
 8009198:	e7af      	b.n	80090fa <_malloc_r+0x22>
 800919a:	6862      	ldr	r2, [r4, #4]
 800919c:	42a3      	cmp	r3, r4
 800919e:	bf0c      	ite	eq
 80091a0:	f8c8 2000 	streq.w	r2, [r8]
 80091a4:	605a      	strne	r2, [r3, #4]
 80091a6:	e7eb      	b.n	8009180 <_malloc_r+0xa8>
 80091a8:	4623      	mov	r3, r4
 80091aa:	6864      	ldr	r4, [r4, #4]
 80091ac:	e7ae      	b.n	800910c <_malloc_r+0x34>
 80091ae:	463c      	mov	r4, r7
 80091b0:	687f      	ldr	r7, [r7, #4]
 80091b2:	e7b6      	b.n	8009122 <_malloc_r+0x4a>
 80091b4:	461a      	mov	r2, r3
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	d1fb      	bne.n	80091b4 <_malloc_r+0xdc>
 80091bc:	2300      	movs	r3, #0
 80091be:	6053      	str	r3, [r2, #4]
 80091c0:	e7de      	b.n	8009180 <_malloc_r+0xa8>
 80091c2:	230c      	movs	r3, #12
 80091c4:	6033      	str	r3, [r6, #0]
 80091c6:	4630      	mov	r0, r6
 80091c8:	f000 f80c 	bl	80091e4 <__malloc_unlock>
 80091cc:	e794      	b.n	80090f8 <_malloc_r+0x20>
 80091ce:	6005      	str	r5, [r0, #0]
 80091d0:	e7d6      	b.n	8009180 <_malloc_r+0xa8>
 80091d2:	bf00      	nop
 80091d4:	20004338 	.word	0x20004338

080091d8 <__malloc_lock>:
 80091d8:	4801      	ldr	r0, [pc, #4]	@ (80091e0 <__malloc_lock+0x8>)
 80091da:	f7ff beda 	b.w	8008f92 <__retarget_lock_acquire_recursive>
 80091de:	bf00      	nop
 80091e0:	20004330 	.word	0x20004330

080091e4 <__malloc_unlock>:
 80091e4:	4801      	ldr	r0, [pc, #4]	@ (80091ec <__malloc_unlock+0x8>)
 80091e6:	f7ff bed5 	b.w	8008f94 <__retarget_lock_release_recursive>
 80091ea:	bf00      	nop
 80091ec:	20004330 	.word	0x20004330

080091f0 <__ssputs_r>:
 80091f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f4:	688e      	ldr	r6, [r1, #8]
 80091f6:	461f      	mov	r7, r3
 80091f8:	42be      	cmp	r6, r7
 80091fa:	680b      	ldr	r3, [r1, #0]
 80091fc:	4682      	mov	sl, r0
 80091fe:	460c      	mov	r4, r1
 8009200:	4690      	mov	r8, r2
 8009202:	d82d      	bhi.n	8009260 <__ssputs_r+0x70>
 8009204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009208:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800920c:	d026      	beq.n	800925c <__ssputs_r+0x6c>
 800920e:	6965      	ldr	r5, [r4, #20]
 8009210:	6909      	ldr	r1, [r1, #16]
 8009212:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009216:	eba3 0901 	sub.w	r9, r3, r1
 800921a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800921e:	1c7b      	adds	r3, r7, #1
 8009220:	444b      	add	r3, r9
 8009222:	106d      	asrs	r5, r5, #1
 8009224:	429d      	cmp	r5, r3
 8009226:	bf38      	it	cc
 8009228:	461d      	movcc	r5, r3
 800922a:	0553      	lsls	r3, r2, #21
 800922c:	d527      	bpl.n	800927e <__ssputs_r+0x8e>
 800922e:	4629      	mov	r1, r5
 8009230:	f7ff ff52 	bl	80090d8 <_malloc_r>
 8009234:	4606      	mov	r6, r0
 8009236:	b360      	cbz	r0, 8009292 <__ssputs_r+0xa2>
 8009238:	6921      	ldr	r1, [r4, #16]
 800923a:	464a      	mov	r2, r9
 800923c:	f7ff feab 	bl	8008f96 <memcpy>
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800924a:	81a3      	strh	r3, [r4, #12]
 800924c:	6126      	str	r6, [r4, #16]
 800924e:	6165      	str	r5, [r4, #20]
 8009250:	444e      	add	r6, r9
 8009252:	eba5 0509 	sub.w	r5, r5, r9
 8009256:	6026      	str	r6, [r4, #0]
 8009258:	60a5      	str	r5, [r4, #8]
 800925a:	463e      	mov	r6, r7
 800925c:	42be      	cmp	r6, r7
 800925e:	d900      	bls.n	8009262 <__ssputs_r+0x72>
 8009260:	463e      	mov	r6, r7
 8009262:	6820      	ldr	r0, [r4, #0]
 8009264:	4632      	mov	r2, r6
 8009266:	4641      	mov	r1, r8
 8009268:	f000 fb64 	bl	8009934 <memmove>
 800926c:	68a3      	ldr	r3, [r4, #8]
 800926e:	1b9b      	subs	r3, r3, r6
 8009270:	60a3      	str	r3, [r4, #8]
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	4433      	add	r3, r6
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	2000      	movs	r0, #0
 800927a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927e:	462a      	mov	r2, r5
 8009280:	f000 fb89 	bl	8009996 <_realloc_r>
 8009284:	4606      	mov	r6, r0
 8009286:	2800      	cmp	r0, #0
 8009288:	d1e0      	bne.n	800924c <__ssputs_r+0x5c>
 800928a:	6921      	ldr	r1, [r4, #16]
 800928c:	4650      	mov	r0, sl
 800928e:	f7ff feaf 	bl	8008ff0 <_free_r>
 8009292:	230c      	movs	r3, #12
 8009294:	f8ca 3000 	str.w	r3, [sl]
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	f04f 30ff 	mov.w	r0, #4294967295
 80092a4:	e7e9      	b.n	800927a <__ssputs_r+0x8a>
	...

080092a8 <_svfiprintf_r>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	4698      	mov	r8, r3
 80092ae:	898b      	ldrh	r3, [r1, #12]
 80092b0:	061b      	lsls	r3, r3, #24
 80092b2:	b09d      	sub	sp, #116	@ 0x74
 80092b4:	4607      	mov	r7, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	4614      	mov	r4, r2
 80092ba:	d510      	bpl.n	80092de <_svfiprintf_r+0x36>
 80092bc:	690b      	ldr	r3, [r1, #16]
 80092be:	b973      	cbnz	r3, 80092de <_svfiprintf_r+0x36>
 80092c0:	2140      	movs	r1, #64	@ 0x40
 80092c2:	f7ff ff09 	bl	80090d8 <_malloc_r>
 80092c6:	6028      	str	r0, [r5, #0]
 80092c8:	6128      	str	r0, [r5, #16]
 80092ca:	b930      	cbnz	r0, 80092da <_svfiprintf_r+0x32>
 80092cc:	230c      	movs	r3, #12
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	b01d      	add	sp, #116	@ 0x74
 80092d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092da:	2340      	movs	r3, #64	@ 0x40
 80092dc:	616b      	str	r3, [r5, #20]
 80092de:	2300      	movs	r3, #0
 80092e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092e2:	2320      	movs	r3, #32
 80092e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ec:	2330      	movs	r3, #48	@ 0x30
 80092ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800948c <_svfiprintf_r+0x1e4>
 80092f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092f6:	f04f 0901 	mov.w	r9, #1
 80092fa:	4623      	mov	r3, r4
 80092fc:	469a      	mov	sl, r3
 80092fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009302:	b10a      	cbz	r2, 8009308 <_svfiprintf_r+0x60>
 8009304:	2a25      	cmp	r2, #37	@ 0x25
 8009306:	d1f9      	bne.n	80092fc <_svfiprintf_r+0x54>
 8009308:	ebba 0b04 	subs.w	fp, sl, r4
 800930c:	d00b      	beq.n	8009326 <_svfiprintf_r+0x7e>
 800930e:	465b      	mov	r3, fp
 8009310:	4622      	mov	r2, r4
 8009312:	4629      	mov	r1, r5
 8009314:	4638      	mov	r0, r7
 8009316:	f7ff ff6b 	bl	80091f0 <__ssputs_r>
 800931a:	3001      	adds	r0, #1
 800931c:	f000 80a7 	beq.w	800946e <_svfiprintf_r+0x1c6>
 8009320:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009322:	445a      	add	r2, fp
 8009324:	9209      	str	r2, [sp, #36]	@ 0x24
 8009326:	f89a 3000 	ldrb.w	r3, [sl]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 809f 	beq.w	800946e <_svfiprintf_r+0x1c6>
 8009330:	2300      	movs	r3, #0
 8009332:	f04f 32ff 	mov.w	r2, #4294967295
 8009336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800933a:	f10a 0a01 	add.w	sl, sl, #1
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	9307      	str	r3, [sp, #28]
 8009342:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009346:	931a      	str	r3, [sp, #104]	@ 0x68
 8009348:	4654      	mov	r4, sl
 800934a:	2205      	movs	r2, #5
 800934c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009350:	484e      	ldr	r0, [pc, #312]	@ (800948c <_svfiprintf_r+0x1e4>)
 8009352:	f7f6 ff3d 	bl	80001d0 <memchr>
 8009356:	9a04      	ldr	r2, [sp, #16]
 8009358:	b9d8      	cbnz	r0, 8009392 <_svfiprintf_r+0xea>
 800935a:	06d0      	lsls	r0, r2, #27
 800935c:	bf44      	itt	mi
 800935e:	2320      	movmi	r3, #32
 8009360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009364:	0711      	lsls	r1, r2, #28
 8009366:	bf44      	itt	mi
 8009368:	232b      	movmi	r3, #43	@ 0x2b
 800936a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800936e:	f89a 3000 	ldrb.w	r3, [sl]
 8009372:	2b2a      	cmp	r3, #42	@ 0x2a
 8009374:	d015      	beq.n	80093a2 <_svfiprintf_r+0xfa>
 8009376:	9a07      	ldr	r2, [sp, #28]
 8009378:	4654      	mov	r4, sl
 800937a:	2000      	movs	r0, #0
 800937c:	f04f 0c0a 	mov.w	ip, #10
 8009380:	4621      	mov	r1, r4
 8009382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009386:	3b30      	subs	r3, #48	@ 0x30
 8009388:	2b09      	cmp	r3, #9
 800938a:	d94b      	bls.n	8009424 <_svfiprintf_r+0x17c>
 800938c:	b1b0      	cbz	r0, 80093bc <_svfiprintf_r+0x114>
 800938e:	9207      	str	r2, [sp, #28]
 8009390:	e014      	b.n	80093bc <_svfiprintf_r+0x114>
 8009392:	eba0 0308 	sub.w	r3, r0, r8
 8009396:	fa09 f303 	lsl.w	r3, r9, r3
 800939a:	4313      	orrs	r3, r2
 800939c:	9304      	str	r3, [sp, #16]
 800939e:	46a2      	mov	sl, r4
 80093a0:	e7d2      	b.n	8009348 <_svfiprintf_r+0xa0>
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	1d19      	adds	r1, r3, #4
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	9103      	str	r1, [sp, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	bfbb      	ittet	lt
 80093ae:	425b      	neglt	r3, r3
 80093b0:	f042 0202 	orrlt.w	r2, r2, #2
 80093b4:	9307      	strge	r3, [sp, #28]
 80093b6:	9307      	strlt	r3, [sp, #28]
 80093b8:	bfb8      	it	lt
 80093ba:	9204      	strlt	r2, [sp, #16]
 80093bc:	7823      	ldrb	r3, [r4, #0]
 80093be:	2b2e      	cmp	r3, #46	@ 0x2e
 80093c0:	d10a      	bne.n	80093d8 <_svfiprintf_r+0x130>
 80093c2:	7863      	ldrb	r3, [r4, #1]
 80093c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80093c6:	d132      	bne.n	800942e <_svfiprintf_r+0x186>
 80093c8:	9b03      	ldr	r3, [sp, #12]
 80093ca:	1d1a      	adds	r2, r3, #4
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	9203      	str	r2, [sp, #12]
 80093d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093d4:	3402      	adds	r4, #2
 80093d6:	9305      	str	r3, [sp, #20]
 80093d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800949c <_svfiprintf_r+0x1f4>
 80093dc:	7821      	ldrb	r1, [r4, #0]
 80093de:	2203      	movs	r2, #3
 80093e0:	4650      	mov	r0, sl
 80093e2:	f7f6 fef5 	bl	80001d0 <memchr>
 80093e6:	b138      	cbz	r0, 80093f8 <_svfiprintf_r+0x150>
 80093e8:	9b04      	ldr	r3, [sp, #16]
 80093ea:	eba0 000a 	sub.w	r0, r0, sl
 80093ee:	2240      	movs	r2, #64	@ 0x40
 80093f0:	4082      	lsls	r2, r0
 80093f2:	4313      	orrs	r3, r2
 80093f4:	3401      	adds	r4, #1
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fc:	4824      	ldr	r0, [pc, #144]	@ (8009490 <_svfiprintf_r+0x1e8>)
 80093fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009402:	2206      	movs	r2, #6
 8009404:	f7f6 fee4 	bl	80001d0 <memchr>
 8009408:	2800      	cmp	r0, #0
 800940a:	d036      	beq.n	800947a <_svfiprintf_r+0x1d2>
 800940c:	4b21      	ldr	r3, [pc, #132]	@ (8009494 <_svfiprintf_r+0x1ec>)
 800940e:	bb1b      	cbnz	r3, 8009458 <_svfiprintf_r+0x1b0>
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	3307      	adds	r3, #7
 8009414:	f023 0307 	bic.w	r3, r3, #7
 8009418:	3308      	adds	r3, #8
 800941a:	9303      	str	r3, [sp, #12]
 800941c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800941e:	4433      	add	r3, r6
 8009420:	9309      	str	r3, [sp, #36]	@ 0x24
 8009422:	e76a      	b.n	80092fa <_svfiprintf_r+0x52>
 8009424:	fb0c 3202 	mla	r2, ip, r2, r3
 8009428:	460c      	mov	r4, r1
 800942a:	2001      	movs	r0, #1
 800942c:	e7a8      	b.n	8009380 <_svfiprintf_r+0xd8>
 800942e:	2300      	movs	r3, #0
 8009430:	3401      	adds	r4, #1
 8009432:	9305      	str	r3, [sp, #20]
 8009434:	4619      	mov	r1, r3
 8009436:	f04f 0c0a 	mov.w	ip, #10
 800943a:	4620      	mov	r0, r4
 800943c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009440:	3a30      	subs	r2, #48	@ 0x30
 8009442:	2a09      	cmp	r2, #9
 8009444:	d903      	bls.n	800944e <_svfiprintf_r+0x1a6>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0c6      	beq.n	80093d8 <_svfiprintf_r+0x130>
 800944a:	9105      	str	r1, [sp, #20]
 800944c:	e7c4      	b.n	80093d8 <_svfiprintf_r+0x130>
 800944e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009452:	4604      	mov	r4, r0
 8009454:	2301      	movs	r3, #1
 8009456:	e7f0      	b.n	800943a <_svfiprintf_r+0x192>
 8009458:	ab03      	add	r3, sp, #12
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	462a      	mov	r2, r5
 800945e:	4b0e      	ldr	r3, [pc, #56]	@ (8009498 <_svfiprintf_r+0x1f0>)
 8009460:	a904      	add	r1, sp, #16
 8009462:	4638      	mov	r0, r7
 8009464:	f3af 8000 	nop.w
 8009468:	1c42      	adds	r2, r0, #1
 800946a:	4606      	mov	r6, r0
 800946c:	d1d6      	bne.n	800941c <_svfiprintf_r+0x174>
 800946e:	89ab      	ldrh	r3, [r5, #12]
 8009470:	065b      	lsls	r3, r3, #25
 8009472:	f53f af2d 	bmi.w	80092d0 <_svfiprintf_r+0x28>
 8009476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009478:	e72c      	b.n	80092d4 <_svfiprintf_r+0x2c>
 800947a:	ab03      	add	r3, sp, #12
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	462a      	mov	r2, r5
 8009480:	4b05      	ldr	r3, [pc, #20]	@ (8009498 <_svfiprintf_r+0x1f0>)
 8009482:	a904      	add	r1, sp, #16
 8009484:	4638      	mov	r0, r7
 8009486:	f000 f879 	bl	800957c <_printf_i>
 800948a:	e7ed      	b.n	8009468 <_svfiprintf_r+0x1c0>
 800948c:	0800aa97 	.word	0x0800aa97
 8009490:	0800aaa1 	.word	0x0800aaa1
 8009494:	00000000 	.word	0x00000000
 8009498:	080091f1 	.word	0x080091f1
 800949c:	0800aa9d 	.word	0x0800aa9d

080094a0 <_printf_common>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	4616      	mov	r6, r2
 80094a6:	4698      	mov	r8, r3
 80094a8:	688a      	ldr	r2, [r1, #8]
 80094aa:	690b      	ldr	r3, [r1, #16]
 80094ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	bfb8      	it	lt
 80094b4:	4613      	movlt	r3, r2
 80094b6:	6033      	str	r3, [r6, #0]
 80094b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094bc:	4607      	mov	r7, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	b10a      	cbz	r2, 80094c6 <_printf_common+0x26>
 80094c2:	3301      	adds	r3, #1
 80094c4:	6033      	str	r3, [r6, #0]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	0699      	lsls	r1, r3, #26
 80094ca:	bf42      	ittt	mi
 80094cc:	6833      	ldrmi	r3, [r6, #0]
 80094ce:	3302      	addmi	r3, #2
 80094d0:	6033      	strmi	r3, [r6, #0]
 80094d2:	6825      	ldr	r5, [r4, #0]
 80094d4:	f015 0506 	ands.w	r5, r5, #6
 80094d8:	d106      	bne.n	80094e8 <_printf_common+0x48>
 80094da:	f104 0a19 	add.w	sl, r4, #25
 80094de:	68e3      	ldr	r3, [r4, #12]
 80094e0:	6832      	ldr	r2, [r6, #0]
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	dc26      	bgt.n	8009536 <_printf_common+0x96>
 80094e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094ec:	6822      	ldr	r2, [r4, #0]
 80094ee:	3b00      	subs	r3, #0
 80094f0:	bf18      	it	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	0692      	lsls	r2, r2, #26
 80094f6:	d42b      	bmi.n	8009550 <_printf_common+0xb0>
 80094f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094fc:	4641      	mov	r1, r8
 80094fe:	4638      	mov	r0, r7
 8009500:	47c8      	blx	r9
 8009502:	3001      	adds	r0, #1
 8009504:	d01e      	beq.n	8009544 <_printf_common+0xa4>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	6922      	ldr	r2, [r4, #16]
 800950a:	f003 0306 	and.w	r3, r3, #6
 800950e:	2b04      	cmp	r3, #4
 8009510:	bf02      	ittt	eq
 8009512:	68e5      	ldreq	r5, [r4, #12]
 8009514:	6833      	ldreq	r3, [r6, #0]
 8009516:	1aed      	subeq	r5, r5, r3
 8009518:	68a3      	ldr	r3, [r4, #8]
 800951a:	bf0c      	ite	eq
 800951c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009520:	2500      	movne	r5, #0
 8009522:	4293      	cmp	r3, r2
 8009524:	bfc4      	itt	gt
 8009526:	1a9b      	subgt	r3, r3, r2
 8009528:	18ed      	addgt	r5, r5, r3
 800952a:	2600      	movs	r6, #0
 800952c:	341a      	adds	r4, #26
 800952e:	42b5      	cmp	r5, r6
 8009530:	d11a      	bne.n	8009568 <_printf_common+0xc8>
 8009532:	2000      	movs	r0, #0
 8009534:	e008      	b.n	8009548 <_printf_common+0xa8>
 8009536:	2301      	movs	r3, #1
 8009538:	4652      	mov	r2, sl
 800953a:	4641      	mov	r1, r8
 800953c:	4638      	mov	r0, r7
 800953e:	47c8      	blx	r9
 8009540:	3001      	adds	r0, #1
 8009542:	d103      	bne.n	800954c <_printf_common+0xac>
 8009544:	f04f 30ff 	mov.w	r0, #4294967295
 8009548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954c:	3501      	adds	r5, #1
 800954e:	e7c6      	b.n	80094de <_printf_common+0x3e>
 8009550:	18e1      	adds	r1, r4, r3
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	2030      	movs	r0, #48	@ 0x30
 8009556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800955a:	4422      	add	r2, r4
 800955c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009564:	3302      	adds	r3, #2
 8009566:	e7c7      	b.n	80094f8 <_printf_common+0x58>
 8009568:	2301      	movs	r3, #1
 800956a:	4622      	mov	r2, r4
 800956c:	4641      	mov	r1, r8
 800956e:	4638      	mov	r0, r7
 8009570:	47c8      	blx	r9
 8009572:	3001      	adds	r0, #1
 8009574:	d0e6      	beq.n	8009544 <_printf_common+0xa4>
 8009576:	3601      	adds	r6, #1
 8009578:	e7d9      	b.n	800952e <_printf_common+0x8e>
	...

0800957c <_printf_i>:
 800957c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	7e0f      	ldrb	r7, [r1, #24]
 8009582:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009584:	2f78      	cmp	r7, #120	@ 0x78
 8009586:	4691      	mov	r9, r2
 8009588:	4680      	mov	r8, r0
 800958a:	460c      	mov	r4, r1
 800958c:	469a      	mov	sl, r3
 800958e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009592:	d807      	bhi.n	80095a4 <_printf_i+0x28>
 8009594:	2f62      	cmp	r7, #98	@ 0x62
 8009596:	d80a      	bhi.n	80095ae <_printf_i+0x32>
 8009598:	2f00      	cmp	r7, #0
 800959a:	f000 80d1 	beq.w	8009740 <_printf_i+0x1c4>
 800959e:	2f58      	cmp	r7, #88	@ 0x58
 80095a0:	f000 80b8 	beq.w	8009714 <_printf_i+0x198>
 80095a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095ac:	e03a      	b.n	8009624 <_printf_i+0xa8>
 80095ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095b2:	2b15      	cmp	r3, #21
 80095b4:	d8f6      	bhi.n	80095a4 <_printf_i+0x28>
 80095b6:	a101      	add	r1, pc, #4	@ (adr r1, 80095bc <_printf_i+0x40>)
 80095b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095bc:	08009615 	.word	0x08009615
 80095c0:	08009629 	.word	0x08009629
 80095c4:	080095a5 	.word	0x080095a5
 80095c8:	080095a5 	.word	0x080095a5
 80095cc:	080095a5 	.word	0x080095a5
 80095d0:	080095a5 	.word	0x080095a5
 80095d4:	08009629 	.word	0x08009629
 80095d8:	080095a5 	.word	0x080095a5
 80095dc:	080095a5 	.word	0x080095a5
 80095e0:	080095a5 	.word	0x080095a5
 80095e4:	080095a5 	.word	0x080095a5
 80095e8:	08009727 	.word	0x08009727
 80095ec:	08009653 	.word	0x08009653
 80095f0:	080096e1 	.word	0x080096e1
 80095f4:	080095a5 	.word	0x080095a5
 80095f8:	080095a5 	.word	0x080095a5
 80095fc:	08009749 	.word	0x08009749
 8009600:	080095a5 	.word	0x080095a5
 8009604:	08009653 	.word	0x08009653
 8009608:	080095a5 	.word	0x080095a5
 800960c:	080095a5 	.word	0x080095a5
 8009610:	080096e9 	.word	0x080096e9
 8009614:	6833      	ldr	r3, [r6, #0]
 8009616:	1d1a      	adds	r2, r3, #4
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6032      	str	r2, [r6, #0]
 800961c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009624:	2301      	movs	r3, #1
 8009626:	e09c      	b.n	8009762 <_printf_i+0x1e6>
 8009628:	6833      	ldr	r3, [r6, #0]
 800962a:	6820      	ldr	r0, [r4, #0]
 800962c:	1d19      	adds	r1, r3, #4
 800962e:	6031      	str	r1, [r6, #0]
 8009630:	0606      	lsls	r6, r0, #24
 8009632:	d501      	bpl.n	8009638 <_printf_i+0xbc>
 8009634:	681d      	ldr	r5, [r3, #0]
 8009636:	e003      	b.n	8009640 <_printf_i+0xc4>
 8009638:	0645      	lsls	r5, r0, #25
 800963a:	d5fb      	bpl.n	8009634 <_printf_i+0xb8>
 800963c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009640:	2d00      	cmp	r5, #0
 8009642:	da03      	bge.n	800964c <_printf_i+0xd0>
 8009644:	232d      	movs	r3, #45	@ 0x2d
 8009646:	426d      	negs	r5, r5
 8009648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800964c:	4858      	ldr	r0, [pc, #352]	@ (80097b0 <_printf_i+0x234>)
 800964e:	230a      	movs	r3, #10
 8009650:	e011      	b.n	8009676 <_printf_i+0xfa>
 8009652:	6821      	ldr	r1, [r4, #0]
 8009654:	6833      	ldr	r3, [r6, #0]
 8009656:	0608      	lsls	r0, r1, #24
 8009658:	f853 5b04 	ldr.w	r5, [r3], #4
 800965c:	d402      	bmi.n	8009664 <_printf_i+0xe8>
 800965e:	0649      	lsls	r1, r1, #25
 8009660:	bf48      	it	mi
 8009662:	b2ad      	uxthmi	r5, r5
 8009664:	2f6f      	cmp	r7, #111	@ 0x6f
 8009666:	4852      	ldr	r0, [pc, #328]	@ (80097b0 <_printf_i+0x234>)
 8009668:	6033      	str	r3, [r6, #0]
 800966a:	bf14      	ite	ne
 800966c:	230a      	movne	r3, #10
 800966e:	2308      	moveq	r3, #8
 8009670:	2100      	movs	r1, #0
 8009672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009676:	6866      	ldr	r6, [r4, #4]
 8009678:	60a6      	str	r6, [r4, #8]
 800967a:	2e00      	cmp	r6, #0
 800967c:	db05      	blt.n	800968a <_printf_i+0x10e>
 800967e:	6821      	ldr	r1, [r4, #0]
 8009680:	432e      	orrs	r6, r5
 8009682:	f021 0104 	bic.w	r1, r1, #4
 8009686:	6021      	str	r1, [r4, #0]
 8009688:	d04b      	beq.n	8009722 <_printf_i+0x1a6>
 800968a:	4616      	mov	r6, r2
 800968c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009690:	fb03 5711 	mls	r7, r3, r1, r5
 8009694:	5dc7      	ldrb	r7, [r0, r7]
 8009696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800969a:	462f      	mov	r7, r5
 800969c:	42bb      	cmp	r3, r7
 800969e:	460d      	mov	r5, r1
 80096a0:	d9f4      	bls.n	800968c <_printf_i+0x110>
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d10b      	bne.n	80096be <_printf_i+0x142>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	07df      	lsls	r7, r3, #31
 80096aa:	d508      	bpl.n	80096be <_printf_i+0x142>
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	6861      	ldr	r1, [r4, #4]
 80096b0:	4299      	cmp	r1, r3
 80096b2:	bfde      	ittt	le
 80096b4:	2330      	movle	r3, #48	@ 0x30
 80096b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096be:	1b92      	subs	r2, r2, r6
 80096c0:	6122      	str	r2, [r4, #16]
 80096c2:	f8cd a000 	str.w	sl, [sp]
 80096c6:	464b      	mov	r3, r9
 80096c8:	aa03      	add	r2, sp, #12
 80096ca:	4621      	mov	r1, r4
 80096cc:	4640      	mov	r0, r8
 80096ce:	f7ff fee7 	bl	80094a0 <_printf_common>
 80096d2:	3001      	adds	r0, #1
 80096d4:	d14a      	bne.n	800976c <_printf_i+0x1f0>
 80096d6:	f04f 30ff 	mov.w	r0, #4294967295
 80096da:	b004      	add	sp, #16
 80096dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	f043 0320 	orr.w	r3, r3, #32
 80096e6:	6023      	str	r3, [r4, #0]
 80096e8:	4832      	ldr	r0, [pc, #200]	@ (80097b4 <_printf_i+0x238>)
 80096ea:	2778      	movs	r7, #120	@ 0x78
 80096ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	6831      	ldr	r1, [r6, #0]
 80096f4:	061f      	lsls	r7, r3, #24
 80096f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80096fa:	d402      	bmi.n	8009702 <_printf_i+0x186>
 80096fc:	065f      	lsls	r7, r3, #25
 80096fe:	bf48      	it	mi
 8009700:	b2ad      	uxthmi	r5, r5
 8009702:	6031      	str	r1, [r6, #0]
 8009704:	07d9      	lsls	r1, r3, #31
 8009706:	bf44      	itt	mi
 8009708:	f043 0320 	orrmi.w	r3, r3, #32
 800970c:	6023      	strmi	r3, [r4, #0]
 800970e:	b11d      	cbz	r5, 8009718 <_printf_i+0x19c>
 8009710:	2310      	movs	r3, #16
 8009712:	e7ad      	b.n	8009670 <_printf_i+0xf4>
 8009714:	4826      	ldr	r0, [pc, #152]	@ (80097b0 <_printf_i+0x234>)
 8009716:	e7e9      	b.n	80096ec <_printf_i+0x170>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	f023 0320 	bic.w	r3, r3, #32
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	e7f6      	b.n	8009710 <_printf_i+0x194>
 8009722:	4616      	mov	r6, r2
 8009724:	e7bd      	b.n	80096a2 <_printf_i+0x126>
 8009726:	6833      	ldr	r3, [r6, #0]
 8009728:	6825      	ldr	r5, [r4, #0]
 800972a:	6961      	ldr	r1, [r4, #20]
 800972c:	1d18      	adds	r0, r3, #4
 800972e:	6030      	str	r0, [r6, #0]
 8009730:	062e      	lsls	r6, r5, #24
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	d501      	bpl.n	800973a <_printf_i+0x1be>
 8009736:	6019      	str	r1, [r3, #0]
 8009738:	e002      	b.n	8009740 <_printf_i+0x1c4>
 800973a:	0668      	lsls	r0, r5, #25
 800973c:	d5fb      	bpl.n	8009736 <_printf_i+0x1ba>
 800973e:	8019      	strh	r1, [r3, #0]
 8009740:	2300      	movs	r3, #0
 8009742:	6123      	str	r3, [r4, #16]
 8009744:	4616      	mov	r6, r2
 8009746:	e7bc      	b.n	80096c2 <_printf_i+0x146>
 8009748:	6833      	ldr	r3, [r6, #0]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	6032      	str	r2, [r6, #0]
 800974e:	681e      	ldr	r6, [r3, #0]
 8009750:	6862      	ldr	r2, [r4, #4]
 8009752:	2100      	movs	r1, #0
 8009754:	4630      	mov	r0, r6
 8009756:	f7f6 fd3b 	bl	80001d0 <memchr>
 800975a:	b108      	cbz	r0, 8009760 <_printf_i+0x1e4>
 800975c:	1b80      	subs	r0, r0, r6
 800975e:	6060      	str	r0, [r4, #4]
 8009760:	6863      	ldr	r3, [r4, #4]
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	2300      	movs	r3, #0
 8009766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800976a:	e7aa      	b.n	80096c2 <_printf_i+0x146>
 800976c:	6923      	ldr	r3, [r4, #16]
 800976e:	4632      	mov	r2, r6
 8009770:	4649      	mov	r1, r9
 8009772:	4640      	mov	r0, r8
 8009774:	47d0      	blx	sl
 8009776:	3001      	adds	r0, #1
 8009778:	d0ad      	beq.n	80096d6 <_printf_i+0x15a>
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	079b      	lsls	r3, r3, #30
 800977e:	d413      	bmi.n	80097a8 <_printf_i+0x22c>
 8009780:	68e0      	ldr	r0, [r4, #12]
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	4298      	cmp	r0, r3
 8009786:	bfb8      	it	lt
 8009788:	4618      	movlt	r0, r3
 800978a:	e7a6      	b.n	80096da <_printf_i+0x15e>
 800978c:	2301      	movs	r3, #1
 800978e:	4632      	mov	r2, r6
 8009790:	4649      	mov	r1, r9
 8009792:	4640      	mov	r0, r8
 8009794:	47d0      	blx	sl
 8009796:	3001      	adds	r0, #1
 8009798:	d09d      	beq.n	80096d6 <_printf_i+0x15a>
 800979a:	3501      	adds	r5, #1
 800979c:	68e3      	ldr	r3, [r4, #12]
 800979e:	9903      	ldr	r1, [sp, #12]
 80097a0:	1a5b      	subs	r3, r3, r1
 80097a2:	42ab      	cmp	r3, r5
 80097a4:	dcf2      	bgt.n	800978c <_printf_i+0x210>
 80097a6:	e7eb      	b.n	8009780 <_printf_i+0x204>
 80097a8:	2500      	movs	r5, #0
 80097aa:	f104 0619 	add.w	r6, r4, #25
 80097ae:	e7f5      	b.n	800979c <_printf_i+0x220>
 80097b0:	0800aaa8 	.word	0x0800aaa8
 80097b4:	0800aab9 	.word	0x0800aab9

080097b8 <__sflush_r>:
 80097b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c0:	0716      	lsls	r6, r2, #28
 80097c2:	4605      	mov	r5, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	d454      	bmi.n	8009872 <__sflush_r+0xba>
 80097c8:	684b      	ldr	r3, [r1, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	dc02      	bgt.n	80097d4 <__sflush_r+0x1c>
 80097ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dd48      	ble.n	8009866 <__sflush_r+0xae>
 80097d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097d6:	2e00      	cmp	r6, #0
 80097d8:	d045      	beq.n	8009866 <__sflush_r+0xae>
 80097da:	2300      	movs	r3, #0
 80097dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097e0:	682f      	ldr	r7, [r5, #0]
 80097e2:	6a21      	ldr	r1, [r4, #32]
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	d030      	beq.n	800984a <__sflush_r+0x92>
 80097e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	0759      	lsls	r1, r3, #29
 80097ee:	d505      	bpl.n	80097fc <__sflush_r+0x44>
 80097f0:	6863      	ldr	r3, [r4, #4]
 80097f2:	1ad2      	subs	r2, r2, r3
 80097f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097f6:	b10b      	cbz	r3, 80097fc <__sflush_r+0x44>
 80097f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097fa:	1ad2      	subs	r2, r2, r3
 80097fc:	2300      	movs	r3, #0
 80097fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009800:	6a21      	ldr	r1, [r4, #32]
 8009802:	4628      	mov	r0, r5
 8009804:	47b0      	blx	r6
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	d106      	bne.n	800981a <__sflush_r+0x62>
 800980c:	6829      	ldr	r1, [r5, #0]
 800980e:	291d      	cmp	r1, #29
 8009810:	d82b      	bhi.n	800986a <__sflush_r+0xb2>
 8009812:	4a2a      	ldr	r2, [pc, #168]	@ (80098bc <__sflush_r+0x104>)
 8009814:	40ca      	lsrs	r2, r1
 8009816:	07d6      	lsls	r6, r2, #31
 8009818:	d527      	bpl.n	800986a <__sflush_r+0xb2>
 800981a:	2200      	movs	r2, #0
 800981c:	6062      	str	r2, [r4, #4]
 800981e:	04d9      	lsls	r1, r3, #19
 8009820:	6922      	ldr	r2, [r4, #16]
 8009822:	6022      	str	r2, [r4, #0]
 8009824:	d504      	bpl.n	8009830 <__sflush_r+0x78>
 8009826:	1c42      	adds	r2, r0, #1
 8009828:	d101      	bne.n	800982e <__sflush_r+0x76>
 800982a:	682b      	ldr	r3, [r5, #0]
 800982c:	b903      	cbnz	r3, 8009830 <__sflush_r+0x78>
 800982e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009832:	602f      	str	r7, [r5, #0]
 8009834:	b1b9      	cbz	r1, 8009866 <__sflush_r+0xae>
 8009836:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800983a:	4299      	cmp	r1, r3
 800983c:	d002      	beq.n	8009844 <__sflush_r+0x8c>
 800983e:	4628      	mov	r0, r5
 8009840:	f7ff fbd6 	bl	8008ff0 <_free_r>
 8009844:	2300      	movs	r3, #0
 8009846:	6363      	str	r3, [r4, #52]	@ 0x34
 8009848:	e00d      	b.n	8009866 <__sflush_r+0xae>
 800984a:	2301      	movs	r3, #1
 800984c:	4628      	mov	r0, r5
 800984e:	47b0      	blx	r6
 8009850:	4602      	mov	r2, r0
 8009852:	1c50      	adds	r0, r2, #1
 8009854:	d1c9      	bne.n	80097ea <__sflush_r+0x32>
 8009856:	682b      	ldr	r3, [r5, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0c6      	beq.n	80097ea <__sflush_r+0x32>
 800985c:	2b1d      	cmp	r3, #29
 800985e:	d001      	beq.n	8009864 <__sflush_r+0xac>
 8009860:	2b16      	cmp	r3, #22
 8009862:	d11e      	bne.n	80098a2 <__sflush_r+0xea>
 8009864:	602f      	str	r7, [r5, #0]
 8009866:	2000      	movs	r0, #0
 8009868:	e022      	b.n	80098b0 <__sflush_r+0xf8>
 800986a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986e:	b21b      	sxth	r3, r3
 8009870:	e01b      	b.n	80098aa <__sflush_r+0xf2>
 8009872:	690f      	ldr	r7, [r1, #16]
 8009874:	2f00      	cmp	r7, #0
 8009876:	d0f6      	beq.n	8009866 <__sflush_r+0xae>
 8009878:	0793      	lsls	r3, r2, #30
 800987a:	680e      	ldr	r6, [r1, #0]
 800987c:	bf08      	it	eq
 800987e:	694b      	ldreq	r3, [r1, #20]
 8009880:	600f      	str	r7, [r1, #0]
 8009882:	bf18      	it	ne
 8009884:	2300      	movne	r3, #0
 8009886:	eba6 0807 	sub.w	r8, r6, r7
 800988a:	608b      	str	r3, [r1, #8]
 800988c:	f1b8 0f00 	cmp.w	r8, #0
 8009890:	dde9      	ble.n	8009866 <__sflush_r+0xae>
 8009892:	6a21      	ldr	r1, [r4, #32]
 8009894:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009896:	4643      	mov	r3, r8
 8009898:	463a      	mov	r2, r7
 800989a:	4628      	mov	r0, r5
 800989c:	47b0      	blx	r6
 800989e:	2800      	cmp	r0, #0
 80098a0:	dc08      	bgt.n	80098b4 <__sflush_r+0xfc>
 80098a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098aa:	81a3      	strh	r3, [r4, #12]
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295
 80098b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b4:	4407      	add	r7, r0
 80098b6:	eba8 0800 	sub.w	r8, r8, r0
 80098ba:	e7e7      	b.n	800988c <__sflush_r+0xd4>
 80098bc:	20400001 	.word	0x20400001

080098c0 <_fflush_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	690b      	ldr	r3, [r1, #16]
 80098c4:	4605      	mov	r5, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	b913      	cbnz	r3, 80098d0 <_fflush_r+0x10>
 80098ca:	2500      	movs	r5, #0
 80098cc:	4628      	mov	r0, r5
 80098ce:	bd38      	pop	{r3, r4, r5, pc}
 80098d0:	b118      	cbz	r0, 80098da <_fflush_r+0x1a>
 80098d2:	6a03      	ldr	r3, [r0, #32]
 80098d4:	b90b      	cbnz	r3, 80098da <_fflush_r+0x1a>
 80098d6:	f7ff fa47 	bl	8008d68 <__sinit>
 80098da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0f3      	beq.n	80098ca <_fflush_r+0xa>
 80098e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098e4:	07d0      	lsls	r0, r2, #31
 80098e6:	d404      	bmi.n	80098f2 <_fflush_r+0x32>
 80098e8:	0599      	lsls	r1, r3, #22
 80098ea:	d402      	bmi.n	80098f2 <_fflush_r+0x32>
 80098ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ee:	f7ff fb50 	bl	8008f92 <__retarget_lock_acquire_recursive>
 80098f2:	4628      	mov	r0, r5
 80098f4:	4621      	mov	r1, r4
 80098f6:	f7ff ff5f 	bl	80097b8 <__sflush_r>
 80098fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098fc:	07da      	lsls	r2, r3, #31
 80098fe:	4605      	mov	r5, r0
 8009900:	d4e4      	bmi.n	80098cc <_fflush_r+0xc>
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	059b      	lsls	r3, r3, #22
 8009906:	d4e1      	bmi.n	80098cc <_fflush_r+0xc>
 8009908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800990a:	f7ff fb43 	bl	8008f94 <__retarget_lock_release_recursive>
 800990e:	e7dd      	b.n	80098cc <_fflush_r+0xc>

08009910 <fiprintf>:
 8009910:	b40e      	push	{r1, r2, r3}
 8009912:	b503      	push	{r0, r1, lr}
 8009914:	4601      	mov	r1, r0
 8009916:	ab03      	add	r3, sp, #12
 8009918:	4805      	ldr	r0, [pc, #20]	@ (8009930 <fiprintf+0x20>)
 800991a:	f853 2b04 	ldr.w	r2, [r3], #4
 800991e:	6800      	ldr	r0, [r0, #0]
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	f000 f88f 	bl	8009a44 <_vfiprintf_r>
 8009926:	b002      	add	sp, #8
 8009928:	f85d eb04 	ldr.w	lr, [sp], #4
 800992c:	b003      	add	sp, #12
 800992e:	4770      	bx	lr
 8009930:	200000a8 	.word	0x200000a8

08009934 <memmove>:
 8009934:	4288      	cmp	r0, r1
 8009936:	b510      	push	{r4, lr}
 8009938:	eb01 0402 	add.w	r4, r1, r2
 800993c:	d902      	bls.n	8009944 <memmove+0x10>
 800993e:	4284      	cmp	r4, r0
 8009940:	4623      	mov	r3, r4
 8009942:	d807      	bhi.n	8009954 <memmove+0x20>
 8009944:	1e43      	subs	r3, r0, #1
 8009946:	42a1      	cmp	r1, r4
 8009948:	d008      	beq.n	800995c <memmove+0x28>
 800994a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800994e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009952:	e7f8      	b.n	8009946 <memmove+0x12>
 8009954:	4402      	add	r2, r0
 8009956:	4601      	mov	r1, r0
 8009958:	428a      	cmp	r2, r1
 800995a:	d100      	bne.n	800995e <memmove+0x2a>
 800995c:	bd10      	pop	{r4, pc}
 800995e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009966:	e7f7      	b.n	8009958 <memmove+0x24>

08009968 <_sbrk_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d06      	ldr	r5, [pc, #24]	@ (8009984 <_sbrk_r+0x1c>)
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	4608      	mov	r0, r1
 8009972:	602b      	str	r3, [r5, #0]
 8009974:	f7f8 ff64 	bl	8002840 <_sbrk>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_sbrk_r+0x1a>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_sbrk_r+0x1a>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	2000432c 	.word	0x2000432c

08009988 <abort>:
 8009988:	b508      	push	{r3, lr}
 800998a:	2006      	movs	r0, #6
 800998c:	f000 fa2e 	bl	8009dec <raise>
 8009990:	2001      	movs	r0, #1
 8009992:	f7f8 fedc 	bl	800274e <_exit>

08009996 <_realloc_r>:
 8009996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999a:	4607      	mov	r7, r0
 800999c:	4614      	mov	r4, r2
 800999e:	460d      	mov	r5, r1
 80099a0:	b921      	cbnz	r1, 80099ac <_realloc_r+0x16>
 80099a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099a6:	4611      	mov	r1, r2
 80099a8:	f7ff bb96 	b.w	80090d8 <_malloc_r>
 80099ac:	b92a      	cbnz	r2, 80099ba <_realloc_r+0x24>
 80099ae:	f7ff fb1f 	bl	8008ff0 <_free_r>
 80099b2:	4625      	mov	r5, r4
 80099b4:	4628      	mov	r0, r5
 80099b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ba:	f000 fa33 	bl	8009e24 <_malloc_usable_size_r>
 80099be:	4284      	cmp	r4, r0
 80099c0:	4606      	mov	r6, r0
 80099c2:	d802      	bhi.n	80099ca <_realloc_r+0x34>
 80099c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099c8:	d8f4      	bhi.n	80099b4 <_realloc_r+0x1e>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4638      	mov	r0, r7
 80099ce:	f7ff fb83 	bl	80090d8 <_malloc_r>
 80099d2:	4680      	mov	r8, r0
 80099d4:	b908      	cbnz	r0, 80099da <_realloc_r+0x44>
 80099d6:	4645      	mov	r5, r8
 80099d8:	e7ec      	b.n	80099b4 <_realloc_r+0x1e>
 80099da:	42b4      	cmp	r4, r6
 80099dc:	4622      	mov	r2, r4
 80099de:	4629      	mov	r1, r5
 80099e0:	bf28      	it	cs
 80099e2:	4632      	movcs	r2, r6
 80099e4:	f7ff fad7 	bl	8008f96 <memcpy>
 80099e8:	4629      	mov	r1, r5
 80099ea:	4638      	mov	r0, r7
 80099ec:	f7ff fb00 	bl	8008ff0 <_free_r>
 80099f0:	e7f1      	b.n	80099d6 <_realloc_r+0x40>

080099f2 <__sfputc_r>:
 80099f2:	6893      	ldr	r3, [r2, #8]
 80099f4:	3b01      	subs	r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	b410      	push	{r4}
 80099fa:	6093      	str	r3, [r2, #8]
 80099fc:	da08      	bge.n	8009a10 <__sfputc_r+0x1e>
 80099fe:	6994      	ldr	r4, [r2, #24]
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	db01      	blt.n	8009a08 <__sfputc_r+0x16>
 8009a04:	290a      	cmp	r1, #10
 8009a06:	d103      	bne.n	8009a10 <__sfputc_r+0x1e>
 8009a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a0c:	f000 b932 	b.w	8009c74 <__swbuf_r>
 8009a10:	6813      	ldr	r3, [r2, #0]
 8009a12:	1c58      	adds	r0, r3, #1
 8009a14:	6010      	str	r0, [r2, #0]
 8009a16:	7019      	strb	r1, [r3, #0]
 8009a18:	4608      	mov	r0, r1
 8009a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <__sfputs_r>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	4614      	mov	r4, r2
 8009a28:	18d5      	adds	r5, r2, r3
 8009a2a:	42ac      	cmp	r4, r5
 8009a2c:	d101      	bne.n	8009a32 <__sfputs_r+0x12>
 8009a2e:	2000      	movs	r0, #0
 8009a30:	e007      	b.n	8009a42 <__sfputs_r+0x22>
 8009a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a36:	463a      	mov	r2, r7
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7ff ffda 	bl	80099f2 <__sfputc_r>
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	d1f3      	bne.n	8009a2a <__sfputs_r+0xa>
 8009a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a44 <_vfiprintf_r>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	460d      	mov	r5, r1
 8009a4a:	b09d      	sub	sp, #116	@ 0x74
 8009a4c:	4614      	mov	r4, r2
 8009a4e:	4698      	mov	r8, r3
 8009a50:	4606      	mov	r6, r0
 8009a52:	b118      	cbz	r0, 8009a5c <_vfiprintf_r+0x18>
 8009a54:	6a03      	ldr	r3, [r0, #32]
 8009a56:	b90b      	cbnz	r3, 8009a5c <_vfiprintf_r+0x18>
 8009a58:	f7ff f986 	bl	8008d68 <__sinit>
 8009a5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a5e:	07d9      	lsls	r1, r3, #31
 8009a60:	d405      	bmi.n	8009a6e <_vfiprintf_r+0x2a>
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	059a      	lsls	r2, r3, #22
 8009a66:	d402      	bmi.n	8009a6e <_vfiprintf_r+0x2a>
 8009a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a6a:	f7ff fa92 	bl	8008f92 <__retarget_lock_acquire_recursive>
 8009a6e:	89ab      	ldrh	r3, [r5, #12]
 8009a70:	071b      	lsls	r3, r3, #28
 8009a72:	d501      	bpl.n	8009a78 <_vfiprintf_r+0x34>
 8009a74:	692b      	ldr	r3, [r5, #16]
 8009a76:	b99b      	cbnz	r3, 8009aa0 <_vfiprintf_r+0x5c>
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f000 f938 	bl	8009cf0 <__swsetup_r>
 8009a80:	b170      	cbz	r0, 8009aa0 <_vfiprintf_r+0x5c>
 8009a82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a84:	07dc      	lsls	r4, r3, #31
 8009a86:	d504      	bpl.n	8009a92 <_vfiprintf_r+0x4e>
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8c:	b01d      	add	sp, #116	@ 0x74
 8009a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a92:	89ab      	ldrh	r3, [r5, #12]
 8009a94:	0598      	lsls	r0, r3, #22
 8009a96:	d4f7      	bmi.n	8009a88 <_vfiprintf_r+0x44>
 8009a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a9a:	f7ff fa7b 	bl	8008f94 <__retarget_lock_release_recursive>
 8009a9e:	e7f3      	b.n	8009a88 <_vfiprintf_r+0x44>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aa4:	2320      	movs	r3, #32
 8009aa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aae:	2330      	movs	r3, #48	@ 0x30
 8009ab0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c60 <_vfiprintf_r+0x21c>
 8009ab4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ab8:	f04f 0901 	mov.w	r9, #1
 8009abc:	4623      	mov	r3, r4
 8009abe:	469a      	mov	sl, r3
 8009ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac4:	b10a      	cbz	r2, 8009aca <_vfiprintf_r+0x86>
 8009ac6:	2a25      	cmp	r2, #37	@ 0x25
 8009ac8:	d1f9      	bne.n	8009abe <_vfiprintf_r+0x7a>
 8009aca:	ebba 0b04 	subs.w	fp, sl, r4
 8009ace:	d00b      	beq.n	8009ae8 <_vfiprintf_r+0xa4>
 8009ad0:	465b      	mov	r3, fp
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f7ff ffa2 	bl	8009a20 <__sfputs_r>
 8009adc:	3001      	adds	r0, #1
 8009ade:	f000 80a7 	beq.w	8009c30 <_vfiprintf_r+0x1ec>
 8009ae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ae4:	445a      	add	r2, fp
 8009ae6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 809f 	beq.w	8009c30 <_vfiprintf_r+0x1ec>
 8009af2:	2300      	movs	r3, #0
 8009af4:	f04f 32ff 	mov.w	r2, #4294967295
 8009af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009afc:	f10a 0a01 	add.w	sl, sl, #1
 8009b00:	9304      	str	r3, [sp, #16]
 8009b02:	9307      	str	r3, [sp, #28]
 8009b04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b08:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b0a:	4654      	mov	r4, sl
 8009b0c:	2205      	movs	r2, #5
 8009b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b12:	4853      	ldr	r0, [pc, #332]	@ (8009c60 <_vfiprintf_r+0x21c>)
 8009b14:	f7f6 fb5c 	bl	80001d0 <memchr>
 8009b18:	9a04      	ldr	r2, [sp, #16]
 8009b1a:	b9d8      	cbnz	r0, 8009b54 <_vfiprintf_r+0x110>
 8009b1c:	06d1      	lsls	r1, r2, #27
 8009b1e:	bf44      	itt	mi
 8009b20:	2320      	movmi	r3, #32
 8009b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b26:	0713      	lsls	r3, r2, #28
 8009b28:	bf44      	itt	mi
 8009b2a:	232b      	movmi	r3, #43	@ 0x2b
 8009b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b30:	f89a 3000 	ldrb.w	r3, [sl]
 8009b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b36:	d015      	beq.n	8009b64 <_vfiprintf_r+0x120>
 8009b38:	9a07      	ldr	r2, [sp, #28]
 8009b3a:	4654      	mov	r4, sl
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	f04f 0c0a 	mov.w	ip, #10
 8009b42:	4621      	mov	r1, r4
 8009b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b48:	3b30      	subs	r3, #48	@ 0x30
 8009b4a:	2b09      	cmp	r3, #9
 8009b4c:	d94b      	bls.n	8009be6 <_vfiprintf_r+0x1a2>
 8009b4e:	b1b0      	cbz	r0, 8009b7e <_vfiprintf_r+0x13a>
 8009b50:	9207      	str	r2, [sp, #28]
 8009b52:	e014      	b.n	8009b7e <_vfiprintf_r+0x13a>
 8009b54:	eba0 0308 	sub.w	r3, r0, r8
 8009b58:	fa09 f303 	lsl.w	r3, r9, r3
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	9304      	str	r3, [sp, #16]
 8009b60:	46a2      	mov	sl, r4
 8009b62:	e7d2      	b.n	8009b0a <_vfiprintf_r+0xc6>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	1d19      	adds	r1, r3, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	9103      	str	r1, [sp, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfbb      	ittet	lt
 8009b70:	425b      	neglt	r3, r3
 8009b72:	f042 0202 	orrlt.w	r2, r2, #2
 8009b76:	9307      	strge	r3, [sp, #28]
 8009b78:	9307      	strlt	r3, [sp, #28]
 8009b7a:	bfb8      	it	lt
 8009b7c:	9204      	strlt	r2, [sp, #16]
 8009b7e:	7823      	ldrb	r3, [r4, #0]
 8009b80:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b82:	d10a      	bne.n	8009b9a <_vfiprintf_r+0x156>
 8009b84:	7863      	ldrb	r3, [r4, #1]
 8009b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b88:	d132      	bne.n	8009bf0 <_vfiprintf_r+0x1ac>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	1d1a      	adds	r2, r3, #4
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	9203      	str	r2, [sp, #12]
 8009b92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b96:	3402      	adds	r4, #2
 8009b98:	9305      	str	r3, [sp, #20]
 8009b9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c70 <_vfiprintf_r+0x22c>
 8009b9e:	7821      	ldrb	r1, [r4, #0]
 8009ba0:	2203      	movs	r2, #3
 8009ba2:	4650      	mov	r0, sl
 8009ba4:	f7f6 fb14 	bl	80001d0 <memchr>
 8009ba8:	b138      	cbz	r0, 8009bba <_vfiprintf_r+0x176>
 8009baa:	9b04      	ldr	r3, [sp, #16]
 8009bac:	eba0 000a 	sub.w	r0, r0, sl
 8009bb0:	2240      	movs	r2, #64	@ 0x40
 8009bb2:	4082      	lsls	r2, r0
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	3401      	adds	r4, #1
 8009bb8:	9304      	str	r3, [sp, #16]
 8009bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbe:	4829      	ldr	r0, [pc, #164]	@ (8009c64 <_vfiprintf_r+0x220>)
 8009bc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bc4:	2206      	movs	r2, #6
 8009bc6:	f7f6 fb03 	bl	80001d0 <memchr>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d03f      	beq.n	8009c4e <_vfiprintf_r+0x20a>
 8009bce:	4b26      	ldr	r3, [pc, #152]	@ (8009c68 <_vfiprintf_r+0x224>)
 8009bd0:	bb1b      	cbnz	r3, 8009c1a <_vfiprintf_r+0x1d6>
 8009bd2:	9b03      	ldr	r3, [sp, #12]
 8009bd4:	3307      	adds	r3, #7
 8009bd6:	f023 0307 	bic.w	r3, r3, #7
 8009bda:	3308      	adds	r3, #8
 8009bdc:	9303      	str	r3, [sp, #12]
 8009bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be0:	443b      	add	r3, r7
 8009be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009be4:	e76a      	b.n	8009abc <_vfiprintf_r+0x78>
 8009be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bea:	460c      	mov	r4, r1
 8009bec:	2001      	movs	r0, #1
 8009bee:	e7a8      	b.n	8009b42 <_vfiprintf_r+0xfe>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	3401      	adds	r4, #1
 8009bf4:	9305      	str	r3, [sp, #20]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	f04f 0c0a 	mov.w	ip, #10
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c02:	3a30      	subs	r2, #48	@ 0x30
 8009c04:	2a09      	cmp	r2, #9
 8009c06:	d903      	bls.n	8009c10 <_vfiprintf_r+0x1cc>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0c6      	beq.n	8009b9a <_vfiprintf_r+0x156>
 8009c0c:	9105      	str	r1, [sp, #20]
 8009c0e:	e7c4      	b.n	8009b9a <_vfiprintf_r+0x156>
 8009c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c14:	4604      	mov	r4, r0
 8009c16:	2301      	movs	r3, #1
 8009c18:	e7f0      	b.n	8009bfc <_vfiprintf_r+0x1b8>
 8009c1a:	ab03      	add	r3, sp, #12
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	462a      	mov	r2, r5
 8009c20:	4b12      	ldr	r3, [pc, #72]	@ (8009c6c <_vfiprintf_r+0x228>)
 8009c22:	a904      	add	r1, sp, #16
 8009c24:	4630      	mov	r0, r6
 8009c26:	f3af 8000 	nop.w
 8009c2a:	4607      	mov	r7, r0
 8009c2c:	1c78      	adds	r0, r7, #1
 8009c2e:	d1d6      	bne.n	8009bde <_vfiprintf_r+0x19a>
 8009c30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c32:	07d9      	lsls	r1, r3, #31
 8009c34:	d405      	bmi.n	8009c42 <_vfiprintf_r+0x1fe>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	059a      	lsls	r2, r3, #22
 8009c3a:	d402      	bmi.n	8009c42 <_vfiprintf_r+0x1fe>
 8009c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c3e:	f7ff f9a9 	bl	8008f94 <__retarget_lock_release_recursive>
 8009c42:	89ab      	ldrh	r3, [r5, #12]
 8009c44:	065b      	lsls	r3, r3, #25
 8009c46:	f53f af1f 	bmi.w	8009a88 <_vfiprintf_r+0x44>
 8009c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c4c:	e71e      	b.n	8009a8c <_vfiprintf_r+0x48>
 8009c4e:	ab03      	add	r3, sp, #12
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	462a      	mov	r2, r5
 8009c54:	4b05      	ldr	r3, [pc, #20]	@ (8009c6c <_vfiprintf_r+0x228>)
 8009c56:	a904      	add	r1, sp, #16
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7ff fc8f 	bl	800957c <_printf_i>
 8009c5e:	e7e4      	b.n	8009c2a <_vfiprintf_r+0x1e6>
 8009c60:	0800aa97 	.word	0x0800aa97
 8009c64:	0800aaa1 	.word	0x0800aaa1
 8009c68:	00000000 	.word	0x00000000
 8009c6c:	08009a21 	.word	0x08009a21
 8009c70:	0800aa9d 	.word	0x0800aa9d

08009c74 <__swbuf_r>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	460e      	mov	r6, r1
 8009c78:	4614      	mov	r4, r2
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	b118      	cbz	r0, 8009c86 <__swbuf_r+0x12>
 8009c7e:	6a03      	ldr	r3, [r0, #32]
 8009c80:	b90b      	cbnz	r3, 8009c86 <__swbuf_r+0x12>
 8009c82:	f7ff f871 	bl	8008d68 <__sinit>
 8009c86:	69a3      	ldr	r3, [r4, #24]
 8009c88:	60a3      	str	r3, [r4, #8]
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	071a      	lsls	r2, r3, #28
 8009c8e:	d501      	bpl.n	8009c94 <__swbuf_r+0x20>
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	b943      	cbnz	r3, 8009ca6 <__swbuf_r+0x32>
 8009c94:	4621      	mov	r1, r4
 8009c96:	4628      	mov	r0, r5
 8009c98:	f000 f82a 	bl	8009cf0 <__swsetup_r>
 8009c9c:	b118      	cbz	r0, 8009ca6 <__swbuf_r+0x32>
 8009c9e:	f04f 37ff 	mov.w	r7, #4294967295
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	6922      	ldr	r2, [r4, #16]
 8009caa:	1a98      	subs	r0, r3, r2
 8009cac:	6963      	ldr	r3, [r4, #20]
 8009cae:	b2f6      	uxtb	r6, r6
 8009cb0:	4283      	cmp	r3, r0
 8009cb2:	4637      	mov	r7, r6
 8009cb4:	dc05      	bgt.n	8009cc2 <__swbuf_r+0x4e>
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f7ff fe01 	bl	80098c0 <_fflush_r>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d1ed      	bne.n	8009c9e <__swbuf_r+0x2a>
 8009cc2:	68a3      	ldr	r3, [r4, #8]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	60a3      	str	r3, [r4, #8]
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	6022      	str	r2, [r4, #0]
 8009cce:	701e      	strb	r6, [r3, #0]
 8009cd0:	6962      	ldr	r2, [r4, #20]
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d004      	beq.n	8009ce2 <__swbuf_r+0x6e>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	07db      	lsls	r3, r3, #31
 8009cdc:	d5e1      	bpl.n	8009ca2 <__swbuf_r+0x2e>
 8009cde:	2e0a      	cmp	r6, #10
 8009ce0:	d1df      	bne.n	8009ca2 <__swbuf_r+0x2e>
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f7ff fdeb 	bl	80098c0 <_fflush_r>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d0d9      	beq.n	8009ca2 <__swbuf_r+0x2e>
 8009cee:	e7d6      	b.n	8009c9e <__swbuf_r+0x2a>

08009cf0 <__swsetup_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4b29      	ldr	r3, [pc, #164]	@ (8009d98 <__swsetup_r+0xa8>)
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	b118      	cbz	r0, 8009d04 <__swsetup_r+0x14>
 8009cfc:	6a03      	ldr	r3, [r0, #32]
 8009cfe:	b90b      	cbnz	r3, 8009d04 <__swsetup_r+0x14>
 8009d00:	f7ff f832 	bl	8008d68 <__sinit>
 8009d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d08:	0719      	lsls	r1, r3, #28
 8009d0a:	d422      	bmi.n	8009d52 <__swsetup_r+0x62>
 8009d0c:	06da      	lsls	r2, r3, #27
 8009d0e:	d407      	bmi.n	8009d20 <__swsetup_r+0x30>
 8009d10:	2209      	movs	r2, #9
 8009d12:	602a      	str	r2, [r5, #0]
 8009d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d18:	81a3      	strh	r3, [r4, #12]
 8009d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1e:	e033      	b.n	8009d88 <__swsetup_r+0x98>
 8009d20:	0758      	lsls	r0, r3, #29
 8009d22:	d512      	bpl.n	8009d4a <__swsetup_r+0x5a>
 8009d24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d26:	b141      	cbz	r1, 8009d3a <__swsetup_r+0x4a>
 8009d28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d2c:	4299      	cmp	r1, r3
 8009d2e:	d002      	beq.n	8009d36 <__swsetup_r+0x46>
 8009d30:	4628      	mov	r0, r5
 8009d32:	f7ff f95d 	bl	8008ff0 <_free_r>
 8009d36:	2300      	movs	r3, #0
 8009d38:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	2300      	movs	r3, #0
 8009d44:	6063      	str	r3, [r4, #4]
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f043 0308 	orr.w	r3, r3, #8
 8009d50:	81a3      	strh	r3, [r4, #12]
 8009d52:	6923      	ldr	r3, [r4, #16]
 8009d54:	b94b      	cbnz	r3, 8009d6a <__swsetup_r+0x7a>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d60:	d003      	beq.n	8009d6a <__swsetup_r+0x7a>
 8009d62:	4621      	mov	r1, r4
 8009d64:	4628      	mov	r0, r5
 8009d66:	f000 f88b 	bl	8009e80 <__smakebuf_r>
 8009d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d6e:	f013 0201 	ands.w	r2, r3, #1
 8009d72:	d00a      	beq.n	8009d8a <__swsetup_r+0x9a>
 8009d74:	2200      	movs	r2, #0
 8009d76:	60a2      	str	r2, [r4, #8]
 8009d78:	6962      	ldr	r2, [r4, #20]
 8009d7a:	4252      	negs	r2, r2
 8009d7c:	61a2      	str	r2, [r4, #24]
 8009d7e:	6922      	ldr	r2, [r4, #16]
 8009d80:	b942      	cbnz	r2, 8009d94 <__swsetup_r+0xa4>
 8009d82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d86:	d1c5      	bne.n	8009d14 <__swsetup_r+0x24>
 8009d88:	bd38      	pop	{r3, r4, r5, pc}
 8009d8a:	0799      	lsls	r1, r3, #30
 8009d8c:	bf58      	it	pl
 8009d8e:	6962      	ldrpl	r2, [r4, #20]
 8009d90:	60a2      	str	r2, [r4, #8]
 8009d92:	e7f4      	b.n	8009d7e <__swsetup_r+0x8e>
 8009d94:	2000      	movs	r0, #0
 8009d96:	e7f7      	b.n	8009d88 <__swsetup_r+0x98>
 8009d98:	200000a8 	.word	0x200000a8

08009d9c <_raise_r>:
 8009d9c:	291f      	cmp	r1, #31
 8009d9e:	b538      	push	{r3, r4, r5, lr}
 8009da0:	4605      	mov	r5, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	d904      	bls.n	8009db0 <_raise_r+0x14>
 8009da6:	2316      	movs	r3, #22
 8009da8:	6003      	str	r3, [r0, #0]
 8009daa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009db2:	b112      	cbz	r2, 8009dba <_raise_r+0x1e>
 8009db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009db8:	b94b      	cbnz	r3, 8009dce <_raise_r+0x32>
 8009dba:	4628      	mov	r0, r5
 8009dbc:	f000 f830 	bl	8009e20 <_getpid_r>
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dca:	f000 b817 	b.w	8009dfc <_kill_r>
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d00a      	beq.n	8009de8 <_raise_r+0x4c>
 8009dd2:	1c59      	adds	r1, r3, #1
 8009dd4:	d103      	bne.n	8009dde <_raise_r+0x42>
 8009dd6:	2316      	movs	r3, #22
 8009dd8:	6003      	str	r3, [r0, #0]
 8009dda:	2001      	movs	r0, #1
 8009ddc:	e7e7      	b.n	8009dae <_raise_r+0x12>
 8009dde:	2100      	movs	r1, #0
 8009de0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009de4:	4620      	mov	r0, r4
 8009de6:	4798      	blx	r3
 8009de8:	2000      	movs	r0, #0
 8009dea:	e7e0      	b.n	8009dae <_raise_r+0x12>

08009dec <raise>:
 8009dec:	4b02      	ldr	r3, [pc, #8]	@ (8009df8 <raise+0xc>)
 8009dee:	4601      	mov	r1, r0
 8009df0:	6818      	ldr	r0, [r3, #0]
 8009df2:	f7ff bfd3 	b.w	8009d9c <_raise_r>
 8009df6:	bf00      	nop
 8009df8:	200000a8 	.word	0x200000a8

08009dfc <_kill_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d07      	ldr	r5, [pc, #28]	@ (8009e1c <_kill_r+0x20>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	4611      	mov	r1, r2
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	f7f8 fc90 	bl	800272e <_kill>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d102      	bne.n	8009e18 <_kill_r+0x1c>
 8009e12:	682b      	ldr	r3, [r5, #0]
 8009e14:	b103      	cbz	r3, 8009e18 <_kill_r+0x1c>
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	bd38      	pop	{r3, r4, r5, pc}
 8009e1a:	bf00      	nop
 8009e1c:	2000432c 	.word	0x2000432c

08009e20 <_getpid_r>:
 8009e20:	f7f8 bc7d 	b.w	800271e <_getpid>

08009e24 <_malloc_usable_size_r>:
 8009e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e28:	1f18      	subs	r0, r3, #4
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bfbc      	itt	lt
 8009e2e:	580b      	ldrlt	r3, [r1, r0]
 8009e30:	18c0      	addlt	r0, r0, r3
 8009e32:	4770      	bx	lr

08009e34 <__swhatbuf_r>:
 8009e34:	b570      	push	{r4, r5, r6, lr}
 8009e36:	460c      	mov	r4, r1
 8009e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	b096      	sub	sp, #88	@ 0x58
 8009e40:	4615      	mov	r5, r2
 8009e42:	461e      	mov	r6, r3
 8009e44:	da0d      	bge.n	8009e62 <__swhatbuf_r+0x2e>
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e4c:	f04f 0100 	mov.w	r1, #0
 8009e50:	bf14      	ite	ne
 8009e52:	2340      	movne	r3, #64	@ 0x40
 8009e54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e58:	2000      	movs	r0, #0
 8009e5a:	6031      	str	r1, [r6, #0]
 8009e5c:	602b      	str	r3, [r5, #0]
 8009e5e:	b016      	add	sp, #88	@ 0x58
 8009e60:	bd70      	pop	{r4, r5, r6, pc}
 8009e62:	466a      	mov	r2, sp
 8009e64:	f000 f848 	bl	8009ef8 <_fstat_r>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	dbec      	blt.n	8009e46 <__swhatbuf_r+0x12>
 8009e6c:	9901      	ldr	r1, [sp, #4]
 8009e6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e76:	4259      	negs	r1, r3
 8009e78:	4159      	adcs	r1, r3
 8009e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e7e:	e7eb      	b.n	8009e58 <__swhatbuf_r+0x24>

08009e80 <__smakebuf_r>:
 8009e80:	898b      	ldrh	r3, [r1, #12]
 8009e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e84:	079d      	lsls	r5, r3, #30
 8009e86:	4606      	mov	r6, r0
 8009e88:	460c      	mov	r4, r1
 8009e8a:	d507      	bpl.n	8009e9c <__smakebuf_r+0x1c>
 8009e8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	6123      	str	r3, [r4, #16]
 8009e94:	2301      	movs	r3, #1
 8009e96:	6163      	str	r3, [r4, #20]
 8009e98:	b003      	add	sp, #12
 8009e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e9c:	ab01      	add	r3, sp, #4
 8009e9e:	466a      	mov	r2, sp
 8009ea0:	f7ff ffc8 	bl	8009e34 <__swhatbuf_r>
 8009ea4:	9f00      	ldr	r7, [sp, #0]
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7ff f914 	bl	80090d8 <_malloc_r>
 8009eb0:	b948      	cbnz	r0, 8009ec6 <__smakebuf_r+0x46>
 8009eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb6:	059a      	lsls	r2, r3, #22
 8009eb8:	d4ee      	bmi.n	8009e98 <__smakebuf_r+0x18>
 8009eba:	f023 0303 	bic.w	r3, r3, #3
 8009ebe:	f043 0302 	orr.w	r3, r3, #2
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	e7e2      	b.n	8009e8c <__smakebuf_r+0xc>
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	6020      	str	r0, [r4, #0]
 8009eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	9b01      	ldr	r3, [sp, #4]
 8009ed2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ed6:	b15b      	cbz	r3, 8009ef0 <__smakebuf_r+0x70>
 8009ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009edc:	4630      	mov	r0, r6
 8009ede:	f000 f81d 	bl	8009f1c <_isatty_r>
 8009ee2:	b128      	cbz	r0, 8009ef0 <__smakebuf_r+0x70>
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	f023 0303 	bic.w	r3, r3, #3
 8009eea:	f043 0301 	orr.w	r3, r3, #1
 8009eee:	81a3      	strh	r3, [r4, #12]
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	431d      	orrs	r5, r3
 8009ef4:	81a5      	strh	r5, [r4, #12]
 8009ef6:	e7cf      	b.n	8009e98 <__smakebuf_r+0x18>

08009ef8 <_fstat_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4d07      	ldr	r5, [pc, #28]	@ (8009f18 <_fstat_r+0x20>)
 8009efc:	2300      	movs	r3, #0
 8009efe:	4604      	mov	r4, r0
 8009f00:	4608      	mov	r0, r1
 8009f02:	4611      	mov	r1, r2
 8009f04:	602b      	str	r3, [r5, #0]
 8009f06:	f7f8 fc72 	bl	80027ee <_fstat>
 8009f0a:	1c43      	adds	r3, r0, #1
 8009f0c:	d102      	bne.n	8009f14 <_fstat_r+0x1c>
 8009f0e:	682b      	ldr	r3, [r5, #0]
 8009f10:	b103      	cbz	r3, 8009f14 <_fstat_r+0x1c>
 8009f12:	6023      	str	r3, [r4, #0]
 8009f14:	bd38      	pop	{r3, r4, r5, pc}
 8009f16:	bf00      	nop
 8009f18:	2000432c 	.word	0x2000432c

08009f1c <_isatty_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d06      	ldr	r5, [pc, #24]	@ (8009f38 <_isatty_r+0x1c>)
 8009f20:	2300      	movs	r3, #0
 8009f22:	4604      	mov	r4, r0
 8009f24:	4608      	mov	r0, r1
 8009f26:	602b      	str	r3, [r5, #0]
 8009f28:	f7f8 fc71 	bl	800280e <_isatty>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d102      	bne.n	8009f36 <_isatty_r+0x1a>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	b103      	cbz	r3, 8009f36 <_isatty_r+0x1a>
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	2000432c 	.word	0x2000432c

08009f3c <_init>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	bf00      	nop
 8009f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f42:	bc08      	pop	{r3}
 8009f44:	469e      	mov	lr, r3
 8009f46:	4770      	bx	lr

08009f48 <_fini>:
 8009f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4a:	bf00      	nop
 8009f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4e:	bc08      	pop	{r3}
 8009f50:	469e      	mov	lr, r3
 8009f52:	4770      	bx	lr
