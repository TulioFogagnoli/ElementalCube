
ElementalCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008804  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  08008994  08008994  00009994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d0  080090d0  0000b0f0  2**0
                  CONTENTS
  4 .ARM          00000008  080090d0  080090d0  0000a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090d8  080090d8  0000b0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090d8  080090d8  0000a0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090dc  080090dc  0000a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080090e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0f0  2**0
                  CONTENTS
 10 .bss          000041e4  200000f0  200000f0  0000b0f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042d4  200042d4  0000b0f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d0f  00000000  00000000  0000b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a56  00000000  00000000  0001ee2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  00022888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024204  00000000  00000000  00023b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001659d  00000000  00000000  00047d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d07fd  00000000  00000000  0005e2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ead6  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000e27  00000000  00000000  0012eb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005590  00000000  00000000  0012f940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00134ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800897c 	.word	0x0800897c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	0800897c 	.word	0x0800897c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2000010c 	.word	0x2000010c
 80005cc:	20000160 	.word	0x20000160

080005d0 <vInitBattle>:
 * @brief Executa a lógica de batalha turno a turno, atualizando a vida dos jogadores.
 * @param pUserPlayer: Ponteiro para o jogador do usuário.
 * @param pCpuPlayer: Ponteiro para o jogador da CPU.
 */
void vInitBattle(EWizard* pUserPlayer, EWizard* pCpuPlayer)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80005da:	2300      	movs	r3, #0
 80005dc:	75fb      	strb	r3, [r7, #23]
 80005de:	e092      	b.n	8000706 <vInitBattle+0x136>
  {
    // Pega os ataques deste turno
    EColor userAttack = pUserPlayer->eAttackSequential[u8Idx];
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	753b      	strb	r3, [r7, #20]
    EColor cpuAttack = pCpuPlayer->eAttackSequential[u8Idx];
 80005ea:	7dfb      	ldrb	r3, [r7, #23]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	4413      	add	r3, r2
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	74fb      	strb	r3, [r7, #19]

    // Calcula o resultado do ataque do Jogador -> CPU
    EAttackOutcome userOutcome = eGetAttackOutcome(userAttack, cpuAttack);
 80005f4:	7cfa      	ldrb	r2, [r7, #19]
 80005f6:	7d3b      	ldrb	r3, [r7, #20]
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f88c 	bl	8000718 <eGetAttackOutcome>
 8000600:	4603      	mov	r3, r0
 8000602:	74bb      	strb	r3, [r7, #18]
    uint8_t userDamage = BASE_ATTACK_DAMAGE;
 8000604:	230a      	movs	r3, #10
 8000606:	75bb      	strb	r3, [r7, #22]

    if (userOutcome == eOutcome_SuperEffective)
 8000608:	7cbb      	ldrb	r3, [r7, #18]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d10f      	bne.n	800062e <vInitBattle+0x5e>
    {
      userDamage *= SUPER_EFFECTIVE_MODIFIER;
 800060e:	7dbb      	ldrb	r3, [r7, #22]
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000618:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800061c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000624:	edc7 7a01 	vstr	s15, [r7, #4]
 8000628:	793b      	ldrb	r3, [r7, #4]
 800062a:	75bb      	strb	r3, [r7, #22]
 800062c:	e011      	b.n	8000652 <vInitBattle+0x82>
    }
    else if (userOutcome == eOutcome_NotEffective)
 800062e:	7cbb      	ldrb	r3, [r7, #18]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d10e      	bne.n	8000652 <vInitBattle+0x82>
    {
      userDamage *= NOT_EFFECTIVE_MODIFIER;
 8000634:	7dbb      	ldrb	r3, [r7, #22]
 8000636:	ee07 3a90 	vmov	s15, r3
 800063a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800063e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800064a:	edc7 7a01 	vstr	s15, [r7, #4]
 800064e:	793b      	ldrb	r3, [r7, #4]
 8000650:	75bb      	strb	r3, [r7, #22]
    }

    // Calcula o resultado do ataque da CPU -> Jogador
    EAttackOutcome cpuOutcome = eGetAttackOutcome(cpuAttack, userAttack);
 8000652:	7d3a      	ldrb	r2, [r7, #20]
 8000654:	7cfb      	ldrb	r3, [r7, #19]
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f85d 	bl	8000718 <eGetAttackOutcome>
 800065e:	4603      	mov	r3, r0
 8000660:	747b      	strb	r3, [r7, #17]
    uint8_t cpuDamage = BASE_ATTACK_DAMAGE;
 8000662:	230a      	movs	r3, #10
 8000664:	757b      	strb	r3, [r7, #21]

    if (cpuOutcome == eOutcome_SuperEffective)
 8000666:	7c7b      	ldrb	r3, [r7, #17]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10f      	bne.n	800068c <vInitBattle+0xbc>
    {
      cpuDamage *= SUPER_EFFECTIVE_MODIFIER;
 800066c:	7d7b      	ldrb	r3, [r7, #21]
 800066e:	ee07 3a90 	vmov	s15, r3
 8000672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000676:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800067a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800067e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000682:	edc7 7a01 	vstr	s15, [r7, #4]
 8000686:	793b      	ldrb	r3, [r7, #4]
 8000688:	757b      	strb	r3, [r7, #21]
 800068a:	e011      	b.n	80006b0 <vInitBattle+0xe0>
    }
    else if (cpuOutcome == eOutcome_NotEffective)
 800068c:	7c7b      	ldrb	r3, [r7, #17]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d10e      	bne.n	80006b0 <vInitBattle+0xe0>
    {
      cpuDamage *= NOT_EFFECTIVE_MODIFIER;
 8000692:	7d7b      	ldrb	r3, [r7, #21]
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800069c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80006a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80006ac:	793b      	ldrb	r3, [r7, #4]
 80006ae:	757b      	strb	r3, [r7, #21]
    }

    // Aplica o dano, garantindo que a vida não fique negativa
    if (pCpuPlayer->u8HeartPoints >= userDamage)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	7dba      	ldrb	r2, [r7, #22]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d807      	bhi.n	80006ca <vInitBattle+0xfa>
    {
      pCpuPlayer->u8HeartPoints -= userDamage;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	7dbb      	ldrb	r3, [r7, #22]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e002      	b.n	80006d0 <vInitBattle+0x100>
    }
    else
    {
      pCpuPlayer->u8HeartPoints = 0;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
    }

    if (pUserPlayer->u8HeartPoints >= cpuDamage)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	7d7a      	ldrb	r2, [r7, #21]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d807      	bhi.n	80006ea <vInitBattle+0x11a>
    {
      pUserPlayer->u8HeartPoints -= cpuDamage;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	7d7b      	ldrb	r3, [r7, #21]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e002      	b.n	80006f0 <vInitBattle+0x120>
    }
    else
    {
      pUserPlayer->u8HeartPoints = 0;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
    }
    
    // Se a vida de alguém chegar a 0, a batalha pode parar mais cedo
    if(pUserPlayer->u8HeartPoints == 0 || pCpuPlayer->u8HeartPoints == 0)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00a      	beq.n	800070e <vInitBattle+0x13e>
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <vInitBattle+0x13e>
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	3301      	adds	r3, #1
 8000704:	75fb      	strb	r3, [r7, #23]
 8000706:	7dfb      	ldrb	r3, [r7, #23]
 8000708:	2b03      	cmp	r3, #3
 800070a:	f67f af69 	bls.w	80005e0 <vInitBattle+0x10>
    {
        break; // Encerra o loop for
    }
  }
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <eGetAttackOutcome>:
 * @param eAttackerAttack: O elemento do atacante.
 * @param eDefenderAttack: O elemento do defensor no mesmo turno.
 * @retval EAttackOutcome: O resultado da interação.
 */
EAttackOutcome eGetAttackOutcome(EColor eAttackerAttack, EColor eDefenderAttack)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
  switch (eAttackerAttack)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b05      	cmp	r3, #5
 800072c:	d859      	bhi.n	80007e2 <eGetAttackOutcome+0xca>
 800072e:	a201      	add	r2, pc, #4	@ (adr r2, 8000734 <eGetAttackOutcome+0x1c>)
 8000730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000734:	0800074d 	.word	0x0800074d
 8000738:	0800076b 	.word	0x0800076b
 800073c:	080007a7 	.word	0x080007a7
 8000740:	08000789 	.word	0x08000789
 8000744:	080007bb 	.word	0x080007bb
 8000748:	080007cf 	.word	0x080007cf
  {
    case eRed: // FOGO
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Fogo > Terra
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d101      	bne.n	8000756 <eGetAttackOutcome+0x3e>
 8000752:	2301      	movs	r3, #1
 8000754:	e053      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective;  //  Fogo > Sombra
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	2b05      	cmp	r3, #5
 800075a:	d101      	bne.n	8000760 <eGetAttackOutcome+0x48>
 800075c:	2301      	movs	r3, #1
 800075e:	e04e      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlue) return eOutcome_NotEffective;     // Fogo < Agua
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d13f      	bne.n	80007e6 <eGetAttackOutcome+0xce>
 8000766:	2302      	movs	r3, #2
 8000768:	e049      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    case eBlue: // ÁGUA
      if (eDefenderAttack == eRed) return eOutcome_SuperEffective;    // Agua > Fogo
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d101      	bne.n	8000774 <eGetAttackOutcome+0x5c>
 8000770:	2301      	movs	r3, #1
 8000772:	e044      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eGreen) return eOutcome_SuperEffective;  // Agua > Ar
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d101      	bne.n	800077e <eGetAttackOutcome+0x66>
 800077a:	2301      	movs	r3, #1
 800077c:	e03f      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;   // Agua < Terra
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d132      	bne.n	80007ea <eGetAttackOutcome+0xd2>
 8000784:	2302      	movs	r3, #2
 8000786:	e03a      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    case eYellow: // TERRA
      if (eDefenderAttack == eBlue) return eOutcome_SuperEffective;   // Terra > Agua
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d101      	bne.n	8000792 <eGetAttackOutcome+0x7a>
 800078e:	2301      	movs	r3, #1
 8000790:	e035      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective;  // Terra > Luz
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d101      	bne.n	800079c <eGetAttackOutcome+0x84>
 8000798:	2301      	movs	r3, #1
 800079a:	e030      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Terra < Fogo
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d125      	bne.n	80007ee <eGetAttackOutcome+0xd6>
 80007a2:	2302      	movs	r3, #2
 80007a4:	e02b      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    case eGreen: // AR
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Ar > Terra
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d101      	bne.n	80007b0 <eGetAttackOutcome+0x98>
 80007ac:	2301      	movs	r3, #1
 80007ae:	e026      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Ar < Fogo
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d11d      	bne.n	80007f2 <eGetAttackOutcome+0xda>
 80007b6:	2302      	movs	r3, #2
 80007b8:	e021      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;
    
    case eWhite: // LUZ
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective; // Luz > Sombra
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	2b05      	cmp	r3, #5
 80007be:	d101      	bne.n	80007c4 <eGetAttackOutcome+0xac>
 80007c0:	2301      	movs	r3, #1
 80007c2:	e01c      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;  // Luz < Terra
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d115      	bne.n	80007f6 <eGetAttackOutcome+0xde>
 80007ca:	2302      	movs	r3, #2
 80007cc:	e017      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    case eBlack: // SOMBRA
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective; // Sombra > Luz
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d101      	bne.n	80007d8 <eGetAttackOutcome+0xc0>
 80007d4:	2301      	movs	r3, #1
 80007d6:	e012      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;     // Sombra < Fogo
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d10d      	bne.n	80007fa <eGetAttackOutcome+0xe2>
 80007de:	2302      	movs	r3, #2
 80007e0:	e00d      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    default:
      return eOutcome_Neutral;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e00b      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;
 80007e6:	bf00      	nop
 80007e8:	e008      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007ea:	bf00      	nop
 80007ec:	e006      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007ee:	bf00      	nop
 80007f0:	e004      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007f2:	bf00      	nop
 80007f4:	e002      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007f6:	bf00      	nop
 80007f8:	e000      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007fa:	bf00      	nop
  }
  return eOutcome_Neutral; // Retorno padrão se nenhuma regra se aplicar
 80007fc:	2300      	movs	r3, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <ClearScreen>:
#include "game_screen.h"
#include "st7789.h"
#include "stdint.h"
#include <stdio.h>

void ClearScreen() {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af02      	add	r7, sp, #8
    ST7789_FillRectangle(0, 0, 240, 240, ST7789_BLACK);
 8000812:	2300      	movs	r3, #0
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	23f0      	movs	r3, #240	@ 0xf0
 8000818:	22f0      	movs	r2, #240	@ 0xf0
 800081a:	2100      	movs	r1, #0
 800081c:	2000      	movs	r0, #0
 800081e:	f001 fa1d 	bl	8001c5c <ST7789_FillRectangle>
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <DrawMenu>:

void DrawMenu(const char* title, const char** options, int numOptions, int currentSelection) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b090      	sub	sp, #64	@ 0x40
 800082c:	af02      	add	r7, sp, #8
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
 8000834:	603b      	str	r3, [r7, #0]
    char buffer[30];
    sprintf(buffer, "%s", title);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4926      	ldr	r1, [pc, #152]	@ (80008d8 <DrawMenu+0xb0>)
 800083e:	4618      	mov	r0, r3
 8000840:	f006 ffe8 	bl	8007814 <siprintf>
    ST7789_DrawText(10, 10, buffer, ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8000844:	f107 0214 	add.w	r2, r7, #20
 8000848:	2302      	movs	r3, #2
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	2300      	movs	r3, #0
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000854:	210a      	movs	r1, #10
 8000856:	200a      	movs	r0, #10
 8000858:	f001 fb28 	bl	8001eac <ST7789_DrawText>

    for (int i = 0; i < numOptions; i++) {
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000860:	e031      	b.n	80008c6 <DrawMenu+0x9e>
        uint16_t color = (i == currentSelection) ? ST7789_YELLOW : ST7789_WHITE;
 8000862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	d102      	bne.n	8000870 <DrawMenu+0x48>
 800086a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800086e:	e001      	b.n	8000874 <DrawMenu+0x4c>
 8000870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000874:	867b      	strh	r3, [r7, #50]	@ 0x32
        sprintf(buffer, "%s %s", (i == currentSelection) ? ">" : " ", options[i]);
 8000876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d101      	bne.n	8000882 <DrawMenu+0x5a>
 800087e:	4917      	ldr	r1, [pc, #92]	@ (80008dc <DrawMenu+0xb4>)
 8000880:	e000      	b.n	8000884 <DrawMenu+0x5c>
 8000882:	4917      	ldr	r1, [pc, #92]	@ (80008e0 <DrawMenu+0xb8>)
 8000884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	4413      	add	r3, r2
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f107 0014 	add.w	r0, r7, #20
 8000892:	460a      	mov	r2, r1
 8000894:	4913      	ldr	r1, [pc, #76]	@ (80008e4 <DrawMenu+0xbc>)
 8000896:	f006 ffbd 	bl	8007814 <siprintf>
        ST7789_DrawText(10, 40 + (i * 20), buffer, color, ST7789_BLACK, ST7789_SIZE);
 800089a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800089c:	b29b      	uxth	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	3328      	adds	r3, #40	@ 0x28
 80008aa:	b299      	uxth	r1, r3
 80008ac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80008ae:	f107 0214 	add.w	r2, r7, #20
 80008b2:	2002      	movs	r0, #2
 80008b4:	9001      	str	r0, [sp, #4]
 80008b6:	2000      	movs	r0, #0
 80008b8:	9000      	str	r0, [sp, #0]
 80008ba:	200a      	movs	r0, #10
 80008bc:	f001 faf6 	bl	8001eac <ST7789_DrawText>
    for (int i = 0; i < numOptions; i++) {
 80008c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008c2:	3301      	adds	r3, #1
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80008c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbc9      	blt.n	8000862 <DrawMenu+0x3a>
    }
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	3738      	adds	r7, #56	@ 0x38
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	08008994 	.word	0x08008994
 80008dc:	08008998 	.word	0x08008998
 80008e0:	0800899c 	.word	0x0800899c
 80008e4:	080089a0 	.word	0x080089a0

080008e8 <KEYPAD_Scan>:
Keypad_Pin_t C_PINS[4] = {{C4_GPIO_Port, C4_Pin}, {C3_GPIO_Port, C3_Pin}, {C2_GPIO_Port, C2_Pin}, {C1_GPIO_Port, C1_Pin}};
// Pinos das linhas (entradas)
Keypad_Pin_t R_PINS[4] = {{R2_GPIO_Port, R2_Pin}, {R1_GPIO_Port, R1_Pin}, {R3_GPIO_Port, R3_Pin}, {R4_GPIO_Port, R4_Pin}};


char KEYPAD_Scan(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
    // Coloca todas as colunas em nível alto
    for (int i = 0; i < 4; i++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e00f      	b.n	8000914 <KEYPAD_Scan+0x2c>
        HAL_GPIO_WritePin(C_PINS[i].PORT, C_PINS[i].PIN, GPIO_PIN_SET);
 80008f4:	4a3e      	ldr	r2, [pc, #248]	@ (80009f0 <KEYPAD_Scan+0x108>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008fc:	4a3c      	ldr	r2, [pc, #240]	@ (80009f0 <KEYPAD_Scan+0x108>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	4413      	add	r3, r2
 8000904:	889b      	ldrh	r3, [r3, #4]
 8000906:	2201      	movs	r2, #1
 8000908:	4619      	mov	r1, r3
 800090a:	f002 fad3 	bl	8002eb4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3301      	adds	r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b03      	cmp	r3, #3
 8000918:	ddec      	ble.n	80008f4 <KEYPAD_Scan+0xc>
    }

    // Loop para varrer cada coluna
    for (int col = 0; col < 4; col++) {
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	e05e      	b.n	80009de <KEYPAD_Scan+0xf6>
        // Ativa a coluna atual (coloca em nível baixo)
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_RESET);
 8000920:	4a33      	ldr	r2, [pc, #204]	@ (80009f0 <KEYPAD_Scan+0x108>)
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000928:	4a31      	ldr	r2, [pc, #196]	@ (80009f0 <KEYPAD_Scan+0x108>)
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	4413      	add	r3, r2
 8000930:	889b      	ldrh	r3, [r3, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	f002 fabd 	bl	8002eb4 <HAL_GPIO_WritePin>

        // Verifica qual linha foi para nível baixo
        for (int row = 0; row < 4; row++) {
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	e03b      	b.n	80009b8 <KEYPAD_Scan+0xd0>
            if (HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET) {
 8000940:	4a2c      	ldr	r2, [pc, #176]	@ (80009f4 <KEYPAD_Scan+0x10c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000948:	492a      	ldr	r1, [pc, #168]	@ (80009f4 <KEYPAD_Scan+0x10c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	440b      	add	r3, r1
 8000950:	889b      	ldrh	r3, [r3, #4]
 8000952:	4619      	mov	r1, r3
 8000954:	4610      	mov	r0, r2
 8000956:	f002 fa95 	bl	8002e84 <HAL_GPIO_ReadPin>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d128      	bne.n	80009b2 <KEYPAD_Scan+0xca>
                // Botão pressionado!
                
                // --- Debounce e espera soltar a tecla ---
                HAL_Delay(50); // Simples debounce por atraso
 8000960:	2032      	movs	r0, #50	@ 0x32
 8000962:	f001 fd97 	bl	8002494 <HAL_Delay>

                // Espera o usuário soltar a tecla para não ler a mesma tecla várias vezes
                while(HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET);
 8000966:	bf00      	nop
 8000968:	4a22      	ldr	r2, [pc, #136]	@ (80009f4 <KEYPAD_Scan+0x10c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000970:	4920      	ldr	r1, [pc, #128]	@ (80009f4 <KEYPAD_Scan+0x10c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	440b      	add	r3, r1
 8000978:	889b      	ldrh	r3, [r3, #4]
 800097a:	4619      	mov	r1, r3
 800097c:	4610      	mov	r0, r2
 800097e:	f002 fa81 	bl	8002e84 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0ef      	beq.n	8000968 <KEYPAD_Scan+0x80>
                
                // Restaura a coluna para nível alto antes de retornar
                HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <KEYPAD_Scan+0x108>)
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000990:	4a17      	ldr	r2, [pc, #92]	@ (80009f0 <KEYPAD_Scan+0x108>)
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	4413      	add	r3, r2
 8000998:	889b      	ldrh	r3, [r3, #4]
 800099a:	2201      	movs	r2, #1
 800099c:	4619      	mov	r1, r3
 800099e:	f002 fa89 	bl	8002eb4 <HAL_GPIO_WritePin>

                return KEYPAD_MAP[row][col];
 80009a2:	4a15      	ldr	r2, [pc, #84]	@ (80009f8 <KEYPAD_Scan+0x110>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	441a      	add	r2, r3
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	e019      	b.n	80009e6 <KEYPAD_Scan+0xfe>
        for (int row = 0; row < 4; row++) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3301      	adds	r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	ddc0      	ble.n	8000940 <KEYPAD_Scan+0x58>
            }
        }

        // Desativa a coluna atual antes de ir para a próxima
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 80009be:	4a0c      	ldr	r2, [pc, #48]	@ (80009f0 <KEYPAD_Scan+0x108>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <KEYPAD_Scan+0x108>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	4413      	add	r3, r2
 80009ce:	889b      	ldrh	r3, [r3, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	f002 fa6e 	bl	8002eb4 <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	3301      	adds	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	dd9d      	ble.n	8000920 <KEYPAD_Scan+0x38>
    }

    return '\0'; // Retorna nulo se nenhuma tecla for pressionada
 80009e4:	2300      	movs	r3, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000020 	.word	0x20000020
 80009f8:	08008fc8 	.word	0x08008fc8

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b5b0      	push	{r4, r5, r7, lr}
 80009fe:	b098      	sub	sp, #96	@ 0x60
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a02:	f001 fcd5 	bl	80023b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a06:	f000 f861 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0a:	f000 f927 	bl	8000c5c <MX_GPIO_Init>
  MX_UART4_Init();
 8000a0e:	f000 f8fb 	bl	8000c08 <MX_UART4_Init>
  MX_SPI1_Init();
 8000a12:	f000 f8c3 	bl	8000b9c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7789_Init();
 8000a16:	f001 f8c9 	bl	8001bac <ST7789_Init>
  ST7789_FillScreen(ST7789_BLACK);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f001 f98c 	bl	8001d38 <ST7789_FillScreen>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  osMutexDef(gameMutex);
 8000a20:	2300      	movs	r3, #0
 8000a22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000a24:	2300      	movs	r3, #0
 8000a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 8000a28:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 fa58 	bl	8004ee2 <osMutexCreate>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab0 <main+0xb4>)
 8000a36:	6013      	str	r3, [r2, #0]

  osThreadDef(initPutHalTask, StartInputHalTask, osPriorityNormal, 0, 128);
 8000a38:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <main+0xb8>)
 8000a3a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000a3e:	461d      	mov	r5, r3
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  inputHalTaskHandle = osThreadCreate(osThread(initPutHalTask), NULL);
 8000a4c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f004 f9e5 	bl	8004e22 <osThreadCreate>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <main+0xbc>)
 8000a5c:	6013      	str	r3, [r2, #0]

  osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 256);
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <main+0xc0>)
 8000a60:	f107 0420 	add.w	r4, r7, #32
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 f9d2 	bl	8004e22 <osThreadCreate>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac0 <main+0xc4>)
 8000a82:	6013      	str	r3, [r2, #0]

  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <main+0xc8>)
 8000a86:	1d3c      	adds	r4, r7, #4
 8000a88:	461d      	mov	r5, r3
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 f9c1 	bl	8004e22 <osThreadCreate>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4a09      	ldr	r2, [pc, #36]	@ (8000ac8 <main+0xcc>)
 8000aa4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000aa6:	f004 f9b5 	bl	8004e14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aaa:	bf00      	nop
 8000aac:	e7fd      	b.n	8000aaa <main+0xae>
 8000aae:	bf00      	nop
 8000ab0:	2000040c 	.word	0x2000040c
 8000ab4:	08008a18 	.word	0x08008a18
 8000ab8:	20000400 	.word	0x20000400
 8000abc:	08008a40 	.word	0x08008a40
 8000ac0:	20000404 	.word	0x20000404
 8000ac4:	08008a68 	.word	0x08008a68
 8000ac8:	20000408 	.word	0x20000408

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	@ 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2230      	movs	r2, #48	@ 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f006 feff 	bl	80078de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <SystemClock_Config+0xc8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	4a26      	ldr	r2, [pc, #152]	@ (8000b94 <SystemClock_Config+0xc8>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <SystemClock_Config+0xc8>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <SystemClock_Config+0xcc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a20      	ldr	r2, [pc, #128]	@ (8000b98 <SystemClock_Config+0xcc>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <SystemClock_Config+0xcc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b30:	2310      	movs	r3, #16
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000b40:	2332      	movs	r3, #50	@ 0x32
 8000b42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 f9e3 	bl	8002f1c <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b5c:	f000 ff6c 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2302      	movs	r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 fc45 	bl	800340c <HAL_RCC_ClockConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b88:	f000 ff56 	bl	8001a38 <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3750      	adds	r7, #80	@ 0x50
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000ba2:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <MX_SPI1_Init+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000ba8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bba:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000be8:	220a      	movs	r2, #10
 8000bea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_SPI1_Init+0x64>)
 8000bee:	f002 fded 	bl	80037cc <HAL_SPI_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bf8:	f000 ff1e 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000360 	.word	0x20000360
 8000c04:	40013000 	.word	0x40013000

08000c08 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_UART4_Init+0x4c>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <MX_UART4_Init+0x50>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <MX_UART4_Init+0x4c>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_UART4_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_UART4_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <MX_UART4_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_UART4_Init+0x4c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <MX_UART4_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_UART4_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_UART4_Init+0x4c>)
 8000c40:	f003 f98c 	bl	8003f5c <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c4a:	f000 fef5 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200003b8 	.word	0x200003b8
 8000c58:	40004c00 	.word	0x40004c00

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a49      	ldr	r2, [pc, #292]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b47      	ldr	r3, [pc, #284]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0304 	and.w	r3, r3, #4
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b43      	ldr	r3, [pc, #268]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a42      	ldr	r2, [pc, #264]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b40      	ldr	r3, [pc, #256]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b3c      	ldr	r3, [pc, #240]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a3b      	ldr	r2, [pc, #236]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b39      	ldr	r3, [pc, #228]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b35      	ldr	r3, [pc, #212]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a34      	ldr	r2, [pc, #208]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <MX_GPIO_Init+0x144>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|LCD_DC_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2182      	movs	r1, #130	@ 0x82
 8000ce6:	482f      	ldr	r0, [pc, #188]	@ (8000da4 <MX_GPIO_Init+0x148>)
 8000ce8:	f002 f8e4 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cf2:	482d      	ldr	r0, [pc, #180]	@ (8000da8 <MX_GPIO_Init+0x14c>)
 8000cf4:	f002 f8de 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	482b      	ldr	r0, [pc, #172]	@ (8000dac <MX_GPIO_Init+0x150>)
 8000cfe:	f002 f8d9 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	@ 0x40
 8000d06:	482a      	ldr	r0, [pc, #168]	@ (8000db0 <MX_GPIO_Init+0x154>)
 8000d08:	f002 f8d4 	bl	8002eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LCD_DC_Pin;
 8000d0c:	2382      	movs	r3, #130	@ 0x82
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4820      	ldr	r0, [pc, #128]	@ (8000da4 <MX_GPIO_Init+0x148>)
 8000d24:	f001 ff12 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000d28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4819      	ldr	r0, [pc, #100]	@ (8000da8 <MX_GPIO_Init+0x14c>)
 8000d42:	f001 ff03 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8000d46:	230f      	movs	r3, #15
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4813      	ldr	r0, [pc, #76]	@ (8000dac <MX_GPIO_Init+0x150>)
 8000d5e:	f001 fef5 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8000d62:	23f0      	movs	r3, #240	@ 0xf0
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	480d      	ldr	r0, [pc, #52]	@ (8000dac <MX_GPIO_Init+0x150>)
 8000d76:	f001 fee9 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000d7a:	2340      	movs	r3, #64	@ 0x40
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4807      	ldr	r0, [pc, #28]	@ (8000db0 <MX_GPIO_Init+0x154>)
 8000d92:	f001 fedb 	bl	8002b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	@ 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020c00 	.word	0x40020c00
 8000db0:	40020400 	.word	0x40020400

08000db4 <StartInputHalTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartInputHalTask(void const * argument)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char cCurrent;
  /* Infinite loop */
  for(;;) // O loop infinito de uma tarefa RTOS é "for(;;)"
  {
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8000dbc:	f7ff fd94 	bl	80008e8 <KEYPAD_Scan>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]
    if(cCurrent != '\0')
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <StartInputHalTask+0x1c>
    {
      keyPressed = cCurrent;
 8000dca:	4a03      	ldr	r2, [pc, #12]	@ (8000dd8 <StartInputHalTask+0x24>)
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	7013      	strb	r3, [r2, #0]
    }
    osDelay(50);
 8000dd0:	2032      	movs	r0, #50	@ 0x32
 8000dd2:	f004 f872 	bl	8004eba <osDelay>
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8000dd6:	e7f1      	b.n	8000dbc <StartInputHalTask+0x8>
 8000dd8:	20000410 	.word	0x20000410

08000ddc <StartGameTask>:
  }
}

void StartGameTask(void const * argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  char cLocalKeyPressed;
  for(;;)
  {
    cLocalKeyPressed = NONE_KEY;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
    
    osMutexWait(gameMutexHandle, osWaitForever);
 8000de8:	4baf      	ldr	r3, [pc, #700]	@ (80010a8 <StartGameTask+0x2cc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 f88f 	bl	8004f14 <osMutexWait>
    if (keyPressed != NONE_KEY) {
 8000df6:	4bad      	ldr	r3, [pc, #692]	@ (80010ac <StartGameTask+0x2d0>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d005      	beq.n	8000e0c <StartGameTask+0x30>
      cLocalKeyPressed = keyPressed;
 8000e00:	4baa      	ldr	r3, [pc, #680]	@ (80010ac <StartGameTask+0x2d0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	73fb      	strb	r3, [r7, #15]
      keyPressed = NONE_KEY; 
 8000e06:	4ba9      	ldr	r3, [pc, #676]	@ (80010ac <StartGameTask+0x2d0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 8000e0c:	4ba6      	ldr	r3, [pc, #664]	@ (80010a8 <StartGameTask+0x2cc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 f8cd 	bl	8004fb0 <osMutexRelease>
    
    if (cLocalKeyPressed != NONE_KEY)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 8273 	beq.w	8001304 <StartGameTask+0x528>
    {
      osMutexWait(gameMutexHandle, osWaitForever);
 8000e1e:	4ba2      	ldr	r3, [pc, #648]	@ (80010a8 <StartGameTask+0x2cc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f04f 31ff 	mov.w	r1, #4294967295
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 f874 	bl	8004f14 <osMutexWait>
      switch(eCurrentState)
 8000e2c:	4ba0      	ldr	r3, [pc, #640]	@ (80010b0 <StartGameTask+0x2d4>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	f200 8255 	bhi.w	80012e2 <StartGameTask+0x506>
 8000e38:	a201      	add	r2, pc, #4	@ (adr r2, 8000e40 <StartGameTask+0x64>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e59 	.word	0x08000e59
 8000e44:	08000e81 	.word	0x08000e81
 8000e48:	08000f55 	.word	0x08000f55
 8000e4c:	080010d9 	.word	0x080010d9
 8000e50:	08001251 	.word	0x08001251
 8000e54:	080012cf 	.word	0x080012cf
      {
        case eInitGame:
        {
          eUserPlayer.u8HeartPoints = 100;
 8000e58:	4b96      	ldr	r3, [pc, #600]	@ (80010b4 <StartGameTask+0x2d8>)
 8000e5a:	2264      	movs	r2, #100	@ 0x64
 8000e5c:	701a      	strb	r2, [r3, #0]
          eCpuPlayer.u8HeartPoints = 100;
 8000e5e:	4b96      	ldr	r3, [pc, #600]	@ (80010b8 <StartGameTask+0x2dc>)
 8000e60:	2264      	movs	r2, #100	@ 0x64
 8000e62:	701a      	strb	r2, [r3, #0]
          if(cLocalKeyPressed == CONFIRM_KEY)
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e68:	f040 8242 	bne.w	80012f0 <StartGameTask+0x514>
          {
            eCurrentState = eDificultSelect;
 8000e6c:	4b90      	ldr	r3, [pc, #576]	@ (80010b0 <StartGameTask+0x2d4>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
            selectedOption = 0;
 8000e72:	4b92      	ldr	r3, [pc, #584]	@ (80010bc <StartGameTask+0x2e0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8000e78:	4b91      	ldr	r3, [pc, #580]	@ (80010c0 <StartGameTask+0x2e4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
            }
          break;
 8000e7e:	e237      	b.n	80012f0 <StartGameTask+0x514>
        }
        case eDificultSelect:
        {
          switch(cLocalKeyPressed)
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	3b23      	subs	r3, #35	@ 0x23
 8000e84:	2b15      	cmp	r3, #21
 8000e86:	d863      	bhi.n	8000f50 <StartGameTask+0x174>
 8000e88:	a201      	add	r2, pc, #4	@ (adr r2, 8000e90 <StartGameTask+0xb4>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000f25 	.word	0x08000f25
 8000e94:	08000f51 	.word	0x08000f51
 8000e98:	08000f51 	.word	0x08000f51
 8000e9c:	08000f51 	.word	0x08000f51
 8000ea0:	08000f51 	.word	0x08000f51
 8000ea4:	08000f51 	.word	0x08000f51
 8000ea8:	08000f51 	.word	0x08000f51
 8000eac:	08000f33 	.word	0x08000f33
 8000eb0:	08000f51 	.word	0x08000f51
 8000eb4:	08000f51 	.word	0x08000f51
 8000eb8:	08000f51 	.word	0x08000f51
 8000ebc:	08000f51 	.word	0x08000f51
 8000ec0:	08000f51 	.word	0x08000f51
 8000ec4:	08000f51 	.word	0x08000f51
 8000ec8:	08000f51 	.word	0x08000f51
 8000ecc:	08000f07 	.word	0x08000f07
 8000ed0:	08000f51 	.word	0x08000f51
 8000ed4:	08000f51 	.word	0x08000f51
 8000ed8:	08000f51 	.word	0x08000f51
 8000edc:	08000f51 	.word	0x08000f51
 8000ee0:	08000f51 	.word	0x08000f51
 8000ee4:	08000ee9 	.word	0x08000ee9
          {
            case UP_KEY:
            {
              selectedOption = (selectedOption < MENU_OPTIONS_DIFFICULTY - 1) ? selectedOption + 1 : 0;
 8000ee8:	4b74      	ldr	r3, [pc, #464]	@ (80010bc <StartGameTask+0x2e0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	dc03      	bgt.n	8000ef8 <StartGameTask+0x11c>
 8000ef0:	4b72      	ldr	r3, [pc, #456]	@ (80010bc <StartGameTask+0x2e0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	e000      	b.n	8000efa <StartGameTask+0x11e>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4a70      	ldr	r2, [pc, #448]	@ (80010bc <StartGameTask+0x2e0>)
 8000efc:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000efe:	4b70      	ldr	r3, [pc, #448]	@ (80010c0 <StartGameTask+0x2e4>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
              break;
 8000f04:	e025      	b.n	8000f52 <StartGameTask+0x176>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_DIFFICULTY - 1;
 8000f06:	4b6d      	ldr	r3, [pc, #436]	@ (80010bc <StartGameTask+0x2e0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	dd03      	ble.n	8000f16 <StartGameTask+0x13a>
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80010bc <StartGameTask+0x2e0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	e000      	b.n	8000f18 <StartGameTask+0x13c>
 8000f16:	2302      	movs	r3, #2
 8000f18:	4a68      	ldr	r2, [pc, #416]	@ (80010bc <StartGameTask+0x2e0>)
 8000f1a:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000f1c:	4b68      	ldr	r3, [pc, #416]	@ (80010c0 <StartGameTask+0x2e4>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
              break;
 8000f22:	e016      	b.n	8000f52 <StartGameTask+0x176>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8000f24:	4b66      	ldr	r3, [pc, #408]	@ (80010c0 <StartGameTask+0x2e4>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
              eCurrentState = eInitGame;
 8000f2a:	4b61      	ldr	r3, [pc, #388]	@ (80010b0 <StartGameTask+0x2d4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
              break;
 8000f30:	e00f      	b.n	8000f52 <StartGameTask+0x176>
            }
            case CONFIRM_KEY:
            {
              selectedDifficulty = (EDificult)selectedOption;
 8000f32:	4b62      	ldr	r3, [pc, #392]	@ (80010bc <StartGameTask+0x2e0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b62      	ldr	r3, [pc, #392]	@ (80010c4 <StartGameTask+0x2e8>)
 8000f3a:	701a      	strb	r2, [r3, #0]
              eCurrentState = ePersonaSelect;
 8000f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80010b0 <StartGameTask+0x2d4>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	701a      	strb	r2, [r3, #0]
              selectedOption = FALSE; // Reseta para o próximo menu
 8000f42:	4b5e      	ldr	r3, [pc, #376]	@ (80010bc <StartGameTask+0x2e0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000f48:	4b5d      	ldr	r3, [pc, #372]	@ (80010c0 <StartGameTask+0x2e4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
              break;
 8000f4e:	e000      	b.n	8000f52 <StartGameTask+0x176>
            }
            default:
            {
              break;
 8000f50:	bf00      	nop
            }
          }
          break;
 8000f52:	e1d2      	b.n	80012fa <StartGameTask+0x51e>
        }
        case ePersonaSelect:
        {
          switch(cLocalKeyPressed)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	3b23      	subs	r3, #35	@ 0x23
 8000f58:	2b15      	cmp	r3, #21
 8000f5a:	f200 80a2 	bhi.w	80010a2 <StartGameTask+0x2c6>
 8000f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f64 <StartGameTask+0x188>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000ff9 	.word	0x08000ff9
 8000f68:	080010a3 	.word	0x080010a3
 8000f6c:	080010a3 	.word	0x080010a3
 8000f70:	080010a3 	.word	0x080010a3
 8000f74:	080010a3 	.word	0x080010a3
 8000f78:	080010a3 	.word	0x080010a3
 8000f7c:	080010a3 	.word	0x080010a3
 8000f80:	08001007 	.word	0x08001007
 8000f84:	080010a3 	.word	0x080010a3
 8000f88:	080010a3 	.word	0x080010a3
 8000f8c:	080010a3 	.word	0x080010a3
 8000f90:	080010a3 	.word	0x080010a3
 8000f94:	080010a3 	.word	0x080010a3
 8000f98:	080010a3 	.word	0x080010a3
 8000f9c:	080010a3 	.word	0x080010a3
 8000fa0:	08000fdb 	.word	0x08000fdb
 8000fa4:	080010a3 	.word	0x080010a3
 8000fa8:	080010a3 	.word	0x080010a3
 8000fac:	080010a3 	.word	0x080010a3
 8000fb0:	080010a3 	.word	0x080010a3
 8000fb4:	080010a3 	.word	0x080010a3
 8000fb8:	08000fbd 	.word	0x08000fbd
          {
            case UP_KEY:
            {                  
              selectedOption = (selectedOption < MENU_OPTIONS_PERSONA - 1) ? selectedOption + 1 : 0;
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80010bc <StartGameTask+0x2e0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	dc03      	bgt.n	8000fcc <StartGameTask+0x1f0>
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80010bc <StartGameTask+0x2e0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	e000      	b.n	8000fce <StartGameTask+0x1f2>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4a3b      	ldr	r2, [pc, #236]	@ (80010bc <StartGameTask+0x2e0>)
 8000fd0:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <StartGameTask+0x2e4>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
              break;
 8000fd8:	e064      	b.n	80010a4 <StartGameTask+0x2c8>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_PERSONA - 1;
 8000fda:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <StartGameTask+0x2e0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	dd03      	ble.n	8000fea <StartGameTask+0x20e>
 8000fe2:	4b36      	ldr	r3, [pc, #216]	@ (80010bc <StartGameTask+0x2e0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	e000      	b.n	8000fec <StartGameTask+0x210>
 8000fea:	2304      	movs	r3, #4
 8000fec:	4a33      	ldr	r2, [pc, #204]	@ (80010bc <StartGameTask+0x2e0>)
 8000fee:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <StartGameTask+0x2e4>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
              break;
 8000ff6:	e055      	b.n	80010a4 <StartGameTask+0x2c8>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8000ff8:	4b31      	ldr	r3, [pc, #196]	@ (80010c0 <StartGameTask+0x2e4>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
              eCurrentState = eDificultSelect;
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <StartGameTask+0x2d4>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
              break;
 8001004:	e04e      	b.n	80010a4 <StartGameTask+0x2c8>
            }
            case CONFIRM_KEY:
            {
              eUserPlayer.ePersonaElemental = (EElemental)selectedOption;
 8001006:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <StartGameTask+0x2e0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b29      	ldr	r3, [pc, #164]	@ (80010b4 <StartGameTask+0x2d8>)
 800100e:	705a      	strb	r2, [r3, #1]
              eCurrentState = eBattleInit;
 8001010:	4b27      	ldr	r3, [pc, #156]	@ (80010b0 <StartGameTask+0x2d4>)
 8001012:	2203      	movs	r2, #3
 8001014:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <StartGameTask+0x2e4>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0;     // Zera o contador de ataques
 800101c:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <StartGameTask+0x2ec>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;   // Inicia com a primeira opção (Fogo) pré-selecionada
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <StartGameTask+0x2e0>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]

              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 8001028:	2204      	movs	r2, #4
 800102a:	2100      	movs	r1, #0
 800102c:	4827      	ldr	r0, [pc, #156]	@ (80010cc <StartGameTask+0x2f0>)
 800102e:	f006 fc56 	bl	80078de <memset>
              memset((void*)eCpuPlayer.eAttackSequential, 0, sizeof(eCpuPlayer.eAttackSequential));
 8001032:	2204      	movs	r2, #4
 8001034:	2100      	movs	r1, #0
 8001036:	4826      	ldr	r0, [pc, #152]	@ (80010d0 <StartGameTask+0x2f4>)
 8001038:	f006 fc51 	bl	80078de <memset>

              srand(HAL_GetTick()); 
 800103c:	f001 fa1e 	bl	800247c <HAL_GetTick>
 8001040:	4603      	mov	r3, r0
 8001042:	4618      	mov	r0, r3
 8001044:	f006 fab8 	bl	80075b8 <srand>
              eCpuPlayer.ePersonaElemental = (rand() % 6);
 8001048:	f006 fae4 	bl	8007614 <rand>
 800104c:	4602      	mov	r2, r0
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <StartGameTask+0x2f8>)
 8001050:	fb83 3102 	smull	r3, r1, r3, r2
 8001054:	17d3      	asrs	r3, r2, #31
 8001056:	1ac9      	subs	r1, r1, r3
 8001058:	460b      	mov	r3, r1
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	440b      	add	r3, r1
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	1ad1      	subs	r1, r2, r3
 8001062:	b2ca      	uxtb	r2, r1
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <StartGameTask+0x2dc>)
 8001066:	705a      	strb	r2, [r3, #1]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001068:	2300      	movs	r3, #0
 800106a:	73bb      	strb	r3, [r7, #14]
 800106c:	e015      	b.n	800109a <StartGameTask+0x2be>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6); 
 800106e:	f006 fad1 	bl	8007614 <rand>
 8001072:	4602      	mov	r2, r0
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <StartGameTask+0x2f8>)
 8001076:	fb83 3102 	smull	r3, r1, r3, r2
 800107a:	17d3      	asrs	r3, r2, #31
 800107c:	1ac9      	subs	r1, r1, r3
 800107e:	460b      	mov	r3, r1
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	440b      	add	r3, r1
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	1ad1      	subs	r1, r2, r3
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	b2c9      	uxtb	r1, r1
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <StartGameTask+0x2dc>)
 800108e:	4413      	add	r3, r2
 8001090:	460a      	mov	r2, r1
 8001092:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	3301      	adds	r3, #1
 8001098:	73bb      	strb	r3, [r7, #14]
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d9e6      	bls.n	800106e <StartGameTask+0x292>
              }
              break;
 80010a0:	e000      	b.n	80010a4 <StartGameTask+0x2c8>
            }
            default:
            {
              break;
 80010a2:	bf00      	nop
            }
          }
          break;
 80010a4:	e129      	b.n	80012fa <StartGameTask+0x51e>
 80010a6:	bf00      	nop
 80010a8:	2000040c 	.word	0x2000040c
 80010ac:	20000410 	.word	0x20000410
 80010b0:	20000411 	.word	0x20000411
 80010b4:	2000041c 	.word	0x2000041c
 80010b8:	20000424 	.word	0x20000424
 80010bc:	20000414 	.word	0x20000414
 80010c0:	20000040 	.word	0x20000040
 80010c4:	20000418 	.word	0x20000418
 80010c8:	2000042a 	.word	0x2000042a
 80010cc:	2000041e 	.word	0x2000041e
 80010d0:	20000426 	.word	0x20000426
 80010d4:	2aaaaaab 	.word	0x2aaaaaab
        }
        case eBattleInit:
        {
          switch (cLocalKeyPressed)
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	3b23      	subs	r3, #35	@ 0x23
 80010dc:	2b21      	cmp	r3, #33	@ 0x21
 80010de:	f200 80b5 	bhi.w	800124c <StartGameTask+0x470>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <StartGameTask+0x30c>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	0800123f 	.word	0x0800123f
 80010ec:	0800124d 	.word	0x0800124d
 80010f0:	0800124d 	.word	0x0800124d
 80010f4:	0800124d 	.word	0x0800124d
 80010f8:	0800124d 	.word	0x0800124d
 80010fc:	0800124d 	.word	0x0800124d
 8001100:	0800124d 	.word	0x0800124d
 8001104:	080011a9 	.word	0x080011a9
 8001108:	0800124d 	.word	0x0800124d
 800110c:	0800124d 	.word	0x0800124d
 8001110:	0800124d 	.word	0x0800124d
 8001114:	0800124d 	.word	0x0800124d
 8001118:	0800124d 	.word	0x0800124d
 800111c:	0800124d 	.word	0x0800124d
 8001120:	0800124d 	.word	0x0800124d
 8001124:	0800124d 	.word	0x0800124d
 8001128:	0800124d 	.word	0x0800124d
 800112c:	0800124d 	.word	0x0800124d
 8001130:	0800124d 	.word	0x0800124d
 8001134:	0800124d 	.word	0x0800124d
 8001138:	0800124d 	.word	0x0800124d
 800113c:	0800124d 	.word	0x0800124d
 8001140:	0800124d 	.word	0x0800124d
 8001144:	0800124d 	.word	0x0800124d
 8001148:	0800124d 	.word	0x0800124d
 800114c:	0800124d 	.word	0x0800124d
 8001150:	0800124d 	.word	0x0800124d
 8001154:	0800124d 	.word	0x0800124d
 8001158:	0800124d 	.word	0x0800124d
 800115c:	0800124d 	.word	0x0800124d
 8001160:	08001171 	.word	0x08001171
 8001164:	0800117f 	.word	0x0800117f
 8001168:	0800118d 	.word	0x0800118d
 800116c:	0800119b 	.word	0x0800119b
          {
            case FIRE_KEY:
            {
              selectedOption = 0;
 8001170:	4b66      	ldr	r3, [pc, #408]	@ (800130c <StartGameTask+0x530>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001176:	4b66      	ldr	r3, [pc, #408]	@ (8001310 <StartGameTask+0x534>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
              break;
 800117c:	e067      	b.n	800124e <StartGameTask+0x472>
            }
            case WATER_KEY:
            {
              selectedOption = 1;
 800117e:	4b63      	ldr	r3, [pc, #396]	@ (800130c <StartGameTask+0x530>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001184:	4b62      	ldr	r3, [pc, #392]	@ (8001310 <StartGameTask+0x534>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
              break;
 800118a:	e060      	b.n	800124e <StartGameTask+0x472>
            }
            case AIR_KEY: 
            {
              selectedOption = 2;
 800118c:	4b5f      	ldr	r3, [pc, #380]	@ (800130c <StartGameTask+0x530>)
 800118e:	2202      	movs	r2, #2
 8001190:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001192:	4b5f      	ldr	r3, [pc, #380]	@ (8001310 <StartGameTask+0x534>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
              break;
 8001198:	e059      	b.n	800124e <StartGameTask+0x472>
            }
            case EARTH_KEY: 
            {
              selectedOption = 3;
 800119a:	4b5c      	ldr	r3, [pc, #368]	@ (800130c <StartGameTask+0x530>)
 800119c:	2203      	movs	r2, #3
 800119e:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80011a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001310 <StartGameTask+0x534>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
              break;
 80011a6:	e052      	b.n	800124e <StartGameTask+0x472>
            }
            case CONFIRM_KEY:
            {
              switch(selectedOption)
 80011a8:	4b58      	ldr	r3, [pc, #352]	@ (800130c <StartGameTask+0x530>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d82f      	bhi.n	8001210 <StartGameTask+0x434>
 80011b0:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <StartGameTask+0x3dc>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011db 	.word	0x080011db
 80011c0:	080011ed 	.word	0x080011ed
 80011c4:	080011ff 	.word	0x080011ff
              {
                  case 0: eUserPlayer.eAttackSequential[u8ContAttack] = eRed;    break;
 80011c8:	4b52      	ldr	r3, [pc, #328]	@ (8001314 <StartGameTask+0x538>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <StartGameTask+0x53c>)
 80011d2:	4413      	add	r3, r2
 80011d4:	2200      	movs	r2, #0
 80011d6:	709a      	strb	r2, [r3, #2]
 80011d8:	e01a      	b.n	8001210 <StartGameTask+0x434>
                  case 1: eUserPlayer.eAttackSequential[u8ContAttack] = eBlue;   break;
 80011da:	4b4e      	ldr	r3, [pc, #312]	@ (8001314 <StartGameTask+0x538>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001318 <StartGameTask+0x53c>)
 80011e4:	4413      	add	r3, r2
 80011e6:	2201      	movs	r2, #1
 80011e8:	709a      	strb	r2, [r3, #2]
 80011ea:	e011      	b.n	8001210 <StartGameTask+0x434>
                  case 2: eUserPlayer.eAttackSequential[u8ContAttack] = eGreen;  break;
 80011ec:	4b49      	ldr	r3, [pc, #292]	@ (8001314 <StartGameTask+0x538>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b48      	ldr	r3, [pc, #288]	@ (8001318 <StartGameTask+0x53c>)
 80011f6:	4413      	add	r3, r2
 80011f8:	2202      	movs	r2, #2
 80011fa:	709a      	strb	r2, [r3, #2]
 80011fc:	e008      	b.n	8001210 <StartGameTask+0x434>
                  case 3: eUserPlayer.eAttackSequential[u8ContAttack] = eYellow; break;
 80011fe:	4b45      	ldr	r3, [pc, #276]	@ (8001314 <StartGameTask+0x538>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	4b44      	ldr	r3, [pc, #272]	@ (8001318 <StartGameTask+0x53c>)
 8001208:	4413      	add	r3, r2
 800120a:	2203      	movs	r2, #3
 800120c:	709a      	strb	r2, [r3, #2]
 800120e:	bf00      	nop
              }
              
              u8ContAttack++; 
 8001210:	4b40      	ldr	r3, [pc, #256]	@ (8001314 <StartGameTask+0x538>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	3301      	adds	r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b3e      	ldr	r3, [pc, #248]	@ (8001314 <StartGameTask+0x538>)
 800121c:	701a      	strb	r2, [r3, #0]
              
              if (u8ContAttack >= ATTACKS_NUMBERS)
 800121e:	4b3d      	ldr	r3, [pc, #244]	@ (8001314 <StartGameTask+0x538>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d906      	bls.n	8001236 <StartGameTask+0x45a>
              {
                vInitBattle(&eUserPlayer, &eCpuPlayer);
 8001228:	493c      	ldr	r1, [pc, #240]	@ (800131c <StartGameTask+0x540>)
 800122a:	483b      	ldr	r0, [pc, #236]	@ (8001318 <StartGameTask+0x53c>)
 800122c:	f7ff f9d0 	bl	80005d0 <vInitBattle>
                eCurrentState = ePlayerTurn;
 8001230:	4b3b      	ldr	r3, [pc, #236]	@ (8001320 <StartGameTask+0x544>)
 8001232:	2204      	movs	r2, #4
 8001234:	701a      	strb	r2, [r3, #0]
              }
              
              u8CleanScreen = TRUE;
 8001236:	4b36      	ldr	r3, [pc, #216]	@ (8001310 <StartGameTask+0x534>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
              break;
 800123c:	e007      	b.n	800124e <StartGameTask+0x472>
            }
            case BACK_KEY:
            {
              eCurrentState = ePersonaSelect;
 800123e:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <StartGameTask+0x544>)
 8001240:	2202      	movs	r2, #2
 8001242:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001244:	4b32      	ldr	r3, [pc, #200]	@ (8001310 <StartGameTask+0x534>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
              break;
 800124a:	e000      	b.n	800124e <StartGameTask+0x472>
            }
            default:
            {
              break;
 800124c:	bf00      	nop
            }
          }
          break;
 800124e:	e054      	b.n	80012fa <StartGameTask+0x51e>
        }
        case ePlayerTurn:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b2a      	cmp	r3, #42	@ 0x2a
 8001254:	d14e      	bne.n	80012f4 <StartGameTask+0x518>
          {            
            if (eUserPlayer.u8HeartPoints == 0 || eCpuPlayer.u8HeartPoints == 0)
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <StartGameTask+0x53c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <StartGameTask+0x48e>
 8001260:	4b2e      	ldr	r3, [pc, #184]	@ (800131c <StartGameTask+0x540>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d103      	bne.n	8001272 <StartGameTask+0x496>
            {
              eCurrentState = eEndGame; 
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <StartGameTask+0x544>)
 800126c:	2205      	movs	r2, #5
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e029      	b.n	80012c6 <StartGameTask+0x4ea>
            }
            else
            {
              // Ninguém perdeu, volta para selecionar novos ataques
              eCurrentState = eBattleInit;
 8001272:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <StartGameTask+0x544>)
 8001274:	2203      	movs	r2, #3
 8001276:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0; // Prepara para o novo round
 8001278:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <StartGameTask+0x538>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;
 800127e:	4b23      	ldr	r3, [pc, #140]	@ (800130c <StartGameTask+0x530>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 8001284:	2204      	movs	r2, #4
 8001286:	2100      	movs	r1, #0
 8001288:	4826      	ldr	r0, [pc, #152]	@ (8001324 <StartGameTask+0x548>)
 800128a:	f006 fb28 	bl	80078de <memset>
              
              // Gera novos ataques para a CPU para o próximo round
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 800128e:	2300      	movs	r3, #0
 8001290:	737b      	strb	r3, [r7, #13]
 8001292:	e015      	b.n	80012c0 <StartGameTask+0x4e4>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6);
 8001294:	f006 f9be 	bl	8007614 <rand>
 8001298:	4602      	mov	r2, r0
 800129a:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <StartGameTask+0x54c>)
 800129c:	fb83 3102 	smull	r3, r1, r3, r2
 80012a0:	17d3      	asrs	r3, r2, #31
 80012a2:	1ac9      	subs	r1, r1, r3
 80012a4:	460b      	mov	r3, r1
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	440b      	add	r3, r1
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	1ad1      	subs	r1, r2, r3
 80012ae:	7b7b      	ldrb	r3, [r7, #13]
 80012b0:	b2c9      	uxtb	r1, r1
 80012b2:	4a1a      	ldr	r2, [pc, #104]	@ (800131c <StartGameTask+0x540>)
 80012b4:	4413      	add	r3, r2
 80012b6:	460a      	mov	r2, r1
 80012b8:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80012ba:	7b7b      	ldrb	r3, [r7, #13]
 80012bc:	3301      	adds	r3, #1
 80012be:	737b      	strb	r3, [r7, #13]
 80012c0:	7b7b      	ldrb	r3, [r7, #13]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d9e6      	bls.n	8001294 <StartGameTask+0x4b8>
              }
            }
            u8CleanScreen = TRUE;
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <StartGameTask+0x534>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
          }
          break;
 80012cc:	e012      	b.n	80012f4 <StartGameTask+0x518>
        }
        case eEndGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80012d2:	d111      	bne.n	80012f8 <StartGameTask+0x51c>
          {
            eCurrentState = eInitGame;
 80012d4:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <StartGameTask+0x544>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <StartGameTask+0x534>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
          }
          break;
 80012e0:	e00a      	b.n	80012f8 <StartGameTask+0x51c>
        }
        default:
        {
          // Estado desconhecido, volta para o início por segurança
          eCurrentState = eInitGame;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <StartGameTask+0x544>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
          u8CleanScreen = TRUE;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <StartGameTask+0x534>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
          break;
 80012ee:	e004      	b.n	80012fa <StartGameTask+0x51e>
          break;
 80012f0:	bf00      	nop
 80012f2:	e002      	b.n	80012fa <StartGameTask+0x51e>
          break;
 80012f4:	bf00      	nop
 80012f6:	e000      	b.n	80012fa <StartGameTask+0x51e>
          break;
 80012f8:	bf00      	nop
        }
      }
      osMutexRelease(gameMutexHandle);
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <StartGameTask+0x550>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fe56 	bl	8004fb0 <osMutexRelease>
    }
    osDelay(50);
 8001304:	2032      	movs	r0, #50	@ 0x32
 8001306:	f003 fdd8 	bl	8004eba <osDelay>
    cLocalKeyPressed = NONE_KEY;
 800130a:	e56b      	b.n	8000de4 <StartGameTask+0x8>
 800130c:	20000414 	.word	0x20000414
 8001310:	20000040 	.word	0x20000040
 8001314:	2000042a 	.word	0x2000042a
 8001318:	2000041c 	.word	0x2000041c
 800131c:	20000424 	.word	0x20000424
 8001320:	20000411 	.word	0x20000411
 8001324:	2000041e 	.word	0x2000041e
 8001328:	2aaaaaab 	.word	0x2aaaaaab
 800132c:	2000040c 	.word	0x2000040c

08001330 <StartDisplayTask>:
  }
}

void StartDisplayTask(void const * argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b092      	sub	sp, #72	@ 0x48
 8001334:	af02      	add	r7, sp, #8
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  char buffer[30];
  uint8_t u8RedrawScreen = FALSE;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  for(;;)
  {

    osMutexWait(gameMutexHandle, osWaitForever);
 800133e:	4bb0      	ldr	r3, [pc, #704]	@ (8001600 <StartDisplayTask+0x2d0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f04f 31ff 	mov.w	r1, #4294967295
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fde4 	bl	8004f14 <osMutexWait>
    if (TRUE == u8CleanScreen) {
 800134c:	4bad      	ldr	r3, [pc, #692]	@ (8001604 <StartDisplayTask+0x2d4>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d105      	bne.n	8001362 <StartDisplayTask+0x32>
        u8RedrawScreen = TRUE;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        u8CleanScreen = FALSE; 
 800135c:	4ba9      	ldr	r3, [pc, #676]	@ (8001604 <StartDisplayTask+0x2d4>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 8001362:	4ba7      	ldr	r3, [pc, #668]	@ (8001600 <StartDisplayTask+0x2d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f003 fe22 	bl	8004fb0 <osMutexRelease>


    if(TRUE == u8RedrawScreen)
 800136c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001370:	2b01      	cmp	r3, #1
 8001372:	f040 834f 	bne.w	8001a14 <StartDisplayTask+0x6e4>
    {
      ClearScreen();
 8001376:	f7ff fa49 	bl	800080c <ClearScreen>

      switch(eCurrentState)
 800137a:	4ba3      	ldr	r3, [pc, #652]	@ (8001608 <StartDisplayTask+0x2d8>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b05      	cmp	r3, #5
 8001382:	f200 8338 	bhi.w	80019f6 <StartDisplayTask+0x6c6>
 8001386:	a201      	add	r2, pc, #4	@ (adr r2, 800138c <StartDisplayTask+0x5c>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	080013a5 	.word	0x080013a5
 8001390:	080013d3 	.word	0x080013d3
 8001394:	080013e3 	.word	0x080013e3
 8001398:	080013f3 	.word	0x080013f3
 800139c:	08001733 	.word	0x08001733
 80013a0:	08001923 	.word	0x08001923
      {
          case eInitGame:
          {
            ST7789_DrawText(10, 10, "ElementalCube!", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 80013a4:	2302      	movs	r3, #2
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	2300      	movs	r3, #0
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013b0:	4a96      	ldr	r2, [pc, #600]	@ (800160c <StartDisplayTask+0x2dc>)
 80013b2:	210a      	movs	r1, #10
 80013b4:	200a      	movs	r0, #10
 80013b6:	f000 fd79 	bl	8001eac <ST7789_DrawText>
            ST7789_DrawText(10, 40, "Pressione *", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 80013ba:	2302      	movs	r3, #2
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013c6:	4a92      	ldr	r2, [pc, #584]	@ (8001610 <StartDisplayTask+0x2e0>)
 80013c8:	2128      	movs	r1, #40	@ 0x28
 80013ca:	200a      	movs	r0, #10
 80013cc:	f000 fd6e 	bl	8001eac <ST7789_DrawText>
            break;
 80013d0:	e31d      	b.n	8001a0e <StartDisplayTask+0x6de>
          }
          case eDificultSelect:
          {
            DrawMenu("Selecione Dificuldade", difficultyOptions, MENU_OPTIONS_DIFFICULTY, selectedOption);
 80013d2:	4b90      	ldr	r3, [pc, #576]	@ (8001614 <StartDisplayTask+0x2e4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2203      	movs	r2, #3
 80013d8:	498f      	ldr	r1, [pc, #572]	@ (8001618 <StartDisplayTask+0x2e8>)
 80013da:	4890      	ldr	r0, [pc, #576]	@ (800161c <StartDisplayTask+0x2ec>)
 80013dc:	f7ff fa24 	bl	8000828 <DrawMenu>
            break;
 80013e0:	e315      	b.n	8001a0e <StartDisplayTask+0x6de>
          }
          case ePersonaSelect:
          {
            DrawMenu("Selecione Personagem", personaOptions, MENU_OPTIONS_PERSONA, selectedOption);
 80013e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001614 <StartDisplayTask+0x2e4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2205      	movs	r2, #5
 80013e8:	498d      	ldr	r1, [pc, #564]	@ (8001620 <StartDisplayTask+0x2f0>)
 80013ea:	488e      	ldr	r0, [pc, #568]	@ (8001624 <StartDisplayTask+0x2f4>)
 80013ec:	f7ff fa1c 	bl	8000828 <DrawMenu>
            break;
 80013f0:	e30d      	b.n	8001a0e <StartDisplayTask+0x6de>
          }
          case eBattleInit:
          {
            sprintf(buffer, "Selecione o %d ataque", (u8ContAttack + 1));
 80013f2:	4b8d      	ldr	r3, [pc, #564]	@ (8001628 <StartDisplayTask+0x2f8>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	498b      	ldr	r1, [pc, #556]	@ (800162c <StartDisplayTask+0x2fc>)
 8001400:	4618      	mov	r0, r3
 8001402:	f006 fa07 	bl	8007814 <siprintf>
            ST7789_DrawText(10, 5, buffer, ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8001406:	f107 0208 	add.w	r2, r7, #8
 800140a:	2302      	movs	r3, #2
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001416:	2105      	movs	r1, #5
 8001418:	200a      	movs	r0, #10
 800141a:	f000 fd47 	bl	8001eac <ST7789_DrawText>

            uint16_t colorFogo  = (selectedOption == 0) ? ST7789_YELLOW : ST7789_WHITE;
 800141e:	4b7d      	ldr	r3, [pc, #500]	@ (8001614 <StartDisplayTask+0x2e4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <StartDisplayTask+0xfc>
 8001426:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800142a:	e001      	b.n	8001430 <StartDisplayTask+0x100>
 800142c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001430:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            uint16_t colorAgua  = (selectedOption == 1) ? ST7789_YELLOW : ST7789_WHITE;
 8001432:	4b78      	ldr	r3, [pc, #480]	@ (8001614 <StartDisplayTask+0x2e4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <StartDisplayTask+0x110>
 800143a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800143e:	e001      	b.n	8001444 <StartDisplayTask+0x114>
 8001440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001444:	857b      	strh	r3, [r7, #42]	@ 0x2a
            uint16_t colorAr    = (selectedOption == 2) ? ST7789_YELLOW : ST7789_WHITE;
 8001446:	4b73      	ldr	r3, [pc, #460]	@ (8001614 <StartDisplayTask+0x2e4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d102      	bne.n	8001454 <StartDisplayTask+0x124>
 800144e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001452:	e001      	b.n	8001458 <StartDisplayTask+0x128>
 8001454:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001458:	853b      	strh	r3, [r7, #40]	@ 0x28
            uint16_t colorTerra = (selectedOption == 3) ? ST7789_YELLOW : ST7789_WHITE;
 800145a:	4b6e      	ldr	r3, [pc, #440]	@ (8001614 <StartDisplayTask+0x2e4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d102      	bne.n	8001468 <StartDisplayTask+0x138>
 8001462:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001466:	e001      	b.n	800146c <StartDisplayTask+0x13c>
 8001468:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800146c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            ST7789_FillRectangle(10, 30, 20, 20, ST7789_RED);
 800146e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2314      	movs	r3, #20
 8001476:	2214      	movs	r2, #20
 8001478:	211e      	movs	r1, #30
 800147a:	200a      	movs	r0, #10
 800147c:	f000 fbee 	bl	8001c5c <ST7789_FillRectangle>
            ST7789_DrawText(40, 30, "A - Fogo", colorFogo, ST7789_BLACK, ST7789_SIZE);
 8001480:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001482:	2202      	movs	r2, #2
 8001484:	9201      	str	r2, [sp, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	9200      	str	r2, [sp, #0]
 800148a:	4a69      	ldr	r2, [pc, #420]	@ (8001630 <StartDisplayTask+0x300>)
 800148c:	211e      	movs	r1, #30
 800148e:	2028      	movs	r0, #40	@ 0x28
 8001490:	f000 fd0c 	bl	8001eac <ST7789_DrawText>

            ST7789_FillRectangle(10, 60, 20, 20, ST7789_BLUE);
 8001494:	231f      	movs	r3, #31
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2314      	movs	r3, #20
 800149a:	2214      	movs	r2, #20
 800149c:	213c      	movs	r1, #60	@ 0x3c
 800149e:	200a      	movs	r0, #10
 80014a0:	f000 fbdc 	bl	8001c5c <ST7789_FillRectangle>
            ST7789_DrawText(40, 60, "B - Agua", colorAgua, ST7789_BLACK, ST7789_SIZE);
 80014a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80014a6:	2202      	movs	r2, #2
 80014a8:	9201      	str	r2, [sp, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	9200      	str	r2, [sp, #0]
 80014ae:	4a61      	ldr	r2, [pc, #388]	@ (8001634 <StartDisplayTask+0x304>)
 80014b0:	213c      	movs	r1, #60	@ 0x3c
 80014b2:	2028      	movs	r0, #40	@ 0x28
 80014b4:	f000 fcfa 	bl	8001eac <ST7789_DrawText>

            ST7789_FillRectangle(10, 90, 20, 20, ST7789_CYAN);
 80014b8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2314      	movs	r3, #20
 80014c0:	2214      	movs	r2, #20
 80014c2:	215a      	movs	r1, #90	@ 0x5a
 80014c4:	200a      	movs	r0, #10
 80014c6:	f000 fbc9 	bl	8001c5c <ST7789_FillRectangle>
            ST7789_DrawText(40, 90, "C - Ar", colorAr, ST7789_BLACK, ST7789_SIZE);
 80014ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014cc:	2202      	movs	r2, #2
 80014ce:	9201      	str	r2, [sp, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	9200      	str	r2, [sp, #0]
 80014d4:	4a58      	ldr	r2, [pc, #352]	@ (8001638 <StartDisplayTask+0x308>)
 80014d6:	215a      	movs	r1, #90	@ 0x5a
 80014d8:	2028      	movs	r0, #40	@ 0x28
 80014da:	f000 fce7 	bl	8001eac <ST7789_DrawText>

            ST7789_FillRectangle(10, 120, 20, 20, ST7789_BROWN);
 80014de:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2314      	movs	r3, #20
 80014e6:	2214      	movs	r2, #20
 80014e8:	2178      	movs	r1, #120	@ 0x78
 80014ea:	200a      	movs	r0, #10
 80014ec:	f000 fbb6 	bl	8001c5c <ST7789_FillRectangle>
            ST7789_DrawText(40, 120, "D - Terra", colorTerra, ST7789_BLACK, ST7789_SIZE);
 80014f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014f2:	2202      	movs	r2, #2
 80014f4:	9201      	str	r2, [sp, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	9200      	str	r2, [sp, #0]
 80014fa:	4a50      	ldr	r2, [pc, #320]	@ (800163c <StartDisplayTask+0x30c>)
 80014fc:	2178      	movs	r1, #120	@ 0x78
 80014fe:	2028      	movs	r0, #40	@ 0x28
 8001500:	f000 fcd4 	bl	8001eac <ST7789_DrawText>

            ST7789_DrawText(10, 145, "Player:", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8001504:	2302      	movs	r3, #2
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	2300      	movs	r3, #0
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001510:	4a4b      	ldr	r2, [pc, #300]	@ (8001640 <StartDisplayTask+0x310>)
 8001512:	2191      	movs	r1, #145	@ 0x91
 8001514:	200a      	movs	r0, #10
 8001516:	f000 fcc9 	bl	8001eac <ST7789_DrawText>
            ST7789_DrawText(10, 190, "CPU:", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 800151a:	2302      	movs	r3, #2
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	2300      	movs	r3, #0
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001526:	4a47      	ldr	r2, [pc, #284]	@ (8001644 <StartDisplayTask+0x314>)
 8001528:	21be      	movs	r1, #190	@ 0xbe
 800152a:	200a      	movs	r0, #10
 800152c:	f000 fcbe 	bl	8001eac <ST7789_DrawText>

            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001536:	e0a4      	b.n	8001682 <StartDisplayTask+0x352>
            {
              uint8_t showAttack = FALSE;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
              if (selectedDifficulty == eDificultEasy)
 800153e:	4b42      	ldr	r3, [pc, #264]	@ (8001648 <StartDisplayTask+0x318>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <StartDisplayTask+0x220>
              {
                showAttack = TRUE; 
 8001548:	2301      	movs	r3, #1
 800154a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800154e:	e00f      	b.n	8001570 <StartDisplayTask+0x240>
              }
              else if (selectedDifficulty == eDificultMedium)
 8001550:	4b3d      	ldr	r3, [pc, #244]	@ (8001648 <StartDisplayTask+0x318>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d10a      	bne.n	8001570 <StartDisplayTask+0x240>
              {
                if (i == 0 || i == 2) 
 800155a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <StartDisplayTask+0x23a>
 8001562:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001566:	2b02      	cmp	r3, #2
 8001568:	d102      	bne.n	8001570 <StartDisplayTask+0x240>
                {
                  showAttack = TRUE;
 800156a:	2301      	movs	r3, #1
 800156c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                }
              }
              
              if(showAttack)
 8001570:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001574:	2b00      	cmp	r3, #0
 8001576:	d06b      	beq.n	8001650 <StartDisplayTask+0x320>
              {
                uint16_t attackColor = ST7789_WHITE;
 8001578:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800157c:	877b      	strh	r3, [r7, #58]	@ 0x3a
                switch(eCpuPlayer.eAttackSequential[i])
 800157e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001582:	4a32      	ldr	r2, [pc, #200]	@ (800164c <StartDisplayTask+0x31c>)
 8001584:	4413      	add	r3, r2
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b05      	cmp	r3, #5
 800158c:	d825      	bhi.n	80015da <StartDisplayTask+0x2aa>
 800158e:	a201      	add	r2, pc, #4	@ (adr r2, 8001594 <StartDisplayTask+0x264>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015b5 	.word	0x080015b5
 800159c:	080015bb 	.word	0x080015bb
 80015a0:	080015c3 	.word	0x080015c3
 80015a4:	080015cb 	.word	0x080015cb
 80015a8:	080015d3 	.word	0x080015d3
                {
                    case eRed:    attackColor = ST7789_RED;   break;
 80015ac:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80015b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80015b2:	e012      	b.n	80015da <StartDisplayTask+0x2aa>
                    case eBlue:   attackColor = ST7789_BLUE;  break;
 80015b4:	231f      	movs	r3, #31
 80015b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80015b8:	e00f      	b.n	80015da <StartDisplayTask+0x2aa>
                    case eGreen:  attackColor = ST7789_CYAN;  break;
 80015ba:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80015be:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80015c0:	e00b      	b.n	80015da <StartDisplayTask+0x2aa>
                    case eYellow: attackColor = ST7789_BROWN; break;
 80015c2:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 80015c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80015c8:	e007      	b.n	80015da <StartDisplayTask+0x2aa>
                    case eWhite:  attackColor = ST7789_WHITE; break;
 80015ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ce:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80015d0:	e003      	b.n	80015da <StartDisplayTask+0x2aa>
                    case eBlack:  attackColor = ST7789_GRAY;  break;
 80015d2:	f246 330c 	movw	r3, #25356	@ 0x630c
 80015d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80015d8:	bf00      	nop
                }
                ST7789_FillRectangle(10 + (i * 30), 210, 20, 20, attackColor);
 80015da:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80015de:	b29b      	uxth	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	330a      	adds	r3, #10
 80015ec:	b298      	uxth	r0, r3
 80015ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2314      	movs	r3, #20
 80015f4:	2214      	movs	r2, #20
 80015f6:	21d2      	movs	r1, #210	@ 0xd2
 80015f8:	f000 fb30 	bl	8001c5c <ST7789_FillRectangle>
 80015fc:	e03c      	b.n	8001678 <StartDisplayTask+0x348>
 80015fe:	bf00      	nop
 8001600:	2000040c 	.word	0x2000040c
 8001604:	20000040 	.word	0x20000040
 8001608:	20000411 	.word	0x20000411
 800160c:	08008a84 	.word	0x08008a84
 8001610:	08008a94 	.word	0x08008a94
 8001614:	20000414 	.word	0x20000414
 8001618:	20000044 	.word	0x20000044
 800161c:	08008aa0 	.word	0x08008aa0
 8001620:	20000050 	.word	0x20000050
 8001624:	08008ab8 	.word	0x08008ab8
 8001628:	2000042a 	.word	0x2000042a
 800162c:	08008ad0 	.word	0x08008ad0
 8001630:	08008ae8 	.word	0x08008ae8
 8001634:	08008af4 	.word	0x08008af4
 8001638:	08008b00 	.word	0x08008b00
 800163c:	08008b08 	.word	0x08008b08
 8001640:	08008b14 	.word	0x08008b14
 8001644:	08008b1c 	.word	0x08008b1c
 8001648:	20000418 	.word	0x20000418
 800164c:	20000424 	.word	0x20000424
              }
              else
              {
                ST7789_DrawText(10 + (i * 30), 210, "??", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8001650:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001654:	b29b      	uxth	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	330a      	adds	r3, #10
 8001662:	b298      	uxth	r0, r3
 8001664:	2302      	movs	r3, #2
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2300      	movs	r3, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001670:	4ab4      	ldr	r2, [pc, #720]	@ (8001944 <StartDisplayTask+0x614>)
 8001672:	21d2      	movs	r1, #210	@ 0xd2
 8001674:	f000 fc1a 	bl	8001eac <ST7789_DrawText>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001678:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800167c:	3301      	adds	r3, #1
 800167e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001682:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001686:	2b03      	cmp	r3, #3
 8001688:	f67f af56 	bls.w	8001538 <StartDisplayTask+0x208>
              }
            }

            for(uint8_t i = 0; i < u8ContAttack; i++)
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001692:	e046      	b.n	8001722 <StartDisplayTask+0x3f2>
            {
              uint16_t attackColor = ST7789_WHITE;
 8001694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001698:	86fb      	strh	r3, [r7, #54]	@ 0x36
              switch(eUserPlayer.eAttackSequential[i])
 800169a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800169e:	4aaa      	ldr	r2, [pc, #680]	@ (8001948 <StartDisplayTask+0x618>)
 80016a0:	4413      	add	r3, r2
 80016a2:	789b      	ldrb	r3, [r3, #2]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d825      	bhi.n	80016f6 <StartDisplayTask+0x3c6>
 80016aa:	a201      	add	r2, pc, #4	@ (adr r2, 80016b0 <StartDisplayTask+0x380>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	080016c9 	.word	0x080016c9
 80016b4:	080016d1 	.word	0x080016d1
 80016b8:	080016d7 	.word	0x080016d7
 80016bc:	080016df 	.word	0x080016df
 80016c0:	080016e7 	.word	0x080016e7
 80016c4:	080016ef 	.word	0x080016ef
              {
                  case eRed:    attackColor = ST7789_RED;   break;
 80016c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80016cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80016ce:	e012      	b.n	80016f6 <StartDisplayTask+0x3c6>
                  case eBlue:   attackColor = ST7789_BLUE;  break;
 80016d0:	231f      	movs	r3, #31
 80016d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80016d4:	e00f      	b.n	80016f6 <StartDisplayTask+0x3c6>
                  case eGreen:  attackColor = ST7789_CYAN;  break;
 80016d6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016da:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80016dc:	e00b      	b.n	80016f6 <StartDisplayTask+0x3c6>
                  case eYellow: attackColor = ST7789_BROWN; break;
 80016de:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 80016e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80016e4:	e007      	b.n	80016f6 <StartDisplayTask+0x3c6>
                  case eWhite:  attackColor = ST7789_WHITE; break;
 80016e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80016ec:	e003      	b.n	80016f6 <StartDisplayTask+0x3c6>
                  case eBlack:  attackColor = ST7789_GRAY;  break;
 80016ee:	f246 330c 	movw	r3, #25356	@ 0x630c
 80016f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80016f4:	bf00      	nop
              }
              ST7789_FillRectangle(10 + (i * 30), 160, 20, 20, attackColor);
 80016f6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	b29b      	uxth	r3, r3
 8001706:	330a      	adds	r3, #10
 8001708:	b298      	uxth	r0, r3
 800170a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2314      	movs	r3, #20
 8001710:	2214      	movs	r2, #20
 8001712:	21a0      	movs	r1, #160	@ 0xa0
 8001714:	f000 faa2 	bl	8001c5c <ST7789_FillRectangle>
            for(uint8_t i = 0; i < u8ContAttack; i++)
 8001718:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800171c:	3301      	adds	r3, #1
 800171e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001722:	4b8a      	ldr	r3, [pc, #552]	@ (800194c <StartDisplayTask+0x61c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800172c:	429a      	cmp	r2, r3
 800172e:	d3b1      	bcc.n	8001694 <StartDisplayTask+0x364>
            }
            break;
 8001730:	e16d      	b.n	8001a0e <StartDisplayTask+0x6de>
          }
          case ePlayerTurn:
          {
            ST7789_DrawText(10, 10, "Resultado do Round", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8001732:	2302      	movs	r3, #2
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	2300      	movs	r3, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800173e:	4a84      	ldr	r2, [pc, #528]	@ (8001950 <StartDisplayTask+0x620>)
 8001740:	210a      	movs	r1, #10
 8001742:	200a      	movs	r0, #10
 8001744:	f000 fbb2 	bl	8001eac <ST7789_DrawText>

            // Exibe a vida atual de ambos
            sprintf(buffer, "Sua Vida: %d", eUserPlayer.u8HeartPoints);
 8001748:	4b7f      	ldr	r3, [pc, #508]	@ (8001948 <StartDisplayTask+0x618>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	497f      	ldr	r1, [pc, #508]	@ (8001954 <StartDisplayTask+0x624>)
 8001756:	4618      	mov	r0, r3
 8001758:	f006 f85c 	bl	8007814 <siprintf>
            ST7789_DrawText(10, 40, buffer, ST7789_GREEN, ST7789_BLACK, ST7789_SIZE);
 800175c:	f107 0208 	add.w	r2, r7, #8
 8001760:	2302      	movs	r3, #2
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800176c:	2128      	movs	r1, #40	@ 0x28
 800176e:	200a      	movs	r0, #10
 8001770:	f000 fb9c 	bl	8001eac <ST7789_DrawText>

            sprintf(buffer, "Vida CPU: %d", eCpuPlayer.u8HeartPoints);
 8001774:	4b78      	ldr	r3, [pc, #480]	@ (8001958 <StartDisplayTask+0x628>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	4976      	ldr	r1, [pc, #472]	@ (800195c <StartDisplayTask+0x62c>)
 8001782:	4618      	mov	r0, r3
 8001784:	f006 f846 	bl	8007814 <siprintf>
            ST7789_DrawText(10, 60, buffer, ST7789_RED, ST7789_BLACK, ST7789_SIZE);
 8001788:	f107 0208 	add.w	r2, r7, #8
 800178c:	2302      	movs	r3, #2
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001798:	213c      	movs	r1, #60	@ 0x3c
 800179a:	200a      	movs	r0, #10
 800179c:	f000 fb86 	bl	8001eac <ST7789_DrawText>

            // Mostra as sequências de ataque que acabaram de ser usadas
            ST7789_DrawText(10, 90, "Seus Ataques:", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 80017a0:	2302      	movs	r3, #2
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ac:	4a6c      	ldr	r2, [pc, #432]	@ (8001960 <StartDisplayTask+0x630>)
 80017ae:	215a      	movs	r1, #90	@ 0x5a
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 fb7b 	bl	8001eac <ST7789_DrawText>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80017bc:	e047      	b.n	800184e <StartDisplayTask+0x51e>
            {
                uint16_t attackColor = ST7789_WHITE;
 80017be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c2:	867b      	strh	r3, [r7, #50]	@ 0x32
                switch(eUserPlayer.eAttackSequential[i])
 80017c4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80017c8:	4a5f      	ldr	r2, [pc, #380]	@ (8001948 <StartDisplayTask+0x618>)
 80017ca:	4413      	add	r3, r2
 80017cc:	789b      	ldrb	r3, [r3, #2]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d826      	bhi.n	8001822 <StartDisplayTask+0x4f2>
 80017d4:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <StartDisplayTask+0x4ac>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017f5 	.word	0x080017f5
 80017e0:	080017fd 	.word	0x080017fd
 80017e4:	08001803 	.word	0x08001803
 80017e8:	0800180b 	.word	0x0800180b
 80017ec:	08001813 	.word	0x08001813
 80017f0:	0800181b 	.word	0x0800181b
                {
                    case eRed:    attackColor = ST7789_RED;   break;
 80017f4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017f8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80017fa:	e012      	b.n	8001822 <StartDisplayTask+0x4f2>
                    case eBlue:   attackColor = ST7789_BLUE;  break;
 80017fc:	231f      	movs	r3, #31
 80017fe:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001800:	e00f      	b.n	8001822 <StartDisplayTask+0x4f2>
                    case eGreen:  attackColor = ST7789_CYAN;  break;
 8001802:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001806:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001808:	e00b      	b.n	8001822 <StartDisplayTask+0x4f2>
                    case eYellow: attackColor = ST7789_BROWN; break;
 800180a:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 800180e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001810:	e007      	b.n	8001822 <StartDisplayTask+0x4f2>
                    case eWhite:  attackColor = ST7789_WHITE; break;
 8001812:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001816:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001818:	e003      	b.n	8001822 <StartDisplayTask+0x4f2>
                    case eBlack:  attackColor = ST7789_GRAY;  break;
 800181a:	f246 330c 	movw	r3, #25356	@ 0x630c
 800181e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001820:	bf00      	nop
                }
                ST7789_FillRectangle(10 + (i * 30), 110, 20, 20, attackColor);
 8001822:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001826:	b29b      	uxth	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	330a      	adds	r3, #10
 8001834:	b298      	uxth	r0, r3
 8001836:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2314      	movs	r3, #20
 800183c:	2214      	movs	r2, #20
 800183e:	216e      	movs	r1, #110	@ 0x6e
 8001840:	f000 fa0c 	bl	8001c5c <ST7789_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001844:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001848:	3301      	adds	r3, #1
 800184a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800184e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001852:	2b03      	cmp	r3, #3
 8001854:	d9b3      	bls.n	80017be <StartDisplayTask+0x48e>
            }

            ST7789_DrawText(10, 140, "Ataques CPU:", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8001856:	2302      	movs	r3, #2
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	2300      	movs	r3, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001862:	4a40      	ldr	r2, [pc, #256]	@ (8001964 <StartDisplayTask+0x634>)
 8001864:	218c      	movs	r1, #140	@ 0x8c
 8001866:	200a      	movs	r0, #10
 8001868:	f000 fb20 	bl	8001eac <ST7789_DrawText>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 800186c:	2300      	movs	r3, #0
 800186e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001872:	e046      	b.n	8001902 <StartDisplayTask+0x5d2>
            {
                uint16_t attackColor = ST7789_WHITE;
 8001874:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001878:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                switch(eCpuPlayer.eAttackSequential[i])
 800187a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800187e:	4a36      	ldr	r2, [pc, #216]	@ (8001958 <StartDisplayTask+0x628>)
 8001880:	4413      	add	r3, r2
 8001882:	789b      	ldrb	r3, [r3, #2]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b05      	cmp	r3, #5
 8001888:	d825      	bhi.n	80018d6 <StartDisplayTask+0x5a6>
 800188a:	a201      	add	r2, pc, #4	@ (adr r2, 8001890 <StartDisplayTask+0x560>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	080018a9 	.word	0x080018a9
 8001894:	080018b1 	.word	0x080018b1
 8001898:	080018b7 	.word	0x080018b7
 800189c:	080018bf 	.word	0x080018bf
 80018a0:	080018c7 	.word	0x080018c7
 80018a4:	080018cf 	.word	0x080018cf
                {
                    case eRed:    attackColor = ST7789_RED;   break;
 80018a8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80018ae:	e012      	b.n	80018d6 <StartDisplayTask+0x5a6>
                    case eBlue:   attackColor = ST7789_BLUE;  break;
 80018b0:	231f      	movs	r3, #31
 80018b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80018b4:	e00f      	b.n	80018d6 <StartDisplayTask+0x5a6>
                    case eGreen:  attackColor = ST7789_CYAN;  break;
 80018b6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80018ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80018bc:	e00b      	b.n	80018d6 <StartDisplayTask+0x5a6>
                    case eYellow: attackColor = ST7789_BROWN; break;
 80018be:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 80018c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80018c4:	e007      	b.n	80018d6 <StartDisplayTask+0x5a6>
                    case eWhite:  attackColor = ST7789_WHITE; break;
 80018c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80018cc:	e003      	b.n	80018d6 <StartDisplayTask+0x5a6>
                    case eBlack:  attackColor = ST7789_GRAY;  break;
 80018ce:	f246 330c 	movw	r3, #25356	@ 0x630c
 80018d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80018d4:	bf00      	nop
                }
                ST7789_FillRectangle(10 + (i * 30), 160, 20, 20, attackColor);
 80018d6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80018da:	b29b      	uxth	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	330a      	adds	r3, #10
 80018e8:	b298      	uxth	r0, r3
 80018ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2314      	movs	r3, #20
 80018f0:	2214      	movs	r2, #20
 80018f2:	21a0      	movs	r1, #160	@ 0xa0
 80018f4:	f000 f9b2 	bl	8001c5c <ST7789_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 80018f8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80018fc:	3301      	adds	r3, #1
 80018fe:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001902:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001906:	2b03      	cmp	r3, #3
 8001908:	d9b4      	bls.n	8001874 <StartDisplayTask+0x544>
            }

            ST7789_DrawText(10, 200, "Pressione * para continuar...", ST7789_YELLOW, ST7789_BLACK, ST7789_SIZE);
 800190a:	2302      	movs	r3, #2
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001916:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <StartDisplayTask+0x638>)
 8001918:	21c8      	movs	r1, #200	@ 0xc8
 800191a:	200a      	movs	r0, #10
 800191c:	f000 fac6 	bl	8001eac <ST7789_DrawText>
            break;
 8001920:	e075      	b.n	8001a0e <StartDisplayTask+0x6de>
            break;
          }
          case eEndGame:
          {
            if (eUserPlayer.u8HeartPoints > 0)
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <StartDisplayTask+0x618>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d021      	beq.n	8001970 <StartDisplayTask+0x640>
            {
                ST7789_DrawText(10, 10, "VITORIA!", ST7789_GREEN, ST7789_BLACK, ST7789_SIZE);
 800192c:	2302      	movs	r3, #2
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001938:	4a0c      	ldr	r2, [pc, #48]	@ (800196c <StartDisplayTask+0x63c>)
 800193a:	210a      	movs	r1, #10
 800193c:	200a      	movs	r0, #10
 800193e:	f000 fab5 	bl	8001eac <ST7789_DrawText>
 8001942:	e020      	b.n	8001986 <StartDisplayTask+0x656>
 8001944:	08008b24 	.word	0x08008b24
 8001948:	2000041c 	.word	0x2000041c
 800194c:	2000042a 	.word	0x2000042a
 8001950:	08008b28 	.word	0x08008b28
 8001954:	08008b3c 	.word	0x08008b3c
 8001958:	20000424 	.word	0x20000424
 800195c:	08008b4c 	.word	0x08008b4c
 8001960:	08008b5c 	.word	0x08008b5c
 8001964:	08008b6c 	.word	0x08008b6c
 8001968:	08008b7c 	.word	0x08008b7c
 800196c:	08008b9c 	.word	0x08008b9c
            }
            else
            {
                ST7789_DrawText(10, 10, "DERROTA!", ST7789_RED, ST7789_BLACK, ST7789_SIZE);
 8001970:	2302      	movs	r3, #2
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2300      	movs	r3, #0
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800197c:	4a27      	ldr	r2, [pc, #156]	@ (8001a1c <StartDisplayTask+0x6ec>)
 800197e:	210a      	movs	r1, #10
 8001980:	200a      	movs	r0, #10
 8001982:	f000 fa93 	bl	8001eac <ST7789_DrawText>
            }

            sprintf(buffer, "Sua Vida Final: %d", eUserPlayer.u8HeartPoints);
 8001986:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <StartDisplayTask+0x6f0>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	4924      	ldr	r1, [pc, #144]	@ (8001a24 <StartDisplayTask+0x6f4>)
 8001994:	4618      	mov	r0, r3
 8001996:	f005 ff3d 	bl	8007814 <siprintf>
            ST7789_DrawText(10, 40, buffer, ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 800199a:	f107 0208 	add.w	r2, r7, #8
 800199e:	2302      	movs	r3, #2
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019aa:	2128      	movs	r1, #40	@ 0x28
 80019ac:	200a      	movs	r0, #10
 80019ae:	f000 fa7d 	bl	8001eac <ST7789_DrawText>
            sprintf(buffer, "Vida Final CPU: %d", eCpuPlayer.u8HeartPoints);
 80019b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <StartDisplayTask+0x6f8>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	491b      	ldr	r1, [pc, #108]	@ (8001a2c <StartDisplayTask+0x6fc>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f005 ff27 	bl	8007814 <siprintf>
            ST7789_DrawText(10, 60, buffer, ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 80019c6:	f107 0208 	add.w	r2, r7, #8
 80019ca:	2302      	movs	r3, #2
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d6:	213c      	movs	r1, #60	@ 0x3c
 80019d8:	200a      	movs	r0, #10
 80019da:	f000 fa67 	bl	8001eac <ST7789_DrawText>

            ST7789_DrawText(10, 100, "Pressione * para recomecar", ST7789_YELLOW, ST7789_BLACK, ST7789_SIZE);
 80019de:	2302      	movs	r3, #2
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80019ea:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <StartDisplayTask+0x700>)
 80019ec:	2164      	movs	r1, #100	@ 0x64
 80019ee:	200a      	movs	r0, #10
 80019f0:	f000 fa5c 	bl	8001eac <ST7789_DrawText>
            break;
 80019f4:	e00b      	b.n	8001a0e <StartDisplayTask+0x6de>
          }
          default:
          {
            ST7789_DrawText(10, 10, "Erro de Estado!", ST7789_RED, ST7789_BLACK, ST7789_SIZE);
 80019f6:	2302      	movs	r3, #2
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	2300      	movs	r3, #0
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a02:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <StartDisplayTask+0x704>)
 8001a04:	210a      	movs	r1, #10
 8001a06:	200a      	movs	r0, #10
 8001a08:	f000 fa50 	bl	8001eac <ST7789_DrawText>
            break;
 8001a0c:	bf00      	nop
          }
      }
      u8RedrawScreen = FALSE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    osDelay(5);
 8001a14:	2005      	movs	r0, #5
 8001a16:	f003 fa50 	bl	8004eba <osDelay>
    osMutexWait(gameMutexHandle, osWaitForever);
 8001a1a:	e490      	b.n	800133e <StartDisplayTask+0xe>
 8001a1c:	08008ba8 	.word	0x08008ba8
 8001a20:	2000041c 	.word	0x2000041c
 8001a24:	08008bb4 	.word	0x08008bb4
 8001a28:	20000424 	.word	0x20000424
 8001a2c:	08008bc8 	.word	0x08008bc8
 8001a30:	08008bdc 	.word	0x08008bdc
 8001a34:	08008bf8 	.word	0x08008bf8

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x8>

08001a44 <ST7789_Select>:
#define LCD_DC_PIN    LCD_DC_Pin
#define LCD_RST_PORT  LCD_RST_GPIO_Port
#define LCD_RST_PIN   LCD_RST_Pin

// Funções privadas (auxiliares)
static void ST7789_Select(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2140      	movs	r1, #64	@ 0x40
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <ST7789_Select+0x14>)
 8001a4e:	f001 fa31 	bl	8002eb4 <HAL_GPIO_WritePin>
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40020400 	.word	0x40020400

08001a5c <ST7789_Unselect>:

static void ST7789_Unselect(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2140      	movs	r1, #64	@ 0x40
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <ST7789_Unselect+0x14>)
 8001a66:	f001 fa25 	bl	8002eb4 <HAL_GPIO_WritePin>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40020400 	.word	0x40020400

08001a74 <ST7789_Reset>:

static void ST7789_Reset(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a7e:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <ST7789_Reset+0x2c>)
 8001a80:	f001 fa18 	bl	8002eb4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001a84:	2005      	movs	r0, #5
 8001a86:	f000 fd05 	bl	8002494 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a90:	4803      	ldr	r0, [pc, #12]	@ (8001aa0 <ST7789_Reset+0x2c>)
 8001a92:	f001 fa0f 	bl	8002eb4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001a96:	2005      	movs	r0, #5
 8001a98:	f000 fcfc 	bl	8002494 <HAL_Delay>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <ST7789_WriteCommand>:

static void ST7789_WriteCommand(uint8_t cmd) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET); // Modo Comando
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2180      	movs	r1, #128	@ 0x80
 8001ab2:	4809      	ldr	r0, [pc, #36]	@ (8001ad8 <ST7789_WriteCommand+0x34>)
 8001ab4:	f001 f9fe 	bl	8002eb4 <HAL_GPIO_WritePin>
    ST7789_Select();
 8001ab8:	f7ff ffc4 	bl	8001a44 <ST7789_Select>
    HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001abc:	1df9      	adds	r1, r7, #7
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <ST7789_WriteCommand+0x38>)
 8001ac6:	f001 ff0a 	bl	80038de <HAL_SPI_Transmit>
    ST7789_Unselect();
 8001aca:	f7ff ffc7 	bl	8001a5c <ST7789_Unselect>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	20000360 	.word	0x20000360

08001ae0 <ST7789_WriteData>:

static void ST7789_WriteData(uint8_t* buff, size_t buff_size) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET); // Modo Dado
 8001aea:	2201      	movs	r2, #1
 8001aec:	2180      	movs	r1, #128	@ 0x80
 8001aee:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <ST7789_WriteData+0x34>)
 8001af0:	f001 f9e0 	bl	8002eb4 <HAL_GPIO_WritePin>
    ST7789_Select();
 8001af4:	f7ff ffa6 	bl	8001a44 <ST7789_Select>
    HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <ST7789_WriteData+0x38>)
 8001b04:	f001 feeb 	bl	80038de <HAL_SPI_Transmit>
    ST7789_Unselect();
 8001b08:	f7ff ffa8 	bl	8001a5c <ST7789_Unselect>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40020800 	.word	0x40020800
 8001b18:	20000360 	.word	0x20000360

08001b1c <ST7789_SetAddressWindow>:

// Define a "janela" de memória onde os pixels serão escritos
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4604      	mov	r4, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	4611      	mov	r1, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	80fb      	strh	r3, [r7, #6]
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80bb      	strh	r3, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	807b      	strh	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	803b      	strh	r3, [r7, #0]
    uint8_t data[4];

    // Column Address Set
    ST7789_WriteCommand(0x2A);
 8001b3a:	202a      	movs	r0, #42	@ 0x2a
 8001b3c:	f7ff ffb2 	bl	8001aa4 <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	733b      	strb	r3, [r7, #12]
    data[1] = x0 & 0xFF;
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	737b      	strb	r3, [r7, #13]
    data[2] = (x1 >> 8) & 0xFF;
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	73bb      	strb	r3, [r7, #14]
    data[3] = x1 & 0xFF;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	73fb      	strb	r3, [r7, #15]
    ST7789_WriteData(data, sizeof(data));
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2104      	movs	r1, #4
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ffba 	bl	8001ae0 <ST7789_WriteData>

    // Row Address Set
    ST7789_WriteCommand(0x2B);
 8001b6c:	202b      	movs	r0, #43	@ 0x2b
 8001b6e:	f7ff ff99 	bl	8001aa4 <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 8001b72:	88bb      	ldrh	r3, [r7, #4]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	733b      	strb	r3, [r7, #12]
    data[1] = y0 & 0xFF;
 8001b7c:	88bb      	ldrh	r3, [r7, #4]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	737b      	strb	r3, [r7, #13]
    data[2] = (y1 >> 8) & 0xFF;
 8001b82:	883b      	ldrh	r3, [r7, #0]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	73bb      	strb	r3, [r7, #14]
    data[3] = y1 & 0xFF;
 8001b8c:	883b      	ldrh	r3, [r7, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	73fb      	strb	r3, [r7, #15]
    ST7789_WriteData(data, sizeof(data));
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2104      	movs	r1, #4
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ffa1 	bl	8001ae0 <ST7789_WriteData>

    // Write to RAM
    ST7789_WriteCommand(0x2C);
 8001b9e:	202c      	movs	r0, #44	@ 0x2c
 8001ba0:	f7ff ff80 	bl	8001aa4 <ST7789_WriteCommand>
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}

08001bac <ST7789_Init>:

// Função de inicialização com a sequência de comandos para o ST7789
void ST7789_Init(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
    ST7789_Reset();
 8001bb2:	f7ff ff5f 	bl	8001a74 <ST7789_Reset>

    ST7789_WriteCommand(0x11); // Sleep Out
 8001bb6:	2011      	movs	r0, #17
 8001bb8:	f7ff ff74 	bl	8001aa4 <ST7789_WriteCommand>
    HAL_Delay(120);
 8001bbc:	2078      	movs	r0, #120	@ 0x78
 8001bbe:	f000 fc69 	bl	8002494 <HAL_Delay>

    ST7789_WriteCommand(0x36); // Memory Data Access Control
 8001bc2:	2036      	movs	r0, #54	@ 0x36
 8001bc4:	f7ff ff6e 	bl	8001aa4 <ST7789_WriteCommand>
    uint8_t madctl = 0x00;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	71fb      	strb	r3, [r7, #7]
    ST7789_WriteData(&madctl, 1);
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	2101      	movs	r1, #1
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff85 	bl	8001ae0 <ST7789_WriteData>

    ST7789_WriteCommand(0x3A); // Interface Pixel Format
 8001bd6:	203a      	movs	r0, #58	@ 0x3a
 8001bd8:	f7ff ff64 	bl	8001aa4 <ST7789_WriteCommand>
    uint8_t pixfmt = 0x55; // 16 bits/pixel
 8001bdc:	2355      	movs	r3, #85	@ 0x55
 8001bde:	71bb      	strb	r3, [r7, #6]
    ST7789_WriteData(&pixfmt, 1);
 8001be0:	1dbb      	adds	r3, r7, #6
 8001be2:	2101      	movs	r1, #1
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff7b 	bl	8001ae0 <ST7789_WriteData>

    ST7789_WriteCommand(0x21); // Display Inversion On
 8001bea:	2021      	movs	r0, #33	@ 0x21
 8001bec:	f7ff ff5a 	bl	8001aa4 <ST7789_WriteCommand>

    ST7789_WriteCommand(0x13); // Normal Display Mode On
 8001bf0:	2013      	movs	r0, #19
 8001bf2:	f7ff ff57 	bl	8001aa4 <ST7789_WriteCommand>

    ST7789_WriteCommand(0x29); // Display On
 8001bf6:	2029      	movs	r0, #41	@ 0x29
 8001bf8:	f7ff ff54 	bl	8001aa4 <ST7789_WriteCommand>
    HAL_Delay(120);
 8001bfc:	2078      	movs	r0, #120	@ 0x78
 8001bfe:	f000 fc49 	bl	8002494 <HAL_Delay>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <ST7789_DrawPixel>:

// Funções públicas (implementação)
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	80fb      	strh	r3, [r7, #6]
 8001c14:	460b      	mov	r3, r1
 8001c16:	80bb      	strh	r3, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	807b      	strh	r3, [r7, #2]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	2bef      	cmp	r3, #239	@ 0xef
 8001c20:	d817      	bhi.n	8001c52 <ST7789_DrawPixel+0x48>
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	2bef      	cmp	r3, #239	@ 0xef
 8001c26:	d814      	bhi.n	8001c52 <ST7789_DrawPixel+0x48>

    ST7789_SetAddressWindow(x, y, x, y);
 8001c28:	88bb      	ldrh	r3, [r7, #4]
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	88b9      	ldrh	r1, [r7, #4]
 8001c2e:	88f8      	ldrh	r0, [r7, #6]
 8001c30:	f7ff ff74 	bl	8001b1c <ST7789_SetAddressWindow>
    uint8_t data[] = { (color >> 8) & 0xFF, color & 0xFF };
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	733b      	strb	r3, [r7, #12]
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	737b      	strb	r3, [r7, #13]
    ST7789_WriteData(data, sizeof(data));
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2102      	movs	r1, #2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff48 	bl	8001ae0 <ST7789_WriteData>
 8001c50:	e000      	b.n	8001c54 <ST7789_DrawPixel+0x4a>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001c52:	bf00      	nop
}
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <ST7789_FillRectangle>:

void ST7789_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	80fb      	strh	r3, [r7, #6]
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80bb      	strh	r3, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	807b      	strh	r3, [r7, #2]
 8001c76:	4613      	mov	r3, r2
 8001c78:	803b      	strh	r3, [r7, #0]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2bef      	cmp	r3, #239	@ 0xef
 8001c7e:	d853      	bhi.n	8001d28 <ST7789_FillRectangle+0xcc>
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	2bef      	cmp	r3, #239	@ 0xef
 8001c84:	d850      	bhi.n	8001d28 <ST7789_FillRectangle+0xcc>
    if ((x + w - 1) >= ST7789_WIDTH) w = ST7789_WIDTH - x;
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c8e:	dd03      	ble.n	8001c98 <ST7789_FillRectangle+0x3c>
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001c96:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 8001c98:	88ba      	ldrh	r2, [r7, #4]
 8001c9a:	883b      	ldrh	r3, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ca0:	dd03      	ble.n	8001caa <ST7789_FillRectangle+0x4e>
 8001ca2:	88bb      	ldrh	r3, [r7, #4]
 8001ca4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001ca8:	803b      	strh	r3, [r7, #0]

    ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001caa:	88fa      	ldrh	r2, [r7, #6]
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29c      	uxth	r4, r3
 8001cb6:	88ba      	ldrh	r2, [r7, #4]
 8001cb8:	883b      	ldrh	r3, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	88b9      	ldrh	r1, [r7, #4]
 8001cc4:	88f8      	ldrh	r0, [r7, #6]
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	f7ff ff28 	bl	8001b1c <ST7789_SetAddressWindow>

    uint8_t data[] = { (color >> 8) & 0xFF, color & 0xFF };
 8001ccc:	8c3b      	ldrh	r3, [r7, #32]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	733b      	strb	r3, [r7, #12]
 8001cd6:	8c3b      	ldrh	r3, [r7, #32]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET); // Data mode
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2180      	movs	r1, #128	@ 0x80
 8001ce0:	4813      	ldr	r0, [pc, #76]	@ (8001d30 <ST7789_FillRectangle+0xd4>)
 8001ce2:	f001 f8e7 	bl	8002eb4 <HAL_GPIO_WritePin>
    ST7789_Select();
 8001ce6:	f7ff fead 	bl	8001a44 <ST7789_Select>

    for (y = 0; y < h; y++) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	80bb      	strh	r3, [r7, #4]
 8001cee:	e014      	b.n	8001d1a <ST7789_FillRectangle+0xbe>
        for (x = 0; x < w; x++) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	e00a      	b.n	8001d0c <ST7789_FillRectangle+0xb0>
            HAL_SPI_Transmit(&ST7789_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001cf6:	f107 010c 	add.w	r1, r7, #12
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	2202      	movs	r2, #2
 8001d00:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <ST7789_FillRectangle+0xd8>)
 8001d02:	f001 fdec 	bl	80038de <HAL_SPI_Transmit>
        for (x = 0; x < w; x++) {
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	80fb      	strh	r3, [r7, #6]
 8001d0c:	88fa      	ldrh	r2, [r7, #6]
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d3f0      	bcc.n	8001cf6 <ST7789_FillRectangle+0x9a>
    for (y = 0; y < h; y++) {
 8001d14:	88bb      	ldrh	r3, [r7, #4]
 8001d16:	3301      	adds	r3, #1
 8001d18:	80bb      	strh	r3, [r7, #4]
 8001d1a:	88ba      	ldrh	r2, [r7, #4]
 8001d1c:	883b      	ldrh	r3, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d3e6      	bcc.n	8001cf0 <ST7789_FillRectangle+0x94>
        }
    }
    ST7789_Unselect();
 8001d22:	f7ff fe9b 	bl	8001a5c <ST7789_Unselect>
 8001d26:	e000      	b.n	8001d2a <ST7789_FillRectangle+0xce>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001d28:	bf00      	nop
}
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	40020800 	.word	0x40020800
 8001d34:	20000360 	.word	0x20000360

08001d38 <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
    ST7789_FillRectangle(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	23f0      	movs	r3, #240	@ 0xf0
 8001d48:	22f0      	movs	r2, #240	@ 0xf0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff ff85 	bl	8001c5c <ST7789_FillRectangle>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <ST7789_DrawChar>:
 * @param y Coordenada Y do canto superior esquerdo.
 * @param ch O caractere a ser desenhado.
 * @param foreground Cor do caractere.
 * @param background Cor do fundo.
 */
void ST7789_DrawChar(uint16_t x, uint16_t y, char ch, uint16_t foreground, uint16_t background, uint8_t size) {
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	4604      	mov	r4, r0
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	80fb      	strh	r3, [r7, #6]
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80bb      	strh	r3, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
 8001d76:	4613      	mov	r3, r2
 8001d78:	803b      	strh	r3, [r7, #0]
    if (x + (FONT_WIDTH * size) > ST7789_WIDTH || y + (FONT_HEIGHT * size) > ST7789_HEIGHT) {
 8001d7a:	88f9      	ldrh	r1, [r7, #6]
 8001d7c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	2bf0      	cmp	r3, #240	@ 0xf0
 8001d8a:	f300 8089 	bgt.w	8001ea0 <ST7789_DrawChar+0x144>
 8001d8e:	88b9      	ldrh	r1, [r7, #4]
 8001d90:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	440b      	add	r3, r1
 8001d9e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001da0:	dc7e      	bgt.n	8001ea0 <ST7789_DrawChar+0x144>
        return; // Garante que o caractere ampliado ainda caiba na tela
    }

    uint32_t font_idx = (ch - ' ') * FONT_HEIGHT;
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f1a3 0220 	sub.w	r2, r3, #32
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < FONT_HEIGHT; i++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e06f      	b.n	8001e98 <ST7789_DrawChar+0x13c>
        uint8_t line_data = font[font_idx + i];
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ea8 <ST7789_DrawChar+0x14c>)
 8001dc0:	5cd3      	ldrb	r3, [r2, r3]
 8001dc2:	72fb      	strb	r3, [r7, #11]
        for (int j = 0; j < FONT_WIDTH; j++) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e060      	b.n	8001e8c <ST7789_DrawChar+0x130>
            if ((line_data >> j) & 1) {
 8001dca:	7afa      	ldrb	r2, [r7, #11]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	fa42 f303 	asr.w	r3, r2, r3
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d034      	beq.n	8001e44 <ST7789_DrawChar+0xe8>
                // Em vez de desenhar um pixel, desenha um retângulo do tamanho do scale
                if (size == 1) {
 8001dda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10e      	bne.n	8001e00 <ST7789_DrawChar+0xa4>
                    ST7789_DrawPixel(x + j, y + i, foreground);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	4413      	add	r3, r2
 8001dea:	b298      	uxth	r0, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	88bb      	ldrh	r3, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	883a      	ldrh	r2, [r7, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff ff06 	bl	8001c0a <ST7789_DrawPixel>
 8001dfe:	e042      	b.n	8001e86 <ST7789_DrawChar+0x12a>
                } else {
                    ST7789_FillRectangle(x + (i * size), y + (j * size), size, size, foreground);
 8001e00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	fb12 f303 	smulbb	r3, r2, r3
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	4413      	add	r3, r2
 8001e14:	b298      	uxth	r0, r3
 8001e16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	fb12 f303 	smulbb	r3, r2, r3
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	88bb      	ldrh	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b299      	uxth	r1, r3
 8001e2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e36:	b29c      	uxth	r4, r3
 8001e38:	883b      	ldrh	r3, [r7, #0]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	f7ff ff0d 	bl	8001c5c <ST7789_FillRectangle>
 8001e42:	e020      	b.n	8001e86 <ST7789_DrawChar+0x12a>
                }
            } else {
                 // Faz o mesmo para o fundo, para não deixar "buracos"
                 ST7789_FillRectangle(x + (i * size), y + (j * size), size, size, background);
 8001e44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	fb12 f303 	smulbb	r3, r2, r3
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4413      	add	r3, r2
 8001e58:	b298      	uxth	r0, r3
 8001e5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	fb12 f303 	smulbb	r3, r2, r3
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	88bb      	ldrh	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b299      	uxth	r1, r3
 8001e70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e7a:	b29c      	uxth	r4, r3
 8001e7c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	4623      	mov	r3, r4
 8001e82:	f7ff feeb 	bl	8001c5c <ST7789_FillRectangle>
        for (int j = 0; j < FONT_WIDTH; j++) {
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	dd9b      	ble.n	8001dca <ST7789_DrawChar+0x6e>
    for (int i = 0; i < FONT_HEIGHT; i++) {
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b09      	cmp	r3, #9
 8001e9c:	dd8c      	ble.n	8001db8 <ST7789_DrawChar+0x5c>
 8001e9e:	e000      	b.n	8001ea2 <ST7789_DrawChar+0x146>
        return; // Garante que o caractere ampliado ainda caiba na tela
 8001ea0:	bf00      	nop
            }
        }
    }
}
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	08008c10 	.word	0x08008c10

08001eac <ST7789_DrawText>:
 * @param y Coordenada Y do início do texto.
 * @param str Ponteiro para a string a ser desenhada.
 * @param foreground Cor do texto.
 * @param background Cor do fundo.
 */
void ST7789_DrawText(uint16_t x, uint16_t y, const char* str, uint16_t foreground, uint16_t background, uint8_t size) {
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60ba      	str	r2, [r7, #8]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	81fb      	strh	r3, [r7, #14]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	81bb      	strh	r3, [r7, #12]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	80fb      	strh	r3, [r7, #6]
    uint16_t current_x = x;
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
 8001ec4:	82fb      	strh	r3, [r7, #22]

    while (*str) {
 8001ec6:	e022      	b.n	8001f0e <ST7789_DrawText+0x62>
        // A largura de cada caractere agora é multiplicada pelo tamanho
        if (current_x + (FONT_WIDTH * size) > ST7789_WIDTH) {
 8001ec8:	8af9      	ldrh	r1, [r7, #22]
 8001eca:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ed8:	dc1e      	bgt.n	8001f18 <ST7789_DrawText+0x6c>
            break; 
        }

        ST7789_DrawChar(current_x, y, *str, foreground, background, size);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	88fc      	ldrh	r4, [r7, #6]
 8001ee0:	89b9      	ldrh	r1, [r7, #12]
 8001ee2:	8af8      	ldrh	r0, [r7, #22]
 8001ee4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ee8:	9301      	str	r3, [sp, #4]
 8001eea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	4623      	mov	r3, r4
 8001ef0:	f7ff ff34 	bl	8001d5c <ST7789_DrawChar>
        current_x += (FONT_WIDTH * size); // Avança o cursor pela largura correta
 8001ef4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	00d2      	lsls	r2, r2, #3
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	8afb      	ldrh	r3, [r7, #22]
 8001f04:	4413      	add	r3, r2
 8001f06:	82fb      	strh	r3, [r7, #22]
        str++;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1d8      	bne.n	8001ec8 <ST7789_DrawText+0x1c>
    }
}
 8001f16:	e000      	b.n	8001f1a <ST7789_DrawText+0x6e>
            break; 
 8001f18:	bf00      	nop
}
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
	...

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b22      	ldr	r3, [pc, #136]	@ (8001fb8 <HAL_MspInit+0x94>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a21      	ldr	r2, [pc, #132]	@ (8001fb8 <HAL_MspInit+0x94>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb8 <HAL_MspInit+0x94>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_MspInit+0x94>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb8 <HAL_MspInit+0x94>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_MspInit+0x94>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	210f      	movs	r1, #15
 8001f66:	f06f 0001 	mvn.w	r0, #1
 8001f6a:	f000 fb92 	bl	8002692 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2105      	movs	r1, #5
 8001f72:	2001      	movs	r0, #1
 8001f74:	f000 fb8d 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f000 fba6 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2105      	movs	r1, #5
 8001f82:	2004      	movs	r0, #4
 8001f84:	f000 fb85 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001f88:	2004      	movs	r0, #4
 8001f8a:	f000 fb9e 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2105      	movs	r1, #5
 8001f92:	2005      	movs	r0, #5
 8001f94:	f000 fb7d 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f98:	2005      	movs	r0, #5
 8001f9a:	f000 fb96 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2105      	movs	r1, #5
 8001fa2:	2051      	movs	r0, #81	@ 0x51
 8001fa4:	f000 fb75 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001fa8:	2051      	movs	r0, #81	@ 0x51
 8001faa:	f000 fb8e 	bl	80026ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	@ 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <HAL_SPI_MspInit+0x94>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d133      	bne.n	8002046 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <HAL_SPI_MspInit+0x98>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <HAL_SPI_MspInit+0x98>)
 8001fe8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_SPI_MspInit+0x98>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_SPI_MspInit+0x98>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a14      	ldr	r2, [pc, #80]	@ (8002054 <HAL_SPI_MspInit+0x98>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_SPI_MspInit+0x98>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002016:	23e0      	movs	r3, #224	@ 0xe0
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002026:	2305      	movs	r3, #5
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4809      	ldr	r0, [pc, #36]	@ (8002058 <HAL_SPI_MspInit+0x9c>)
 8002032:	f000 fd8b 	bl	8002b4c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2105      	movs	r1, #5
 800203a:	2023      	movs	r0, #35	@ 0x23
 800203c:	f000 fb29 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002040:	2023      	movs	r0, #35	@ 0x23
 8002042:	f000 fb42 	bl	80026ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	@ 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40013000 	.word	0x40013000
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000

0800205c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	@ 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1d      	ldr	r2, [pc, #116]	@ (80020f0 <HAL_UART_MspInit+0x94>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d133      	bne.n	80020e6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <HAL_UART_MspInit+0x98>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	4a1b      	ldr	r2, [pc, #108]	@ (80020f4 <HAL_UART_MspInit+0x98>)
 8002088:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_UART_MspInit+0x98>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_UART_MspInit+0x98>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a14      	ldr	r2, [pc, #80]	@ (80020f4 <HAL_UART_MspInit+0x98>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_UART_MspInit+0x98>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b6:	2303      	movs	r3, #3
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020c6:	2308      	movs	r3, #8
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4809      	ldr	r0, [pc, #36]	@ (80020f8 <HAL_UART_MspInit+0x9c>)
 80020d2:	f000 fd3b 	bl	8002b4c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2105      	movs	r1, #5
 80020da:	2034      	movs	r0, #52	@ 0x34
 80020dc:	f000 fad9 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020e0:	2034      	movs	r0, #52	@ 0x34
 80020e2:	f000 faf2 	bl	80026ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80020e6:	bf00      	nop
 80020e8:	3728      	adds	r7, #40	@ 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40004c00 	.word	0x40004c00
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020000 	.word	0x40020000

080020fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <NMI_Handler+0x4>

08002104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <MemManage_Handler+0x4>

08002114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <BusFault_Handler+0x4>

0800211c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <UsageFault_Handler+0x4>

08002124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002136:	f000 f98d 	bl	8002454 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800213a:	f004 fbd5 	bl	80068e8 <xTaskGetSchedulerState>
 800213e:	4603      	mov	r3, r0
 8002140:	2b01      	cmp	r3, #1
 8002142:	d001      	beq.n	8002148 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002144:	f004 ffb8 	bl	80070b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002150:	f000 feca 	bl	8002ee8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800215c:	f000 fb62 	bl	8002824 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <SPI1_IRQHandler+0x10>)
 800217a:	f001 fcf5 	bl	8003b68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000360 	.word	0x20000360

08002188 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800218c:	4802      	ldr	r0, [pc, #8]	@ (8002198 <UART4_IRQHandler+0x10>)
 800218e:	f001 ff35 	bl	8003ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200003b8 	.word	0x200003b8

0800219c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  return 1;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_kill>:

int _kill(int pid, int sig)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021c4:	f005 fbda 	bl	800797c <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2216      	movs	r2, #22
 80021cc:	601a      	str	r2, [r3, #0]
  return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_exit>:

void _exit (int status)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e2:	f04f 31ff 	mov.w	r1, #4294967295
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffe7 	bl	80021ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <_exit+0x12>

080021f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	e00a      	b.n	8002218 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002202:	f3af 8000 	nop.w
 8002206:	4601      	mov	r1, r0
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	60ba      	str	r2, [r7, #8]
 800220e:	b2ca      	uxtb	r2, r1
 8002210:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf0      	blt.n	8002202 <_read+0x12>
  }

  return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e009      	b.n	8002250 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	60ba      	str	r2, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	dbf1      	blt.n	800223c <_write+0x12>
  }
  return len;
 8002258:	687b      	ldr	r3, [r7, #4]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_close>:

int _close(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800228a:	605a      	str	r2, [r3, #4]
  return 0;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_isatty>:

int _isatty(int file)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d4:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <_sbrk+0x5c>)
 80022d6:	4b15      	ldr	r3, [pc, #84]	@ (800232c <_sbrk+0x60>)
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e0:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <_sbrk+0x64>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	@ (8002334 <_sbrk+0x68>)
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <_sbrk+0x64>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d207      	bcs.n	800230c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022fc:	f005 fb3e 	bl	800797c <__errno>
 8002300:	4603      	mov	r3, r0
 8002302:	220c      	movs	r2, #12
 8002304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	e009      	b.n	8002320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800230c:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002312:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <_sbrk+0x64>)
 800231c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20020000 	.word	0x20020000
 800232c:	00000400 	.word	0x00000400
 8002330:	2000042c 	.word	0x2000042c
 8002334:	200042d8 	.word	0x200042d8

08002338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <SystemInit+0x20>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <SystemInit+0x20>)
 8002344:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002348:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800235c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002394 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002360:	f7ff ffea 	bl	8002338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002364:	480c      	ldr	r0, [pc, #48]	@ (8002398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002366:	490d      	ldr	r1, [pc, #52]	@ (800239c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002368:	4a0d      	ldr	r2, [pc, #52]	@ (80023a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800236c:	e002      	b.n	8002374 <LoopCopyDataInit>

0800236e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002372:	3304      	adds	r3, #4

08002374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002378:	d3f9      	bcc.n	800236e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800237a:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800237c:	4c0a      	ldr	r4, [pc, #40]	@ (80023a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002380:	e001      	b.n	8002386 <LoopFillZerobss>

08002382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002384:	3204      	adds	r2, #4

08002386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002388:	d3fb      	bcc.n	8002382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800238a:	f005 fafd 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800238e:	f7fe fb35 	bl	80009fc <main>
  bx  lr    
 8002392:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800239c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80023a0:	080090e0 	.word	0x080090e0
  ldr r2, =_sbss
 80023a4:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80023a8:	200042d4 	.word	0x200042d4

080023ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ac:	e7fe      	b.n	80023ac <ADC_IRQHandler>
	...

080023b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b4:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <HAL_Init+0x40>)
 80023ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c0:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <HAL_Init+0x40>)
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <HAL_Init+0x40>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d8:	2003      	movs	r0, #3
 80023da:	f000 f94f 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023de:	200f      	movs	r0, #15
 80023e0:	f000 f808 	bl	80023f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e4:	f7ff fd9e 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023c00 	.word	0x40023c00

080023f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_InitTick+0x54>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b12      	ldr	r3, [pc, #72]	@ (800244c <HAL_InitTick+0x58>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800240a:	fbb3 f3f1 	udiv	r3, r3, r1
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f967 	bl	80026e6 <HAL_SYSTICK_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e00e      	b.n	8002440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d80a      	bhi.n	800243e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002428:	2200      	movs	r2, #0
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f000 f92f 	bl	8002692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002434:	4a06      	ldr	r2, [pc, #24]	@ (8002450 <HAL_InitTick+0x5c>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000064 	.word	0x20000064
 800244c:	2000006c 	.word	0x2000006c
 8002450:	20000068 	.word	0x20000068

08002454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_IncTick+0x20>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_IncTick+0x24>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <HAL_IncTick+0x24>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	2000006c 	.word	0x2000006c
 8002478:	20000430 	.word	0x20000430

0800247c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTick;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_GetTick+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000430 	.word	0x20000430

08002494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff ffee 	bl	800247c <HAL_GetTick>
 80024a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d005      	beq.n	80024ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_Delay+0x44>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ba:	bf00      	nop
 80024bc:	f7ff ffde 	bl	800247c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d8f7      	bhi.n	80024bc <HAL_Delay+0x28>
  {
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000006c 	.word	0x2000006c

080024dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002504:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800250c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250e:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002528:	4b04      	ldr	r3, [pc, #16]	@ (800253c <__NVIC_GetPriorityGrouping+0x18>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0307 	and.w	r3, r3, #7
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db0b      	blt.n	800256a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4907      	ldr	r1, [pc, #28]	@ (8002578 <__NVIC_EnableIRQ+0x38>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	@ (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	@ (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	@ 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
         );
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	@ 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f7ff ff8e 	bl	800257c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff29 	bl	80024dc <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a4:	f7ff ff3e 	bl	8002524 <__NVIC_GetPriorityGrouping>
 80026a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ff8e 	bl	80025d0 <NVIC_EncodePriority>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff5d 	bl	800257c <__NVIC_SetPriority>
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff31 	bl	8002540 <__NVIC_EnableIRQ>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffa2 	bl	8002638 <SysTick_Config>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff feb6 	bl	800247c <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d008      	beq.n	8002730 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2280      	movs	r2, #128	@ 0x80
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e052      	b.n	80027d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0216 	bic.w	r2, r2, #22
 800273e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800274e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d103      	bne.n	8002760 <HAL_DMA_Abort+0x62>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0208 	bic.w	r2, r2, #8
 800276e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002780:	e013      	b.n	80027aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002782:	f7ff fe7b 	bl	800247c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b05      	cmp	r3, #5
 800278e:	d90c      	bls.n	80027aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e015      	b.n	80027d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e4      	bne.n	8002782 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	223f      	movs	r2, #63	@ 0x3f
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d004      	beq.n	80027fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2280      	movs	r2, #128	@ 0x80
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e00c      	b.n	8002816 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2205      	movs	r2, #5
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800282e:	4b49      	ldr	r3, [pc, #292]	@ (8002954 <HAL_FLASH_IRQHandler+0x130>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800283a:	4b47      	ldr	r3, [pc, #284]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d107      	bne.n	8002854 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002844:	4b44      	ldr	r3, [pc, #272]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800284a:	4b43      	ldr	r3, [pc, #268]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	e00b      	b.n	800286c <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002854:	4b40      	ldr	r3, [pc, #256]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d103      	bne.n	8002866 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800285e:	4b3e      	ldr	r3, [pc, #248]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	e002      	b.n	800286c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002866:	4b3c      	ldr	r3, [pc, #240]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 800286c:	f000 f88a 	bl	8002984 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f87d 	bl	8002970 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002876:	4b38      	ldr	r3, [pc, #224]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800287c:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <HAL_FLASH_IRQHandler+0x130>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d04a      	beq.n	800291e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002888:	4b32      	ldr	r3, [pc, #200]	@ (8002954 <HAL_FLASH_IRQHandler+0x130>)
 800288a:	2201      	movs	r2, #1
 800288c:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800288e:	4b32      	ldr	r3, [pc, #200]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d12d      	bne.n	80028f4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002898:	4b2f      	ldr	r3, [pc, #188]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	3b01      	subs	r3, #1
 800289e:	4a2e      	ldr	r2, [pc, #184]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028a0:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 80028a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d015      	beq.n	80028d6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80028aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f853 	bl	800295c <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 80028b6:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	3301      	adds	r3, #1
 80028bc:	4a26      	ldr	r2, [pc, #152]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028be:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80028c0:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80028c6:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028c8:	7a1b      	ldrb	r3, [r3, #8]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4619      	mov	r1, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8ae 	bl	8002a30 <FLASH_Erase_Sector>
 80028d4:	e023      	b.n	800291e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80028e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 80028e8:	f000 f8ea 	bl	8002ac0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f835 	bl	800295c <HAL_FLASH_EndOfOperationCallback>
 80028f2:	e014      	b.n	800291e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80028f4:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 80028fe:	f000 f8df 	bl	8002ac0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002902:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f828 	bl	800295c <HAL_FLASH_EndOfOperationCallback>
 800290c:	e004      	b.n	8002918 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800290e:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f822 	bl	800295c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002918:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800291e:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <HAL_FLASH_IRQHandler+0x134>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d111      	bne.n	800294c <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002928:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <HAL_FLASH_IRQHandler+0x130>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <HAL_FLASH_IRQHandler+0x130>)
 800292e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002932:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002934:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <HAL_FLASH_IRQHandler+0x130>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4a06      	ldr	r2, [pc, #24]	@ (8002954 <HAL_FLASH_IRQHandler+0x130>)
 800293a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800293e:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002940:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <HAL_FLASH_IRQHandler+0x130>)
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	4a03      	ldr	r2, [pc, #12]	@ (8002954 <HAL_FLASH_IRQHandler+0x130>)
 8002946:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800294a:	6113      	str	r3, [r2, #16]
  }
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023c00 	.word	0x40023c00
 8002958:	20000070 	.word	0x20000070

0800295c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002988:	4b27      	ldr	r3, [pc, #156]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002994:	4b25      	ldr	r3, [pc, #148]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	4a23      	ldr	r2, [pc, #140]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 800299e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80029a0:	4b21      	ldr	r3, [pc, #132]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 80029a2:	2210      	movs	r2, #16
 80029a4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80029a6:	4b20      	ldr	r3, [pc, #128]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80029b2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f043 0308 	orr.w	r3, r3, #8
 80029ba:	4a1c      	ldr	r2, [pc, #112]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 80029bc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80029be:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 80029c0:	2220      	movs	r2, #32
 80029c2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80029c4:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	4a14      	ldr	r2, [pc, #80]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 80029da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80029dc:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 80029de:	2240      	movs	r2, #64	@ 0x40
 80029e0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80029e2:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80029ee:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f043 0302 	orr.w	r3, r3, #2
 80029f6:	4a0d      	ldr	r2, [pc, #52]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 80029f8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80029fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 80029fc:	2280      	movs	r2, #128	@ 0x80
 80029fe:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002a00:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f043 0320 	orr.w	r3, r3, #32
 8002a14:	4a05      	ldr	r2, [pc, #20]	@ (8002a2c <FLASH_SetErrorCode+0xa8>)
 8002a16:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <FLASH_SetErrorCode+0xa4>)
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	60da      	str	r2, [r3, #12]
  }
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40023c00 	.word	0x40023c00
 8002a2c:	20000070 	.word	0x20000070

08002a30 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	e010      	b.n	8002a6e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d103      	bne.n	8002a5a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002a52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e009      	b.n	8002a6e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d103      	bne.n	8002a68 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002a60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e002      	b.n	8002a6e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002a68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a6e:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	4a12      	ldr	r2, [pc, #72]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	490f      	ldr	r1, [pc, #60]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002a8c:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8002a90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	4a07      	ldr	r2, [pc, #28]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002a9e:	f043 0302 	orr.w	r3, r3, #2
 8002aa2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	4a04      	ldr	r2, [pc, #16]	@ (8002abc <FLASH_Erase_Sector+0x8c>)
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aae:	6113      	str	r3, [r2, #16]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40023c00 	.word	0x40023c00

08002ac0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002ac4:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d017      	beq.n	8002b00 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002ad6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ada:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002adc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002ae2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002aee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002af2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af4:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a13      	ldr	r2, [pc, #76]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002afe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002b00:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d017      	beq.n	8002b3c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002b12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b16:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002b1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a07      	ldr	r2, [pc, #28]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002b2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b2e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <FLASH_FlushCaches+0x88>)
 8002b36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b3a:	6013      	str	r3, [r2, #0]
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023c00 	.word	0x40023c00

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	@ 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	e16b      	b.n	8002e40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	f040 815a 	bne.w	8002e3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d005      	beq.n	8002b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d130      	bne.n	8002c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 0201 	and.w	r2, r3, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d017      	beq.n	8002c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d123      	bne.n	8002c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	220f      	movs	r2, #15
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	08da      	lsrs	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3208      	adds	r2, #8
 8002c8a:	69b9      	ldr	r1, [r7, #24]
 8002c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0203 	and.w	r2, r3, #3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80b4 	beq.w	8002e3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b60      	ldr	r3, [pc, #384]	@ (8002e58 <HAL_GPIO_Init+0x30c>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	4a5f      	ldr	r2, [pc, #380]	@ (8002e58 <HAL_GPIO_Init+0x30c>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e58 <HAL_GPIO_Init+0x30c>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cee:	4a5b      	ldr	r2, [pc, #364]	@ (8002e5c <HAL_GPIO_Init+0x310>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a52      	ldr	r2, [pc, #328]	@ (8002e60 <HAL_GPIO_Init+0x314>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02b      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a51      	ldr	r2, [pc, #324]	@ (8002e64 <HAL_GPIO_Init+0x318>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d025      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a50      	ldr	r2, [pc, #320]	@ (8002e68 <HAL_GPIO_Init+0x31c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01f      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e6c <HAL_GPIO_Init+0x320>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d019      	beq.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4e      	ldr	r2, [pc, #312]	@ (8002e70 <HAL_GPIO_Init+0x324>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <HAL_GPIO_Init+0x216>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e74 <HAL_GPIO_Init+0x328>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00d      	beq.n	8002d5e <HAL_GPIO_Init+0x212>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4c      	ldr	r2, [pc, #304]	@ (8002e78 <HAL_GPIO_Init+0x32c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <HAL_GPIO_Init+0x20e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e7c <HAL_GPIO_Init+0x330>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_GPIO_Init+0x20a>
 8002d52:	2307      	movs	r3, #7
 8002d54:	e00e      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d56:	2308      	movs	r3, #8
 8002d58:	e00c      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	e00a      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d5e:	2305      	movs	r3, #5
 8002d60:	e008      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d62:	2304      	movs	r3, #4
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d72:	2300      	movs	r3, #0
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d84:	4935      	ldr	r1, [pc, #212]	@ (8002e5c <HAL_GPIO_Init+0x310>)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d92:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db6:	4a32      	ldr	r2, [pc, #200]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dbc:	4b30      	ldr	r3, [pc, #192]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de0:	4a27      	ldr	r2, [pc, #156]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002de6:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e34:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b0f      	cmp	r3, #15
 8002e44:	f67f ae90 	bls.w	8002b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40021400 	.word	0x40021400
 8002e78:	40021800 	.word	0x40021800
 8002e7c:	40021c00 	.word	0x40021c00
 8002e80:	40013c00 	.word	0x40013c00

08002e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	e001      	b.n	8002ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec4:	787b      	ldrb	r3, [r7, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed0:	e003      	b.n	8002eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ed2:	887b      	ldrh	r3, [r7, #2]
 8002ed4:	041a      	lsls	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	619a      	str	r2, [r3, #24]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002ef8:	f000 f808 	bl	8002f0c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002efc:	4b02      	ldr	r3, [pc, #8]	@ (8002f08 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002efe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f02:	615a      	str	r2, [r3, #20]
  }
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40013c00 	.word	0x40013c00

08002f0c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e267      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d075      	beq.n	8003026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f3a:	4b88      	ldr	r3, [pc, #544]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d00c      	beq.n	8002f60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f46:	4b85      	ldr	r3, [pc, #532]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d112      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f52:	4b82      	ldr	r3, [pc, #520]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f5e:	d10b      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	4b7e      	ldr	r3, [pc, #504]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d05b      	beq.n	8003024 <HAL_RCC_OscConfig+0x108>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d157      	bne.n	8003024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e242      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f80:	d106      	bne.n	8002f90 <HAL_RCC_OscConfig+0x74>
 8002f82:	4b76      	ldr	r3, [pc, #472]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a75      	ldr	r2, [pc, #468]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e01d      	b.n	8002fcc <HAL_RCC_OscConfig+0xb0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x98>
 8002f9a:	4b70      	ldr	r3, [pc, #448]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a6f      	ldr	r2, [pc, #444]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6c      	ldr	r2, [pc, #432]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0xb0>
 8002fb4:	4b69      	ldr	r3, [pc, #420]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a68      	ldr	r2, [pc, #416]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b66      	ldr	r3, [pc, #408]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a65      	ldr	r2, [pc, #404]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7ff fa52 	bl	800247c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7ff fa4e 	bl	800247c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	@ 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e207      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b5b      	ldr	r3, [pc, #364]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0xc0>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7ff fa3e 	bl	800247c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7ff fa3a 	bl	800247c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	@ 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e1f3      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	4b51      	ldr	r3, [pc, #324]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0xe8>
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d063      	beq.n	80030fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003032:	4b4a      	ldr	r3, [pc, #296]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b47      	ldr	r3, [pc, #284]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003046:	2b08      	cmp	r3, #8
 8003048:	d11c      	bne.n	8003084 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b44      	ldr	r3, [pc, #272]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	4b41      	ldr	r3, [pc, #260]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_RCC_OscConfig+0x152>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e1c7      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306e:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4937      	ldr	r1, [pc, #220]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	e03a      	b.n	80030fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308c:	4b34      	ldr	r3, [pc, #208]	@ (8003160 <HAL_RCC_OscConfig+0x244>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7ff f9f3 	bl	800247c <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309a:	f7ff f9ef 	bl	800247c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e1a8      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	4b2b      	ldr	r3, [pc, #172]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4b28      	ldr	r3, [pc, #160]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4925      	ldr	r1, [pc, #148]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
 80030cc:	e015      	b.n	80030fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ce:	4b24      	ldr	r3, [pc, #144]	@ (8003160 <HAL_RCC_OscConfig+0x244>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7ff f9d2 	bl	800247c <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030dc:	f7ff f9ce 	bl	800247c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e187      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ee:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d036      	beq.n	8003174 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d016      	beq.n	800313c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <HAL_RCC_OscConfig+0x248>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7ff f9b2 	bl	800247c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311c:	f7ff f9ae 	bl	800247c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e167      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312e:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <HAL_RCC_OscConfig+0x240>)
 8003130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x200>
 800313a:	e01b      	b.n	8003174 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313c:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_RCC_OscConfig+0x248>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7ff f99b 	bl	800247c <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	e00e      	b.n	8003168 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314a:	f7ff f997 	bl	800247c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d907      	bls.n	8003168 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e150      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
 800315c:	40023800 	.word	0x40023800
 8003160:	42470000 	.word	0x42470000
 8003164:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	4b88      	ldr	r3, [pc, #544]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 800316a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ea      	bne.n	800314a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8097 	beq.w	80032b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003186:	4b81      	ldr	r3, [pc, #516]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	4b7d      	ldr	r3, [pc, #500]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	4a7c      	ldr	r2, [pc, #496]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031a2:	4b7a      	ldr	r3, [pc, #488]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ae:	2301      	movs	r3, #1
 80031b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b2:	4b77      	ldr	r3, [pc, #476]	@ (8003390 <HAL_RCC_OscConfig+0x474>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d118      	bne.n	80031f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031be:	4b74      	ldr	r3, [pc, #464]	@ (8003390 <HAL_RCC_OscConfig+0x474>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a73      	ldr	r2, [pc, #460]	@ (8003390 <HAL_RCC_OscConfig+0x474>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ca:	f7ff f957 	bl	800247c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d2:	f7ff f953 	bl	800247c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e10c      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003390 <HAL_RCC_OscConfig+0x474>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x2ea>
 80031f8:	4b64      	ldr	r3, [pc, #400]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fc:	4a63      	ldr	r2, [pc, #396]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6713      	str	r3, [r2, #112]	@ 0x70
 8003204:	e01c      	b.n	8003240 <HAL_RCC_OscConfig+0x324>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b05      	cmp	r3, #5
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x30c>
 800320e:	4b5f      	ldr	r3, [pc, #380]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	4a5e      	ldr	r2, [pc, #376]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	6713      	str	r3, [r2, #112]	@ 0x70
 800321a:	4b5c      	ldr	r3, [pc, #368]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321e:	4a5b      	ldr	r2, [pc, #364]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6713      	str	r3, [r2, #112]	@ 0x70
 8003226:	e00b      	b.n	8003240 <HAL_RCC_OscConfig+0x324>
 8003228:	4b58      	ldr	r3, [pc, #352]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322c:	4a57      	ldr	r2, [pc, #348]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	6713      	str	r3, [r2, #112]	@ 0x70
 8003234:	4b55      	ldr	r3, [pc, #340]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003238:	4a54      	ldr	r2, [pc, #336]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 800323a:	f023 0304 	bic.w	r3, r3, #4
 800323e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d015      	beq.n	8003274 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7ff f918 	bl	800247c <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7ff f914 	bl	800247c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0cb      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003266:	4b49      	ldr	r3, [pc, #292]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ee      	beq.n	8003250 <HAL_RCC_OscConfig+0x334>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003274:	f7ff f902 	bl	800247c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327a:	e00a      	b.n	8003292 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7ff f8fe 	bl	800247c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0b5      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003292:	4b3e      	ldr	r3, [pc, #248]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ee      	bne.n	800327c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800329e:	7dfb      	ldrb	r3, [r7, #23]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a4:	4b39      	ldr	r3, [pc, #228]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	4a38      	ldr	r2, [pc, #224]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 80032aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a1 	beq.w	80033fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ba:	4b34      	ldr	r3, [pc, #208]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d05c      	beq.n	8003380 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d141      	bne.n	8003352 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ce:	4b31      	ldr	r3, [pc, #196]	@ (8003394 <HAL_RCC_OscConfig+0x478>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7ff f8d2 	bl	800247c <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7ff f8ce 	bl	800247c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e087      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	4b27      	ldr	r3, [pc, #156]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	019b      	lsls	r3, r3, #6
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	3b01      	subs	r3, #1
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	491b      	ldr	r1, [pc, #108]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003324:	4b1b      	ldr	r3, [pc, #108]	@ (8003394 <HAL_RCC_OscConfig+0x478>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7ff f8a7 	bl	800247c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003332:	f7ff f8a3 	bl	800247c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e05c      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x416>
 8003350:	e054      	b.n	80033fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003352:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <HAL_RCC_OscConfig+0x478>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7ff f890 	bl	800247c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7ff f88c 	bl	800247c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e045      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_RCC_OscConfig+0x470>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x444>
 800337e:	e03d      	b.n	80033fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d107      	bne.n	8003398 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e038      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
 800338c:	40023800 	.word	0x40023800
 8003390:	40007000 	.word	0x40007000
 8003394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003398:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <HAL_RCC_OscConfig+0x4ec>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d028      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d121      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d11a      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033c8:	4013      	ands	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d111      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	3b01      	subs	r3, #1
 80033e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d107      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800

0800340c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0cc      	b.n	80035ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003420:	4b68      	ldr	r3, [pc, #416]	@ (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d90c      	bls.n	8003448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b65      	ldr	r3, [pc, #404]	@ (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b63      	ldr	r3, [pc, #396]	@ (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0b8      	b.n	80035ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003460:	4b59      	ldr	r3, [pc, #356]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a58      	ldr	r2, [pc, #352]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800346a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003478:	4b53      	ldr	r3, [pc, #332]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a52      	ldr	r2, [pc, #328]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b50      	ldr	r3, [pc, #320]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	494d      	ldr	r1, [pc, #308]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d044      	beq.n	800352c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b47      	ldr	r3, [pc, #284]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d119      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e07f      	b.n	80035ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	4b3f      	ldr	r3, [pc, #252]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e06f      	b.n	80035ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034da:	4b3b      	ldr	r3, [pc, #236]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e067      	b.n	80035ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ea:	4b37      	ldr	r3, [pc, #220]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4934      	ldr	r1, [pc, #208]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034fc:	f7fe ffbe 	bl	800247c <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	e00a      	b.n	800351a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7fe ffba 	bl	800247c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e04f      	b.n	80035ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	4b2b      	ldr	r3, [pc, #172]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 020c 	and.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	429a      	cmp	r2, r3
 800352a:	d1eb      	bne.n	8003504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800352c:	4b25      	ldr	r3, [pc, #148]	@ (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d20c      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b22      	ldr	r3, [pc, #136]	@ (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b20      	ldr	r3, [pc, #128]	@ (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e032      	b.n	80035ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003560:	4b19      	ldr	r3, [pc, #100]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4916      	ldr	r1, [pc, #88]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357e:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	490e      	ldr	r1, [pc, #56]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003592:	f000 f821 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8003596:	4602      	mov	r2, r0
 8003598:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	490a      	ldr	r1, [pc, #40]	@ (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	5ccb      	ldrb	r3, [r1, r3]
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	4a09      	ldr	r2, [pc, #36]	@ (80035d0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035ae:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe ff1e 	bl	80023f4 <HAL_InitTick>

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023c00 	.word	0x40023c00
 80035c8:	40023800 	.word	0x40023800
 80035cc:	08008fd8 	.word	0x08008fd8
 80035d0:	20000064 	.word	0x20000064
 80035d4:	20000068 	.word	0x20000068

080035d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035dc:	b090      	sub	sp, #64	@ 0x40
 80035de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f0:	4b59      	ldr	r3, [pc, #356]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x180>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d00d      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x40>
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	f200 80a1 	bhi.w	8003744 <HAL_RCC_GetSysClockFreq+0x16c>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x34>
 8003606:	2b04      	cmp	r3, #4
 8003608:	d003      	beq.n	8003612 <HAL_RCC_GetSysClockFreq+0x3a>
 800360a:	e09b      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800360c:	4b53      	ldr	r3, [pc, #332]	@ (800375c <HAL_RCC_GetSysClockFreq+0x184>)
 800360e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003610:	e09b      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003612:	4b53      	ldr	r3, [pc, #332]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x188>)
 8003614:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003616:	e098      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003618:	4b4f      	ldr	r3, [pc, #316]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x180>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003620:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003622:	4b4d      	ldr	r3, [pc, #308]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x180>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d028      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362e:	4b4a      	ldr	r3, [pc, #296]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x180>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	099b      	lsrs	r3, r3, #6
 8003634:	2200      	movs	r2, #0
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	627a      	str	r2, [r7, #36]	@ 0x24
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003640:	2100      	movs	r1, #0
 8003642:	4b47      	ldr	r3, [pc, #284]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x188>)
 8003644:	fb03 f201 	mul.w	r2, r3, r1
 8003648:	2300      	movs	r3, #0
 800364a:	fb00 f303 	mul.w	r3, r0, r3
 800364e:	4413      	add	r3, r2
 8003650:	4a43      	ldr	r2, [pc, #268]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x188>)
 8003652:	fba0 1202 	umull	r1, r2, r0, r2
 8003656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003658:	460a      	mov	r2, r1
 800365a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800365c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800365e:	4413      	add	r3, r2
 8003660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003664:	2200      	movs	r2, #0
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	61fa      	str	r2, [r7, #28]
 800366a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800366e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003672:	f7fc fdfd 	bl	8000270 <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4613      	mov	r3, r2
 800367c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800367e:	e053      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003680:	4b35      	ldr	r3, [pc, #212]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x180>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	099b      	lsrs	r3, r3, #6
 8003686:	2200      	movs	r2, #0
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	617a      	str	r2, [r7, #20]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003692:	f04f 0b00 	mov.w	fp, #0
 8003696:	4652      	mov	r2, sl
 8003698:	465b      	mov	r3, fp
 800369a:	f04f 0000 	mov.w	r0, #0
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	0159      	lsls	r1, r3, #5
 80036a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a8:	0150      	lsls	r0, r2, #5
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	ebb2 080a 	subs.w	r8, r2, sl
 80036b2:	eb63 090b 	sbc.w	r9, r3, fp
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036ca:	ebb2 0408 	subs.w	r4, r2, r8
 80036ce:	eb63 0509 	sbc.w	r5, r3, r9
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	00eb      	lsls	r3, r5, #3
 80036dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e0:	00e2      	lsls	r2, r4, #3
 80036e2:	4614      	mov	r4, r2
 80036e4:	461d      	mov	r5, r3
 80036e6:	eb14 030a 	adds.w	r3, r4, sl
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	eb45 030b 	adc.w	r3, r5, fp
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036fe:	4629      	mov	r1, r5
 8003700:	028b      	lsls	r3, r1, #10
 8003702:	4621      	mov	r1, r4
 8003704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003708:	4621      	mov	r1, r4
 800370a:	028a      	lsls	r2, r1, #10
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003712:	2200      	movs	r2, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	60fa      	str	r2, [r7, #12]
 8003718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800371c:	f7fc fda8 	bl	8000270 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x180>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003738:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003742:	e002      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <HAL_RCC_GetSysClockFreq+0x184>)
 8003746:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800374c:	4618      	mov	r0, r3
 800374e:	3740      	adds	r7, #64	@ 0x40
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	00f42400 	.word	0x00f42400
 8003760:	017d7840 	.word	0x017d7840

08003764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003768:	4b03      	ldr	r3, [pc, #12]	@ (8003778 <HAL_RCC_GetHCLKFreq+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000064 	.word	0x20000064

0800377c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003780:	f7ff fff0 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	@ (800379c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0a9b      	lsrs	r3, r3, #10
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4903      	ldr	r1, [pc, #12]	@ (80037a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	08008fe8 	.word	0x08008fe8

080037a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a8:	f7ff ffdc 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	@ (80037c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0b5b      	lsrs	r3, r3, #13
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4903      	ldr	r1, [pc, #12]	@ (80037c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40023800 	.word	0x40023800
 80037c8:	08008fe8 	.word	0x08008fe8

080037cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07b      	b.n	80038d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d108      	bne.n	80037f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ee:	d009      	beq.n	8003804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
 80037f6:	e005      	b.n	8003804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe fbcc 	bl	8001fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800383a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003888:	ea42 0103 	orr.w	r1, r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	f003 0104 	and.w	r1, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	f003 0210 	and.w	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b088      	sub	sp, #32
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ee:	f7fe fdc5 	bl	800247c <HAL_GetTick>
 80038f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d001      	beq.n	8003908 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
 8003906:	e12a      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_SPI_Transmit+0x36>
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e122      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_SPI_Transmit+0x48>
 8003922:	2302      	movs	r3, #2
 8003924:	e11b      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2203      	movs	r2, #3
 8003932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	88fa      	ldrh	r2, [r7, #6]
 800394c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003974:	d10f      	bne.n	8003996 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003984:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003994:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d007      	beq.n	80039b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039bc:	d152      	bne.n	8003a64 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_Transmit+0xee>
 80039c6:	8b7b      	ldrh	r3, [r7, #26]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d145      	bne.n	8003a58 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	881a      	ldrh	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039f0:	e032      	b.n	8003a58 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d112      	bne.n	8003a26 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a04:	881a      	ldrh	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a24:	e018      	b.n	8003a58 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a26:	f7fe fd29 	bl	800247c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d803      	bhi.n	8003a3e <HAL_SPI_Transmit+0x160>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_Transmit+0x166>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e082      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1c7      	bne.n	80039f2 <HAL_SPI_Transmit+0x114>
 8003a62:	e053      	b.n	8003b0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Transmit+0x194>
 8003a6c:	8b7b      	ldrh	r3, [r7, #26]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d147      	bne.n	8003b02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a98:	e033      	b.n	8003b02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d113      	bne.n	8003ad0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ace:	e018      	b.n	8003b02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad0:	f7fe fcd4 	bl	800247c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d803      	bhi.n	8003ae8 <HAL_SPI_Transmit+0x20a>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d102      	bne.n	8003aee <HAL_SPI_Transmit+0x210>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e02d      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1c6      	bne.n	8003a9a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f9cf 	bl	8003eb4 <SPI_EndRxTxTransaction>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10f      	bne.n	8003bac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
    return;
 8003baa:	e0d7      	b.n	8003d5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	085b      	lsrs	r3, r3, #1
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_SPI_IRQHandler+0x66>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	09db      	lsrs	r3, r3, #7
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
    return;
 8003bcc:	e0c6      	b.n	8003d5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_SPI_IRQHandler+0x8c>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80b4 	beq.w	8003d5c <HAL_SPI_IRQHandler+0x1f4>
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80ad 	beq.w	8003d5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d023      	beq.n	8003c56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d011      	beq.n	8003c3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	e00b      	b.n	8003c56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	693b      	ldr	r3, [r7, #16]
        return;
 8003c54:	e082      	b.n	8003d5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00c      	beq.n	8003cb2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9c:	f043 0208 	orr.w	r2, r3, #8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d04f      	beq.n	8003d5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d104      	bne.n	8003ce6 <HAL_SPI_IRQHandler+0x17e>
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d034      	beq.n	8003d50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0203 	bic.w	r2, r2, #3
 8003cf4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d011      	beq.n	8003d22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d02:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <HAL_SPI_IRQHandler+0x1fc>)
 8003d04:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fd67 	bl	80027de <HAL_DMA_Abort_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d64 <HAL_SPI_IRQHandler+0x1fc>)
 8003d30:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fd51 	bl	80027de <HAL_DMA_Abort_IT>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003d4e:	e003      	b.n	8003d58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f809 	bl	8003d68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d56:	e000      	b.n	8003d5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003d58:	bf00      	nop
    return;
 8003d5a:	bf00      	nop
  }
}
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	08003d7d 	.word	0x08003d7d

08003d68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff ffe6 	bl	8003d68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003db4:	f7fe fb62 	bl	800247c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dc4:	f7fe fb5a 	bl	800247c <HAL_GetTick>
 8003dc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dca:	4b39      	ldr	r3, [pc, #228]	@ (8003eb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	015b      	lsls	r3, r3, #5
 8003dd0:	0d1b      	lsrs	r3, r3, #20
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	fb02 f303 	mul.w	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dda:	e055      	b.n	8003e88 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d051      	beq.n	8003e88 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003de4:	f7fe fb4a 	bl	800247c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d902      	bls.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d13d      	bne.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e12:	d111      	bne.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e1c:	d004      	beq.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e26:	d107      	bne.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e40:	d10f      	bne.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e018      	b.n	8003ea8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e002      	b.n	8003e88 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d19a      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000064 	.word	0x20000064

08003eb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	2102      	movs	r1, #2
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff ff6a 	bl	8003da4 <SPI_WaitFlagStateUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e032      	b.n	8003f4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f54 <SPI_EndRxTxTransaction+0xa0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <SPI_EndRxTxTransaction+0xa4>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	0d5b      	lsrs	r3, r3, #21
 8003ef2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f04:	d112      	bne.n	8003f2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2180      	movs	r1, #128	@ 0x80
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff ff47 	bl	8003da4 <SPI_WaitFlagStateUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d016      	beq.n	8003f4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e00f      	b.n	8003f4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f42:	2b80      	cmp	r3, #128	@ 0x80
 8003f44:	d0f2      	beq.n	8003f2c <SPI_EndRxTxTransaction+0x78>
 8003f46:	e000      	b.n	8003f4a <SPI_EndRxTxTransaction+0x96>
        break;
 8003f48:	bf00      	nop
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000064 	.word	0x20000064
 8003f58:	165e9f81 	.word	0x165e9f81

08003f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e042      	b.n	8003ff4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fe f86a 	bl	800205c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2224      	movs	r2, #36	@ 0x24
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fc99 	bl	80048d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b0ba      	sub	sp, #232	@ 0xe8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800403a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_UART_IRQHandler+0x66>
 800404e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fb7e 	bl	800475c <UART_Receive_IT>
      return;
 8004060:	e273      	b.n	800454a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80de 	beq.w	8004228 <HAL_UART_IRQHandler+0x22c>
 800406c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80d1 	beq.w	8004228 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_UART_IRQHandler+0xae>
 8004092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	f043 0201 	orr.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_UART_IRQHandler+0xd2>
 80040b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f043 0202 	orr.w	r2, r3, #2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_UART_IRQHandler+0xf6>
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	f043 0204 	orr.w	r2, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d011      	beq.n	8004122 <HAL_UART_IRQHandler+0x126>
 80040fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d105      	bne.n	8004116 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800410a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	f043 0208 	orr.w	r2, r3, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 820a 	beq.w	8004540 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800412c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_UART_IRQHandler+0x14e>
 8004138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fb09 	bl	800475c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004154:	2b40      	cmp	r3, #64	@ 0x40
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <HAL_UART_IRQHandler+0x17a>
 800416e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d04f      	beq.n	8004216 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fa14 	bl	80045a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004186:	2b40      	cmp	r3, #64	@ 0x40
 8004188:	d141      	bne.n	800420e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3314      	adds	r3, #20
 80041b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1d9      	bne.n	800418a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d013      	beq.n	8004206 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e2:	4a8a      	ldr	r2, [pc, #552]	@ (800440c <HAL_UART_IRQHandler+0x410>)
 80041e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe faf7 	bl	80027de <HAL_DMA_Abort_IT>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004200:	4610      	mov	r0, r2
 8004202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	e00e      	b.n	8004224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f9b6 	bl	8004578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	e00a      	b.n	8004224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f9b2 	bl	8004578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	e006      	b.n	8004224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f9ae 	bl	8004578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004222:	e18d      	b.n	8004540 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	bf00      	nop
    return;
 8004226:	e18b      	b.n	8004540 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422c:	2b01      	cmp	r3, #1
 800422e:	f040 8167 	bne.w	8004500 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8160 	beq.w	8004500 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8159 	beq.w	8004500 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426e:	2b40      	cmp	r3, #64	@ 0x40
 8004270:	f040 80ce 	bne.w	8004410 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80a9 	beq.w	80043dc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800428e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004292:	429a      	cmp	r2, r3
 8004294:	f080 80a2 	bcs.w	80043dc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800429e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042aa:	f000 8088 	beq.w	80043be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1d9      	bne.n	80042ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3314      	adds	r3, #20
 8004300:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800430a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3314      	adds	r3, #20
 800431a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800431e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004322:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004326:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004330:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e1      	bne.n	80042fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3314      	adds	r3, #20
 800433c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004348:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800434c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800435a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800435c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004360:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e3      	bne.n	8004336 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800438c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800438e:	f023 0310 	bic.w	r3, r3, #16
 8004392:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e3      	bne.n	800437c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe f9a0 	bl	80026fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f8d9 	bl	800458c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80043da:	e0b3      	b.n	8004544 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043e4:	429a      	cmp	r2, r3
 80043e6:	f040 80ad 	bne.w	8004544 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f4:	f040 80a6 	bne.w	8004544 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8c1 	bl	800458c <HAL_UARTEx_RxEventCallback>
      return;
 800440a:	e09b      	b.n	8004544 <HAL_UART_IRQHandler+0x548>
 800440c:	0800466b 	.word	0x0800466b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004418:	b29b      	uxth	r3, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 808e 	beq.w	8004548 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800442c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8089 	beq.w	8004548 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800444c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800445a:	647a      	str	r2, [r7, #68]	@ 0x44
 800445c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e3      	bne.n	8004436 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	623b      	str	r3, [r7, #32]
   return(result);
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004492:	633a      	str	r2, [r7, #48]	@ 0x30
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e3      	bne.n	800446e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0310 	bic.w	r3, r3, #16
 80044ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80044d8:	61fa      	str	r2, [r7, #28]
 80044da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	69b9      	ldr	r1, [r7, #24]
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	617b      	str	r3, [r7, #20]
   return(result);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e3      	bne.n	80044b4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f847 	bl	800458c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044fe:	e023      	b.n	8004548 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_UART_IRQHandler+0x524>
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8b7 	bl	800468c <UART_Transmit_IT>
    return;
 800451e:	e014      	b.n	800454a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00e      	beq.n	800454a <HAL_UART_IRQHandler+0x54e>
 800452c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f8f7 	bl	800472c <UART_EndTransmit_IT>
    return;
 800453e:	e004      	b.n	800454a <HAL_UART_IRQHandler+0x54e>
    return;
 8004540:	bf00      	nop
 8004542:	e002      	b.n	800454a <HAL_UART_IRQHandler+0x54e>
      return;
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_UART_IRQHandler+0x54e>
      return;
 8004548:	bf00      	nop
  }
}
 800454a:	37e8      	adds	r7, #232	@ 0xe8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b095      	sub	sp, #84	@ 0x54
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80045ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3314      	adds	r3, #20
 80045fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004600:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004602:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004618:	2b01      	cmp	r3, #1
 800461a:	d119      	bne.n	8004650 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	60bb      	str	r3, [r7, #8]
   return(result);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f023 0310 	bic.w	r3, r3, #16
 8004632:	647b      	str	r3, [r7, #68]	@ 0x44
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800463c:	61ba      	str	r2, [r7, #24]
 800463e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6979      	ldr	r1, [r7, #20]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	613b      	str	r3, [r7, #16]
   return(result);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e5      	bne.n	800461c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800465e:	bf00      	nop
 8004660:	3754      	adds	r7, #84	@ 0x54
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff ff7a 	bl	8004578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b21      	cmp	r3, #33	@ 0x21
 800469e:	d13e      	bne.n	800471e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a8:	d114      	bne.n	80046d4 <UART_Transmit_IT+0x48>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d110      	bne.n	80046d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	1c9a      	adds	r2, r3, #2
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	621a      	str	r2, [r3, #32]
 80046d2:	e008      	b.n	80046e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	1c59      	adds	r1, r3, #1
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6211      	str	r1, [r2, #32]
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4619      	mov	r1, r3
 80046f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004708:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004718:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	e000      	b.n	8004720 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
  }
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004742:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff feff 	bl	8004550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	@ 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004764:	2300      	movs	r3, #0
 8004766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b22      	cmp	r3, #34	@ 0x22
 8004776:	f040 80aa 	bne.w	80048ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004782:	d115      	bne.n	80047b0 <UART_Receive_IT+0x54>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d111      	bne.n	80047b0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	1c9a      	adds	r2, r3, #2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80047ae:	e024      	b.n	80047fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047be:	d007      	beq.n	80047d0 <UART_Receive_IT+0x74>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <UART_Receive_IT+0x82>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	e008      	b.n	80047f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29b      	uxth	r3, r3
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4619      	mov	r1, r3
 8004808:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800480a:	2b00      	cmp	r3, #0
 800480c:	d15d      	bne.n	80048ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0220 	bic.w	r2, r2, #32
 800481c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800482c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004850:	2b01      	cmp	r3, #1
 8004852:	d135      	bne.n	80048c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	613b      	str	r3, [r7, #16]
   return(result);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f023 0310 	bic.w	r3, r3, #16
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
 8004878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487a:	623a      	str	r2, [r7, #32]
 800487c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	69f9      	ldr	r1, [r7, #28]
 8004880:	6a3a      	ldr	r2, [r7, #32]
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	61bb      	str	r3, [r7, #24]
   return(result);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e5      	bne.n	800485a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b10      	cmp	r3, #16
 800489a:	d10a      	bne.n	80048b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff fe67 	bl	800458c <HAL_UARTEx_RxEventCallback>
 80048be:	e002      	b.n	80048c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff fe4f 	bl	8004564 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e002      	b.n	80048d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3730      	adds	r7, #48	@ 0x30
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048dc:	b0c0      	sub	sp, #256	@ 0x100
 80048de:	af00      	add	r7, sp, #0
 80048e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f4:	68d9      	ldr	r1, [r3, #12]
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	ea40 0301 	orr.w	r3, r0, r1
 8004900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	431a      	orrs	r2, r3
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	431a      	orrs	r2, r3
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004930:	f021 010c 	bic.w	r1, r1, #12
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800493e:	430b      	orrs	r3, r1
 8004940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004952:	6999      	ldr	r1, [r3, #24]
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	ea40 0301 	orr.w	r3, r0, r1
 800495e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b8f      	ldr	r3, [pc, #572]	@ (8004ba4 <UART_SetConfig+0x2cc>)
 8004968:	429a      	cmp	r2, r3
 800496a:	d005      	beq.n	8004978 <UART_SetConfig+0xa0>
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b8d      	ldr	r3, [pc, #564]	@ (8004ba8 <UART_SetConfig+0x2d0>)
 8004974:	429a      	cmp	r2, r3
 8004976:	d104      	bne.n	8004982 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004978:	f7fe ff14 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 800497c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004980:	e003      	b.n	800498a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004982:	f7fe fefb 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 8004986:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004994:	f040 810c 	bne.w	8004bb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800499c:	2200      	movs	r2, #0
 800499e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049aa:	4622      	mov	r2, r4
 80049ac:	462b      	mov	r3, r5
 80049ae:	1891      	adds	r1, r2, r2
 80049b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049b2:	415b      	adcs	r3, r3
 80049b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049ba:	4621      	mov	r1, r4
 80049bc:	eb12 0801 	adds.w	r8, r2, r1
 80049c0:	4629      	mov	r1, r5
 80049c2:	eb43 0901 	adc.w	r9, r3, r1
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049da:	4690      	mov	r8, r2
 80049dc:	4699      	mov	r9, r3
 80049de:	4623      	mov	r3, r4
 80049e0:	eb18 0303 	adds.w	r3, r8, r3
 80049e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049e8:	462b      	mov	r3, r5
 80049ea:	eb49 0303 	adc.w	r3, r9, r3
 80049ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a06:	460b      	mov	r3, r1
 8004a08:	18db      	adds	r3, r3, r3
 8004a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	eb42 0303 	adc.w	r3, r2, r3
 8004a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a1c:	f7fb fc28 	bl	8000270 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4b61      	ldr	r3, [pc, #388]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004a26:	fba3 2302 	umull	r2, r3, r3, r2
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	011c      	lsls	r4, r3, #4
 8004a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a40:	4642      	mov	r2, r8
 8004a42:	464b      	mov	r3, r9
 8004a44:	1891      	adds	r1, r2, r2
 8004a46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a48:	415b      	adcs	r3, r3
 8004a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a50:	4641      	mov	r1, r8
 8004a52:	eb12 0a01 	adds.w	sl, r2, r1
 8004a56:	4649      	mov	r1, r9
 8004a58:	eb43 0b01 	adc.w	fp, r3, r1
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a70:	4692      	mov	sl, r2
 8004a72:	469b      	mov	fp, r3
 8004a74:	4643      	mov	r3, r8
 8004a76:	eb1a 0303 	adds.w	r3, sl, r3
 8004a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a7e:	464b      	mov	r3, r9
 8004a80:	eb4b 0303 	adc.w	r3, fp, r3
 8004a84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	18db      	adds	r3, r3, r3
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004aae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ab2:	f7fb fbdd 	bl	8000270 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	4b3b      	ldr	r3, [pc, #236]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004abe:	fba3 2301 	umull	r2, r3, r3, r1
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	2264      	movs	r2, #100	@ 0x64
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	1acb      	subs	r3, r1, r3
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ad2:	4b36      	ldr	r3, [pc, #216]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ae0:	441c      	add	r4, r3
 8004ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004af0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	1891      	adds	r1, r2, r2
 8004afa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004afc:	415b      	adcs	r3, r3
 8004afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b04:	4641      	mov	r1, r8
 8004b06:	1851      	adds	r1, r2, r1
 8004b08:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	414b      	adcs	r3, r1
 8004b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	00cb      	lsls	r3, r1, #3
 8004b20:	4651      	mov	r1, sl
 8004b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b26:	4651      	mov	r1, sl
 8004b28:	00ca      	lsls	r2, r1, #3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4642      	mov	r2, r8
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b38:	464b      	mov	r3, r9
 8004b3a:	460a      	mov	r2, r1
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b58:	460b      	mov	r3, r1
 8004b5a:	18db      	adds	r3, r3, r3
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b5e:	4613      	mov	r3, r2
 8004b60:	eb42 0303 	adc.w	r3, r2, r3
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b6e:	f7fb fb7f 	bl	8000270 <__aeabi_uldivmod>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4b0d      	ldr	r3, [pc, #52]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004b78:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	2164      	movs	r1, #100	@ 0x64
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	3332      	adds	r3, #50	@ 0x32
 8004b8a:	4a08      	ldr	r2, [pc, #32]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	f003 0207 	and.w	r2, r3, #7
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4422      	add	r2, r4
 8004b9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba0:	e106      	b.n	8004db0 <UART_SetConfig+0x4d8>
 8004ba2:	bf00      	nop
 8004ba4:	40011000 	.word	0x40011000
 8004ba8:	40011400 	.word	0x40011400
 8004bac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004bbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	1891      	adds	r1, r2, r2
 8004bc8:	6239      	str	r1, [r7, #32]
 8004bca:	415b      	adcs	r3, r3
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	1854      	adds	r4, r2, r1
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	eb43 0501 	adc.w	r5, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	00eb      	lsls	r3, r5, #3
 8004be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bea:	00e2      	lsls	r2, r4, #3
 8004bec:	4614      	mov	r4, r2
 8004bee:	461d      	mov	r5, r3
 8004bf0:	4643      	mov	r3, r8
 8004bf2:	18e3      	adds	r3, r4, r3
 8004bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	eb45 0303 	adc.w	r3, r5, r3
 8004bfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c1e:	4629      	mov	r1, r5
 8004c20:	008b      	lsls	r3, r1, #2
 8004c22:	4621      	mov	r1, r4
 8004c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c28:	4621      	mov	r1, r4
 8004c2a:	008a      	lsls	r2, r1, #2
 8004c2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c30:	f7fb fb1e 	bl	8000270 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4b60      	ldr	r3, [pc, #384]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	011c      	lsls	r4, r3, #4
 8004c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	1891      	adds	r1, r2, r2
 8004c5a:	61b9      	str	r1, [r7, #24]
 8004c5c:	415b      	adcs	r3, r3
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c64:	4641      	mov	r1, r8
 8004c66:	1851      	adds	r1, r2, r1
 8004c68:	6139      	str	r1, [r7, #16]
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	414b      	adcs	r3, r1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	00cb      	lsls	r3, r1, #3
 8004c80:	4651      	mov	r1, sl
 8004c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c86:	4651      	mov	r1, sl
 8004c88:	00ca      	lsls	r2, r1, #3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4642      	mov	r2, r8
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c98:	464b      	mov	r3, r9
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	008b      	lsls	r3, r1, #2
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	008a      	lsls	r2, r1, #2
 8004cca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cce:	f7fb facf 	bl	8000270 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4b38      	ldr	r3, [pc, #224]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004cda:	fba3 2301 	umull	r2, r3, r3, r1
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2264      	movs	r2, #100	@ 0x64
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	1acb      	subs	r3, r1, r3
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	3332      	adds	r3, #50	@ 0x32
 8004cec:	4a33      	ldr	r2, [pc, #204]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cf8:	441c      	add	r4, r3
 8004cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cfe:	2200      	movs	r2, #0
 8004d00:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d02:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	1891      	adds	r1, r2, r2
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	415b      	adcs	r3, r3
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d18:	4641      	mov	r1, r8
 8004d1a:	1851      	adds	r1, r2, r1
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	4649      	mov	r1, r9
 8004d20:	414b      	adcs	r3, r1
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d30:	4659      	mov	r1, fp
 8004d32:	00cb      	lsls	r3, r1, #3
 8004d34:	4651      	mov	r1, sl
 8004d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	00ca      	lsls	r2, r1, #3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	4642      	mov	r2, r8
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	eb42 0303 	adc.w	r3, r2, r3
 8004d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	008b      	lsls	r3, r1, #2
 8004d70:	4641      	mov	r1, r8
 8004d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d76:	4641      	mov	r1, r8
 8004d78:	008a      	lsls	r2, r1, #2
 8004d7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d7e:	f7fb fa77 	bl	8000270 <__aeabi_uldivmod>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004d88:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	2164      	movs	r1, #100	@ 0x64
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	3332      	adds	r3, #50	@ 0x32
 8004d9a:	4a08      	ldr	r2, [pc, #32]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	f003 020f 	and.w	r2, r3, #15
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4422      	add	r2, r4
 8004dae:	609a      	str	r2, [r3, #8]
}
 8004db0:	bf00      	nop
 8004db2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004db6:	46bd      	mov	sp, r7
 8004db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dbc:	51eb851f 	.word	0x51eb851f

08004dc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dd2:	2b84      	cmp	r3, #132	@ 0x84
 8004dd4:	d005      	beq.n	8004de2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004dd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	3303      	adds	r3, #3
 8004de0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004de2:	68fb      	ldr	r3, [r7, #12]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df6:	f3ef 8305 	mrs	r3, IPSR
 8004dfa:	607b      	str	r3, [r7, #4]
  return(result);
 8004dfc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e18:	f001 f95c 	bl	80060d4 <vTaskStartScheduler>
  
  return osOK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e24:	b089      	sub	sp, #36	@ 0x24
 8004e26:	af04      	add	r7, sp, #16
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <osThreadCreate+0x54>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01c      	beq.n	8004e76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685c      	ldr	r4, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691e      	ldr	r6, [r3, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff ffb6 	bl	8004dc0 <makeFreeRtosPriority>
 8004e54:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e5e:	9202      	str	r2, [sp, #8]
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	9100      	str	r1, [sp, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	4632      	mov	r2, r6
 8004e68:	4629      	mov	r1, r5
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f000 ff64 	bl	8005d38 <xTaskCreateStatic>
 8004e70:	4603      	mov	r3, r0
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e01c      	b.n	8004eb0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685c      	ldr	r4, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e82:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff ff98 	bl	8004dc0 <makeFreeRtosPriority>
 8004e90:	4602      	mov	r2, r0
 8004e92:	f107 030c 	add.w	r3, r7, #12
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	9200      	str	r2, [sp, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	4632      	mov	r2, r6
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f000 ffa9 	bl	8005df8 <xTaskCreate>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d001      	beq.n	8004eb0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <osDelay+0x16>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	e000      	b.n	8004ed2 <osDelay+0x18>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 f8c8 	bl	8006068 <vTaskDelay>
  
  return osOK;
 8004ed8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f000 fab6 	bl	800546a <xQueueCreateMutexStatic>
 8004efe:	4603      	mov	r3, r0
 8004f00:	e003      	b.n	8004f0a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004f02:	2001      	movs	r0, #1
 8004f04:	f000 fa99 	bl	800543a <xQueueCreateMutex>
 8004f08:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <osMutexWait+0x18>
    return osErrorParameter;
 8004f28:	2380      	movs	r3, #128	@ 0x80
 8004f2a:	e03a      	b.n	8004fa2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d103      	bne.n	8004f40 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004f38:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e009      	b.n	8004f54 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d006      	beq.n	8004f54 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <osMutexWait+0x40>
      ticks = 1;
 8004f50:	2301      	movs	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004f54:	f7ff ff4c 	bl	8004df0 <inHandlerMode>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d017      	beq.n	8004f8e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004f5e:	f107 0308 	add.w	r3, r7, #8
 8004f62:	461a      	mov	r2, r3
 8004f64:	2100      	movs	r1, #0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fd3c 	bl	80059e4 <xQueueReceiveFromISR>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d001      	beq.n	8004f76 <osMutexWait+0x62>
      return osErrorOS;
 8004f72:	23ff      	movs	r3, #255	@ 0xff
 8004f74:	e015      	b.n	8004fa2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d011      	beq.n	8004fa0 <osMutexWait+0x8c>
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <osMutexWait+0x98>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	e008      	b.n	8004fa0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fc17 	bl	80057c4 <xQueueSemaphoreTake>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d001      	beq.n	8004fa0 <osMutexWait+0x8c>
    return osErrorOS;
 8004f9c:	23ff      	movs	r3, #255	@ 0xff
 8004f9e:	e000      	b.n	8004fa2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	e000ed04 	.word	0xe000ed04

08004fb0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004fc0:	f7ff ff16 	bl	8004df0 <inHandlerMode>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004fca:	f107 0308 	add.w	r3, r7, #8
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb67 	bl	80056a4 <xQueueGiveFromISR>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <osMutexRelease+0x30>
      return osErrorOS;
 8004fdc:	23ff      	movs	r3, #255	@ 0xff
 8004fde:	e017      	b.n	8005010 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d013      	beq.n	800500e <osMutexRelease+0x5e>
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8005018 <osMutexRelease+0x68>)
 8004fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	e00a      	b.n	800500e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa4e 	bl	80054a0 <xQueueGenericSend>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d001      	beq.n	800500e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800500a:	23ff      	movs	r3, #255	@ 0xff
 800500c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800500e:	68fb      	ldr	r3, [r7, #12]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f103 0208 	add.w	r2, r3, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f04f 32ff 	mov.w	r2, #4294967295
 8005034:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f103 0208 	add.w	r2, r3, #8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f103 0208 	add.w	r2, r3, #8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005076:	b480      	push	{r7}
 8005078:	b085      	sub	sp, #20
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d103      	bne.n	80050de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e00c      	b.n	80050f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3308      	adds	r3, #8
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e002      	b.n	80050ec <vListInsert+0x2e>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d2f6      	bcs.n	80050e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6892      	ldr	r2, [r2, #8]
 8005146:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6852      	ldr	r2, [r2, #4]
 8005150:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d103      	bne.n	8005164 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	1e5a      	subs	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051b0:	f001 fef2 	bl	8006f98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051bc:	68f9      	ldr	r1, [r7, #12]
 80051be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	3b01      	subs	r3, #1
 80051e2:	68f9      	ldr	r1, [r7, #12]
 80051e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051e6:	fb01 f303 	mul.w	r3, r1, r3
 80051ea:	441a      	add	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	22ff      	movs	r2, #255	@ 0xff
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	22ff      	movs	r2, #255	@ 0xff
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d114      	bne.n	8005230 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01a      	beq.n	8005244 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3310      	adds	r3, #16
 8005212:	4618      	mov	r0, r3
 8005214:	f001 f9a8 	bl	8006568 <xTaskRemoveFromEventList>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d012      	beq.n	8005244 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800521e:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <xQueueGenericReset+0xd0>)
 8005220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	e009      	b.n	8005244 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3310      	adds	r3, #16
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff fef1 	bl	800501c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3324      	adds	r3, #36	@ 0x24
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff feec 	bl	800501c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005244:	f001 feda 	bl	8006ffc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005248:	2301      	movs	r3, #1
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08e      	sub	sp, #56	@ 0x38
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <xQueueGenericCreateStatic+0x56>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <xQueueGenericCreateStatic+0x5a>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <xQueueGenericCreateStatic+0x5c>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10b      	bne.n	80052d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	623b      	str	r3, [r7, #32]
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	e7fd      	b.n	80052cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d102      	bne.n	80052dc <xQueueGenericCreateStatic+0x84>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <xQueueGenericCreateStatic+0x88>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <xQueueGenericCreateStatic+0x8a>
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	61fb      	str	r3, [r7, #28]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052fe:	2348      	movs	r3, #72	@ 0x48
 8005300:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b48      	cmp	r3, #72	@ 0x48
 8005306:	d00b      	beq.n	8005320 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	61bb      	str	r3, [r7, #24]
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	e7fd      	b.n	800531c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005320:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00d      	beq.n	8005348 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005334:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f840 	bl	80053c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800534a:	4618      	mov	r0, r3
 800534c:	3730      	adds	r7, #48	@ 0x30
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005352:	b580      	push	{r7, lr}
 8005354:	b08a      	sub	sp, #40	@ 0x28
 8005356:	af02      	add	r7, sp, #8
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	4613      	mov	r3, r2
 800535e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10b      	bne.n	800537e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	613b      	str	r3, [r7, #16]
}
 8005378:	bf00      	nop
 800537a:	bf00      	nop
 800537c:	e7fd      	b.n	800537a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	3348      	adds	r3, #72	@ 0x48
 800538c:	4618      	mov	r0, r3
 800538e:	f001 ff25 	bl	80071dc <pvPortMalloc>
 8005392:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d011      	beq.n	80053be <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	3348      	adds	r3, #72	@ 0x48
 80053a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053ac:	79fa      	ldrb	r2, [r7, #7]
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	4613      	mov	r3, r2
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f805 	bl	80053c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053be:	69bb      	ldr	r3, [r7, #24]
	}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3720      	adds	r7, #32
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e002      	b.n	80053ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053f6:	2101      	movs	r1, #1
 80053f8:	69b8      	ldr	r0, [r7, #24]
 80053fa:	f7ff fec3 	bl	8005184 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00e      	beq.n	8005432 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005426:	2300      	movs	r3, #0
 8005428:	2200      	movs	r2, #0
 800542a:	2100      	movs	r1, #0
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f837 	bl	80054a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800543a:	b580      	push	{r7, lr}
 800543c:	b086      	sub	sp, #24
 800543e:	af00      	add	r7, sp, #0
 8005440:	4603      	mov	r3, r0
 8005442:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005444:	2301      	movs	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	461a      	mov	r2, r3
 8005450:	6939      	ldr	r1, [r7, #16]
 8005452:	6978      	ldr	r0, [r7, #20]
 8005454:	f7ff ff7d 	bl	8005352 <xQueueGenericCreate>
 8005458:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff ffd3 	bl	8005406 <prvInitialiseMutex>

		return xNewQueue;
 8005460:	68fb      	ldr	r3, [r7, #12]
	}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800546a:	b580      	push	{r7, lr}
 800546c:	b088      	sub	sp, #32
 800546e:	af02      	add	r7, sp, #8
 8005470:	4603      	mov	r3, r0
 8005472:	6039      	str	r1, [r7, #0]
 8005474:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005476:	2301      	movs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2200      	movs	r2, #0
 8005486:	6939      	ldr	r1, [r7, #16]
 8005488:	6978      	ldr	r0, [r7, #20]
 800548a:	f7ff fee5 	bl	8005258 <xQueueGenericCreateStatic>
 800548e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ffb8 	bl	8005406 <prvInitialiseMutex>

		return xNewQueue;
 8005496:	68fb      	ldr	r3, [r7, #12]
	}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	@ 0x38
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054ae:	2300      	movs	r3, #0
 80054b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10b      	bne.n	80054d4 <xQueueGenericSend+0x34>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054ce:	bf00      	nop
 80054d0:	bf00      	nop
 80054d2:	e7fd      	b.n	80054d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <xQueueGenericSend+0x42>
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <xQueueGenericSend+0x46>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <xQueueGenericSend+0x48>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <xQueueGenericSend+0x64>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d103      	bne.n	8005512 <xQueueGenericSend+0x72>
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <xQueueGenericSend+0x76>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueGenericSend+0x78>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10b      	bne.n	8005534 <xQueueGenericSend+0x94>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	623b      	str	r3, [r7, #32]
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005534:	f001 f9d8 	bl	80068e8 <xTaskGetSchedulerState>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d102      	bne.n	8005544 <xQueueGenericSend+0xa4>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <xQueueGenericSend+0xa8>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <xQueueGenericSend+0xaa>
 8005548:	2300      	movs	r3, #0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10b      	bne.n	8005566 <xQueueGenericSend+0xc6>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	61fb      	str	r3, [r7, #28]
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005566:	f001 fd17 	bl	8006f98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <xQueueGenericSend+0xdc>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d129      	bne.n	80055d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005582:	f000 fac9 	bl	8005b18 <prvCopyDataToQueue>
 8005586:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d010      	beq.n	80055b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	3324      	adds	r3, #36	@ 0x24
 8005594:	4618      	mov	r0, r3
 8005596:	f000 ffe7 	bl	8006568 <xTaskRemoveFromEventList>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d013      	beq.n	80055c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055a0:	4b3f      	ldr	r3, [pc, #252]	@ (80056a0 <xQueueGenericSend+0x200>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	e00a      	b.n	80055c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055b8:	4b39      	ldr	r3, [pc, #228]	@ (80056a0 <xQueueGenericSend+0x200>)
 80055ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055c8:	f001 fd18 	bl	8006ffc <vPortExitCritical>
				return pdPASS;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e063      	b.n	8005698 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d6:	f001 fd11 	bl	8006ffc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	e05c      	b.n	8005698 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 f821 	bl	8006630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ee:	2301      	movs	r3, #1
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f2:	f001 fd03 	bl	8006ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f6:	f000 fdcf 	bl	8006198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055fa:	f001 fccd 	bl	8006f98 <vPortEnterCritical>
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005604:	b25b      	sxtb	r3, r3
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d103      	bne.n	8005614 <xQueueGenericSend+0x174>
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800561a:	b25b      	sxtb	r3, r3
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d103      	bne.n	800562a <xQueueGenericSend+0x18a>
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800562a:	f001 fce7 	bl	8006ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562e:	1d3a      	adds	r2, r7, #4
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f001 f810 	bl	800665c <xTaskCheckForTimeOut>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d124      	bne.n	800568c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005642:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005644:	f000 fb60 	bl	8005d08 <prvIsQueueFull>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d018      	beq.n	8005680 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	3310      	adds	r3, #16
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 ff60 	bl	800651c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800565c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800565e:	f000 faeb 	bl	8005c38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005662:	f000 fda7 	bl	80061b4 <xTaskResumeAll>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	f47f af7c 	bne.w	8005566 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <xQueueGenericSend+0x200>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	e772      	b.n	8005566 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005682:	f000 fad9 	bl	8005c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005686:	f000 fd95 	bl	80061b4 <xTaskResumeAll>
 800568a:	e76c      	b.n	8005566 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800568c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800568e:	f000 fad3 	bl	8005c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005692:	f000 fd8f 	bl	80061b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005696:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005698:	4618      	mov	r0, r3
 800569a:	3738      	adds	r7, #56	@ 0x38
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08e      	sub	sp, #56	@ 0x38
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	623b      	str	r3, [r7, #32]
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	e7fd      	b.n	80056cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	61fb      	str	r3, [r7, #28]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <xQueueGiveFromISR+0x5c>
 80056f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <xQueueGiveFromISR+0x60>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <xQueueGiveFromISR+0x62>
 8005704:	2300      	movs	r3, #0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	61bb      	str	r3, [r7, #24]
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005722:	f001 fd19 	bl	8007158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005726:	f3ef 8211 	mrs	r2, BASEPRI
 800572a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	617a      	str	r2, [r7, #20]
 800573c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800573e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005740:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800574e:	429a      	cmp	r2, r3
 8005750:	d22b      	bcs.n	80057aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005754:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005762:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005764:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d112      	bne.n	8005794 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	d016      	beq.n	80057a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	3324      	adds	r3, #36	@ 0x24
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fef4 	bl	8006568 <xTaskRemoveFromEventList>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e007      	b.n	80057a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005798:	3301      	adds	r3, #1
 800579a:	b2db      	uxtb	r3, r3
 800579c:	b25a      	sxtb	r2, r3
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057a4:	2301      	movs	r3, #1
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a8:	e001      	b.n	80057ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3738      	adds	r7, #56	@ 0x38
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	@ 0x38
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	623b      	str	r3, [r7, #32]
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	61fb      	str	r3, [r7, #28]
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005818:	f001 f866 	bl	80068e8 <xTaskGetSchedulerState>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d102      	bne.n	8005828 <xQueueSemaphoreTake+0x64>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <xQueueSemaphoreTake+0x68>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <xQueueSemaphoreTake+0x6a>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	61bb      	str	r3, [r7, #24]
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	e7fd      	b.n	8005846 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800584a:	f001 fba5 	bl	8006f98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800584e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d024      	beq.n	80058a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	1e5a      	subs	r2, r3, #1
 800585e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005860:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800586a:	f001 f9e9 	bl	8006c40 <pvTaskIncrementMutexHeldCount>
 800586e:	4602      	mov	r2, r0
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005872:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00f      	beq.n	800589c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	3310      	adds	r3, #16
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fe71 	bl	8006568 <xTaskRemoveFromEventList>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800588c:	4b54      	ldr	r3, [pc, #336]	@ (80059e0 <xQueueSemaphoreTake+0x21c>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800589c:	f001 fbae 	bl	8006ffc <vPortExitCritical>
				return pdPASS;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e098      	b.n	80059d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d112      	bne.n	80058d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	617b      	str	r3, [r7, #20]
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	e7fd      	b.n	80058c4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058c8:	f001 fb98 	bl	8006ffc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e082      	b.n	80059d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058d6:	f107 030c 	add.w	r3, r7, #12
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fea8 	bl	8006630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058e4:	f001 fb8a 	bl	8006ffc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058e8:	f000 fc56 	bl	8006198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058ec:	f001 fb54 	bl	8006f98 <vPortEnterCritical>
 80058f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058f6:	b25b      	sxtb	r3, r3
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d103      	bne.n	8005906 <xQueueSemaphoreTake+0x142>
 80058fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800590c:	b25b      	sxtb	r3, r3
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d103      	bne.n	800591c <xQueueSemaphoreTake+0x158>
 8005914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800591c:	f001 fb6e 	bl	8006ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005920:	463a      	mov	r2, r7
 8005922:	f107 030c 	add.w	r3, r7, #12
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fe97 	bl	800665c <xTaskCheckForTimeOut>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d132      	bne.n	800599a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005936:	f000 f9d1 	bl	8005cdc <prvIsQueueEmpty>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d026      	beq.n	800598e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005948:	f001 fb26 	bl	8006f98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4618      	mov	r0, r3
 8005952:	f000 ffe7 	bl	8006924 <xTaskPriorityInherit>
 8005956:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005958:	f001 fb50 	bl	8006ffc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800595c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595e:	3324      	adds	r3, #36	@ 0x24
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fdd9 	bl	800651c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800596a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800596c:	f000 f964 	bl	8005c38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005970:	f000 fc20 	bl	80061b4 <xTaskResumeAll>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	f47f af67 	bne.w	800584a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800597c:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <xQueueSemaphoreTake+0x21c>)
 800597e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	e75d      	b.n	800584a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800598e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005990:	f000 f952 	bl	8005c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005994:	f000 fc0e 	bl	80061b4 <xTaskResumeAll>
 8005998:	e757      	b.n	800584a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800599a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800599c:	f000 f94c 	bl	8005c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059a0:	f000 fc08 	bl	80061b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059a6:	f000 f999 	bl	8005cdc <prvIsQueueEmpty>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f43f af4c 	beq.w	800584a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00d      	beq.n	80059d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80059b8:	f001 faee 	bl	8006f98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059be:	f000 f893 	bl	8005ae8 <prvGetDisinheritPriorityAfterTimeout>
 80059c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 f8a8 	bl	8006b20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80059d0:	f001 fb14 	bl	8006ffc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3738      	adds	r7, #56	@ 0x38
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08e      	sub	sp, #56	@ 0x38
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	623b      	str	r3, [r7, #32]
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d103      	bne.n	8005a20 <xQueueReceiveFromISR+0x3c>
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <xQueueReceiveFromISR+0x40>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <xQueueReceiveFromISR+0x42>
 8005a24:	2300      	movs	r3, #0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	61fb      	str	r3, [r7, #28]
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	e7fd      	b.n	8005a3e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a42:	f001 fb89 	bl	8007158 <vPortValidateInterruptPriority>
	__asm volatile
 8005a46:	f3ef 8211 	mrs	r2, BASEPRI
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	61ba      	str	r2, [r7, #24]
 8005a5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d02f      	beq.n	8005ace <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a7c:	f000 f8b6 	bl	8005bec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	1e5a      	subs	r2, r3, #1
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d112      	bne.n	8005ab8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	3310      	adds	r3, #16
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fd62 	bl	8006568 <xTaskRemoveFromEventList>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00e      	beq.n	8005ac8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e007      	b.n	8005ac8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005abc:	3301      	adds	r3, #1
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	b25a      	sxtb	r2, r3
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005acc:	e001      	b.n	8005ad2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f383 8811 	msr	BASEPRI, r3
}
 8005adc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3738      	adds	r7, #56	@ 0x38
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d006      	beq.n	8005b06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f1c3 0307 	rsb	r3, r3, #7
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	e001      	b.n	8005b0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
	}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d14d      	bne.n	8005bda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ff64 	bl	8006a10 <xTaskPriorityDisinherit>
 8005b48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	609a      	str	r2, [r3, #8]
 8005b50:	e043      	b.n	8005bda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d119      	bne.n	8005b8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6858      	ldr	r0, [r3, #4]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	461a      	mov	r2, r3
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	f001 ff37 	bl	80079d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b70:	441a      	add	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d32b      	bcc.n	8005bda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	e026      	b.n	8005bda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68d8      	ldr	r0, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	461a      	mov	r2, r3
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	f001 ff1d 	bl	80079d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	441a      	add	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d207      	bcs.n	8005bc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc0:	425b      	negs	r3, r3
 8005bc2:	441a      	add	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d105      	bne.n	8005bda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005be2:	697b      	ldr	r3, [r7, #20]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	441a      	add	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d303      	bcc.n	8005c20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68d9      	ldr	r1, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6838      	ldr	r0, [r7, #0]
 8005c2c:	f001 fed3 	bl	80079d6 <memcpy>
	}
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c40:	f001 f9aa 	bl	8006f98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c4c:	e011      	b.n	8005c72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d012      	beq.n	8005c7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3324      	adds	r3, #36	@ 0x24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fc84 	bl	8006568 <xTaskRemoveFromEventList>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c66:	f000 fd5d 	bl	8006724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dce9      	bgt.n	8005c4e <prvUnlockQueue+0x16>
 8005c7a:	e000      	b.n	8005c7e <prvUnlockQueue+0x46>
					break;
 8005c7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	22ff      	movs	r2, #255	@ 0xff
 8005c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c86:	f001 f9b9 	bl	8006ffc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c8a:	f001 f985 	bl	8006f98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c96:	e011      	b.n	8005cbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d012      	beq.n	8005cc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3310      	adds	r3, #16
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fc5f 	bl	8006568 <xTaskRemoveFromEventList>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cb0:	f000 fd38 	bl	8006724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cb4:	7bbb      	ldrb	r3, [r7, #14]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dce9      	bgt.n	8005c98 <prvUnlockQueue+0x60>
 8005cc4:	e000      	b.n	8005cc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	22ff      	movs	r2, #255	@ 0xff
 8005ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005cd0:	f001 f994 	bl	8006ffc <vPortExitCritical>
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ce4:	f001 f958 	bl	8006f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e001      	b.n	8005cfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cfa:	f001 f97f 	bl	8006ffc <vPortExitCritical>

	return xReturn;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d10:	f001 f942 	bl	8006f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d102      	bne.n	8005d26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e001      	b.n	8005d2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d2a:	f001 f967 	bl	8006ffc <vPortExitCritical>

	return xReturn;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08e      	sub	sp, #56	@ 0x38
 8005d3c:	af04      	add	r7, sp, #16
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	623b      	str	r3, [r7, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	61fb      	str	r3, [r7, #28]
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	e7fd      	b.n	8005d7e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d82:	2354      	movs	r3, #84	@ 0x54
 8005d84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b54      	cmp	r3, #84	@ 0x54
 8005d8a:	d00b      	beq.n	8005da4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	61bb      	str	r3, [r7, #24]
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005da4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01e      	beq.n	8005dea <xTaskCreateStatic+0xb2>
 8005dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01b      	beq.n	8005dea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9303      	str	r3, [sp, #12]
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dca:	9302      	str	r3, [sp, #8]
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f850 	bl	8005e82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005de2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005de4:	f000 f8d6 	bl	8005f94 <prvAddNewTaskToReadyList>
 8005de8:	e001      	b.n	8005dee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dee:	697b      	ldr	r3, [r7, #20]
	}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3728      	adds	r7, #40	@ 0x28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	@ 0x30
 8005dfc:	af04      	add	r7, sp, #16
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 f9e5 	bl	80071dc <pvPortMalloc>
 8005e12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00e      	beq.n	8005e38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e1a:	2054      	movs	r0, #84	@ 0x54
 8005e1c:	f001 f9de 	bl	80071dc <pvPortMalloc>
 8005e20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e2e:	e005      	b.n	8005e3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e30:	6978      	ldr	r0, [r7, #20]
 8005e32:	f001 faa1 	bl	8007378 <vPortFree>
 8005e36:	e001      	b.n	8005e3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d017      	beq.n	8005e72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9303      	str	r3, [sp, #12]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	9302      	str	r3, [sp, #8]
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f80e 	bl	8005e82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e66:	69f8      	ldr	r0, [r7, #28]
 8005e68:	f000 f894 	bl	8005f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	e002      	b.n	8005e78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e78:	69bb      	ldr	r3, [r7, #24]
	}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b088      	sub	sp, #32
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f023 0307 	bic.w	r3, r3, #7
 8005ea8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	617b      	str	r3, [r7, #20]
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	e7fd      	b.n	8005ec8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01f      	beq.n	8005f12 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	e012      	b.n	8005efe <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	7819      	ldrb	r1, [r3, #0]
 8005ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3334      	adds	r3, #52	@ 0x34
 8005ee8:	460a      	mov	r2, r1
 8005eea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d006      	beq.n	8005f06 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	3301      	adds	r3, #1
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b0f      	cmp	r3, #15
 8005f02:	d9e9      	bls.n	8005ed8 <prvInitialiseNewTask+0x56>
 8005f04:	e000      	b.n	8005f08 <prvInitialiseNewTask+0x86>
			{
				break;
 8005f06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f10:	e003      	b.n	8005f1a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	2b06      	cmp	r3, #6
 8005f1e:	d901      	bls.n	8005f24 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f20:	2306      	movs	r3, #6
 8005f22:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f28:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f2e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	2200      	movs	r2, #0
 8005f34:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff f88e 	bl	800505c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f42:	3318      	adds	r3, #24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff f889 	bl	800505c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f52:	f1c3 0207 	rsb	r2, r3, #7
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f5e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	2200      	movs	r2, #0
 8005f64:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	68f9      	ldr	r1, [r7, #12]
 8005f72:	69b8      	ldr	r0, [r7, #24]
 8005f74:	f000 fede 	bl	8006d34 <pxPortInitialiseStack>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f8a:	bf00      	nop
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f9c:	f000 fffc 	bl	8006f98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800604c <prvAddNewTaskToReadyList+0xb8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4a29      	ldr	r2, [pc, #164]	@ (800604c <prvAddNewTaskToReadyList+0xb8>)
 8005fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005faa:	4b29      	ldr	r3, [pc, #164]	@ (8006050 <prvAddNewTaskToReadyList+0xbc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fb2:	4a27      	ldr	r2, [pc, #156]	@ (8006050 <prvAddNewTaskToReadyList+0xbc>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fb8:	4b24      	ldr	r3, [pc, #144]	@ (800604c <prvAddNewTaskToReadyList+0xb8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d110      	bne.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fc0:	f000 fbd4 	bl	800676c <prvInitialiseTaskLists>
 8005fc4:	e00d      	b.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fc6:	4b23      	ldr	r3, [pc, #140]	@ (8006054 <prvAddNewTaskToReadyList+0xc0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fce:	4b20      	ldr	r3, [pc, #128]	@ (8006050 <prvAddNewTaskToReadyList+0xbc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d802      	bhi.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8006050 <prvAddNewTaskToReadyList+0xbc>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <prvAddNewTaskToReadyList+0xc4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8006058 <prvAddNewTaskToReadyList+0xc4>)
 8005fea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	4b19      	ldr	r3, [pc, #100]	@ (800605c <prvAddNewTaskToReadyList+0xc8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	4a18      	ldr	r2, [pc, #96]	@ (800605c <prvAddNewTaskToReadyList+0xc8>)
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <prvAddNewTaskToReadyList+0xcc>)
 800600c:	441a      	add	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3304      	adds	r3, #4
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f7ff f82e 	bl	8005076 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800601a:	f000 ffef 	bl	8006ffc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <prvAddNewTaskToReadyList+0xc0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00e      	beq.n	8006044 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006026:	4b0a      	ldr	r3, [pc, #40]	@ (8006050 <prvAddNewTaskToReadyList+0xbc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	429a      	cmp	r2, r3
 8006032:	d207      	bcs.n	8006044 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006034:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <prvAddNewTaskToReadyList+0xd0>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000534 	.word	0x20000534
 8006050:	20000434 	.word	0x20000434
 8006054:	20000540 	.word	0x20000540
 8006058:	20000550 	.word	0x20000550
 800605c:	2000053c 	.word	0x2000053c
 8006060:	20000438 	.word	0x20000438
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d018      	beq.n	80060ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800607a:	4b14      	ldr	r3, [pc, #80]	@ (80060cc <vTaskDelay+0x64>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00b      	beq.n	800609a <vTaskDelay+0x32>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	60bb      	str	r3, [r7, #8]
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800609a:	f000 f87d 	bl	8006198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800609e:	2100      	movs	r1, #0
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fde1 	bl	8006c68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060a6:	f000 f885 	bl	80061b4 <xTaskResumeAll>
 80060aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80060b2:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <vTaskDelay+0x68>)
 80060b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	2000055c 	.word	0x2000055c
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	@ 0x28
 80060d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060e2:	463a      	mov	r2, r7
 80060e4:	1d39      	adds	r1, r7, #4
 80060e6:	f107 0308 	add.w	r3, r7, #8
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fa fa56 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	9202      	str	r2, [sp, #8]
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	2300      	movs	r3, #0
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	2300      	movs	r3, #0
 8006100:	460a      	mov	r2, r1
 8006102:	491f      	ldr	r1, [pc, #124]	@ (8006180 <vTaskStartScheduler+0xac>)
 8006104:	481f      	ldr	r0, [pc, #124]	@ (8006184 <vTaskStartScheduler+0xb0>)
 8006106:	f7ff fe17 	bl	8005d38 <xTaskCreateStatic>
 800610a:	4603      	mov	r3, r0
 800610c:	4a1e      	ldr	r2, [pc, #120]	@ (8006188 <vTaskStartScheduler+0xb4>)
 800610e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006110:	4b1d      	ldr	r3, [pc, #116]	@ (8006188 <vTaskStartScheduler+0xb4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006118:	2301      	movs	r3, #1
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	e001      	b.n	8006122 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d116      	bne.n	8006156 <vTaskStartScheduler+0x82>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	613b      	str	r3, [r7, #16]
}
 800613a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800613c:	4b13      	ldr	r3, [pc, #76]	@ (800618c <vTaskStartScheduler+0xb8>)
 800613e:	f04f 32ff 	mov.w	r2, #4294967295
 8006142:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006144:	4b12      	ldr	r3, [pc, #72]	@ (8006190 <vTaskStartScheduler+0xbc>)
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800614a:	4b12      	ldr	r3, [pc, #72]	@ (8006194 <vTaskStartScheduler+0xc0>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006150:	f000 fe7e 	bl	8006e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006154:	e00f      	b.n	8006176 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d10b      	bne.n	8006176 <vTaskStartScheduler+0xa2>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	60fb      	str	r3, [r7, #12]
}
 8006170:	bf00      	nop
 8006172:	bf00      	nop
 8006174:	e7fd      	b.n	8006172 <vTaskStartScheduler+0x9e>
}
 8006176:	bf00      	nop
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	08008c08 	.word	0x08008c08
 8006184:	0800673d 	.word	0x0800673d
 8006188:	20000558 	.word	0x20000558
 800618c:	20000554 	.word	0x20000554
 8006190:	20000540 	.word	0x20000540
 8006194:	20000538 	.word	0x20000538

08006198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <vTaskSuspendAll+0x18>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3301      	adds	r3, #1
 80061a2:	4a03      	ldr	r2, [pc, #12]	@ (80061b0 <vTaskSuspendAll+0x18>)
 80061a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061a6:	bf00      	nop
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	2000055c 	.word	0x2000055c

080061b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061be:	2300      	movs	r3, #0
 80061c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061c2:	4b42      	ldr	r3, [pc, #264]	@ (80062cc <xTaskResumeAll+0x118>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	603b      	str	r3, [r7, #0]
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061e2:	f000 fed9 	bl	8006f98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061e6:	4b39      	ldr	r3, [pc, #228]	@ (80062cc <xTaskResumeAll+0x118>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	4a37      	ldr	r2, [pc, #220]	@ (80062cc <xTaskResumeAll+0x118>)
 80061ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061f0:	4b36      	ldr	r3, [pc, #216]	@ (80062cc <xTaskResumeAll+0x118>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d161      	bne.n	80062bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061f8:	4b35      	ldr	r3, [pc, #212]	@ (80062d0 <xTaskResumeAll+0x11c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d05d      	beq.n	80062bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006200:	e02e      	b.n	8006260 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006202:	4b34      	ldr	r3, [pc, #208]	@ (80062d4 <xTaskResumeAll+0x120>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3318      	adds	r3, #24
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe ff8e 	bl	8005130 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3304      	adds	r3, #4
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe ff89 	bl	8005130 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	2201      	movs	r2, #1
 8006224:	409a      	lsls	r2, r3
 8006226:	4b2c      	ldr	r3, [pc, #176]	@ (80062d8 <xTaskResumeAll+0x124>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4313      	orrs	r3, r2
 800622c:	4a2a      	ldr	r2, [pc, #168]	@ (80062d8 <xTaskResumeAll+0x124>)
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4a27      	ldr	r2, [pc, #156]	@ (80062dc <xTaskResumeAll+0x128>)
 800623e:	441a      	add	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f7fe ff15 	bl	8005076 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006250:	4b23      	ldr	r3, [pc, #140]	@ (80062e0 <xTaskResumeAll+0x12c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006256:	429a      	cmp	r2, r3
 8006258:	d302      	bcc.n	8006260 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800625a:	4b22      	ldr	r3, [pc, #136]	@ (80062e4 <xTaskResumeAll+0x130>)
 800625c:	2201      	movs	r2, #1
 800625e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006260:	4b1c      	ldr	r3, [pc, #112]	@ (80062d4 <xTaskResumeAll+0x120>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1cc      	bne.n	8006202 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800626e:	f000 fb1b 	bl	80068a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006272:	4b1d      	ldr	r3, [pc, #116]	@ (80062e8 <xTaskResumeAll+0x134>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d010      	beq.n	80062a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800627e:	f000 f837 	bl	80062f0 <xTaskIncrementTick>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006288:	4b16      	ldr	r3, [pc, #88]	@ (80062e4 <xTaskResumeAll+0x130>)
 800628a:	2201      	movs	r2, #1
 800628c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3b01      	subs	r3, #1
 8006292:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1f1      	bne.n	800627e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800629a:	4b13      	ldr	r3, [pc, #76]	@ (80062e8 <xTaskResumeAll+0x134>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062a0:	4b10      	ldr	r3, [pc, #64]	@ (80062e4 <xTaskResumeAll+0x130>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062ac:	4b0f      	ldr	r3, [pc, #60]	@ (80062ec <xTaskResumeAll+0x138>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062bc:	f000 fe9e 	bl	8006ffc <vPortExitCritical>

	return xAlreadyYielded;
 80062c0:	68bb      	ldr	r3, [r7, #8]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2000055c 	.word	0x2000055c
 80062d0:	20000534 	.word	0x20000534
 80062d4:	200004f4 	.word	0x200004f4
 80062d8:	2000053c 	.word	0x2000053c
 80062dc:	20000438 	.word	0x20000438
 80062e0:	20000434 	.word	0x20000434
 80062e4:	20000548 	.word	0x20000548
 80062e8:	20000544 	.word	0x20000544
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006438 <xTaskIncrementTick+0x148>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f040 808f 	bne.w	8006422 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006304:	4b4d      	ldr	r3, [pc, #308]	@ (800643c <xTaskIncrementTick+0x14c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3301      	adds	r3, #1
 800630a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800630c:	4a4b      	ldr	r2, [pc, #300]	@ (800643c <xTaskIncrementTick+0x14c>)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d121      	bne.n	800635c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006318:	4b49      	ldr	r3, [pc, #292]	@ (8006440 <xTaskIncrementTick+0x150>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	603b      	str	r3, [r7, #0]
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	e7fd      	b.n	8006336 <xTaskIncrementTick+0x46>
 800633a:	4b41      	ldr	r3, [pc, #260]	@ (8006440 <xTaskIncrementTick+0x150>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	4b40      	ldr	r3, [pc, #256]	@ (8006444 <xTaskIncrementTick+0x154>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a3e      	ldr	r2, [pc, #248]	@ (8006440 <xTaskIncrementTick+0x150>)
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	4a3e      	ldr	r2, [pc, #248]	@ (8006444 <xTaskIncrementTick+0x154>)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	4b3e      	ldr	r3, [pc, #248]	@ (8006448 <xTaskIncrementTick+0x158>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	4a3c      	ldr	r2, [pc, #240]	@ (8006448 <xTaskIncrementTick+0x158>)
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	f000 faa6 	bl	80068a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800635c:	4b3b      	ldr	r3, [pc, #236]	@ (800644c <xTaskIncrementTick+0x15c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	429a      	cmp	r2, r3
 8006364:	d348      	bcc.n	80063f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006366:	4b36      	ldr	r3, [pc, #216]	@ (8006440 <xTaskIncrementTick+0x150>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006370:	4b36      	ldr	r3, [pc, #216]	@ (800644c <xTaskIncrementTick+0x15c>)
 8006372:	f04f 32ff 	mov.w	r2, #4294967295
 8006376:	601a      	str	r2, [r3, #0]
					break;
 8006378:	e03e      	b.n	80063f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637a:	4b31      	ldr	r3, [pc, #196]	@ (8006440 <xTaskIncrementTick+0x150>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d203      	bcs.n	800639a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006392:	4a2e      	ldr	r2, [pc, #184]	@ (800644c <xTaskIncrementTick+0x15c>)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006398:	e02e      	b.n	80063f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	3304      	adds	r3, #4
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fec6 	bl	8005130 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3318      	adds	r3, #24
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fe febd 	bl	8005130 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	2201      	movs	r2, #1
 80063bc:	409a      	lsls	r2, r3
 80063be:	4b24      	ldr	r3, [pc, #144]	@ (8006450 <xTaskIncrementTick+0x160>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	4a22      	ldr	r2, [pc, #136]	@ (8006450 <xTaskIncrementTick+0x160>)
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006454 <xTaskIncrementTick+0x164>)
 80063d6:	441a      	add	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f7fe fe49 	bl	8005076 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006458 <xTaskIncrementTick+0x168>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d3b9      	bcc.n	8006366 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063f2:	2301      	movs	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f6:	e7b6      	b.n	8006366 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063f8:	4b17      	ldr	r3, [pc, #92]	@ (8006458 <xTaskIncrementTick+0x168>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fe:	4915      	ldr	r1, [pc, #84]	@ (8006454 <xTaskIncrementTick+0x164>)
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d901      	bls.n	8006414 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006410:	2301      	movs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006414:	4b11      	ldr	r3, [pc, #68]	@ (800645c <xTaskIncrementTick+0x16c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e004      	b.n	800642c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006422:	4b0f      	ldr	r3, [pc, #60]	@ (8006460 <xTaskIncrementTick+0x170>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	4a0d      	ldr	r2, [pc, #52]	@ (8006460 <xTaskIncrementTick+0x170>)
 800642a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800642c:	697b      	ldr	r3, [r7, #20]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	2000055c 	.word	0x2000055c
 800643c:	20000538 	.word	0x20000538
 8006440:	200004ec 	.word	0x200004ec
 8006444:	200004f0 	.word	0x200004f0
 8006448:	2000054c 	.word	0x2000054c
 800644c:	20000554 	.word	0x20000554
 8006450:	2000053c 	.word	0x2000053c
 8006454:	20000438 	.word	0x20000438
 8006458:	20000434 	.word	0x20000434
 800645c:	20000548 	.word	0x20000548
 8006460:	20000544 	.word	0x20000544

08006464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800646a:	4b27      	ldr	r3, [pc, #156]	@ (8006508 <vTaskSwitchContext+0xa4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006472:	4b26      	ldr	r3, [pc, #152]	@ (800650c <vTaskSwitchContext+0xa8>)
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006478:	e040      	b.n	80064fc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800647a:	4b24      	ldr	r3, [pc, #144]	@ (800650c <vTaskSwitchContext+0xa8>)
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006480:	4b23      	ldr	r3, [pc, #140]	@ (8006510 <vTaskSwitchContext+0xac>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	fab3 f383 	clz	r3, r3
 800648c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	f1c3 031f 	rsb	r3, r3, #31
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	491f      	ldr	r1, [pc, #124]	@ (8006514 <vTaskSwitchContext+0xb0>)
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	607b      	str	r3, [r7, #4]
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	e7fd      	b.n	80064be <vTaskSwitchContext+0x5a>
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a11      	ldr	r2, [pc, #68]	@ (8006514 <vTaskSwitchContext+0xb0>)
 80064ce:	4413      	add	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	605a      	str	r2, [r3, #4]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	3308      	adds	r3, #8
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d104      	bne.n	80064f2 <vTaskSwitchContext+0x8e>
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	605a      	str	r2, [r3, #4]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	4a07      	ldr	r2, [pc, #28]	@ (8006518 <vTaskSwitchContext+0xb4>)
 80064fa:	6013      	str	r3, [r2, #0]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	2000055c 	.word	0x2000055c
 800650c:	20000548 	.word	0x20000548
 8006510:	2000053c 	.word	0x2000053c
 8006514:	20000438 	.word	0x20000438
 8006518:	20000434 	.word	0x20000434

0800651c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	e7fd      	b.n	8006540 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006544:	4b07      	ldr	r3, [pc, #28]	@ (8006564 <vTaskPlaceOnEventList+0x48>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3318      	adds	r3, #24
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fe fdb6 	bl	80050be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006552:	2101      	movs	r1, #1
 8006554:	6838      	ldr	r0, [r7, #0]
 8006556:	f000 fb87 	bl	8006c68 <prvAddCurrentTaskToDelayedList>
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000434 	.word	0x20000434

08006568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	60fb      	str	r3, [r7, #12]
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	e7fd      	b.n	8006592 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	3318      	adds	r3, #24
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe fdc8 	bl	8005130 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006618 <xTaskRemoveFromEventList+0xb0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d11c      	bne.n	80065e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fdbf 	bl	8005130 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	2201      	movs	r2, #1
 80065b8:	409a      	lsls	r2, r3
 80065ba:	4b18      	ldr	r3, [pc, #96]	@ (800661c <xTaskRemoveFromEventList+0xb4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	4a16      	ldr	r2, [pc, #88]	@ (800661c <xTaskRemoveFromEventList+0xb4>)
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4a13      	ldr	r2, [pc, #76]	@ (8006620 <xTaskRemoveFromEventList+0xb8>)
 80065d2:	441a      	add	r2, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f7fe fd4b 	bl	8005076 <vListInsertEnd>
 80065e0:	e005      	b.n	80065ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3318      	adds	r3, #24
 80065e6:	4619      	mov	r1, r3
 80065e8:	480e      	ldr	r0, [pc, #56]	@ (8006624 <xTaskRemoveFromEventList+0xbc>)
 80065ea:	f7fe fd44 	bl	8005076 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006628 <xTaskRemoveFromEventList+0xc0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d905      	bls.n	8006608 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006600:	4b0a      	ldr	r3, [pc, #40]	@ (800662c <xTaskRemoveFromEventList+0xc4>)
 8006602:	2201      	movs	r2, #1
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e001      	b.n	800660c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800660c:	697b      	ldr	r3, [r7, #20]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	2000055c 	.word	0x2000055c
 800661c:	2000053c 	.word	0x2000053c
 8006620:	20000438 	.word	0x20000438
 8006624:	200004f4 	.word	0x200004f4
 8006628:	20000434 	.word	0x20000434
 800662c:	20000548 	.word	0x20000548

08006630 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006638:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <vTaskInternalSetTimeOutState+0x24>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006640:	4b05      	ldr	r3, [pc, #20]	@ (8006658 <vTaskInternalSetTimeOutState+0x28>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	605a      	str	r2, [r3, #4]
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	2000054c 	.word	0x2000054c
 8006658:	20000538 	.word	0x20000538

0800665c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10b      	bne.n	8006684 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	613b      	str	r3, [r7, #16]
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	e7fd      	b.n	8006680 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60fb      	str	r3, [r7, #12]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80066a2:	f000 fc79 	bl	8006f98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066a6:	4b1d      	ldr	r3, [pc, #116]	@ (800671c <xTaskCheckForTimeOut+0xc0>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d102      	bne.n	80066c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066c0:	2300      	movs	r3, #0
 80066c2:	61fb      	str	r3, [r7, #28]
 80066c4:	e023      	b.n	800670e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4b15      	ldr	r3, [pc, #84]	@ (8006720 <xTaskCheckForTimeOut+0xc4>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d007      	beq.n	80066e2 <xTaskCheckForTimeOut+0x86>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d302      	bcc.n	80066e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066dc:	2301      	movs	r3, #1
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	e015      	b.n	800670e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d20b      	bcs.n	8006704 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ff99 	bl	8006630 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	e004      	b.n	800670e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800670a:	2301      	movs	r3, #1
 800670c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800670e:	f000 fc75 	bl	8006ffc <vPortExitCritical>

	return xReturn;
 8006712:	69fb      	ldr	r3, [r7, #28]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3720      	adds	r7, #32
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000538 	.word	0x20000538
 8006720:	2000054c 	.word	0x2000054c

08006724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006728:	4b03      	ldr	r3, [pc, #12]	@ (8006738 <vTaskMissedYield+0x14>)
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]
}
 800672e:	bf00      	nop
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000548 	.word	0x20000548

0800673c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006744:	f000 f852 	bl	80067ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006748:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <prvIdleTask+0x28>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d9f9      	bls.n	8006744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006750:	4b05      	ldr	r3, [pc, #20]	@ (8006768 <prvIdleTask+0x2c>)
 8006752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006760:	e7f0      	b.n	8006744 <prvIdleTask+0x8>
 8006762:	bf00      	nop
 8006764:	20000438 	.word	0x20000438
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006772:	2300      	movs	r3, #0
 8006774:	607b      	str	r3, [r7, #4]
 8006776:	e00c      	b.n	8006792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4a12      	ldr	r2, [pc, #72]	@ (80067cc <prvInitialiseTaskLists+0x60>)
 8006784:	4413      	add	r3, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fc48 	bl	800501c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3301      	adds	r3, #1
 8006790:	607b      	str	r3, [r7, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b06      	cmp	r3, #6
 8006796:	d9ef      	bls.n	8006778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006798:	480d      	ldr	r0, [pc, #52]	@ (80067d0 <prvInitialiseTaskLists+0x64>)
 800679a:	f7fe fc3f 	bl	800501c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800679e:	480d      	ldr	r0, [pc, #52]	@ (80067d4 <prvInitialiseTaskLists+0x68>)
 80067a0:	f7fe fc3c 	bl	800501c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067a4:	480c      	ldr	r0, [pc, #48]	@ (80067d8 <prvInitialiseTaskLists+0x6c>)
 80067a6:	f7fe fc39 	bl	800501c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067aa:	480c      	ldr	r0, [pc, #48]	@ (80067dc <prvInitialiseTaskLists+0x70>)
 80067ac:	f7fe fc36 	bl	800501c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067b0:	480b      	ldr	r0, [pc, #44]	@ (80067e0 <prvInitialiseTaskLists+0x74>)
 80067b2:	f7fe fc33 	bl	800501c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067b6:	4b0b      	ldr	r3, [pc, #44]	@ (80067e4 <prvInitialiseTaskLists+0x78>)
 80067b8:	4a05      	ldr	r2, [pc, #20]	@ (80067d0 <prvInitialiseTaskLists+0x64>)
 80067ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067bc:	4b0a      	ldr	r3, [pc, #40]	@ (80067e8 <prvInitialiseTaskLists+0x7c>)
 80067be:	4a05      	ldr	r2, [pc, #20]	@ (80067d4 <prvInitialiseTaskLists+0x68>)
 80067c0:	601a      	str	r2, [r3, #0]
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000438 	.word	0x20000438
 80067d0:	200004c4 	.word	0x200004c4
 80067d4:	200004d8 	.word	0x200004d8
 80067d8:	200004f4 	.word	0x200004f4
 80067dc:	20000508 	.word	0x20000508
 80067e0:	20000520 	.word	0x20000520
 80067e4:	200004ec 	.word	0x200004ec
 80067e8:	200004f0 	.word	0x200004f0

080067ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f2:	e019      	b.n	8006828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067f4:	f000 fbd0 	bl	8006f98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f8:	4b10      	ldr	r3, [pc, #64]	@ (800683c <prvCheckTasksWaitingTermination+0x50>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe fc93 	bl	8005130 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <prvCheckTasksWaitingTermination+0x54>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3b01      	subs	r3, #1
 8006810:	4a0b      	ldr	r2, [pc, #44]	@ (8006840 <prvCheckTasksWaitingTermination+0x54>)
 8006812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006814:	4b0b      	ldr	r3, [pc, #44]	@ (8006844 <prvCheckTasksWaitingTermination+0x58>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3b01      	subs	r3, #1
 800681a:	4a0a      	ldr	r2, [pc, #40]	@ (8006844 <prvCheckTasksWaitingTermination+0x58>)
 800681c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800681e:	f000 fbed 	bl	8006ffc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f810 	bl	8006848 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006828:	4b06      	ldr	r3, [pc, #24]	@ (8006844 <prvCheckTasksWaitingTermination+0x58>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e1      	bne.n	80067f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000508 	.word	0x20000508
 8006840:	20000534 	.word	0x20000534
 8006844:	2000051c 	.word	0x2000051c

08006848 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006856:	2b00      	cmp	r3, #0
 8006858:	d108      	bne.n	800686c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fd8a 	bl	8007378 <vPortFree>
				vPortFree( pxTCB );
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fd87 	bl	8007378 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800686a:	e019      	b.n	80068a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006872:	2b01      	cmp	r3, #1
 8006874:	d103      	bne.n	800687e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fd7e 	bl	8007378 <vPortFree>
	}
 800687c:	e010      	b.n	80068a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006884:	2b02      	cmp	r3, #2
 8006886:	d00b      	beq.n	80068a0 <prvDeleteTCB+0x58>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	60fb      	str	r3, [r7, #12]
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	e7fd      	b.n	800689c <prvDeleteTCB+0x54>
	}
 80068a0:	bf00      	nop
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ae:	4b0c      	ldr	r3, [pc, #48]	@ (80068e0 <prvResetNextTaskUnblockTime+0x38>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068b8:	4b0a      	ldr	r3, [pc, #40]	@ (80068e4 <prvResetNextTaskUnblockTime+0x3c>)
 80068ba:	f04f 32ff 	mov.w	r2, #4294967295
 80068be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068c0:	e008      	b.n	80068d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c2:	4b07      	ldr	r3, [pc, #28]	@ (80068e0 <prvResetNextTaskUnblockTime+0x38>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	4a04      	ldr	r2, [pc, #16]	@ (80068e4 <prvResetNextTaskUnblockTime+0x3c>)
 80068d2:	6013      	str	r3, [r2, #0]
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	200004ec 	.word	0x200004ec
 80068e4:	20000554 	.word	0x20000554

080068e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <xTaskGetSchedulerState+0x34>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068f6:	2301      	movs	r3, #1
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	e008      	b.n	800690e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068fc:	4b08      	ldr	r3, [pc, #32]	@ (8006920 <xTaskGetSchedulerState+0x38>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006904:	2302      	movs	r3, #2
 8006906:	607b      	str	r3, [r7, #4]
 8006908:	e001      	b.n	800690e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800690e:	687b      	ldr	r3, [r7, #4]
	}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	20000540 	.word	0x20000540
 8006920:	2000055c 	.word	0x2000055c

08006924 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d05e      	beq.n	80069f8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693e:	4b31      	ldr	r3, [pc, #196]	@ (8006a04 <xTaskPriorityInherit+0xe0>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006944:	429a      	cmp	r2, r3
 8006946:	d24e      	bcs.n	80069e6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	db06      	blt.n	800695e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006950:	4b2c      	ldr	r3, [pc, #176]	@ (8006a04 <xTaskPriorityInherit+0xe0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006956:	f1c3 0207 	rsb	r2, r3, #7
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6959      	ldr	r1, [r3, #20]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4a26      	ldr	r2, [pc, #152]	@ (8006a08 <xTaskPriorityInherit+0xe4>)
 8006970:	4413      	add	r3, r2
 8006972:	4299      	cmp	r1, r3
 8006974:	d12f      	bne.n	80069d6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	3304      	adds	r3, #4
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fbd8 	bl	8005130 <uxListRemove>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698a:	2201      	movs	r2, #1
 800698c:	fa02 f303 	lsl.w	r3, r2, r3
 8006990:	43da      	mvns	r2, r3
 8006992:	4b1e      	ldr	r3, [pc, #120]	@ (8006a0c <xTaskPriorityInherit+0xe8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4013      	ands	r3, r2
 8006998:	4a1c      	ldr	r2, [pc, #112]	@ (8006a0c <xTaskPriorityInherit+0xe8>)
 800699a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800699c:	4b19      	ldr	r3, [pc, #100]	@ (8006a04 <xTaskPriorityInherit+0xe0>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069aa:	2201      	movs	r2, #1
 80069ac:	409a      	lsls	r2, r3
 80069ae:	4b17      	ldr	r3, [pc, #92]	@ (8006a0c <xTaskPriorityInherit+0xe8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	4a15      	ldr	r2, [pc, #84]	@ (8006a0c <xTaskPriorityInherit+0xe8>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4a10      	ldr	r2, [pc, #64]	@ (8006a08 <xTaskPriorityInherit+0xe4>)
 80069c6:	441a      	add	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7fe fb51 	bl	8005076 <vListInsertEnd>
 80069d4:	e004      	b.n	80069e0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <xTaskPriorityInherit+0xe0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80069e0:	2301      	movs	r3, #1
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e008      	b.n	80069f8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ea:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <xTaskPriorityInherit+0xe0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d201      	bcs.n	80069f8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80069f4:	2301      	movs	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069f8:	68fb      	ldr	r3, [r7, #12]
	}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000434 	.word	0x20000434
 8006a08:	20000438 	.word	0x20000438
 8006a0c:	2000053c 	.word	0x2000053c

08006a10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d070      	beq.n	8006b08 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a26:	4b3b      	ldr	r3, [pc, #236]	@ (8006b14 <xTaskPriorityDisinherit+0x104>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d00b      	beq.n	8006a48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60fb      	str	r3, [r7, #12]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10b      	bne.n	8006a68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	60bb      	str	r3, [r7, #8]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a6c:	1e5a      	subs	r2, r3, #1
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d044      	beq.n	8006b08 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d140      	bne.n	8006b08 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe fb50 	bl	8005130 <uxListRemove>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d115      	bne.n	8006ac2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9a:	491f      	ldr	r1, [pc, #124]	@ (8006b18 <xTaskPriorityDisinherit+0x108>)
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <xTaskPriorityDisinherit+0xb2>
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43da      	mvns	r2, r3
 8006ab8:	4b18      	ldr	r3, [pc, #96]	@ (8006b1c <xTaskPriorityDisinherit+0x10c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4013      	ands	r3, r2
 8006abe:	4a17      	ldr	r2, [pc, #92]	@ (8006b1c <xTaskPriorityDisinherit+0x10c>)
 8006ac0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	f1c3 0207 	rsb	r2, r3, #7
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ada:	2201      	movs	r2, #1
 8006adc:	409a      	lsls	r2, r3
 8006ade:	4b0f      	ldr	r3, [pc, #60]	@ (8006b1c <xTaskPriorityDisinherit+0x10c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8006b1c <xTaskPriorityDisinherit+0x10c>)
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4a08      	ldr	r2, [pc, #32]	@ (8006b18 <xTaskPriorityDisinherit+0x108>)
 8006af6:	441a      	add	r2, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	3304      	adds	r3, #4
 8006afc:	4619      	mov	r1, r3
 8006afe:	4610      	mov	r0, r2
 8006b00:	f7fe fab9 	bl	8005076 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b04:	2301      	movs	r3, #1
 8006b06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b08:	697b      	ldr	r3, [r7, #20]
	}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000434 	.word	0x20000434
 8006b18:	20000438 	.word	0x20000438
 8006b1c:	2000053c 	.word	0x2000053c

08006b20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d079      	beq.n	8006c2c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10b      	bne.n	8006b58 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	60fb      	str	r3, [r7, #12]
}
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
 8006b56:	e7fd      	b.n	8006b54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d902      	bls.n	8006b68 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	e002      	b.n	8006b6e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d059      	beq.n	8006c2c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d154      	bne.n	8006c2c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b82:	4b2c      	ldr	r3, [pc, #176]	@ (8006c34 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d10b      	bne.n	8006ba4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	60bb      	str	r3, [r7, #8]
}
 8006b9e:	bf00      	nop
 8006ba0:	bf00      	nop
 8006ba2:	e7fd      	b.n	8006ba0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	db04      	blt.n	8006bc2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f1c3 0207 	rsb	r2, r3, #7
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	6959      	ldr	r1, [r3, #20]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4a19      	ldr	r2, [pc, #100]	@ (8006c38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006bd2:	4413      	add	r3, r2
 8006bd4:	4299      	cmp	r1, r3
 8006bd6:	d129      	bne.n	8006c2c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe faa7 	bl	8005130 <uxListRemove>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	2201      	movs	r2, #1
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	43da      	mvns	r2, r3
 8006bf4:	4b11      	ldr	r3, [pc, #68]	@ (8006c3c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	4a10      	ldr	r2, [pc, #64]	@ (8006c3c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006bfc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c02:	2201      	movs	r2, #1
 8006c04:	409a      	lsls	r2, r3
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c3c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4a06      	ldr	r2, [pc, #24]	@ (8006c38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006c1e:	441a      	add	r2, r3
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f7fe fa25 	bl	8005076 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c2c:	bf00      	nop
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000434 	.word	0x20000434
 8006c38:	20000438 	.word	0x20000438
 8006c3c:	2000053c 	.word	0x2000053c

08006c40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c44:	4b07      	ldr	r3, [pc, #28]	@ (8006c64 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d004      	beq.n	8006c56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c4c:	4b05      	ldr	r3, [pc, #20]	@ (8006c64 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c52:	3201      	adds	r2, #1
 8006c54:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006c56:	4b03      	ldr	r3, [pc, #12]	@ (8006c64 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c58:	681b      	ldr	r3, [r3, #0]
	}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	20000434 	.word	0x20000434

08006c68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c72:	4b29      	ldr	r3, [pc, #164]	@ (8006d18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c78:	4b28      	ldr	r3, [pc, #160]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fa56 	bl	8005130 <uxListRemove>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10b      	bne.n	8006ca2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c8a:	4b24      	ldr	r3, [pc, #144]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c90:	2201      	movs	r2, #1
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43da      	mvns	r2, r3
 8006c98:	4b21      	ldr	r3, [pc, #132]	@ (8006d20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	4a20      	ldr	r2, [pc, #128]	@ (8006d20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ca0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d10a      	bne.n	8006cc0 <prvAddCurrentTaskToDelayedList+0x58>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	481a      	ldr	r0, [pc, #104]	@ (8006d24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006cba:	f7fe f9dc 	bl	8005076 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cbe:	e026      	b.n	8006d0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cc8:	4b14      	ldr	r3, [pc, #80]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d209      	bcs.n	8006cec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cd8:	4b13      	ldr	r3, [pc, #76]	@ (8006d28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f7fe f9ea 	bl	80050be <vListInsert>
}
 8006cea:	e010      	b.n	8006d0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cec:	4b0f      	ldr	r3, [pc, #60]	@ (8006d2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	f7fe f9e0 	bl	80050be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d202      	bcs.n	8006d0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006d08:	4a09      	ldr	r2, [pc, #36]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6013      	str	r3, [r2, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000538 	.word	0x20000538
 8006d1c:	20000434 	.word	0x20000434
 8006d20:	2000053c 	.word	0x2000053c
 8006d24:	20000520 	.word	0x20000520
 8006d28:	200004f0 	.word	0x200004f0
 8006d2c:	200004ec 	.word	0x200004ec
 8006d30:	20000554 	.word	0x20000554

08006d34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3b04      	subs	r3, #4
 8006d44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f023 0201 	bic.w	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3b04      	subs	r3, #4
 8006d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d64:	4a0c      	ldr	r2, [pc, #48]	@ (8006d98 <pxPortInitialiseStack+0x64>)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3b14      	subs	r3, #20
 8006d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3b04      	subs	r3, #4
 8006d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f06f 0202 	mvn.w	r2, #2
 8006d82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3b20      	subs	r3, #32
 8006d88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	08006d9d 	.word	0x08006d9d

08006d9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006da6:	4b13      	ldr	r3, [pc, #76]	@ (8006df4 <prvTaskExitError+0x58>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d00b      	beq.n	8006dc8 <prvTaskExitError+0x2c>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <prvTaskExitError+0x28>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	60bb      	str	r3, [r7, #8]
}
 8006dda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ddc:	bf00      	nop
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0fc      	beq.n	8006dde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20000090 	.word	0x20000090
	...

08006e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e00:	4b07      	ldr	r3, [pc, #28]	@ (8006e20 <pxCurrentTCBConst2>)
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	6808      	ldr	r0, [r1, #0]
 8006e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	f380 8809 	msr	PSP, r0
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f04f 0000 	mov.w	r0, #0
 8006e16:	f380 8811 	msr	BASEPRI, r0
 8006e1a:	4770      	bx	lr
 8006e1c:	f3af 8000 	nop.w

08006e20 <pxCurrentTCBConst2>:
 8006e20:	20000434 	.word	0x20000434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop

08006e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e28:	4808      	ldr	r0, [pc, #32]	@ (8006e4c <prvPortStartFirstTask+0x24>)
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	6800      	ldr	r0, [r0, #0]
 8006e2e:	f380 8808 	msr	MSP, r0
 8006e32:	f04f 0000 	mov.w	r0, #0
 8006e36:	f380 8814 	msr	CONTROL, r0
 8006e3a:	b662      	cpsie	i
 8006e3c:	b661      	cpsie	f
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	df00      	svc	0
 8006e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e4a:	bf00      	nop
 8006e4c:	e000ed08 	.word	0xe000ed08

08006e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e56:	4b47      	ldr	r3, [pc, #284]	@ (8006f74 <xPortStartScheduler+0x124>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a47      	ldr	r2, [pc, #284]	@ (8006f78 <xPortStartScheduler+0x128>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d10b      	bne.n	8006e78 <xPortStartScheduler+0x28>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	60fb      	str	r3, [r7, #12]
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e78:	4b3e      	ldr	r3, [pc, #248]	@ (8006f74 <xPortStartScheduler+0x124>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f7c <xPortStartScheduler+0x12c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d10b      	bne.n	8006e9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	613b      	str	r3, [r7, #16]
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e9a:	4b39      	ldr	r3, [pc, #228]	@ (8006f80 <xPortStartScheduler+0x130>)
 8006e9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	22ff      	movs	r2, #255	@ 0xff
 8006eaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	4b31      	ldr	r3, [pc, #196]	@ (8006f84 <xPortStartScheduler+0x134>)
 8006ec0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ec2:	4b31      	ldr	r3, [pc, #196]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ec8:	e009      	b.n	8006ede <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006eca:	4b2f      	ldr	r3, [pc, #188]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006ed2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee6:	2b80      	cmp	r3, #128	@ 0x80
 8006ee8:	d0ef      	beq.n	8006eca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006eea:	4b27      	ldr	r3, [pc, #156]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f1c3 0307 	rsb	r3, r3, #7
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d00b      	beq.n	8006f0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60bb      	str	r3, [r7, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	e7fd      	b.n	8006f0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	4a1c      	ldr	r2, [pc, #112]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006f16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f18:	4b1b      	ldr	r3, [pc, #108]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f20:	4a19      	ldr	r2, [pc, #100]	@ (8006f88 <xPortStartScheduler+0x138>)
 8006f22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f2c:	4b17      	ldr	r3, [pc, #92]	@ (8006f8c <xPortStartScheduler+0x13c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a16      	ldr	r2, [pc, #88]	@ (8006f8c <xPortStartScheduler+0x13c>)
 8006f32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f38:	4b14      	ldr	r3, [pc, #80]	@ (8006f8c <xPortStartScheduler+0x13c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a13      	ldr	r2, [pc, #76]	@ (8006f8c <xPortStartScheduler+0x13c>)
 8006f3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006f42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f44:	f000 f8da 	bl	80070fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f48:	4b11      	ldr	r3, [pc, #68]	@ (8006f90 <xPortStartScheduler+0x140>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f4e:	f000 f8f9 	bl	8007144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f52:	4b10      	ldr	r3, [pc, #64]	@ (8006f94 <xPortStartScheduler+0x144>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a0f      	ldr	r2, [pc, #60]	@ (8006f94 <xPortStartScheduler+0x144>)
 8006f58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006f5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f5e:	f7ff ff63 	bl	8006e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f62:	f7ff fa7f 	bl	8006464 <vTaskSwitchContext>
	prvTaskExitError();
 8006f66:	f7ff ff19 	bl	8006d9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	e000ed00 	.word	0xe000ed00
 8006f78:	410fc271 	.word	0x410fc271
 8006f7c:	410fc270 	.word	0x410fc270
 8006f80:	e000e400 	.word	0xe000e400
 8006f84:	20000560 	.word	0x20000560
 8006f88:	20000564 	.word	0x20000564
 8006f8c:	e000ed20 	.word	0xe000ed20
 8006f90:	20000090 	.word	0x20000090
 8006f94:	e000ef34 	.word	0xe000ef34

08006f98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fb2:	4b10      	ldr	r3, [pc, #64]	@ (8006ff4 <vPortEnterCritical+0x5c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ff4 <vPortEnterCritical+0x5c>)
 8006fba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff4 <vPortEnterCritical+0x5c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d110      	bne.n	8006fe6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff8 <vPortEnterCritical+0x60>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	603b      	str	r3, [r7, #0]
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	e7fd      	b.n	8006fe2 <vPortEnterCritical+0x4a>
	}
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000090 	.word	0x20000090
 8006ff8:	e000ed04 	.word	0xe000ed04

08006ffc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007002:	4b12      	ldr	r3, [pc, #72]	@ (800704c <vPortExitCritical+0x50>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <vPortExitCritical+0x26>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	607b      	str	r3, [r7, #4]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007022:	4b0a      	ldr	r3, [pc, #40]	@ (800704c <vPortExitCritical+0x50>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3b01      	subs	r3, #1
 8007028:	4a08      	ldr	r2, [pc, #32]	@ (800704c <vPortExitCritical+0x50>)
 800702a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800702c:	4b07      	ldr	r3, [pc, #28]	@ (800704c <vPortExitCritical+0x50>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <vPortExitCritical+0x44>
 8007034:	2300      	movs	r3, #0
 8007036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f383 8811 	msr	BASEPRI, r3
}
 800703e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	20000090 	.word	0x20000090

08007050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007050:	f3ef 8009 	mrs	r0, PSP
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	4b15      	ldr	r3, [pc, #84]	@ (80070b0 <pxCurrentTCBConst>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	f01e 0f10 	tst.w	lr, #16
 8007060:	bf08      	it	eq
 8007062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	6010      	str	r0, [r2, #0]
 800706c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007074:	f380 8811 	msr	BASEPRI, r0
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f7ff f9f0 	bl	8006464 <vTaskSwitchContext>
 8007084:	f04f 0000 	mov.w	r0, #0
 8007088:	f380 8811 	msr	BASEPRI, r0
 800708c:	bc09      	pop	{r0, r3}
 800708e:	6819      	ldr	r1, [r3, #0]
 8007090:	6808      	ldr	r0, [r1, #0]
 8007092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007096:	f01e 0f10 	tst.w	lr, #16
 800709a:	bf08      	it	eq
 800709c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070a0:	f380 8809 	msr	PSP, r0
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	f3af 8000 	nop.w

080070b0 <pxCurrentTCBConst>:
 80070b0:	20000434 	.word	0x20000434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop

080070b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	607b      	str	r3, [r7, #4]
}
 80070d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070d2:	f7ff f90d 	bl	80062f0 <xTaskIncrementTick>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <xPortSysTickHandler+0x40>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	2300      	movs	r3, #0
 80070e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f383 8811 	msr	BASEPRI, r3
}
 80070ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007100:	4b0b      	ldr	r3, [pc, #44]	@ (8007130 <vPortSetupTimerInterrupt+0x34>)
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007106:	4b0b      	ldr	r3, [pc, #44]	@ (8007134 <vPortSetupTimerInterrupt+0x38>)
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800710c:	4b0a      	ldr	r3, [pc, #40]	@ (8007138 <vPortSetupTimerInterrupt+0x3c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0a      	ldr	r2, [pc, #40]	@ (800713c <vPortSetupTimerInterrupt+0x40>)
 8007112:	fba2 2303 	umull	r2, r3, r2, r3
 8007116:	099b      	lsrs	r3, r3, #6
 8007118:	4a09      	ldr	r2, [pc, #36]	@ (8007140 <vPortSetupTimerInterrupt+0x44>)
 800711a:	3b01      	subs	r3, #1
 800711c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800711e:	4b04      	ldr	r3, [pc, #16]	@ (8007130 <vPortSetupTimerInterrupt+0x34>)
 8007120:	2207      	movs	r2, #7
 8007122:	601a      	str	r2, [r3, #0]
}
 8007124:	bf00      	nop
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	e000e010 	.word	0xe000e010
 8007134:	e000e018 	.word	0xe000e018
 8007138:	20000064 	.word	0x20000064
 800713c:	10624dd3 	.word	0x10624dd3
 8007140:	e000e014 	.word	0xe000e014

08007144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007144:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007154 <vPortEnableVFP+0x10>
 8007148:	6801      	ldr	r1, [r0, #0]
 800714a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800714e:	6001      	str	r1, [r0, #0]
 8007150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007152:	bf00      	nop
 8007154:	e000ed88 	.word	0xe000ed88

08007158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800715e:	f3ef 8305 	mrs	r3, IPSR
 8007162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b0f      	cmp	r3, #15
 8007168:	d915      	bls.n	8007196 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800716a:	4a18      	ldr	r2, [pc, #96]	@ (80071cc <vPortValidateInterruptPriority+0x74>)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007174:	4b16      	ldr	r3, [pc, #88]	@ (80071d0 <vPortValidateInterruptPriority+0x78>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	7afa      	ldrb	r2, [r7, #11]
 800717a:	429a      	cmp	r2, r3
 800717c:	d20b      	bcs.n	8007196 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	607b      	str	r3, [r7, #4]
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	e7fd      	b.n	8007192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007196:	4b0f      	ldr	r3, [pc, #60]	@ (80071d4 <vPortValidateInterruptPriority+0x7c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800719e:	4b0e      	ldr	r3, [pc, #56]	@ (80071d8 <vPortValidateInterruptPriority+0x80>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d90b      	bls.n	80071be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	603b      	str	r3, [r7, #0]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <vPortValidateInterruptPriority+0x62>
	}
 80071be:	bf00      	nop
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	e000e3f0 	.word	0xe000e3f0
 80071d0:	20000560 	.word	0x20000560
 80071d4:	e000ed0c 	.word	0xe000ed0c
 80071d8:	20000564 	.word	0x20000564

080071dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08a      	sub	sp, #40	@ 0x28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071e4:	2300      	movs	r3, #0
 80071e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071e8:	f7fe ffd6 	bl	8006198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007360 <pvPortMalloc+0x184>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071f4:	f000 f924 	bl	8007440 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007364 <pvPortMalloc+0x188>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8095 	bne.w	8007330 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01e      	beq.n	800724a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800720c:	2208      	movs	r2, #8
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4413      	add	r3, r2
 8007212:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	2b00      	cmp	r3, #0
 800721c:	d015      	beq.n	800724a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f023 0307 	bic.w	r3, r3, #7
 8007224:	3308      	adds	r3, #8
 8007226:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <pvPortMalloc+0x6e>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	617b      	str	r3, [r7, #20]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d06f      	beq.n	8007330 <pvPortMalloc+0x154>
 8007250:	4b45      	ldr	r3, [pc, #276]	@ (8007368 <pvPortMalloc+0x18c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d86a      	bhi.n	8007330 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800725a:	4b44      	ldr	r3, [pc, #272]	@ (800736c <pvPortMalloc+0x190>)
 800725c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800725e:	4b43      	ldr	r3, [pc, #268]	@ (800736c <pvPortMalloc+0x190>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007264:	e004      	b.n	8007270 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d903      	bls.n	8007282 <pvPortMalloc+0xa6>
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f1      	bne.n	8007266 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007282:	4b37      	ldr	r3, [pc, #220]	@ (8007360 <pvPortMalloc+0x184>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007288:	429a      	cmp	r2, r3
 800728a:	d051      	beq.n	8007330 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2208      	movs	r2, #8
 8007292:	4413      	add	r3, r2
 8007294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	1ad2      	subs	r2, r2, r3
 80072a6:	2308      	movs	r3, #8
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d920      	bls.n	80072f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4413      	add	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <pvPortMalloc+0xfc>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	613b      	str	r3, [r7, #16]
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	e7fd      	b.n	80072d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072ea:	69b8      	ldr	r0, [r7, #24]
 80072ec:	f000 f90a 	bl	8007504 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007368 <pvPortMalloc+0x18c>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007368 <pvPortMalloc+0x18c>)
 80072fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007368 <pvPortMalloc+0x18c>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4b1b      	ldr	r3, [pc, #108]	@ (8007370 <pvPortMalloc+0x194>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d203      	bcs.n	8007312 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800730a:	4b17      	ldr	r3, [pc, #92]	@ (8007368 <pvPortMalloc+0x18c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a18      	ldr	r2, [pc, #96]	@ (8007370 <pvPortMalloc+0x194>)
 8007310:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	4b13      	ldr	r3, [pc, #76]	@ (8007364 <pvPortMalloc+0x188>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	431a      	orrs	r2, r3
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007326:	4b13      	ldr	r3, [pc, #76]	@ (8007374 <pvPortMalloc+0x198>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3301      	adds	r3, #1
 800732c:	4a11      	ldr	r2, [pc, #68]	@ (8007374 <pvPortMalloc+0x198>)
 800732e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007330:	f7fe ff40 	bl	80061b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <pvPortMalloc+0x17a>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	60fb      	str	r3, [r7, #12]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <pvPortMalloc+0x176>
	return pvReturn;
 8007356:	69fb      	ldr	r3, [r7, #28]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3728      	adds	r7, #40	@ 0x28
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20004170 	.word	0x20004170
 8007364:	20004184 	.word	0x20004184
 8007368:	20004174 	.word	0x20004174
 800736c:	20004168 	.word	0x20004168
 8007370:	20004178 	.word	0x20004178
 8007374:	2000417c 	.word	0x2000417c

08007378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d04f      	beq.n	800742a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800738a:	2308      	movs	r3, #8
 800738c:	425b      	negs	r3, r3
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4413      	add	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4b25      	ldr	r3, [pc, #148]	@ (8007434 <vPortFree+0xbc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10b      	bne.n	80073be <vPortFree+0x46>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60fb      	str	r3, [r7, #12]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <vPortFree+0x66>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60bb      	str	r3, [r7, #8]
}
 80073d8:	bf00      	nop
 80073da:	bf00      	nop
 80073dc:	e7fd      	b.n	80073da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	4b14      	ldr	r3, [pc, #80]	@ (8007434 <vPortFree+0xbc>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01e      	beq.n	800742a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11a      	bne.n	800742a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007434 <vPortFree+0xbc>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	43db      	mvns	r3, r3
 80073fe:	401a      	ands	r2, r3
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007404:	f7fe fec8 	bl	8006198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <vPortFree+0xc0>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4413      	add	r3, r2
 8007412:	4a09      	ldr	r2, [pc, #36]	@ (8007438 <vPortFree+0xc0>)
 8007414:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007416:	6938      	ldr	r0, [r7, #16]
 8007418:	f000 f874 	bl	8007504 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800741c:	4b07      	ldr	r3, [pc, #28]	@ (800743c <vPortFree+0xc4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	4a06      	ldr	r2, [pc, #24]	@ (800743c <vPortFree+0xc4>)
 8007424:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007426:	f7fe fec5 	bl	80061b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800742a:	bf00      	nop
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20004184 	.word	0x20004184
 8007438:	20004174 	.word	0x20004174
 800743c:	20004180 	.word	0x20004180

08007440 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007446:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800744a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800744c:	4b27      	ldr	r3, [pc, #156]	@ (80074ec <prvHeapInit+0xac>)
 800744e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00c      	beq.n	8007474 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3307      	adds	r3, #7
 800745e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0307 	bic.w	r3, r3, #7
 8007466:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	4a1f      	ldr	r2, [pc, #124]	@ (80074ec <prvHeapInit+0xac>)
 8007470:	4413      	add	r3, r2
 8007472:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007478:	4a1d      	ldr	r2, [pc, #116]	@ (80074f0 <prvHeapInit+0xb0>)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800747e:	4b1c      	ldr	r3, [pc, #112]	@ (80074f0 <prvHeapInit+0xb0>)
 8007480:	2200      	movs	r2, #0
 8007482:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	4413      	add	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800748c:	2208      	movs	r2, #8
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0307 	bic.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a15      	ldr	r2, [pc, #84]	@ (80074f4 <prvHeapInit+0xb4>)
 80074a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074a2:	4b14      	ldr	r3, [pc, #80]	@ (80074f4 <prvHeapInit+0xb4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074aa:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <prvHeapInit+0xb4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	1ad2      	subs	r2, r2, r3
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074c0:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <prvHeapInit+0xb4>)
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	4a0a      	ldr	r2, [pc, #40]	@ (80074f8 <prvHeapInit+0xb8>)
 80074ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	4a09      	ldr	r2, [pc, #36]	@ (80074fc <prvHeapInit+0xbc>)
 80074d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074d8:	4b09      	ldr	r3, [pc, #36]	@ (8007500 <prvHeapInit+0xc0>)
 80074da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80074de:	601a      	str	r2, [r3, #0]
}
 80074e0:	bf00      	nop
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	20000568 	.word	0x20000568
 80074f0:	20004168 	.word	0x20004168
 80074f4:	20004170 	.word	0x20004170
 80074f8:	20004178 	.word	0x20004178
 80074fc:	20004174 	.word	0x20004174
 8007500:	20004184 	.word	0x20004184

08007504 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800750c:	4b28      	ldr	r3, [pc, #160]	@ (80075b0 <prvInsertBlockIntoFreeList+0xac>)
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e002      	b.n	8007518 <prvInsertBlockIntoFreeList+0x14>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	429a      	cmp	r2, r3
 8007520:	d8f7      	bhi.n	8007512 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	4413      	add	r3, r2
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	429a      	cmp	r2, r3
 8007532:	d108      	bne.n	8007546 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	441a      	add	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	441a      	add	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d118      	bne.n	800758c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	4b15      	ldr	r3, [pc, #84]	@ (80075b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	429a      	cmp	r2, r3
 8007564:	d00d      	beq.n	8007582 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	441a      	add	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e008      	b.n	8007594 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007582:	4b0c      	ldr	r3, [pc, #48]	@ (80075b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e003      	b.n	8007594 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	429a      	cmp	r2, r3
 800759a:	d002      	beq.n	80075a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075a2:	bf00      	nop
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	20004168 	.word	0x20004168
 80075b4:	20004170 	.word	0x20004170

080075b8 <srand>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4b10      	ldr	r3, [pc, #64]	@ (80075fc <srand+0x44>)
 80075bc:	681d      	ldr	r5, [r3, #0]
 80075be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80075c0:	4604      	mov	r4, r0
 80075c2:	b9b3      	cbnz	r3, 80075f2 <srand+0x3a>
 80075c4:	2018      	movs	r0, #24
 80075c6:	f000 fa7d 	bl	8007ac4 <malloc>
 80075ca:	4602      	mov	r2, r0
 80075cc:	6328      	str	r0, [r5, #48]	@ 0x30
 80075ce:	b920      	cbnz	r0, 80075da <srand+0x22>
 80075d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <srand+0x48>)
 80075d2:	480c      	ldr	r0, [pc, #48]	@ (8007604 <srand+0x4c>)
 80075d4:	2146      	movs	r1, #70	@ 0x46
 80075d6:	f000 fa0d 	bl	80079f4 <__assert_func>
 80075da:	490b      	ldr	r1, [pc, #44]	@ (8007608 <srand+0x50>)
 80075dc:	4b0b      	ldr	r3, [pc, #44]	@ (800760c <srand+0x54>)
 80075de:	e9c0 1300 	strd	r1, r3, [r0]
 80075e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007610 <srand+0x58>)
 80075e4:	6083      	str	r3, [r0, #8]
 80075e6:	230b      	movs	r3, #11
 80075e8:	8183      	strh	r3, [r0, #12]
 80075ea:	2100      	movs	r1, #0
 80075ec:	2001      	movs	r0, #1
 80075ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80075f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80075f4:	2200      	movs	r2, #0
 80075f6:	611c      	str	r4, [r3, #16]
 80075f8:	615a      	str	r2, [r3, #20]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	200000a0 	.word	0x200000a0
 8007600:	08008ff0 	.word	0x08008ff0
 8007604:	08009007 	.word	0x08009007
 8007608:	abcd330e 	.word	0xabcd330e
 800760c:	e66d1234 	.word	0xe66d1234
 8007610:	0005deec 	.word	0x0005deec

08007614 <rand>:
 8007614:	4b16      	ldr	r3, [pc, #88]	@ (8007670 <rand+0x5c>)
 8007616:	b510      	push	{r4, lr}
 8007618:	681c      	ldr	r4, [r3, #0]
 800761a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800761c:	b9b3      	cbnz	r3, 800764c <rand+0x38>
 800761e:	2018      	movs	r0, #24
 8007620:	f000 fa50 	bl	8007ac4 <malloc>
 8007624:	4602      	mov	r2, r0
 8007626:	6320      	str	r0, [r4, #48]	@ 0x30
 8007628:	b920      	cbnz	r0, 8007634 <rand+0x20>
 800762a:	4b12      	ldr	r3, [pc, #72]	@ (8007674 <rand+0x60>)
 800762c:	4812      	ldr	r0, [pc, #72]	@ (8007678 <rand+0x64>)
 800762e:	2152      	movs	r1, #82	@ 0x52
 8007630:	f000 f9e0 	bl	80079f4 <__assert_func>
 8007634:	4911      	ldr	r1, [pc, #68]	@ (800767c <rand+0x68>)
 8007636:	4b12      	ldr	r3, [pc, #72]	@ (8007680 <rand+0x6c>)
 8007638:	e9c0 1300 	strd	r1, r3, [r0]
 800763c:	4b11      	ldr	r3, [pc, #68]	@ (8007684 <rand+0x70>)
 800763e:	6083      	str	r3, [r0, #8]
 8007640:	230b      	movs	r3, #11
 8007642:	8183      	strh	r3, [r0, #12]
 8007644:	2100      	movs	r1, #0
 8007646:	2001      	movs	r0, #1
 8007648:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800764c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800764e:	480e      	ldr	r0, [pc, #56]	@ (8007688 <rand+0x74>)
 8007650:	690b      	ldr	r3, [r1, #16]
 8007652:	694c      	ldr	r4, [r1, #20]
 8007654:	4a0d      	ldr	r2, [pc, #52]	@ (800768c <rand+0x78>)
 8007656:	4358      	muls	r0, r3
 8007658:	fb02 0004 	mla	r0, r2, r4, r0
 800765c:	fba3 3202 	umull	r3, r2, r3, r2
 8007660:	3301      	adds	r3, #1
 8007662:	eb40 0002 	adc.w	r0, r0, r2
 8007666:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800766a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800766e:	bd10      	pop	{r4, pc}
 8007670:	200000a0 	.word	0x200000a0
 8007674:	08008ff0 	.word	0x08008ff0
 8007678:	08009007 	.word	0x08009007
 800767c:	abcd330e 	.word	0xabcd330e
 8007680:	e66d1234 	.word	0xe66d1234
 8007684:	0005deec 	.word	0x0005deec
 8007688:	5851f42d 	.word	0x5851f42d
 800768c:	4c957f2d 	.word	0x4c957f2d

08007690 <std>:
 8007690:	2300      	movs	r3, #0
 8007692:	b510      	push	{r4, lr}
 8007694:	4604      	mov	r4, r0
 8007696:	e9c0 3300 	strd	r3, r3, [r0]
 800769a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800769e:	6083      	str	r3, [r0, #8]
 80076a0:	8181      	strh	r1, [r0, #12]
 80076a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80076a4:	81c2      	strh	r2, [r0, #14]
 80076a6:	6183      	str	r3, [r0, #24]
 80076a8:	4619      	mov	r1, r3
 80076aa:	2208      	movs	r2, #8
 80076ac:	305c      	adds	r0, #92	@ 0x5c
 80076ae:	f000 f916 	bl	80078de <memset>
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <std+0x58>)
 80076b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80076b6:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <std+0x5c>)
 80076b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076ba:	4b0d      	ldr	r3, [pc, #52]	@ (80076f0 <std+0x60>)
 80076bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x64>)
 80076c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <std+0x68>)
 80076c4:	6224      	str	r4, [r4, #32]
 80076c6:	429c      	cmp	r4, r3
 80076c8:	d006      	beq.n	80076d8 <std+0x48>
 80076ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076ce:	4294      	cmp	r4, r2
 80076d0:	d002      	beq.n	80076d8 <std+0x48>
 80076d2:	33d0      	adds	r3, #208	@ 0xd0
 80076d4:	429c      	cmp	r4, r3
 80076d6:	d105      	bne.n	80076e4 <std+0x54>
 80076d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e0:	f000 b976 	b.w	80079d0 <__retarget_lock_init_recursive>
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	bf00      	nop
 80076e8:	08007859 	.word	0x08007859
 80076ec:	0800787b 	.word	0x0800787b
 80076f0:	080078b3 	.word	0x080078b3
 80076f4:	080078d7 	.word	0x080078d7
 80076f8:	20004188 	.word	0x20004188

080076fc <stdio_exit_handler>:
 80076fc:	4a02      	ldr	r2, [pc, #8]	@ (8007708 <stdio_exit_handler+0xc>)
 80076fe:	4903      	ldr	r1, [pc, #12]	@ (800770c <stdio_exit_handler+0x10>)
 8007700:	4803      	ldr	r0, [pc, #12]	@ (8007710 <stdio_exit_handler+0x14>)
 8007702:	f000 b869 	b.w	80077d8 <_fwalk_sglue>
 8007706:	bf00      	nop
 8007708:	20000094 	.word	0x20000094
 800770c:	08008301 	.word	0x08008301
 8007710:	200000a4 	.word	0x200000a4

08007714 <cleanup_stdio>:
 8007714:	6841      	ldr	r1, [r0, #4]
 8007716:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <cleanup_stdio+0x34>)
 8007718:	4299      	cmp	r1, r3
 800771a:	b510      	push	{r4, lr}
 800771c:	4604      	mov	r4, r0
 800771e:	d001      	beq.n	8007724 <cleanup_stdio+0x10>
 8007720:	f000 fdee 	bl	8008300 <_fflush_r>
 8007724:	68a1      	ldr	r1, [r4, #8]
 8007726:	4b09      	ldr	r3, [pc, #36]	@ (800774c <cleanup_stdio+0x38>)
 8007728:	4299      	cmp	r1, r3
 800772a:	d002      	beq.n	8007732 <cleanup_stdio+0x1e>
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fde7 	bl	8008300 <_fflush_r>
 8007732:	68e1      	ldr	r1, [r4, #12]
 8007734:	4b06      	ldr	r3, [pc, #24]	@ (8007750 <cleanup_stdio+0x3c>)
 8007736:	4299      	cmp	r1, r3
 8007738:	d004      	beq.n	8007744 <cleanup_stdio+0x30>
 800773a:	4620      	mov	r0, r4
 800773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007740:	f000 bdde 	b.w	8008300 <_fflush_r>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	bf00      	nop
 8007748:	20004188 	.word	0x20004188
 800774c:	200041f0 	.word	0x200041f0
 8007750:	20004258 	.word	0x20004258

08007754 <global_stdio_init.part.0>:
 8007754:	b510      	push	{r4, lr}
 8007756:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <global_stdio_init.part.0+0x30>)
 8007758:	4c0b      	ldr	r4, [pc, #44]	@ (8007788 <global_stdio_init.part.0+0x34>)
 800775a:	4a0c      	ldr	r2, [pc, #48]	@ (800778c <global_stdio_init.part.0+0x38>)
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	4620      	mov	r0, r4
 8007760:	2200      	movs	r2, #0
 8007762:	2104      	movs	r1, #4
 8007764:	f7ff ff94 	bl	8007690 <std>
 8007768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800776c:	2201      	movs	r2, #1
 800776e:	2109      	movs	r1, #9
 8007770:	f7ff ff8e 	bl	8007690 <std>
 8007774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007778:	2202      	movs	r2, #2
 800777a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800777e:	2112      	movs	r1, #18
 8007780:	f7ff bf86 	b.w	8007690 <std>
 8007784:	200042c0 	.word	0x200042c0
 8007788:	20004188 	.word	0x20004188
 800778c:	080076fd 	.word	0x080076fd

08007790 <__sfp_lock_acquire>:
 8007790:	4801      	ldr	r0, [pc, #4]	@ (8007798 <__sfp_lock_acquire+0x8>)
 8007792:	f000 b91e 	b.w	80079d2 <__retarget_lock_acquire_recursive>
 8007796:	bf00      	nop
 8007798:	200042c9 	.word	0x200042c9

0800779c <__sfp_lock_release>:
 800779c:	4801      	ldr	r0, [pc, #4]	@ (80077a4 <__sfp_lock_release+0x8>)
 800779e:	f000 b919 	b.w	80079d4 <__retarget_lock_release_recursive>
 80077a2:	bf00      	nop
 80077a4:	200042c9 	.word	0x200042c9

080077a8 <__sinit>:
 80077a8:	b510      	push	{r4, lr}
 80077aa:	4604      	mov	r4, r0
 80077ac:	f7ff fff0 	bl	8007790 <__sfp_lock_acquire>
 80077b0:	6a23      	ldr	r3, [r4, #32]
 80077b2:	b11b      	cbz	r3, 80077bc <__sinit+0x14>
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f7ff bff0 	b.w	800779c <__sfp_lock_release>
 80077bc:	4b04      	ldr	r3, [pc, #16]	@ (80077d0 <__sinit+0x28>)
 80077be:	6223      	str	r3, [r4, #32]
 80077c0:	4b04      	ldr	r3, [pc, #16]	@ (80077d4 <__sinit+0x2c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1f5      	bne.n	80077b4 <__sinit+0xc>
 80077c8:	f7ff ffc4 	bl	8007754 <global_stdio_init.part.0>
 80077cc:	e7f2      	b.n	80077b4 <__sinit+0xc>
 80077ce:	bf00      	nop
 80077d0:	08007715 	.word	0x08007715
 80077d4:	200042c0 	.word	0x200042c0

080077d8 <_fwalk_sglue>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	4607      	mov	r7, r0
 80077de:	4688      	mov	r8, r1
 80077e0:	4614      	mov	r4, r2
 80077e2:	2600      	movs	r6, #0
 80077e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077e8:	f1b9 0901 	subs.w	r9, r9, #1
 80077ec:	d505      	bpl.n	80077fa <_fwalk_sglue+0x22>
 80077ee:	6824      	ldr	r4, [r4, #0]
 80077f0:	2c00      	cmp	r4, #0
 80077f2:	d1f7      	bne.n	80077e4 <_fwalk_sglue+0xc>
 80077f4:	4630      	mov	r0, r6
 80077f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fa:	89ab      	ldrh	r3, [r5, #12]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d907      	bls.n	8007810 <_fwalk_sglue+0x38>
 8007800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007804:	3301      	adds	r3, #1
 8007806:	d003      	beq.n	8007810 <_fwalk_sglue+0x38>
 8007808:	4629      	mov	r1, r5
 800780a:	4638      	mov	r0, r7
 800780c:	47c0      	blx	r8
 800780e:	4306      	orrs	r6, r0
 8007810:	3568      	adds	r5, #104	@ 0x68
 8007812:	e7e9      	b.n	80077e8 <_fwalk_sglue+0x10>

08007814 <siprintf>:
 8007814:	b40e      	push	{r1, r2, r3}
 8007816:	b510      	push	{r4, lr}
 8007818:	b09d      	sub	sp, #116	@ 0x74
 800781a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800781c:	9002      	str	r0, [sp, #8]
 800781e:	9006      	str	r0, [sp, #24]
 8007820:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007824:	480a      	ldr	r0, [pc, #40]	@ (8007850 <siprintf+0x3c>)
 8007826:	9107      	str	r1, [sp, #28]
 8007828:	9104      	str	r1, [sp, #16]
 800782a:	490a      	ldr	r1, [pc, #40]	@ (8007854 <siprintf+0x40>)
 800782c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007830:	9105      	str	r1, [sp, #20]
 8007832:	2400      	movs	r4, #0
 8007834:	a902      	add	r1, sp, #8
 8007836:	6800      	ldr	r0, [r0, #0]
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800783c:	f000 fa54 	bl	8007ce8 <_svfiprintf_r>
 8007840:	9b02      	ldr	r3, [sp, #8]
 8007842:	701c      	strb	r4, [r3, #0]
 8007844:	b01d      	add	sp, #116	@ 0x74
 8007846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784a:	b003      	add	sp, #12
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	200000a0 	.word	0x200000a0
 8007854:	ffff0208 	.word	0xffff0208

08007858 <__sread>:
 8007858:	b510      	push	{r4, lr}
 800785a:	460c      	mov	r4, r1
 800785c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007860:	f000 f868 	bl	8007934 <_read_r>
 8007864:	2800      	cmp	r0, #0
 8007866:	bfab      	itete	ge
 8007868:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800786a:	89a3      	ldrhlt	r3, [r4, #12]
 800786c:	181b      	addge	r3, r3, r0
 800786e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007872:	bfac      	ite	ge
 8007874:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007876:	81a3      	strhlt	r3, [r4, #12]
 8007878:	bd10      	pop	{r4, pc}

0800787a <__swrite>:
 800787a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	461f      	mov	r7, r3
 8007880:	898b      	ldrh	r3, [r1, #12]
 8007882:	05db      	lsls	r3, r3, #23
 8007884:	4605      	mov	r5, r0
 8007886:	460c      	mov	r4, r1
 8007888:	4616      	mov	r6, r2
 800788a:	d505      	bpl.n	8007898 <__swrite+0x1e>
 800788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007890:	2302      	movs	r3, #2
 8007892:	2200      	movs	r2, #0
 8007894:	f000 f83c 	bl	8007910 <_lseek_r>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	4632      	mov	r2, r6
 80078a6:	463b      	mov	r3, r7
 80078a8:	4628      	mov	r0, r5
 80078aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ae:	f000 b853 	b.w	8007958 <_write_r>

080078b2 <__sseek>:
 80078b2:	b510      	push	{r4, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 f829 	bl	8007910 <_lseek_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	bf15      	itete	ne
 80078c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078ce:	81a3      	strheq	r3, [r4, #12]
 80078d0:	bf18      	it	ne
 80078d2:	81a3      	strhne	r3, [r4, #12]
 80078d4:	bd10      	pop	{r4, pc}

080078d6 <__sclose>:
 80078d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078da:	f000 b809 	b.w	80078f0 <_close_r>

080078de <memset>:
 80078de:	4402      	add	r2, r0
 80078e0:	4603      	mov	r3, r0
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d100      	bne.n	80078e8 <memset+0xa>
 80078e6:	4770      	bx	lr
 80078e8:	f803 1b01 	strb.w	r1, [r3], #1
 80078ec:	e7f9      	b.n	80078e2 <memset+0x4>
	...

080078f0 <_close_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d06      	ldr	r5, [pc, #24]	@ (800790c <_close_r+0x1c>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	f7fa fcb1 	bl	8002262 <_close>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_close_r+0x1a>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_close_r+0x1a>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	200042c4 	.word	0x200042c4

08007910 <_lseek_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4d07      	ldr	r5, [pc, #28]	@ (8007930 <_lseek_r+0x20>)
 8007914:	4604      	mov	r4, r0
 8007916:	4608      	mov	r0, r1
 8007918:	4611      	mov	r1, r2
 800791a:	2200      	movs	r2, #0
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f7fa fcc6 	bl	80022b0 <_lseek>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_lseek_r+0x1e>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_lseek_r+0x1e>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	200042c4 	.word	0x200042c4

08007934 <_read_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4d07      	ldr	r5, [pc, #28]	@ (8007954 <_read_r+0x20>)
 8007938:	4604      	mov	r4, r0
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	2200      	movs	r2, #0
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f7fa fc54 	bl	80021f0 <_read>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_read_r+0x1e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_read_r+0x1e>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	200042c4 	.word	0x200042c4

08007958 <_write_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	@ (8007978 <_write_r+0x20>)
 800795c:	4604      	mov	r4, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	2200      	movs	r2, #0
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f7fa fc5f 	bl	800222a <_write>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_write_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_write_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	200042c4 	.word	0x200042c4

0800797c <__errno>:
 800797c:	4b01      	ldr	r3, [pc, #4]	@ (8007984 <__errno+0x8>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	200000a0 	.word	0x200000a0

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	4d0d      	ldr	r5, [pc, #52]	@ (80079c0 <__libc_init_array+0x38>)
 800798c:	4c0d      	ldr	r4, [pc, #52]	@ (80079c4 <__libc_init_array+0x3c>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	2600      	movs	r6, #0
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	4d0b      	ldr	r5, [pc, #44]	@ (80079c8 <__libc_init_array+0x40>)
 800799a:	4c0c      	ldr	r4, [pc, #48]	@ (80079cc <__libc_init_array+0x44>)
 800799c:	f000 ffee 	bl	800897c <_init>
 80079a0:	1b64      	subs	r4, r4, r5
 80079a2:	10a4      	asrs	r4, r4, #2
 80079a4:	2600      	movs	r6, #0
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	080090d8 	.word	0x080090d8
 80079c4:	080090d8 	.word	0x080090d8
 80079c8:	080090d8 	.word	0x080090d8
 80079cc:	080090dc 	.word	0x080090dc

080079d0 <__retarget_lock_init_recursive>:
 80079d0:	4770      	bx	lr

080079d2 <__retarget_lock_acquire_recursive>:
 80079d2:	4770      	bx	lr

080079d4 <__retarget_lock_release_recursive>:
 80079d4:	4770      	bx	lr

080079d6 <memcpy>:
 80079d6:	440a      	add	r2, r1
 80079d8:	4291      	cmp	r1, r2
 80079da:	f100 33ff 	add.w	r3, r0, #4294967295
 80079de:	d100      	bne.n	80079e2 <memcpy+0xc>
 80079e0:	4770      	bx	lr
 80079e2:	b510      	push	{r4, lr}
 80079e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ec:	4291      	cmp	r1, r2
 80079ee:	d1f9      	bne.n	80079e4 <memcpy+0xe>
 80079f0:	bd10      	pop	{r4, pc}
	...

080079f4 <__assert_func>:
 80079f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079f6:	4614      	mov	r4, r2
 80079f8:	461a      	mov	r2, r3
 80079fa:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <__assert_func+0x2c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4605      	mov	r5, r0
 8007a00:	68d8      	ldr	r0, [r3, #12]
 8007a02:	b14c      	cbz	r4, 8007a18 <__assert_func+0x24>
 8007a04:	4b07      	ldr	r3, [pc, #28]	@ (8007a24 <__assert_func+0x30>)
 8007a06:	9100      	str	r1, [sp, #0]
 8007a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a0c:	4906      	ldr	r1, [pc, #24]	@ (8007a28 <__assert_func+0x34>)
 8007a0e:	462b      	mov	r3, r5
 8007a10:	f000 fc9e 	bl	8008350 <fiprintf>
 8007a14:	f000 fcd8 	bl	80083c8 <abort>
 8007a18:	4b04      	ldr	r3, [pc, #16]	@ (8007a2c <__assert_func+0x38>)
 8007a1a:	461c      	mov	r4, r3
 8007a1c:	e7f3      	b.n	8007a06 <__assert_func+0x12>
 8007a1e:	bf00      	nop
 8007a20:	200000a0 	.word	0x200000a0
 8007a24:	0800905f 	.word	0x0800905f
 8007a28:	0800906c 	.word	0x0800906c
 8007a2c:	0800909a 	.word	0x0800909a

08007a30 <_free_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4605      	mov	r5, r0
 8007a34:	2900      	cmp	r1, #0
 8007a36:	d041      	beq.n	8007abc <_free_r+0x8c>
 8007a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a3c:	1f0c      	subs	r4, r1, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bfb8      	it	lt
 8007a42:	18e4      	addlt	r4, r4, r3
 8007a44:	f000 f8e8 	bl	8007c18 <__malloc_lock>
 8007a48:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac0 <_free_r+0x90>)
 8007a4a:	6813      	ldr	r3, [r2, #0]
 8007a4c:	b933      	cbnz	r3, 8007a5c <_free_r+0x2c>
 8007a4e:	6063      	str	r3, [r4, #4]
 8007a50:	6014      	str	r4, [r2, #0]
 8007a52:	4628      	mov	r0, r5
 8007a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a58:	f000 b8e4 	b.w	8007c24 <__malloc_unlock>
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	d908      	bls.n	8007a72 <_free_r+0x42>
 8007a60:	6820      	ldr	r0, [r4, #0]
 8007a62:	1821      	adds	r1, r4, r0
 8007a64:	428b      	cmp	r3, r1
 8007a66:	bf01      	itttt	eq
 8007a68:	6819      	ldreq	r1, [r3, #0]
 8007a6a:	685b      	ldreq	r3, [r3, #4]
 8007a6c:	1809      	addeq	r1, r1, r0
 8007a6e:	6021      	streq	r1, [r4, #0]
 8007a70:	e7ed      	b.n	8007a4e <_free_r+0x1e>
 8007a72:	461a      	mov	r2, r3
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b10b      	cbz	r3, 8007a7c <_free_r+0x4c>
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d9fa      	bls.n	8007a72 <_free_r+0x42>
 8007a7c:	6811      	ldr	r1, [r2, #0]
 8007a7e:	1850      	adds	r0, r2, r1
 8007a80:	42a0      	cmp	r0, r4
 8007a82:	d10b      	bne.n	8007a9c <_free_r+0x6c>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	4401      	add	r1, r0
 8007a88:	1850      	adds	r0, r2, r1
 8007a8a:	4283      	cmp	r3, r0
 8007a8c:	6011      	str	r1, [r2, #0]
 8007a8e:	d1e0      	bne.n	8007a52 <_free_r+0x22>
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	6053      	str	r3, [r2, #4]
 8007a96:	4408      	add	r0, r1
 8007a98:	6010      	str	r0, [r2, #0]
 8007a9a:	e7da      	b.n	8007a52 <_free_r+0x22>
 8007a9c:	d902      	bls.n	8007aa4 <_free_r+0x74>
 8007a9e:	230c      	movs	r3, #12
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	e7d6      	b.n	8007a52 <_free_r+0x22>
 8007aa4:	6820      	ldr	r0, [r4, #0]
 8007aa6:	1821      	adds	r1, r4, r0
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	bf04      	itt	eq
 8007aac:	6819      	ldreq	r1, [r3, #0]
 8007aae:	685b      	ldreq	r3, [r3, #4]
 8007ab0:	6063      	str	r3, [r4, #4]
 8007ab2:	bf04      	itt	eq
 8007ab4:	1809      	addeq	r1, r1, r0
 8007ab6:	6021      	streq	r1, [r4, #0]
 8007ab8:	6054      	str	r4, [r2, #4]
 8007aba:	e7ca      	b.n	8007a52 <_free_r+0x22>
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
 8007abe:	bf00      	nop
 8007ac0:	200042d0 	.word	0x200042d0

08007ac4 <malloc>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	@ (8007ad0 <malloc+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f000 b825 	b.w	8007b18 <_malloc_r>
 8007ace:	bf00      	nop
 8007ad0:	200000a0 	.word	0x200000a0

08007ad4 <sbrk_aligned>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8007b14 <sbrk_aligned+0x40>)
 8007ad8:	460c      	mov	r4, r1
 8007ada:	6831      	ldr	r1, [r6, #0]
 8007adc:	4605      	mov	r5, r0
 8007ade:	b911      	cbnz	r1, 8007ae6 <sbrk_aligned+0x12>
 8007ae0:	f000 fc62 	bl	80083a8 <_sbrk_r>
 8007ae4:	6030      	str	r0, [r6, #0]
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f000 fc5d 	bl	80083a8 <_sbrk_r>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d103      	bne.n	8007afa <sbrk_aligned+0x26>
 8007af2:	f04f 34ff 	mov.w	r4, #4294967295
 8007af6:	4620      	mov	r0, r4
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	1cc4      	adds	r4, r0, #3
 8007afc:	f024 0403 	bic.w	r4, r4, #3
 8007b00:	42a0      	cmp	r0, r4
 8007b02:	d0f8      	beq.n	8007af6 <sbrk_aligned+0x22>
 8007b04:	1a21      	subs	r1, r4, r0
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 fc4e 	bl	80083a8 <_sbrk_r>
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d1f2      	bne.n	8007af6 <sbrk_aligned+0x22>
 8007b10:	e7ef      	b.n	8007af2 <sbrk_aligned+0x1e>
 8007b12:	bf00      	nop
 8007b14:	200042cc 	.word	0x200042cc

08007b18 <_malloc_r>:
 8007b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b1c:	1ccd      	adds	r5, r1, #3
 8007b1e:	f025 0503 	bic.w	r5, r5, #3
 8007b22:	3508      	adds	r5, #8
 8007b24:	2d0c      	cmp	r5, #12
 8007b26:	bf38      	it	cc
 8007b28:	250c      	movcc	r5, #12
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	db01      	blt.n	8007b34 <_malloc_r+0x1c>
 8007b30:	42a9      	cmp	r1, r5
 8007b32:	d904      	bls.n	8007b3e <_malloc_r+0x26>
 8007b34:	230c      	movs	r3, #12
 8007b36:	6033      	str	r3, [r6, #0]
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c14 <_malloc_r+0xfc>
 8007b42:	f000 f869 	bl	8007c18 <__malloc_lock>
 8007b46:	f8d8 3000 	ldr.w	r3, [r8]
 8007b4a:	461c      	mov	r4, r3
 8007b4c:	bb44      	cbnz	r4, 8007ba0 <_malloc_r+0x88>
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff ffbf 	bl	8007ad4 <sbrk_aligned>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	4604      	mov	r4, r0
 8007b5a:	d158      	bne.n	8007c0e <_malloc_r+0xf6>
 8007b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007b60:	4627      	mov	r7, r4
 8007b62:	2f00      	cmp	r7, #0
 8007b64:	d143      	bne.n	8007bee <_malloc_r+0xd6>
 8007b66:	2c00      	cmp	r4, #0
 8007b68:	d04b      	beq.n	8007c02 <_malloc_r+0xea>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	4630      	mov	r0, r6
 8007b70:	eb04 0903 	add.w	r9, r4, r3
 8007b74:	f000 fc18 	bl	80083a8 <_sbrk_r>
 8007b78:	4581      	cmp	r9, r0
 8007b7a:	d142      	bne.n	8007c02 <_malloc_r+0xea>
 8007b7c:	6821      	ldr	r1, [r4, #0]
 8007b7e:	1a6d      	subs	r5, r5, r1
 8007b80:	4629      	mov	r1, r5
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7ff ffa6 	bl	8007ad4 <sbrk_aligned>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d03a      	beq.n	8007c02 <_malloc_r+0xea>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	442b      	add	r3, r5
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	f8d8 3000 	ldr.w	r3, [r8]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	bb62      	cbnz	r2, 8007bf4 <_malloc_r+0xdc>
 8007b9a:	f8c8 7000 	str.w	r7, [r8]
 8007b9e:	e00f      	b.n	8007bc0 <_malloc_r+0xa8>
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	1b52      	subs	r2, r2, r5
 8007ba4:	d420      	bmi.n	8007be8 <_malloc_r+0xd0>
 8007ba6:	2a0b      	cmp	r2, #11
 8007ba8:	d917      	bls.n	8007bda <_malloc_r+0xc2>
 8007baa:	1961      	adds	r1, r4, r5
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	6025      	str	r5, [r4, #0]
 8007bb0:	bf18      	it	ne
 8007bb2:	6059      	strne	r1, [r3, #4]
 8007bb4:	6863      	ldr	r3, [r4, #4]
 8007bb6:	bf08      	it	eq
 8007bb8:	f8c8 1000 	streq.w	r1, [r8]
 8007bbc:	5162      	str	r2, [r4, r5]
 8007bbe:	604b      	str	r3, [r1, #4]
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f000 f82f 	bl	8007c24 <__malloc_unlock>
 8007bc6:	f104 000b 	add.w	r0, r4, #11
 8007bca:	1d23      	adds	r3, r4, #4
 8007bcc:	f020 0007 	bic.w	r0, r0, #7
 8007bd0:	1ac2      	subs	r2, r0, r3
 8007bd2:	bf1c      	itt	ne
 8007bd4:	1a1b      	subne	r3, r3, r0
 8007bd6:	50a3      	strne	r3, [r4, r2]
 8007bd8:	e7af      	b.n	8007b3a <_malloc_r+0x22>
 8007bda:	6862      	ldr	r2, [r4, #4]
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	bf0c      	ite	eq
 8007be0:	f8c8 2000 	streq.w	r2, [r8]
 8007be4:	605a      	strne	r2, [r3, #4]
 8007be6:	e7eb      	b.n	8007bc0 <_malloc_r+0xa8>
 8007be8:	4623      	mov	r3, r4
 8007bea:	6864      	ldr	r4, [r4, #4]
 8007bec:	e7ae      	b.n	8007b4c <_malloc_r+0x34>
 8007bee:	463c      	mov	r4, r7
 8007bf0:	687f      	ldr	r7, [r7, #4]
 8007bf2:	e7b6      	b.n	8007b62 <_malloc_r+0x4a>
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	d1fb      	bne.n	8007bf4 <_malloc_r+0xdc>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	6053      	str	r3, [r2, #4]
 8007c00:	e7de      	b.n	8007bc0 <_malloc_r+0xa8>
 8007c02:	230c      	movs	r3, #12
 8007c04:	6033      	str	r3, [r6, #0]
 8007c06:	4630      	mov	r0, r6
 8007c08:	f000 f80c 	bl	8007c24 <__malloc_unlock>
 8007c0c:	e794      	b.n	8007b38 <_malloc_r+0x20>
 8007c0e:	6005      	str	r5, [r0, #0]
 8007c10:	e7d6      	b.n	8007bc0 <_malloc_r+0xa8>
 8007c12:	bf00      	nop
 8007c14:	200042d0 	.word	0x200042d0

08007c18 <__malloc_lock>:
 8007c18:	4801      	ldr	r0, [pc, #4]	@ (8007c20 <__malloc_lock+0x8>)
 8007c1a:	f7ff beda 	b.w	80079d2 <__retarget_lock_acquire_recursive>
 8007c1e:	bf00      	nop
 8007c20:	200042c8 	.word	0x200042c8

08007c24 <__malloc_unlock>:
 8007c24:	4801      	ldr	r0, [pc, #4]	@ (8007c2c <__malloc_unlock+0x8>)
 8007c26:	f7ff bed5 	b.w	80079d4 <__retarget_lock_release_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	200042c8 	.word	0x200042c8

08007c30 <__ssputs_r>:
 8007c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c34:	688e      	ldr	r6, [r1, #8]
 8007c36:	461f      	mov	r7, r3
 8007c38:	42be      	cmp	r6, r7
 8007c3a:	680b      	ldr	r3, [r1, #0]
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	4690      	mov	r8, r2
 8007c42:	d82d      	bhi.n	8007ca0 <__ssputs_r+0x70>
 8007c44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c4c:	d026      	beq.n	8007c9c <__ssputs_r+0x6c>
 8007c4e:	6965      	ldr	r5, [r4, #20]
 8007c50:	6909      	ldr	r1, [r1, #16]
 8007c52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c56:	eba3 0901 	sub.w	r9, r3, r1
 8007c5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c5e:	1c7b      	adds	r3, r7, #1
 8007c60:	444b      	add	r3, r9
 8007c62:	106d      	asrs	r5, r5, #1
 8007c64:	429d      	cmp	r5, r3
 8007c66:	bf38      	it	cc
 8007c68:	461d      	movcc	r5, r3
 8007c6a:	0553      	lsls	r3, r2, #21
 8007c6c:	d527      	bpl.n	8007cbe <__ssputs_r+0x8e>
 8007c6e:	4629      	mov	r1, r5
 8007c70:	f7ff ff52 	bl	8007b18 <_malloc_r>
 8007c74:	4606      	mov	r6, r0
 8007c76:	b360      	cbz	r0, 8007cd2 <__ssputs_r+0xa2>
 8007c78:	6921      	ldr	r1, [r4, #16]
 8007c7a:	464a      	mov	r2, r9
 8007c7c:	f7ff feab 	bl	80079d6 <memcpy>
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c8a:	81a3      	strh	r3, [r4, #12]
 8007c8c:	6126      	str	r6, [r4, #16]
 8007c8e:	6165      	str	r5, [r4, #20]
 8007c90:	444e      	add	r6, r9
 8007c92:	eba5 0509 	sub.w	r5, r5, r9
 8007c96:	6026      	str	r6, [r4, #0]
 8007c98:	60a5      	str	r5, [r4, #8]
 8007c9a:	463e      	mov	r6, r7
 8007c9c:	42be      	cmp	r6, r7
 8007c9e:	d900      	bls.n	8007ca2 <__ssputs_r+0x72>
 8007ca0:	463e      	mov	r6, r7
 8007ca2:	6820      	ldr	r0, [r4, #0]
 8007ca4:	4632      	mov	r2, r6
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	f000 fb64 	bl	8008374 <memmove>
 8007cac:	68a3      	ldr	r3, [r4, #8]
 8007cae:	1b9b      	subs	r3, r3, r6
 8007cb0:	60a3      	str	r3, [r4, #8]
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	4433      	add	r3, r6
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	2000      	movs	r0, #0
 8007cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	f000 fb89 	bl	80083d6 <_realloc_r>
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d1e0      	bne.n	8007c8c <__ssputs_r+0x5c>
 8007cca:	6921      	ldr	r1, [r4, #16]
 8007ccc:	4650      	mov	r0, sl
 8007cce:	f7ff feaf 	bl	8007a30 <_free_r>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	f8ca 3000 	str.w	r3, [sl]
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cde:	81a3      	strh	r3, [r4, #12]
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	e7e9      	b.n	8007cba <__ssputs_r+0x8a>
	...

08007ce8 <_svfiprintf_r>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	4698      	mov	r8, r3
 8007cee:	898b      	ldrh	r3, [r1, #12]
 8007cf0:	061b      	lsls	r3, r3, #24
 8007cf2:	b09d      	sub	sp, #116	@ 0x74
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	460d      	mov	r5, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	d510      	bpl.n	8007d1e <_svfiprintf_r+0x36>
 8007cfc:	690b      	ldr	r3, [r1, #16]
 8007cfe:	b973      	cbnz	r3, 8007d1e <_svfiprintf_r+0x36>
 8007d00:	2140      	movs	r1, #64	@ 0x40
 8007d02:	f7ff ff09 	bl	8007b18 <_malloc_r>
 8007d06:	6028      	str	r0, [r5, #0]
 8007d08:	6128      	str	r0, [r5, #16]
 8007d0a:	b930      	cbnz	r0, 8007d1a <_svfiprintf_r+0x32>
 8007d0c:	230c      	movs	r3, #12
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	b01d      	add	sp, #116	@ 0x74
 8007d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1a:	2340      	movs	r3, #64	@ 0x40
 8007d1c:	616b      	str	r3, [r5, #20]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d22:	2320      	movs	r3, #32
 8007d24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d2c:	2330      	movs	r3, #48	@ 0x30
 8007d2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ecc <_svfiprintf_r+0x1e4>
 8007d32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d36:	f04f 0901 	mov.w	r9, #1
 8007d3a:	4623      	mov	r3, r4
 8007d3c:	469a      	mov	sl, r3
 8007d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d42:	b10a      	cbz	r2, 8007d48 <_svfiprintf_r+0x60>
 8007d44:	2a25      	cmp	r2, #37	@ 0x25
 8007d46:	d1f9      	bne.n	8007d3c <_svfiprintf_r+0x54>
 8007d48:	ebba 0b04 	subs.w	fp, sl, r4
 8007d4c:	d00b      	beq.n	8007d66 <_svfiprintf_r+0x7e>
 8007d4e:	465b      	mov	r3, fp
 8007d50:	4622      	mov	r2, r4
 8007d52:	4629      	mov	r1, r5
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7ff ff6b 	bl	8007c30 <__ssputs_r>
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f000 80a7 	beq.w	8007eae <_svfiprintf_r+0x1c6>
 8007d60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d62:	445a      	add	r2, fp
 8007d64:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d66:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 809f 	beq.w	8007eae <_svfiprintf_r+0x1c6>
 8007d70:	2300      	movs	r3, #0
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7a:	f10a 0a01 	add.w	sl, sl, #1
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	9307      	str	r3, [sp, #28]
 8007d82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d86:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d88:	4654      	mov	r4, sl
 8007d8a:	2205      	movs	r2, #5
 8007d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d90:	484e      	ldr	r0, [pc, #312]	@ (8007ecc <_svfiprintf_r+0x1e4>)
 8007d92:	f7f8 fa1d 	bl	80001d0 <memchr>
 8007d96:	9a04      	ldr	r2, [sp, #16]
 8007d98:	b9d8      	cbnz	r0, 8007dd2 <_svfiprintf_r+0xea>
 8007d9a:	06d0      	lsls	r0, r2, #27
 8007d9c:	bf44      	itt	mi
 8007d9e:	2320      	movmi	r3, #32
 8007da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007da4:	0711      	lsls	r1, r2, #28
 8007da6:	bf44      	itt	mi
 8007da8:	232b      	movmi	r3, #43	@ 0x2b
 8007daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dae:	f89a 3000 	ldrb.w	r3, [sl]
 8007db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007db4:	d015      	beq.n	8007de2 <_svfiprintf_r+0xfa>
 8007db6:	9a07      	ldr	r2, [sp, #28]
 8007db8:	4654      	mov	r4, sl
 8007dba:	2000      	movs	r0, #0
 8007dbc:	f04f 0c0a 	mov.w	ip, #10
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc6:	3b30      	subs	r3, #48	@ 0x30
 8007dc8:	2b09      	cmp	r3, #9
 8007dca:	d94b      	bls.n	8007e64 <_svfiprintf_r+0x17c>
 8007dcc:	b1b0      	cbz	r0, 8007dfc <_svfiprintf_r+0x114>
 8007dce:	9207      	str	r2, [sp, #28]
 8007dd0:	e014      	b.n	8007dfc <_svfiprintf_r+0x114>
 8007dd2:	eba0 0308 	sub.w	r3, r0, r8
 8007dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	9304      	str	r3, [sp, #16]
 8007dde:	46a2      	mov	sl, r4
 8007de0:	e7d2      	b.n	8007d88 <_svfiprintf_r+0xa0>
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	1d19      	adds	r1, r3, #4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	9103      	str	r1, [sp, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfbb      	ittet	lt
 8007dee:	425b      	neglt	r3, r3
 8007df0:	f042 0202 	orrlt.w	r2, r2, #2
 8007df4:	9307      	strge	r3, [sp, #28]
 8007df6:	9307      	strlt	r3, [sp, #28]
 8007df8:	bfb8      	it	lt
 8007dfa:	9204      	strlt	r2, [sp, #16]
 8007dfc:	7823      	ldrb	r3, [r4, #0]
 8007dfe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e00:	d10a      	bne.n	8007e18 <_svfiprintf_r+0x130>
 8007e02:	7863      	ldrb	r3, [r4, #1]
 8007e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e06:	d132      	bne.n	8007e6e <_svfiprintf_r+0x186>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	1d1a      	adds	r2, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	9203      	str	r2, [sp, #12]
 8007e10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e14:	3402      	adds	r4, #2
 8007e16:	9305      	str	r3, [sp, #20]
 8007e18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007edc <_svfiprintf_r+0x1f4>
 8007e1c:	7821      	ldrb	r1, [r4, #0]
 8007e1e:	2203      	movs	r2, #3
 8007e20:	4650      	mov	r0, sl
 8007e22:	f7f8 f9d5 	bl	80001d0 <memchr>
 8007e26:	b138      	cbz	r0, 8007e38 <_svfiprintf_r+0x150>
 8007e28:	9b04      	ldr	r3, [sp, #16]
 8007e2a:	eba0 000a 	sub.w	r0, r0, sl
 8007e2e:	2240      	movs	r2, #64	@ 0x40
 8007e30:	4082      	lsls	r2, r0
 8007e32:	4313      	orrs	r3, r2
 8007e34:	3401      	adds	r4, #1
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3c:	4824      	ldr	r0, [pc, #144]	@ (8007ed0 <_svfiprintf_r+0x1e8>)
 8007e3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e42:	2206      	movs	r2, #6
 8007e44:	f7f8 f9c4 	bl	80001d0 <memchr>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d036      	beq.n	8007eba <_svfiprintf_r+0x1d2>
 8007e4c:	4b21      	ldr	r3, [pc, #132]	@ (8007ed4 <_svfiprintf_r+0x1ec>)
 8007e4e:	bb1b      	cbnz	r3, 8007e98 <_svfiprintf_r+0x1b0>
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	3307      	adds	r3, #7
 8007e54:	f023 0307 	bic.w	r3, r3, #7
 8007e58:	3308      	adds	r3, #8
 8007e5a:	9303      	str	r3, [sp, #12]
 8007e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5e:	4433      	add	r3, r6
 8007e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e62:	e76a      	b.n	8007d3a <_svfiprintf_r+0x52>
 8007e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e68:	460c      	mov	r4, r1
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	e7a8      	b.n	8007dc0 <_svfiprintf_r+0xd8>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	3401      	adds	r4, #1
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	4619      	mov	r1, r3
 8007e76:	f04f 0c0a 	mov.w	ip, #10
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e80:	3a30      	subs	r2, #48	@ 0x30
 8007e82:	2a09      	cmp	r2, #9
 8007e84:	d903      	bls.n	8007e8e <_svfiprintf_r+0x1a6>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0c6      	beq.n	8007e18 <_svfiprintf_r+0x130>
 8007e8a:	9105      	str	r1, [sp, #20]
 8007e8c:	e7c4      	b.n	8007e18 <_svfiprintf_r+0x130>
 8007e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e92:	4604      	mov	r4, r0
 8007e94:	2301      	movs	r3, #1
 8007e96:	e7f0      	b.n	8007e7a <_svfiprintf_r+0x192>
 8007e98:	ab03      	add	r3, sp, #12
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed8 <_svfiprintf_r+0x1f0>)
 8007ea0:	a904      	add	r1, sp, #16
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	f3af 8000 	nop.w
 8007ea8:	1c42      	adds	r2, r0, #1
 8007eaa:	4606      	mov	r6, r0
 8007eac:	d1d6      	bne.n	8007e5c <_svfiprintf_r+0x174>
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	065b      	lsls	r3, r3, #25
 8007eb2:	f53f af2d 	bmi.w	8007d10 <_svfiprintf_r+0x28>
 8007eb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007eb8:	e72c      	b.n	8007d14 <_svfiprintf_r+0x2c>
 8007eba:	ab03      	add	r3, sp, #12
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	462a      	mov	r2, r5
 8007ec0:	4b05      	ldr	r3, [pc, #20]	@ (8007ed8 <_svfiprintf_r+0x1f0>)
 8007ec2:	a904      	add	r1, sp, #16
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	f000 f879 	bl	8007fbc <_printf_i>
 8007eca:	e7ed      	b.n	8007ea8 <_svfiprintf_r+0x1c0>
 8007ecc:	0800909b 	.word	0x0800909b
 8007ed0:	080090a5 	.word	0x080090a5
 8007ed4:	00000000 	.word	0x00000000
 8007ed8:	08007c31 	.word	0x08007c31
 8007edc:	080090a1 	.word	0x080090a1

08007ee0 <_printf_common>:
 8007ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	4616      	mov	r6, r2
 8007ee6:	4698      	mov	r8, r3
 8007ee8:	688a      	ldr	r2, [r1, #8]
 8007eea:	690b      	ldr	r3, [r1, #16]
 8007eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	bfb8      	it	lt
 8007ef4:	4613      	movlt	r3, r2
 8007ef6:	6033      	str	r3, [r6, #0]
 8007ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007efc:	4607      	mov	r7, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	b10a      	cbz	r2, 8007f06 <_printf_common+0x26>
 8007f02:	3301      	adds	r3, #1
 8007f04:	6033      	str	r3, [r6, #0]
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	0699      	lsls	r1, r3, #26
 8007f0a:	bf42      	ittt	mi
 8007f0c:	6833      	ldrmi	r3, [r6, #0]
 8007f0e:	3302      	addmi	r3, #2
 8007f10:	6033      	strmi	r3, [r6, #0]
 8007f12:	6825      	ldr	r5, [r4, #0]
 8007f14:	f015 0506 	ands.w	r5, r5, #6
 8007f18:	d106      	bne.n	8007f28 <_printf_common+0x48>
 8007f1a:	f104 0a19 	add.w	sl, r4, #25
 8007f1e:	68e3      	ldr	r3, [r4, #12]
 8007f20:	6832      	ldr	r2, [r6, #0]
 8007f22:	1a9b      	subs	r3, r3, r2
 8007f24:	42ab      	cmp	r3, r5
 8007f26:	dc26      	bgt.n	8007f76 <_printf_common+0x96>
 8007f28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f2c:	6822      	ldr	r2, [r4, #0]
 8007f2e:	3b00      	subs	r3, #0
 8007f30:	bf18      	it	ne
 8007f32:	2301      	movne	r3, #1
 8007f34:	0692      	lsls	r2, r2, #26
 8007f36:	d42b      	bmi.n	8007f90 <_printf_common+0xb0>
 8007f38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	4638      	mov	r0, r7
 8007f40:	47c8      	blx	r9
 8007f42:	3001      	adds	r0, #1
 8007f44:	d01e      	beq.n	8007f84 <_printf_common+0xa4>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	6922      	ldr	r2, [r4, #16]
 8007f4a:	f003 0306 	and.w	r3, r3, #6
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	bf02      	ittt	eq
 8007f52:	68e5      	ldreq	r5, [r4, #12]
 8007f54:	6833      	ldreq	r3, [r6, #0]
 8007f56:	1aed      	subeq	r5, r5, r3
 8007f58:	68a3      	ldr	r3, [r4, #8]
 8007f5a:	bf0c      	ite	eq
 8007f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f60:	2500      	movne	r5, #0
 8007f62:	4293      	cmp	r3, r2
 8007f64:	bfc4      	itt	gt
 8007f66:	1a9b      	subgt	r3, r3, r2
 8007f68:	18ed      	addgt	r5, r5, r3
 8007f6a:	2600      	movs	r6, #0
 8007f6c:	341a      	adds	r4, #26
 8007f6e:	42b5      	cmp	r5, r6
 8007f70:	d11a      	bne.n	8007fa8 <_printf_common+0xc8>
 8007f72:	2000      	movs	r0, #0
 8007f74:	e008      	b.n	8007f88 <_printf_common+0xa8>
 8007f76:	2301      	movs	r3, #1
 8007f78:	4652      	mov	r2, sl
 8007f7a:	4641      	mov	r1, r8
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	47c8      	blx	r9
 8007f80:	3001      	adds	r0, #1
 8007f82:	d103      	bne.n	8007f8c <_printf_common+0xac>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8c:	3501      	adds	r5, #1
 8007f8e:	e7c6      	b.n	8007f1e <_printf_common+0x3e>
 8007f90:	18e1      	adds	r1, r4, r3
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	2030      	movs	r0, #48	@ 0x30
 8007f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f9a:	4422      	add	r2, r4
 8007f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fa4:	3302      	adds	r3, #2
 8007fa6:	e7c7      	b.n	8007f38 <_printf_common+0x58>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4622      	mov	r2, r4
 8007fac:	4641      	mov	r1, r8
 8007fae:	4638      	mov	r0, r7
 8007fb0:	47c8      	blx	r9
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d0e6      	beq.n	8007f84 <_printf_common+0xa4>
 8007fb6:	3601      	adds	r6, #1
 8007fb8:	e7d9      	b.n	8007f6e <_printf_common+0x8e>
	...

08007fbc <_printf_i>:
 8007fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc0:	7e0f      	ldrb	r7, [r1, #24]
 8007fc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fc4:	2f78      	cmp	r7, #120	@ 0x78
 8007fc6:	4691      	mov	r9, r2
 8007fc8:	4680      	mov	r8, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	469a      	mov	sl, r3
 8007fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fd2:	d807      	bhi.n	8007fe4 <_printf_i+0x28>
 8007fd4:	2f62      	cmp	r7, #98	@ 0x62
 8007fd6:	d80a      	bhi.n	8007fee <_printf_i+0x32>
 8007fd8:	2f00      	cmp	r7, #0
 8007fda:	f000 80d1 	beq.w	8008180 <_printf_i+0x1c4>
 8007fde:	2f58      	cmp	r7, #88	@ 0x58
 8007fe0:	f000 80b8 	beq.w	8008154 <_printf_i+0x198>
 8007fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fec:	e03a      	b.n	8008064 <_printf_i+0xa8>
 8007fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ff2:	2b15      	cmp	r3, #21
 8007ff4:	d8f6      	bhi.n	8007fe4 <_printf_i+0x28>
 8007ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8007ffc <_printf_i+0x40>)
 8007ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ffc:	08008055 	.word	0x08008055
 8008000:	08008069 	.word	0x08008069
 8008004:	08007fe5 	.word	0x08007fe5
 8008008:	08007fe5 	.word	0x08007fe5
 800800c:	08007fe5 	.word	0x08007fe5
 8008010:	08007fe5 	.word	0x08007fe5
 8008014:	08008069 	.word	0x08008069
 8008018:	08007fe5 	.word	0x08007fe5
 800801c:	08007fe5 	.word	0x08007fe5
 8008020:	08007fe5 	.word	0x08007fe5
 8008024:	08007fe5 	.word	0x08007fe5
 8008028:	08008167 	.word	0x08008167
 800802c:	08008093 	.word	0x08008093
 8008030:	08008121 	.word	0x08008121
 8008034:	08007fe5 	.word	0x08007fe5
 8008038:	08007fe5 	.word	0x08007fe5
 800803c:	08008189 	.word	0x08008189
 8008040:	08007fe5 	.word	0x08007fe5
 8008044:	08008093 	.word	0x08008093
 8008048:	08007fe5 	.word	0x08007fe5
 800804c:	08007fe5 	.word	0x08007fe5
 8008050:	08008129 	.word	0x08008129
 8008054:	6833      	ldr	r3, [r6, #0]
 8008056:	1d1a      	adds	r2, r3, #4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6032      	str	r2, [r6, #0]
 800805c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008064:	2301      	movs	r3, #1
 8008066:	e09c      	b.n	80081a2 <_printf_i+0x1e6>
 8008068:	6833      	ldr	r3, [r6, #0]
 800806a:	6820      	ldr	r0, [r4, #0]
 800806c:	1d19      	adds	r1, r3, #4
 800806e:	6031      	str	r1, [r6, #0]
 8008070:	0606      	lsls	r6, r0, #24
 8008072:	d501      	bpl.n	8008078 <_printf_i+0xbc>
 8008074:	681d      	ldr	r5, [r3, #0]
 8008076:	e003      	b.n	8008080 <_printf_i+0xc4>
 8008078:	0645      	lsls	r5, r0, #25
 800807a:	d5fb      	bpl.n	8008074 <_printf_i+0xb8>
 800807c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008080:	2d00      	cmp	r5, #0
 8008082:	da03      	bge.n	800808c <_printf_i+0xd0>
 8008084:	232d      	movs	r3, #45	@ 0x2d
 8008086:	426d      	negs	r5, r5
 8008088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800808c:	4858      	ldr	r0, [pc, #352]	@ (80081f0 <_printf_i+0x234>)
 800808e:	230a      	movs	r3, #10
 8008090:	e011      	b.n	80080b6 <_printf_i+0xfa>
 8008092:	6821      	ldr	r1, [r4, #0]
 8008094:	6833      	ldr	r3, [r6, #0]
 8008096:	0608      	lsls	r0, r1, #24
 8008098:	f853 5b04 	ldr.w	r5, [r3], #4
 800809c:	d402      	bmi.n	80080a4 <_printf_i+0xe8>
 800809e:	0649      	lsls	r1, r1, #25
 80080a0:	bf48      	it	mi
 80080a2:	b2ad      	uxthmi	r5, r5
 80080a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80080a6:	4852      	ldr	r0, [pc, #328]	@ (80081f0 <_printf_i+0x234>)
 80080a8:	6033      	str	r3, [r6, #0]
 80080aa:	bf14      	ite	ne
 80080ac:	230a      	movne	r3, #10
 80080ae:	2308      	moveq	r3, #8
 80080b0:	2100      	movs	r1, #0
 80080b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080b6:	6866      	ldr	r6, [r4, #4]
 80080b8:	60a6      	str	r6, [r4, #8]
 80080ba:	2e00      	cmp	r6, #0
 80080bc:	db05      	blt.n	80080ca <_printf_i+0x10e>
 80080be:	6821      	ldr	r1, [r4, #0]
 80080c0:	432e      	orrs	r6, r5
 80080c2:	f021 0104 	bic.w	r1, r1, #4
 80080c6:	6021      	str	r1, [r4, #0]
 80080c8:	d04b      	beq.n	8008162 <_printf_i+0x1a6>
 80080ca:	4616      	mov	r6, r2
 80080cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80080d0:	fb03 5711 	mls	r7, r3, r1, r5
 80080d4:	5dc7      	ldrb	r7, [r0, r7]
 80080d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080da:	462f      	mov	r7, r5
 80080dc:	42bb      	cmp	r3, r7
 80080de:	460d      	mov	r5, r1
 80080e0:	d9f4      	bls.n	80080cc <_printf_i+0x110>
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d10b      	bne.n	80080fe <_printf_i+0x142>
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	07df      	lsls	r7, r3, #31
 80080ea:	d508      	bpl.n	80080fe <_printf_i+0x142>
 80080ec:	6923      	ldr	r3, [r4, #16]
 80080ee:	6861      	ldr	r1, [r4, #4]
 80080f0:	4299      	cmp	r1, r3
 80080f2:	bfde      	ittt	le
 80080f4:	2330      	movle	r3, #48	@ 0x30
 80080f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080fe:	1b92      	subs	r2, r2, r6
 8008100:	6122      	str	r2, [r4, #16]
 8008102:	f8cd a000 	str.w	sl, [sp]
 8008106:	464b      	mov	r3, r9
 8008108:	aa03      	add	r2, sp, #12
 800810a:	4621      	mov	r1, r4
 800810c:	4640      	mov	r0, r8
 800810e:	f7ff fee7 	bl	8007ee0 <_printf_common>
 8008112:	3001      	adds	r0, #1
 8008114:	d14a      	bne.n	80081ac <_printf_i+0x1f0>
 8008116:	f04f 30ff 	mov.w	r0, #4294967295
 800811a:	b004      	add	sp, #16
 800811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	f043 0320 	orr.w	r3, r3, #32
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	4832      	ldr	r0, [pc, #200]	@ (80081f4 <_printf_i+0x238>)
 800812a:	2778      	movs	r7, #120	@ 0x78
 800812c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	6831      	ldr	r1, [r6, #0]
 8008134:	061f      	lsls	r7, r3, #24
 8008136:	f851 5b04 	ldr.w	r5, [r1], #4
 800813a:	d402      	bmi.n	8008142 <_printf_i+0x186>
 800813c:	065f      	lsls	r7, r3, #25
 800813e:	bf48      	it	mi
 8008140:	b2ad      	uxthmi	r5, r5
 8008142:	6031      	str	r1, [r6, #0]
 8008144:	07d9      	lsls	r1, r3, #31
 8008146:	bf44      	itt	mi
 8008148:	f043 0320 	orrmi.w	r3, r3, #32
 800814c:	6023      	strmi	r3, [r4, #0]
 800814e:	b11d      	cbz	r5, 8008158 <_printf_i+0x19c>
 8008150:	2310      	movs	r3, #16
 8008152:	e7ad      	b.n	80080b0 <_printf_i+0xf4>
 8008154:	4826      	ldr	r0, [pc, #152]	@ (80081f0 <_printf_i+0x234>)
 8008156:	e7e9      	b.n	800812c <_printf_i+0x170>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	f023 0320 	bic.w	r3, r3, #32
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	e7f6      	b.n	8008150 <_printf_i+0x194>
 8008162:	4616      	mov	r6, r2
 8008164:	e7bd      	b.n	80080e2 <_printf_i+0x126>
 8008166:	6833      	ldr	r3, [r6, #0]
 8008168:	6825      	ldr	r5, [r4, #0]
 800816a:	6961      	ldr	r1, [r4, #20]
 800816c:	1d18      	adds	r0, r3, #4
 800816e:	6030      	str	r0, [r6, #0]
 8008170:	062e      	lsls	r6, r5, #24
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	d501      	bpl.n	800817a <_printf_i+0x1be>
 8008176:	6019      	str	r1, [r3, #0]
 8008178:	e002      	b.n	8008180 <_printf_i+0x1c4>
 800817a:	0668      	lsls	r0, r5, #25
 800817c:	d5fb      	bpl.n	8008176 <_printf_i+0x1ba>
 800817e:	8019      	strh	r1, [r3, #0]
 8008180:	2300      	movs	r3, #0
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	4616      	mov	r6, r2
 8008186:	e7bc      	b.n	8008102 <_printf_i+0x146>
 8008188:	6833      	ldr	r3, [r6, #0]
 800818a:	1d1a      	adds	r2, r3, #4
 800818c:	6032      	str	r2, [r6, #0]
 800818e:	681e      	ldr	r6, [r3, #0]
 8008190:	6862      	ldr	r2, [r4, #4]
 8008192:	2100      	movs	r1, #0
 8008194:	4630      	mov	r0, r6
 8008196:	f7f8 f81b 	bl	80001d0 <memchr>
 800819a:	b108      	cbz	r0, 80081a0 <_printf_i+0x1e4>
 800819c:	1b80      	subs	r0, r0, r6
 800819e:	6060      	str	r0, [r4, #4]
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	6123      	str	r3, [r4, #16]
 80081a4:	2300      	movs	r3, #0
 80081a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081aa:	e7aa      	b.n	8008102 <_printf_i+0x146>
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	4632      	mov	r2, r6
 80081b0:	4649      	mov	r1, r9
 80081b2:	4640      	mov	r0, r8
 80081b4:	47d0      	blx	sl
 80081b6:	3001      	adds	r0, #1
 80081b8:	d0ad      	beq.n	8008116 <_printf_i+0x15a>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	079b      	lsls	r3, r3, #30
 80081be:	d413      	bmi.n	80081e8 <_printf_i+0x22c>
 80081c0:	68e0      	ldr	r0, [r4, #12]
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	4298      	cmp	r0, r3
 80081c6:	bfb8      	it	lt
 80081c8:	4618      	movlt	r0, r3
 80081ca:	e7a6      	b.n	800811a <_printf_i+0x15e>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4632      	mov	r2, r6
 80081d0:	4649      	mov	r1, r9
 80081d2:	4640      	mov	r0, r8
 80081d4:	47d0      	blx	sl
 80081d6:	3001      	adds	r0, #1
 80081d8:	d09d      	beq.n	8008116 <_printf_i+0x15a>
 80081da:	3501      	adds	r5, #1
 80081dc:	68e3      	ldr	r3, [r4, #12]
 80081de:	9903      	ldr	r1, [sp, #12]
 80081e0:	1a5b      	subs	r3, r3, r1
 80081e2:	42ab      	cmp	r3, r5
 80081e4:	dcf2      	bgt.n	80081cc <_printf_i+0x210>
 80081e6:	e7eb      	b.n	80081c0 <_printf_i+0x204>
 80081e8:	2500      	movs	r5, #0
 80081ea:	f104 0619 	add.w	r6, r4, #25
 80081ee:	e7f5      	b.n	80081dc <_printf_i+0x220>
 80081f0:	080090ac 	.word	0x080090ac
 80081f4:	080090bd 	.word	0x080090bd

080081f8 <__sflush_r>:
 80081f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008200:	0716      	lsls	r6, r2, #28
 8008202:	4605      	mov	r5, r0
 8008204:	460c      	mov	r4, r1
 8008206:	d454      	bmi.n	80082b2 <__sflush_r+0xba>
 8008208:	684b      	ldr	r3, [r1, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	dc02      	bgt.n	8008214 <__sflush_r+0x1c>
 800820e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	dd48      	ble.n	80082a6 <__sflush_r+0xae>
 8008214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008216:	2e00      	cmp	r6, #0
 8008218:	d045      	beq.n	80082a6 <__sflush_r+0xae>
 800821a:	2300      	movs	r3, #0
 800821c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008220:	682f      	ldr	r7, [r5, #0]
 8008222:	6a21      	ldr	r1, [r4, #32]
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	d030      	beq.n	800828a <__sflush_r+0x92>
 8008228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	0759      	lsls	r1, r3, #29
 800822e:	d505      	bpl.n	800823c <__sflush_r+0x44>
 8008230:	6863      	ldr	r3, [r4, #4]
 8008232:	1ad2      	subs	r2, r2, r3
 8008234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008236:	b10b      	cbz	r3, 800823c <__sflush_r+0x44>
 8008238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	2300      	movs	r3, #0
 800823e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008240:	6a21      	ldr	r1, [r4, #32]
 8008242:	4628      	mov	r0, r5
 8008244:	47b0      	blx	r6
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	d106      	bne.n	800825a <__sflush_r+0x62>
 800824c:	6829      	ldr	r1, [r5, #0]
 800824e:	291d      	cmp	r1, #29
 8008250:	d82b      	bhi.n	80082aa <__sflush_r+0xb2>
 8008252:	4a2a      	ldr	r2, [pc, #168]	@ (80082fc <__sflush_r+0x104>)
 8008254:	40ca      	lsrs	r2, r1
 8008256:	07d6      	lsls	r6, r2, #31
 8008258:	d527      	bpl.n	80082aa <__sflush_r+0xb2>
 800825a:	2200      	movs	r2, #0
 800825c:	6062      	str	r2, [r4, #4]
 800825e:	04d9      	lsls	r1, r3, #19
 8008260:	6922      	ldr	r2, [r4, #16]
 8008262:	6022      	str	r2, [r4, #0]
 8008264:	d504      	bpl.n	8008270 <__sflush_r+0x78>
 8008266:	1c42      	adds	r2, r0, #1
 8008268:	d101      	bne.n	800826e <__sflush_r+0x76>
 800826a:	682b      	ldr	r3, [r5, #0]
 800826c:	b903      	cbnz	r3, 8008270 <__sflush_r+0x78>
 800826e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008272:	602f      	str	r7, [r5, #0]
 8008274:	b1b9      	cbz	r1, 80082a6 <__sflush_r+0xae>
 8008276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800827a:	4299      	cmp	r1, r3
 800827c:	d002      	beq.n	8008284 <__sflush_r+0x8c>
 800827e:	4628      	mov	r0, r5
 8008280:	f7ff fbd6 	bl	8007a30 <_free_r>
 8008284:	2300      	movs	r3, #0
 8008286:	6363      	str	r3, [r4, #52]	@ 0x34
 8008288:	e00d      	b.n	80082a6 <__sflush_r+0xae>
 800828a:	2301      	movs	r3, #1
 800828c:	4628      	mov	r0, r5
 800828e:	47b0      	blx	r6
 8008290:	4602      	mov	r2, r0
 8008292:	1c50      	adds	r0, r2, #1
 8008294:	d1c9      	bne.n	800822a <__sflush_r+0x32>
 8008296:	682b      	ldr	r3, [r5, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d0c6      	beq.n	800822a <__sflush_r+0x32>
 800829c:	2b1d      	cmp	r3, #29
 800829e:	d001      	beq.n	80082a4 <__sflush_r+0xac>
 80082a0:	2b16      	cmp	r3, #22
 80082a2:	d11e      	bne.n	80082e2 <__sflush_r+0xea>
 80082a4:	602f      	str	r7, [r5, #0]
 80082a6:	2000      	movs	r0, #0
 80082a8:	e022      	b.n	80082f0 <__sflush_r+0xf8>
 80082aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ae:	b21b      	sxth	r3, r3
 80082b0:	e01b      	b.n	80082ea <__sflush_r+0xf2>
 80082b2:	690f      	ldr	r7, [r1, #16]
 80082b4:	2f00      	cmp	r7, #0
 80082b6:	d0f6      	beq.n	80082a6 <__sflush_r+0xae>
 80082b8:	0793      	lsls	r3, r2, #30
 80082ba:	680e      	ldr	r6, [r1, #0]
 80082bc:	bf08      	it	eq
 80082be:	694b      	ldreq	r3, [r1, #20]
 80082c0:	600f      	str	r7, [r1, #0]
 80082c2:	bf18      	it	ne
 80082c4:	2300      	movne	r3, #0
 80082c6:	eba6 0807 	sub.w	r8, r6, r7
 80082ca:	608b      	str	r3, [r1, #8]
 80082cc:	f1b8 0f00 	cmp.w	r8, #0
 80082d0:	dde9      	ble.n	80082a6 <__sflush_r+0xae>
 80082d2:	6a21      	ldr	r1, [r4, #32]
 80082d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082d6:	4643      	mov	r3, r8
 80082d8:	463a      	mov	r2, r7
 80082da:	4628      	mov	r0, r5
 80082dc:	47b0      	blx	r6
 80082de:	2800      	cmp	r0, #0
 80082e0:	dc08      	bgt.n	80082f4 <__sflush_r+0xfc>
 80082e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	f04f 30ff 	mov.w	r0, #4294967295
 80082f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f4:	4407      	add	r7, r0
 80082f6:	eba8 0800 	sub.w	r8, r8, r0
 80082fa:	e7e7      	b.n	80082cc <__sflush_r+0xd4>
 80082fc:	20400001 	.word	0x20400001

08008300 <_fflush_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	690b      	ldr	r3, [r1, #16]
 8008304:	4605      	mov	r5, r0
 8008306:	460c      	mov	r4, r1
 8008308:	b913      	cbnz	r3, 8008310 <_fflush_r+0x10>
 800830a:	2500      	movs	r5, #0
 800830c:	4628      	mov	r0, r5
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	b118      	cbz	r0, 800831a <_fflush_r+0x1a>
 8008312:	6a03      	ldr	r3, [r0, #32]
 8008314:	b90b      	cbnz	r3, 800831a <_fflush_r+0x1a>
 8008316:	f7ff fa47 	bl	80077a8 <__sinit>
 800831a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0f3      	beq.n	800830a <_fflush_r+0xa>
 8008322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008324:	07d0      	lsls	r0, r2, #31
 8008326:	d404      	bmi.n	8008332 <_fflush_r+0x32>
 8008328:	0599      	lsls	r1, r3, #22
 800832a:	d402      	bmi.n	8008332 <_fflush_r+0x32>
 800832c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800832e:	f7ff fb50 	bl	80079d2 <__retarget_lock_acquire_recursive>
 8008332:	4628      	mov	r0, r5
 8008334:	4621      	mov	r1, r4
 8008336:	f7ff ff5f 	bl	80081f8 <__sflush_r>
 800833a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800833c:	07da      	lsls	r2, r3, #31
 800833e:	4605      	mov	r5, r0
 8008340:	d4e4      	bmi.n	800830c <_fflush_r+0xc>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	059b      	lsls	r3, r3, #22
 8008346:	d4e1      	bmi.n	800830c <_fflush_r+0xc>
 8008348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800834a:	f7ff fb43 	bl	80079d4 <__retarget_lock_release_recursive>
 800834e:	e7dd      	b.n	800830c <_fflush_r+0xc>

08008350 <fiprintf>:
 8008350:	b40e      	push	{r1, r2, r3}
 8008352:	b503      	push	{r0, r1, lr}
 8008354:	4601      	mov	r1, r0
 8008356:	ab03      	add	r3, sp, #12
 8008358:	4805      	ldr	r0, [pc, #20]	@ (8008370 <fiprintf+0x20>)
 800835a:	f853 2b04 	ldr.w	r2, [r3], #4
 800835e:	6800      	ldr	r0, [r0, #0]
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	f000 f88f 	bl	8008484 <_vfiprintf_r>
 8008366:	b002      	add	sp, #8
 8008368:	f85d eb04 	ldr.w	lr, [sp], #4
 800836c:	b003      	add	sp, #12
 800836e:	4770      	bx	lr
 8008370:	200000a0 	.word	0x200000a0

08008374 <memmove>:
 8008374:	4288      	cmp	r0, r1
 8008376:	b510      	push	{r4, lr}
 8008378:	eb01 0402 	add.w	r4, r1, r2
 800837c:	d902      	bls.n	8008384 <memmove+0x10>
 800837e:	4284      	cmp	r4, r0
 8008380:	4623      	mov	r3, r4
 8008382:	d807      	bhi.n	8008394 <memmove+0x20>
 8008384:	1e43      	subs	r3, r0, #1
 8008386:	42a1      	cmp	r1, r4
 8008388:	d008      	beq.n	800839c <memmove+0x28>
 800838a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800838e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008392:	e7f8      	b.n	8008386 <memmove+0x12>
 8008394:	4402      	add	r2, r0
 8008396:	4601      	mov	r1, r0
 8008398:	428a      	cmp	r2, r1
 800839a:	d100      	bne.n	800839e <memmove+0x2a>
 800839c:	bd10      	pop	{r4, pc}
 800839e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083a6:	e7f7      	b.n	8008398 <memmove+0x24>

080083a8 <_sbrk_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	@ (80083c4 <_sbrk_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7f9 ff8a 	bl	80022cc <_sbrk>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_sbrk_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_sbrk_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	200042c4 	.word	0x200042c4

080083c8 <abort>:
 80083c8:	b508      	push	{r3, lr}
 80083ca:	2006      	movs	r0, #6
 80083cc:	f000 fa2e 	bl	800882c <raise>
 80083d0:	2001      	movs	r0, #1
 80083d2:	f7f9 ff02 	bl	80021da <_exit>

080083d6 <_realloc_r>:
 80083d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083da:	4607      	mov	r7, r0
 80083dc:	4614      	mov	r4, r2
 80083de:	460d      	mov	r5, r1
 80083e0:	b921      	cbnz	r1, 80083ec <_realloc_r+0x16>
 80083e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083e6:	4611      	mov	r1, r2
 80083e8:	f7ff bb96 	b.w	8007b18 <_malloc_r>
 80083ec:	b92a      	cbnz	r2, 80083fa <_realloc_r+0x24>
 80083ee:	f7ff fb1f 	bl	8007a30 <_free_r>
 80083f2:	4625      	mov	r5, r4
 80083f4:	4628      	mov	r0, r5
 80083f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083fa:	f000 fa33 	bl	8008864 <_malloc_usable_size_r>
 80083fe:	4284      	cmp	r4, r0
 8008400:	4606      	mov	r6, r0
 8008402:	d802      	bhi.n	800840a <_realloc_r+0x34>
 8008404:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008408:	d8f4      	bhi.n	80083f4 <_realloc_r+0x1e>
 800840a:	4621      	mov	r1, r4
 800840c:	4638      	mov	r0, r7
 800840e:	f7ff fb83 	bl	8007b18 <_malloc_r>
 8008412:	4680      	mov	r8, r0
 8008414:	b908      	cbnz	r0, 800841a <_realloc_r+0x44>
 8008416:	4645      	mov	r5, r8
 8008418:	e7ec      	b.n	80083f4 <_realloc_r+0x1e>
 800841a:	42b4      	cmp	r4, r6
 800841c:	4622      	mov	r2, r4
 800841e:	4629      	mov	r1, r5
 8008420:	bf28      	it	cs
 8008422:	4632      	movcs	r2, r6
 8008424:	f7ff fad7 	bl	80079d6 <memcpy>
 8008428:	4629      	mov	r1, r5
 800842a:	4638      	mov	r0, r7
 800842c:	f7ff fb00 	bl	8007a30 <_free_r>
 8008430:	e7f1      	b.n	8008416 <_realloc_r+0x40>

08008432 <__sfputc_r>:
 8008432:	6893      	ldr	r3, [r2, #8]
 8008434:	3b01      	subs	r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	b410      	push	{r4}
 800843a:	6093      	str	r3, [r2, #8]
 800843c:	da08      	bge.n	8008450 <__sfputc_r+0x1e>
 800843e:	6994      	ldr	r4, [r2, #24]
 8008440:	42a3      	cmp	r3, r4
 8008442:	db01      	blt.n	8008448 <__sfputc_r+0x16>
 8008444:	290a      	cmp	r1, #10
 8008446:	d103      	bne.n	8008450 <__sfputc_r+0x1e>
 8008448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800844c:	f000 b932 	b.w	80086b4 <__swbuf_r>
 8008450:	6813      	ldr	r3, [r2, #0]
 8008452:	1c58      	adds	r0, r3, #1
 8008454:	6010      	str	r0, [r2, #0]
 8008456:	7019      	strb	r1, [r3, #0]
 8008458:	4608      	mov	r0, r1
 800845a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800845e:	4770      	bx	lr

08008460 <__sfputs_r>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	4606      	mov	r6, r0
 8008464:	460f      	mov	r7, r1
 8008466:	4614      	mov	r4, r2
 8008468:	18d5      	adds	r5, r2, r3
 800846a:	42ac      	cmp	r4, r5
 800846c:	d101      	bne.n	8008472 <__sfputs_r+0x12>
 800846e:	2000      	movs	r0, #0
 8008470:	e007      	b.n	8008482 <__sfputs_r+0x22>
 8008472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008476:	463a      	mov	r2, r7
 8008478:	4630      	mov	r0, r6
 800847a:	f7ff ffda 	bl	8008432 <__sfputc_r>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	d1f3      	bne.n	800846a <__sfputs_r+0xa>
 8008482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008484 <_vfiprintf_r>:
 8008484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008488:	460d      	mov	r5, r1
 800848a:	b09d      	sub	sp, #116	@ 0x74
 800848c:	4614      	mov	r4, r2
 800848e:	4698      	mov	r8, r3
 8008490:	4606      	mov	r6, r0
 8008492:	b118      	cbz	r0, 800849c <_vfiprintf_r+0x18>
 8008494:	6a03      	ldr	r3, [r0, #32]
 8008496:	b90b      	cbnz	r3, 800849c <_vfiprintf_r+0x18>
 8008498:	f7ff f986 	bl	80077a8 <__sinit>
 800849c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800849e:	07d9      	lsls	r1, r3, #31
 80084a0:	d405      	bmi.n	80084ae <_vfiprintf_r+0x2a>
 80084a2:	89ab      	ldrh	r3, [r5, #12]
 80084a4:	059a      	lsls	r2, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_vfiprintf_r+0x2a>
 80084a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084aa:	f7ff fa92 	bl	80079d2 <__retarget_lock_acquire_recursive>
 80084ae:	89ab      	ldrh	r3, [r5, #12]
 80084b0:	071b      	lsls	r3, r3, #28
 80084b2:	d501      	bpl.n	80084b8 <_vfiprintf_r+0x34>
 80084b4:	692b      	ldr	r3, [r5, #16]
 80084b6:	b99b      	cbnz	r3, 80084e0 <_vfiprintf_r+0x5c>
 80084b8:	4629      	mov	r1, r5
 80084ba:	4630      	mov	r0, r6
 80084bc:	f000 f938 	bl	8008730 <__swsetup_r>
 80084c0:	b170      	cbz	r0, 80084e0 <_vfiprintf_r+0x5c>
 80084c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084c4:	07dc      	lsls	r4, r3, #31
 80084c6:	d504      	bpl.n	80084d2 <_vfiprintf_r+0x4e>
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	b01d      	add	sp, #116	@ 0x74
 80084ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d2:	89ab      	ldrh	r3, [r5, #12]
 80084d4:	0598      	lsls	r0, r3, #22
 80084d6:	d4f7      	bmi.n	80084c8 <_vfiprintf_r+0x44>
 80084d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084da:	f7ff fa7b 	bl	80079d4 <__retarget_lock_release_recursive>
 80084de:	e7f3      	b.n	80084c8 <_vfiprintf_r+0x44>
 80084e0:	2300      	movs	r3, #0
 80084e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e4:	2320      	movs	r3, #32
 80084e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ee:	2330      	movs	r3, #48	@ 0x30
 80084f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086a0 <_vfiprintf_r+0x21c>
 80084f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084f8:	f04f 0901 	mov.w	r9, #1
 80084fc:	4623      	mov	r3, r4
 80084fe:	469a      	mov	sl, r3
 8008500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008504:	b10a      	cbz	r2, 800850a <_vfiprintf_r+0x86>
 8008506:	2a25      	cmp	r2, #37	@ 0x25
 8008508:	d1f9      	bne.n	80084fe <_vfiprintf_r+0x7a>
 800850a:	ebba 0b04 	subs.w	fp, sl, r4
 800850e:	d00b      	beq.n	8008528 <_vfiprintf_r+0xa4>
 8008510:	465b      	mov	r3, fp
 8008512:	4622      	mov	r2, r4
 8008514:	4629      	mov	r1, r5
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ffa2 	bl	8008460 <__sfputs_r>
 800851c:	3001      	adds	r0, #1
 800851e:	f000 80a7 	beq.w	8008670 <_vfiprintf_r+0x1ec>
 8008522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008524:	445a      	add	r2, fp
 8008526:	9209      	str	r2, [sp, #36]	@ 0x24
 8008528:	f89a 3000 	ldrb.w	r3, [sl]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 809f 	beq.w	8008670 <_vfiprintf_r+0x1ec>
 8008532:	2300      	movs	r3, #0
 8008534:	f04f 32ff 	mov.w	r2, #4294967295
 8008538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800853c:	f10a 0a01 	add.w	sl, sl, #1
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008548:	931a      	str	r3, [sp, #104]	@ 0x68
 800854a:	4654      	mov	r4, sl
 800854c:	2205      	movs	r2, #5
 800854e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008552:	4853      	ldr	r0, [pc, #332]	@ (80086a0 <_vfiprintf_r+0x21c>)
 8008554:	f7f7 fe3c 	bl	80001d0 <memchr>
 8008558:	9a04      	ldr	r2, [sp, #16]
 800855a:	b9d8      	cbnz	r0, 8008594 <_vfiprintf_r+0x110>
 800855c:	06d1      	lsls	r1, r2, #27
 800855e:	bf44      	itt	mi
 8008560:	2320      	movmi	r3, #32
 8008562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008566:	0713      	lsls	r3, r2, #28
 8008568:	bf44      	itt	mi
 800856a:	232b      	movmi	r3, #43	@ 0x2b
 800856c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008570:	f89a 3000 	ldrb.w	r3, [sl]
 8008574:	2b2a      	cmp	r3, #42	@ 0x2a
 8008576:	d015      	beq.n	80085a4 <_vfiprintf_r+0x120>
 8008578:	9a07      	ldr	r2, [sp, #28]
 800857a:	4654      	mov	r4, sl
 800857c:	2000      	movs	r0, #0
 800857e:	f04f 0c0a 	mov.w	ip, #10
 8008582:	4621      	mov	r1, r4
 8008584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008588:	3b30      	subs	r3, #48	@ 0x30
 800858a:	2b09      	cmp	r3, #9
 800858c:	d94b      	bls.n	8008626 <_vfiprintf_r+0x1a2>
 800858e:	b1b0      	cbz	r0, 80085be <_vfiprintf_r+0x13a>
 8008590:	9207      	str	r2, [sp, #28]
 8008592:	e014      	b.n	80085be <_vfiprintf_r+0x13a>
 8008594:	eba0 0308 	sub.w	r3, r0, r8
 8008598:	fa09 f303 	lsl.w	r3, r9, r3
 800859c:	4313      	orrs	r3, r2
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	46a2      	mov	sl, r4
 80085a2:	e7d2      	b.n	800854a <_vfiprintf_r+0xc6>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	1d19      	adds	r1, r3, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	9103      	str	r1, [sp, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bfbb      	ittet	lt
 80085b0:	425b      	neglt	r3, r3
 80085b2:	f042 0202 	orrlt.w	r2, r2, #2
 80085b6:	9307      	strge	r3, [sp, #28]
 80085b8:	9307      	strlt	r3, [sp, #28]
 80085ba:	bfb8      	it	lt
 80085bc:	9204      	strlt	r2, [sp, #16]
 80085be:	7823      	ldrb	r3, [r4, #0]
 80085c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80085c2:	d10a      	bne.n	80085da <_vfiprintf_r+0x156>
 80085c4:	7863      	ldrb	r3, [r4, #1]
 80085c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80085c8:	d132      	bne.n	8008630 <_vfiprintf_r+0x1ac>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	1d1a      	adds	r2, r3, #4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	9203      	str	r2, [sp, #12]
 80085d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085d6:	3402      	adds	r4, #2
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80086b0 <_vfiprintf_r+0x22c>
 80085de:	7821      	ldrb	r1, [r4, #0]
 80085e0:	2203      	movs	r2, #3
 80085e2:	4650      	mov	r0, sl
 80085e4:	f7f7 fdf4 	bl	80001d0 <memchr>
 80085e8:	b138      	cbz	r0, 80085fa <_vfiprintf_r+0x176>
 80085ea:	9b04      	ldr	r3, [sp, #16]
 80085ec:	eba0 000a 	sub.w	r0, r0, sl
 80085f0:	2240      	movs	r2, #64	@ 0x40
 80085f2:	4082      	lsls	r2, r0
 80085f4:	4313      	orrs	r3, r2
 80085f6:	3401      	adds	r4, #1
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fe:	4829      	ldr	r0, [pc, #164]	@ (80086a4 <_vfiprintf_r+0x220>)
 8008600:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008604:	2206      	movs	r2, #6
 8008606:	f7f7 fde3 	bl	80001d0 <memchr>
 800860a:	2800      	cmp	r0, #0
 800860c:	d03f      	beq.n	800868e <_vfiprintf_r+0x20a>
 800860e:	4b26      	ldr	r3, [pc, #152]	@ (80086a8 <_vfiprintf_r+0x224>)
 8008610:	bb1b      	cbnz	r3, 800865a <_vfiprintf_r+0x1d6>
 8008612:	9b03      	ldr	r3, [sp, #12]
 8008614:	3307      	adds	r3, #7
 8008616:	f023 0307 	bic.w	r3, r3, #7
 800861a:	3308      	adds	r3, #8
 800861c:	9303      	str	r3, [sp, #12]
 800861e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008620:	443b      	add	r3, r7
 8008622:	9309      	str	r3, [sp, #36]	@ 0x24
 8008624:	e76a      	b.n	80084fc <_vfiprintf_r+0x78>
 8008626:	fb0c 3202 	mla	r2, ip, r2, r3
 800862a:	460c      	mov	r4, r1
 800862c:	2001      	movs	r0, #1
 800862e:	e7a8      	b.n	8008582 <_vfiprintf_r+0xfe>
 8008630:	2300      	movs	r3, #0
 8008632:	3401      	adds	r4, #1
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	4619      	mov	r1, r3
 8008638:	f04f 0c0a 	mov.w	ip, #10
 800863c:	4620      	mov	r0, r4
 800863e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008642:	3a30      	subs	r2, #48	@ 0x30
 8008644:	2a09      	cmp	r2, #9
 8008646:	d903      	bls.n	8008650 <_vfiprintf_r+0x1cc>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0c6      	beq.n	80085da <_vfiprintf_r+0x156>
 800864c:	9105      	str	r1, [sp, #20]
 800864e:	e7c4      	b.n	80085da <_vfiprintf_r+0x156>
 8008650:	fb0c 2101 	mla	r1, ip, r1, r2
 8008654:	4604      	mov	r4, r0
 8008656:	2301      	movs	r3, #1
 8008658:	e7f0      	b.n	800863c <_vfiprintf_r+0x1b8>
 800865a:	ab03      	add	r3, sp, #12
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	462a      	mov	r2, r5
 8008660:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <_vfiprintf_r+0x228>)
 8008662:	a904      	add	r1, sp, #16
 8008664:	4630      	mov	r0, r6
 8008666:	f3af 8000 	nop.w
 800866a:	4607      	mov	r7, r0
 800866c:	1c78      	adds	r0, r7, #1
 800866e:	d1d6      	bne.n	800861e <_vfiprintf_r+0x19a>
 8008670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008672:	07d9      	lsls	r1, r3, #31
 8008674:	d405      	bmi.n	8008682 <_vfiprintf_r+0x1fe>
 8008676:	89ab      	ldrh	r3, [r5, #12]
 8008678:	059a      	lsls	r2, r3, #22
 800867a:	d402      	bmi.n	8008682 <_vfiprintf_r+0x1fe>
 800867c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800867e:	f7ff f9a9 	bl	80079d4 <__retarget_lock_release_recursive>
 8008682:	89ab      	ldrh	r3, [r5, #12]
 8008684:	065b      	lsls	r3, r3, #25
 8008686:	f53f af1f 	bmi.w	80084c8 <_vfiprintf_r+0x44>
 800868a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800868c:	e71e      	b.n	80084cc <_vfiprintf_r+0x48>
 800868e:	ab03      	add	r3, sp, #12
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	462a      	mov	r2, r5
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <_vfiprintf_r+0x228>)
 8008696:	a904      	add	r1, sp, #16
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff fc8f 	bl	8007fbc <_printf_i>
 800869e:	e7e4      	b.n	800866a <_vfiprintf_r+0x1e6>
 80086a0:	0800909b 	.word	0x0800909b
 80086a4:	080090a5 	.word	0x080090a5
 80086a8:	00000000 	.word	0x00000000
 80086ac:	08008461 	.word	0x08008461
 80086b0:	080090a1 	.word	0x080090a1

080086b4 <__swbuf_r>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	460e      	mov	r6, r1
 80086b8:	4614      	mov	r4, r2
 80086ba:	4605      	mov	r5, r0
 80086bc:	b118      	cbz	r0, 80086c6 <__swbuf_r+0x12>
 80086be:	6a03      	ldr	r3, [r0, #32]
 80086c0:	b90b      	cbnz	r3, 80086c6 <__swbuf_r+0x12>
 80086c2:	f7ff f871 	bl	80077a8 <__sinit>
 80086c6:	69a3      	ldr	r3, [r4, #24]
 80086c8:	60a3      	str	r3, [r4, #8]
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	071a      	lsls	r2, r3, #28
 80086ce:	d501      	bpl.n	80086d4 <__swbuf_r+0x20>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	b943      	cbnz	r3, 80086e6 <__swbuf_r+0x32>
 80086d4:	4621      	mov	r1, r4
 80086d6:	4628      	mov	r0, r5
 80086d8:	f000 f82a 	bl	8008730 <__swsetup_r>
 80086dc:	b118      	cbz	r0, 80086e6 <__swbuf_r+0x32>
 80086de:	f04f 37ff 	mov.w	r7, #4294967295
 80086e2:	4638      	mov	r0, r7
 80086e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	6922      	ldr	r2, [r4, #16]
 80086ea:	1a98      	subs	r0, r3, r2
 80086ec:	6963      	ldr	r3, [r4, #20]
 80086ee:	b2f6      	uxtb	r6, r6
 80086f0:	4283      	cmp	r3, r0
 80086f2:	4637      	mov	r7, r6
 80086f4:	dc05      	bgt.n	8008702 <__swbuf_r+0x4e>
 80086f6:	4621      	mov	r1, r4
 80086f8:	4628      	mov	r0, r5
 80086fa:	f7ff fe01 	bl	8008300 <_fflush_r>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d1ed      	bne.n	80086de <__swbuf_r+0x2a>
 8008702:	68a3      	ldr	r3, [r4, #8]
 8008704:	3b01      	subs	r3, #1
 8008706:	60a3      	str	r3, [r4, #8]
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	6022      	str	r2, [r4, #0]
 800870e:	701e      	strb	r6, [r3, #0]
 8008710:	6962      	ldr	r2, [r4, #20]
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	429a      	cmp	r2, r3
 8008716:	d004      	beq.n	8008722 <__swbuf_r+0x6e>
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	07db      	lsls	r3, r3, #31
 800871c:	d5e1      	bpl.n	80086e2 <__swbuf_r+0x2e>
 800871e:	2e0a      	cmp	r6, #10
 8008720:	d1df      	bne.n	80086e2 <__swbuf_r+0x2e>
 8008722:	4621      	mov	r1, r4
 8008724:	4628      	mov	r0, r5
 8008726:	f7ff fdeb 	bl	8008300 <_fflush_r>
 800872a:	2800      	cmp	r0, #0
 800872c:	d0d9      	beq.n	80086e2 <__swbuf_r+0x2e>
 800872e:	e7d6      	b.n	80086de <__swbuf_r+0x2a>

08008730 <__swsetup_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4b29      	ldr	r3, [pc, #164]	@ (80087d8 <__swsetup_r+0xa8>)
 8008734:	4605      	mov	r5, r0
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	460c      	mov	r4, r1
 800873a:	b118      	cbz	r0, 8008744 <__swsetup_r+0x14>
 800873c:	6a03      	ldr	r3, [r0, #32]
 800873e:	b90b      	cbnz	r3, 8008744 <__swsetup_r+0x14>
 8008740:	f7ff f832 	bl	80077a8 <__sinit>
 8008744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008748:	0719      	lsls	r1, r3, #28
 800874a:	d422      	bmi.n	8008792 <__swsetup_r+0x62>
 800874c:	06da      	lsls	r2, r3, #27
 800874e:	d407      	bmi.n	8008760 <__swsetup_r+0x30>
 8008750:	2209      	movs	r2, #9
 8008752:	602a      	str	r2, [r5, #0]
 8008754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008758:	81a3      	strh	r3, [r4, #12]
 800875a:	f04f 30ff 	mov.w	r0, #4294967295
 800875e:	e033      	b.n	80087c8 <__swsetup_r+0x98>
 8008760:	0758      	lsls	r0, r3, #29
 8008762:	d512      	bpl.n	800878a <__swsetup_r+0x5a>
 8008764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008766:	b141      	cbz	r1, 800877a <__swsetup_r+0x4a>
 8008768:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800876c:	4299      	cmp	r1, r3
 800876e:	d002      	beq.n	8008776 <__swsetup_r+0x46>
 8008770:	4628      	mov	r0, r5
 8008772:	f7ff f95d 	bl	8007a30 <_free_r>
 8008776:	2300      	movs	r3, #0
 8008778:	6363      	str	r3, [r4, #52]	@ 0x34
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008780:	81a3      	strh	r3, [r4, #12]
 8008782:	2300      	movs	r3, #0
 8008784:	6063      	str	r3, [r4, #4]
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	f043 0308 	orr.w	r3, r3, #8
 8008790:	81a3      	strh	r3, [r4, #12]
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	b94b      	cbnz	r3, 80087aa <__swsetup_r+0x7a>
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800879c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087a0:	d003      	beq.n	80087aa <__swsetup_r+0x7a>
 80087a2:	4621      	mov	r1, r4
 80087a4:	4628      	mov	r0, r5
 80087a6:	f000 f88b 	bl	80088c0 <__smakebuf_r>
 80087aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ae:	f013 0201 	ands.w	r2, r3, #1
 80087b2:	d00a      	beq.n	80087ca <__swsetup_r+0x9a>
 80087b4:	2200      	movs	r2, #0
 80087b6:	60a2      	str	r2, [r4, #8]
 80087b8:	6962      	ldr	r2, [r4, #20]
 80087ba:	4252      	negs	r2, r2
 80087bc:	61a2      	str	r2, [r4, #24]
 80087be:	6922      	ldr	r2, [r4, #16]
 80087c0:	b942      	cbnz	r2, 80087d4 <__swsetup_r+0xa4>
 80087c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087c6:	d1c5      	bne.n	8008754 <__swsetup_r+0x24>
 80087c8:	bd38      	pop	{r3, r4, r5, pc}
 80087ca:	0799      	lsls	r1, r3, #30
 80087cc:	bf58      	it	pl
 80087ce:	6962      	ldrpl	r2, [r4, #20]
 80087d0:	60a2      	str	r2, [r4, #8]
 80087d2:	e7f4      	b.n	80087be <__swsetup_r+0x8e>
 80087d4:	2000      	movs	r0, #0
 80087d6:	e7f7      	b.n	80087c8 <__swsetup_r+0x98>
 80087d8:	200000a0 	.word	0x200000a0

080087dc <_raise_r>:
 80087dc:	291f      	cmp	r1, #31
 80087de:	b538      	push	{r3, r4, r5, lr}
 80087e0:	4605      	mov	r5, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	d904      	bls.n	80087f0 <_raise_r+0x14>
 80087e6:	2316      	movs	r3, #22
 80087e8:	6003      	str	r3, [r0, #0]
 80087ea:	f04f 30ff 	mov.w	r0, #4294967295
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087f2:	b112      	cbz	r2, 80087fa <_raise_r+0x1e>
 80087f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087f8:	b94b      	cbnz	r3, 800880e <_raise_r+0x32>
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f830 	bl	8008860 <_getpid_r>
 8008800:	4622      	mov	r2, r4
 8008802:	4601      	mov	r1, r0
 8008804:	4628      	mov	r0, r5
 8008806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800880a:	f000 b817 	b.w	800883c <_kill_r>
 800880e:	2b01      	cmp	r3, #1
 8008810:	d00a      	beq.n	8008828 <_raise_r+0x4c>
 8008812:	1c59      	adds	r1, r3, #1
 8008814:	d103      	bne.n	800881e <_raise_r+0x42>
 8008816:	2316      	movs	r3, #22
 8008818:	6003      	str	r3, [r0, #0]
 800881a:	2001      	movs	r0, #1
 800881c:	e7e7      	b.n	80087ee <_raise_r+0x12>
 800881e:	2100      	movs	r1, #0
 8008820:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008824:	4620      	mov	r0, r4
 8008826:	4798      	blx	r3
 8008828:	2000      	movs	r0, #0
 800882a:	e7e0      	b.n	80087ee <_raise_r+0x12>

0800882c <raise>:
 800882c:	4b02      	ldr	r3, [pc, #8]	@ (8008838 <raise+0xc>)
 800882e:	4601      	mov	r1, r0
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f7ff bfd3 	b.w	80087dc <_raise_r>
 8008836:	bf00      	nop
 8008838:	200000a0 	.word	0x200000a0

0800883c <_kill_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d07      	ldr	r5, [pc, #28]	@ (800885c <_kill_r+0x20>)
 8008840:	2300      	movs	r3, #0
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	4611      	mov	r1, r2
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	f7f9 fcb6 	bl	80021ba <_kill>
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	d102      	bne.n	8008858 <_kill_r+0x1c>
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	b103      	cbz	r3, 8008858 <_kill_r+0x1c>
 8008856:	6023      	str	r3, [r4, #0]
 8008858:	bd38      	pop	{r3, r4, r5, pc}
 800885a:	bf00      	nop
 800885c:	200042c4 	.word	0x200042c4

08008860 <_getpid_r>:
 8008860:	f7f9 bca3 	b.w	80021aa <_getpid>

08008864 <_malloc_usable_size_r>:
 8008864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008868:	1f18      	subs	r0, r3, #4
 800886a:	2b00      	cmp	r3, #0
 800886c:	bfbc      	itt	lt
 800886e:	580b      	ldrlt	r3, [r1, r0]
 8008870:	18c0      	addlt	r0, r0, r3
 8008872:	4770      	bx	lr

08008874 <__swhatbuf_r>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	460c      	mov	r4, r1
 8008878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887c:	2900      	cmp	r1, #0
 800887e:	b096      	sub	sp, #88	@ 0x58
 8008880:	4615      	mov	r5, r2
 8008882:	461e      	mov	r6, r3
 8008884:	da0d      	bge.n	80088a2 <__swhatbuf_r+0x2e>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800888c:	f04f 0100 	mov.w	r1, #0
 8008890:	bf14      	ite	ne
 8008892:	2340      	movne	r3, #64	@ 0x40
 8008894:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008898:	2000      	movs	r0, #0
 800889a:	6031      	str	r1, [r6, #0]
 800889c:	602b      	str	r3, [r5, #0]
 800889e:	b016      	add	sp, #88	@ 0x58
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	466a      	mov	r2, sp
 80088a4:	f000 f848 	bl	8008938 <_fstat_r>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	dbec      	blt.n	8008886 <__swhatbuf_r+0x12>
 80088ac:	9901      	ldr	r1, [sp, #4]
 80088ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088b6:	4259      	negs	r1, r3
 80088b8:	4159      	adcs	r1, r3
 80088ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088be:	e7eb      	b.n	8008898 <__swhatbuf_r+0x24>

080088c0 <__smakebuf_r>:
 80088c0:	898b      	ldrh	r3, [r1, #12]
 80088c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088c4:	079d      	lsls	r5, r3, #30
 80088c6:	4606      	mov	r6, r0
 80088c8:	460c      	mov	r4, r1
 80088ca:	d507      	bpl.n	80088dc <__smakebuf_r+0x1c>
 80088cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	6123      	str	r3, [r4, #16]
 80088d4:	2301      	movs	r3, #1
 80088d6:	6163      	str	r3, [r4, #20]
 80088d8:	b003      	add	sp, #12
 80088da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088dc:	ab01      	add	r3, sp, #4
 80088de:	466a      	mov	r2, sp
 80088e0:	f7ff ffc8 	bl	8008874 <__swhatbuf_r>
 80088e4:	9f00      	ldr	r7, [sp, #0]
 80088e6:	4605      	mov	r5, r0
 80088e8:	4639      	mov	r1, r7
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7ff f914 	bl	8007b18 <_malloc_r>
 80088f0:	b948      	cbnz	r0, 8008906 <__smakebuf_r+0x46>
 80088f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f6:	059a      	lsls	r2, r3, #22
 80088f8:	d4ee      	bmi.n	80088d8 <__smakebuf_r+0x18>
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	f043 0302 	orr.w	r3, r3, #2
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	e7e2      	b.n	80088cc <__smakebuf_r+0xc>
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	6020      	str	r0, [r4, #0]
 800890a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	9b01      	ldr	r3, [sp, #4]
 8008912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008916:	b15b      	cbz	r3, 8008930 <__smakebuf_r+0x70>
 8008918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800891c:	4630      	mov	r0, r6
 800891e:	f000 f81d 	bl	800895c <_isatty_r>
 8008922:	b128      	cbz	r0, 8008930 <__smakebuf_r+0x70>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f023 0303 	bic.w	r3, r3, #3
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	431d      	orrs	r5, r3
 8008934:	81a5      	strh	r5, [r4, #12]
 8008936:	e7cf      	b.n	80088d8 <__smakebuf_r+0x18>

08008938 <_fstat_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	@ (8008958 <_fstat_r+0x20>)
 800893c:	2300      	movs	r3, #0
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	4611      	mov	r1, r2
 8008944:	602b      	str	r3, [r5, #0]
 8008946:	f7f9 fc98 	bl	800227a <_fstat>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	d102      	bne.n	8008954 <_fstat_r+0x1c>
 800894e:	682b      	ldr	r3, [r5, #0]
 8008950:	b103      	cbz	r3, 8008954 <_fstat_r+0x1c>
 8008952:	6023      	str	r3, [r4, #0]
 8008954:	bd38      	pop	{r3, r4, r5, pc}
 8008956:	bf00      	nop
 8008958:	200042c4 	.word	0x200042c4

0800895c <_isatty_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d06      	ldr	r5, [pc, #24]	@ (8008978 <_isatty_r+0x1c>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	f7f9 fc97 	bl	800229a <_isatty>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_isatty_r+0x1a>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_isatty_r+0x1a>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	200042c4 	.word	0x200042c4

0800897c <_init>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr

08008988 <_fini>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	bf00      	nop
 800898c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898e:	bc08      	pop	{r3}
 8008990:	469e      	mov	lr, r3
 8008992:	4770      	bx	lr
