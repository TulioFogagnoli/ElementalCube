
ElementalCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  08007b44  08007b44  00008b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008670  08008670  0000a0d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008670  08008670  00009670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008678  08008678  0000a0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800867c  0800867c  0000967c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08008680  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0d8  2**0
                  CONTENTS
 10 .bss          000041e4  200000d8  200000d8  0000a0d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042bc  200042bc  0000a0d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116ee  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000305e  00000000  00000000  0001b7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  0001e858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf3  00000000  00000000  0001f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b21  00000000  00000000  00020413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131bb  00000000  00000000  00043f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfefc  00000000  00000000  000570ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126feb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049e4  00000000  00000000  00127030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0012ba14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b2c 	.word	0x08007b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	08007b2c 	.word	0x08007b2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <ILI9488_Select>:
/* vim: set ai et ts:4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9488.h"

// Funções estáticas (privadas para este arquivo)
static void ILI9488_Select() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2110      	movs	r1, #16
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <ILI9488_Select+0x14>)
 80005a6:	f002 fb03 	bl	8002bb0 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <ILI9488_Unselect>:

void ILI9488_Unselect() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2110      	movs	r1, #16
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <ILI9488_Unselect+0x14>)
 80005be:	f002 faf7 	bl	8002bb0 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <ILI9488_Reset>:

static void ILI9488_Reset() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2101      	movs	r1, #1
 80005d4:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <ILI9488_Reset+0x28>)
 80005d6:	f002 faeb 	bl	8002bb0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80005da:	2032      	movs	r0, #50	@ 0x32
 80005dc:	f002 f82a 	bl	8002634 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2101      	movs	r1, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <ILI9488_Reset+0x28>)
 80005e6:	f002 fae3 	bl	8002bb0 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 80005ea:	2078      	movs	r0, #120	@ 0x78
 80005ec:	f002 f822 	bl	8002634 <HAL_Delay>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020400 	.word	0x40020400

080005f8 <ILI9488_WriteCommand>:

static void ILI9488_WriteCommand(uint8_t cmd) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2102      	movs	r1, #2
 8000606:	4807      	ldr	r0, [pc, #28]	@ (8000624 <ILI9488_WriteCommand+0x2c>)
 8000608:	f002 fad2 	bl	8002bb0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800060c:	1df9      	adds	r1, r7, #7
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2201      	movs	r2, #1
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <ILI9488_WriteCommand+0x30>)
 8000616:	f002 ffc6 	bl	80035a6 <HAL_SPI_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020400 	.word	0x40020400
 8000628:	20000348 	.word	0x20000348

0800062c <ILI9488_WriteData>:

static void ILI9488_WriteData(uint8_t* buff, size_t buff_size) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2102      	movs	r1, #2
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <ILI9488_WriteData+0x2c>)
 800063c:	f002 fab8 	bl	8002bb0 <HAL_GPIO_WritePin>
    // Não otimizar para chunks pequenos como 1 ou 3 bytes
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b29a      	uxth	r2, r3
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4804      	ldr	r0, [pc, #16]	@ (800065c <ILI9488_WriteData+0x30>)
 800064c:	f002 ffab 	bl	80035a6 <HAL_SPI_Transmit>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020400 	.word	0x40020400
 800065c:	20000348 	.word	0x20000348

08000660 <ILI9488_WriteSmallData>:

static void ILI9488_WriteSmallData(uint8_t data) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <ILI9488_WriteSmallData+0x2c>)
 8000670:	f002 fa9e 	bl	8002bb0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000674:	1df9      	adds	r1, r7, #7
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <ILI9488_WriteSmallData+0x30>)
 800067e:	f002 ff92 	bl	80035a6 <HAL_SPI_Transmit>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020400 	.word	0x40020400
 8000690:	20000348 	.word	0x20000348

08000694 <ILI9488_SetAddressWindow>:


static void ILI9488_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4623      	mov	r3, r4
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4603      	mov	r3, r0
 80006a8:	80bb      	strh	r3, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	807b      	strh	r3, [r7, #2]
 80006ae:	4613      	mov	r3, r2
 80006b0:	803b      	strh	r3, [r7, #0]
    // Column Address Set
    ILI9488_WriteCommand(0x2A);
 80006b2:	202a      	movs	r0, #42	@ 0x2a
 80006b4:	f7ff ffa0 	bl	80005f8 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	733b      	strb	r3, [r7, #12]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	737b      	strb	r3, [r7, #13]
 80006c8:	887b      	ldrh	r3, [r7, #2]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73bb      	strb	r3, [r7, #14]
 80006d2:	887b      	ldrh	r3, [r7, #2]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
        ILI9488_WriteData(data, sizeof(data));
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffa4 	bl	800062c <ILI9488_WriteData>
    }
    // Page Address Set
    ILI9488_WriteCommand(0x2B);
 80006e4:	202b      	movs	r0, #43	@ 0x2b
 80006e6:	f7ff ff87 	bl	80005f8 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006ea:	88bb      	ldrh	r3, [r7, #4]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	723b      	strb	r3, [r7, #8]
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	727b      	strb	r3, [r7, #9]
 80006fa:	883b      	ldrh	r3, [r7, #0]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	72bb      	strb	r3, [r7, #10]
 8000704:	883b      	ldrh	r3, [r7, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	72fb      	strb	r3, [r7, #11]
        ILI9488_WriteData(data, sizeof(data));
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2104      	movs	r1, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff8b 	bl	800062c <ILI9488_WriteData>
    }
    // Memory Write
    ILI9488_WriteCommand(0x2C);
 8000716:	202c      	movs	r0, #44	@ 0x2c
 8000718:	f7ff ff6e 	bl	80005f8 <ILI9488_WriteCommand>
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <ILI9488_Init>:

void ILI9488_Init() {
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b095      	sub	sp, #84	@ 0x54
 8000728:	af00      	add	r7, sp, #0
    ILI9488_Select();
 800072a:	f7ff ff37 	bl	800059c <ILI9488_Select>
    ILI9488_Reset();
 800072e:	f7ff ff4d 	bl	80005cc <ILI9488_Reset>

    ILI9488_WriteCommand(0xE0); // Positive Gamma Control
 8000732:	20e0      	movs	r0, #224	@ 0xe0
 8000734:	f7ff ff60 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x03, 0x09, 0x08, 0x16, 0x0A, 0x3F, 0x78, 0x4C, 0x09, 0x0A, 0x08, 0x16, 0x1A, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 8000738:	4b5b      	ldr	r3, [pc, #364]	@ (80008a8 <ILI9488_Init+0x184>)
 800073a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800073e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000740:	c407      	stmia	r4!, {r0, r1, r2}
 8000742:	8023      	strh	r3, [r4, #0]
 8000744:	3402      	adds	r4, #2
 8000746:	0c1b      	lsrs	r3, r3, #16
 8000748:	7023      	strb	r3, [r4, #0]
 800074a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800074e:	210f      	movs	r1, #15
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff6b 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE1); // Negative Gamma Control
 8000756:	20e1      	movs	r0, #225	@ 0xe1
 8000758:	f7ff ff4e 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x16, 0x19, 0x03, 0x0F, 0x05, 0x32, 0x45, 0x46, 0x04, 0x0E, 0x0D, 0x35, 0x37, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 800075c:	4b53      	ldr	r3, [pc, #332]	@ (80008ac <ILI9488_Init+0x188>)
 800075e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000764:	c407      	stmia	r4!, {r0, r1, r2}
 8000766:	8023      	strh	r3, [r4, #0]
 8000768:	3402      	adds	r4, #2
 800076a:	0c1b      	lsrs	r3, r3, #16
 800076c:	7023      	strb	r3, [r4, #0]
 800076e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000772:	210f      	movs	r1, #15
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff59 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC0); // Power Control 1
 800077a:	20c0      	movs	r0, #192	@ 0xc0
 800077c:	f7ff ff3c 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x17, 0x15}; ILI9488_WriteData(data, sizeof(data)); }
 8000780:	f241 5317 	movw	r3, #5399	@ 0x1517
 8000784:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800078a:	2102      	movs	r1, #2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff4d 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC1); // Power Control 2
 8000792:	20c1      	movs	r0, #193	@ 0xc1
 8000794:	f7ff ff30 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x41}; ILI9488_WriteData(data, sizeof(data)); }
 8000798:	2341      	movs	r3, #65	@ 0x41
 800079a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800079e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a2:	2101      	movs	r1, #1
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff41 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC5); // VCOM Control
 80007aa:	20c5      	movs	r0, #197	@ 0xc5
 80007ac:	f7ff ff24 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x12, 0x80}; ILI9488_WriteData(data, sizeof(data)); }
 80007b0:	4a3f      	ldr	r2, [pc, #252]	@ (80008b0 <ILI9488_Init+0x18c>)
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	6812      	ldr	r2, [r2, #0]
 80007b8:	4611      	mov	r1, r2
 80007ba:	8019      	strh	r1, [r3, #0]
 80007bc:	3302      	adds	r3, #2
 80007be:	0c12      	lsrs	r2, r2, #16
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	2103      	movs	r1, #3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff2f 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0x36); // Memory Access Control
 80007ce:	2036      	movs	r0, #54	@ 0x36
 80007d0:	f7ff ff12 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {ILI9488_ROTATION}; ILI9488_WriteData(data, sizeof(data)); }
 80007d4:	2328      	movs	r3, #40	@ 0x28
 80007d6:	f887 3020 	strb.w	r3, [r7, #32]
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff23 	bl	800062c <ILI9488_WriteData>
    
    // ============ MUDANÇA IMPORTANTE ANTERIOR ============
    ILI9488_WriteCommand(0x3A); // Interface Pixel Format
 80007e6:	203a      	movs	r0, #58	@ 0x3a
 80007e8:	f7ff ff06 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x66}; ILI9488_WriteSmallData(data[0]); } // 0x66 para 18 bits/pixel
 80007ec:	2366      	movs	r3, #102	@ 0x66
 80007ee:	773b      	strb	r3, [r7, #28]
 80007f0:	7f3b      	ldrb	r3, [r7, #28]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff34 	bl	8000660 <ILI9488_WriteSmallData>

    ILI9488_WriteCommand(0xB0); // Interface Mode Control
 80007f8:	20b0      	movs	r0, #176	@ 0xb0
 80007fa:	f7ff fefd 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 80007fe:	2300      	movs	r3, #0
 8000800:	763b      	strb	r3, [r7, #24]
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	2101      	movs	r1, #1
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff0f 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB1); // Frame Rate Control
 800080e:	20b1      	movs	r0, #177	@ 0xb1
 8000810:	f7ff fef2 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xB0, 0x11}; ILI9488_WriteData(data, sizeof(data)); }
 8000814:	f241 13b0 	movw	r3, #4528	@ 0x11b0
 8000818:	82bb      	strh	r3, [r7, #20]
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2102      	movs	r1, #2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff03 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB4); // Display Inversion Control
 8000826:	20b4      	movs	r0, #180	@ 0xb4
 8000828:	f7ff fee6 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02}; ILI9488_WriteData(data, sizeof(data)); }
 800082c:	2302      	movs	r3, #2
 800082e:	743b      	strb	r3, [r7, #16]
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2101      	movs	r1, #1
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fef8 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB6); // Display Function Control
 800083c:	20b6      	movs	r0, #182	@ 0xb6
 800083e:	f7ff fedb 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02, 0x02, 0x3B}; ILI9488_WriteData(data, sizeof(data)); }
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <ILI9488_Init+0x190>)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	4611      	mov	r1, r2
 800084c:	8019      	strh	r1, [r3, #0]
 800084e:	3302      	adds	r3, #2
 8000850:	0c12      	lsrs	r2, r2, #16
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2103      	movs	r1, #3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fee6 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE9); // Set Image Function
 8000860:	20e9      	movs	r0, #233	@ 0xe9
 8000862:	f7ff fec9 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 8000866:	2300      	movs	r3, #0
 8000868:	723b      	strb	r3, [r7, #8]
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2101      	movs	r1, #1
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fedb 	bl	800062c <ILI9488_WriteData>
    ILI9488_WriteCommand(0xF7); // Adjust Control 3
 8000876:	20f7      	movs	r0, #247	@ 0xf7
 8000878:	f7ff febe 	bl	80005f8 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xA9, 0x51, 0x2C, 0x82}; ILI9488_WriteData(data, sizeof(data)); }
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <ILI9488_Init+0x194>)
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2104      	movs	r1, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fed1 	bl	800062c <ILI9488_WriteData>
    
    ILI9488_WriteCommand(0x11); // Sleep Out
 800088a:	2011      	movs	r0, #17
 800088c:	f7ff feb4 	bl	80005f8 <ILI9488_WriteCommand>
    HAL_Delay(120);
 8000890:	2078      	movs	r0, #120	@ 0x78
 8000892:	f001 fecf 	bl	8002634 <HAL_Delay>
    ILI9488_WriteCommand(0x29); // Display ON
 8000896:	2029      	movs	r0, #41	@ 0x29
 8000898:	f7ff feae 	bl	80005f8 <ILI9488_WriteCommand>
    ILI9488_Unselect();
 800089c:	f7ff fe8a 	bl	80005b4 <ILI9488_Unselect>
}
 80008a0:	bf00      	nop
 80008a2:	3754      	adds	r7, #84	@ 0x54
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	08007b44 	.word	0x08007b44
 80008ac:	08007b54 	.word	0x08007b54
 80008b0:	08007b64 	.word	0x08007b64
 80008b4:	08007b68 	.word	0x08007b68
 80008b8:	822c51a9 	.word	0x822c51a9

080008bc <ILI9488_WriteChar>:
    
    ILI9488_Unselect();
}

// ============== NOVA FUNÇÃO DE ESCRITA DE CARACTERE (3 BYTES) ==============
static void ILI9488_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008bc:	b082      	sub	sp, #8
 80008be:	b580      	push	{r7, lr}
 80008c0:	b08a      	sub	sp, #40	@ 0x28
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
 80008ca:	460b      	mov	r3, r1
 80008cc:	80bb      	strh	r3, [r7, #4]
 80008ce:	4613      	mov	r3, r2
 80008d0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ILI9488_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80008d2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008d6:	461a      	mov	r2, r3
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	4413      	add	r3, r2
 80008dc:	b29b      	uxth	r3, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008e6:	4619      	mov	r1, r3
 80008e8:	88bb      	ldrh	r3, [r7, #4]
 80008ea:	440b      	add	r3, r1
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	3b01      	subs	r3, #1
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	88b9      	ldrh	r1, [r7, #4]
 80008f4:	88f8      	ldrh	r0, [r7, #6]
 80008f6:	f7ff fecd 	bl	8000694 <ILI9488_SetAddressWindow>

    // Converte as cores de background e foreground para 3 bytes uma única vez
    uint8_t color_r = ((color >> 11) << 3);
 80008fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80008fc:	0adb      	lsrs	r3, r3, #11
 80008fe:	b29b      	uxth	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	77fb      	strb	r3, [r7, #31]
    uint8_t color_g = ((color >> 5) & 0x3F) << 2;
 8000906:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000908:	095b      	lsrs	r3, r3, #5
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	77bb      	strb	r3, [r7, #30]
    uint8_t color_b = (color & 0x1F) << 3;
 8000912:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000914:	b2db      	uxtb	r3, r3
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	777b      	strb	r3, [r7, #29]

    uint8_t bgcolor_r = ((bgcolor >> 11) << 3);
 800091a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800091e:	0adb      	lsrs	r3, r3, #11
 8000920:	b29b      	uxth	r3, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	773b      	strb	r3, [r7, #28]
    uint8_t bgcolor_g = ((bgcolor >> 5) & 0x3F) << 2;
 8000928:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	b29b      	uxth	r3, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	76fb      	strb	r3, [r7, #27]
    uint8_t bgcolor_b = (bgcolor & 0x1F) << 3;
 8000936:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800093a:	b2db      	uxtb	r3, r3
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	76bb      	strb	r3, [r7, #26]
    
    for(i = 0; i < font.height; i++) {
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
 8000944:	e03d      	b.n	80009c2 <ILI9488_WriteChar+0x106>
        b = font.data[(ch - 32) * font.height + i];
 8000946:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	3b20      	subs	r3, #32
 800094c:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000950:	fb01 f303 	mul.w	r3, r1, r3
 8000954:	4619      	mov	r1, r3
 8000956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000958:	440b      	add	r3, r1
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
 8000966:	e023      	b.n	80009b0 <ILI9488_WriteChar+0xf4>
            if((b << j) & 0x8000) {
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00c      	beq.n	8000992 <ILI9488_WriteChar+0xd6>
                uint8_t pixel[] = {color_r, color_g, color_b};
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	743b      	strb	r3, [r7, #16]
 800097c:	7fbb      	ldrb	r3, [r7, #30]
 800097e:	747b      	strb	r3, [r7, #17]
 8000980:	7f7b      	ldrb	r3, [r7, #29]
 8000982:	74bb      	strb	r3, [r7, #18]
                ILI9488_WriteData(pixel, sizeof(pixel));
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	2103      	movs	r1, #3
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fe4e 	bl	800062c <ILI9488_WriteData>
 8000990:	e00b      	b.n	80009aa <ILI9488_WriteChar+0xee>
            } else {
                uint8_t pixel[] = {bgcolor_r, bgcolor_g, bgcolor_b};
 8000992:	7f3b      	ldrb	r3, [r7, #28]
 8000994:	733b      	strb	r3, [r7, #12]
 8000996:	7efb      	ldrb	r3, [r7, #27]
 8000998:	737b      	strb	r3, [r7, #13]
 800099a:	7ebb      	ldrb	r3, [r7, #26]
 800099c:	73bb      	strb	r3, [r7, #14]
                ILI9488_WriteData(pixel, sizeof(pixel));
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2103      	movs	r1, #3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe41 	bl	800062c <ILI9488_WriteData>
        for(j = 0; j < font.width; j++) {
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	3301      	adds	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
 80009b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80009b4:	461a      	mov	r2, r3
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d3d5      	bcc.n	8000968 <ILI9488_WriteChar+0xac>
    for(i = 0; i < font.height; i++) {
 80009bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009be:	3301      	adds	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009c6:	461a      	mov	r2, r3
 80009c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d3bb      	bcc.n	8000946 <ILI9488_WriteChar+0x8a>
            }
        }
    }
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	@ 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009da:	b002      	add	sp, #8
 80009dc:	4770      	bx	lr
	...

080009e0 <ILI9488_FillRectangle>:

// ============== NOVA FUNÇÃO DE PREENCHER RETÂNGULO (3 BYTES) ==============
void ILI9488_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4604      	mov	r4, r0
 80009e8:	4608      	mov	r0, r1
 80009ea:	4611      	mov	r1, r2
 80009ec:	461a      	mov	r2, r3
 80009ee:	4623      	mov	r3, r4
 80009f0:	80fb      	strh	r3, [r7, #6]
 80009f2:	4603      	mov	r3, r0
 80009f4:	80bb      	strh	r3, [r7, #4]
 80009f6:	460b      	mov	r3, r1
 80009f8:	807b      	strh	r3, [r7, #2]
 80009fa:	4613      	mov	r3, r2
 80009fc:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a04:	f080 8083 	bcs.w	8000b0e <ILI9488_FillRectangle+0x12e>
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a0e:	d27e      	bcs.n	8000b0e <ILI9488_FillRectangle+0x12e>
    if((x + w) > ILI9488_WIDTH) w = ILI9488_WIDTH - x;
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	4413      	add	r3, r2
 8000a16:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a1a:	dd03      	ble.n	8000a24 <ILI9488_FillRectangle+0x44>
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8000a22:	807b      	strh	r3, [r7, #2]
    if((y + h) > ILI9488_HEIGHT) h = ILI9488_HEIGHT - y;
 8000a24:	88ba      	ldrh	r2, [r7, #4]
 8000a26:	883b      	ldrh	r3, [r7, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a2e:	dd03      	ble.n	8000a38 <ILI9488_FillRectangle+0x58>
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000a36:	803b      	strh	r3, [r7, #0]

    ILI9488_Select();
 8000a38:	f7ff fdb0 	bl	800059c <ILI9488_Select>
    ILI9488_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000a3c:	88fa      	ldrh	r2, [r7, #6]
 8000a3e:	887b      	ldrh	r3, [r7, #2]
 8000a40:	4413      	add	r3, r2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	3b01      	subs	r3, #1
 8000a46:	b29c      	uxth	r4, r3
 8000a48:	88ba      	ldrh	r2, [r7, #4]
 8000a4a:	883b      	ldrh	r3, [r7, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	3b01      	subs	r3, #1
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	88b9      	ldrh	r1, [r7, #4]
 8000a56:	88f8      	ldrh	r0, [r7, #6]
 8000a58:	4622      	mov	r2, r4
 8000a5a:	f7ff fe1b 	bl	8000694 <ILI9488_SetAddressWindow>
    
    // Converte a cor para 3 bytes
    uint8_t r = (color >> 11) & 0x1F;
 8000a5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a60:	0adb      	lsrs	r3, r3, #11
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f003 031f 	and.w	r3, r3, #31
 8000a6a:	74fb      	strb	r3, [r7, #19]
    uint8_t g = (color >> 5) & 0x3F;
 8000a6c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a78:	74bb      	strb	r3, [r7, #18]
    uint8_t b = color & 0x1F;
 8000a7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f003 031f 	and.w	r3, r3, #31
 8000a82:	747b      	strb	r3, [r7, #17]

    r = (r << 3) | (r >> 2);
 8000a84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	b25a      	sxtb	r2, r3
 8000a8c:	7cfb      	ldrb	r3, [r7, #19]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	74fb      	strb	r3, [r7, #19]
    g = (g << 2) | (g >> 4);
 8000a9a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	b25a      	sxtb	r2, r3
 8000aa2:	7cbb      	ldrb	r3, [r7, #18]
 8000aa4:	091b      	lsrs	r3, r3, #4
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	74bb      	strb	r3, [r7, #18]
    b = (b << 3) | (b >> 2);
 8000ab0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	7c7b      	ldrb	r3, [r7, #17]
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	747b      	strb	r3, [r7, #17]
    
    uint8_t data[] = {r, g, b};
 8000ac6:	7cfb      	ldrb	r3, [r7, #19]
 8000ac8:	733b      	strb	r3, [r7, #12]
 8000aca:	7cbb      	ldrb	r3, [r7, #18]
 8000acc:	737b      	strb	r3, [r7, #13]
 8000ace:	7c7b      	ldrb	r3, [r7, #17]
 8000ad0:	73bb      	strb	r3, [r7, #14]
    
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4810      	ldr	r0, [pc, #64]	@ (8000b18 <ILI9488_FillRectangle+0x138>)
 8000ad8:	f002 f86a 	bl	8002bb0 <HAL_GPIO_WritePin>
    for(uint32_t i = 0; i < (h * w); i++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <ILI9488_FillRectangle+0x118>
        HAL_SPI_Transmit(&ILI9488_SPI_PORT, data, 3, HAL_MAX_DELAY);
 8000ae2:	f107 010c 	add.w	r1, r7, #12
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	2203      	movs	r2, #3
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <ILI9488_FillRectangle+0x13c>)
 8000aee:	f002 fd5a 	bl	80035a6 <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < (h * w); i++) {
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	883b      	ldrh	r3, [r7, #0]
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d3ec      	bcc.n	8000ae2 <ILI9488_FillRectangle+0x102>
    }

    ILI9488_Unselect();
 8000b08:	f7ff fd54 	bl	80005b4 <ILI9488_Unselect>
 8000b0c:	e000      	b.n	8000b10 <ILI9488_FillRectangle+0x130>
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 8000b0e:	bf00      	nop
}
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	20000348 	.word	0x20000348

08000b20 <ILI9488_WriteString>:

// O restante das funções não precisa de alteração pois dependem das que foram corrigidas

void ILI9488_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b20:	b082      	sub	sp, #8
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af04      	add	r7, sp, #16
 8000b28:	603a      	str	r2, [r7, #0]
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	80fb      	strh	r3, [r7, #6]
 8000b30:	460b      	mov	r3, r1
 8000b32:	80bb      	strh	r3, [r7, #4]
    ILI9488_Select();
 8000b34:	f7ff fd32 	bl	800059c <ILI9488_Select>
    while(*str) {
 8000b38:	e02f      	b.n	8000b9a <ILI9488_WriteString+0x7a>
        if(x + font.width >= ILI9488_WIDTH) {
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	7d3a      	ldrb	r2, [r7, #20]
 8000b3e:	4413      	add	r3, r2
 8000b40:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000b44:	db14      	blt.n	8000b70 <ILI9488_WriteString+0x50>
            x = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b4a:	7d7b      	ldrb	r3, [r7, #21]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9488_HEIGHT) break;
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	7d7a      	ldrb	r2, [r7, #21]
 8000b58:	4413      	add	r3, r2
 8000b5a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b5e:	da21      	bge.n	8000ba4 <ILI9488_WriteString+0x84>
            if(*str == ' ') {
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d103      	bne.n	8000b70 <ILI9488_WriteString+0x50>
                str++;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	603b      	str	r3, [r7, #0]
                continue;
 8000b6e:	e014      	b.n	8000b9a <ILI9488_WriteString+0x7a>
            }
        }
        ILI9488_WriteChar(x, y, *str, font, color, bgcolor);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	88b9      	ldrh	r1, [r7, #4]
 8000b76:	88f8      	ldrh	r0, [r7, #6]
 8000b78:	8c3b      	ldrh	r3, [r7, #32]
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	8bbb      	ldrh	r3, [r7, #28]
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f7ff fe99 	bl	80008bc <ILI9488_WriteChar>
        x += font.width;
 8000b8a:	7d3b      	ldrb	r3, [r7, #20]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4413      	add	r3, r2
 8000b92:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1cb      	bne.n	8000b3a <ILI9488_WriteString+0x1a>
 8000ba2:	e000      	b.n	8000ba6 <ILI9488_WriteString+0x86>
            if(y + font.height >= ILI9488_HEIGHT) break;
 8000ba4:	bf00      	nop
    }
    ILI9488_Unselect();
 8000ba6:	f7ff fd05 	bl	80005b4 <ILI9488_Unselect>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb4:	b002      	add	sp, #8
 8000bb6:	4770      	bx	lr

08000bb8 <ILI9488_FillScreen>:

void ILI9488_FillScreen(uint16_t color) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, color);
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000bca:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff ff05 	bl	80009e0 <ILI9488_FillRectangle>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4a07      	ldr	r2, [pc, #28]	@ (8000c0c <vApplicationGetIdleTaskMemory+0x2c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	4a06      	ldr	r2, [pc, #24]	@ (8000c10 <vApplicationGetIdleTaskMemory+0x30>)
 8000bf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2280      	movs	r2, #128	@ 0x80
 8000bfc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000f4 	.word	0x200000f4
 8000c10:	20000148 	.word	0x20000148

08000c14 <vInitBattle>:
 * @brief Executa a lógica de batalha turno a turno, atualizando a vida dos jogadores.
 * @param pUserPlayer: Ponteiro para o jogador do usuário.
 * @param pCpuPlayer: Ponteiro para o jogador da CPU.
 */
void vInitBattle(EWizard* pUserPlayer, EWizard* pCpuPlayer)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	75fb      	strb	r3, [r7, #23]
 8000c22:	e092      	b.n	8000d4a <vInitBattle+0x136>
  {
    // Pega os ataques deste turno
    EColor userAttack = pUserPlayer->eAttackSequential[u8Idx];
 8000c24:	7dfb      	ldrb	r3, [r7, #23]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	4413      	add	r3, r2
 8000c2a:	789b      	ldrb	r3, [r3, #2]
 8000c2c:	753b      	strb	r3, [r7, #20]
    EColor cpuAttack = pCpuPlayer->eAttackSequential[u8Idx];
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	4413      	add	r3, r2
 8000c34:	789b      	ldrb	r3, [r3, #2]
 8000c36:	74fb      	strb	r3, [r7, #19]

    // Calcula o resultado do ataque do Jogador -> CPU
    EAttackOutcome userOutcome = eGetAttackOutcome(userAttack, cpuAttack);
 8000c38:	7cfa      	ldrb	r2, [r7, #19]
 8000c3a:	7d3b      	ldrb	r3, [r7, #20]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f88c 	bl	8000d5c <eGetAttackOutcome>
 8000c44:	4603      	mov	r3, r0
 8000c46:	74bb      	strb	r3, [r7, #18]
    uint8_t userDamage = BASE_ATTACK_DAMAGE;
 8000c48:	230a      	movs	r3, #10
 8000c4a:	75bb      	strb	r3, [r7, #22]

    if (userOutcome == eOutcome_SuperEffective)
 8000c4c:	7cbb      	ldrb	r3, [r7, #18]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d10f      	bne.n	8000c72 <vInitBattle+0x5e>
    {
      userDamage *= SUPER_EFFECTIVE_MODIFIER;
 8000c52:	7dbb      	ldrb	r3, [r7, #22]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c68:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c6c:	793b      	ldrb	r3, [r7, #4]
 8000c6e:	75bb      	strb	r3, [r7, #22]
 8000c70:	e011      	b.n	8000c96 <vInitBattle+0x82>
    }
    else if (userOutcome == eOutcome_NotEffective)
 8000c72:	7cbb      	ldrb	r3, [r7, #18]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d10e      	bne.n	8000c96 <vInitBattle+0x82>
    {
      userDamage *= NOT_EFFECTIVE_MODIFIER;
 8000c78:	7dbb      	ldrb	r3, [r7, #22]
 8000c7a:	ee07 3a90 	vmov	s15, r3
 8000c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c82:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c92:	793b      	ldrb	r3, [r7, #4]
 8000c94:	75bb      	strb	r3, [r7, #22]
    }

    // Calcula o resultado do ataque da CPU -> Jogador
    EAttackOutcome cpuOutcome = eGetAttackOutcome(cpuAttack, userAttack);
 8000c96:	7d3a      	ldrb	r2, [r7, #20]
 8000c98:	7cfb      	ldrb	r3, [r7, #19]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f85d 	bl	8000d5c <eGetAttackOutcome>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	747b      	strb	r3, [r7, #17]
    uint8_t cpuDamage = BASE_ATTACK_DAMAGE;
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	757b      	strb	r3, [r7, #21]

    if (cpuOutcome == eOutcome_SuperEffective)
 8000caa:	7c7b      	ldrb	r3, [r7, #17]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d10f      	bne.n	8000cd0 <vInitBattle+0xbc>
    {
      cpuDamage *= SUPER_EFFECTIVE_MODIFIER;
 8000cb0:	7d7b      	ldrb	r3, [r7, #21]
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cba:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cca:	793b      	ldrb	r3, [r7, #4]
 8000ccc:	757b      	strb	r3, [r7, #21]
 8000cce:	e011      	b.n	8000cf4 <vInitBattle+0xe0>
    }
    else if (cpuOutcome == eOutcome_NotEffective)
 8000cd0:	7c7b      	ldrb	r3, [r7, #17]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d10e      	bne.n	8000cf4 <vInitBattle+0xe0>
    {
      cpuDamage *= NOT_EFFECTIVE_MODIFIER;
 8000cd6:	7d7b      	ldrb	r3, [r7, #21]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cec:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cf0:	793b      	ldrb	r3, [r7, #4]
 8000cf2:	757b      	strb	r3, [r7, #21]
    }

    // Aplica o dano, garantindo que a vida não fique negativa
    if (pCpuPlayer->u8HeartPoints >= userDamage)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	7dba      	ldrb	r2, [r7, #22]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d807      	bhi.n	8000d0e <vInitBattle+0xfa>
    {
      pCpuPlayer->u8HeartPoints -= userDamage;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	7dbb      	ldrb	r3, [r7, #22]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e002      	b.n	8000d14 <vInitBattle+0x100>
    }
    else
    {
      pCpuPlayer->u8HeartPoints = 0;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
    }

    if (pUserPlayer->u8HeartPoints >= cpuDamage)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	7d7a      	ldrb	r2, [r7, #21]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d807      	bhi.n	8000d2e <vInitBattle+0x11a>
    {
      pUserPlayer->u8HeartPoints -= cpuDamage;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	7d7b      	ldrb	r3, [r7, #21]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	e002      	b.n	8000d34 <vInitBattle+0x120>
    }
    else
    {
      pUserPlayer->u8HeartPoints = 0;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
    }
    
    // Se a vida de alguém chegar a 0, a batalha pode parar mais cedo
    if(pUserPlayer->u8HeartPoints == 0 || pCpuPlayer->u8HeartPoints == 0)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00a      	beq.n	8000d52 <vInitBattle+0x13e>
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <vInitBattle+0x13e>
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	3301      	adds	r3, #1
 8000d48:	75fb      	strb	r3, [r7, #23]
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	f67f af69 	bls.w	8000c24 <vInitBattle+0x10>
    {
        break; // Encerra o loop for
    }
  }
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <eGetAttackOutcome>:
 * @param eAttackerAttack: O elemento do atacante.
 * @param eDefenderAttack: O elemento do defensor no mesmo turno.
 * @retval EAttackOutcome: O resultado da interação.
 */
EAttackOutcome eGetAttackOutcome(EColor eAttackerAttack, EColor eDefenderAttack)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
  switch (eAttackerAttack)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d859      	bhi.n	8000e26 <eGetAttackOutcome+0xca>
 8000d72:	a201      	add	r2, pc, #4	@ (adr r2, 8000d78 <eGetAttackOutcome+0x1c>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000d91 	.word	0x08000d91
 8000d7c:	08000daf 	.word	0x08000daf
 8000d80:	08000deb 	.word	0x08000deb
 8000d84:	08000dcd 	.word	0x08000dcd
 8000d88:	08000dff 	.word	0x08000dff
 8000d8c:	08000e13 	.word	0x08000e13
  {
    case eRed: // FOGO
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Fogo > Terra
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d101      	bne.n	8000d9a <eGetAttackOutcome+0x3e>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e053      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective;  //  Fogo > Sombra
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	2b05      	cmp	r3, #5
 8000d9e:	d101      	bne.n	8000da4 <eGetAttackOutcome+0x48>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e04e      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlue) return eOutcome_NotEffective;     // Fogo < Agua
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d13f      	bne.n	8000e2a <eGetAttackOutcome+0xce>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e049      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      break;

    case eBlue: // ÁGUA
      if (eDefenderAttack == eRed) return eOutcome_SuperEffective;    // Agua > Fogo
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <eGetAttackOutcome+0x5c>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e044      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eGreen) return eOutcome_SuperEffective;  // Agua > Ar
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d101      	bne.n	8000dc2 <eGetAttackOutcome+0x66>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e03f      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;   // Agua < Terra
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d132      	bne.n	8000e2e <eGetAttackOutcome+0xd2>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e03a      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      break;

    case eYellow: // TERRA
      if (eDefenderAttack == eBlue) return eOutcome_SuperEffective;   // Terra > Agua
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d101      	bne.n	8000dd6 <eGetAttackOutcome+0x7a>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e035      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective;  // Terra > Luz
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d101      	bne.n	8000de0 <eGetAttackOutcome+0x84>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e030      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Terra < Fogo
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d125      	bne.n	8000e32 <eGetAttackOutcome+0xd6>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e02b      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      break;

    case eGreen: // AR
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Ar > Terra
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d101      	bne.n	8000df4 <eGetAttackOutcome+0x98>
 8000df0:	2301      	movs	r3, #1
 8000df2:	e026      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Ar < Fogo
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d11d      	bne.n	8000e36 <eGetAttackOutcome+0xda>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e021      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      break;
    
    case eWhite: // LUZ
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective; // Luz > Sombra
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	d101      	bne.n	8000e08 <eGetAttackOutcome+0xac>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e01c      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;  // Luz < Terra
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d115      	bne.n	8000e3a <eGetAttackOutcome+0xde>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e017      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      break;

    case eBlack: // SOMBRA
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective; // Sombra > Luz
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d101      	bne.n	8000e1c <eGetAttackOutcome+0xc0>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e012      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;     // Sombra < Fogo
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10d      	bne.n	8000e3e <eGetAttackOutcome+0xe2>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e00d      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      break;

    default:
      return eOutcome_Neutral;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e00b      	b.n	8000e42 <eGetAttackOutcome+0xe6>
      break;
 8000e2a:	bf00      	nop
 8000e2c:	e008      	b.n	8000e40 <eGetAttackOutcome+0xe4>
      break;
 8000e2e:	bf00      	nop
 8000e30:	e006      	b.n	8000e40 <eGetAttackOutcome+0xe4>
      break;
 8000e32:	bf00      	nop
 8000e34:	e004      	b.n	8000e40 <eGetAttackOutcome+0xe4>
      break;
 8000e36:	bf00      	nop
 8000e38:	e002      	b.n	8000e40 <eGetAttackOutcome+0xe4>
      break;
 8000e3a:	bf00      	nop
 8000e3c:	e000      	b.n	8000e40 <eGetAttackOutcome+0xe4>
      break;
 8000e3e:	bf00      	nop
  }
  return eOutcome_Neutral; // Retorno padrão se nenhuma regra se aplicar
 8000e40:	2300      	movs	r3, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <ClearScreen>:
#include "ILI9488.h"
#include "fonts.h"
#include "stdint.h"
#include <stdio.h>

void ClearScreen() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af02      	add	r7, sp, #8
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, ILI9488_BLACK);
 8000e56:	2300      	movs	r3, #0
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e5e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fdbb 	bl	80009e0 <ILI9488_FillRectangle>
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DrawMenu>:

void DrawMenu(const char* title, const char** options, int numOptions, int currentSelection) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b092      	sub	sp, #72	@ 0x48
 8000e74:	af04      	add	r7, sp, #16
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	603b      	str	r3, [r7, #0]
    char buffer[30];

    // Desenha o título com a fonte maior, mais abaixo no ecrã
    sprintf(buffer, "%s", title);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	492a      	ldr	r1, [pc, #168]	@ (8000f30 <DrawMenu+0xc0>)
 8000e86:	4618      	mov	r0, r3
 8000e88:	f005 fd9c 	bl	80069c4 <siprintf>
    ILI9488_WriteString(0, 0, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8000e8c:	4b29      	ldr	r3, [pc, #164]	@ (8000f34 <DrawMenu+0xc4>)
 8000e8e:	f107 0114 	add.w	r1, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	9202      	str	r2, [sp, #8]
 8000e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e9a:	9201      	str	r2, [sp, #4]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	9200      	str	r2, [sp, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fe3a 	bl	8000b20 <ILI9488_WriteString>

    // Desenha as opções com mais espaçamento vertical
    for (int i = 0; i < numOptions; i++) {
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8000eb0:	e035      	b.n	8000f1e <DrawMenu+0xae>
        uint16_t color = (i == currentSelection) ? ILI9488_YELLOW : ILI9488_WHITE;
 8000eb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d102      	bne.n	8000ec0 <DrawMenu+0x50>
 8000eba:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ebe:	e001      	b.n	8000ec4 <DrawMenu+0x54>
 8000ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ec4:	867b      	strh	r3, [r7, #50]	@ 0x32
        sprintf(buffer, "%s %s", (i == currentSelection) ? ">" : " ", options[i]);
 8000ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d101      	bne.n	8000ed2 <DrawMenu+0x62>
 8000ece:	491a      	ldr	r1, [pc, #104]	@ (8000f38 <DrawMenu+0xc8>)
 8000ed0:	e000      	b.n	8000ed4 <DrawMenu+0x64>
 8000ed2:	491a      	ldr	r1, [pc, #104]	@ (8000f3c <DrawMenu+0xcc>)
 8000ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	4413      	add	r3, r2
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f107 0014 	add.w	r0, r7, #20
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	4916      	ldr	r1, [pc, #88]	@ (8000f40 <DrawMenu+0xd0>)
 8000ee6:	f005 fd6d 	bl	80069c4 <siprintf>
        // Aumenta o espaçamento entre as linhas (de 15 para 25)
        ILI9488_WriteString(0, 30 + (i * 20), buffer, Font_7x10, color, ILI9488_BLACK);
 8000eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	331e      	adds	r3, #30
 8000efa:	b299      	uxth	r1, r3
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <DrawMenu+0xc4>)
 8000efe:	f107 0014 	add.w	r0, r7, #20
 8000f02:	2200      	movs	r2, #0
 8000f04:	9202      	str	r2, [sp, #8]
 8000f06:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000f08:	9201      	str	r2, [sp, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	9200      	str	r2, [sp, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4602      	mov	r2, r0
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff fe04 	bl	8000b20 <ILI9488_WriteString>
    for (int i = 0; i < numOptions; i++) {
 8000f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dbc5      	blt.n	8000eb2 <DrawMenu+0x42>
    }
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3738      	adds	r7, #56	@ 0x38
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08007b6c 	.word	0x08007b6c
 8000f34:	20000000 	.word	0x20000000
 8000f38:	08007b70 	.word	0x08007b70
 8000f3c:	08007b74 	.word	0x08007b74
 8000f40:	08007b78 	.word	0x08007b78

08000f44 <KEYPAD_Scan>:
Keypad_Pin_t C_PINS[4] = {{C4_GPIO_Port, C4_Pin}, {C3_GPIO_Port, C3_Pin}, {C2_GPIO_Port, C2_Pin}, {C1_GPIO_Port, C1_Pin}};
// Pinos das linhas (entradas)
Keypad_Pin_t R_PINS[4] = {{R2_GPIO_Port, R2_Pin}, {R1_GPIO_Port, R1_Pin}, {R3_GPIO_Port, R3_Pin}, {R4_GPIO_Port, R4_Pin}};


char KEYPAD_Scan(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
    // Coloca todas as colunas em nível alto
    for (int i = 0; i < 4; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	e00f      	b.n	8000f70 <KEYPAD_Scan+0x2c>
        HAL_GPIO_WritePin(C_PINS[i].PORT, C_PINS[i].PIN, GPIO_PIN_SET);
 8000f50:	4a3e      	ldr	r2, [pc, #248]	@ (800104c <KEYPAD_Scan+0x108>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f58:	4a3c      	ldr	r2, [pc, #240]	@ (800104c <KEYPAD_Scan+0x108>)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	4413      	add	r3, r2
 8000f60:	889b      	ldrh	r3, [r3, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	4619      	mov	r1, r3
 8000f66:	f001 fe23 	bl	8002bb0 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	ddec      	ble.n	8000f50 <KEYPAD_Scan+0xc>
    }

    // Loop para varrer cada coluna
    for (int col = 0; col < 4; col++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	e05e      	b.n	800103a <KEYPAD_Scan+0xf6>
        // Ativa a coluna atual (coloca em nível baixo)
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_RESET);
 8000f7c:	4a33      	ldr	r2, [pc, #204]	@ (800104c <KEYPAD_Scan+0x108>)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f84:	4a31      	ldr	r2, [pc, #196]	@ (800104c <KEYPAD_Scan+0x108>)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	889b      	ldrh	r3, [r3, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4619      	mov	r1, r3
 8000f92:	f001 fe0d 	bl	8002bb0 <HAL_GPIO_WritePin>

        // Verifica qual linha foi para nível baixo
        for (int row = 0; row < 4; row++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	e03b      	b.n	8001014 <KEYPAD_Scan+0xd0>
            if (HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET) {
 8000f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8001050 <KEYPAD_Scan+0x10c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000fa4:	492a      	ldr	r1, [pc, #168]	@ (8001050 <KEYPAD_Scan+0x10c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	440b      	add	r3, r1
 8000fac:	889b      	ldrh	r3, [r3, #4]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	f001 fde5 	bl	8002b80 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d128      	bne.n	800100e <KEYPAD_Scan+0xca>
                // Botão pressionado!
                
                // --- Debounce e espera soltar a tecla ---
                HAL_Delay(50); // Simples debounce por atraso
 8000fbc:	2032      	movs	r0, #50	@ 0x32
 8000fbe:	f001 fb39 	bl	8002634 <HAL_Delay>

                // Espera o usuário soltar a tecla para não ler a mesma tecla várias vezes
                while(HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET);
 8000fc2:	bf00      	nop
 8000fc4:	4a22      	ldr	r2, [pc, #136]	@ (8001050 <KEYPAD_Scan+0x10c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000fcc:	4920      	ldr	r1, [pc, #128]	@ (8001050 <KEYPAD_Scan+0x10c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	889b      	ldrh	r3, [r3, #4]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4610      	mov	r0, r2
 8000fda:	f001 fdd1 	bl	8002b80 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0ef      	beq.n	8000fc4 <KEYPAD_Scan+0x80>
                
                // Restaura a coluna para nível alto antes de retornar
                HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8000fe4:	4a19      	ldr	r2, [pc, #100]	@ (800104c <KEYPAD_Scan+0x108>)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fec:	4a17      	ldr	r2, [pc, #92]	@ (800104c <KEYPAD_Scan+0x108>)
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	889b      	ldrh	r3, [r3, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f001 fdd9 	bl	8002bb0 <HAL_GPIO_WritePin>

                return KEYPAD_MAP[row][col];
 8000ffe:	4a15      	ldr	r2, [pc, #84]	@ (8001054 <KEYPAD_Scan+0x110>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	441a      	add	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	e019      	b.n	8001042 <KEYPAD_Scan+0xfe>
        for (int row = 0; row < 4; row++) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3301      	adds	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b03      	cmp	r3, #3
 8001018:	ddc0      	ble.n	8000f9c <KEYPAD_Scan+0x58>
            }
        }

        // Desativa a coluna atual antes de ir para a próxima
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 800101a:	4a0c      	ldr	r2, [pc, #48]	@ (800104c <KEYPAD_Scan+0x108>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <KEYPAD_Scan+0x108>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	889b      	ldrh	r3, [r3, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	f001 fdbe 	bl	8002bb0 <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	3301      	adds	r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dd9d      	ble.n	8000f7c <KEYPAD_Scan+0x38>
    }

    return '\0'; // Retorna nulo se nenhuma tecla for pressionada
 8001040:	2300      	movs	r3, #0
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	20000028 	.word	0x20000028
 8001054:	08008568 	.word	0x08008568

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b09c      	sub	sp, #112	@ 0x70
 800105c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f001 fa77 	bl	8002550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f881 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 f949 	bl	80012fc <MX_GPIO_Init>
  MX_SPI1_Init();
 800106a:	f000 f8e7 	bl	800123c <MX_SPI1_Init>
  MX_UART4_Init();
 800106e:	f000 f91b 	bl	80012a8 <MX_UART4_Init>
  // ETAPA DE INICIALIZAÇÃO
  //--------------------------------------------------------------------

  // 1. Inicializa o display. Ele usará a velocidade alta do SPI configurada
  //    no MX_SPI1_Init(), o que é ótimo para performance gráfica.
  ILI9488_Init();
 8001072:	f7ff fb57 	bl	8000724 <ILI9488_Init>

  // 2. Acende o backlight do display.
  //    (Assumindo que seu pino é o LCD_LED_Pin, como no seu MX_GPIO_Init)
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	4831      	ldr	r0, [pc, #196]	@ (8001140 <main+0xe8>)
 800107c:	f001 fd98 	bl	8002bb0 <HAL_GPIO_WritePin>

  // 3. Prepara a tela para o usuário com uma mensagem de boas-vindas.
  ILI9488_FillScreen(ILI9488_BLACK);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fd99 	bl	8000bb8 <ILI9488_FillScreen>
  ILI9488_WriteString(20, 120, "Sistema Iniciado!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8001086:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <main+0xec>)
 8001088:	2200      	movs	r2, #0
 800108a:	9202      	str	r2, [sp, #8]
 800108c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001090:	9201      	str	r2, [sp, #4]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	9200      	str	r2, [sp, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a2b      	ldr	r2, [pc, #172]	@ (8001148 <main+0xf0>)
 800109a:	2178      	movs	r1, #120	@ 0x78
 800109c:	2014      	movs	r0, #20
 800109e:	f7ff fd3f 	bl	8000b20 <ILI9488_WriteString>
  HAL_Delay(2000); // Uma pequena pausa para o usuário ler a mensagem.
 80010a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010a6:	f001 fac5 	bl	8002634 <HAL_Delay>

  // 4. Limpa a tela para começar a desenhar.
  ILI9488_FillScreen(ILI9488_BLACK);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fd84 	bl	8000bb8 <ILI9488_FillScreen>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osMutexDef(gameMutex);
 80010b0:	2300      	movs	r3, #0
 80010b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010b4:	2300      	movs	r3, #0
 80010b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 80010b8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 ffe8 	bl	8004092 <osMutexCreate>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a21      	ldr	r2, [pc, #132]	@ (800114c <main+0xf4>)
 80010c6:	6013      	str	r3, [r2, #0]

  osThreadDef(initPutHalTask, StartInputHalTask, osPriorityNormal, 0, 128);
 80010c8:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <main+0xf8>)
 80010ca:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80010ce:	461d      	mov	r5, r3
 80010d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  inputHalTaskHandle = osThreadCreate(osThread(initPutHalTask), NULL);
 80010dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 ff75 	bl	8003fd2 <osThreadCreate>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001154 <main+0xfc>)
 80010ec:	6013      	str	r3, [r2, #0]

  osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 256);
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <main+0x100>)
 80010f0:	f107 0420 	add.w	r4, r7, #32
 80010f4:	461d      	mov	r5, r3
 80010f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f002 ff62 	bl	8003fd2 <osThreadCreate>
 800110e:	4603      	mov	r3, r0
 8001110:	4a12      	ldr	r2, [pc, #72]	@ (800115c <main+0x104>)
 8001112:	6013      	str	r3, [r2, #0]

  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <main+0x108>)
 8001116:	1d3c      	adds	r4, r7, #4
 8001118:	461d      	mov	r5, r3
 800111a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f002 ff51 	bl	8003fd2 <osThreadCreate>
 8001130:	4603      	mov	r3, r0
 8001132:	4a0c      	ldr	r2, [pc, #48]	@ (8001164 <main+0x10c>)
 8001134:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001136:	f002 ff45 	bl	8003fc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800113a:	bf00      	nop
 800113c:	e7fd      	b.n	800113a <main+0xe2>
 800113e:	bf00      	nop
 8001140:	40020800 	.word	0x40020800
 8001144:	20000000 	.word	0x20000000
 8001148:	08007be0 	.word	0x08007be0
 800114c:	200003f4 	.word	0x200003f4
 8001150:	08007c04 	.word	0x08007c04
 8001154:	200003e8 	.word	0x200003e8
 8001158:	08007c2c 	.word	0x08007c2c
 800115c:	200003ec 	.word	0x200003ec
 8001160:	08007c54 	.word	0x08007c54
 8001164:	200003f0 	.word	0x200003f0

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	@ 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	@ 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f005 fc89 	bl	8006a8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <SystemClock_Config+0xcc>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <SystemClock_Config+0xcc>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <SystemClock_Config+0xd0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a21      	ldr	r2, [pc, #132]	@ (8001238 <SystemClock_Config+0xd0>)
 80011b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d8:	2308      	movs	r3, #8
 80011da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011dc:	23a8      	movs	r3, #168	@ 0xa8
 80011de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011e4:	2304      	movs	r3, #4
 80011e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fcf9 	bl	8002be4 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f8:	f000 ffbe 	bl	8002178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001208:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001212:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2105      	movs	r1, #5
 800121a:	4618      	mov	r0, r3
 800121c:	f001 ff5a 	bl	80030d4 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001226:	f000 ffa7 	bl	8002178 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	@ 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001242:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <MX_SPI1_Init+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001248:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800124c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_SPI1_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800126c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800126e:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001270:	2208      	movs	r2, #8
 8001272:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_SPI1_Init+0x64>)
 8001288:	220a      	movs	r2, #10
 800128a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_SPI1_Init+0x64>)
 800128e:	f002 f901 	bl	8003494 <HAL_SPI_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001298:	f000 ff6e 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000348 	.word	0x20000348
 80012a4:	40013000 	.word	0x40013000

080012a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_UART4_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_UART4_Init+0x4c>)
 80012e0:	f002 fb82 	bl	80039e8 <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80012ea:	f000 ff45 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200003a0 	.word	0x200003a0
 80012f8:	40004c00 	.word	0x40004c00

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <MX_GPIO_Init+0x140>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a48      	ldr	r2, [pc, #288]	@ (800143c <MX_GPIO_Init+0x140>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b46      	ldr	r3, [pc, #280]	@ (800143c <MX_GPIO_Init+0x140>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b42      	ldr	r3, [pc, #264]	@ (800143c <MX_GPIO_Init+0x140>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a41      	ldr	r2, [pc, #260]	@ (800143c <MX_GPIO_Init+0x140>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b3f      	ldr	r3, [pc, #252]	@ (800143c <MX_GPIO_Init+0x140>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b3b      	ldr	r3, [pc, #236]	@ (800143c <MX_GPIO_Init+0x140>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a3a      	ldr	r2, [pc, #232]	@ (800143c <MX_GPIO_Init+0x140>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b38      	ldr	r3, [pc, #224]	@ (800143c <MX_GPIO_Init+0x140>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b34      	ldr	r3, [pc, #208]	@ (800143c <MX_GPIO_Init+0x140>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a33      	ldr	r2, [pc, #204]	@ (800143c <MX_GPIO_Init+0x140>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b31      	ldr	r3, [pc, #196]	@ (800143c <MX_GPIO_Init+0x140>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2110      	movs	r1, #16
 8001386:	482e      	ldr	r0, [pc, #184]	@ (8001440 <MX_GPIO_Init+0x144>)
 8001388:	f001 fc12 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2103      	movs	r1, #3
 8001390:	482c      	ldr	r0, [pc, #176]	@ (8001444 <MX_GPIO_Init+0x148>)
 8001392:	f001 fc0d 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2180      	movs	r1, #128	@ 0x80
 800139a:	482b      	ldr	r0, [pc, #172]	@ (8001448 <MX_GPIO_Init+0x14c>)
 800139c:	f001 fc08 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	210f      	movs	r1, #15
 80013a4:	4829      	ldr	r0, [pc, #164]	@ (800144c <MX_GPIO_Init+0x150>)
 80013a6:	f001 fc03 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80013aa:	2310      	movs	r3, #16
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	481f      	ldr	r0, [pc, #124]	@ (8001440 <MX_GPIO_Init+0x144>)
 80013c2:	f001 fa41 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 80013c6:	2303      	movs	r3, #3
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4819      	ldr	r0, [pc, #100]	@ (8001444 <MX_GPIO_Init+0x148>)
 80013de:	f001 fa33 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_LED_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 80013e2:	2380      	movs	r3, #128	@ 0x80
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4813      	ldr	r0, [pc, #76]	@ (8001448 <MX_GPIO_Init+0x14c>)
 80013fa:	f001 fa25 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 80013fe:	230f      	movs	r3, #15
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	480d      	ldr	r0, [pc, #52]	@ (800144c <MX_GPIO_Init+0x150>)
 8001416:	f001 fa17 	bl	8002848 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 800141a:	23f0      	movs	r3, #240	@ 0xf0
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001422:	2301      	movs	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4807      	ldr	r0, [pc, #28]	@ (800144c <MX_GPIO_Init+0x150>)
 800142e:	f001 fa0b 	bl	8002848 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	@ 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020400 	.word	0x40020400
 8001448:	40020800 	.word	0x40020800
 800144c:	40020c00 	.word	0x40020c00

08001450 <StartInputHalTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartInputHalTask(void const * argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char cCurrent;
  /* Infinite loop */
  for(;;) // O loop infinito de uma tarefa RTOS é "for(;;)"
  {
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8001458:	f7ff fd74 	bl	8000f44 <KEYPAD_Scan>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    if(cCurrent != '\0')
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <StartInputHalTask+0x1c>
    {
      keyPressed = cCurrent;
 8001466:	4a03      	ldr	r2, [pc, #12]	@ (8001474 <StartInputHalTask+0x24>)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	7013      	strb	r3, [r2, #0]
    }
    osDelay(50);
 800146c:	2032      	movs	r0, #50	@ 0x32
 800146e:	f002 fdfc 	bl	800406a <osDelay>
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8001472:	e7f1      	b.n	8001458 <StartInputHalTask+0x8>
 8001474:	200003f8 	.word	0x200003f8

08001478 <StartGameTask>:
  }
}

void StartGameTask(void const * argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  char cLocalKeyPressed;
  for(;;)
  {
    cLocalKeyPressed = NONE_KEY;
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
    
    osMutexWait(gameMutexHandle, osWaitForever);
 8001484:	4baf      	ldr	r3, [pc, #700]	@ (8001744 <StartGameTask+0x2cc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	4618      	mov	r0, r3
 800148e:	f002 fe19 	bl	80040c4 <osMutexWait>
    if (keyPressed != NONE_KEY) {
 8001492:	4bad      	ldr	r3, [pc, #692]	@ (8001748 <StartGameTask+0x2d0>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <StartGameTask+0x30>
      cLocalKeyPressed = keyPressed;
 800149c:	4baa      	ldr	r3, [pc, #680]	@ (8001748 <StartGameTask+0x2d0>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	73fb      	strb	r3, [r7, #15]
      keyPressed = NONE_KEY; 
 80014a2:	4ba9      	ldr	r3, [pc, #676]	@ (8001748 <StartGameTask+0x2d0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 80014a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001744 <StartGameTask+0x2cc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 fe57 	bl	8004160 <osMutexRelease>
    
    if (cLocalKeyPressed != NONE_KEY)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8273 	beq.w	80019a0 <StartGameTask+0x528>
    {
      osMutexWait(gameMutexHandle, osWaitForever);
 80014ba:	4ba2      	ldr	r3, [pc, #648]	@ (8001744 <StartGameTask+0x2cc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f04f 31ff 	mov.w	r1, #4294967295
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fdfe 	bl	80040c4 <osMutexWait>
      switch(eCurrentState)
 80014c8:	4ba0      	ldr	r3, [pc, #640]	@ (800174c <StartGameTask+0x2d4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	f200 8255 	bhi.w	800197e <StartGameTask+0x506>
 80014d4:	a201      	add	r2, pc, #4	@ (adr r2, 80014dc <StartGameTask+0x64>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	0800151d 	.word	0x0800151d
 80014e4:	080015f1 	.word	0x080015f1
 80014e8:	08001775 	.word	0x08001775
 80014ec:	080018ed 	.word	0x080018ed
 80014f0:	0800196b 	.word	0x0800196b
      {
        case eInitGame:
        {
          eUserPlayer.u8HeartPoints = 100;
 80014f4:	4b96      	ldr	r3, [pc, #600]	@ (8001750 <StartGameTask+0x2d8>)
 80014f6:	2264      	movs	r2, #100	@ 0x64
 80014f8:	701a      	strb	r2, [r3, #0]
          eCpuPlayer.u8HeartPoints = 100;
 80014fa:	4b96      	ldr	r3, [pc, #600]	@ (8001754 <StartGameTask+0x2dc>)
 80014fc:	2264      	movs	r2, #100	@ 0x64
 80014fe:	701a      	strb	r2, [r3, #0]
          if(cLocalKeyPressed == CONFIRM_KEY)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b2a      	cmp	r3, #42	@ 0x2a
 8001504:	f040 8242 	bne.w	800198c <StartGameTask+0x514>
          {
            eCurrentState = eDificultSelect;
 8001508:	4b90      	ldr	r3, [pc, #576]	@ (800174c <StartGameTask+0x2d4>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
            selectedOption = 0;
 800150e:	4b92      	ldr	r3, [pc, #584]	@ (8001758 <StartGameTask+0x2e0>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8001514:	4b91      	ldr	r3, [pc, #580]	@ (800175c <StartGameTask+0x2e4>)
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
            }
          break;
 800151a:	e237      	b.n	800198c <StartGameTask+0x514>
        }
        case eDificultSelect:
        {
          switch(cLocalKeyPressed)
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	3b23      	subs	r3, #35	@ 0x23
 8001520:	2b15      	cmp	r3, #21
 8001522:	d863      	bhi.n	80015ec <StartGameTask+0x174>
 8001524:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <StartGameTask+0xb4>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	080015c1 	.word	0x080015c1
 8001530:	080015ed 	.word	0x080015ed
 8001534:	080015ed 	.word	0x080015ed
 8001538:	080015ed 	.word	0x080015ed
 800153c:	080015ed 	.word	0x080015ed
 8001540:	080015ed 	.word	0x080015ed
 8001544:	080015ed 	.word	0x080015ed
 8001548:	080015cf 	.word	0x080015cf
 800154c:	080015ed 	.word	0x080015ed
 8001550:	080015ed 	.word	0x080015ed
 8001554:	080015ed 	.word	0x080015ed
 8001558:	080015ed 	.word	0x080015ed
 800155c:	080015ed 	.word	0x080015ed
 8001560:	080015ed 	.word	0x080015ed
 8001564:	080015ed 	.word	0x080015ed
 8001568:	080015a3 	.word	0x080015a3
 800156c:	080015ed 	.word	0x080015ed
 8001570:	080015ed 	.word	0x080015ed
 8001574:	080015ed 	.word	0x080015ed
 8001578:	080015ed 	.word	0x080015ed
 800157c:	080015ed 	.word	0x080015ed
 8001580:	08001585 	.word	0x08001585
          {
            case UP_KEY:
            {
              selectedOption = (selectedOption < MENU_OPTIONS_DIFFICULTY - 1) ? selectedOption + 1 : 0;
 8001584:	4b74      	ldr	r3, [pc, #464]	@ (8001758 <StartGameTask+0x2e0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	dc03      	bgt.n	8001594 <StartGameTask+0x11c>
 800158c:	4b72      	ldr	r3, [pc, #456]	@ (8001758 <StartGameTask+0x2e0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	e000      	b.n	8001596 <StartGameTask+0x11e>
 8001594:	2300      	movs	r3, #0
 8001596:	4a70      	ldr	r2, [pc, #448]	@ (8001758 <StartGameTask+0x2e0>)
 8001598:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800159a:	4b70      	ldr	r3, [pc, #448]	@ (800175c <StartGameTask+0x2e4>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
              break;
 80015a0:	e025      	b.n	80015ee <StartGameTask+0x176>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_DIFFICULTY - 1;
 80015a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001758 <StartGameTask+0x2e0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dd03      	ble.n	80015b2 <StartGameTask+0x13a>
 80015aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001758 <StartGameTask+0x2e0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	e000      	b.n	80015b4 <StartGameTask+0x13c>
 80015b2:	2302      	movs	r3, #2
 80015b4:	4a68      	ldr	r2, [pc, #416]	@ (8001758 <StartGameTask+0x2e0>)
 80015b6:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 80015b8:	4b68      	ldr	r3, [pc, #416]	@ (800175c <StartGameTask+0x2e4>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
              break;
 80015be:	e016      	b.n	80015ee <StartGameTask+0x176>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 80015c0:	4b66      	ldr	r3, [pc, #408]	@ (800175c <StartGameTask+0x2e4>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
              eCurrentState = eInitGame;
 80015c6:	4b61      	ldr	r3, [pc, #388]	@ (800174c <StartGameTask+0x2d4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
              break;
 80015cc:	e00f      	b.n	80015ee <StartGameTask+0x176>
            }
            case CONFIRM_KEY:
            {
              selectedDifficulty = (EDificult)selectedOption;
 80015ce:	4b62      	ldr	r3, [pc, #392]	@ (8001758 <StartGameTask+0x2e0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b62      	ldr	r3, [pc, #392]	@ (8001760 <StartGameTask+0x2e8>)
 80015d6:	701a      	strb	r2, [r3, #0]
              eCurrentState = ePersonaSelect;
 80015d8:	4b5c      	ldr	r3, [pc, #368]	@ (800174c <StartGameTask+0x2d4>)
 80015da:	2202      	movs	r2, #2
 80015dc:	701a      	strb	r2, [r3, #0]
              selectedOption = FALSE; // Reseta para o próximo menu
 80015de:	4b5e      	ldr	r3, [pc, #376]	@ (8001758 <StartGameTask+0x2e0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80015e4:	4b5d      	ldr	r3, [pc, #372]	@ (800175c <StartGameTask+0x2e4>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
              break;
 80015ea:	e000      	b.n	80015ee <StartGameTask+0x176>
            }
            default:
            {
              break;
 80015ec:	bf00      	nop
            }
          }
          break;
 80015ee:	e1d2      	b.n	8001996 <StartGameTask+0x51e>
        }
        case ePersonaSelect:
        {
          switch(cLocalKeyPressed)
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	3b23      	subs	r3, #35	@ 0x23
 80015f4:	2b15      	cmp	r3, #21
 80015f6:	f200 80a2 	bhi.w	800173e <StartGameTask+0x2c6>
 80015fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001600 <StartGameTask+0x188>)
 80015fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001600:	08001695 	.word	0x08001695
 8001604:	0800173f 	.word	0x0800173f
 8001608:	0800173f 	.word	0x0800173f
 800160c:	0800173f 	.word	0x0800173f
 8001610:	0800173f 	.word	0x0800173f
 8001614:	0800173f 	.word	0x0800173f
 8001618:	0800173f 	.word	0x0800173f
 800161c:	080016a3 	.word	0x080016a3
 8001620:	0800173f 	.word	0x0800173f
 8001624:	0800173f 	.word	0x0800173f
 8001628:	0800173f 	.word	0x0800173f
 800162c:	0800173f 	.word	0x0800173f
 8001630:	0800173f 	.word	0x0800173f
 8001634:	0800173f 	.word	0x0800173f
 8001638:	0800173f 	.word	0x0800173f
 800163c:	08001677 	.word	0x08001677
 8001640:	0800173f 	.word	0x0800173f
 8001644:	0800173f 	.word	0x0800173f
 8001648:	0800173f 	.word	0x0800173f
 800164c:	0800173f 	.word	0x0800173f
 8001650:	0800173f 	.word	0x0800173f
 8001654:	08001659 	.word	0x08001659
          {
            case UP_KEY:
            {                  
              selectedOption = (selectedOption < MENU_OPTIONS_PERSONA - 1) ? selectedOption + 1 : 0;
 8001658:	4b3f      	ldr	r3, [pc, #252]	@ (8001758 <StartGameTask+0x2e0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b03      	cmp	r3, #3
 800165e:	dc03      	bgt.n	8001668 <StartGameTask+0x1f0>
 8001660:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <StartGameTask+0x2e0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	e000      	b.n	800166a <StartGameTask+0x1f2>
 8001668:	2300      	movs	r3, #0
 800166a:	4a3b      	ldr	r2, [pc, #236]	@ (8001758 <StartGameTask+0x2e0>)
 800166c:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800166e:	4b3b      	ldr	r3, [pc, #236]	@ (800175c <StartGameTask+0x2e4>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
              break;
 8001674:	e064      	b.n	8001740 <StartGameTask+0x2c8>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_PERSONA - 1;
 8001676:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <StartGameTask+0x2e0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	dd03      	ble.n	8001686 <StartGameTask+0x20e>
 800167e:	4b36      	ldr	r3, [pc, #216]	@ (8001758 <StartGameTask+0x2e0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3b01      	subs	r3, #1
 8001684:	e000      	b.n	8001688 <StartGameTask+0x210>
 8001686:	2304      	movs	r3, #4
 8001688:	4a33      	ldr	r2, [pc, #204]	@ (8001758 <StartGameTask+0x2e0>)
 800168a:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800168c:	4b33      	ldr	r3, [pc, #204]	@ (800175c <StartGameTask+0x2e4>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
              break;
 8001692:	e055      	b.n	8001740 <StartGameTask+0x2c8>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8001694:	4b31      	ldr	r3, [pc, #196]	@ (800175c <StartGameTask+0x2e4>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
              eCurrentState = eDificultSelect;
 800169a:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <StartGameTask+0x2d4>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
              break;
 80016a0:	e04e      	b.n	8001740 <StartGameTask+0x2c8>
            }
            case CONFIRM_KEY:
            {
              eUserPlayer.ePersonaElemental = (EElemental)selectedOption;
 80016a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <StartGameTask+0x2e0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <StartGameTask+0x2d8>)
 80016aa:	705a      	strb	r2, [r3, #1]
              eCurrentState = eBattleInit;
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <StartGameTask+0x2d4>)
 80016ae:	2203      	movs	r2, #3
 80016b0:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <StartGameTask+0x2e4>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0;     // Zera o contador de ataques
 80016b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <StartGameTask+0x2ec>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;   // Inicia com a primeira opção (Fogo) pré-selecionada
 80016be:	4b26      	ldr	r3, [pc, #152]	@ (8001758 <StartGameTask+0x2e0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 80016c4:	2204      	movs	r2, #4
 80016c6:	2100      	movs	r1, #0
 80016c8:	4827      	ldr	r0, [pc, #156]	@ (8001768 <StartGameTask+0x2f0>)
 80016ca:	f005 f9e0 	bl	8006a8e <memset>
              memset((void*)eCpuPlayer.eAttackSequential, 0, sizeof(eCpuPlayer.eAttackSequential));
 80016ce:	2204      	movs	r2, #4
 80016d0:	2100      	movs	r1, #0
 80016d2:	4826      	ldr	r0, [pc, #152]	@ (800176c <StartGameTask+0x2f4>)
 80016d4:	f005 f9db 	bl	8006a8e <memset>

              srand(HAL_GetTick()); 
 80016d8:	f000 ffa0 	bl	800261c <HAL_GetTick>
 80016dc:	4603      	mov	r3, r0
 80016de:	4618      	mov	r0, r3
 80016e0:	f005 f842 	bl	8006768 <srand>
              eCpuPlayer.ePersonaElemental = (rand() % 6);
 80016e4:	f005 f86e 	bl	80067c4 <rand>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <StartGameTask+0x2f8>)
 80016ec:	fb83 3102 	smull	r3, r1, r3, r2
 80016f0:	17d3      	asrs	r3, r2, #31
 80016f2:	1ac9      	subs	r1, r1, r3
 80016f4:	460b      	mov	r3, r1
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	1ad1      	subs	r1, r2, r3
 80016fe:	b2ca      	uxtb	r2, r1
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <StartGameTask+0x2dc>)
 8001702:	705a      	strb	r2, [r3, #1]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001704:	2300      	movs	r3, #0
 8001706:	73bb      	strb	r3, [r7, #14]
 8001708:	e015      	b.n	8001736 <StartGameTask+0x2be>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6); 
 800170a:	f005 f85b 	bl	80067c4 <rand>
 800170e:	4602      	mov	r2, r0
 8001710:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <StartGameTask+0x2f8>)
 8001712:	fb83 3102 	smull	r3, r1, r3, r2
 8001716:	17d3      	asrs	r3, r2, #31
 8001718:	1ac9      	subs	r1, r1, r3
 800171a:	460b      	mov	r3, r1
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	440b      	add	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	1ad1      	subs	r1, r2, r3
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	b2c9      	uxtb	r1, r1
 8001728:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <StartGameTask+0x2dc>)
 800172a:	4413      	add	r3, r2
 800172c:	460a      	mov	r2, r1
 800172e:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	3301      	adds	r3, #1
 8001734:	73bb      	strb	r3, [r7, #14]
 8001736:	7bbb      	ldrb	r3, [r7, #14]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d9e6      	bls.n	800170a <StartGameTask+0x292>
              }
              break;
 800173c:	e000      	b.n	8001740 <StartGameTask+0x2c8>
            }
            default:
            {
              break;
 800173e:	bf00      	nop
            }
          }
          break;
 8001740:	e129      	b.n	8001996 <StartGameTask+0x51e>
 8001742:	bf00      	nop
 8001744:	200003f4 	.word	0x200003f4
 8001748:	200003f8 	.word	0x200003f8
 800174c:	200003f9 	.word	0x200003f9
 8001750:	20000404 	.word	0x20000404
 8001754:	2000040c 	.word	0x2000040c
 8001758:	200003fc 	.word	0x200003fc
 800175c:	20000048 	.word	0x20000048
 8001760:	20000400 	.word	0x20000400
 8001764:	20000412 	.word	0x20000412
 8001768:	20000406 	.word	0x20000406
 800176c:	2000040e 	.word	0x2000040e
 8001770:	2aaaaaab 	.word	0x2aaaaaab
        }
        case eBattleInit:
        {
          switch (cLocalKeyPressed)
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	3b23      	subs	r3, #35	@ 0x23
 8001778:	2b21      	cmp	r3, #33	@ 0x21
 800177a:	f200 80b5 	bhi.w	80018e8 <StartGameTask+0x470>
 800177e:	a201      	add	r2, pc, #4	@ (adr r2, 8001784 <StartGameTask+0x30c>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	080018db 	.word	0x080018db
 8001788:	080018e9 	.word	0x080018e9
 800178c:	080018e9 	.word	0x080018e9
 8001790:	080018e9 	.word	0x080018e9
 8001794:	080018e9 	.word	0x080018e9
 8001798:	080018e9 	.word	0x080018e9
 800179c:	080018e9 	.word	0x080018e9
 80017a0:	08001845 	.word	0x08001845
 80017a4:	080018e9 	.word	0x080018e9
 80017a8:	080018e9 	.word	0x080018e9
 80017ac:	080018e9 	.word	0x080018e9
 80017b0:	080018e9 	.word	0x080018e9
 80017b4:	080018e9 	.word	0x080018e9
 80017b8:	080018e9 	.word	0x080018e9
 80017bc:	080018e9 	.word	0x080018e9
 80017c0:	080018e9 	.word	0x080018e9
 80017c4:	080018e9 	.word	0x080018e9
 80017c8:	080018e9 	.word	0x080018e9
 80017cc:	080018e9 	.word	0x080018e9
 80017d0:	080018e9 	.word	0x080018e9
 80017d4:	080018e9 	.word	0x080018e9
 80017d8:	080018e9 	.word	0x080018e9
 80017dc:	080018e9 	.word	0x080018e9
 80017e0:	080018e9 	.word	0x080018e9
 80017e4:	080018e9 	.word	0x080018e9
 80017e8:	080018e9 	.word	0x080018e9
 80017ec:	080018e9 	.word	0x080018e9
 80017f0:	080018e9 	.word	0x080018e9
 80017f4:	080018e9 	.word	0x080018e9
 80017f8:	080018e9 	.word	0x080018e9
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	0800181b 	.word	0x0800181b
 8001804:	08001829 	.word	0x08001829
 8001808:	08001837 	.word	0x08001837
          {
            case FIRE_KEY:
            {
              selectedOption = 0;
 800180c:	4b66      	ldr	r3, [pc, #408]	@ (80019a8 <StartGameTask+0x530>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001812:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <StartGameTask+0x534>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
              break;
 8001818:	e067      	b.n	80018ea <StartGameTask+0x472>
            }
            case WATER_KEY:
            {
              selectedOption = 1;
 800181a:	4b63      	ldr	r3, [pc, #396]	@ (80019a8 <StartGameTask+0x530>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001820:	4b62      	ldr	r3, [pc, #392]	@ (80019ac <StartGameTask+0x534>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
              break;
 8001826:	e060      	b.n	80018ea <StartGameTask+0x472>
            }
            case AIR_KEY: 
            {
              selectedOption = 2;
 8001828:	4b5f      	ldr	r3, [pc, #380]	@ (80019a8 <StartGameTask+0x530>)
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 800182e:	4b5f      	ldr	r3, [pc, #380]	@ (80019ac <StartGameTask+0x534>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
              break;
 8001834:	e059      	b.n	80018ea <StartGameTask+0x472>
            }
            case EARTH_KEY: 
            {
              selectedOption = 3;
 8001836:	4b5c      	ldr	r3, [pc, #368]	@ (80019a8 <StartGameTask+0x530>)
 8001838:	2203      	movs	r2, #3
 800183a:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 800183c:	4b5b      	ldr	r3, [pc, #364]	@ (80019ac <StartGameTask+0x534>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
              break;
 8001842:	e052      	b.n	80018ea <StartGameTask+0x472>
            }
            case CONFIRM_KEY:
            {
              switch(selectedOption)
 8001844:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <StartGameTask+0x530>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d82f      	bhi.n	80018ac <StartGameTask+0x434>
 800184c:	a201      	add	r2, pc, #4	@ (adr r2, 8001854 <StartGameTask+0x3dc>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001865 	.word	0x08001865
 8001858:	08001877 	.word	0x08001877
 800185c:	08001889 	.word	0x08001889
 8001860:	0800189b 	.word	0x0800189b
              {
                  case 0: eUserPlayer.eAttackSequential[u8ContAttack] = eRed;    break;
 8001864:	4b52      	ldr	r3, [pc, #328]	@ (80019b0 <StartGameTask+0x538>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	4b51      	ldr	r3, [pc, #324]	@ (80019b4 <StartGameTask+0x53c>)
 800186e:	4413      	add	r3, r2
 8001870:	2200      	movs	r2, #0
 8001872:	709a      	strb	r2, [r3, #2]
 8001874:	e01a      	b.n	80018ac <StartGameTask+0x434>
                  case 1: eUserPlayer.eAttackSequential[u8ContAttack] = eBlue;   break;
 8001876:	4b4e      	ldr	r3, [pc, #312]	@ (80019b0 <StartGameTask+0x538>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	4b4d      	ldr	r3, [pc, #308]	@ (80019b4 <StartGameTask+0x53c>)
 8001880:	4413      	add	r3, r2
 8001882:	2201      	movs	r2, #1
 8001884:	709a      	strb	r2, [r3, #2]
 8001886:	e011      	b.n	80018ac <StartGameTask+0x434>
                  case 2: eUserPlayer.eAttackSequential[u8ContAttack] = eGreen;  break;
 8001888:	4b49      	ldr	r3, [pc, #292]	@ (80019b0 <StartGameTask+0x538>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	4b48      	ldr	r3, [pc, #288]	@ (80019b4 <StartGameTask+0x53c>)
 8001892:	4413      	add	r3, r2
 8001894:	2202      	movs	r2, #2
 8001896:	709a      	strb	r2, [r3, #2]
 8001898:	e008      	b.n	80018ac <StartGameTask+0x434>
                  case 3: eUserPlayer.eAttackSequential[u8ContAttack] = eYellow; break;
 800189a:	4b45      	ldr	r3, [pc, #276]	@ (80019b0 <StartGameTask+0x538>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b44      	ldr	r3, [pc, #272]	@ (80019b4 <StartGameTask+0x53c>)
 80018a4:	4413      	add	r3, r2
 80018a6:	2203      	movs	r2, #3
 80018a8:	709a      	strb	r2, [r3, #2]
 80018aa:	bf00      	nop
              }
              
              u8ContAttack++; 
 80018ac:	4b40      	ldr	r3, [pc, #256]	@ (80019b0 <StartGameTask+0x538>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b3e      	ldr	r3, [pc, #248]	@ (80019b0 <StartGameTask+0x538>)
 80018b8:	701a      	strb	r2, [r3, #0]
              
              if (u8ContAttack >= ATTACKS_NUMBERS)
 80018ba:	4b3d      	ldr	r3, [pc, #244]	@ (80019b0 <StartGameTask+0x538>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d906      	bls.n	80018d2 <StartGameTask+0x45a>
              {
                vInitBattle(&eUserPlayer, &eCpuPlayer);
 80018c4:	493c      	ldr	r1, [pc, #240]	@ (80019b8 <StartGameTask+0x540>)
 80018c6:	483b      	ldr	r0, [pc, #236]	@ (80019b4 <StartGameTask+0x53c>)
 80018c8:	f7ff f9a4 	bl	8000c14 <vInitBattle>
                eCurrentState = ePlayerTurn;
 80018cc:	4b3b      	ldr	r3, [pc, #236]	@ (80019bc <StartGameTask+0x544>)
 80018ce:	2204      	movs	r2, #4
 80018d0:	701a      	strb	r2, [r3, #0]
              }
              
              u8CleanScreen = TRUE;
 80018d2:	4b36      	ldr	r3, [pc, #216]	@ (80019ac <StartGameTask+0x534>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
              break;
 80018d8:	e007      	b.n	80018ea <StartGameTask+0x472>
            }
            case BACK_KEY:
            {
              eCurrentState = ePersonaSelect;
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <StartGameTask+0x544>)
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80018e0:	4b32      	ldr	r3, [pc, #200]	@ (80019ac <StartGameTask+0x534>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
              break;
 80018e6:	e000      	b.n	80018ea <StartGameTask+0x472>
            }
            default:
            {
              break;
 80018e8:	bf00      	nop
            }
          }
          break;
 80018ea:	e054      	b.n	8001996 <StartGameTask+0x51e>
        }
        case ePlayerTurn:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80018f0:	d14e      	bne.n	8001990 <StartGameTask+0x518>
          {            
            if (eUserPlayer.u8HeartPoints == 0 || eCpuPlayer.u8HeartPoints == 0)
 80018f2:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <StartGameTask+0x53c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <StartGameTask+0x48e>
 80018fc:	4b2e      	ldr	r3, [pc, #184]	@ (80019b8 <StartGameTask+0x540>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d103      	bne.n	800190e <StartGameTask+0x496>
            {
              eCurrentState = eEndGame; 
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <StartGameTask+0x544>)
 8001908:	2205      	movs	r2, #5
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	e029      	b.n	8001962 <StartGameTask+0x4ea>
            }
            else
            {
              // Ninguém perdeu, volta para selecionar novos ataques
              eCurrentState = eBattleInit;
 800190e:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <StartGameTask+0x544>)
 8001910:	2203      	movs	r2, #3
 8001912:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0; // Prepara para o novo round
 8001914:	4b26      	ldr	r3, [pc, #152]	@ (80019b0 <StartGameTask+0x538>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;
 800191a:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <StartGameTask+0x530>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 8001920:	2204      	movs	r2, #4
 8001922:	2100      	movs	r1, #0
 8001924:	4826      	ldr	r0, [pc, #152]	@ (80019c0 <StartGameTask+0x548>)
 8001926:	f005 f8b2 	bl	8006a8e <memset>
              
              // Gera novos ataques para a CPU para o próximo round
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 800192a:	2300      	movs	r3, #0
 800192c:	737b      	strb	r3, [r7, #13]
 800192e:	e015      	b.n	800195c <StartGameTask+0x4e4>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6);
 8001930:	f004 ff48 	bl	80067c4 <rand>
 8001934:	4602      	mov	r2, r0
 8001936:	4b23      	ldr	r3, [pc, #140]	@ (80019c4 <StartGameTask+0x54c>)
 8001938:	fb83 3102 	smull	r3, r1, r3, r2
 800193c:	17d3      	asrs	r3, r2, #31
 800193e:	1ac9      	subs	r1, r1, r3
 8001940:	460b      	mov	r3, r1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	440b      	add	r3, r1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	1ad1      	subs	r1, r2, r3
 800194a:	7b7b      	ldrb	r3, [r7, #13]
 800194c:	b2c9      	uxtb	r1, r1
 800194e:	4a1a      	ldr	r2, [pc, #104]	@ (80019b8 <StartGameTask+0x540>)
 8001950:	4413      	add	r3, r2
 8001952:	460a      	mov	r2, r1
 8001954:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001956:	7b7b      	ldrb	r3, [r7, #13]
 8001958:	3301      	adds	r3, #1
 800195a:	737b      	strb	r3, [r7, #13]
 800195c:	7b7b      	ldrb	r3, [r7, #13]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d9e6      	bls.n	8001930 <StartGameTask+0x4b8>
              }
            }
            u8CleanScreen = TRUE;
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <StartGameTask+0x534>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001968:	e012      	b.n	8001990 <StartGameTask+0x518>
        }
        case eEndGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	2b2a      	cmp	r3, #42	@ 0x2a
 800196e:	d111      	bne.n	8001994 <StartGameTask+0x51c>
          {
            eCurrentState = eInitGame;
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <StartGameTask+0x544>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <StartGameTask+0x534>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800197c:	e00a      	b.n	8001994 <StartGameTask+0x51c>
        }
        default:
        {
          // Estado desconhecido, volta para o início por segurança
          eCurrentState = eInitGame;
 800197e:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <StartGameTask+0x544>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
          u8CleanScreen = TRUE;
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <StartGameTask+0x534>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
          break;
 800198a:	e004      	b.n	8001996 <StartGameTask+0x51e>
          break;
 800198c:	bf00      	nop
 800198e:	e002      	b.n	8001996 <StartGameTask+0x51e>
          break;
 8001990:	bf00      	nop
 8001992:	e000      	b.n	8001996 <StartGameTask+0x51e>
          break;
 8001994:	bf00      	nop
        }
      }
      osMutexRelease(gameMutexHandle);
 8001996:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <StartGameTask+0x550>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fbe0 	bl	8004160 <osMutexRelease>
    }
    osDelay(50);
 80019a0:	2032      	movs	r0, #50	@ 0x32
 80019a2:	f002 fb62 	bl	800406a <osDelay>
    cLocalKeyPressed = NONE_KEY;
 80019a6:	e56b      	b.n	8001480 <StartGameTask+0x8>
 80019a8:	200003fc 	.word	0x200003fc
 80019ac:	20000048 	.word	0x20000048
 80019b0:	20000412 	.word	0x20000412
 80019b4:	20000404 	.word	0x20000404
 80019b8:	2000040c 	.word	0x2000040c
 80019bc:	200003f9 	.word	0x200003f9
 80019c0:	20000406 	.word	0x20000406
 80019c4:	2aaaaaab 	.word	0x2aaaaaab
 80019c8:	200003f4 	.word	0x200003f4

080019cc <StartDisplayTask>:
  }
}

void StartDisplayTask(void const * argument)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b094      	sub	sp, #80	@ 0x50
 80019d0:	af04      	add	r7, sp, #16
 80019d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  char buffer[30];
  uint8_t u8RedrawScreen = FALSE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  for(;;)
  {
    osMutexWait(gameMutexHandle, osWaitForever);
 80019da:	4bb1      	ldr	r3, [pc, #708]	@ (8001ca0 <StartDisplayTask+0x2d4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f04f 31ff 	mov.w	r1, #4294967295
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fb6e 	bl	80040c4 <osMutexWait>
    if (TRUE == u8CleanScreen) {
 80019e8:	4bae      	ldr	r3, [pc, #696]	@ (8001ca4 <StartDisplayTask+0x2d8>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d105      	bne.n	80019fe <StartDisplayTask+0x32>
        u8RedrawScreen = TRUE;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        u8CleanScreen = FALSE;
 80019f8:	4baa      	ldr	r3, [pc, #680]	@ (8001ca4 <StartDisplayTask+0x2d8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 80019fe:	4ba8      	ldr	r3, [pc, #672]	@ (8001ca0 <StartDisplayTask+0x2d4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fbac 	bl	8004160 <osMutexRelease>

    if(TRUE == u8RedrawScreen)
 8001a08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	f040 839a 	bne.w	8002146 <StartDisplayTask+0x77a>
    {
      ClearScreen();
 8001a12:	f7ff fa1d 	bl	8000e50 <ClearScreen>

      switch(eCurrentState)
 8001a16:	4ba4      	ldr	r3, [pc, #656]	@ (8001ca8 <StartDisplayTask+0x2dc>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	f200 8380 	bhi.w	8002122 <StartDisplayTask+0x756>
 8001a22:	a201      	add	r2, pc, #4	@ (adr r2, 8001a28 <StartDisplayTask+0x5c>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a7b 	.word	0x08001a7b
 8001a30:	08001a8b 	.word	0x08001a8b
 8001a34:	08001a9b 	.word	0x08001a9b
 8001a38:	08001e13 	.word	0x08001e13
 8001a3c:	08002059 	.word	0x08002059
      {
          case eInitGame:
          {
            ILI9488_WriteString(5, 10, "ElementalCube!", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001a40:	4b9a      	ldr	r3, [pc, #616]	@ (8001cac <StartDisplayTask+0x2e0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	9202      	str	r2, [sp, #8]
 8001a46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a4a:	9201      	str	r2, [sp, #4]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	9200      	str	r2, [sp, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a97      	ldr	r2, [pc, #604]	@ (8001cb0 <StartDisplayTask+0x2e4>)
 8001a54:	210a      	movs	r1, #10
 8001a56:	2005      	movs	r0, #5
 8001a58:	f7ff f862 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(5, 30, "Pressione *", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001a5c:	4b93      	ldr	r3, [pc, #588]	@ (8001cac <StartDisplayTask+0x2e0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	9202      	str	r2, [sp, #8]
 8001a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a66:	9201      	str	r2, [sp, #4]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	9200      	str	r2, [sp, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a91      	ldr	r2, [pc, #580]	@ (8001cb4 <StartDisplayTask+0x2e8>)
 8001a70:	211e      	movs	r1, #30
 8001a72:	2005      	movs	r0, #5
 8001a74:	f7ff f854 	bl	8000b20 <ILI9488_WriteString>
            break;
 8001a78:	e362      	b.n	8002140 <StartDisplayTask+0x774>
          }
          case eDificultSelect:
          {
            DrawMenu("Selecione Dificuldade", difficultyOptions, MENU_OPTIONS_DIFFICULTY, selectedOption);
 8001a7a:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb8 <StartDisplayTask+0x2ec>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	498e      	ldr	r1, [pc, #568]	@ (8001cbc <StartDisplayTask+0x2f0>)
 8001a82:	488f      	ldr	r0, [pc, #572]	@ (8001cc0 <StartDisplayTask+0x2f4>)
 8001a84:	f7ff f9f4 	bl	8000e70 <DrawMenu>
            break;
 8001a88:	e35a      	b.n	8002140 <StartDisplayTask+0x774>
          }
          case ePersonaSelect:
          {
            DrawMenu("Selecione Personagem", personaOptions, MENU_OPTIONS_PERSONA, selectedOption);
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb8 <StartDisplayTask+0x2ec>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2205      	movs	r2, #5
 8001a90:	498c      	ldr	r1, [pc, #560]	@ (8001cc4 <StartDisplayTask+0x2f8>)
 8001a92:	488d      	ldr	r0, [pc, #564]	@ (8001cc8 <StartDisplayTask+0x2fc>)
 8001a94:	f7ff f9ec 	bl	8000e70 <DrawMenu>
            break;
 8001a98:	e352      	b.n	8002140 <StartDisplayTask+0x774>
          }
          case eBattleInit:
          {
            sprintf(buffer, "Selecione o %d ataque", (u8ContAttack + 1));
 8001a9a:	4b8c      	ldr	r3, [pc, #560]	@ (8001ccc <StartDisplayTask+0x300>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	498a      	ldr	r1, [pc, #552]	@ (8001cd0 <StartDisplayTask+0x304>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 ff8b 	bl	80069c4 <siprintf>
            ILI9488_WriteString(10, 15, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001aae:	4b7f      	ldr	r3, [pc, #508]	@ (8001cac <StartDisplayTask+0x2e0>)
 8001ab0:	f107 0108 	add.w	r1, r7, #8
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	9202      	str	r2, [sp, #8]
 8001ab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001abc:	9201      	str	r2, [sp, #4]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	9200      	str	r2, [sp, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	200a      	movs	r0, #10
 8001aca:	f7ff f829 	bl	8000b20 <ILI9488_WriteString>

            uint16_t colorFogo  = (selectedOption == 0) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001ace:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb8 <StartDisplayTask+0x2ec>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <StartDisplayTask+0x110>
 8001ad6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ada:	e001      	b.n	8001ae0 <StartDisplayTask+0x114>
 8001adc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ae0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            uint16_t colorAgua  = (selectedOption == 1) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001ae2:	4b75      	ldr	r3, [pc, #468]	@ (8001cb8 <StartDisplayTask+0x2ec>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d102      	bne.n	8001af0 <StartDisplayTask+0x124>
 8001aea:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001aee:	e001      	b.n	8001af4 <StartDisplayTask+0x128>
 8001af0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001af4:	857b      	strh	r3, [r7, #42]	@ 0x2a
            uint16_t colorAr    = (selectedOption == 2) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001af6:	4b70      	ldr	r3, [pc, #448]	@ (8001cb8 <StartDisplayTask+0x2ec>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d102      	bne.n	8001b04 <StartDisplayTask+0x138>
 8001afe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b02:	e001      	b.n	8001b08 <StartDisplayTask+0x13c>
 8001b04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b08:	853b      	strh	r3, [r7, #40]	@ 0x28
            uint16_t colorTerra = (selectedOption == 3) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb8 <StartDisplayTask+0x2ec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d102      	bne.n	8001b18 <StartDisplayTask+0x14c>
 8001b12:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b16:	e001      	b.n	8001b1c <StartDisplayTask+0x150>
 8001b18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b1c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            ILI9488_FillRectangle(5, 50, 20, 20, ILI9488_RED);
 8001b1e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2314      	movs	r3, #20
 8001b26:	2214      	movs	r2, #20
 8001b28:	2132      	movs	r1, #50	@ 0x32
 8001b2a:	2005      	movs	r0, #5
 8001b2c:	f7fe ff58 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(40, 55, "A - Fogo", Font_7x10, colorFogo, ILI9488_BLACK);
 8001b30:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <StartDisplayTask+0x2e0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	9202      	str	r2, [sp, #8]
 8001b36:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001b38:	9201      	str	r2, [sp, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	9200      	str	r2, [sp, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a64      	ldr	r2, [pc, #400]	@ (8001cd4 <StartDisplayTask+0x308>)
 8001b42:	2137      	movs	r1, #55	@ 0x37
 8001b44:	2028      	movs	r0, #40	@ 0x28
 8001b46:	f7fe ffeb 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_FillRectangle(5, 85, 20, 20, ILI9488_BLUE);
 8001b4a:	231f      	movs	r3, #31
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2314      	movs	r3, #20
 8001b50:	2214      	movs	r2, #20
 8001b52:	2155      	movs	r1, #85	@ 0x55
 8001b54:	2005      	movs	r0, #5
 8001b56:	f7fe ff43 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(40, 90, "B - Agua", Font_7x10, colorAgua, ILI9488_BLACK);
 8001b5a:	4b54      	ldr	r3, [pc, #336]	@ (8001cac <StartDisplayTask+0x2e0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	9202      	str	r2, [sp, #8]
 8001b60:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001b62:	9201      	str	r2, [sp, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	9200      	str	r2, [sp, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001cd8 <StartDisplayTask+0x30c>)
 8001b6c:	215a      	movs	r1, #90	@ 0x5a
 8001b6e:	2028      	movs	r0, #40	@ 0x28
 8001b70:	f7fe ffd6 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_FillRectangle(200, 50, 25, 25, ILI9488_CYAN);
 8001b74:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2319      	movs	r3, #25
 8001b7c:	2219      	movs	r2, #25
 8001b7e:	2132      	movs	r1, #50	@ 0x32
 8001b80:	20c8      	movs	r0, #200	@ 0xc8
 8001b82:	f7fe ff2d 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(235, 55, "C - Ar", Font_7x10, colorAr, ILI9488_BLACK);
 8001b86:	4b49      	ldr	r3, [pc, #292]	@ (8001cac <StartDisplayTask+0x2e0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001b8e:	9201      	str	r2, [sp, #4]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	9200      	str	r2, [sp, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a51      	ldr	r2, [pc, #324]	@ (8001cdc <StartDisplayTask+0x310>)
 8001b98:	2137      	movs	r1, #55	@ 0x37
 8001b9a:	20eb      	movs	r0, #235	@ 0xeb
 8001b9c:	f7fe ffc0 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_FillRectangle(200, 85, 25, 25, ILI9488_BROWN);
 8001ba0:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2319      	movs	r3, #25
 8001ba8:	2219      	movs	r2, #25
 8001baa:	2155      	movs	r1, #85	@ 0x55
 8001bac:	20c8      	movs	r0, #200	@ 0xc8
 8001bae:	f7fe ff17 	bl	80009e0 <ILI9488_FillRectangle>
            ILI9488_WriteString(235, 90, "D - Terra", Font_7x10, colorTerra, ILI9488_BLACK);
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cac <StartDisplayTask+0x2e0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	9202      	str	r2, [sp, #8]
 8001bb8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bba:	9201      	str	r2, [sp, #4]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a47      	ldr	r2, [pc, #284]	@ (8001ce0 <StartDisplayTask+0x314>)
 8001bc4:	215a      	movs	r1, #90	@ 0x5a
 8001bc6:	20eb      	movs	r0, #235	@ 0xeb
 8001bc8:	f7fe ffaa 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(5, 110, "Player:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001bcc:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <StartDisplayTask+0x2e0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	9202      	str	r2, [sp, #8]
 8001bd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd6:	9201      	str	r2, [sp, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	9200      	str	r2, [sp, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a41      	ldr	r2, [pc, #260]	@ (8001ce4 <StartDisplayTask+0x318>)
 8001be0:	216e      	movs	r1, #110	@ 0x6e
 8001be2:	2005      	movs	r0, #5
 8001be4:	f7fe ff9c 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(5, 150, "CPU:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001be8:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <StartDisplayTask+0x2e0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	9202      	str	r2, [sp, #8]
 8001bee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bf2:	9201      	str	r2, [sp, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	9200      	str	r2, [sp, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce8 <StartDisplayTask+0x31c>)
 8001bfc:	2196      	movs	r1, #150	@ 0x96
 8001bfe:	2005      	movs	r0, #5
 8001c00:	f7fe ff8e 	bl	8000b20 <ILI9488_WriteString>

            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001c0a:	e0a9      	b.n	8001d60 <StartDisplayTask+0x394>
            {
              uint8_t showAttack = FALSE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
              if (selectedDifficulty == eDificultEasy) { showAttack = TRUE; }
 8001c12:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <StartDisplayTask+0x320>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d103      	bne.n	8001c24 <StartDisplayTask+0x258>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001c22:	e00f      	b.n	8001c44 <StartDisplayTask+0x278>
              else if (selectedDifficulty == eDificultMedium) { if (i == 0 || i == 2) { showAttack = TRUE; } }
 8001c24:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <StartDisplayTask+0x320>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10a      	bne.n	8001c44 <StartDisplayTask+0x278>
 8001c2e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <StartDisplayTask+0x272>
 8001c36:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d102      	bne.n	8001c44 <StartDisplayTask+0x278>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
              if(showAttack) {
 8001c44:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d06d      	beq.n	8001d28 <StartDisplayTask+0x35c>
                uint16_t attackColor = ILI9488_WHITE;
 8001c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c50:	877b      	strh	r3, [r7, #58]	@ 0x3a
                switch(eCpuPlayer.eAttackSequential[i]) {
 8001c52:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001c56:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <StartDisplayTask+0x324>)
 8001c58:	4413      	add	r3, r2
 8001c5a:	789b      	ldrb	r3, [r3, #2]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d850      	bhi.n	8001d04 <StartDisplayTask+0x338>
 8001c62:	a201      	add	r2, pc, #4	@ (adr r2, 8001c68 <StartDisplayTask+0x29c>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c81 	.word	0x08001c81
 8001c6c:	08001c89 	.word	0x08001c89
 8001c70:	08001c8f 	.word	0x08001c8f
 8001c74:	08001c97 	.word	0x08001c97
 8001c78:	08001cf5 	.word	0x08001cf5
 8001c7c:	08001cfd 	.word	0x08001cfd
                    case eRed:    attackColor = ILI9488_RED;   break;
 8001c80:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c84:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001c86:	e03d      	b.n	8001d04 <StartDisplayTask+0x338>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 8001c88:	231f      	movs	r3, #31
 8001c8a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001c8c:	e03a      	b.n	8001d04 <StartDisplayTask+0x338>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 8001c8e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c92:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001c94:	e036      	b.n	8001d04 <StartDisplayTask+0x338>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 8001c96:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001c9a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001c9c:	e032      	b.n	8001d04 <StartDisplayTask+0x338>
 8001c9e:	bf00      	nop
 8001ca0:	200003f4 	.word	0x200003f4
 8001ca4:	20000048 	.word	0x20000048
 8001ca8:	200003f9 	.word	0x200003f9
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	08007c70 	.word	0x08007c70
 8001cb4:	08007c80 	.word	0x08007c80
 8001cb8:	200003fc 	.word	0x200003fc
 8001cbc:	2000004c 	.word	0x2000004c
 8001cc0:	08007c8c 	.word	0x08007c8c
 8001cc4:	20000058 	.word	0x20000058
 8001cc8:	08007ca4 	.word	0x08007ca4
 8001ccc:	20000412 	.word	0x20000412
 8001cd0:	08007cbc 	.word	0x08007cbc
 8001cd4:	08007cd4 	.word	0x08007cd4
 8001cd8:	08007ce0 	.word	0x08007ce0
 8001cdc:	08007cec 	.word	0x08007cec
 8001ce0:	08007cf4 	.word	0x08007cf4
 8001ce4:	08007d00 	.word	0x08007d00
 8001ce8:	08007d08 	.word	0x08007d08
 8001cec:	20000400 	.word	0x20000400
 8001cf0:	2000040c 	.word	0x2000040c
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 8001cf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cf8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001cfa:	e003      	b.n	8001d04 <StartDisplayTask+0x338>
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 8001cfc:	f246 330c 	movw	r3, #25356	@ 0x630c
 8001d00:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001d02:	bf00      	nop
                }
                ILI9488_FillRectangle(5 + (i * 30), 160, 20, 20, attackColor);
 8001d04:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3305      	adds	r3, #5
 8001d16:	b298      	uxth	r0, r3
 8001d18:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2314      	movs	r3, #20
 8001d1e:	2214      	movs	r2, #20
 8001d20:	21a0      	movs	r1, #160	@ 0xa0
 8001d22:	f7fe fe5d 	bl	80009e0 <ILI9488_FillRectangle>
 8001d26:	e016      	b.n	8001d56 <StartDisplayTask+0x38a>
              } else {
                ILI9488_WriteString(5 + (i * 30), 160, "??", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001d28:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3305      	adds	r3, #5
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	4ba5      	ldr	r3, [pc, #660]	@ (8001fd4 <StartDisplayTask+0x608>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	9202      	str	r2, [sp, #8]
 8001d42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d46:	9201      	str	r2, [sp, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	9200      	str	r2, [sp, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4aa2      	ldr	r2, [pc, #648]	@ (8001fd8 <StartDisplayTask+0x60c>)
 8001d50:	21a0      	movs	r1, #160	@ 0xa0
 8001d52:	f7fe fee5 	bl	8000b20 <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001d56:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001d60:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	f67f af51 	bls.w	8001c0c <StartDisplayTask+0x240>
              }
            }
            for(uint8_t i = 0; i < u8ContAttack; i++) {
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001d70:	e047      	b.n	8001e02 <StartDisplayTask+0x436>
              uint16_t attackColor = ILI9488_WHITE;
 8001d72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d76:	86fb      	strh	r3, [r7, #54]	@ 0x36
              switch(eUserPlayer.eAttackSequential[i]) {
 8001d78:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001d7c:	4a97      	ldr	r2, [pc, #604]	@ (8001fdc <StartDisplayTask+0x610>)
 8001d7e:	4413      	add	r3, r2
 8001d80:	789b      	ldrb	r3, [r3, #2]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d826      	bhi.n	8001dd6 <StartDisplayTask+0x40a>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <StartDisplayTask+0x3c4>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001da9 	.word	0x08001da9
 8001d94:	08001db1 	.word	0x08001db1
 8001d98:	08001db7 	.word	0x08001db7
 8001d9c:	08001dbf 	.word	0x08001dbf
 8001da0:	08001dc7 	.word	0x08001dc7
 8001da4:	08001dcf 	.word	0x08001dcf
                  case eRed:    attackColor = ILI9488_RED;   break;
 8001da8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001dae:	e012      	b.n	8001dd6 <StartDisplayTask+0x40a>
                  case eBlue:   attackColor = ILI9488_BLUE;  break;
 8001db0:	231f      	movs	r3, #31
 8001db2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001db4:	e00f      	b.n	8001dd6 <StartDisplayTask+0x40a>
                  case eGreen:  attackColor = ILI9488_CYAN;  break;
 8001db6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001dba:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001dbc:	e00b      	b.n	8001dd6 <StartDisplayTask+0x40a>
                  case eYellow: attackColor = ILI9488_BROWN; break;
 8001dbe:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001dc2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001dc4:	e007      	b.n	8001dd6 <StartDisplayTask+0x40a>
                  case eWhite:  attackColor = ILI9488_WHITE; break;
 8001dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001dcc:	e003      	b.n	8001dd6 <StartDisplayTask+0x40a>
                  case eBlack:  attackColor = ILI9488_GRAY;  break;
 8001dce:	f246 330c 	movw	r3, #25356	@ 0x630c
 8001dd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001dd4:	bf00      	nop
              }
              ILI9488_FillRectangle(5 + (i * 30), 120, 20, 20, attackColor);
 8001dd6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3305      	adds	r3, #5
 8001de8:	b298      	uxth	r0, r3
 8001dea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2314      	movs	r3, #20
 8001df0:	2214      	movs	r2, #20
 8001df2:	2178      	movs	r1, #120	@ 0x78
 8001df4:	f7fe fdf4 	bl	80009e0 <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < u8ContAttack; i++) {
 8001df8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001e02:	4b77      	ldr	r3, [pc, #476]	@ (8001fe0 <StartDisplayTask+0x614>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3b0      	bcc.n	8001d72 <StartDisplayTask+0x3a6>
            }
            break;
 8001e10:	e196      	b.n	8002140 <StartDisplayTask+0x774>
          }
          case ePlayerTurn:
          {
            ILI9488_WriteString(10, 20, "Resultado do Round", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001e12:	4b70      	ldr	r3, [pc, #448]	@ (8001fd4 <StartDisplayTask+0x608>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	9202      	str	r2, [sp, #8]
 8001e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e1c:	9201      	str	r2, [sp, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	9200      	str	r2, [sp, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6f      	ldr	r2, [pc, #444]	@ (8001fe4 <StartDisplayTask+0x618>)
 8001e26:	2114      	movs	r1, #20
 8001e28:	200a      	movs	r0, #10
 8001e2a:	f7fe fe79 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "Sua Vida: %d", eUserPlayer.u8HeartPoints);
 8001e2e:	4b6b      	ldr	r3, [pc, #428]	@ (8001fdc <StartDisplayTask+0x610>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	496b      	ldr	r1, [pc, #428]	@ (8001fe8 <StartDisplayTask+0x61c>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f004 fdc1 	bl	80069c4 <siprintf>
            ILI9488_WriteString(10, 60, buffer, Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8001e42:	4b64      	ldr	r3, [pc, #400]	@ (8001fd4 <StartDisplayTask+0x608>)
 8001e44:	f107 0108 	add.w	r1, r7, #8
 8001e48:	2200      	movs	r2, #0
 8001e4a:	9202      	str	r2, [sp, #8]
 8001e4c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001e50:	9201      	str	r2, [sp, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	9200      	str	r2, [sp, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	460a      	mov	r2, r1
 8001e5a:	213c      	movs	r1, #60	@ 0x3c
 8001e5c:	200a      	movs	r0, #10
 8001e5e:	f7fe fe5f 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "Vida CPU: %d", eCpuPlayer.u8HeartPoints);
 8001e62:	4b62      	ldr	r3, [pc, #392]	@ (8001fec <StartDisplayTask+0x620>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f107 0308 	add.w	r3, r7, #8
 8001e6e:	4960      	ldr	r1, [pc, #384]	@ (8001ff0 <StartDisplayTask+0x624>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 fda7 	bl	80069c4 <siprintf>
            ILI9488_WriteString(10, 90, buffer, Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8001e76:	4b57      	ldr	r3, [pc, #348]	@ (8001fd4 <StartDisplayTask+0x608>)
 8001e78:	f107 0108 	add.w	r1, r7, #8
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	9202      	str	r2, [sp, #8]
 8001e80:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e84:	9201      	str	r2, [sp, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	9200      	str	r2, [sp, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	460a      	mov	r2, r1
 8001e8e:	215a      	movs	r1, #90	@ 0x5a
 8001e90:	200a      	movs	r0, #10
 8001e92:	f7fe fe45 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(10, 130, "Seus Ataques:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001e96:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd4 <StartDisplayTask+0x608>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	9202      	str	r2, [sp, #8]
 8001e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ea0:	9201      	str	r2, [sp, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	9200      	str	r2, [sp, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <StartDisplayTask+0x628>)
 8001eaa:	2182      	movs	r1, #130	@ 0x82
 8001eac:	200a      	movs	r0, #10
 8001eae:	f7fe fe37 	bl	8000b20 <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001eb8:	e047      	b.n	8001f4a <StartDisplayTask+0x57e>
                uint16_t attackColor = ILI9488_WHITE;
 8001eba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ebe:	867b      	strh	r3, [r7, #50]	@ 0x32
                switch(eUserPlayer.eAttackSequential[i]) {
 8001ec0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ec4:	4a45      	ldr	r2, [pc, #276]	@ (8001fdc <StartDisplayTask+0x610>)
 8001ec6:	4413      	add	r3, r2
 8001ec8:	789b      	ldrb	r3, [r3, #2]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d826      	bhi.n	8001f1e <StartDisplayTask+0x552>
 8001ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed8 <StartDisplayTask+0x50c>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001ef9 	.word	0x08001ef9
 8001ee0:	08001eff 	.word	0x08001eff
 8001ee4:	08001f07 	.word	0x08001f07
 8001ee8:	08001f0f 	.word	0x08001f0f
 8001eec:	08001f17 	.word	0x08001f17
                    case eRed:    attackColor = ILI9488_RED;   break;
 8001ef0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ef4:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001ef6:	e012      	b.n	8001f1e <StartDisplayTask+0x552>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 8001ef8:	231f      	movs	r3, #31
 8001efa:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001efc:	e00f      	b.n	8001f1e <StartDisplayTask+0x552>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 8001efe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001f02:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001f04:	e00b      	b.n	8001f1e <StartDisplayTask+0x552>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 8001f06:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001f0a:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001f0c:	e007      	b.n	8001f1e <StartDisplayTask+0x552>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 8001f0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f12:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001f14:	e003      	b.n	8001f1e <StartDisplayTask+0x552>
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 8001f16:	f246 330c 	movw	r3, #25356	@ 0x630c
 8001f1a:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001f1c:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 150, 20, 20, attackColor);
 8001f1e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	330a      	adds	r3, #10
 8001f30:	b298      	uxth	r0, r3
 8001f32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2314      	movs	r3, #20
 8001f38:	2214      	movs	r2, #20
 8001f3a:	2196      	movs	r1, #150	@ 0x96
 8001f3c:	f7fe fd50 	bl	80009e0 <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8001f40:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f44:	3301      	adds	r3, #1
 8001f46:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001f4a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d9b3      	bls.n	8001eba <StartDisplayTask+0x4ee>
            }
            ILI9488_WriteString(10, 190, "Ataques CPU:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001f52:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <StartDisplayTask+0x608>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	9202      	str	r2, [sp, #8]
 8001f58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f5c:	9201      	str	r2, [sp, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	9200      	str	r2, [sp, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a24      	ldr	r2, [pc, #144]	@ (8001ff8 <StartDisplayTask+0x62c>)
 8001f66:	21be      	movs	r1, #190	@ 0xbe
 8001f68:	200a      	movs	r0, #10
 8001f6a:	f7fe fdd9 	bl	8000b20 <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001f74:	e05c      	b.n	8002030 <StartDisplayTask+0x664>
                uint16_t attackColor = ILI9488_WHITE;
 8001f76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                switch(eCpuPlayer.eAttackSequential[i]) {
 8001f7c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001f80:	4a1a      	ldr	r2, [pc, #104]	@ (8001fec <StartDisplayTask+0x620>)
 8001f82:	4413      	add	r3, r2
 8001f84:	789b      	ldrb	r3, [r3, #2]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d83b      	bhi.n	8002004 <StartDisplayTask+0x638>
 8001f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f94 <StartDisplayTask+0x5c8>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fad 	.word	0x08001fad
 8001f98:	08001fb5 	.word	0x08001fb5
 8001f9c:	08001fbb 	.word	0x08001fbb
 8001fa0:	08001fc3 	.word	0x08001fc3
 8001fa4:	08001fcb 	.word	0x08001fcb
 8001fa8:	08001ffd 	.word	0x08001ffd
                    case eRed:    attackColor = ILI9488_RED;   break;
 8001fac:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001fb0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001fb2:	e027      	b.n	8002004 <StartDisplayTask+0x638>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 8001fb4:	231f      	movs	r3, #31
 8001fb6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001fb8:	e024      	b.n	8002004 <StartDisplayTask+0x638>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 8001fba:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001fbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001fc0:	e020      	b.n	8002004 <StartDisplayTask+0x638>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 8001fc2:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001fc6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001fc8:	e01c      	b.n	8002004 <StartDisplayTask+0x638>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 8001fca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001fd0:	e018      	b.n	8002004 <StartDisplayTask+0x638>
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	08007d10 	.word	0x08007d10
 8001fdc:	20000404 	.word	0x20000404
 8001fe0:	20000412 	.word	0x20000412
 8001fe4:	08007d14 	.word	0x08007d14
 8001fe8:	08007d28 	.word	0x08007d28
 8001fec:	2000040c 	.word	0x2000040c
 8001ff0:	08007d38 	.word	0x08007d38
 8001ff4:	08007d48 	.word	0x08007d48
 8001ff8:	08007d58 	.word	0x08007d58
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 8001ffc:	f246 330c 	movw	r3, #25356	@ 0x630c
 8002000:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002002:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 210, 20, 20, attackColor);
 8002004:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	b29b      	uxth	r3, r3
 8002014:	330a      	adds	r3, #10
 8002016:	b298      	uxth	r0, r3
 8002018:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2314      	movs	r3, #20
 800201e:	2214      	movs	r2, #20
 8002020:	21d2      	movs	r1, #210	@ 0xd2
 8002022:	f7fe fcdd 	bl	80009e0 <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002026:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800202a:	3301      	adds	r3, #1
 800202c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002030:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002034:	2b03      	cmp	r3, #3
 8002036:	d99e      	bls.n	8001f76 <StartDisplayTask+0x5aa>
            }
            ILI9488_WriteString(10, 280, "Pressione * para continuar...", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 8002038:	4b45      	ldr	r3, [pc, #276]	@ (8002150 <StartDisplayTask+0x784>)
 800203a:	2200      	movs	r2, #0
 800203c:	9202      	str	r2, [sp, #8]
 800203e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002042:	9201      	str	r2, [sp, #4]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	9200      	str	r2, [sp, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a42      	ldr	r2, [pc, #264]	@ (8002154 <StartDisplayTask+0x788>)
 800204c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002050:	200a      	movs	r0, #10
 8002052:	f7fe fd65 	bl	8000b20 <ILI9488_WriteString>
            break;
 8002056:	e073      	b.n	8002140 <StartDisplayTask+0x774>
          }
          case eEndGame:
          {
            if (eUserPlayer.u8HeartPoints > 0) {
 8002058:	4b3f      	ldr	r3, [pc, #252]	@ (8002158 <StartDisplayTask+0x78c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00e      	beq.n	8002080 <StartDisplayTask+0x6b4>
                ILI9488_WriteString(70, 80, "VITORIA!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8002062:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <StartDisplayTask+0x784>)
 8002064:	2200      	movs	r2, #0
 8002066:	9202      	str	r2, [sp, #8]
 8002068:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800206c:	9201      	str	r2, [sp, #4]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	9200      	str	r2, [sp, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a39      	ldr	r2, [pc, #228]	@ (800215c <StartDisplayTask+0x790>)
 8002076:	2150      	movs	r1, #80	@ 0x50
 8002078:	2046      	movs	r0, #70	@ 0x46
 800207a:	f7fe fd51 	bl	8000b20 <ILI9488_WriteString>
 800207e:	e00d      	b.n	800209c <StartDisplayTask+0x6d0>
            } else {
                ILI9488_WriteString(70, 80, "DERROTA!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8002080:	4b33      	ldr	r3, [pc, #204]	@ (8002150 <StartDisplayTask+0x784>)
 8002082:	2200      	movs	r2, #0
 8002084:	9202      	str	r2, [sp, #8]
 8002086:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a33      	ldr	r2, [pc, #204]	@ (8002160 <StartDisplayTask+0x794>)
 8002094:	2150      	movs	r1, #80	@ 0x50
 8002096:	2046      	movs	r0, #70	@ 0x46
 8002098:	f7fe fd42 	bl	8000b20 <ILI9488_WriteString>
            }
            sprintf(buffer, "Sua Vida Final: %d", eUserPlayer.u8HeartPoints);
 800209c:	4b2e      	ldr	r3, [pc, #184]	@ (8002158 <StartDisplayTask+0x78c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	492e      	ldr	r1, [pc, #184]	@ (8002164 <StartDisplayTask+0x798>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fc8a 	bl	80069c4 <siprintf>
            ILI9488_WriteString(10, 140, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80020b0:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <StartDisplayTask+0x784>)
 80020b2:	f107 0108 	add.w	r1, r7, #8
 80020b6:	2200      	movs	r2, #0
 80020b8:	9202      	str	r2, [sp, #8]
 80020ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020be:	9201      	str	r2, [sp, #4]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	9200      	str	r2, [sp, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	460a      	mov	r2, r1
 80020c8:	218c      	movs	r1, #140	@ 0x8c
 80020ca:	200a      	movs	r0, #10
 80020cc:	f7fe fd28 	bl	8000b20 <ILI9488_WriteString>
            sprintf(buffer, "Vida Final CPU: %d", eCpuPlayer.u8HeartPoints);
 80020d0:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <StartDisplayTask+0x79c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	f107 0308 	add.w	r3, r7, #8
 80020dc:	4923      	ldr	r1, [pc, #140]	@ (800216c <StartDisplayTask+0x7a0>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 fc70 	bl	80069c4 <siprintf>
            ILI9488_WriteString(10, 160, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80020e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <StartDisplayTask+0x784>)
 80020e6:	f107 0108 	add.w	r1, r7, #8
 80020ea:	2200      	movs	r2, #0
 80020ec:	9202      	str	r2, [sp, #8]
 80020ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020f2:	9201      	str	r2, [sp, #4]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	9200      	str	r2, [sp, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	460a      	mov	r2, r1
 80020fc:	21a0      	movs	r1, #160	@ 0xa0
 80020fe:	200a      	movs	r0, #10
 8002100:	f7fe fd0e 	bl	8000b20 <ILI9488_WriteString>
            ILI9488_WriteString(10, 250, "Pressione * para recomecar", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <StartDisplayTask+0x784>)
 8002106:	2200      	movs	r2, #0
 8002108:	9202      	str	r2, [sp, #8]
 800210a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800210e:	9201      	str	r2, [sp, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	9200      	str	r2, [sp, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a16      	ldr	r2, [pc, #88]	@ (8002170 <StartDisplayTask+0x7a4>)
 8002118:	21fa      	movs	r1, #250	@ 0xfa
 800211a:	200a      	movs	r0, #10
 800211c:	f7fe fd00 	bl	8000b20 <ILI9488_WriteString>
            break;
 8002120:	e00e      	b.n	8002140 <StartDisplayTask+0x774>
          }
          default:
          {
            ILI9488_WriteString(10, 10, "Erro de Estado!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8002122:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <StartDisplayTask+0x784>)
 8002124:	2200      	movs	r2, #0
 8002126:	9202      	str	r2, [sp, #8]
 8002128:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800212c:	9201      	str	r2, [sp, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	9200      	str	r2, [sp, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0f      	ldr	r2, [pc, #60]	@ (8002174 <StartDisplayTask+0x7a8>)
 8002136:	210a      	movs	r1, #10
 8002138:	200a      	movs	r0, #10
 800213a:	f7fe fcf1 	bl	8000b20 <ILI9488_WriteString>
            break;
 800213e:	bf00      	nop
          }
      }
      u8RedrawScreen = FALSE;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    osDelay(5);
 8002146:	2005      	movs	r0, #5
 8002148:	f001 ff8f 	bl	800406a <osDelay>
    osMutexWait(gameMutexHandle, osWaitForever);
 800214c:	e445      	b.n	80019da <StartDisplayTask+0xe>
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000
 8002154:	08007d68 	.word	0x08007d68
 8002158:	20000404 	.word	0x20000404
 800215c:	08007d88 	.word	0x08007d88
 8002160:	08007d94 	.word	0x08007d94
 8002164:	08007da0 	.word	0x08007da0
 8002168:	2000040c 	.word	0x2000040c
 800216c:	08007db4 	.word	0x08007db4
 8002170:	08007dc8 	.word	0x08007dc8
 8002174:	08007de4 	.word	0x08007de4

08002178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800217c:	b672      	cpsid	i
}
 800217e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <Error_Handler+0x8>

08002184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_MspInit+0x54>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	4a11      	ldr	r2, [pc, #68]	@ (80021d8 <HAL_MspInit+0x54>)
 8002194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002198:	6453      	str	r3, [r2, #68]	@ 0x44
 800219a:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <HAL_MspInit+0x54>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_MspInit+0x54>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <HAL_MspInit+0x54>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_MspInit+0x54>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	210f      	movs	r1, #15
 80021c6:	f06f 0001 	mvn.w	r0, #1
 80021ca:	f000 fb14 	bl	80027f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	@ (8002260 <HAL_SPI_MspInit+0x84>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d12b      	bne.n	8002256 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_SPI_MspInit+0x88>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_SPI_MspInit+0x88>)
 8002208:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_SPI_MspInit+0x88>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_SPI_MspInit+0x88>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a10      	ldr	r2, [pc, #64]	@ (8002264 <HAL_SPI_MspInit+0x88>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_SPI_MspInit+0x88>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8002236:	23e0      	movs	r3, #224	@ 0xe0
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002246:	2305      	movs	r3, #5
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4805      	ldr	r0, [pc, #20]	@ (8002268 <HAL_SPI_MspInit+0x8c>)
 8002252:	f000 faf9 	bl	8002848 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	@ 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40013000 	.word	0x40013000
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000

0800226c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	@ 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <HAL_UART_MspInit+0x84>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d12b      	bne.n	80022e6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_UART_MspInit+0x88>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	4a17      	ldr	r2, [pc, #92]	@ (80022f4 <HAL_UART_MspInit+0x88>)
 8002298:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800229c:	6413      	str	r3, [r2, #64]	@ 0x40
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_UART_MspInit+0x88>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_UART_MspInit+0x88>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	4a10      	ldr	r2, [pc, #64]	@ (80022f4 <HAL_UART_MspInit+0x88>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <HAL_UART_MspInit+0x88>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022c6:	2303      	movs	r3, #3
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022d6:	2308      	movs	r3, #8
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	@ (80022f8 <HAL_UART_MspInit+0x8c>)
 80022e2:	f000 fab1 	bl	8002848 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80022e6:	bf00      	nop
 80022e8:	3728      	adds	r7, #40	@ 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40004c00 	.word	0x40004c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <NMI_Handler+0x4>

08002304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <HardFault_Handler+0x4>

0800230c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <MemManage_Handler+0x4>

08002314 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <BusFault_Handler+0x4>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <UsageFault_Handler+0x4>

08002324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002336:	f000 f95d 	bl	80025f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800233a:	f003 fbad 	bl	8005a98 <xTaskGetSchedulerState>
 800233e:	4603      	mov	r3, r0
 8002340:	2b01      	cmp	r3, #1
 8002342:	d001      	beq.n	8002348 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002344:	f003 ff90 	bl	8006268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return 1;
 8002350:	2301      	movs	r3, #1
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_kill>:

int _kill(int pid, int sig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002366:	f004 fbe1 	bl	8006b2c <__errno>
 800236a:	4603      	mov	r3, r0
 800236c:	2216      	movs	r2, #22
 800236e:	601a      	str	r2, [r3, #0]
  return -1;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_exit>:

void _exit (int status)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ffe7 	bl	800235c <_kill>
  while (1) {}    /* Make sure we hang here */
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <_exit+0x12>

08002392 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e00a      	b.n	80023ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023a4:	f3af 8000 	nop.w
 80023a8:	4601      	mov	r1, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	60ba      	str	r2, [r7, #8]
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3301      	adds	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbf0      	blt.n	80023a4 <_read+0x12>
  }

  return len;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e009      	b.n	80023f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	60ba      	str	r2, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3301      	adds	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	dbf1      	blt.n	80023de <_write+0x12>
  }
  return len;
 80023fa:	687b      	ldr	r3, [r7, #4]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_close>:

int _close(int file)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800242c:	605a      	str	r2, [r3, #4]
  return 0;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_isatty>:

int _isatty(int file)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002444:	2301      	movs	r3, #1
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002474:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <_sbrk+0x5c>)
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <_sbrk+0x60>)
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <_sbrk+0x64>)
 800248a:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <_sbrk+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800249c:	f004 fb46 	bl	8006b2c <__errno>
 80024a0:	4603      	mov	r3, r0
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20020000 	.word	0x20020000
 80024cc:	00000400 	.word	0x00000400
 80024d0:	20000414 	.word	0x20000414
 80024d4:	200042c0 	.word	0x200042c0

080024d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <SystemInit+0x20>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <SystemInit+0x20>)
 80024e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002534 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002500:	f7ff ffea 	bl	80024d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002504:	480c      	ldr	r0, [pc, #48]	@ (8002538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002506:	490d      	ldr	r1, [pc, #52]	@ (800253c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800251c:	4c0a      	ldr	r4, [pc, #40]	@ (8002548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800252a:	f004 fb05 	bl	8006b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800252e:	f7fe fd93 	bl	8001058 <main>
  bx  lr    
 8002532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800253c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002540:	08008680 	.word	0x08008680
  ldr r2, =_sbss
 8002544:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002548:	200042bc 	.word	0x200042bc

0800254c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800254c:	e7fe      	b.n	800254c <ADC_IRQHandler>
	...

08002550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <HAL_Init+0x40>)
 800255a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800255e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <HAL_Init+0x40>)
 8002566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800256a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256c:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a07      	ldr	r2, [pc, #28]	@ (8002590 <HAL_Init+0x40>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002578:	2003      	movs	r0, #3
 800257a:	f000 f931 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257e:	200f      	movs	r0, #15
 8002580:	f000 f808 	bl	8002594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002584:	f7ff fdfe 	bl	8002184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00

08002594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800259c:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <HAL_InitTick+0x54>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <HAL_InitTick+0x58>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f93b 	bl	800282e <HAL_SYSTICK_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00e      	b.n	80025e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d80a      	bhi.n	80025de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c8:	2200      	movs	r2, #0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f000 f911 	bl	80027f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d4:	4a06      	ldr	r2, [pc, #24]	@ (80025f0 <HAL_InitTick+0x5c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000006c 	.word	0x2000006c
 80025ec:	20000074 	.word	0x20000074
 80025f0:	20000070 	.word	0x20000070

080025f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f8:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_IncTick+0x20>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x24>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4413      	add	r3, r2
 8002604:	4a04      	ldr	r2, [pc, #16]	@ (8002618 <HAL_IncTick+0x24>)
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000074 	.word	0x20000074
 8002618:	20000418 	.word	0x20000418

0800261c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return uwTick;
 8002620:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <HAL_GetTick+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20000418 	.word	0x20000418

08002634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800263c:	f7ff ffee 	bl	800261c <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d005      	beq.n	800265a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800264e:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <HAL_Delay+0x44>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4413      	add	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800265a:	bf00      	nop
 800265c:	f7ff ffde 	bl	800261c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	d8f7      	bhi.n	800265c <HAL_Delay+0x28>
  {
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000074 	.word	0x20000074

0800267c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800268c:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002698:	4013      	ands	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ae:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	60d3      	str	r3, [r2, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c8:	4b04      	ldr	r3, [pc, #16]	@ (80026dc <__NVIC_GetPriorityGrouping+0x18>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	f003 0307 	and.w	r3, r3, #7
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	@ (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	@ (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	@ 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	@ 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f7ff ff8e 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff47 	bl	800267c <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff5c 	bl	80026c4 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff8e 	bl	8002734 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5d 	bl	80026e0 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ffb0 	bl	800279c <SysTick_Config>
 800283c:	4603      	mov	r3, r0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002848:	b480      	push	{r7}
 800284a:	b089      	sub	sp, #36	@ 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e16b      	b.n	8002b3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002864:	2201      	movs	r2, #1
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	f040 815a 	bne.w	8002b36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d005      	beq.n	800289a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002896:	2b02      	cmp	r3, #2
 8002898:	d130      	bne.n	80028fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0201 	and.w	r2, r3, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b03      	cmp	r3, #3
 8002906:	d017      	beq.n	8002938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d123      	bne.n	800298c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0203 	and.w	r2, r3, #3
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80b4 	beq.w	8002b36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b60      	ldr	r3, [pc, #384]	@ (8002b54 <HAL_GPIO_Init+0x30c>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002b54 <HAL_GPIO_Init+0x30c>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029de:	4b5d      	ldr	r3, [pc, #372]	@ (8002b54 <HAL_GPIO_Init+0x30c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002b58 <HAL_GPIO_Init+0x310>)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	220f      	movs	r2, #15
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a52      	ldr	r2, [pc, #328]	@ (8002b5c <HAL_GPIO_Init+0x314>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d02b      	beq.n	8002a6e <HAL_GPIO_Init+0x226>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a51      	ldr	r2, [pc, #324]	@ (8002b60 <HAL_GPIO_Init+0x318>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d025      	beq.n	8002a6a <HAL_GPIO_Init+0x222>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a50      	ldr	r2, [pc, #320]	@ (8002b64 <HAL_GPIO_Init+0x31c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01f      	beq.n	8002a66 <HAL_GPIO_Init+0x21e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4f      	ldr	r2, [pc, #316]	@ (8002b68 <HAL_GPIO_Init+0x320>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x21a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4e      	ldr	r2, [pc, #312]	@ (8002b6c <HAL_GPIO_Init+0x324>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x216>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4d      	ldr	r2, [pc, #308]	@ (8002b70 <HAL_GPIO_Init+0x328>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x212>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4c      	ldr	r2, [pc, #304]	@ (8002b74 <HAL_GPIO_Init+0x32c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x20e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4b      	ldr	r2, [pc, #300]	@ (8002b78 <HAL_GPIO_Init+0x330>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x20a>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e00e      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a52:	2308      	movs	r3, #8
 8002a54:	e00c      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a56:	2306      	movs	r3, #6
 8002a58:	e00a      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	e008      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e004      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x228>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f002 0203 	and.w	r2, r2, #3
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a80:	4935      	ldr	r1, [pc, #212]	@ (8002b58 <HAL_GPIO_Init+0x310>)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab2:	4a32      	ldr	r2, [pc, #200]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab8:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002adc:	4a27      	ldr	r2, [pc, #156]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b06:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b30:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <HAL_GPIO_Init+0x334>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b0f      	cmp	r3, #15
 8002b40:	f67f ae90 	bls.w	8002864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40021400 	.word	0x40021400
 8002b74:	40021800 	.word	0x40021800
 8002b78:	40021c00 	.word	0x40021c00
 8002b7c:	40013c00 	.word	0x40013c00

08002b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	887b      	ldrh	r3, [r7, #2]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	e001      	b.n	8002ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e267      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d075      	beq.n	8002cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c02:	4b88      	ldr	r3, [pc, #544]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d00c      	beq.n	8002c28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0e:	4b85      	ldr	r3, [pc, #532]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d112      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1a:	4b82      	ldr	r3, [pc, #520]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	4b7e      	ldr	r3, [pc, #504]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d05b      	beq.n	8002cec <HAL_RCC_OscConfig+0x108>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d157      	bne.n	8002cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e242      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x74>
 8002c4a:	4b76      	ldr	r3, [pc, #472]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a75      	ldr	r2, [pc, #468]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e01d      	b.n	8002c94 <HAL_RCC_OscConfig+0xb0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x98>
 8002c62:	4b70      	ldr	r3, [pc, #448]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6f      	ldr	r2, [pc, #444]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a6c      	ldr	r2, [pc, #432]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0xb0>
 8002c7c:	4b69      	ldr	r3, [pc, #420]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a68      	ldr	r2, [pc, #416]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b66      	ldr	r3, [pc, #408]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a65      	ldr	r2, [pc, #404]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7ff fcbe 	bl	800261c <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7ff fcba 	bl	800261c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e207      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xc0>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff fcaa 	bl	800261c <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff fca6 	bl	800261c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e1f3      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	4b51      	ldr	r3, [pc, #324]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0xe8>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d063      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d06:	4b47      	ldr	r3, [pc, #284]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d11c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d12:	4b44      	ldr	r3, [pc, #272]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d116      	bne.n	8002d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	4b41      	ldr	r3, [pc, #260]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_RCC_OscConfig+0x152>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d001      	beq.n	8002d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e1c7      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d36:	4b3b      	ldr	r3, [pc, #236]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4937      	ldr	r1, [pc, #220]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	e03a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d54:	4b34      	ldr	r3, [pc, #208]	@ (8002e28 <HAL_RCC_OscConfig+0x244>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7ff fc5f 	bl	800261c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d62:	f7ff fc5b 	bl	800261c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e1a8      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	4b2b      	ldr	r3, [pc, #172]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b28      	ldr	r3, [pc, #160]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4925      	ldr	r1, [pc, #148]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	e015      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d96:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <HAL_RCC_OscConfig+0x244>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7ff fc3e 	bl	800261c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da4:	f7ff fc3a 	bl	800261c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e187      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d036      	beq.n	8002e3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d016      	beq.n	8002e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd6:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <HAL_RCC_OscConfig+0x248>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7ff fc1e 	bl	800261c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7ff fc1a 	bl	800261c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e167      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_RCC_OscConfig+0x240>)
 8002df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x200>
 8002e02:	e01b      	b.n	8002e3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e04:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <HAL_RCC_OscConfig+0x248>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0a:	f7ff fc07 	bl	800261c <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	e00e      	b.n	8002e30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e12:	f7ff fc03 	bl	800261c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d907      	bls.n	8002e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e150      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
 8002e24:	40023800 	.word	0x40023800
 8002e28:	42470000 	.word	0x42470000
 8002e2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	4b88      	ldr	r3, [pc, #544]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ea      	bne.n	8002e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8097 	beq.w	8002f78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b81      	ldr	r3, [pc, #516]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10f      	bne.n	8002e7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	4a7c      	ldr	r2, [pc, #496]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	4b77      	ldr	r3, [pc, #476]	@ (8003058 <HAL_RCC_OscConfig+0x474>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d118      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e86:	4b74      	ldr	r3, [pc, #464]	@ (8003058 <HAL_RCC_OscConfig+0x474>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a73      	ldr	r2, [pc, #460]	@ (8003058 <HAL_RCC_OscConfig+0x474>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e92:	f7ff fbc3 	bl	800261c <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9a:	f7ff fbbf 	bl	800261c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e10c      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	4b6a      	ldr	r3, [pc, #424]	@ (8003058 <HAL_RCC_OscConfig+0x474>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x2ea>
 8002ec0:	4b64      	ldr	r3, [pc, #400]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec4:	4a63      	ldr	r2, [pc, #396]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCC_OscConfig+0x324>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x30c>
 8002ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	4a5e      	ldr	r2, [pc, #376]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	4a5b      	ldr	r2, [pc, #364]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0x324>
 8002ef0:	4b58      	ldr	r3, [pc, #352]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef4:	4a57      	ldr	r2, [pc, #348]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efc:	4b55      	ldr	r3, [pc, #340]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f00:	4a54      	ldr	r2, [pc, #336]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f02:	f023 0304 	bic.w	r3, r3, #4
 8002f06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d015      	beq.n	8002f3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7ff fb84 	bl	800261c <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7ff fb80 	bl	800261c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0cb      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	4b49      	ldr	r3, [pc, #292]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0ee      	beq.n	8002f18 <HAL_RCC_OscConfig+0x334>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7ff fb6e 	bl	800261c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7ff fb6a 	bl	800261c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e0b5      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ee      	bne.n	8002f44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b39      	ldr	r3, [pc, #228]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	4a38      	ldr	r2, [pc, #224]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a1 	beq.w	80030c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f82:	4b34      	ldr	r3, [pc, #208]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d05c      	beq.n	8003048 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d141      	bne.n	800301a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b31      	ldr	r3, [pc, #196]	@ (800305c <HAL_RCC_OscConfig+0x478>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7ff fb3e 	bl	800261c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7ff fb3a 	bl	800261c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e087      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	4b27      	ldr	r3, [pc, #156]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	019b      	lsls	r3, r3, #6
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	491b      	ldr	r1, [pc, #108]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fec:	4b1b      	ldr	r3, [pc, #108]	@ (800305c <HAL_RCC_OscConfig+0x478>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7ff fb13 	bl	800261c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7ff fb0f 	bl	800261c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e05c      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x416>
 8003018:	e054      	b.n	80030c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301a:	4b10      	ldr	r3, [pc, #64]	@ (800305c <HAL_RCC_OscConfig+0x478>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7ff fafc 	bl	800261c <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7ff faf8 	bl	800261c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e045      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_RCC_OscConfig+0x470>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x444>
 8003046:	e03d      	b.n	80030c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d107      	bne.n	8003060 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e038      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
 8003054:	40023800 	.word	0x40023800
 8003058:	40007000 	.word	0x40007000
 800305c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <HAL_RCC_OscConfig+0x4ec>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d028      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d121      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d11a      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003090:	4013      	ands	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003096:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	3b01      	subs	r3, #1
 80030aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800

080030d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0cc      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b68      	ldr	r3, [pc, #416]	@ (800328c <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d90c      	bls.n	8003110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b65      	ldr	r3, [pc, #404]	@ (800328c <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b63      	ldr	r3, [pc, #396]	@ (800328c <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0b8      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003128:	4b59      	ldr	r3, [pc, #356]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a58      	ldr	r2, [pc, #352]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003132:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003140:	4b53      	ldr	r3, [pc, #332]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a52      	ldr	r2, [pc, #328]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800314a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b50      	ldr	r3, [pc, #320]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	494d      	ldr	r1, [pc, #308]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d044      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b47      	ldr	r3, [pc, #284]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d119      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e07f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d003      	beq.n	8003192 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b3f      	ldr	r3, [pc, #252]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e06f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e067      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b37      	ldr	r3, [pc, #220]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4934      	ldr	r1, [pc, #208]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7ff fa2a 	bl	800261c <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7ff fa26 	bl	800261c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e04f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b25      	ldr	r3, [pc, #148]	@ (800328c <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d20c      	bcs.n	800321c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b22      	ldr	r3, [pc, #136]	@ (800328c <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b20      	ldr	r3, [pc, #128]	@ (800328c <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e032      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003228:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4916      	ldr	r1, [pc, #88]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003246:	4b12      	ldr	r3, [pc, #72]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	490e      	ldr	r1, [pc, #56]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800325a:	f000 f821 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800325e:	4602      	mov	r2, r0
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	490a      	ldr	r1, [pc, #40]	@ (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	5ccb      	ldrb	r3, [r1, r3]
 800326e:	fa22 f303 	lsr.w	r3, r2, r3
 8003272:	4a09      	ldr	r2, [pc, #36]	@ (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003276:	4b09      	ldr	r3, [pc, #36]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff f98a 	bl	8002594 <HAL_InitTick>

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00
 8003290:	40023800 	.word	0x40023800
 8003294:	08008578 	.word	0x08008578
 8003298:	2000006c 	.word	0x2000006c
 800329c:	20000070 	.word	0x20000070

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a4:	b090      	sub	sp, #64	@ 0x40
 80032a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b8:	4b59      	ldr	r3, [pc, #356]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d00d      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x40>
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	f200 80a1 	bhi.w	800340c <HAL_RCC_GetSysClockFreq+0x16c>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d003      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x3a>
 80032d2:	e09b      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b53      	ldr	r3, [pc, #332]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x184>)
 80032d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032d8:	e09b      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032da:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x188>)
 80032dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032de:	e098      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d028      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	099b      	lsrs	r3, r3, #6
 80032fc:	2200      	movs	r2, #0
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	627a      	str	r2, [r7, #36]	@ 0x24
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003308:	2100      	movs	r1, #0
 800330a:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x188>)
 800330c:	fb03 f201 	mul.w	r2, r3, r1
 8003310:	2300      	movs	r3, #0
 8003312:	fb00 f303 	mul.w	r3, r0, r3
 8003316:	4413      	add	r3, r2
 8003318:	4a43      	ldr	r2, [pc, #268]	@ (8003428 <HAL_RCC_GetSysClockFreq+0x188>)
 800331a:	fba0 1202 	umull	r1, r2, r0, r2
 800331e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003320:	460a      	mov	r2, r1
 8003322:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003326:	4413      	add	r3, r2
 8003328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800332a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332c:	2200      	movs	r2, #0
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	61fa      	str	r2, [r7, #28]
 8003332:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003336:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800333a:	f7fc ff99 	bl	8000270 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4613      	mov	r3, r2
 8003344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003346:	e053      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003348:	4b35      	ldr	r3, [pc, #212]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	2200      	movs	r2, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	617a      	str	r2, [r7, #20]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800335a:	f04f 0b00 	mov.w	fp, #0
 800335e:	4652      	mov	r2, sl
 8003360:	465b      	mov	r3, fp
 8003362:	f04f 0000 	mov.w	r0, #0
 8003366:	f04f 0100 	mov.w	r1, #0
 800336a:	0159      	lsls	r1, r3, #5
 800336c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003370:	0150      	lsls	r0, r2, #5
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	ebb2 080a 	subs.w	r8, r2, sl
 800337a:	eb63 090b 	sbc.w	r9, r3, fp
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800338a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800338e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003392:	ebb2 0408 	subs.w	r4, r2, r8
 8003396:	eb63 0509 	sbc.w	r5, r3, r9
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	00eb      	lsls	r3, r5, #3
 80033a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a8:	00e2      	lsls	r2, r4, #3
 80033aa:	4614      	mov	r4, r2
 80033ac:	461d      	mov	r5, r3
 80033ae:	eb14 030a 	adds.w	r3, r4, sl
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	eb45 030b 	adc.w	r3, r5, fp
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c6:	4629      	mov	r1, r5
 80033c8:	028b      	lsls	r3, r1, #10
 80033ca:	4621      	mov	r1, r4
 80033cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d0:	4621      	mov	r1, r4
 80033d2:	028a      	lsls	r2, r1, #10
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033da:	2200      	movs	r2, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	60fa      	str	r2, [r7, #12]
 80033e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e4:	f7fc ff44 	bl	8000270 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	3301      	adds	r3, #1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003400:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800340a:	e002      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x184>)
 800340e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003414:	4618      	mov	r0, r3
 8003416:	3740      	adds	r7, #64	@ 0x40
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	00f42400 	.word	0x00f42400
 8003428:	017d7840 	.word	0x017d7840

0800342c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003430:	4b03      	ldr	r3, [pc, #12]	@ (8003440 <HAL_RCC_GetHCLKFreq+0x14>)
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	2000006c 	.word	0x2000006c

08003444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003448:	f7ff fff0 	bl	800342c <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0a9b      	lsrs	r3, r3, #10
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	@ (8003468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	08008588 	.word	0x08008588

0800346c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003470:	f7ff ffdc 	bl	800342c <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	@ (800348c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	0b5b      	lsrs	r3, r3, #13
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4903      	ldr	r1, [pc, #12]	@ (8003490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40023800 	.word	0x40023800
 8003490:	08008588 	.word	0x08008588

08003494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07b      	b.n	800359e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d108      	bne.n	80034c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034b6:	d009      	beq.n	80034cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
 80034be:	e005      	b.n	80034cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe fe78 	bl	80021dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	ea42 0103 	orr.w	r1, r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	f003 0104 	and.w	r1, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	f003 0210 	and.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800358c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b088      	sub	sp, #32
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b6:	f7ff f831 	bl	800261c <HAL_GetTick>
 80035ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d001      	beq.n	80035d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80035cc:	2302      	movs	r3, #2
 80035ce:	e12a      	b.n	8003826 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_Transmit+0x36>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e122      	b.n	8003826 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_SPI_Transmit+0x48>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e11b      	b.n	8003826 <HAL_SPI_Transmit+0x280>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800363c:	d10f      	bne.n	800365e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800365c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003668:	2b40      	cmp	r3, #64	@ 0x40
 800366a:	d007      	beq.n	800367c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003684:	d152      	bne.n	800372c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_SPI_Transmit+0xee>
 800368e:	8b7b      	ldrh	r3, [r7, #26]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d145      	bne.n	8003720 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003698:	881a      	ldrh	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b8:	e032      	b.n	8003720 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d112      	bne.n	80036ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	1c9a      	adds	r2, r3, #2
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036ec:	e018      	b.n	8003720 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ee:	f7fe ff95 	bl	800261c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d803      	bhi.n	8003706 <HAL_SPI_Transmit+0x160>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d102      	bne.n	800370c <HAL_SPI_Transmit+0x166>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e082      	b.n	8003826 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1c7      	bne.n	80036ba <HAL_SPI_Transmit+0x114>
 800372a:	e053      	b.n	80037d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_SPI_Transmit+0x194>
 8003734:	8b7b      	ldrh	r3, [r7, #26]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d147      	bne.n	80037ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003760:	e033      	b.n	80037ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b02      	cmp	r3, #2
 800376e:	d113      	bne.n	8003798 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	7812      	ldrb	r2, [r2, #0]
 800377c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003796:	e018      	b.n	80037ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003798:	f7fe ff40 	bl	800261c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d803      	bhi.n	80037b0 <HAL_SPI_Transmit+0x20a>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d102      	bne.n	80037b6 <HAL_SPI_Transmit+0x210>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e02d      	b.n	8003826 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1c6      	bne.n	8003762 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	6839      	ldr	r1, [r7, #0]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f8b1 	bl	8003940 <SPI_EndRxTxTransaction>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003824:	2300      	movs	r3, #0
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003840:	f7fe feec 	bl	800261c <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	4413      	add	r3, r2
 800384e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003850:	f7fe fee4 	bl	800261c <HAL_GetTick>
 8003854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003856:	4b39      	ldr	r3, [pc, #228]	@ (800393c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	015b      	lsls	r3, r3, #5
 800385c:	0d1b      	lsrs	r3, r3, #20
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003866:	e055      	b.n	8003914 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d051      	beq.n	8003914 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003870:	f7fe fed4 	bl	800261c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	429a      	cmp	r2, r3
 800387e:	d902      	bls.n	8003886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d13d      	bne.n	8003902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800389e:	d111      	bne.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a8:	d004      	beq.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b2:	d107      	bne.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038cc:	d10f      	bne.n	80038ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e018      	b.n	8003934 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	e002      	b.n	8003914 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3b01      	subs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4013      	ands	r3, r2
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	429a      	cmp	r2, r3
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	429a      	cmp	r2, r3
 8003930:	d19a      	bne.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000006c 	.word	0x2000006c

08003940 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2201      	movs	r2, #1
 8003954:	2102      	movs	r1, #2
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff ff6a 	bl	8003830 <SPI_WaitFlagStateUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e032      	b.n	80039d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003972:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <SPI_EndRxTxTransaction+0xa0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1b      	ldr	r2, [pc, #108]	@ (80039e4 <SPI_EndRxTxTransaction+0xa4>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	0d5b      	lsrs	r3, r3, #21
 800397e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003990:	d112      	bne.n	80039b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2200      	movs	r2, #0
 800399a:	2180      	movs	r1, #128	@ 0x80
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ff47 	bl	8003830 <SPI_WaitFlagStateUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d016      	beq.n	80039d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e00f      	b.n	80039d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ce:	2b80      	cmp	r3, #128	@ 0x80
 80039d0:	d0f2      	beq.n	80039b8 <SPI_EndRxTxTransaction+0x78>
 80039d2:	e000      	b.n	80039d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80039d4:	bf00      	nop
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	2000006c 	.word	0x2000006c
 80039e4:	165e9f81 	.word	0x165e9f81

080039e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e042      	b.n	8003a80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe fc2c 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	@ 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f82b 	bl	8003a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a8c:	b0c0      	sub	sp, #256	@ 0x100
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	68d9      	ldr	r1, [r3, #12]
 8003aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	ea40 0301 	orr.w	r3, r0, r1
 8003ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ae0:	f021 010c 	bic.w	r1, r1, #12
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003aee:	430b      	orrs	r3, r1
 8003af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	6999      	ldr	r1, [r3, #24]
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	ea40 0301 	orr.w	r3, r0, r1
 8003b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4b8f      	ldr	r3, [pc, #572]	@ (8003d54 <UART_SetConfig+0x2cc>)
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d005      	beq.n	8003b28 <UART_SetConfig+0xa0>
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b8d      	ldr	r3, [pc, #564]	@ (8003d58 <UART_SetConfig+0x2d0>)
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d104      	bne.n	8003b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b28:	f7ff fca0 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8003b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b30:	e003      	b.n	8003b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b32:	f7ff fc87 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 8003b36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b44:	f040 810c 	bne.w	8003d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b62:	415b      	adcs	r3, r3
 8003b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	eb12 0801 	adds.w	r8, r2, r1
 8003b70:	4629      	mov	r1, r5
 8003b72:	eb43 0901 	adc.w	r9, r3, r1
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b8a:	4690      	mov	r8, r2
 8003b8c:	4699      	mov	r9, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	eb18 0303 	adds.w	r3, r8, r3
 8003b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b98:	462b      	mov	r3, r5
 8003b9a:	eb49 0303 	adc.w	r3, r9, r3
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	18db      	adds	r3, r3, r3
 8003bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	eb42 0303 	adc.w	r3, r2, r3
 8003bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bcc:	f7fc fb50 	bl	8000270 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4b61      	ldr	r3, [pc, #388]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	011c      	lsls	r4, r3, #4
 8003bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003be8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	1891      	adds	r1, r2, r2
 8003bf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bf8:	415b      	adcs	r3, r3
 8003bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c00:	4641      	mov	r1, r8
 8003c02:	eb12 0a01 	adds.w	sl, r2, r1
 8003c06:	4649      	mov	r1, r9
 8003c08:	eb43 0b01 	adc.w	fp, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c20:	4692      	mov	sl, r2
 8003c22:	469b      	mov	fp, r3
 8003c24:	4643      	mov	r3, r8
 8003c26:	eb1a 0303 	adds.w	r3, sl, r3
 8003c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	eb4b 0303 	adc.w	r3, fp, r3
 8003c34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	18db      	adds	r3, r3, r3
 8003c50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c52:	4613      	mov	r3, r2
 8003c54:	eb42 0303 	adc.w	r3, r2, r3
 8003c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c62:	f7fc fb05 	bl	8000270 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2264      	movs	r2, #100	@ 0x64
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	1acb      	subs	r3, r1, r3
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c82:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003c84:	fba3 2302 	umull	r2, r3, r3, r2
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c90:	441c      	add	r4, r3
 8003c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	1891      	adds	r1, r2, r2
 8003caa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cac:	415b      	adcs	r3, r3
 8003cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	1851      	adds	r1, r2, r1
 8003cb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cba:	4649      	mov	r1, r9
 8003cbc:	414b      	adcs	r3, r1
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ccc:	4659      	mov	r1, fp
 8003cce:	00cb      	lsls	r3, r1, #3
 8003cd0:	4651      	mov	r1, sl
 8003cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	00ca      	lsls	r2, r1, #3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ce8:	464b      	mov	r3, r9
 8003cea:	460a      	mov	r2, r1
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d08:	460b      	mov	r3, r1
 8003d0a:	18db      	adds	r3, r3, r3
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d0e:	4613      	mov	r3, r2
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d1e:	f7fc faa7 	bl	8000270 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003d28:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	2164      	movs	r1, #100	@ 0x64
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	3332      	adds	r3, #50	@ 0x32
 8003d3a:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <UART_SetConfig+0x2d4>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	f003 0207 	and.w	r2, r3, #7
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4422      	add	r2, r4
 8003d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d50:	e106      	b.n	8003f60 <UART_SetConfig+0x4d8>
 8003d52:	bf00      	nop
 8003d54:	40011000 	.word	0x40011000
 8003d58:	40011400 	.word	0x40011400
 8003d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d72:	4642      	mov	r2, r8
 8003d74:	464b      	mov	r3, r9
 8003d76:	1891      	adds	r1, r2, r2
 8003d78:	6239      	str	r1, [r7, #32]
 8003d7a:	415b      	adcs	r3, r3
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d82:	4641      	mov	r1, r8
 8003d84:	1854      	adds	r4, r2, r1
 8003d86:	4649      	mov	r1, r9
 8003d88:	eb43 0501 	adc.w	r5, r3, r1
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003da8:	464b      	mov	r3, r9
 8003daa:	eb45 0303 	adc.w	r3, r5, r3
 8003dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dce:	4629      	mov	r1, r5
 8003dd0:	008b      	lsls	r3, r1, #2
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd8:	4621      	mov	r1, r4
 8003dda:	008a      	lsls	r2, r1, #2
 8003ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003de0:	f7fc fa46 	bl	8000270 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4b60      	ldr	r3, [pc, #384]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003dea:	fba3 2302 	umull	r2, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	011c      	lsls	r4, r3, #4
 8003df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e04:	4642      	mov	r2, r8
 8003e06:	464b      	mov	r3, r9
 8003e08:	1891      	adds	r1, r2, r2
 8003e0a:	61b9      	str	r1, [r7, #24]
 8003e0c:	415b      	adcs	r3, r3
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e14:	4641      	mov	r1, r8
 8003e16:	1851      	adds	r1, r2, r1
 8003e18:	6139      	str	r1, [r7, #16]
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	414b      	adcs	r3, r1
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	00cb      	lsls	r3, r1, #3
 8003e30:	4651      	mov	r1, sl
 8003e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e36:	4651      	mov	r1, sl
 8003e38:	00ca      	lsls	r2, r1, #3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4642      	mov	r2, r8
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e48:	464b      	mov	r3, r9
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	eb42 0303 	adc.w	r3, r2, r3
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	008b      	lsls	r3, r1, #2
 8003e70:	4641      	mov	r1, r8
 8003e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e76:	4641      	mov	r1, r8
 8003e78:	008a      	lsls	r2, r1, #2
 8003e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e7e:	f7fc f9f7 	bl	8000270 <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	4b38      	ldr	r3, [pc, #224]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	2264      	movs	r2, #100	@ 0x64
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	1acb      	subs	r3, r1, r3
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	3332      	adds	r3, #50	@ 0x32
 8003e9c:	4a33      	ldr	r2, [pc, #204]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea8:	441c      	add	r4, r3
 8003eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eae:	2200      	movs	r2, #0
 8003eb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003eb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec8:	4641      	mov	r1, r8
 8003eca:	1851      	adds	r1, r2, r1
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	4649      	mov	r1, r9
 8003ed0:	414b      	adcs	r3, r1
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	00cb      	lsls	r3, r1, #3
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eea:	4651      	mov	r1, sl
 8003eec:	00ca      	lsls	r2, r1, #3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003efa:	464b      	mov	r3, r9
 8003efc:	460a      	mov	r2, r1
 8003efe:	eb42 0303 	adc.w	r3, r2, r3
 8003f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	008b      	lsls	r3, r1, #2
 8003f20:	4641      	mov	r1, r8
 8003f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f26:	4641      	mov	r1, r8
 8003f28:	008a      	lsls	r2, r1, #2
 8003f2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f2e:	f7fc f99f 	bl	8000270 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	@ 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	3332      	adds	r3, #50	@ 0x32
 8003f4a:	4a08      	ldr	r2, [pc, #32]	@ (8003f6c <UART_SetConfig+0x4e4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4422      	add	r2, r4
 8003f5e:	609a      	str	r2, [r3, #8]
}
 8003f60:	bf00      	nop
 8003f62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f66:	46bd      	mov	sp, r7
 8003f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6c:	51eb851f 	.word	0x51eb851f

08003f70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f82:	2b84      	cmp	r3, #132	@ 0x84
 8003f84:	d005      	beq.n	8003f92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3303      	adds	r3, #3
 8003f90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f92:	68fb      	ldr	r3, [r7, #12]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fa6:	f3ef 8305 	mrs	r3, IPSR
 8003faa:	607b      	str	r3, [r7, #4]
  return(result);
 8003fac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf14      	ite	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	2300      	moveq	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003fc8:	f001 f95c 	bl	8005284 <vTaskStartScheduler>
  
  return osOK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd4:	b089      	sub	sp, #36	@ 0x24
 8003fd6:	af04      	add	r7, sp, #16
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <osThreadCreate+0x54>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01c      	beq.n	8004026 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685c      	ldr	r4, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691e      	ldr	r6, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ffb6 	bl	8003f70 <makeFreeRtosPriority>
 8004004:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800400e:	9202      	str	r2, [sp, #8]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	9100      	str	r1, [sp, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4632      	mov	r2, r6
 8004018:	4629      	mov	r1, r5
 800401a:	4620      	mov	r0, r4
 800401c:	f000 ff64 	bl	8004ee8 <xTaskCreateStatic>
 8004020:	4603      	mov	r3, r0
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e01c      	b.n	8004060 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685c      	ldr	r4, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004032:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff98 	bl	8003f70 <makeFreeRtosPriority>
 8004040:	4602      	mov	r2, r0
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	9200      	str	r2, [sp, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	4632      	mov	r2, r6
 800404e:	4629      	mov	r1, r5
 8004050:	4620      	mov	r0, r4
 8004052:	f000 ffa9 	bl	8004fa8 <xTaskCreate>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004060:	68fb      	ldr	r3, [r7, #12]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800406a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <osDelay+0x16>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	e000      	b.n	8004082 <osDelay+0x18>
 8004080:	2301      	movs	r3, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f001 f8c8 	bl	8005218 <vTaskDelay>
  
  return osOK;
 8004088:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4619      	mov	r1, r3
 80040a8:	2001      	movs	r0, #1
 80040aa:	f000 fab6 	bl	800461a <xQueueCreateMutexStatic>
 80040ae:	4603      	mov	r3, r0
 80040b0:	e003      	b.n	80040ba <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80040b2:	2001      	movs	r0, #1
 80040b4:	f000 fa99 	bl	80045ea <xQueueCreateMutex>
 80040b8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <osMutexWait+0x18>
    return osErrorParameter;
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	e03a      	b.n	8004152 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d103      	bne.n	80040f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e009      	b.n	8004104 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <osMutexWait+0x40>
      ticks = 1;
 8004100:	2301      	movs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004104:	f7ff ff4c 	bl	8003fa0 <inHandlerMode>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d017      	beq.n	800413e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800410e:	f107 0308 	add.w	r3, r7, #8
 8004112:	461a      	mov	r2, r3
 8004114:	2100      	movs	r1, #0
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fd3c 	bl	8004b94 <xQueueReceiveFromISR>
 800411c:	4603      	mov	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d001      	beq.n	8004126 <osMutexWait+0x62>
      return osErrorOS;
 8004122:	23ff      	movs	r3, #255	@ 0xff
 8004124:	e015      	b.n	8004152 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d011      	beq.n	8004150 <osMutexWait+0x8c>
 800412c:	4b0b      	ldr	r3, [pc, #44]	@ (800415c <osMutexWait+0x98>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	e008      	b.n	8004150 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fc17 	bl	8004974 <xQueueSemaphoreTake>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d001      	beq.n	8004150 <osMutexWait+0x8c>
    return osErrorOS;
 800414c:	23ff      	movs	r3, #255	@ 0xff
 800414e:	e000      	b.n	8004152 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800416c:	2300      	movs	r3, #0
 800416e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004170:	f7ff ff16 	bl	8003fa0 <inHandlerMode>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d016      	beq.n	80041a8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800417a:	f107 0308 	add.w	r3, r7, #8
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fb67 	bl	8004854 <xQueueGiveFromISR>
 8004186:	4603      	mov	r3, r0
 8004188:	2b01      	cmp	r3, #1
 800418a:	d001      	beq.n	8004190 <osMutexRelease+0x30>
      return osErrorOS;
 800418c:	23ff      	movs	r3, #255	@ 0xff
 800418e:	e017      	b.n	80041c0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d013      	beq.n	80041be <osMutexRelease+0x5e>
 8004196:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <osMutexRelease+0x68>)
 8004198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	e00a      	b.n	80041be <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80041a8:	2300      	movs	r3, #0
 80041aa:	2200      	movs	r2, #0
 80041ac:	2100      	movs	r1, #0
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa4e 	bl	8004650 <xQueueGenericSend>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d001      	beq.n	80041be <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80041ba:	23ff      	movs	r3, #255	@ 0xff
 80041bc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80041be:	68fb      	ldr	r3, [r7, #12]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f103 0208 	add.w	r2, r3, #8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295
 80041e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f103 0208 	add.w	r2, r3, #8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f103 0208 	add.w	r2, r3, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d103      	bne.n	800428e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e00c      	b.n	80042a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3308      	adds	r3, #8
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e002      	b.n	800429c <vListInsert+0x2e>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d2f6      	bcs.n	8004296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	601a      	str	r2, [r3, #0]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6892      	ldr	r2, [r2, #8]
 80042f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6852      	ldr	r2, [r2, #4]
 8004300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	d103      	bne.n	8004314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	1e5a      	subs	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	e7fd      	b.n	800435c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004360:	f001 fef2 	bl	8006148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	441a      	add	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004390:	3b01      	subs	r3, #1
 8004392:	68f9      	ldr	r1, [r7, #12]
 8004394:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	441a      	add	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	22ff      	movs	r2, #255	@ 0xff
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	22ff      	movs	r2, #255	@ 0xff
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d114      	bne.n	80043e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01a      	beq.n	80043f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3310      	adds	r3, #16
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f9a8 	bl	8005718 <xTaskRemoveFromEventList>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d012      	beq.n	80043f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <xQueueGenericReset+0xd0>)
 80043d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	e009      	b.n	80043f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3310      	adds	r3, #16
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fef1 	bl	80041cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3324      	adds	r3, #36	@ 0x24
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff feec 	bl	80041cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043f4:	f001 feda 	bl	80061ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043f8:	2301      	movs	r3, #1
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08e      	sub	sp, #56	@ 0x38
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	e7fd      	b.n	800444e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <xQueueGenericCreateStatic+0x56>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <xQueueGenericCreateStatic+0x5a>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <xQueueGenericCreateStatic+0x5c>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	623b      	str	r3, [r7, #32]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <xQueueGenericCreateStatic+0x84>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <xQueueGenericCreateStatic+0x88>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <xQueueGenericCreateStatic+0x8a>
 8004490:	2300      	movs	r3, #0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10b      	bne.n	80044ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	61fb      	str	r3, [r7, #28]
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	e7fd      	b.n	80044aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044ae:	2348      	movs	r3, #72	@ 0x48
 80044b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b48      	cmp	r3, #72	@ 0x48
 80044b6:	d00b      	beq.n	80044d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	61bb      	str	r3, [r7, #24]
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	e7fd      	b.n	80044cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80044d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f840 	bl	8004578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3730      	adds	r7, #48	@ 0x30
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08a      	sub	sp, #40	@ 0x28
 8004506:	af02      	add	r7, sp, #8
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	613b      	str	r3, [r7, #16]
}
 8004528:	bf00      	nop
 800452a:	bf00      	nop
 800452c:	e7fd      	b.n	800452a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3348      	adds	r3, #72	@ 0x48
 800453c:	4618      	mov	r0, r3
 800453e:	f001 ff25 	bl	800638c <pvPortMalloc>
 8004542:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d011      	beq.n	800456e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	3348      	adds	r3, #72	@ 0x48
 8004552:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800455c:	79fa      	ldrb	r2, [r7, #7]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	4613      	mov	r3, r2
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f805 	bl	8004578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800456e:	69bb      	ldr	r3, [r7, #24]
	}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e002      	b.n	800459a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045a6:	2101      	movs	r1, #1
 80045a8:	69b8      	ldr	r0, [r7, #24]
 80045aa:	f7ff fec3 	bl	8004334 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045d6:	2300      	movs	r3, #0
 80045d8:	2200      	movs	r2, #0
 80045da:	2100      	movs	r1, #0
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f837 	bl	8004650 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045f4:	2301      	movs	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	461a      	mov	r2, r3
 8004600:	6939      	ldr	r1, [r7, #16]
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f7ff ff7d 	bl	8004502 <xQueueGenericCreate>
 8004608:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff ffd3 	bl	80045b6 <prvInitialiseMutex>

		return xNewQueue;
 8004610:	68fb      	ldr	r3, [r7, #12]
	}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800461a:	b580      	push	{r7, lr}
 800461c:	b088      	sub	sp, #32
 800461e:	af02      	add	r7, sp, #8
 8004620:	4603      	mov	r3, r0
 8004622:	6039      	str	r1, [r7, #0]
 8004624:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004626:	2301      	movs	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	6939      	ldr	r1, [r7, #16]
 8004638:	6978      	ldr	r0, [r7, #20]
 800463a:	f7ff fee5 	bl	8004408 <xQueueGenericCreateStatic>
 800463e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff ffb8 	bl	80045b6 <prvInitialiseMutex>

		return xNewQueue;
 8004646:	68fb      	ldr	r3, [r7, #12]
	}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	@ 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800465e:	2300      	movs	r3, #0
 8004660:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <xQueueGenericSend+0x34>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <xQueueGenericSend+0x42>
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <xQueueGenericSend+0x46>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <xQueueGenericSend+0x48>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <xQueueGenericSend+0x64>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	e7fd      	b.n	80046b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d103      	bne.n	80046c2 <xQueueGenericSend+0x72>
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <xQueueGenericSend+0x76>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <xQueueGenericSend+0x78>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <xQueueGenericSend+0x94>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	623b      	str	r3, [r7, #32]
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046e4:	f001 f9d8 	bl	8005a98 <xTaskGetSchedulerState>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <xQueueGenericSend+0xa4>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <xQueueGenericSend+0xa8>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <xQueueGenericSend+0xaa>
 80046f8:	2300      	movs	r3, #0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10b      	bne.n	8004716 <xQueueGenericSend+0xc6>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	61fb      	str	r3, [r7, #28]
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	e7fd      	b.n	8004712 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004716:	f001 fd17 	bl	8006148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <xQueueGenericSend+0xdc>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d129      	bne.n	8004780 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004732:	f000 fac9 	bl	8004cc8 <prvCopyDataToQueue>
 8004736:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d010      	beq.n	8004762 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004742:	3324      	adds	r3, #36	@ 0x24
 8004744:	4618      	mov	r0, r3
 8004746:	f000 ffe7 	bl	8005718 <xTaskRemoveFromEventList>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004750:	4b3f      	ldr	r3, [pc, #252]	@ (8004850 <xQueueGenericSend+0x200>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	e00a      	b.n	8004778 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004768:	4b39      	ldr	r3, [pc, #228]	@ (8004850 <xQueueGenericSend+0x200>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004778:	f001 fd18 	bl	80061ac <vPortExitCritical>
				return pdPASS;
 800477c:	2301      	movs	r3, #1
 800477e:	e063      	b.n	8004848 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004786:	f001 fd11 	bl	80061ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800478a:	2300      	movs	r3, #0
 800478c:	e05c      	b.n	8004848 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800478e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004794:	f107 0314 	add.w	r3, r7, #20
 8004798:	4618      	mov	r0, r3
 800479a:	f001 f821 	bl	80057e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800479e:	2301      	movs	r3, #1
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047a2:	f001 fd03 	bl	80061ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a6:	f000 fdcf 	bl	8005348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047aa:	f001 fccd 	bl	8006148 <vPortEnterCritical>
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047b4:	b25b      	sxtb	r3, r3
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d103      	bne.n	80047c4 <xQueueGenericSend+0x174>
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d103      	bne.n	80047da <xQueueGenericSend+0x18a>
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047da:	f001 fce7 	bl	80061ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047de:	1d3a      	adds	r2, r7, #4
 80047e0:	f107 0314 	add.w	r3, r7, #20
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 f810 	bl	800580c <xTaskCheckForTimeOut>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d124      	bne.n	800483c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047f4:	f000 fb60 	bl	8004eb8 <prvIsQueueFull>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	3310      	adds	r3, #16
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f000 ff60 	bl	80056cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800480c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800480e:	f000 faeb 	bl	8004de8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004812:	f000 fda7 	bl	8005364 <xTaskResumeAll>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f af7c 	bne.w	8004716 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800481e:	4b0c      	ldr	r3, [pc, #48]	@ (8004850 <xQueueGenericSend+0x200>)
 8004820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	e772      	b.n	8004716 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004830:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004832:	f000 fad9 	bl	8004de8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004836:	f000 fd95 	bl	8005364 <xTaskResumeAll>
 800483a:	e76c      	b.n	8004716 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800483c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800483e:	f000 fad3 	bl	8004de8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004842:	f000 fd8f 	bl	8005364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004848:	4618      	mov	r0, r3
 800484a:	3738      	adds	r7, #56	@ 0x38
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08e      	sub	sp, #56	@ 0x38
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	623b      	str	r3, [r7, #32]
}
 800487a:	bf00      	nop
 800487c:	bf00      	nop
 800487e:	e7fd      	b.n	800487c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	61fb      	str	r3, [r7, #28]
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d103      	bne.n	80048b0 <xQueueGiveFromISR+0x5c>
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <xQueueGiveFromISR+0x60>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <xQueueGiveFromISR+0x62>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10b      	bne.n	80048d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	61bb      	str	r3, [r7, #24]
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	e7fd      	b.n	80048ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048d2:	f001 fd19 	bl	8006308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048d6:	f3ef 8211 	mrs	r2, BASEPRI
 80048da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	617a      	str	r2, [r7, #20]
 80048ec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048fe:	429a      	cmp	r2, r3
 8004900:	d22b      	bcs.n	800495a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004914:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d112      	bne.n	8004944 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	2b00      	cmp	r3, #0
 8004924:	d016      	beq.n	8004954 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	3324      	adds	r3, #36	@ 0x24
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fef4 	bl	8005718 <xTaskRemoveFromEventList>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00e      	beq.n	8004954 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00b      	beq.n	8004954 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e007      	b.n	8004954 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004948:	3301      	adds	r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	b25a      	sxtb	r2, r3
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004954:	2301      	movs	r3, #1
 8004956:	637b      	str	r3, [r7, #52]	@ 0x34
 8004958:	e001      	b.n	800495e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800495a:	2300      	movs	r3, #0
 800495c:	637b      	str	r3, [r7, #52]	@ 0x34
 800495e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004960:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004968:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800496a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800496c:	4618      	mov	r0, r3
 800496e:	3738      	adds	r7, #56	@ 0x38
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08e      	sub	sp, #56	@ 0x38
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004986:	2300      	movs	r3, #0
 8004988:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800498a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	623b      	str	r3, [r7, #32]
}
 80049a2:	bf00      	nop
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	61fb      	str	r3, [r7, #28]
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c8:	f001 f866 	bl	8005a98 <xTaskGetSchedulerState>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <xQueueSemaphoreTake+0x64>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <xQueueSemaphoreTake+0x68>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <xQueueSemaphoreTake+0x6a>
 80049dc:	2300      	movs	r3, #0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <xQueueSemaphoreTake+0x86>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	61bb      	str	r3, [r7, #24]
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	e7fd      	b.n	80049f6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049fa:	f001 fba5 	bl	8006148 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80049fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d024      	beq.n	8004a54 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	1e5a      	subs	r2, r3, #1
 8004a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004a1a:	f001 f9e9 	bl	8005df0 <pvTaskIncrementMutexHeldCount>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00f      	beq.n	8004a4c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2e:	3310      	adds	r3, #16
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fe71 	bl	8005718 <xTaskRemoveFromEventList>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a3c:	4b54      	ldr	r3, [pc, #336]	@ (8004b90 <xQueueSemaphoreTake+0x21c>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a4c:	f001 fbae 	bl	80061ac <vPortExitCritical>
				return pdPASS;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e098      	b.n	8004b86 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d112      	bne.n	8004a80 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	617b      	str	r3, [r7, #20]
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a78:	f001 fb98 	bl	80061ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e082      	b.n	8004b86 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a86:	f107 030c 	add.w	r3, r7, #12
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fea8 	bl	80057e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a94:	f001 fb8a 	bl	80061ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a98:	f000 fc56 	bl	8005348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a9c:	f001 fb54 	bl	8006148 <vPortEnterCritical>
 8004aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aa6:	b25b      	sxtb	r3, r3
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d103      	bne.n	8004ab6 <xQueueSemaphoreTake+0x142>
 8004aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004abc:	b25b      	sxtb	r3, r3
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac2:	d103      	bne.n	8004acc <xQueueSemaphoreTake+0x158>
 8004ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004acc:	f001 fb6e 	bl	80061ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ad0:	463a      	mov	r2, r7
 8004ad2:	f107 030c 	add.w	r3, r7, #12
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fe97 	bl	800580c <xTaskCheckForTimeOut>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d132      	bne.n	8004b4a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ae4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ae6:	f000 f9d1 	bl	8004e8c <prvIsQueueEmpty>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d026      	beq.n	8004b3e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d109      	bne.n	8004b0c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004af8:	f001 fb26 	bl	8006148 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 ffe7 	bl	8005ad4 <xTaskPriorityInherit>
 8004b06:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004b08:	f001 fb50 	bl	80061ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0e:	3324      	adds	r3, #36	@ 0x24
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	4611      	mov	r1, r2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fdd9 	bl	80056cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b1c:	f000 f964 	bl	8004de8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b20:	f000 fc20 	bl	8005364 <xTaskResumeAll>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f47f af67 	bne.w	80049fa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004b2c:	4b18      	ldr	r3, [pc, #96]	@ (8004b90 <xQueueSemaphoreTake+0x21c>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	e75d      	b.n	80049fa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b40:	f000 f952 	bl	8004de8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b44:	f000 fc0e 	bl	8005364 <xTaskResumeAll>
 8004b48:	e757      	b.n	80049fa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b4c:	f000 f94c 	bl	8004de8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b50:	f000 fc08 	bl	8005364 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b56:	f000 f999 	bl	8004e8c <prvIsQueueEmpty>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f43f af4c 	beq.w	80049fa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00d      	beq.n	8004b84 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004b68:	f001 faee 	bl	8006148 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b6e:	f000 f893 	bl	8004c98 <prvGetDisinheritPriorityAfterTimeout>
 8004b72:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 f8a8 	bl	8005cd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b80:	f001 fb14 	bl	80061ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3738      	adds	r7, #56	@ 0x38
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08e      	sub	sp, #56	@ 0x38
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	623b      	str	r3, [r7, #32]
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	e7fd      	b.n	8004bbe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d103      	bne.n	8004bd0 <xQueueReceiveFromISR+0x3c>
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <xQueueReceiveFromISR+0x40>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <xQueueReceiveFromISR+0x42>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	61fb      	str	r3, [r7, #28]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bf2:	f001 fb89 	bl	8006308 <vPortValidateInterruptPriority>
	__asm volatile
 8004bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8004bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	61ba      	str	r2, [r7, #24]
 8004c0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02f      	beq.n	8004c7e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c2c:	f000 f8b6 	bl	8004d9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d112      	bne.n	8004c68 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	3310      	adds	r3, #16
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fd62 	bl	8005718 <xTaskRemoveFromEventList>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00e      	beq.n	8004c78 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e007      	b.n	8004c78 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	b25a      	sxtb	r2, r3
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c7c:	e001      	b.n	8004c82 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f383 8811 	msr	BASEPRI, r3
}
 8004c8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3738      	adds	r7, #56	@ 0x38
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1c3 0307 	rsb	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e001      	b.n	8004cba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004cba:	68fb      	ldr	r3, [r7, #12]
	}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d14d      	bne.n	8004d8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 ff64 	bl	8005bc0 <xTaskPriorityDisinherit>
 8004cf8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	609a      	str	r2, [r3, #8]
 8004d00:	e043      	b.n	8004d8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d119      	bne.n	8004d3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6858      	ldr	r0, [r3, #4]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	461a      	mov	r2, r3
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	f001 ff37 	bl	8006b86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	441a      	add	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d32b      	bcc.n	8004d8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	e026      	b.n	8004d8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68d8      	ldr	r0, [r3, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	461a      	mov	r2, r3
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	f001 ff1d 	bl	8006b86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	425b      	negs	r3, r3
 8004d56:	441a      	add	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d207      	bcs.n	8004d78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	425b      	negs	r3, r3
 8004d72:	441a      	add	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d105      	bne.n	8004d8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d92:	697b      	ldr	r3, [r7, #20]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d018      	beq.n	8004de0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	441a      	add	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d303      	bcc.n	8004dd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68d9      	ldr	r1, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6838      	ldr	r0, [r7, #0]
 8004ddc:	f001 fed3 	bl	8006b86 <memcpy>
	}
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004df0:	f001 f9aa 	bl	8006148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dfc:	e011      	b.n	8004e22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d012      	beq.n	8004e2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3324      	adds	r3, #36	@ 0x24
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fc84 	bl	8005718 <xTaskRemoveFromEventList>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e16:	f000 fd5d 	bl	80058d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	dce9      	bgt.n	8004dfe <prvUnlockQueue+0x16>
 8004e2a:	e000      	b.n	8004e2e <prvUnlockQueue+0x46>
					break;
 8004e2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	22ff      	movs	r2, #255	@ 0xff
 8004e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e36:	f001 f9b9 	bl	80061ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e3a:	f001 f985 	bl	8006148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e46:	e011      	b.n	8004e6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d012      	beq.n	8004e76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3310      	adds	r3, #16
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fc5f 	bl	8005718 <xTaskRemoveFromEventList>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e60:	f000 fd38 	bl	80058d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e64:	7bbb      	ldrb	r3, [r7, #14]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	dce9      	bgt.n	8004e48 <prvUnlockQueue+0x60>
 8004e74:	e000      	b.n	8004e78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	22ff      	movs	r2, #255	@ 0xff
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e80:	f001 f994 	bl	80061ac <vPortExitCritical>
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e94:	f001 f958 	bl	8006148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d102      	bne.n	8004ea6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e001      	b.n	8004eaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eaa:	f001 f97f 	bl	80061ac <vPortExitCritical>

	return xReturn;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ec0:	f001 f942 	bl	8006148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d102      	bne.n	8004ed6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e001      	b.n	8004eda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eda:	f001 f967 	bl	80061ac <vPortExitCritical>

	return xReturn;
 8004ede:	68fb      	ldr	r3, [r7, #12]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08e      	sub	sp, #56	@ 0x38
 8004eec:	af04      	add	r7, sp, #16
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10b      	bne.n	8004f14 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	623b      	str	r3, [r7, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	e7fd      	b.n	8004f10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	61fb      	str	r3, [r7, #28]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f32:	2354      	movs	r3, #84	@ 0x54
 8004f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b54      	cmp	r3, #84	@ 0x54
 8004f3a:	d00b      	beq.n	8004f54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	61bb      	str	r3, [r7, #24]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01e      	beq.n	8004f9a <xTaskCreateStatic+0xb2>
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01b      	beq.n	8004f9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f74:	2300      	movs	r3, #0
 8004f76:	9303      	str	r3, [sp, #12]
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	9302      	str	r3, [sp, #8]
 8004f7c:	f107 0314 	add.w	r3, r7, #20
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f850 	bl	8005032 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f94:	f000 f8d6 	bl	8005144 <prvAddNewTaskToReadyList>
 8004f98:	e001      	b.n	8004f9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f9e:	697b      	ldr	r3, [r7, #20]
	}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3728      	adds	r7, #40	@ 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	@ 0x30
 8004fac:	af04      	add	r7, sp, #16
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fb8:	88fb      	ldrh	r3, [r7, #6]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 f9e5 	bl	800638c <pvPortMalloc>
 8004fc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00e      	beq.n	8004fe8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fca:	2054      	movs	r0, #84	@ 0x54
 8004fcc:	f001 f9de 	bl	800638c <pvPortMalloc>
 8004fd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fde:	e005      	b.n	8004fec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fe0:	6978      	ldr	r0, [r7, #20]
 8004fe2:	f001 faa1 	bl	8006528 <vPortFree>
 8004fe6:	e001      	b.n	8004fec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d017      	beq.n	8005022 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	9303      	str	r3, [sp, #12]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	9302      	str	r3, [sp, #8]
 8005004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f80e 	bl	8005032 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005016:	69f8      	ldr	r0, [r7, #28]
 8005018:	f000 f894 	bl	8005144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800501c:	2301      	movs	r3, #1
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	e002      	b.n	8005028 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005022:	f04f 33ff 	mov.w	r3, #4294967295
 8005026:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005028:	69bb      	ldr	r3, [r7, #24]
	}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b088      	sub	sp, #32
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800504a:	3b01      	subs	r3, #1
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f023 0307 	bic.w	r3, r3, #7
 8005058:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00b      	beq.n	800507c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	617b      	str	r3, [r7, #20]
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	e7fd      	b.n	8005078 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01f      	beq.n	80050c2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	e012      	b.n	80050ae <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	7819      	ldrb	r1, [r3, #0]
 8005090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	3334      	adds	r3, #52	@ 0x34
 8005098:	460a      	mov	r2, r1
 800509a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d006      	beq.n	80050b6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	3301      	adds	r3, #1
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b0f      	cmp	r3, #15
 80050b2:	d9e9      	bls.n	8005088 <prvInitialiseNewTask+0x56>
 80050b4:	e000      	b.n	80050b8 <prvInitialiseNewTask+0x86>
			{
				break;
 80050b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050c0:	e003      	b.n	80050ca <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	d901      	bls.n	80050d4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050d0:	2306      	movs	r3, #6
 80050d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050de:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	2200      	movs	r2, #0
 80050e4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	3304      	adds	r3, #4
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff f88e 	bl	800420c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	3318      	adds	r3, #24
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff f889 	bl	800420c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005102:	f1c3 0207 	rsb	r2, r3, #7
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800510e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	2200      	movs	r2, #0
 8005114:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	68f9      	ldr	r1, [r7, #12]
 8005122:	69b8      	ldr	r0, [r7, #24]
 8005124:	f000 fede 	bl	8005ee4 <pxPortInitialiseStack>
 8005128:	4602      	mov	r2, r0
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800512e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800513a:	bf00      	nop
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800514c:	f000 fffc 	bl	8006148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005150:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <prvAddNewTaskToReadyList+0xb8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	4a29      	ldr	r2, [pc, #164]	@ (80051fc <prvAddNewTaskToReadyList+0xb8>)
 8005158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800515a:	4b29      	ldr	r3, [pc, #164]	@ (8005200 <prvAddNewTaskToReadyList+0xbc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005162:	4a27      	ldr	r2, [pc, #156]	@ (8005200 <prvAddNewTaskToReadyList+0xbc>)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005168:	4b24      	ldr	r3, [pc, #144]	@ (80051fc <prvAddNewTaskToReadyList+0xb8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d110      	bne.n	8005192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005170:	f000 fbd4 	bl	800591c <prvInitialiseTaskLists>
 8005174:	e00d      	b.n	8005192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005176:	4b23      	ldr	r3, [pc, #140]	@ (8005204 <prvAddNewTaskToReadyList+0xc0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800517e:	4b20      	ldr	r3, [pc, #128]	@ (8005200 <prvAddNewTaskToReadyList+0xbc>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005188:	429a      	cmp	r2, r3
 800518a:	d802      	bhi.n	8005192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800518c:	4a1c      	ldr	r2, [pc, #112]	@ (8005200 <prvAddNewTaskToReadyList+0xbc>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005192:	4b1d      	ldr	r3, [pc, #116]	@ (8005208 <prvAddNewTaskToReadyList+0xc4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a1b      	ldr	r2, [pc, #108]	@ (8005208 <prvAddNewTaskToReadyList+0xc4>)
 800519a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a0:	2201      	movs	r2, #1
 80051a2:	409a      	lsls	r2, r3
 80051a4:	4b19      	ldr	r3, [pc, #100]	@ (800520c <prvAddNewTaskToReadyList+0xc8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	4a18      	ldr	r2, [pc, #96]	@ (800520c <prvAddNewTaskToReadyList+0xc8>)
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4a15      	ldr	r2, [pc, #84]	@ (8005210 <prvAddNewTaskToReadyList+0xcc>)
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f7ff f82e 	bl	8004226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051ca:	f000 ffef 	bl	80061ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <prvAddNewTaskToReadyList+0xc0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <prvAddNewTaskToReadyList+0xbc>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d207      	bcs.n	80051f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005214 <prvAddNewTaskToReadyList+0xd0>)
 80051e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	2000051c 	.word	0x2000051c
 8005200:	2000041c 	.word	0x2000041c
 8005204:	20000528 	.word	0x20000528
 8005208:	20000538 	.word	0x20000538
 800520c:	20000524 	.word	0x20000524
 8005210:	20000420 	.word	0x20000420
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d018      	beq.n	800525c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800522a:	4b14      	ldr	r3, [pc, #80]	@ (800527c <vTaskDelay+0x64>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <vTaskDelay+0x32>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	60bb      	str	r3, [r7, #8]
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	e7fd      	b.n	8005246 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800524a:	f000 f87d 	bl	8005348 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800524e:	2100      	movs	r1, #0
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fde1 	bl	8005e18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005256:	f000 f885 	bl	8005364 <xTaskResumeAll>
 800525a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005262:	4b07      	ldr	r3, [pc, #28]	@ (8005280 <vTaskDelay+0x68>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000544 	.word	0x20000544
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08a      	sub	sp, #40	@ 0x28
 8005288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800528e:	2300      	movs	r3, #0
 8005290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005292:	463a      	mov	r2, r7
 8005294:	1d39      	adds	r1, r7, #4
 8005296:	f107 0308 	add.w	r3, r7, #8
 800529a:	4618      	mov	r0, r3
 800529c:	f7fb fca0 	bl	8000be0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	9202      	str	r2, [sp, #8]
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	460a      	mov	r2, r1
 80052b2:	491f      	ldr	r1, [pc, #124]	@ (8005330 <vTaskStartScheduler+0xac>)
 80052b4:	481f      	ldr	r0, [pc, #124]	@ (8005334 <vTaskStartScheduler+0xb0>)
 80052b6:	f7ff fe17 	bl	8004ee8 <xTaskCreateStatic>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005338 <vTaskStartScheduler+0xb4>)
 80052be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <vTaskStartScheduler+0xb4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052c8:	2301      	movs	r3, #1
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e001      	b.n	80052d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d116      	bne.n	8005306 <vTaskStartScheduler+0x82>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	613b      	str	r3, [r7, #16]
}
 80052ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052ec:	4b13      	ldr	r3, [pc, #76]	@ (800533c <vTaskStartScheduler+0xb8>)
 80052ee:	f04f 32ff 	mov.w	r2, #4294967295
 80052f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052f4:	4b12      	ldr	r3, [pc, #72]	@ (8005340 <vTaskStartScheduler+0xbc>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052fa:	4b12      	ldr	r3, [pc, #72]	@ (8005344 <vTaskStartScheduler+0xc0>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005300:	f000 fe7e 	bl	8006000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005304:	e00f      	b.n	8005326 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d10b      	bne.n	8005326 <vTaskStartScheduler+0xa2>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60fb      	str	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	e7fd      	b.n	8005322 <vTaskStartScheduler+0x9e>
}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	08007df4 	.word	0x08007df4
 8005334:	080058ed 	.word	0x080058ed
 8005338:	20000540 	.word	0x20000540
 800533c:	2000053c 	.word	0x2000053c
 8005340:	20000528 	.word	0x20000528
 8005344:	20000520 	.word	0x20000520

08005348 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800534c:	4b04      	ldr	r3, [pc, #16]	@ (8005360 <vTaskSuspendAll+0x18>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	4a03      	ldr	r2, [pc, #12]	@ (8005360 <vTaskSuspendAll+0x18>)
 8005354:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005356:	bf00      	nop
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	20000544 	.word	0x20000544

08005364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800536e:	2300      	movs	r3, #0
 8005370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005372:	4b42      	ldr	r3, [pc, #264]	@ (800547c <xTaskResumeAll+0x118>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10b      	bne.n	8005392 <xTaskResumeAll+0x2e>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	603b      	str	r3, [r7, #0]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005392:	f000 fed9 	bl	8006148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005396:	4b39      	ldr	r3, [pc, #228]	@ (800547c <xTaskResumeAll+0x118>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3b01      	subs	r3, #1
 800539c:	4a37      	ldr	r2, [pc, #220]	@ (800547c <xTaskResumeAll+0x118>)
 800539e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a0:	4b36      	ldr	r3, [pc, #216]	@ (800547c <xTaskResumeAll+0x118>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d161      	bne.n	800546c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053a8:	4b35      	ldr	r3, [pc, #212]	@ (8005480 <xTaskResumeAll+0x11c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05d      	beq.n	800546c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053b0:	e02e      	b.n	8005410 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b2:	4b34      	ldr	r3, [pc, #208]	@ (8005484 <xTaskResumeAll+0x120>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3318      	adds	r3, #24
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe ff8e 	bl	80042e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3304      	adds	r3, #4
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe ff89 	bl	80042e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d2:	2201      	movs	r2, #1
 80053d4:	409a      	lsls	r2, r3
 80053d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005488 <xTaskResumeAll+0x124>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4313      	orrs	r3, r2
 80053dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005488 <xTaskResumeAll+0x124>)
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4a27      	ldr	r2, [pc, #156]	@ (800548c <xTaskResumeAll+0x128>)
 80053ee:	441a      	add	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f7fe ff15 	bl	8004226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005400:	4b23      	ldr	r3, [pc, #140]	@ (8005490 <xTaskResumeAll+0x12c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	429a      	cmp	r2, r3
 8005408:	d302      	bcc.n	8005410 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800540a:	4b22      	ldr	r3, [pc, #136]	@ (8005494 <xTaskResumeAll+0x130>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005410:	4b1c      	ldr	r3, [pc, #112]	@ (8005484 <xTaskResumeAll+0x120>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1cc      	bne.n	80053b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800541e:	f000 fb1b 	bl	8005a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005422:	4b1d      	ldr	r3, [pc, #116]	@ (8005498 <xTaskResumeAll+0x134>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800542e:	f000 f837 	bl	80054a0 <xTaskIncrementTick>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005438:	4b16      	ldr	r3, [pc, #88]	@ (8005494 <xTaskResumeAll+0x130>)
 800543a:	2201      	movs	r2, #1
 800543c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3b01      	subs	r3, #1
 8005442:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f1      	bne.n	800542e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800544a:	4b13      	ldr	r3, [pc, #76]	@ (8005498 <xTaskResumeAll+0x134>)
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005450:	4b10      	ldr	r3, [pc, #64]	@ (8005494 <xTaskResumeAll+0x130>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800545c:	4b0f      	ldr	r3, [pc, #60]	@ (800549c <xTaskResumeAll+0x138>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800546c:	f000 fe9e 	bl	80061ac <vPortExitCritical>

	return xAlreadyYielded;
 8005470:	68bb      	ldr	r3, [r7, #8]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000544 	.word	0x20000544
 8005480:	2000051c 	.word	0x2000051c
 8005484:	200004dc 	.word	0x200004dc
 8005488:	20000524 	.word	0x20000524
 800548c:	20000420 	.word	0x20000420
 8005490:	2000041c 	.word	0x2000041c
 8005494:	20000530 	.word	0x20000530
 8005498:	2000052c 	.word	0x2000052c
 800549c:	e000ed04 	.word	0xe000ed04

080054a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054aa:	4b4f      	ldr	r3, [pc, #316]	@ (80055e8 <xTaskIncrementTick+0x148>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 808f 	bne.w	80055d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054b4:	4b4d      	ldr	r3, [pc, #308]	@ (80055ec <xTaskIncrementTick+0x14c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3301      	adds	r3, #1
 80054ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054bc:	4a4b      	ldr	r2, [pc, #300]	@ (80055ec <xTaskIncrementTick+0x14c>)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d121      	bne.n	800550c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80054c8:	4b49      	ldr	r3, [pc, #292]	@ (80055f0 <xTaskIncrementTick+0x150>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	603b      	str	r3, [r7, #0]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <xTaskIncrementTick+0x46>
 80054ea:	4b41      	ldr	r3, [pc, #260]	@ (80055f0 <xTaskIncrementTick+0x150>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	4b40      	ldr	r3, [pc, #256]	@ (80055f4 <xTaskIncrementTick+0x154>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a3e      	ldr	r2, [pc, #248]	@ (80055f0 <xTaskIncrementTick+0x150>)
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4a3e      	ldr	r2, [pc, #248]	@ (80055f4 <xTaskIncrementTick+0x154>)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	4b3e      	ldr	r3, [pc, #248]	@ (80055f8 <xTaskIncrementTick+0x158>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3301      	adds	r3, #1
 8005504:	4a3c      	ldr	r2, [pc, #240]	@ (80055f8 <xTaskIncrementTick+0x158>)
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	f000 faa6 	bl	8005a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800550c:	4b3b      	ldr	r3, [pc, #236]	@ (80055fc <xTaskIncrementTick+0x15c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	429a      	cmp	r2, r3
 8005514:	d348      	bcc.n	80055a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005516:	4b36      	ldr	r3, [pc, #216]	@ (80055f0 <xTaskIncrementTick+0x150>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d104      	bne.n	800552a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005520:	4b36      	ldr	r3, [pc, #216]	@ (80055fc <xTaskIncrementTick+0x15c>)
 8005522:	f04f 32ff 	mov.w	r2, #4294967295
 8005526:	601a      	str	r2, [r3, #0]
					break;
 8005528:	e03e      	b.n	80055a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552a:	4b31      	ldr	r3, [pc, #196]	@ (80055f0 <xTaskIncrementTick+0x150>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	429a      	cmp	r2, r3
 8005540:	d203      	bcs.n	800554a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005542:	4a2e      	ldr	r2, [pc, #184]	@ (80055fc <xTaskIncrementTick+0x15c>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005548:	e02e      	b.n	80055a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3304      	adds	r3, #4
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fec6 	bl	80042e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	3318      	adds	r3, #24
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe febd 	bl	80042e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556a:	2201      	movs	r2, #1
 800556c:	409a      	lsls	r2, r3
 800556e:	4b24      	ldr	r3, [pc, #144]	@ (8005600 <xTaskIncrementTick+0x160>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4313      	orrs	r3, r2
 8005574:	4a22      	ldr	r2, [pc, #136]	@ (8005600 <xTaskIncrementTick+0x160>)
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4a1f      	ldr	r2, [pc, #124]	@ (8005604 <xTaskIncrementTick+0x164>)
 8005586:	441a      	add	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f7fe fe49 	bl	8004226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005598:	4b1b      	ldr	r3, [pc, #108]	@ (8005608 <xTaskIncrementTick+0x168>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559e:	429a      	cmp	r2, r3
 80055a0:	d3b9      	bcc.n	8005516 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80055a2:	2301      	movs	r3, #1
 80055a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a6:	e7b6      	b.n	8005516 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055a8:	4b17      	ldr	r3, [pc, #92]	@ (8005608 <xTaskIncrementTick+0x168>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ae:	4915      	ldr	r1, [pc, #84]	@ (8005604 <xTaskIncrementTick+0x164>)
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d901      	bls.n	80055c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80055c4:	4b11      	ldr	r3, [pc, #68]	@ (800560c <xTaskIncrementTick+0x16c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80055cc:	2301      	movs	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e004      	b.n	80055dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80055d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005610 <xTaskIncrementTick+0x170>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005610 <xTaskIncrementTick+0x170>)
 80055da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055dc:	697b      	ldr	r3, [r7, #20]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000544 	.word	0x20000544
 80055ec:	20000520 	.word	0x20000520
 80055f0:	200004d4 	.word	0x200004d4
 80055f4:	200004d8 	.word	0x200004d8
 80055f8:	20000534 	.word	0x20000534
 80055fc:	2000053c 	.word	0x2000053c
 8005600:	20000524 	.word	0x20000524
 8005604:	20000420 	.word	0x20000420
 8005608:	2000041c 	.word	0x2000041c
 800560c:	20000530 	.word	0x20000530
 8005610:	2000052c 	.word	0x2000052c

08005614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800561a:	4b27      	ldr	r3, [pc, #156]	@ (80056b8 <vTaskSwitchContext+0xa4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005622:	4b26      	ldr	r3, [pc, #152]	@ (80056bc <vTaskSwitchContext+0xa8>)
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005628:	e040      	b.n	80056ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800562a:	4b24      	ldr	r3, [pc, #144]	@ (80056bc <vTaskSwitchContext+0xa8>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005630:	4b23      	ldr	r3, [pc, #140]	@ (80056c0 <vTaskSwitchContext+0xac>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	fab3 f383 	clz	r3, r3
 800563c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800563e:	7afb      	ldrb	r3, [r7, #11]
 8005640:	f1c3 031f 	rsb	r3, r3, #31
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	491f      	ldr	r1, [pc, #124]	@ (80056c4 <vTaskSwitchContext+0xb0>)
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <vTaskSwitchContext+0x5e>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	607b      	str	r3, [r7, #4]
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <vTaskSwitchContext+0x5a>
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4a11      	ldr	r2, [pc, #68]	@ (80056c4 <vTaskSwitchContext+0xb0>)
 800567e:	4413      	add	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	3308      	adds	r3, #8
 8005694:	429a      	cmp	r2, r3
 8005696:	d104      	bne.n	80056a2 <vTaskSwitchContext+0x8e>
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	605a      	str	r2, [r3, #4]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	4a07      	ldr	r2, [pc, #28]	@ (80056c8 <vTaskSwitchContext+0xb4>)
 80056aa:	6013      	str	r3, [r2, #0]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	20000544 	.word	0x20000544
 80056bc:	20000530 	.word	0x20000530
 80056c0:	20000524 	.word	0x20000524
 80056c4:	20000420 	.word	0x20000420
 80056c8:	2000041c 	.word	0x2000041c

080056cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	60fb      	str	r3, [r7, #12]
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056f4:	4b07      	ldr	r3, [pc, #28]	@ (8005714 <vTaskPlaceOnEventList+0x48>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3318      	adds	r3, #24
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7fe fdb6 	bl	800426e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005702:	2101      	movs	r1, #1
 8005704:	6838      	ldr	r0, [r7, #0]
 8005706:	f000 fb87 	bl	8005e18 <prvAddCurrentTaskToDelayedList>
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	2000041c 	.word	0x2000041c

08005718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10b      	bne.n	8005746 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	60fb      	str	r3, [r7, #12]
}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	e7fd      	b.n	8005742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	3318      	adds	r3, #24
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fdc8 	bl	80042e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005750:	4b1d      	ldr	r3, [pc, #116]	@ (80057c8 <xTaskRemoveFromEventList+0xb0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11c      	bne.n	8005792 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3304      	adds	r3, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fdbf 	bl	80042e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	2201      	movs	r2, #1
 8005768:	409a      	lsls	r2, r3
 800576a:	4b18      	ldr	r3, [pc, #96]	@ (80057cc <xTaskRemoveFromEventList+0xb4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4313      	orrs	r3, r2
 8005770:	4a16      	ldr	r2, [pc, #88]	@ (80057cc <xTaskRemoveFromEventList+0xb4>)
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4a13      	ldr	r2, [pc, #76]	@ (80057d0 <xTaskRemoveFromEventList+0xb8>)
 8005782:	441a      	add	r2, r3
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	3304      	adds	r3, #4
 8005788:	4619      	mov	r1, r3
 800578a:	4610      	mov	r0, r2
 800578c:	f7fe fd4b 	bl	8004226 <vListInsertEnd>
 8005790:	e005      	b.n	800579e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3318      	adds	r3, #24
 8005796:	4619      	mov	r1, r3
 8005798:	480e      	ldr	r0, [pc, #56]	@ (80057d4 <xTaskRemoveFromEventList+0xbc>)
 800579a:	f7fe fd44 	bl	8004226 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a2:	4b0d      	ldr	r3, [pc, #52]	@ (80057d8 <xTaskRemoveFromEventList+0xc0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d905      	bls.n	80057b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057ac:	2301      	movs	r3, #1
 80057ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057b0:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <xTaskRemoveFromEventList+0xc4>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e001      	b.n	80057bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057bc:	697b      	ldr	r3, [r7, #20]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000544 	.word	0x20000544
 80057cc:	20000524 	.word	0x20000524
 80057d0:	20000420 	.word	0x20000420
 80057d4:	200004dc 	.word	0x200004dc
 80057d8:	2000041c 	.word	0x2000041c
 80057dc:	20000530 	.word	0x20000530

080057e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057e8:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <vTaskInternalSetTimeOutState+0x24>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057f0:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <vTaskInternalSetTimeOutState+0x28>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	605a      	str	r2, [r3, #4]
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	20000534 	.word	0x20000534
 8005808:	20000520 	.word	0x20000520

0800580c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	613b      	str	r3, [r7, #16]
}
 800582e:	bf00      	nop
 8005830:	bf00      	nop
 8005832:	e7fd      	b.n	8005830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	60fb      	str	r3, [r7, #12]
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	e7fd      	b.n	800584e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005852:	f000 fc79 	bl	8006148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005856:	4b1d      	ldr	r3, [pc, #116]	@ (80058cc <xTaskCheckForTimeOut+0xc0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d102      	bne.n	8005876 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005870:	2300      	movs	r3, #0
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	e023      	b.n	80058be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b15      	ldr	r3, [pc, #84]	@ (80058d0 <xTaskCheckForTimeOut+0xc4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d007      	beq.n	8005892 <xTaskCheckForTimeOut+0x86>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	429a      	cmp	r2, r3
 800588a:	d302      	bcc.n	8005892 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800588c:	2301      	movs	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e015      	b.n	80058be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	429a      	cmp	r2, r3
 800589a:	d20b      	bcs.n	80058b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad2      	subs	r2, r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff ff99 	bl	80057e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	e004      	b.n	80058be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058ba:	2301      	movs	r3, #1
 80058bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058be:	f000 fc75 	bl	80061ac <vPortExitCritical>

	return xReturn;
 80058c2:	69fb      	ldr	r3, [r7, #28]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3720      	adds	r7, #32
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000520 	.word	0x20000520
 80058d0:	20000534 	.word	0x20000534

080058d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058d8:	4b03      	ldr	r3, [pc, #12]	@ (80058e8 <vTaskMissedYield+0x14>)
 80058da:	2201      	movs	r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	20000530 	.word	0x20000530

080058ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058f4:	f000 f852 	bl	800599c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058f8:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <prvIdleTask+0x28>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d9f9      	bls.n	80058f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <prvIdleTask+0x2c>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005910:	e7f0      	b.n	80058f4 <prvIdleTask+0x8>
 8005912:	bf00      	nop
 8005914:	20000420 	.word	0x20000420
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005922:	2300      	movs	r3, #0
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	e00c      	b.n	8005942 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4a12      	ldr	r2, [pc, #72]	@ (800597c <prvInitialiseTaskLists+0x60>)
 8005934:	4413      	add	r3, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe fc48 	bl	80041cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3301      	adds	r3, #1
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b06      	cmp	r3, #6
 8005946:	d9ef      	bls.n	8005928 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005948:	480d      	ldr	r0, [pc, #52]	@ (8005980 <prvInitialiseTaskLists+0x64>)
 800594a:	f7fe fc3f 	bl	80041cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800594e:	480d      	ldr	r0, [pc, #52]	@ (8005984 <prvInitialiseTaskLists+0x68>)
 8005950:	f7fe fc3c 	bl	80041cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005954:	480c      	ldr	r0, [pc, #48]	@ (8005988 <prvInitialiseTaskLists+0x6c>)
 8005956:	f7fe fc39 	bl	80041cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800595a:	480c      	ldr	r0, [pc, #48]	@ (800598c <prvInitialiseTaskLists+0x70>)
 800595c:	f7fe fc36 	bl	80041cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005960:	480b      	ldr	r0, [pc, #44]	@ (8005990 <prvInitialiseTaskLists+0x74>)
 8005962:	f7fe fc33 	bl	80041cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005966:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <prvInitialiseTaskLists+0x78>)
 8005968:	4a05      	ldr	r2, [pc, #20]	@ (8005980 <prvInitialiseTaskLists+0x64>)
 800596a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800596c:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <prvInitialiseTaskLists+0x7c>)
 800596e:	4a05      	ldr	r2, [pc, #20]	@ (8005984 <prvInitialiseTaskLists+0x68>)
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000420 	.word	0x20000420
 8005980:	200004ac 	.word	0x200004ac
 8005984:	200004c0 	.word	0x200004c0
 8005988:	200004dc 	.word	0x200004dc
 800598c:	200004f0 	.word	0x200004f0
 8005990:	20000508 	.word	0x20000508
 8005994:	200004d4 	.word	0x200004d4
 8005998:	200004d8 	.word	0x200004d8

0800599c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059a2:	e019      	b.n	80059d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059a4:	f000 fbd0 	bl	8006148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a8:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <prvCheckTasksWaitingTermination+0x50>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe fc93 	bl	80042e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <prvCheckTasksWaitingTermination+0x54>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3b01      	subs	r3, #1
 80059c0:	4a0b      	ldr	r2, [pc, #44]	@ (80059f0 <prvCheckTasksWaitingTermination+0x54>)
 80059c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059c4:	4b0b      	ldr	r3, [pc, #44]	@ (80059f4 <prvCheckTasksWaitingTermination+0x58>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	4a0a      	ldr	r2, [pc, #40]	@ (80059f4 <prvCheckTasksWaitingTermination+0x58>)
 80059cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ce:	f000 fbed 	bl	80061ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f810 	bl	80059f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059d8:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <prvCheckTasksWaitingTermination+0x58>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e1      	bne.n	80059a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200004f0 	.word	0x200004f0
 80059f0:	2000051c 	.word	0x2000051c
 80059f4:	20000504 	.word	0x20000504

080059f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d108      	bne.n	8005a1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fd8a 	bl	8006528 <vPortFree>
				vPortFree( pxTCB );
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fd87 	bl	8006528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a1a:	e019      	b.n	8005a50 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d103      	bne.n	8005a2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fd7e 	bl	8006528 <vPortFree>
	}
 8005a2c:	e010      	b.n	8005a50 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d00b      	beq.n	8005a50 <prvDeleteTCB+0x58>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	60fb      	str	r3, [r7, #12]
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <prvDeleteTCB+0x54>
	}
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <prvResetNextTaskUnblockTime+0x38>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a68:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <prvResetNextTaskUnblockTime+0x3c>)
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a70:	e008      	b.n	8005a84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a72:	4b07      	ldr	r3, [pc, #28]	@ (8005a90 <prvResetNextTaskUnblockTime+0x38>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a04      	ldr	r2, [pc, #16]	@ (8005a94 <prvResetNextTaskUnblockTime+0x3c>)
 8005a82:	6013      	str	r3, [r2, #0]
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	200004d4 	.word	0x200004d4
 8005a94:	2000053c 	.word	0x2000053c

08005a98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <xTaskGetSchedulerState+0x34>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	e008      	b.n	8005abe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aac:	4b08      	ldr	r3, [pc, #32]	@ (8005ad0 <xTaskGetSchedulerState+0x38>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	607b      	str	r3, [r7, #4]
 8005ab8:	e001      	b.n	8005abe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005abe:	687b      	ldr	r3, [r7, #4]
	}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000528 	.word	0x20000528
 8005ad0:	20000544 	.word	0x20000544

08005ad4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d05e      	beq.n	8005ba8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aee:	4b31      	ldr	r3, [pc, #196]	@ (8005bb4 <xTaskPriorityInherit+0xe0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d24e      	bcs.n	8005b96 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	db06      	blt.n	8005b0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b00:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb4 <xTaskPriorityInherit+0xe0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	f1c3 0207 	rsb	r2, r3, #7
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6959      	ldr	r1, [r3, #20]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4a26      	ldr	r2, [pc, #152]	@ (8005bb8 <xTaskPriorityInherit+0xe4>)
 8005b20:	4413      	add	r3, r2
 8005b22:	4299      	cmp	r1, r3
 8005b24:	d12f      	bne.n	8005b86 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe fbd8 	bl	80042e0 <uxListRemove>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43da      	mvns	r2, r3
 8005b42:	4b1e      	ldr	r3, [pc, #120]	@ (8005bbc <xTaskPriorityInherit+0xe8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4013      	ands	r3, r2
 8005b48:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <xTaskPriorityInherit+0xe8>)
 8005b4a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b4c:	4b19      	ldr	r3, [pc, #100]	@ (8005bb4 <xTaskPriorityInherit+0xe0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	409a      	lsls	r2, r3
 8005b5e:	4b17      	ldr	r3, [pc, #92]	@ (8005bbc <xTaskPriorityInherit+0xe8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	4a15      	ldr	r2, [pc, #84]	@ (8005bbc <xTaskPriorityInherit+0xe8>)
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4a10      	ldr	r2, [pc, #64]	@ (8005bb8 <xTaskPriorityInherit+0xe4>)
 8005b76:	441a      	add	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7fe fb51 	bl	8004226 <vListInsertEnd>
 8005b84:	e004      	b.n	8005b90 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <xTaskPriorityInherit+0xe0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e008      	b.n	8005ba8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b9a:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <xTaskPriorityInherit+0xe0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d201      	bcs.n	8005ba8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
	}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	2000041c 	.word	0x2000041c
 8005bb8:	20000420 	.word	0x20000420
 8005bbc:	20000524 	.word	0x20000524

08005bc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d070      	beq.n	8005cb8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8005cc4 <xTaskPriorityDisinherit+0x104>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d00b      	beq.n	8005bf8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10b      	bne.n	8005c18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	60bb      	str	r3, [r7, #8]
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	e7fd      	b.n	8005c14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1c:	1e5a      	subs	r2, r3, #1
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d044      	beq.n	8005cb8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d140      	bne.n	8005cb8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe fb50 	bl	80042e0 <uxListRemove>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d115      	bne.n	8005c72 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4a:	491f      	ldr	r1, [pc, #124]	@ (8005cc8 <xTaskPriorityDisinherit+0x108>)
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <xTaskPriorityDisinherit+0xb2>
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c60:	2201      	movs	r2, #1
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43da      	mvns	r2, r3
 8005c68:	4b18      	ldr	r3, [pc, #96]	@ (8005ccc <xTaskPriorityDisinherit+0x10c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	4a17      	ldr	r2, [pc, #92]	@ (8005ccc <xTaskPriorityDisinherit+0x10c>)
 8005c70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	f1c3 0207 	rsb	r2, r3, #7
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	409a      	lsls	r2, r3
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005ccc <xTaskPriorityDisinherit+0x10c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	4a0d      	ldr	r2, [pc, #52]	@ (8005ccc <xTaskPriorityDisinherit+0x10c>)
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4a08      	ldr	r2, [pc, #32]	@ (8005cc8 <xTaskPriorityDisinherit+0x108>)
 8005ca6:	441a      	add	r2, r3
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f7fe fab9 	bl	8004226 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cb8:	697b      	ldr	r3, [r7, #20]
	}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	2000041c 	.word	0x2000041c
 8005cc8:	20000420 	.word	0x20000420
 8005ccc:	20000524 	.word	0x20000524

08005cd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d079      	beq.n	8005ddc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10b      	bne.n	8005d08 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	60fb      	str	r3, [r7, #12]
}
 8005d02:	bf00      	nop
 8005d04:	bf00      	nop
 8005d06:	e7fd      	b.n	8005d04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d902      	bls.n	8005d18 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	e002      	b.n	8005d1e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d059      	beq.n	8005ddc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d154      	bne.n	8005ddc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005d32:	4b2c      	ldr	r3, [pc, #176]	@ (8005de4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d10b      	bne.n	8005d54 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	60bb      	str	r3, [r7, #8]
}
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	db04      	blt.n	8005d72 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f1c3 0207 	rsb	r2, r3, #7
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	6959      	ldr	r1, [r3, #20]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4a19      	ldr	r2, [pc, #100]	@ (8005de8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005d82:	4413      	add	r3, r2
 8005d84:	4299      	cmp	r1, r3
 8005d86:	d129      	bne.n	8005ddc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe faa7 	bl	80042e0 <uxListRemove>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43da      	mvns	r2, r3
 8005da4:	4b11      	ldr	r3, [pc, #68]	@ (8005dec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4013      	ands	r3, r2
 8005daa:	4a10      	ldr	r2, [pc, #64]	@ (8005dec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005dac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	2201      	movs	r2, #1
 8005db4:	409a      	lsls	r2, r3
 8005db6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8005dec <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4a06      	ldr	r2, [pc, #24]	@ (8005de8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005dce:	441a      	add	r2, r3
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f7fe fa25 	bl	8004226 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ddc:	bf00      	nop
 8005dde:	3720      	adds	r7, #32
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	2000041c 	.word	0x2000041c
 8005de8:	20000420 	.word	0x20000420
 8005dec:	20000524 	.word	0x20000524

08005df0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005df4:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <pvTaskIncrementMutexHeldCount+0x24>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005dfc:	4b05      	ldr	r3, [pc, #20]	@ (8005e14 <pvTaskIncrementMutexHeldCount+0x24>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e02:	3201      	adds	r2, #1
 8005e04:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005e06:	4b03      	ldr	r3, [pc, #12]	@ (8005e14 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e08:	681b      	ldr	r3, [r3, #0]
	}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	2000041c 	.word	0x2000041c

08005e18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e22:	4b29      	ldr	r3, [pc, #164]	@ (8005ec8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e28:	4b28      	ldr	r3, [pc, #160]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe fa56 	bl	80042e0 <uxListRemove>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e3a:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e40:	2201      	movs	r2, #1
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43da      	mvns	r2, r3
 8005e48:	4b21      	ldr	r3, [pc, #132]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	4a20      	ldr	r2, [pc, #128]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d10a      	bne.n	8005e70 <prvAddCurrentTaskToDelayedList+0x58>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	481a      	ldr	r0, [pc, #104]	@ (8005ed4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e6a:	f7fe f9dc 	bl	8004226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e6e:	e026      	b.n	8005ebe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e78:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d209      	bcs.n	8005e9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e88:	4b13      	ldr	r3, [pc, #76]	@ (8005ed8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7fe f9ea 	bl	800426e <vListInsert>
}
 8005e9a:	e010      	b.n	8005ebe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7fe f9e0 	bl	800426e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005eae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d202      	bcs.n	8005ebe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005eb8:	4a09      	ldr	r2, [pc, #36]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6013      	str	r3, [r2, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000520 	.word	0x20000520
 8005ecc:	2000041c 	.word	0x2000041c
 8005ed0:	20000524 	.word	0x20000524
 8005ed4:	20000508 	.word	0x20000508
 8005ed8:	200004d8 	.word	0x200004d8
 8005edc:	200004d4 	.word	0x200004d4
 8005ee0:	2000053c 	.word	0x2000053c

08005ee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3b04      	subs	r3, #4
 8005ef4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3b04      	subs	r3, #4
 8005f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f023 0201 	bic.w	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3b04      	subs	r3, #4
 8005f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f14:	4a0c      	ldr	r2, [pc, #48]	@ (8005f48 <pxPortInitialiseStack+0x64>)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3b14      	subs	r3, #20
 8005f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3b04      	subs	r3, #4
 8005f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f06f 0202 	mvn.w	r2, #2
 8005f32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3b20      	subs	r3, #32
 8005f38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	08005f4d 	.word	0x08005f4d

08005f4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f56:	4b13      	ldr	r3, [pc, #76]	@ (8005fa4 <prvTaskExitError+0x58>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d00b      	beq.n	8005f78 <prvTaskExitError+0x2c>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	60fb      	str	r3, [r7, #12]
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <prvTaskExitError+0x28>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60bb      	str	r3, [r7, #8]
}
 8005f8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f8c:	bf00      	nop
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0fc      	beq.n	8005f8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000078 	.word	0x20000078
	...

08005fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fb0:	4b07      	ldr	r3, [pc, #28]	@ (8005fd0 <pxCurrentTCBConst2>)
 8005fb2:	6819      	ldr	r1, [r3, #0]
 8005fb4:	6808      	ldr	r0, [r1, #0]
 8005fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fba:	f380 8809 	msr	PSP, r0
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f380 8811 	msr	BASEPRI, r0
 8005fca:	4770      	bx	lr
 8005fcc:	f3af 8000 	nop.w

08005fd0 <pxCurrentTCBConst2>:
 8005fd0:	2000041c 	.word	0x2000041c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop

08005fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fd8:	4808      	ldr	r0, [pc, #32]	@ (8005ffc <prvPortStartFirstTask+0x24>)
 8005fda:	6800      	ldr	r0, [r0, #0]
 8005fdc:	6800      	ldr	r0, [r0, #0]
 8005fde:	f380 8808 	msr	MSP, r0
 8005fe2:	f04f 0000 	mov.w	r0, #0
 8005fe6:	f380 8814 	msr	CONTROL, r0
 8005fea:	b662      	cpsie	i
 8005fec:	b661      	cpsie	f
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	df00      	svc	0
 8005ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ffa:	bf00      	nop
 8005ffc:	e000ed08 	.word	0xe000ed08

08006000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006006:	4b47      	ldr	r3, [pc, #284]	@ (8006124 <xPortStartScheduler+0x124>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a47      	ldr	r2, [pc, #284]	@ (8006128 <xPortStartScheduler+0x128>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10b      	bne.n	8006028 <xPortStartScheduler+0x28>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006028:	4b3e      	ldr	r3, [pc, #248]	@ (8006124 <xPortStartScheduler+0x124>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a3f      	ldr	r2, [pc, #252]	@ (800612c <xPortStartScheduler+0x12c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d10b      	bne.n	800604a <xPortStartScheduler+0x4a>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	613b      	str	r3, [r7, #16]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800604a:	4b39      	ldr	r3, [pc, #228]	@ (8006130 <xPortStartScheduler+0x130>)
 800604c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	22ff      	movs	r2, #255	@ 0xff
 800605a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800606c:	b2da      	uxtb	r2, r3
 800606e:	4b31      	ldr	r3, [pc, #196]	@ (8006134 <xPortStartScheduler+0x134>)
 8006070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006072:	4b31      	ldr	r3, [pc, #196]	@ (8006138 <xPortStartScheduler+0x138>)
 8006074:	2207      	movs	r2, #7
 8006076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006078:	e009      	b.n	800608e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800607a:	4b2f      	ldr	r3, [pc, #188]	@ (8006138 <xPortStartScheduler+0x138>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3b01      	subs	r3, #1
 8006080:	4a2d      	ldr	r2, [pc, #180]	@ (8006138 <xPortStartScheduler+0x138>)
 8006082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	b2db      	uxtb	r3, r3
 800608c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006096:	2b80      	cmp	r3, #128	@ 0x80
 8006098:	d0ef      	beq.n	800607a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800609a:	4b27      	ldr	r3, [pc, #156]	@ (8006138 <xPortStartScheduler+0x138>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f1c3 0307 	rsb	r3, r3, #7
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d00b      	beq.n	80060be <xPortStartScheduler+0xbe>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	60bb      	str	r3, [r7, #8]
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	e7fd      	b.n	80060ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060be:	4b1e      	ldr	r3, [pc, #120]	@ (8006138 <xPortStartScheduler+0x138>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006138 <xPortStartScheduler+0x138>)
 80060c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006138 <xPortStartScheduler+0x138>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060d0:	4a19      	ldr	r2, [pc, #100]	@ (8006138 <xPortStartScheduler+0x138>)
 80060d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060dc:	4b17      	ldr	r3, [pc, #92]	@ (800613c <xPortStartScheduler+0x13c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a16      	ldr	r2, [pc, #88]	@ (800613c <xPortStartScheduler+0x13c>)
 80060e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060e8:	4b14      	ldr	r3, [pc, #80]	@ (800613c <xPortStartScheduler+0x13c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a13      	ldr	r2, [pc, #76]	@ (800613c <xPortStartScheduler+0x13c>)
 80060ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060f4:	f000 f8da 	bl	80062ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060f8:	4b11      	ldr	r3, [pc, #68]	@ (8006140 <xPortStartScheduler+0x140>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060fe:	f000 f8f9 	bl	80062f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006102:	4b10      	ldr	r3, [pc, #64]	@ (8006144 <xPortStartScheduler+0x144>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a0f      	ldr	r2, [pc, #60]	@ (8006144 <xPortStartScheduler+0x144>)
 8006108:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800610c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800610e:	f7ff ff63 	bl	8005fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006112:	f7ff fa7f 	bl	8005614 <vTaskSwitchContext>
	prvTaskExitError();
 8006116:	f7ff ff19 	bl	8005f4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	e000ed00 	.word	0xe000ed00
 8006128:	410fc271 	.word	0x410fc271
 800612c:	410fc270 	.word	0x410fc270
 8006130:	e000e400 	.word	0xe000e400
 8006134:	20000548 	.word	0x20000548
 8006138:	2000054c 	.word	0x2000054c
 800613c:	e000ed20 	.word	0xe000ed20
 8006140:	20000078 	.word	0x20000078
 8006144:	e000ef34 	.word	0xe000ef34

08006148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	607b      	str	r3, [r7, #4]
}
 8006160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006162:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <vPortEnterCritical+0x5c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3301      	adds	r3, #1
 8006168:	4a0e      	ldr	r2, [pc, #56]	@ (80061a4 <vPortEnterCritical+0x5c>)
 800616a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800616c:	4b0d      	ldr	r3, [pc, #52]	@ (80061a4 <vPortEnterCritical+0x5c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d110      	bne.n	8006196 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006174:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <vPortEnterCritical+0x60>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00b      	beq.n	8006196 <vPortEnterCritical+0x4e>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	603b      	str	r3, [r7, #0]
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	e7fd      	b.n	8006192 <vPortEnterCritical+0x4a>
	}
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000078 	.word	0x20000078
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061b2:	4b12      	ldr	r3, [pc, #72]	@ (80061fc <vPortExitCritical+0x50>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <vPortExitCritical+0x26>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	607b      	str	r3, [r7, #4]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061d2:	4b0a      	ldr	r3, [pc, #40]	@ (80061fc <vPortExitCritical+0x50>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	4a08      	ldr	r2, [pc, #32]	@ (80061fc <vPortExitCritical+0x50>)
 80061da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061dc:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <vPortExitCritical+0x50>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d105      	bne.n	80061f0 <vPortExitCritical+0x44>
 80061e4:	2300      	movs	r3, #0
 80061e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f383 8811 	msr	BASEPRI, r3
}
 80061ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20000078 	.word	0x20000078

08006200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006200:	f3ef 8009 	mrs	r0, PSP
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	4b15      	ldr	r3, [pc, #84]	@ (8006260 <pxCurrentTCBConst>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	f01e 0f10 	tst.w	lr, #16
 8006210:	bf08      	it	eq
 8006212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621a:	6010      	str	r0, [r2, #0]
 800621c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006224:	f380 8811 	msr	BASEPRI, r0
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f7ff f9f0 	bl	8005614 <vTaskSwitchContext>
 8006234:	f04f 0000 	mov.w	r0, #0
 8006238:	f380 8811 	msr	BASEPRI, r0
 800623c:	bc09      	pop	{r0, r3}
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	6808      	ldr	r0, [r1, #0]
 8006242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006246:	f01e 0f10 	tst.w	lr, #16
 800624a:	bf08      	it	eq
 800624c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006250:	f380 8809 	msr	PSP, r0
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	f3af 8000 	nop.w

08006260 <pxCurrentTCBConst>:
 8006260:	2000041c 	.word	0x2000041c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop

08006268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	607b      	str	r3, [r7, #4]
}
 8006280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006282:	f7ff f90d 	bl	80054a0 <xTaskIncrementTick>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800628c:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <xPortSysTickHandler+0x40>)
 800628e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f383 8811 	msr	BASEPRI, r3
}
 800629e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062b0:	4b0b      	ldr	r3, [pc, #44]	@ (80062e0 <vPortSetupTimerInterrupt+0x34>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062b6:	4b0b      	ldr	r3, [pc, #44]	@ (80062e4 <vPortSetupTimerInterrupt+0x38>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062bc:	4b0a      	ldr	r3, [pc, #40]	@ (80062e8 <vPortSetupTimerInterrupt+0x3c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0a      	ldr	r2, [pc, #40]	@ (80062ec <vPortSetupTimerInterrupt+0x40>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	099b      	lsrs	r3, r3, #6
 80062c8:	4a09      	ldr	r2, [pc, #36]	@ (80062f0 <vPortSetupTimerInterrupt+0x44>)
 80062ca:	3b01      	subs	r3, #1
 80062cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062ce:	4b04      	ldr	r3, [pc, #16]	@ (80062e0 <vPortSetupTimerInterrupt+0x34>)
 80062d0:	2207      	movs	r2, #7
 80062d2:	601a      	str	r2, [r3, #0]
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	e000e010 	.word	0xe000e010
 80062e4:	e000e018 	.word	0xe000e018
 80062e8:	2000006c 	.word	0x2000006c
 80062ec:	10624dd3 	.word	0x10624dd3
 80062f0:	e000e014 	.word	0xe000e014

080062f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006304 <vPortEnableVFP+0x10>
 80062f8:	6801      	ldr	r1, [r0, #0]
 80062fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80062fe:	6001      	str	r1, [r0, #0]
 8006300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006302:	bf00      	nop
 8006304:	e000ed88 	.word	0xe000ed88

08006308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800630e:	f3ef 8305 	mrs	r3, IPSR
 8006312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	d915      	bls.n	8006346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800631a:	4a18      	ldr	r2, [pc, #96]	@ (800637c <vPortValidateInterruptPriority+0x74>)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006324:	4b16      	ldr	r3, [pc, #88]	@ (8006380 <vPortValidateInterruptPriority+0x78>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	7afa      	ldrb	r2, [r7, #11]
 800632a:	429a      	cmp	r2, r3
 800632c:	d20b      	bcs.n	8006346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	607b      	str	r3, [r7, #4]
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006346:	4b0f      	ldr	r3, [pc, #60]	@ (8006384 <vPortValidateInterruptPriority+0x7c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800634e:	4b0e      	ldr	r3, [pc, #56]	@ (8006388 <vPortValidateInterruptPriority+0x80>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d90b      	bls.n	800636e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	603b      	str	r3, [r7, #0]
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	e7fd      	b.n	800636a <vPortValidateInterruptPriority+0x62>
	}
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	e000e3f0 	.word	0xe000e3f0
 8006380:	20000548 	.word	0x20000548
 8006384:	e000ed0c 	.word	0xe000ed0c
 8006388:	2000054c 	.word	0x2000054c

0800638c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	@ 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006398:	f7fe ffd6 	bl	8005348 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800639c:	4b5c      	ldr	r3, [pc, #368]	@ (8006510 <pvPortMalloc+0x184>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063a4:	f000 f924 	bl	80065f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006514 <pvPortMalloc+0x188>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4013      	ands	r3, r2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f040 8095 	bne.w	80064e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01e      	beq.n	80063fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80063bc:	2208      	movs	r2, #8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4413      	add	r3, r2
 80063c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d015      	beq.n	80063fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f023 0307 	bic.w	r3, r3, #7
 80063d4:	3308      	adds	r3, #8
 80063d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <pvPortMalloc+0x6e>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	617b      	str	r3, [r7, #20]
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	e7fd      	b.n	80063f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d06f      	beq.n	80064e0 <pvPortMalloc+0x154>
 8006400:	4b45      	ldr	r3, [pc, #276]	@ (8006518 <pvPortMalloc+0x18c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d86a      	bhi.n	80064e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800640a:	4b44      	ldr	r3, [pc, #272]	@ (800651c <pvPortMalloc+0x190>)
 800640c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800640e:	4b43      	ldr	r3, [pc, #268]	@ (800651c <pvPortMalloc+0x190>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006414:	e004      	b.n	8006420 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d903      	bls.n	8006432 <pvPortMalloc+0xa6>
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f1      	bne.n	8006416 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006432:	4b37      	ldr	r3, [pc, #220]	@ (8006510 <pvPortMalloc+0x184>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006438:	429a      	cmp	r2, r3
 800643a:	d051      	beq.n	80064e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2208      	movs	r2, #8
 8006442:	4413      	add	r3, r2
 8006444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	1ad2      	subs	r2, r2, r3
 8006456:	2308      	movs	r3, #8
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	429a      	cmp	r2, r3
 800645c:	d920      	bls.n	80064a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800645e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4413      	add	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <pvPortMalloc+0xfc>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	613b      	str	r3, [r7, #16]
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	e7fd      	b.n	8006484 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800649a:	69b8      	ldr	r0, [r7, #24]
 800649c:	f000 f90a 	bl	80066b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006518 <pvPortMalloc+0x18c>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006518 <pvPortMalloc+0x18c>)
 80064ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006518 <pvPortMalloc+0x18c>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006520 <pvPortMalloc+0x194>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d203      	bcs.n	80064c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064ba:	4b17      	ldr	r3, [pc, #92]	@ (8006518 <pvPortMalloc+0x18c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a18      	ldr	r2, [pc, #96]	@ (8006520 <pvPortMalloc+0x194>)
 80064c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	4b13      	ldr	r3, [pc, #76]	@ (8006514 <pvPortMalloc+0x188>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064d6:	4b13      	ldr	r3, [pc, #76]	@ (8006524 <pvPortMalloc+0x198>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3301      	adds	r3, #1
 80064dc:	4a11      	ldr	r2, [pc, #68]	@ (8006524 <pvPortMalloc+0x198>)
 80064de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064e0:	f7fe ff40 	bl	8005364 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <pvPortMalloc+0x17a>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60fb      	str	r3, [r7, #12]
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	e7fd      	b.n	8006502 <pvPortMalloc+0x176>
	return pvReturn;
 8006506:	69fb      	ldr	r3, [r7, #28]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3728      	adds	r7, #40	@ 0x28
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20004158 	.word	0x20004158
 8006514:	2000416c 	.word	0x2000416c
 8006518:	2000415c 	.word	0x2000415c
 800651c:	20004150 	.word	0x20004150
 8006520:	20004160 	.word	0x20004160
 8006524:	20004164 	.word	0x20004164

08006528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d04f      	beq.n	80065da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800653a:	2308      	movs	r3, #8
 800653c:	425b      	negs	r3, r3
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4b25      	ldr	r3, [pc, #148]	@ (80065e4 <vPortFree+0xbc>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <vPortFree+0x46>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	60fb      	str	r3, [r7, #12]
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	e7fd      	b.n	800656a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <vPortFree+0x66>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	60bb      	str	r3, [r7, #8]
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	e7fd      	b.n	800658a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	4b14      	ldr	r3, [pc, #80]	@ (80065e4 <vPortFree+0xbc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01e      	beq.n	80065da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11a      	bne.n	80065da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	4b0e      	ldr	r3, [pc, #56]	@ (80065e4 <vPortFree+0xbc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	43db      	mvns	r3, r3
 80065ae:	401a      	ands	r2, r3
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065b4:	f7fe fec8 	bl	8005348 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <vPortFree+0xc0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4413      	add	r3, r2
 80065c2:	4a09      	ldr	r2, [pc, #36]	@ (80065e8 <vPortFree+0xc0>)
 80065c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065c6:	6938      	ldr	r0, [r7, #16]
 80065c8:	f000 f874 	bl	80066b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065cc:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <vPortFree+0xc4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	4a06      	ldr	r2, [pc, #24]	@ (80065ec <vPortFree+0xc4>)
 80065d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065d6:	f7fe fec5 	bl	8005364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065da:	bf00      	nop
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	2000416c 	.word	0x2000416c
 80065e8:	2000415c 	.word	0x2000415c
 80065ec:	20004168 	.word	0x20004168

080065f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80065fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065fc:	4b27      	ldr	r3, [pc, #156]	@ (800669c <prvHeapInit+0xac>)
 80065fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3307      	adds	r3, #7
 800660e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0307 	bic.w	r3, r3, #7
 8006616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	4a1f      	ldr	r2, [pc, #124]	@ (800669c <prvHeapInit+0xac>)
 8006620:	4413      	add	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006628:	4a1d      	ldr	r2, [pc, #116]	@ (80066a0 <prvHeapInit+0xb0>)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800662e:	4b1c      	ldr	r3, [pc, #112]	@ (80066a0 <prvHeapInit+0xb0>)
 8006630:	2200      	movs	r2, #0
 8006632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	4413      	add	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800663c:	2208      	movs	r2, #8
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0307 	bic.w	r3, r3, #7
 800664a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a15      	ldr	r2, [pc, #84]	@ (80066a4 <prvHeapInit+0xb4>)
 8006650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006652:	4b14      	ldr	r3, [pc, #80]	@ (80066a4 <prvHeapInit+0xb4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800665a:	4b12      	ldr	r3, [pc, #72]	@ (80066a4 <prvHeapInit+0xb4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	1ad2      	subs	r2, r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006670:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <prvHeapInit+0xb4>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4a0a      	ldr	r2, [pc, #40]	@ (80066a8 <prvHeapInit+0xb8>)
 800667e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	4a09      	ldr	r2, [pc, #36]	@ (80066ac <prvHeapInit+0xbc>)
 8006686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006688:	4b09      	ldr	r3, [pc, #36]	@ (80066b0 <prvHeapInit+0xc0>)
 800668a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800668e:	601a      	str	r2, [r3, #0]
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	20000550 	.word	0x20000550
 80066a0:	20004150 	.word	0x20004150
 80066a4:	20004158 	.word	0x20004158
 80066a8:	20004160 	.word	0x20004160
 80066ac:	2000415c 	.word	0x2000415c
 80066b0:	2000416c 	.word	0x2000416c

080066b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066bc:	4b28      	ldr	r3, [pc, #160]	@ (8006760 <prvInsertBlockIntoFreeList+0xac>)
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e002      	b.n	80066c8 <prvInsertBlockIntoFreeList+0x14>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d8f7      	bhi.n	80066c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d108      	bne.n	80066f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	441a      	add	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d118      	bne.n	800673c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4b15      	ldr	r3, [pc, #84]	@ (8006764 <prvInsertBlockIntoFreeList+0xb0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d00d      	beq.n	8006732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	e008      	b.n	8006744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006732:	4b0c      	ldr	r3, [pc, #48]	@ (8006764 <prvInsertBlockIntoFreeList+0xb0>)
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e003      	b.n	8006744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	429a      	cmp	r2, r3
 800674a:	d002      	beq.n	8006752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006752:	bf00      	nop
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20004150 	.word	0x20004150
 8006764:	20004158 	.word	0x20004158

08006768 <srand>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4b10      	ldr	r3, [pc, #64]	@ (80067ac <srand+0x44>)
 800676c:	681d      	ldr	r5, [r3, #0]
 800676e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006770:	4604      	mov	r4, r0
 8006772:	b9b3      	cbnz	r3, 80067a2 <srand+0x3a>
 8006774:	2018      	movs	r0, #24
 8006776:	f000 fa7d 	bl	8006c74 <malloc>
 800677a:	4602      	mov	r2, r0
 800677c:	6328      	str	r0, [r5, #48]	@ 0x30
 800677e:	b920      	cbnz	r0, 800678a <srand+0x22>
 8006780:	4b0b      	ldr	r3, [pc, #44]	@ (80067b0 <srand+0x48>)
 8006782:	480c      	ldr	r0, [pc, #48]	@ (80067b4 <srand+0x4c>)
 8006784:	2146      	movs	r1, #70	@ 0x46
 8006786:	f000 fa0d 	bl	8006ba4 <__assert_func>
 800678a:	490b      	ldr	r1, [pc, #44]	@ (80067b8 <srand+0x50>)
 800678c:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <srand+0x54>)
 800678e:	e9c0 1300 	strd	r1, r3, [r0]
 8006792:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <srand+0x58>)
 8006794:	6083      	str	r3, [r0, #8]
 8006796:	230b      	movs	r3, #11
 8006798:	8183      	strh	r3, [r0, #12]
 800679a:	2100      	movs	r1, #0
 800679c:	2001      	movs	r0, #1
 800679e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80067a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80067a4:	2200      	movs	r2, #0
 80067a6:	611c      	str	r4, [r3, #16]
 80067a8:	615a      	str	r2, [r3, #20]
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	20000088 	.word	0x20000088
 80067b0:	08008590 	.word	0x08008590
 80067b4:	080085a7 	.word	0x080085a7
 80067b8:	abcd330e 	.word	0xabcd330e
 80067bc:	e66d1234 	.word	0xe66d1234
 80067c0:	0005deec 	.word	0x0005deec

080067c4 <rand>:
 80067c4:	4b16      	ldr	r3, [pc, #88]	@ (8006820 <rand+0x5c>)
 80067c6:	b510      	push	{r4, lr}
 80067c8:	681c      	ldr	r4, [r3, #0]
 80067ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80067cc:	b9b3      	cbnz	r3, 80067fc <rand+0x38>
 80067ce:	2018      	movs	r0, #24
 80067d0:	f000 fa50 	bl	8006c74 <malloc>
 80067d4:	4602      	mov	r2, r0
 80067d6:	6320      	str	r0, [r4, #48]	@ 0x30
 80067d8:	b920      	cbnz	r0, 80067e4 <rand+0x20>
 80067da:	4b12      	ldr	r3, [pc, #72]	@ (8006824 <rand+0x60>)
 80067dc:	4812      	ldr	r0, [pc, #72]	@ (8006828 <rand+0x64>)
 80067de:	2152      	movs	r1, #82	@ 0x52
 80067e0:	f000 f9e0 	bl	8006ba4 <__assert_func>
 80067e4:	4911      	ldr	r1, [pc, #68]	@ (800682c <rand+0x68>)
 80067e6:	4b12      	ldr	r3, [pc, #72]	@ (8006830 <rand+0x6c>)
 80067e8:	e9c0 1300 	strd	r1, r3, [r0]
 80067ec:	4b11      	ldr	r3, [pc, #68]	@ (8006834 <rand+0x70>)
 80067ee:	6083      	str	r3, [r0, #8]
 80067f0:	230b      	movs	r3, #11
 80067f2:	8183      	strh	r3, [r0, #12]
 80067f4:	2100      	movs	r1, #0
 80067f6:	2001      	movs	r0, #1
 80067f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80067fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80067fe:	480e      	ldr	r0, [pc, #56]	@ (8006838 <rand+0x74>)
 8006800:	690b      	ldr	r3, [r1, #16]
 8006802:	694c      	ldr	r4, [r1, #20]
 8006804:	4a0d      	ldr	r2, [pc, #52]	@ (800683c <rand+0x78>)
 8006806:	4358      	muls	r0, r3
 8006808:	fb02 0004 	mla	r0, r2, r4, r0
 800680c:	fba3 3202 	umull	r3, r2, r3, r2
 8006810:	3301      	adds	r3, #1
 8006812:	eb40 0002 	adc.w	r0, r0, r2
 8006816:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800681a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800681e:	bd10      	pop	{r4, pc}
 8006820:	20000088 	.word	0x20000088
 8006824:	08008590 	.word	0x08008590
 8006828:	080085a7 	.word	0x080085a7
 800682c:	abcd330e 	.word	0xabcd330e
 8006830:	e66d1234 	.word	0xe66d1234
 8006834:	0005deec 	.word	0x0005deec
 8006838:	5851f42d 	.word	0x5851f42d
 800683c:	4c957f2d 	.word	0x4c957f2d

08006840 <std>:
 8006840:	2300      	movs	r3, #0
 8006842:	b510      	push	{r4, lr}
 8006844:	4604      	mov	r4, r0
 8006846:	e9c0 3300 	strd	r3, r3, [r0]
 800684a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800684e:	6083      	str	r3, [r0, #8]
 8006850:	8181      	strh	r1, [r0, #12]
 8006852:	6643      	str	r3, [r0, #100]	@ 0x64
 8006854:	81c2      	strh	r2, [r0, #14]
 8006856:	6183      	str	r3, [r0, #24]
 8006858:	4619      	mov	r1, r3
 800685a:	2208      	movs	r2, #8
 800685c:	305c      	adds	r0, #92	@ 0x5c
 800685e:	f000 f916 	bl	8006a8e <memset>
 8006862:	4b0d      	ldr	r3, [pc, #52]	@ (8006898 <std+0x58>)
 8006864:	6263      	str	r3, [r4, #36]	@ 0x24
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <std+0x5c>)
 8006868:	62a3      	str	r3, [r4, #40]	@ 0x28
 800686a:	4b0d      	ldr	r3, [pc, #52]	@ (80068a0 <std+0x60>)
 800686c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800686e:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <std+0x64>)
 8006870:	6323      	str	r3, [r4, #48]	@ 0x30
 8006872:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <std+0x68>)
 8006874:	6224      	str	r4, [r4, #32]
 8006876:	429c      	cmp	r4, r3
 8006878:	d006      	beq.n	8006888 <std+0x48>
 800687a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800687e:	4294      	cmp	r4, r2
 8006880:	d002      	beq.n	8006888 <std+0x48>
 8006882:	33d0      	adds	r3, #208	@ 0xd0
 8006884:	429c      	cmp	r4, r3
 8006886:	d105      	bne.n	8006894 <std+0x54>
 8006888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800688c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006890:	f000 b976 	b.w	8006b80 <__retarget_lock_init_recursive>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	bf00      	nop
 8006898:	08006a09 	.word	0x08006a09
 800689c:	08006a2b 	.word	0x08006a2b
 80068a0:	08006a63 	.word	0x08006a63
 80068a4:	08006a87 	.word	0x08006a87
 80068a8:	20004170 	.word	0x20004170

080068ac <stdio_exit_handler>:
 80068ac:	4a02      	ldr	r2, [pc, #8]	@ (80068b8 <stdio_exit_handler+0xc>)
 80068ae:	4903      	ldr	r1, [pc, #12]	@ (80068bc <stdio_exit_handler+0x10>)
 80068b0:	4803      	ldr	r0, [pc, #12]	@ (80068c0 <stdio_exit_handler+0x14>)
 80068b2:	f000 b869 	b.w	8006988 <_fwalk_sglue>
 80068b6:	bf00      	nop
 80068b8:	2000007c 	.word	0x2000007c
 80068bc:	080074b1 	.word	0x080074b1
 80068c0:	2000008c 	.word	0x2000008c

080068c4 <cleanup_stdio>:
 80068c4:	6841      	ldr	r1, [r0, #4]
 80068c6:	4b0c      	ldr	r3, [pc, #48]	@ (80068f8 <cleanup_stdio+0x34>)
 80068c8:	4299      	cmp	r1, r3
 80068ca:	b510      	push	{r4, lr}
 80068cc:	4604      	mov	r4, r0
 80068ce:	d001      	beq.n	80068d4 <cleanup_stdio+0x10>
 80068d0:	f000 fdee 	bl	80074b0 <_fflush_r>
 80068d4:	68a1      	ldr	r1, [r4, #8]
 80068d6:	4b09      	ldr	r3, [pc, #36]	@ (80068fc <cleanup_stdio+0x38>)
 80068d8:	4299      	cmp	r1, r3
 80068da:	d002      	beq.n	80068e2 <cleanup_stdio+0x1e>
 80068dc:	4620      	mov	r0, r4
 80068de:	f000 fde7 	bl	80074b0 <_fflush_r>
 80068e2:	68e1      	ldr	r1, [r4, #12]
 80068e4:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <cleanup_stdio+0x3c>)
 80068e6:	4299      	cmp	r1, r3
 80068e8:	d004      	beq.n	80068f4 <cleanup_stdio+0x30>
 80068ea:	4620      	mov	r0, r4
 80068ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f0:	f000 bdde 	b.w	80074b0 <_fflush_r>
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	bf00      	nop
 80068f8:	20004170 	.word	0x20004170
 80068fc:	200041d8 	.word	0x200041d8
 8006900:	20004240 	.word	0x20004240

08006904 <global_stdio_init.part.0>:
 8006904:	b510      	push	{r4, lr}
 8006906:	4b0b      	ldr	r3, [pc, #44]	@ (8006934 <global_stdio_init.part.0+0x30>)
 8006908:	4c0b      	ldr	r4, [pc, #44]	@ (8006938 <global_stdio_init.part.0+0x34>)
 800690a:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <global_stdio_init.part.0+0x38>)
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	4620      	mov	r0, r4
 8006910:	2200      	movs	r2, #0
 8006912:	2104      	movs	r1, #4
 8006914:	f7ff ff94 	bl	8006840 <std>
 8006918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800691c:	2201      	movs	r2, #1
 800691e:	2109      	movs	r1, #9
 8006920:	f7ff ff8e 	bl	8006840 <std>
 8006924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006928:	2202      	movs	r2, #2
 800692a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800692e:	2112      	movs	r1, #18
 8006930:	f7ff bf86 	b.w	8006840 <std>
 8006934:	200042a8 	.word	0x200042a8
 8006938:	20004170 	.word	0x20004170
 800693c:	080068ad 	.word	0x080068ad

08006940 <__sfp_lock_acquire>:
 8006940:	4801      	ldr	r0, [pc, #4]	@ (8006948 <__sfp_lock_acquire+0x8>)
 8006942:	f000 b91e 	b.w	8006b82 <__retarget_lock_acquire_recursive>
 8006946:	bf00      	nop
 8006948:	200042b1 	.word	0x200042b1

0800694c <__sfp_lock_release>:
 800694c:	4801      	ldr	r0, [pc, #4]	@ (8006954 <__sfp_lock_release+0x8>)
 800694e:	f000 b919 	b.w	8006b84 <__retarget_lock_release_recursive>
 8006952:	bf00      	nop
 8006954:	200042b1 	.word	0x200042b1

08006958 <__sinit>:
 8006958:	b510      	push	{r4, lr}
 800695a:	4604      	mov	r4, r0
 800695c:	f7ff fff0 	bl	8006940 <__sfp_lock_acquire>
 8006960:	6a23      	ldr	r3, [r4, #32]
 8006962:	b11b      	cbz	r3, 800696c <__sinit+0x14>
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	f7ff bff0 	b.w	800694c <__sfp_lock_release>
 800696c:	4b04      	ldr	r3, [pc, #16]	@ (8006980 <__sinit+0x28>)
 800696e:	6223      	str	r3, [r4, #32]
 8006970:	4b04      	ldr	r3, [pc, #16]	@ (8006984 <__sinit+0x2c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f5      	bne.n	8006964 <__sinit+0xc>
 8006978:	f7ff ffc4 	bl	8006904 <global_stdio_init.part.0>
 800697c:	e7f2      	b.n	8006964 <__sinit+0xc>
 800697e:	bf00      	nop
 8006980:	080068c5 	.word	0x080068c5
 8006984:	200042a8 	.word	0x200042a8

08006988 <_fwalk_sglue>:
 8006988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800698c:	4607      	mov	r7, r0
 800698e:	4688      	mov	r8, r1
 8006990:	4614      	mov	r4, r2
 8006992:	2600      	movs	r6, #0
 8006994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006998:	f1b9 0901 	subs.w	r9, r9, #1
 800699c:	d505      	bpl.n	80069aa <_fwalk_sglue+0x22>
 800699e:	6824      	ldr	r4, [r4, #0]
 80069a0:	2c00      	cmp	r4, #0
 80069a2:	d1f7      	bne.n	8006994 <_fwalk_sglue+0xc>
 80069a4:	4630      	mov	r0, r6
 80069a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d907      	bls.n	80069c0 <_fwalk_sglue+0x38>
 80069b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069b4:	3301      	adds	r3, #1
 80069b6:	d003      	beq.n	80069c0 <_fwalk_sglue+0x38>
 80069b8:	4629      	mov	r1, r5
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c0      	blx	r8
 80069be:	4306      	orrs	r6, r0
 80069c0:	3568      	adds	r5, #104	@ 0x68
 80069c2:	e7e9      	b.n	8006998 <_fwalk_sglue+0x10>

080069c4 <siprintf>:
 80069c4:	b40e      	push	{r1, r2, r3}
 80069c6:	b510      	push	{r4, lr}
 80069c8:	b09d      	sub	sp, #116	@ 0x74
 80069ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80069cc:	9002      	str	r0, [sp, #8]
 80069ce:	9006      	str	r0, [sp, #24]
 80069d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069d4:	480a      	ldr	r0, [pc, #40]	@ (8006a00 <siprintf+0x3c>)
 80069d6:	9107      	str	r1, [sp, #28]
 80069d8:	9104      	str	r1, [sp, #16]
 80069da:	490a      	ldr	r1, [pc, #40]	@ (8006a04 <siprintf+0x40>)
 80069dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e0:	9105      	str	r1, [sp, #20]
 80069e2:	2400      	movs	r4, #0
 80069e4:	a902      	add	r1, sp, #8
 80069e6:	6800      	ldr	r0, [r0, #0]
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80069ec:	f000 fa54 	bl	8006e98 <_svfiprintf_r>
 80069f0:	9b02      	ldr	r3, [sp, #8]
 80069f2:	701c      	strb	r4, [r3, #0]
 80069f4:	b01d      	add	sp, #116	@ 0x74
 80069f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fa:	b003      	add	sp, #12
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20000088 	.word	0x20000088
 8006a04:	ffff0208 	.word	0xffff0208

08006a08 <__sread>:
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a10:	f000 f868 	bl	8006ae4 <_read_r>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	bfab      	itete	ge
 8006a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a1c:	181b      	addge	r3, r3, r0
 8006a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a22:	bfac      	ite	ge
 8006a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a26:	81a3      	strhlt	r3, [r4, #12]
 8006a28:	bd10      	pop	{r4, pc}

08006a2a <__swrite>:
 8006a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2e:	461f      	mov	r7, r3
 8006a30:	898b      	ldrh	r3, [r1, #12]
 8006a32:	05db      	lsls	r3, r3, #23
 8006a34:	4605      	mov	r5, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	4616      	mov	r6, r2
 8006a3a:	d505      	bpl.n	8006a48 <__swrite+0x1e>
 8006a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a40:	2302      	movs	r3, #2
 8006a42:	2200      	movs	r2, #0
 8006a44:	f000 f83c 	bl	8006ac0 <_lseek_r>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	4632      	mov	r2, r6
 8006a56:	463b      	mov	r3, r7
 8006a58:	4628      	mov	r0, r5
 8006a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5e:	f000 b853 	b.w	8006b08 <_write_r>

08006a62 <__sseek>:
 8006a62:	b510      	push	{r4, lr}
 8006a64:	460c      	mov	r4, r1
 8006a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6a:	f000 f829 	bl	8006ac0 <_lseek_r>
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	bf15      	itete	ne
 8006a74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a7e:	81a3      	strheq	r3, [r4, #12]
 8006a80:	bf18      	it	ne
 8006a82:	81a3      	strhne	r3, [r4, #12]
 8006a84:	bd10      	pop	{r4, pc}

08006a86 <__sclose>:
 8006a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8a:	f000 b809 	b.w	8006aa0 <_close_r>

08006a8e <memset>:
 8006a8e:	4402      	add	r2, r0
 8006a90:	4603      	mov	r3, r0
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d100      	bne.n	8006a98 <memset+0xa>
 8006a96:	4770      	bx	lr
 8006a98:	f803 1b01 	strb.w	r1, [r3], #1
 8006a9c:	e7f9      	b.n	8006a92 <memset+0x4>
	...

08006aa0 <_close_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4d06      	ldr	r5, [pc, #24]	@ (8006abc <_close_r+0x1c>)
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	602b      	str	r3, [r5, #0]
 8006aac:	f7fb fcaa 	bl	8002404 <_close>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d102      	bne.n	8006aba <_close_r+0x1a>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	b103      	cbz	r3, 8006aba <_close_r+0x1a>
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	200042ac 	.word	0x200042ac

08006ac0 <_lseek_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4d07      	ldr	r5, [pc, #28]	@ (8006ae0 <_lseek_r+0x20>)
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	4608      	mov	r0, r1
 8006ac8:	4611      	mov	r1, r2
 8006aca:	2200      	movs	r2, #0
 8006acc:	602a      	str	r2, [r5, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f7fb fcbf 	bl	8002452 <_lseek>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_lseek_r+0x1e>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_lseek_r+0x1e>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	200042ac 	.word	0x200042ac

08006ae4 <_read_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4d07      	ldr	r5, [pc, #28]	@ (8006b04 <_read_r+0x20>)
 8006ae8:	4604      	mov	r4, r0
 8006aea:	4608      	mov	r0, r1
 8006aec:	4611      	mov	r1, r2
 8006aee:	2200      	movs	r2, #0
 8006af0:	602a      	str	r2, [r5, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	f7fb fc4d 	bl	8002392 <_read>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d102      	bne.n	8006b02 <_read_r+0x1e>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	b103      	cbz	r3, 8006b02 <_read_r+0x1e>
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	200042ac 	.word	0x200042ac

08006b08 <_write_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4d07      	ldr	r5, [pc, #28]	@ (8006b28 <_write_r+0x20>)
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	4608      	mov	r0, r1
 8006b10:	4611      	mov	r1, r2
 8006b12:	2200      	movs	r2, #0
 8006b14:	602a      	str	r2, [r5, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f7fb fc58 	bl	80023cc <_write>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d102      	bne.n	8006b26 <_write_r+0x1e>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b103      	cbz	r3, 8006b26 <_write_r+0x1e>
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	200042ac 	.word	0x200042ac

08006b2c <__errno>:
 8006b2c:	4b01      	ldr	r3, [pc, #4]	@ (8006b34 <__errno+0x8>)
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20000088 	.word	0x20000088

08006b38 <__libc_init_array>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b70 <__libc_init_array+0x38>)
 8006b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b74 <__libc_init_array+0x3c>)
 8006b3e:	1b64      	subs	r4, r4, r5
 8006b40:	10a4      	asrs	r4, r4, #2
 8006b42:	2600      	movs	r6, #0
 8006b44:	42a6      	cmp	r6, r4
 8006b46:	d109      	bne.n	8006b5c <__libc_init_array+0x24>
 8006b48:	4d0b      	ldr	r5, [pc, #44]	@ (8006b78 <__libc_init_array+0x40>)
 8006b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b7c <__libc_init_array+0x44>)
 8006b4c:	f000 ffee 	bl	8007b2c <_init>
 8006b50:	1b64      	subs	r4, r4, r5
 8006b52:	10a4      	asrs	r4, r4, #2
 8006b54:	2600      	movs	r6, #0
 8006b56:	42a6      	cmp	r6, r4
 8006b58:	d105      	bne.n	8006b66 <__libc_init_array+0x2e>
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b60:	4798      	blx	r3
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7ee      	b.n	8006b44 <__libc_init_array+0xc>
 8006b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6a:	4798      	blx	r3
 8006b6c:	3601      	adds	r6, #1
 8006b6e:	e7f2      	b.n	8006b56 <__libc_init_array+0x1e>
 8006b70:	08008678 	.word	0x08008678
 8006b74:	08008678 	.word	0x08008678
 8006b78:	08008678 	.word	0x08008678
 8006b7c:	0800867c 	.word	0x0800867c

08006b80 <__retarget_lock_init_recursive>:
 8006b80:	4770      	bx	lr

08006b82 <__retarget_lock_acquire_recursive>:
 8006b82:	4770      	bx	lr

08006b84 <__retarget_lock_release_recursive>:
 8006b84:	4770      	bx	lr

08006b86 <memcpy>:
 8006b86:	440a      	add	r2, r1
 8006b88:	4291      	cmp	r1, r2
 8006b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b8e:	d100      	bne.n	8006b92 <memcpy+0xc>
 8006b90:	4770      	bx	lr
 8006b92:	b510      	push	{r4, lr}
 8006b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b9c:	4291      	cmp	r1, r2
 8006b9e:	d1f9      	bne.n	8006b94 <memcpy+0xe>
 8006ba0:	bd10      	pop	{r4, pc}
	...

08006ba4 <__assert_func>:
 8006ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ba6:	4614      	mov	r4, r2
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4b09      	ldr	r3, [pc, #36]	@ (8006bd0 <__assert_func+0x2c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4605      	mov	r5, r0
 8006bb0:	68d8      	ldr	r0, [r3, #12]
 8006bb2:	b14c      	cbz	r4, 8006bc8 <__assert_func+0x24>
 8006bb4:	4b07      	ldr	r3, [pc, #28]	@ (8006bd4 <__assert_func+0x30>)
 8006bb6:	9100      	str	r1, [sp, #0]
 8006bb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bbc:	4906      	ldr	r1, [pc, #24]	@ (8006bd8 <__assert_func+0x34>)
 8006bbe:	462b      	mov	r3, r5
 8006bc0:	f000 fc9e 	bl	8007500 <fiprintf>
 8006bc4:	f000 fcd8 	bl	8007578 <abort>
 8006bc8:	4b04      	ldr	r3, [pc, #16]	@ (8006bdc <__assert_func+0x38>)
 8006bca:	461c      	mov	r4, r3
 8006bcc:	e7f3      	b.n	8006bb6 <__assert_func+0x12>
 8006bce:	bf00      	nop
 8006bd0:	20000088 	.word	0x20000088
 8006bd4:	080085ff 	.word	0x080085ff
 8006bd8:	0800860c 	.word	0x0800860c
 8006bdc:	0800863a 	.word	0x0800863a

08006be0 <_free_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4605      	mov	r5, r0
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d041      	beq.n	8006c6c <_free_r+0x8c>
 8006be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bec:	1f0c      	subs	r4, r1, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bfb8      	it	lt
 8006bf2:	18e4      	addlt	r4, r4, r3
 8006bf4:	f000 f8e8 	bl	8006dc8 <__malloc_lock>
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c70 <_free_r+0x90>)
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	b933      	cbnz	r3, 8006c0c <_free_r+0x2c>
 8006bfe:	6063      	str	r3, [r4, #4]
 8006c00:	6014      	str	r4, [r2, #0]
 8006c02:	4628      	mov	r0, r5
 8006c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c08:	f000 b8e4 	b.w	8006dd4 <__malloc_unlock>
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	d908      	bls.n	8006c22 <_free_r+0x42>
 8006c10:	6820      	ldr	r0, [r4, #0]
 8006c12:	1821      	adds	r1, r4, r0
 8006c14:	428b      	cmp	r3, r1
 8006c16:	bf01      	itttt	eq
 8006c18:	6819      	ldreq	r1, [r3, #0]
 8006c1a:	685b      	ldreq	r3, [r3, #4]
 8006c1c:	1809      	addeq	r1, r1, r0
 8006c1e:	6021      	streq	r1, [r4, #0]
 8006c20:	e7ed      	b.n	8006bfe <_free_r+0x1e>
 8006c22:	461a      	mov	r2, r3
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	b10b      	cbz	r3, 8006c2c <_free_r+0x4c>
 8006c28:	42a3      	cmp	r3, r4
 8006c2a:	d9fa      	bls.n	8006c22 <_free_r+0x42>
 8006c2c:	6811      	ldr	r1, [r2, #0]
 8006c2e:	1850      	adds	r0, r2, r1
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d10b      	bne.n	8006c4c <_free_r+0x6c>
 8006c34:	6820      	ldr	r0, [r4, #0]
 8006c36:	4401      	add	r1, r0
 8006c38:	1850      	adds	r0, r2, r1
 8006c3a:	4283      	cmp	r3, r0
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	d1e0      	bne.n	8006c02 <_free_r+0x22>
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	6053      	str	r3, [r2, #4]
 8006c46:	4408      	add	r0, r1
 8006c48:	6010      	str	r0, [r2, #0]
 8006c4a:	e7da      	b.n	8006c02 <_free_r+0x22>
 8006c4c:	d902      	bls.n	8006c54 <_free_r+0x74>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	602b      	str	r3, [r5, #0]
 8006c52:	e7d6      	b.n	8006c02 <_free_r+0x22>
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	1821      	adds	r1, r4, r0
 8006c58:	428b      	cmp	r3, r1
 8006c5a:	bf04      	itt	eq
 8006c5c:	6819      	ldreq	r1, [r3, #0]
 8006c5e:	685b      	ldreq	r3, [r3, #4]
 8006c60:	6063      	str	r3, [r4, #4]
 8006c62:	bf04      	itt	eq
 8006c64:	1809      	addeq	r1, r1, r0
 8006c66:	6021      	streq	r1, [r4, #0]
 8006c68:	6054      	str	r4, [r2, #4]
 8006c6a:	e7ca      	b.n	8006c02 <_free_r+0x22>
 8006c6c:	bd38      	pop	{r3, r4, r5, pc}
 8006c6e:	bf00      	nop
 8006c70:	200042b8 	.word	0x200042b8

08006c74 <malloc>:
 8006c74:	4b02      	ldr	r3, [pc, #8]	@ (8006c80 <malloc+0xc>)
 8006c76:	4601      	mov	r1, r0
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	f000 b825 	b.w	8006cc8 <_malloc_r>
 8006c7e:	bf00      	nop
 8006c80:	20000088 	.word	0x20000088

08006c84 <sbrk_aligned>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	4e0f      	ldr	r6, [pc, #60]	@ (8006cc4 <sbrk_aligned+0x40>)
 8006c88:	460c      	mov	r4, r1
 8006c8a:	6831      	ldr	r1, [r6, #0]
 8006c8c:	4605      	mov	r5, r0
 8006c8e:	b911      	cbnz	r1, 8006c96 <sbrk_aligned+0x12>
 8006c90:	f000 fc62 	bl	8007558 <_sbrk_r>
 8006c94:	6030      	str	r0, [r6, #0]
 8006c96:	4621      	mov	r1, r4
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 fc5d 	bl	8007558 <_sbrk_r>
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	d103      	bne.n	8006caa <sbrk_aligned+0x26>
 8006ca2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	bd70      	pop	{r4, r5, r6, pc}
 8006caa:	1cc4      	adds	r4, r0, #3
 8006cac:	f024 0403 	bic.w	r4, r4, #3
 8006cb0:	42a0      	cmp	r0, r4
 8006cb2:	d0f8      	beq.n	8006ca6 <sbrk_aligned+0x22>
 8006cb4:	1a21      	subs	r1, r4, r0
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f000 fc4e 	bl	8007558 <_sbrk_r>
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d1f2      	bne.n	8006ca6 <sbrk_aligned+0x22>
 8006cc0:	e7ef      	b.n	8006ca2 <sbrk_aligned+0x1e>
 8006cc2:	bf00      	nop
 8006cc4:	200042b4 	.word	0x200042b4

08006cc8 <_malloc_r>:
 8006cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ccc:	1ccd      	adds	r5, r1, #3
 8006cce:	f025 0503 	bic.w	r5, r5, #3
 8006cd2:	3508      	adds	r5, #8
 8006cd4:	2d0c      	cmp	r5, #12
 8006cd6:	bf38      	it	cc
 8006cd8:	250c      	movcc	r5, #12
 8006cda:	2d00      	cmp	r5, #0
 8006cdc:	4606      	mov	r6, r0
 8006cde:	db01      	blt.n	8006ce4 <_malloc_r+0x1c>
 8006ce0:	42a9      	cmp	r1, r5
 8006ce2:	d904      	bls.n	8006cee <_malloc_r+0x26>
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	6033      	str	r3, [r6, #0]
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006dc4 <_malloc_r+0xfc>
 8006cf2:	f000 f869 	bl	8006dc8 <__malloc_lock>
 8006cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8006cfa:	461c      	mov	r4, r3
 8006cfc:	bb44      	cbnz	r4, 8006d50 <_malloc_r+0x88>
 8006cfe:	4629      	mov	r1, r5
 8006d00:	4630      	mov	r0, r6
 8006d02:	f7ff ffbf 	bl	8006c84 <sbrk_aligned>
 8006d06:	1c43      	adds	r3, r0, #1
 8006d08:	4604      	mov	r4, r0
 8006d0a:	d158      	bne.n	8006dbe <_malloc_r+0xf6>
 8006d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8006d10:	4627      	mov	r7, r4
 8006d12:	2f00      	cmp	r7, #0
 8006d14:	d143      	bne.n	8006d9e <_malloc_r+0xd6>
 8006d16:	2c00      	cmp	r4, #0
 8006d18:	d04b      	beq.n	8006db2 <_malloc_r+0xea>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	4630      	mov	r0, r6
 8006d20:	eb04 0903 	add.w	r9, r4, r3
 8006d24:	f000 fc18 	bl	8007558 <_sbrk_r>
 8006d28:	4581      	cmp	r9, r0
 8006d2a:	d142      	bne.n	8006db2 <_malloc_r+0xea>
 8006d2c:	6821      	ldr	r1, [r4, #0]
 8006d2e:	1a6d      	subs	r5, r5, r1
 8006d30:	4629      	mov	r1, r5
 8006d32:	4630      	mov	r0, r6
 8006d34:	f7ff ffa6 	bl	8006c84 <sbrk_aligned>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d03a      	beq.n	8006db2 <_malloc_r+0xea>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	442b      	add	r3, r5
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	f8d8 3000 	ldr.w	r3, [r8]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	bb62      	cbnz	r2, 8006da4 <_malloc_r+0xdc>
 8006d4a:	f8c8 7000 	str.w	r7, [r8]
 8006d4e:	e00f      	b.n	8006d70 <_malloc_r+0xa8>
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	1b52      	subs	r2, r2, r5
 8006d54:	d420      	bmi.n	8006d98 <_malloc_r+0xd0>
 8006d56:	2a0b      	cmp	r2, #11
 8006d58:	d917      	bls.n	8006d8a <_malloc_r+0xc2>
 8006d5a:	1961      	adds	r1, r4, r5
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	6025      	str	r5, [r4, #0]
 8006d60:	bf18      	it	ne
 8006d62:	6059      	strne	r1, [r3, #4]
 8006d64:	6863      	ldr	r3, [r4, #4]
 8006d66:	bf08      	it	eq
 8006d68:	f8c8 1000 	streq.w	r1, [r8]
 8006d6c:	5162      	str	r2, [r4, r5]
 8006d6e:	604b      	str	r3, [r1, #4]
 8006d70:	4630      	mov	r0, r6
 8006d72:	f000 f82f 	bl	8006dd4 <__malloc_unlock>
 8006d76:	f104 000b 	add.w	r0, r4, #11
 8006d7a:	1d23      	adds	r3, r4, #4
 8006d7c:	f020 0007 	bic.w	r0, r0, #7
 8006d80:	1ac2      	subs	r2, r0, r3
 8006d82:	bf1c      	itt	ne
 8006d84:	1a1b      	subne	r3, r3, r0
 8006d86:	50a3      	strne	r3, [r4, r2]
 8006d88:	e7af      	b.n	8006cea <_malloc_r+0x22>
 8006d8a:	6862      	ldr	r2, [r4, #4]
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	bf0c      	ite	eq
 8006d90:	f8c8 2000 	streq.w	r2, [r8]
 8006d94:	605a      	strne	r2, [r3, #4]
 8006d96:	e7eb      	b.n	8006d70 <_malloc_r+0xa8>
 8006d98:	4623      	mov	r3, r4
 8006d9a:	6864      	ldr	r4, [r4, #4]
 8006d9c:	e7ae      	b.n	8006cfc <_malloc_r+0x34>
 8006d9e:	463c      	mov	r4, r7
 8006da0:	687f      	ldr	r7, [r7, #4]
 8006da2:	e7b6      	b.n	8006d12 <_malloc_r+0x4a>
 8006da4:	461a      	mov	r2, r3
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	42a3      	cmp	r3, r4
 8006daa:	d1fb      	bne.n	8006da4 <_malloc_r+0xdc>
 8006dac:	2300      	movs	r3, #0
 8006dae:	6053      	str	r3, [r2, #4]
 8006db0:	e7de      	b.n	8006d70 <_malloc_r+0xa8>
 8006db2:	230c      	movs	r3, #12
 8006db4:	6033      	str	r3, [r6, #0]
 8006db6:	4630      	mov	r0, r6
 8006db8:	f000 f80c 	bl	8006dd4 <__malloc_unlock>
 8006dbc:	e794      	b.n	8006ce8 <_malloc_r+0x20>
 8006dbe:	6005      	str	r5, [r0, #0]
 8006dc0:	e7d6      	b.n	8006d70 <_malloc_r+0xa8>
 8006dc2:	bf00      	nop
 8006dc4:	200042b8 	.word	0x200042b8

08006dc8 <__malloc_lock>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	@ (8006dd0 <__malloc_lock+0x8>)
 8006dca:	f7ff beda 	b.w	8006b82 <__retarget_lock_acquire_recursive>
 8006dce:	bf00      	nop
 8006dd0:	200042b0 	.word	0x200042b0

08006dd4 <__malloc_unlock>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	@ (8006ddc <__malloc_unlock+0x8>)
 8006dd6:	f7ff bed5 	b.w	8006b84 <__retarget_lock_release_recursive>
 8006dda:	bf00      	nop
 8006ddc:	200042b0 	.word	0x200042b0

08006de0 <__ssputs_r>:
 8006de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	688e      	ldr	r6, [r1, #8]
 8006de6:	461f      	mov	r7, r3
 8006de8:	42be      	cmp	r6, r7
 8006dea:	680b      	ldr	r3, [r1, #0]
 8006dec:	4682      	mov	sl, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	4690      	mov	r8, r2
 8006df2:	d82d      	bhi.n	8006e50 <__ssputs_r+0x70>
 8006df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006df8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006dfc:	d026      	beq.n	8006e4c <__ssputs_r+0x6c>
 8006dfe:	6965      	ldr	r5, [r4, #20]
 8006e00:	6909      	ldr	r1, [r1, #16]
 8006e02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e06:	eba3 0901 	sub.w	r9, r3, r1
 8006e0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e0e:	1c7b      	adds	r3, r7, #1
 8006e10:	444b      	add	r3, r9
 8006e12:	106d      	asrs	r5, r5, #1
 8006e14:	429d      	cmp	r5, r3
 8006e16:	bf38      	it	cc
 8006e18:	461d      	movcc	r5, r3
 8006e1a:	0553      	lsls	r3, r2, #21
 8006e1c:	d527      	bpl.n	8006e6e <__ssputs_r+0x8e>
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7ff ff52 	bl	8006cc8 <_malloc_r>
 8006e24:	4606      	mov	r6, r0
 8006e26:	b360      	cbz	r0, 8006e82 <__ssputs_r+0xa2>
 8006e28:	6921      	ldr	r1, [r4, #16]
 8006e2a:	464a      	mov	r2, r9
 8006e2c:	f7ff feab 	bl	8006b86 <memcpy>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e3a:	81a3      	strh	r3, [r4, #12]
 8006e3c:	6126      	str	r6, [r4, #16]
 8006e3e:	6165      	str	r5, [r4, #20]
 8006e40:	444e      	add	r6, r9
 8006e42:	eba5 0509 	sub.w	r5, r5, r9
 8006e46:	6026      	str	r6, [r4, #0]
 8006e48:	60a5      	str	r5, [r4, #8]
 8006e4a:	463e      	mov	r6, r7
 8006e4c:	42be      	cmp	r6, r7
 8006e4e:	d900      	bls.n	8006e52 <__ssputs_r+0x72>
 8006e50:	463e      	mov	r6, r7
 8006e52:	6820      	ldr	r0, [r4, #0]
 8006e54:	4632      	mov	r2, r6
 8006e56:	4641      	mov	r1, r8
 8006e58:	f000 fb64 	bl	8007524 <memmove>
 8006e5c:	68a3      	ldr	r3, [r4, #8]
 8006e5e:	1b9b      	subs	r3, r3, r6
 8006e60:	60a3      	str	r3, [r4, #8]
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	4433      	add	r3, r6
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e6e:	462a      	mov	r2, r5
 8006e70:	f000 fb89 	bl	8007586 <_realloc_r>
 8006e74:	4606      	mov	r6, r0
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d1e0      	bne.n	8006e3c <__ssputs_r+0x5c>
 8006e7a:	6921      	ldr	r1, [r4, #16]
 8006e7c:	4650      	mov	r0, sl
 8006e7e:	f7ff feaf 	bl	8006be0 <_free_r>
 8006e82:	230c      	movs	r3, #12
 8006e84:	f8ca 3000 	str.w	r3, [sl]
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	e7e9      	b.n	8006e6a <__ssputs_r+0x8a>
	...

08006e98 <_svfiprintf_r>:
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	4698      	mov	r8, r3
 8006e9e:	898b      	ldrh	r3, [r1, #12]
 8006ea0:	061b      	lsls	r3, r3, #24
 8006ea2:	b09d      	sub	sp, #116	@ 0x74
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	460d      	mov	r5, r1
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	d510      	bpl.n	8006ece <_svfiprintf_r+0x36>
 8006eac:	690b      	ldr	r3, [r1, #16]
 8006eae:	b973      	cbnz	r3, 8006ece <_svfiprintf_r+0x36>
 8006eb0:	2140      	movs	r1, #64	@ 0x40
 8006eb2:	f7ff ff09 	bl	8006cc8 <_malloc_r>
 8006eb6:	6028      	str	r0, [r5, #0]
 8006eb8:	6128      	str	r0, [r5, #16]
 8006eba:	b930      	cbnz	r0, 8006eca <_svfiprintf_r+0x32>
 8006ebc:	230c      	movs	r3, #12
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	b01d      	add	sp, #116	@ 0x74
 8006ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eca:	2340      	movs	r3, #64	@ 0x40
 8006ecc:	616b      	str	r3, [r5, #20]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ed2:	2320      	movs	r3, #32
 8006ed4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ed8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006edc:	2330      	movs	r3, #48	@ 0x30
 8006ede:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800707c <_svfiprintf_r+0x1e4>
 8006ee2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ee6:	f04f 0901 	mov.w	r9, #1
 8006eea:	4623      	mov	r3, r4
 8006eec:	469a      	mov	sl, r3
 8006eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ef2:	b10a      	cbz	r2, 8006ef8 <_svfiprintf_r+0x60>
 8006ef4:	2a25      	cmp	r2, #37	@ 0x25
 8006ef6:	d1f9      	bne.n	8006eec <_svfiprintf_r+0x54>
 8006ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8006efc:	d00b      	beq.n	8006f16 <_svfiprintf_r+0x7e>
 8006efe:	465b      	mov	r3, fp
 8006f00:	4622      	mov	r2, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	4638      	mov	r0, r7
 8006f06:	f7ff ff6b 	bl	8006de0 <__ssputs_r>
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f000 80a7 	beq.w	800705e <_svfiprintf_r+0x1c6>
 8006f10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f12:	445a      	add	r2, fp
 8006f14:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f16:	f89a 3000 	ldrb.w	r3, [sl]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 809f 	beq.w	800705e <_svfiprintf_r+0x1c6>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f2a:	f10a 0a01 	add.w	sl, sl, #1
 8006f2e:	9304      	str	r3, [sp, #16]
 8006f30:	9307      	str	r3, [sp, #28]
 8006f32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f36:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f38:	4654      	mov	r4, sl
 8006f3a:	2205      	movs	r2, #5
 8006f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f40:	484e      	ldr	r0, [pc, #312]	@ (800707c <_svfiprintf_r+0x1e4>)
 8006f42:	f7f9 f945 	bl	80001d0 <memchr>
 8006f46:	9a04      	ldr	r2, [sp, #16]
 8006f48:	b9d8      	cbnz	r0, 8006f82 <_svfiprintf_r+0xea>
 8006f4a:	06d0      	lsls	r0, r2, #27
 8006f4c:	bf44      	itt	mi
 8006f4e:	2320      	movmi	r3, #32
 8006f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f54:	0711      	lsls	r1, r2, #28
 8006f56:	bf44      	itt	mi
 8006f58:	232b      	movmi	r3, #43	@ 0x2b
 8006f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f64:	d015      	beq.n	8006f92 <_svfiprintf_r+0xfa>
 8006f66:	9a07      	ldr	r2, [sp, #28]
 8006f68:	4654      	mov	r4, sl
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f04f 0c0a 	mov.w	ip, #10
 8006f70:	4621      	mov	r1, r4
 8006f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f76:	3b30      	subs	r3, #48	@ 0x30
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	d94b      	bls.n	8007014 <_svfiprintf_r+0x17c>
 8006f7c:	b1b0      	cbz	r0, 8006fac <_svfiprintf_r+0x114>
 8006f7e:	9207      	str	r2, [sp, #28]
 8006f80:	e014      	b.n	8006fac <_svfiprintf_r+0x114>
 8006f82:	eba0 0308 	sub.w	r3, r0, r8
 8006f86:	fa09 f303 	lsl.w	r3, r9, r3
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	46a2      	mov	sl, r4
 8006f90:	e7d2      	b.n	8006f38 <_svfiprintf_r+0xa0>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	1d19      	adds	r1, r3, #4
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	9103      	str	r1, [sp, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bfbb      	ittet	lt
 8006f9e:	425b      	neglt	r3, r3
 8006fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8006fa4:	9307      	strge	r3, [sp, #28]
 8006fa6:	9307      	strlt	r3, [sp, #28]
 8006fa8:	bfb8      	it	lt
 8006faa:	9204      	strlt	r2, [sp, #16]
 8006fac:	7823      	ldrb	r3, [r4, #0]
 8006fae:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fb0:	d10a      	bne.n	8006fc8 <_svfiprintf_r+0x130>
 8006fb2:	7863      	ldrb	r3, [r4, #1]
 8006fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fb6:	d132      	bne.n	800701e <_svfiprintf_r+0x186>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	9203      	str	r2, [sp, #12]
 8006fc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fc4:	3402      	adds	r4, #2
 8006fc6:	9305      	str	r3, [sp, #20]
 8006fc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800708c <_svfiprintf_r+0x1f4>
 8006fcc:	7821      	ldrb	r1, [r4, #0]
 8006fce:	2203      	movs	r2, #3
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	f7f9 f8fd 	bl	80001d0 <memchr>
 8006fd6:	b138      	cbz	r0, 8006fe8 <_svfiprintf_r+0x150>
 8006fd8:	9b04      	ldr	r3, [sp, #16]
 8006fda:	eba0 000a 	sub.w	r0, r0, sl
 8006fde:	2240      	movs	r2, #64	@ 0x40
 8006fe0:	4082      	lsls	r2, r0
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	3401      	adds	r4, #1
 8006fe6:	9304      	str	r3, [sp, #16]
 8006fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fec:	4824      	ldr	r0, [pc, #144]	@ (8007080 <_svfiprintf_r+0x1e8>)
 8006fee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ff2:	2206      	movs	r2, #6
 8006ff4:	f7f9 f8ec 	bl	80001d0 <memchr>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d036      	beq.n	800706a <_svfiprintf_r+0x1d2>
 8006ffc:	4b21      	ldr	r3, [pc, #132]	@ (8007084 <_svfiprintf_r+0x1ec>)
 8006ffe:	bb1b      	cbnz	r3, 8007048 <_svfiprintf_r+0x1b0>
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	3307      	adds	r3, #7
 8007004:	f023 0307 	bic.w	r3, r3, #7
 8007008:	3308      	adds	r3, #8
 800700a:	9303      	str	r3, [sp, #12]
 800700c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800700e:	4433      	add	r3, r6
 8007010:	9309      	str	r3, [sp, #36]	@ 0x24
 8007012:	e76a      	b.n	8006eea <_svfiprintf_r+0x52>
 8007014:	fb0c 3202 	mla	r2, ip, r2, r3
 8007018:	460c      	mov	r4, r1
 800701a:	2001      	movs	r0, #1
 800701c:	e7a8      	b.n	8006f70 <_svfiprintf_r+0xd8>
 800701e:	2300      	movs	r3, #0
 8007020:	3401      	adds	r4, #1
 8007022:	9305      	str	r3, [sp, #20]
 8007024:	4619      	mov	r1, r3
 8007026:	f04f 0c0a 	mov.w	ip, #10
 800702a:	4620      	mov	r0, r4
 800702c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007030:	3a30      	subs	r2, #48	@ 0x30
 8007032:	2a09      	cmp	r2, #9
 8007034:	d903      	bls.n	800703e <_svfiprintf_r+0x1a6>
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0c6      	beq.n	8006fc8 <_svfiprintf_r+0x130>
 800703a:	9105      	str	r1, [sp, #20]
 800703c:	e7c4      	b.n	8006fc8 <_svfiprintf_r+0x130>
 800703e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007042:	4604      	mov	r4, r0
 8007044:	2301      	movs	r3, #1
 8007046:	e7f0      	b.n	800702a <_svfiprintf_r+0x192>
 8007048:	ab03      	add	r3, sp, #12
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	462a      	mov	r2, r5
 800704e:	4b0e      	ldr	r3, [pc, #56]	@ (8007088 <_svfiprintf_r+0x1f0>)
 8007050:	a904      	add	r1, sp, #16
 8007052:	4638      	mov	r0, r7
 8007054:	f3af 8000 	nop.w
 8007058:	1c42      	adds	r2, r0, #1
 800705a:	4606      	mov	r6, r0
 800705c:	d1d6      	bne.n	800700c <_svfiprintf_r+0x174>
 800705e:	89ab      	ldrh	r3, [r5, #12]
 8007060:	065b      	lsls	r3, r3, #25
 8007062:	f53f af2d 	bmi.w	8006ec0 <_svfiprintf_r+0x28>
 8007066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007068:	e72c      	b.n	8006ec4 <_svfiprintf_r+0x2c>
 800706a:	ab03      	add	r3, sp, #12
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	462a      	mov	r2, r5
 8007070:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <_svfiprintf_r+0x1f0>)
 8007072:	a904      	add	r1, sp, #16
 8007074:	4638      	mov	r0, r7
 8007076:	f000 f879 	bl	800716c <_printf_i>
 800707a:	e7ed      	b.n	8007058 <_svfiprintf_r+0x1c0>
 800707c:	0800863b 	.word	0x0800863b
 8007080:	08008645 	.word	0x08008645
 8007084:	00000000 	.word	0x00000000
 8007088:	08006de1 	.word	0x08006de1
 800708c:	08008641 	.word	0x08008641

08007090 <_printf_common>:
 8007090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007094:	4616      	mov	r6, r2
 8007096:	4698      	mov	r8, r3
 8007098:	688a      	ldr	r2, [r1, #8]
 800709a:	690b      	ldr	r3, [r1, #16]
 800709c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070a0:	4293      	cmp	r3, r2
 80070a2:	bfb8      	it	lt
 80070a4:	4613      	movlt	r3, r2
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070ac:	4607      	mov	r7, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	b10a      	cbz	r2, 80070b6 <_printf_common+0x26>
 80070b2:	3301      	adds	r3, #1
 80070b4:	6033      	str	r3, [r6, #0]
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	0699      	lsls	r1, r3, #26
 80070ba:	bf42      	ittt	mi
 80070bc:	6833      	ldrmi	r3, [r6, #0]
 80070be:	3302      	addmi	r3, #2
 80070c0:	6033      	strmi	r3, [r6, #0]
 80070c2:	6825      	ldr	r5, [r4, #0]
 80070c4:	f015 0506 	ands.w	r5, r5, #6
 80070c8:	d106      	bne.n	80070d8 <_printf_common+0x48>
 80070ca:	f104 0a19 	add.w	sl, r4, #25
 80070ce:	68e3      	ldr	r3, [r4, #12]
 80070d0:	6832      	ldr	r2, [r6, #0]
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	42ab      	cmp	r3, r5
 80070d6:	dc26      	bgt.n	8007126 <_printf_common+0x96>
 80070d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070dc:	6822      	ldr	r2, [r4, #0]
 80070de:	3b00      	subs	r3, #0
 80070e0:	bf18      	it	ne
 80070e2:	2301      	movne	r3, #1
 80070e4:	0692      	lsls	r2, r2, #26
 80070e6:	d42b      	bmi.n	8007140 <_printf_common+0xb0>
 80070e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070ec:	4641      	mov	r1, r8
 80070ee:	4638      	mov	r0, r7
 80070f0:	47c8      	blx	r9
 80070f2:	3001      	adds	r0, #1
 80070f4:	d01e      	beq.n	8007134 <_printf_common+0xa4>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	6922      	ldr	r2, [r4, #16]
 80070fa:	f003 0306 	and.w	r3, r3, #6
 80070fe:	2b04      	cmp	r3, #4
 8007100:	bf02      	ittt	eq
 8007102:	68e5      	ldreq	r5, [r4, #12]
 8007104:	6833      	ldreq	r3, [r6, #0]
 8007106:	1aed      	subeq	r5, r5, r3
 8007108:	68a3      	ldr	r3, [r4, #8]
 800710a:	bf0c      	ite	eq
 800710c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007110:	2500      	movne	r5, #0
 8007112:	4293      	cmp	r3, r2
 8007114:	bfc4      	itt	gt
 8007116:	1a9b      	subgt	r3, r3, r2
 8007118:	18ed      	addgt	r5, r5, r3
 800711a:	2600      	movs	r6, #0
 800711c:	341a      	adds	r4, #26
 800711e:	42b5      	cmp	r5, r6
 8007120:	d11a      	bne.n	8007158 <_printf_common+0xc8>
 8007122:	2000      	movs	r0, #0
 8007124:	e008      	b.n	8007138 <_printf_common+0xa8>
 8007126:	2301      	movs	r3, #1
 8007128:	4652      	mov	r2, sl
 800712a:	4641      	mov	r1, r8
 800712c:	4638      	mov	r0, r7
 800712e:	47c8      	blx	r9
 8007130:	3001      	adds	r0, #1
 8007132:	d103      	bne.n	800713c <_printf_common+0xac>
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713c:	3501      	adds	r5, #1
 800713e:	e7c6      	b.n	80070ce <_printf_common+0x3e>
 8007140:	18e1      	adds	r1, r4, r3
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	2030      	movs	r0, #48	@ 0x30
 8007146:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800714a:	4422      	add	r2, r4
 800714c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007154:	3302      	adds	r3, #2
 8007156:	e7c7      	b.n	80070e8 <_printf_common+0x58>
 8007158:	2301      	movs	r3, #1
 800715a:	4622      	mov	r2, r4
 800715c:	4641      	mov	r1, r8
 800715e:	4638      	mov	r0, r7
 8007160:	47c8      	blx	r9
 8007162:	3001      	adds	r0, #1
 8007164:	d0e6      	beq.n	8007134 <_printf_common+0xa4>
 8007166:	3601      	adds	r6, #1
 8007168:	e7d9      	b.n	800711e <_printf_common+0x8e>
	...

0800716c <_printf_i>:
 800716c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	7e0f      	ldrb	r7, [r1, #24]
 8007172:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007174:	2f78      	cmp	r7, #120	@ 0x78
 8007176:	4691      	mov	r9, r2
 8007178:	4680      	mov	r8, r0
 800717a:	460c      	mov	r4, r1
 800717c:	469a      	mov	sl, r3
 800717e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007182:	d807      	bhi.n	8007194 <_printf_i+0x28>
 8007184:	2f62      	cmp	r7, #98	@ 0x62
 8007186:	d80a      	bhi.n	800719e <_printf_i+0x32>
 8007188:	2f00      	cmp	r7, #0
 800718a:	f000 80d1 	beq.w	8007330 <_printf_i+0x1c4>
 800718e:	2f58      	cmp	r7, #88	@ 0x58
 8007190:	f000 80b8 	beq.w	8007304 <_printf_i+0x198>
 8007194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007198:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800719c:	e03a      	b.n	8007214 <_printf_i+0xa8>
 800719e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071a2:	2b15      	cmp	r3, #21
 80071a4:	d8f6      	bhi.n	8007194 <_printf_i+0x28>
 80071a6:	a101      	add	r1, pc, #4	@ (adr r1, 80071ac <_printf_i+0x40>)
 80071a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071ac:	08007205 	.word	0x08007205
 80071b0:	08007219 	.word	0x08007219
 80071b4:	08007195 	.word	0x08007195
 80071b8:	08007195 	.word	0x08007195
 80071bc:	08007195 	.word	0x08007195
 80071c0:	08007195 	.word	0x08007195
 80071c4:	08007219 	.word	0x08007219
 80071c8:	08007195 	.word	0x08007195
 80071cc:	08007195 	.word	0x08007195
 80071d0:	08007195 	.word	0x08007195
 80071d4:	08007195 	.word	0x08007195
 80071d8:	08007317 	.word	0x08007317
 80071dc:	08007243 	.word	0x08007243
 80071e0:	080072d1 	.word	0x080072d1
 80071e4:	08007195 	.word	0x08007195
 80071e8:	08007195 	.word	0x08007195
 80071ec:	08007339 	.word	0x08007339
 80071f0:	08007195 	.word	0x08007195
 80071f4:	08007243 	.word	0x08007243
 80071f8:	08007195 	.word	0x08007195
 80071fc:	08007195 	.word	0x08007195
 8007200:	080072d9 	.word	0x080072d9
 8007204:	6833      	ldr	r3, [r6, #0]
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6032      	str	r2, [r6, #0]
 800720c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007210:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007214:	2301      	movs	r3, #1
 8007216:	e09c      	b.n	8007352 <_printf_i+0x1e6>
 8007218:	6833      	ldr	r3, [r6, #0]
 800721a:	6820      	ldr	r0, [r4, #0]
 800721c:	1d19      	adds	r1, r3, #4
 800721e:	6031      	str	r1, [r6, #0]
 8007220:	0606      	lsls	r6, r0, #24
 8007222:	d501      	bpl.n	8007228 <_printf_i+0xbc>
 8007224:	681d      	ldr	r5, [r3, #0]
 8007226:	e003      	b.n	8007230 <_printf_i+0xc4>
 8007228:	0645      	lsls	r5, r0, #25
 800722a:	d5fb      	bpl.n	8007224 <_printf_i+0xb8>
 800722c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007230:	2d00      	cmp	r5, #0
 8007232:	da03      	bge.n	800723c <_printf_i+0xd0>
 8007234:	232d      	movs	r3, #45	@ 0x2d
 8007236:	426d      	negs	r5, r5
 8007238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800723c:	4858      	ldr	r0, [pc, #352]	@ (80073a0 <_printf_i+0x234>)
 800723e:	230a      	movs	r3, #10
 8007240:	e011      	b.n	8007266 <_printf_i+0xfa>
 8007242:	6821      	ldr	r1, [r4, #0]
 8007244:	6833      	ldr	r3, [r6, #0]
 8007246:	0608      	lsls	r0, r1, #24
 8007248:	f853 5b04 	ldr.w	r5, [r3], #4
 800724c:	d402      	bmi.n	8007254 <_printf_i+0xe8>
 800724e:	0649      	lsls	r1, r1, #25
 8007250:	bf48      	it	mi
 8007252:	b2ad      	uxthmi	r5, r5
 8007254:	2f6f      	cmp	r7, #111	@ 0x6f
 8007256:	4852      	ldr	r0, [pc, #328]	@ (80073a0 <_printf_i+0x234>)
 8007258:	6033      	str	r3, [r6, #0]
 800725a:	bf14      	ite	ne
 800725c:	230a      	movne	r3, #10
 800725e:	2308      	moveq	r3, #8
 8007260:	2100      	movs	r1, #0
 8007262:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007266:	6866      	ldr	r6, [r4, #4]
 8007268:	60a6      	str	r6, [r4, #8]
 800726a:	2e00      	cmp	r6, #0
 800726c:	db05      	blt.n	800727a <_printf_i+0x10e>
 800726e:	6821      	ldr	r1, [r4, #0]
 8007270:	432e      	orrs	r6, r5
 8007272:	f021 0104 	bic.w	r1, r1, #4
 8007276:	6021      	str	r1, [r4, #0]
 8007278:	d04b      	beq.n	8007312 <_printf_i+0x1a6>
 800727a:	4616      	mov	r6, r2
 800727c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007280:	fb03 5711 	mls	r7, r3, r1, r5
 8007284:	5dc7      	ldrb	r7, [r0, r7]
 8007286:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800728a:	462f      	mov	r7, r5
 800728c:	42bb      	cmp	r3, r7
 800728e:	460d      	mov	r5, r1
 8007290:	d9f4      	bls.n	800727c <_printf_i+0x110>
 8007292:	2b08      	cmp	r3, #8
 8007294:	d10b      	bne.n	80072ae <_printf_i+0x142>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	07df      	lsls	r7, r3, #31
 800729a:	d508      	bpl.n	80072ae <_printf_i+0x142>
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	6861      	ldr	r1, [r4, #4]
 80072a0:	4299      	cmp	r1, r3
 80072a2:	bfde      	ittt	le
 80072a4:	2330      	movle	r3, #48	@ 0x30
 80072a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072ae:	1b92      	subs	r2, r2, r6
 80072b0:	6122      	str	r2, [r4, #16]
 80072b2:	f8cd a000 	str.w	sl, [sp]
 80072b6:	464b      	mov	r3, r9
 80072b8:	aa03      	add	r2, sp, #12
 80072ba:	4621      	mov	r1, r4
 80072bc:	4640      	mov	r0, r8
 80072be:	f7ff fee7 	bl	8007090 <_printf_common>
 80072c2:	3001      	adds	r0, #1
 80072c4:	d14a      	bne.n	800735c <_printf_i+0x1f0>
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ca:	b004      	add	sp, #16
 80072cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	f043 0320 	orr.w	r3, r3, #32
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	4832      	ldr	r0, [pc, #200]	@ (80073a4 <_printf_i+0x238>)
 80072da:	2778      	movs	r7, #120	@ 0x78
 80072dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	6831      	ldr	r1, [r6, #0]
 80072e4:	061f      	lsls	r7, r3, #24
 80072e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80072ea:	d402      	bmi.n	80072f2 <_printf_i+0x186>
 80072ec:	065f      	lsls	r7, r3, #25
 80072ee:	bf48      	it	mi
 80072f0:	b2ad      	uxthmi	r5, r5
 80072f2:	6031      	str	r1, [r6, #0]
 80072f4:	07d9      	lsls	r1, r3, #31
 80072f6:	bf44      	itt	mi
 80072f8:	f043 0320 	orrmi.w	r3, r3, #32
 80072fc:	6023      	strmi	r3, [r4, #0]
 80072fe:	b11d      	cbz	r5, 8007308 <_printf_i+0x19c>
 8007300:	2310      	movs	r3, #16
 8007302:	e7ad      	b.n	8007260 <_printf_i+0xf4>
 8007304:	4826      	ldr	r0, [pc, #152]	@ (80073a0 <_printf_i+0x234>)
 8007306:	e7e9      	b.n	80072dc <_printf_i+0x170>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	f023 0320 	bic.w	r3, r3, #32
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	e7f6      	b.n	8007300 <_printf_i+0x194>
 8007312:	4616      	mov	r6, r2
 8007314:	e7bd      	b.n	8007292 <_printf_i+0x126>
 8007316:	6833      	ldr	r3, [r6, #0]
 8007318:	6825      	ldr	r5, [r4, #0]
 800731a:	6961      	ldr	r1, [r4, #20]
 800731c:	1d18      	adds	r0, r3, #4
 800731e:	6030      	str	r0, [r6, #0]
 8007320:	062e      	lsls	r6, r5, #24
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	d501      	bpl.n	800732a <_printf_i+0x1be>
 8007326:	6019      	str	r1, [r3, #0]
 8007328:	e002      	b.n	8007330 <_printf_i+0x1c4>
 800732a:	0668      	lsls	r0, r5, #25
 800732c:	d5fb      	bpl.n	8007326 <_printf_i+0x1ba>
 800732e:	8019      	strh	r1, [r3, #0]
 8007330:	2300      	movs	r3, #0
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	4616      	mov	r6, r2
 8007336:	e7bc      	b.n	80072b2 <_printf_i+0x146>
 8007338:	6833      	ldr	r3, [r6, #0]
 800733a:	1d1a      	adds	r2, r3, #4
 800733c:	6032      	str	r2, [r6, #0]
 800733e:	681e      	ldr	r6, [r3, #0]
 8007340:	6862      	ldr	r2, [r4, #4]
 8007342:	2100      	movs	r1, #0
 8007344:	4630      	mov	r0, r6
 8007346:	f7f8 ff43 	bl	80001d0 <memchr>
 800734a:	b108      	cbz	r0, 8007350 <_printf_i+0x1e4>
 800734c:	1b80      	subs	r0, r0, r6
 800734e:	6060      	str	r0, [r4, #4]
 8007350:	6863      	ldr	r3, [r4, #4]
 8007352:	6123      	str	r3, [r4, #16]
 8007354:	2300      	movs	r3, #0
 8007356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800735a:	e7aa      	b.n	80072b2 <_printf_i+0x146>
 800735c:	6923      	ldr	r3, [r4, #16]
 800735e:	4632      	mov	r2, r6
 8007360:	4649      	mov	r1, r9
 8007362:	4640      	mov	r0, r8
 8007364:	47d0      	blx	sl
 8007366:	3001      	adds	r0, #1
 8007368:	d0ad      	beq.n	80072c6 <_printf_i+0x15a>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	079b      	lsls	r3, r3, #30
 800736e:	d413      	bmi.n	8007398 <_printf_i+0x22c>
 8007370:	68e0      	ldr	r0, [r4, #12]
 8007372:	9b03      	ldr	r3, [sp, #12]
 8007374:	4298      	cmp	r0, r3
 8007376:	bfb8      	it	lt
 8007378:	4618      	movlt	r0, r3
 800737a:	e7a6      	b.n	80072ca <_printf_i+0x15e>
 800737c:	2301      	movs	r3, #1
 800737e:	4632      	mov	r2, r6
 8007380:	4649      	mov	r1, r9
 8007382:	4640      	mov	r0, r8
 8007384:	47d0      	blx	sl
 8007386:	3001      	adds	r0, #1
 8007388:	d09d      	beq.n	80072c6 <_printf_i+0x15a>
 800738a:	3501      	adds	r5, #1
 800738c:	68e3      	ldr	r3, [r4, #12]
 800738e:	9903      	ldr	r1, [sp, #12]
 8007390:	1a5b      	subs	r3, r3, r1
 8007392:	42ab      	cmp	r3, r5
 8007394:	dcf2      	bgt.n	800737c <_printf_i+0x210>
 8007396:	e7eb      	b.n	8007370 <_printf_i+0x204>
 8007398:	2500      	movs	r5, #0
 800739a:	f104 0619 	add.w	r6, r4, #25
 800739e:	e7f5      	b.n	800738c <_printf_i+0x220>
 80073a0:	0800864c 	.word	0x0800864c
 80073a4:	0800865d 	.word	0x0800865d

080073a8 <__sflush_r>:
 80073a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b0:	0716      	lsls	r6, r2, #28
 80073b2:	4605      	mov	r5, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	d454      	bmi.n	8007462 <__sflush_r+0xba>
 80073b8:	684b      	ldr	r3, [r1, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	dc02      	bgt.n	80073c4 <__sflush_r+0x1c>
 80073be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dd48      	ble.n	8007456 <__sflush_r+0xae>
 80073c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073c6:	2e00      	cmp	r6, #0
 80073c8:	d045      	beq.n	8007456 <__sflush_r+0xae>
 80073ca:	2300      	movs	r3, #0
 80073cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073d0:	682f      	ldr	r7, [r5, #0]
 80073d2:	6a21      	ldr	r1, [r4, #32]
 80073d4:	602b      	str	r3, [r5, #0]
 80073d6:	d030      	beq.n	800743a <__sflush_r+0x92>
 80073d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	0759      	lsls	r1, r3, #29
 80073de:	d505      	bpl.n	80073ec <__sflush_r+0x44>
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	1ad2      	subs	r2, r2, r3
 80073e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073e6:	b10b      	cbz	r3, 80073ec <__sflush_r+0x44>
 80073e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	2300      	movs	r3, #0
 80073ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073f0:	6a21      	ldr	r1, [r4, #32]
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b0      	blx	r6
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	d106      	bne.n	800740a <__sflush_r+0x62>
 80073fc:	6829      	ldr	r1, [r5, #0]
 80073fe:	291d      	cmp	r1, #29
 8007400:	d82b      	bhi.n	800745a <__sflush_r+0xb2>
 8007402:	4a2a      	ldr	r2, [pc, #168]	@ (80074ac <__sflush_r+0x104>)
 8007404:	40ca      	lsrs	r2, r1
 8007406:	07d6      	lsls	r6, r2, #31
 8007408:	d527      	bpl.n	800745a <__sflush_r+0xb2>
 800740a:	2200      	movs	r2, #0
 800740c:	6062      	str	r2, [r4, #4]
 800740e:	04d9      	lsls	r1, r3, #19
 8007410:	6922      	ldr	r2, [r4, #16]
 8007412:	6022      	str	r2, [r4, #0]
 8007414:	d504      	bpl.n	8007420 <__sflush_r+0x78>
 8007416:	1c42      	adds	r2, r0, #1
 8007418:	d101      	bne.n	800741e <__sflush_r+0x76>
 800741a:	682b      	ldr	r3, [r5, #0]
 800741c:	b903      	cbnz	r3, 8007420 <__sflush_r+0x78>
 800741e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007422:	602f      	str	r7, [r5, #0]
 8007424:	b1b9      	cbz	r1, 8007456 <__sflush_r+0xae>
 8007426:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800742a:	4299      	cmp	r1, r3
 800742c:	d002      	beq.n	8007434 <__sflush_r+0x8c>
 800742e:	4628      	mov	r0, r5
 8007430:	f7ff fbd6 	bl	8006be0 <_free_r>
 8007434:	2300      	movs	r3, #0
 8007436:	6363      	str	r3, [r4, #52]	@ 0x34
 8007438:	e00d      	b.n	8007456 <__sflush_r+0xae>
 800743a:	2301      	movs	r3, #1
 800743c:	4628      	mov	r0, r5
 800743e:	47b0      	blx	r6
 8007440:	4602      	mov	r2, r0
 8007442:	1c50      	adds	r0, r2, #1
 8007444:	d1c9      	bne.n	80073da <__sflush_r+0x32>
 8007446:	682b      	ldr	r3, [r5, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0c6      	beq.n	80073da <__sflush_r+0x32>
 800744c:	2b1d      	cmp	r3, #29
 800744e:	d001      	beq.n	8007454 <__sflush_r+0xac>
 8007450:	2b16      	cmp	r3, #22
 8007452:	d11e      	bne.n	8007492 <__sflush_r+0xea>
 8007454:	602f      	str	r7, [r5, #0]
 8007456:	2000      	movs	r0, #0
 8007458:	e022      	b.n	80074a0 <__sflush_r+0xf8>
 800745a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800745e:	b21b      	sxth	r3, r3
 8007460:	e01b      	b.n	800749a <__sflush_r+0xf2>
 8007462:	690f      	ldr	r7, [r1, #16]
 8007464:	2f00      	cmp	r7, #0
 8007466:	d0f6      	beq.n	8007456 <__sflush_r+0xae>
 8007468:	0793      	lsls	r3, r2, #30
 800746a:	680e      	ldr	r6, [r1, #0]
 800746c:	bf08      	it	eq
 800746e:	694b      	ldreq	r3, [r1, #20]
 8007470:	600f      	str	r7, [r1, #0]
 8007472:	bf18      	it	ne
 8007474:	2300      	movne	r3, #0
 8007476:	eba6 0807 	sub.w	r8, r6, r7
 800747a:	608b      	str	r3, [r1, #8]
 800747c:	f1b8 0f00 	cmp.w	r8, #0
 8007480:	dde9      	ble.n	8007456 <__sflush_r+0xae>
 8007482:	6a21      	ldr	r1, [r4, #32]
 8007484:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007486:	4643      	mov	r3, r8
 8007488:	463a      	mov	r2, r7
 800748a:	4628      	mov	r0, r5
 800748c:	47b0      	blx	r6
 800748e:	2800      	cmp	r0, #0
 8007490:	dc08      	bgt.n	80074a4 <__sflush_r+0xfc>
 8007492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800749a:	81a3      	strh	r3, [r4, #12]
 800749c:	f04f 30ff 	mov.w	r0, #4294967295
 80074a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a4:	4407      	add	r7, r0
 80074a6:	eba8 0800 	sub.w	r8, r8, r0
 80074aa:	e7e7      	b.n	800747c <__sflush_r+0xd4>
 80074ac:	20400001 	.word	0x20400001

080074b0 <_fflush_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	690b      	ldr	r3, [r1, #16]
 80074b4:	4605      	mov	r5, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	b913      	cbnz	r3, 80074c0 <_fflush_r+0x10>
 80074ba:	2500      	movs	r5, #0
 80074bc:	4628      	mov	r0, r5
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	b118      	cbz	r0, 80074ca <_fflush_r+0x1a>
 80074c2:	6a03      	ldr	r3, [r0, #32]
 80074c4:	b90b      	cbnz	r3, 80074ca <_fflush_r+0x1a>
 80074c6:	f7ff fa47 	bl	8006958 <__sinit>
 80074ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f3      	beq.n	80074ba <_fflush_r+0xa>
 80074d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074d4:	07d0      	lsls	r0, r2, #31
 80074d6:	d404      	bmi.n	80074e2 <_fflush_r+0x32>
 80074d8:	0599      	lsls	r1, r3, #22
 80074da:	d402      	bmi.n	80074e2 <_fflush_r+0x32>
 80074dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074de:	f7ff fb50 	bl	8006b82 <__retarget_lock_acquire_recursive>
 80074e2:	4628      	mov	r0, r5
 80074e4:	4621      	mov	r1, r4
 80074e6:	f7ff ff5f 	bl	80073a8 <__sflush_r>
 80074ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074ec:	07da      	lsls	r2, r3, #31
 80074ee:	4605      	mov	r5, r0
 80074f0:	d4e4      	bmi.n	80074bc <_fflush_r+0xc>
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	059b      	lsls	r3, r3, #22
 80074f6:	d4e1      	bmi.n	80074bc <_fflush_r+0xc>
 80074f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074fa:	f7ff fb43 	bl	8006b84 <__retarget_lock_release_recursive>
 80074fe:	e7dd      	b.n	80074bc <_fflush_r+0xc>

08007500 <fiprintf>:
 8007500:	b40e      	push	{r1, r2, r3}
 8007502:	b503      	push	{r0, r1, lr}
 8007504:	4601      	mov	r1, r0
 8007506:	ab03      	add	r3, sp, #12
 8007508:	4805      	ldr	r0, [pc, #20]	@ (8007520 <fiprintf+0x20>)
 800750a:	f853 2b04 	ldr.w	r2, [r3], #4
 800750e:	6800      	ldr	r0, [r0, #0]
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	f000 f88f 	bl	8007634 <_vfiprintf_r>
 8007516:	b002      	add	sp, #8
 8007518:	f85d eb04 	ldr.w	lr, [sp], #4
 800751c:	b003      	add	sp, #12
 800751e:	4770      	bx	lr
 8007520:	20000088 	.word	0x20000088

08007524 <memmove>:
 8007524:	4288      	cmp	r0, r1
 8007526:	b510      	push	{r4, lr}
 8007528:	eb01 0402 	add.w	r4, r1, r2
 800752c:	d902      	bls.n	8007534 <memmove+0x10>
 800752e:	4284      	cmp	r4, r0
 8007530:	4623      	mov	r3, r4
 8007532:	d807      	bhi.n	8007544 <memmove+0x20>
 8007534:	1e43      	subs	r3, r0, #1
 8007536:	42a1      	cmp	r1, r4
 8007538:	d008      	beq.n	800754c <memmove+0x28>
 800753a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800753e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007542:	e7f8      	b.n	8007536 <memmove+0x12>
 8007544:	4402      	add	r2, r0
 8007546:	4601      	mov	r1, r0
 8007548:	428a      	cmp	r2, r1
 800754a:	d100      	bne.n	800754e <memmove+0x2a>
 800754c:	bd10      	pop	{r4, pc}
 800754e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007556:	e7f7      	b.n	8007548 <memmove+0x24>

08007558 <_sbrk_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d06      	ldr	r5, [pc, #24]	@ (8007574 <_sbrk_r+0x1c>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	f7fa ff82 	bl	800246c <_sbrk>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_sbrk_r+0x1a>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_sbrk_r+0x1a>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	200042ac 	.word	0x200042ac

08007578 <abort>:
 8007578:	b508      	push	{r3, lr}
 800757a:	2006      	movs	r0, #6
 800757c:	f000 fa2e 	bl	80079dc <raise>
 8007580:	2001      	movs	r0, #1
 8007582:	f7fa fefb 	bl	800237c <_exit>

08007586 <_realloc_r>:
 8007586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	4607      	mov	r7, r0
 800758c:	4614      	mov	r4, r2
 800758e:	460d      	mov	r5, r1
 8007590:	b921      	cbnz	r1, 800759c <_realloc_r+0x16>
 8007592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007596:	4611      	mov	r1, r2
 8007598:	f7ff bb96 	b.w	8006cc8 <_malloc_r>
 800759c:	b92a      	cbnz	r2, 80075aa <_realloc_r+0x24>
 800759e:	f7ff fb1f 	bl	8006be0 <_free_r>
 80075a2:	4625      	mov	r5, r4
 80075a4:	4628      	mov	r0, r5
 80075a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075aa:	f000 fa33 	bl	8007a14 <_malloc_usable_size_r>
 80075ae:	4284      	cmp	r4, r0
 80075b0:	4606      	mov	r6, r0
 80075b2:	d802      	bhi.n	80075ba <_realloc_r+0x34>
 80075b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075b8:	d8f4      	bhi.n	80075a4 <_realloc_r+0x1e>
 80075ba:	4621      	mov	r1, r4
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff fb83 	bl	8006cc8 <_malloc_r>
 80075c2:	4680      	mov	r8, r0
 80075c4:	b908      	cbnz	r0, 80075ca <_realloc_r+0x44>
 80075c6:	4645      	mov	r5, r8
 80075c8:	e7ec      	b.n	80075a4 <_realloc_r+0x1e>
 80075ca:	42b4      	cmp	r4, r6
 80075cc:	4622      	mov	r2, r4
 80075ce:	4629      	mov	r1, r5
 80075d0:	bf28      	it	cs
 80075d2:	4632      	movcs	r2, r6
 80075d4:	f7ff fad7 	bl	8006b86 <memcpy>
 80075d8:	4629      	mov	r1, r5
 80075da:	4638      	mov	r0, r7
 80075dc:	f7ff fb00 	bl	8006be0 <_free_r>
 80075e0:	e7f1      	b.n	80075c6 <_realloc_r+0x40>

080075e2 <__sfputc_r>:
 80075e2:	6893      	ldr	r3, [r2, #8]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	b410      	push	{r4}
 80075ea:	6093      	str	r3, [r2, #8]
 80075ec:	da08      	bge.n	8007600 <__sfputc_r+0x1e>
 80075ee:	6994      	ldr	r4, [r2, #24]
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	db01      	blt.n	80075f8 <__sfputc_r+0x16>
 80075f4:	290a      	cmp	r1, #10
 80075f6:	d103      	bne.n	8007600 <__sfputc_r+0x1e>
 80075f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075fc:	f000 b932 	b.w	8007864 <__swbuf_r>
 8007600:	6813      	ldr	r3, [r2, #0]
 8007602:	1c58      	adds	r0, r3, #1
 8007604:	6010      	str	r0, [r2, #0]
 8007606:	7019      	strb	r1, [r3, #0]
 8007608:	4608      	mov	r0, r1
 800760a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800760e:	4770      	bx	lr

08007610 <__sfputs_r>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	4606      	mov	r6, r0
 8007614:	460f      	mov	r7, r1
 8007616:	4614      	mov	r4, r2
 8007618:	18d5      	adds	r5, r2, r3
 800761a:	42ac      	cmp	r4, r5
 800761c:	d101      	bne.n	8007622 <__sfputs_r+0x12>
 800761e:	2000      	movs	r0, #0
 8007620:	e007      	b.n	8007632 <__sfputs_r+0x22>
 8007622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007626:	463a      	mov	r2, r7
 8007628:	4630      	mov	r0, r6
 800762a:	f7ff ffda 	bl	80075e2 <__sfputc_r>
 800762e:	1c43      	adds	r3, r0, #1
 8007630:	d1f3      	bne.n	800761a <__sfputs_r+0xa>
 8007632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007634 <_vfiprintf_r>:
 8007634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	460d      	mov	r5, r1
 800763a:	b09d      	sub	sp, #116	@ 0x74
 800763c:	4614      	mov	r4, r2
 800763e:	4698      	mov	r8, r3
 8007640:	4606      	mov	r6, r0
 8007642:	b118      	cbz	r0, 800764c <_vfiprintf_r+0x18>
 8007644:	6a03      	ldr	r3, [r0, #32]
 8007646:	b90b      	cbnz	r3, 800764c <_vfiprintf_r+0x18>
 8007648:	f7ff f986 	bl	8006958 <__sinit>
 800764c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800764e:	07d9      	lsls	r1, r3, #31
 8007650:	d405      	bmi.n	800765e <_vfiprintf_r+0x2a>
 8007652:	89ab      	ldrh	r3, [r5, #12]
 8007654:	059a      	lsls	r2, r3, #22
 8007656:	d402      	bmi.n	800765e <_vfiprintf_r+0x2a>
 8007658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800765a:	f7ff fa92 	bl	8006b82 <__retarget_lock_acquire_recursive>
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	071b      	lsls	r3, r3, #28
 8007662:	d501      	bpl.n	8007668 <_vfiprintf_r+0x34>
 8007664:	692b      	ldr	r3, [r5, #16]
 8007666:	b99b      	cbnz	r3, 8007690 <_vfiprintf_r+0x5c>
 8007668:	4629      	mov	r1, r5
 800766a:	4630      	mov	r0, r6
 800766c:	f000 f938 	bl	80078e0 <__swsetup_r>
 8007670:	b170      	cbz	r0, 8007690 <_vfiprintf_r+0x5c>
 8007672:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007674:	07dc      	lsls	r4, r3, #31
 8007676:	d504      	bpl.n	8007682 <_vfiprintf_r+0x4e>
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	b01d      	add	sp, #116	@ 0x74
 800767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	0598      	lsls	r0, r3, #22
 8007686:	d4f7      	bmi.n	8007678 <_vfiprintf_r+0x44>
 8007688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800768a:	f7ff fa7b 	bl	8006b84 <__retarget_lock_release_recursive>
 800768e:	e7f3      	b.n	8007678 <_vfiprintf_r+0x44>
 8007690:	2300      	movs	r3, #0
 8007692:	9309      	str	r3, [sp, #36]	@ 0x24
 8007694:	2320      	movs	r3, #32
 8007696:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800769a:	f8cd 800c 	str.w	r8, [sp, #12]
 800769e:	2330      	movs	r3, #48	@ 0x30
 80076a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007850 <_vfiprintf_r+0x21c>
 80076a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076a8:	f04f 0901 	mov.w	r9, #1
 80076ac:	4623      	mov	r3, r4
 80076ae:	469a      	mov	sl, r3
 80076b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b4:	b10a      	cbz	r2, 80076ba <_vfiprintf_r+0x86>
 80076b6:	2a25      	cmp	r2, #37	@ 0x25
 80076b8:	d1f9      	bne.n	80076ae <_vfiprintf_r+0x7a>
 80076ba:	ebba 0b04 	subs.w	fp, sl, r4
 80076be:	d00b      	beq.n	80076d8 <_vfiprintf_r+0xa4>
 80076c0:	465b      	mov	r3, fp
 80076c2:	4622      	mov	r2, r4
 80076c4:	4629      	mov	r1, r5
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7ff ffa2 	bl	8007610 <__sfputs_r>
 80076cc:	3001      	adds	r0, #1
 80076ce:	f000 80a7 	beq.w	8007820 <_vfiprintf_r+0x1ec>
 80076d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076d4:	445a      	add	r2, fp
 80076d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80076d8:	f89a 3000 	ldrb.w	r3, [sl]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 809f 	beq.w	8007820 <_vfiprintf_r+0x1ec>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f04f 32ff 	mov.w	r2, #4294967295
 80076e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ec:	f10a 0a01 	add.w	sl, sl, #1
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	9307      	str	r3, [sp, #28]
 80076f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80076fa:	4654      	mov	r4, sl
 80076fc:	2205      	movs	r2, #5
 80076fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007702:	4853      	ldr	r0, [pc, #332]	@ (8007850 <_vfiprintf_r+0x21c>)
 8007704:	f7f8 fd64 	bl	80001d0 <memchr>
 8007708:	9a04      	ldr	r2, [sp, #16]
 800770a:	b9d8      	cbnz	r0, 8007744 <_vfiprintf_r+0x110>
 800770c:	06d1      	lsls	r1, r2, #27
 800770e:	bf44      	itt	mi
 8007710:	2320      	movmi	r3, #32
 8007712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007716:	0713      	lsls	r3, r2, #28
 8007718:	bf44      	itt	mi
 800771a:	232b      	movmi	r3, #43	@ 0x2b
 800771c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007720:	f89a 3000 	ldrb.w	r3, [sl]
 8007724:	2b2a      	cmp	r3, #42	@ 0x2a
 8007726:	d015      	beq.n	8007754 <_vfiprintf_r+0x120>
 8007728:	9a07      	ldr	r2, [sp, #28]
 800772a:	4654      	mov	r4, sl
 800772c:	2000      	movs	r0, #0
 800772e:	f04f 0c0a 	mov.w	ip, #10
 8007732:	4621      	mov	r1, r4
 8007734:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007738:	3b30      	subs	r3, #48	@ 0x30
 800773a:	2b09      	cmp	r3, #9
 800773c:	d94b      	bls.n	80077d6 <_vfiprintf_r+0x1a2>
 800773e:	b1b0      	cbz	r0, 800776e <_vfiprintf_r+0x13a>
 8007740:	9207      	str	r2, [sp, #28]
 8007742:	e014      	b.n	800776e <_vfiprintf_r+0x13a>
 8007744:	eba0 0308 	sub.w	r3, r0, r8
 8007748:	fa09 f303 	lsl.w	r3, r9, r3
 800774c:	4313      	orrs	r3, r2
 800774e:	9304      	str	r3, [sp, #16]
 8007750:	46a2      	mov	sl, r4
 8007752:	e7d2      	b.n	80076fa <_vfiprintf_r+0xc6>
 8007754:	9b03      	ldr	r3, [sp, #12]
 8007756:	1d19      	adds	r1, r3, #4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	9103      	str	r1, [sp, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	bfbb      	ittet	lt
 8007760:	425b      	neglt	r3, r3
 8007762:	f042 0202 	orrlt.w	r2, r2, #2
 8007766:	9307      	strge	r3, [sp, #28]
 8007768:	9307      	strlt	r3, [sp, #28]
 800776a:	bfb8      	it	lt
 800776c:	9204      	strlt	r2, [sp, #16]
 800776e:	7823      	ldrb	r3, [r4, #0]
 8007770:	2b2e      	cmp	r3, #46	@ 0x2e
 8007772:	d10a      	bne.n	800778a <_vfiprintf_r+0x156>
 8007774:	7863      	ldrb	r3, [r4, #1]
 8007776:	2b2a      	cmp	r3, #42	@ 0x2a
 8007778:	d132      	bne.n	80077e0 <_vfiprintf_r+0x1ac>
 800777a:	9b03      	ldr	r3, [sp, #12]
 800777c:	1d1a      	adds	r2, r3, #4
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	9203      	str	r2, [sp, #12]
 8007782:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007786:	3402      	adds	r4, #2
 8007788:	9305      	str	r3, [sp, #20]
 800778a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007860 <_vfiprintf_r+0x22c>
 800778e:	7821      	ldrb	r1, [r4, #0]
 8007790:	2203      	movs	r2, #3
 8007792:	4650      	mov	r0, sl
 8007794:	f7f8 fd1c 	bl	80001d0 <memchr>
 8007798:	b138      	cbz	r0, 80077aa <_vfiprintf_r+0x176>
 800779a:	9b04      	ldr	r3, [sp, #16]
 800779c:	eba0 000a 	sub.w	r0, r0, sl
 80077a0:	2240      	movs	r2, #64	@ 0x40
 80077a2:	4082      	lsls	r2, r0
 80077a4:	4313      	orrs	r3, r2
 80077a6:	3401      	adds	r4, #1
 80077a8:	9304      	str	r3, [sp, #16]
 80077aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ae:	4829      	ldr	r0, [pc, #164]	@ (8007854 <_vfiprintf_r+0x220>)
 80077b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077b4:	2206      	movs	r2, #6
 80077b6:	f7f8 fd0b 	bl	80001d0 <memchr>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d03f      	beq.n	800783e <_vfiprintf_r+0x20a>
 80077be:	4b26      	ldr	r3, [pc, #152]	@ (8007858 <_vfiprintf_r+0x224>)
 80077c0:	bb1b      	cbnz	r3, 800780a <_vfiprintf_r+0x1d6>
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	3307      	adds	r3, #7
 80077c6:	f023 0307 	bic.w	r3, r3, #7
 80077ca:	3308      	adds	r3, #8
 80077cc:	9303      	str	r3, [sp, #12]
 80077ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d0:	443b      	add	r3, r7
 80077d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077d4:	e76a      	b.n	80076ac <_vfiprintf_r+0x78>
 80077d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80077da:	460c      	mov	r4, r1
 80077dc:	2001      	movs	r0, #1
 80077de:	e7a8      	b.n	8007732 <_vfiprintf_r+0xfe>
 80077e0:	2300      	movs	r3, #0
 80077e2:	3401      	adds	r4, #1
 80077e4:	9305      	str	r3, [sp, #20]
 80077e6:	4619      	mov	r1, r3
 80077e8:	f04f 0c0a 	mov.w	ip, #10
 80077ec:	4620      	mov	r0, r4
 80077ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f2:	3a30      	subs	r2, #48	@ 0x30
 80077f4:	2a09      	cmp	r2, #9
 80077f6:	d903      	bls.n	8007800 <_vfiprintf_r+0x1cc>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0c6      	beq.n	800778a <_vfiprintf_r+0x156>
 80077fc:	9105      	str	r1, [sp, #20]
 80077fe:	e7c4      	b.n	800778a <_vfiprintf_r+0x156>
 8007800:	fb0c 2101 	mla	r1, ip, r1, r2
 8007804:	4604      	mov	r4, r0
 8007806:	2301      	movs	r3, #1
 8007808:	e7f0      	b.n	80077ec <_vfiprintf_r+0x1b8>
 800780a:	ab03      	add	r3, sp, #12
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	462a      	mov	r2, r5
 8007810:	4b12      	ldr	r3, [pc, #72]	@ (800785c <_vfiprintf_r+0x228>)
 8007812:	a904      	add	r1, sp, #16
 8007814:	4630      	mov	r0, r6
 8007816:	f3af 8000 	nop.w
 800781a:	4607      	mov	r7, r0
 800781c:	1c78      	adds	r0, r7, #1
 800781e:	d1d6      	bne.n	80077ce <_vfiprintf_r+0x19a>
 8007820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007822:	07d9      	lsls	r1, r3, #31
 8007824:	d405      	bmi.n	8007832 <_vfiprintf_r+0x1fe>
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	059a      	lsls	r2, r3, #22
 800782a:	d402      	bmi.n	8007832 <_vfiprintf_r+0x1fe>
 800782c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800782e:	f7ff f9a9 	bl	8006b84 <__retarget_lock_release_recursive>
 8007832:	89ab      	ldrh	r3, [r5, #12]
 8007834:	065b      	lsls	r3, r3, #25
 8007836:	f53f af1f 	bmi.w	8007678 <_vfiprintf_r+0x44>
 800783a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800783c:	e71e      	b.n	800767c <_vfiprintf_r+0x48>
 800783e:	ab03      	add	r3, sp, #12
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	462a      	mov	r2, r5
 8007844:	4b05      	ldr	r3, [pc, #20]	@ (800785c <_vfiprintf_r+0x228>)
 8007846:	a904      	add	r1, sp, #16
 8007848:	4630      	mov	r0, r6
 800784a:	f7ff fc8f 	bl	800716c <_printf_i>
 800784e:	e7e4      	b.n	800781a <_vfiprintf_r+0x1e6>
 8007850:	0800863b 	.word	0x0800863b
 8007854:	08008645 	.word	0x08008645
 8007858:	00000000 	.word	0x00000000
 800785c:	08007611 	.word	0x08007611
 8007860:	08008641 	.word	0x08008641

08007864 <__swbuf_r>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	460e      	mov	r6, r1
 8007868:	4614      	mov	r4, r2
 800786a:	4605      	mov	r5, r0
 800786c:	b118      	cbz	r0, 8007876 <__swbuf_r+0x12>
 800786e:	6a03      	ldr	r3, [r0, #32]
 8007870:	b90b      	cbnz	r3, 8007876 <__swbuf_r+0x12>
 8007872:	f7ff f871 	bl	8006958 <__sinit>
 8007876:	69a3      	ldr	r3, [r4, #24]
 8007878:	60a3      	str	r3, [r4, #8]
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	071a      	lsls	r2, r3, #28
 800787e:	d501      	bpl.n	8007884 <__swbuf_r+0x20>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	b943      	cbnz	r3, 8007896 <__swbuf_r+0x32>
 8007884:	4621      	mov	r1, r4
 8007886:	4628      	mov	r0, r5
 8007888:	f000 f82a 	bl	80078e0 <__swsetup_r>
 800788c:	b118      	cbz	r0, 8007896 <__swbuf_r+0x32>
 800788e:	f04f 37ff 	mov.w	r7, #4294967295
 8007892:	4638      	mov	r0, r7
 8007894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	6922      	ldr	r2, [r4, #16]
 800789a:	1a98      	subs	r0, r3, r2
 800789c:	6963      	ldr	r3, [r4, #20]
 800789e:	b2f6      	uxtb	r6, r6
 80078a0:	4283      	cmp	r3, r0
 80078a2:	4637      	mov	r7, r6
 80078a4:	dc05      	bgt.n	80078b2 <__swbuf_r+0x4e>
 80078a6:	4621      	mov	r1, r4
 80078a8:	4628      	mov	r0, r5
 80078aa:	f7ff fe01 	bl	80074b0 <_fflush_r>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d1ed      	bne.n	800788e <__swbuf_r+0x2a>
 80078b2:	68a3      	ldr	r3, [r4, #8]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	60a3      	str	r3, [r4, #8]
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	6022      	str	r2, [r4, #0]
 80078be:	701e      	strb	r6, [r3, #0]
 80078c0:	6962      	ldr	r2, [r4, #20]
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d004      	beq.n	80078d2 <__swbuf_r+0x6e>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	07db      	lsls	r3, r3, #31
 80078cc:	d5e1      	bpl.n	8007892 <__swbuf_r+0x2e>
 80078ce:	2e0a      	cmp	r6, #10
 80078d0:	d1df      	bne.n	8007892 <__swbuf_r+0x2e>
 80078d2:	4621      	mov	r1, r4
 80078d4:	4628      	mov	r0, r5
 80078d6:	f7ff fdeb 	bl	80074b0 <_fflush_r>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d0d9      	beq.n	8007892 <__swbuf_r+0x2e>
 80078de:	e7d6      	b.n	800788e <__swbuf_r+0x2a>

080078e0 <__swsetup_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4b29      	ldr	r3, [pc, #164]	@ (8007988 <__swsetup_r+0xa8>)
 80078e4:	4605      	mov	r5, r0
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	460c      	mov	r4, r1
 80078ea:	b118      	cbz	r0, 80078f4 <__swsetup_r+0x14>
 80078ec:	6a03      	ldr	r3, [r0, #32]
 80078ee:	b90b      	cbnz	r3, 80078f4 <__swsetup_r+0x14>
 80078f0:	f7ff f832 	bl	8006958 <__sinit>
 80078f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f8:	0719      	lsls	r1, r3, #28
 80078fa:	d422      	bmi.n	8007942 <__swsetup_r+0x62>
 80078fc:	06da      	lsls	r2, r3, #27
 80078fe:	d407      	bmi.n	8007910 <__swsetup_r+0x30>
 8007900:	2209      	movs	r2, #9
 8007902:	602a      	str	r2, [r5, #0]
 8007904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	f04f 30ff 	mov.w	r0, #4294967295
 800790e:	e033      	b.n	8007978 <__swsetup_r+0x98>
 8007910:	0758      	lsls	r0, r3, #29
 8007912:	d512      	bpl.n	800793a <__swsetup_r+0x5a>
 8007914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007916:	b141      	cbz	r1, 800792a <__swsetup_r+0x4a>
 8007918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800791c:	4299      	cmp	r1, r3
 800791e:	d002      	beq.n	8007926 <__swsetup_r+0x46>
 8007920:	4628      	mov	r0, r5
 8007922:	f7ff f95d 	bl	8006be0 <_free_r>
 8007926:	2300      	movs	r3, #0
 8007928:	6363      	str	r3, [r4, #52]	@ 0x34
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007930:	81a3      	strh	r3, [r4, #12]
 8007932:	2300      	movs	r3, #0
 8007934:	6063      	str	r3, [r4, #4]
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	f043 0308 	orr.w	r3, r3, #8
 8007940:	81a3      	strh	r3, [r4, #12]
 8007942:	6923      	ldr	r3, [r4, #16]
 8007944:	b94b      	cbnz	r3, 800795a <__swsetup_r+0x7a>
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800794c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007950:	d003      	beq.n	800795a <__swsetup_r+0x7a>
 8007952:	4621      	mov	r1, r4
 8007954:	4628      	mov	r0, r5
 8007956:	f000 f88b 	bl	8007a70 <__smakebuf_r>
 800795a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800795e:	f013 0201 	ands.w	r2, r3, #1
 8007962:	d00a      	beq.n	800797a <__swsetup_r+0x9a>
 8007964:	2200      	movs	r2, #0
 8007966:	60a2      	str	r2, [r4, #8]
 8007968:	6962      	ldr	r2, [r4, #20]
 800796a:	4252      	negs	r2, r2
 800796c:	61a2      	str	r2, [r4, #24]
 800796e:	6922      	ldr	r2, [r4, #16]
 8007970:	b942      	cbnz	r2, 8007984 <__swsetup_r+0xa4>
 8007972:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007976:	d1c5      	bne.n	8007904 <__swsetup_r+0x24>
 8007978:	bd38      	pop	{r3, r4, r5, pc}
 800797a:	0799      	lsls	r1, r3, #30
 800797c:	bf58      	it	pl
 800797e:	6962      	ldrpl	r2, [r4, #20]
 8007980:	60a2      	str	r2, [r4, #8]
 8007982:	e7f4      	b.n	800796e <__swsetup_r+0x8e>
 8007984:	2000      	movs	r0, #0
 8007986:	e7f7      	b.n	8007978 <__swsetup_r+0x98>
 8007988:	20000088 	.word	0x20000088

0800798c <_raise_r>:
 800798c:	291f      	cmp	r1, #31
 800798e:	b538      	push	{r3, r4, r5, lr}
 8007990:	4605      	mov	r5, r0
 8007992:	460c      	mov	r4, r1
 8007994:	d904      	bls.n	80079a0 <_raise_r+0x14>
 8007996:	2316      	movs	r3, #22
 8007998:	6003      	str	r3, [r0, #0]
 800799a:	f04f 30ff 	mov.w	r0, #4294967295
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079a2:	b112      	cbz	r2, 80079aa <_raise_r+0x1e>
 80079a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079a8:	b94b      	cbnz	r3, 80079be <_raise_r+0x32>
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 f830 	bl	8007a10 <_getpid_r>
 80079b0:	4622      	mov	r2, r4
 80079b2:	4601      	mov	r1, r0
 80079b4:	4628      	mov	r0, r5
 80079b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ba:	f000 b817 	b.w	80079ec <_kill_r>
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d00a      	beq.n	80079d8 <_raise_r+0x4c>
 80079c2:	1c59      	adds	r1, r3, #1
 80079c4:	d103      	bne.n	80079ce <_raise_r+0x42>
 80079c6:	2316      	movs	r3, #22
 80079c8:	6003      	str	r3, [r0, #0]
 80079ca:	2001      	movs	r0, #1
 80079cc:	e7e7      	b.n	800799e <_raise_r+0x12>
 80079ce:	2100      	movs	r1, #0
 80079d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079d4:	4620      	mov	r0, r4
 80079d6:	4798      	blx	r3
 80079d8:	2000      	movs	r0, #0
 80079da:	e7e0      	b.n	800799e <_raise_r+0x12>

080079dc <raise>:
 80079dc:	4b02      	ldr	r3, [pc, #8]	@ (80079e8 <raise+0xc>)
 80079de:	4601      	mov	r1, r0
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	f7ff bfd3 	b.w	800798c <_raise_r>
 80079e6:	bf00      	nop
 80079e8:	20000088 	.word	0x20000088

080079ec <_kill_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d07      	ldr	r5, [pc, #28]	@ (8007a0c <_kill_r+0x20>)
 80079f0:	2300      	movs	r3, #0
 80079f2:	4604      	mov	r4, r0
 80079f4:	4608      	mov	r0, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	602b      	str	r3, [r5, #0]
 80079fa:	f7fa fcaf 	bl	800235c <_kill>
 80079fe:	1c43      	adds	r3, r0, #1
 8007a00:	d102      	bne.n	8007a08 <_kill_r+0x1c>
 8007a02:	682b      	ldr	r3, [r5, #0]
 8007a04:	b103      	cbz	r3, 8007a08 <_kill_r+0x1c>
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	bd38      	pop	{r3, r4, r5, pc}
 8007a0a:	bf00      	nop
 8007a0c:	200042ac 	.word	0x200042ac

08007a10 <_getpid_r>:
 8007a10:	f7fa bc9c 	b.w	800234c <_getpid>

08007a14 <_malloc_usable_size_r>:
 8007a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a18:	1f18      	subs	r0, r3, #4
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bfbc      	itt	lt
 8007a1e:	580b      	ldrlt	r3, [r1, r0]
 8007a20:	18c0      	addlt	r0, r0, r3
 8007a22:	4770      	bx	lr

08007a24 <__swhatbuf_r>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	460c      	mov	r4, r1
 8007a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	b096      	sub	sp, #88	@ 0x58
 8007a30:	4615      	mov	r5, r2
 8007a32:	461e      	mov	r6, r3
 8007a34:	da0d      	bge.n	8007a52 <__swhatbuf_r+0x2e>
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a3c:	f04f 0100 	mov.w	r1, #0
 8007a40:	bf14      	ite	ne
 8007a42:	2340      	movne	r3, #64	@ 0x40
 8007a44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a48:	2000      	movs	r0, #0
 8007a4a:	6031      	str	r1, [r6, #0]
 8007a4c:	602b      	str	r3, [r5, #0]
 8007a4e:	b016      	add	sp, #88	@ 0x58
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	466a      	mov	r2, sp
 8007a54:	f000 f848 	bl	8007ae8 <_fstat_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	dbec      	blt.n	8007a36 <__swhatbuf_r+0x12>
 8007a5c:	9901      	ldr	r1, [sp, #4]
 8007a5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a66:	4259      	negs	r1, r3
 8007a68:	4159      	adcs	r1, r3
 8007a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a6e:	e7eb      	b.n	8007a48 <__swhatbuf_r+0x24>

08007a70 <__smakebuf_r>:
 8007a70:	898b      	ldrh	r3, [r1, #12]
 8007a72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a74:	079d      	lsls	r5, r3, #30
 8007a76:	4606      	mov	r6, r0
 8007a78:	460c      	mov	r4, r1
 8007a7a:	d507      	bpl.n	8007a8c <__smakebuf_r+0x1c>
 8007a7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	2301      	movs	r3, #1
 8007a86:	6163      	str	r3, [r4, #20]
 8007a88:	b003      	add	sp, #12
 8007a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a8c:	ab01      	add	r3, sp, #4
 8007a8e:	466a      	mov	r2, sp
 8007a90:	f7ff ffc8 	bl	8007a24 <__swhatbuf_r>
 8007a94:	9f00      	ldr	r7, [sp, #0]
 8007a96:	4605      	mov	r5, r0
 8007a98:	4639      	mov	r1, r7
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7ff f914 	bl	8006cc8 <_malloc_r>
 8007aa0:	b948      	cbnz	r0, 8007ab6 <__smakebuf_r+0x46>
 8007aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa6:	059a      	lsls	r2, r3, #22
 8007aa8:	d4ee      	bmi.n	8007a88 <__smakebuf_r+0x18>
 8007aaa:	f023 0303 	bic.w	r3, r3, #3
 8007aae:	f043 0302 	orr.w	r3, r3, #2
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	e7e2      	b.n	8007a7c <__smakebuf_r+0xc>
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	6020      	str	r0, [r4, #0]
 8007aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	9b01      	ldr	r3, [sp, #4]
 8007ac2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ac6:	b15b      	cbz	r3, 8007ae0 <__smakebuf_r+0x70>
 8007ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007acc:	4630      	mov	r0, r6
 8007ace:	f000 f81d 	bl	8007b0c <_isatty_r>
 8007ad2:	b128      	cbz	r0, 8007ae0 <__smakebuf_r+0x70>
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	f023 0303 	bic.w	r3, r3, #3
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	81a3      	strh	r3, [r4, #12]
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	431d      	orrs	r5, r3
 8007ae4:	81a5      	strh	r5, [r4, #12]
 8007ae6:	e7cf      	b.n	8007a88 <__smakebuf_r+0x18>

08007ae8 <_fstat_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d07      	ldr	r5, [pc, #28]	@ (8007b08 <_fstat_r+0x20>)
 8007aec:	2300      	movs	r3, #0
 8007aee:	4604      	mov	r4, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	4611      	mov	r1, r2
 8007af4:	602b      	str	r3, [r5, #0]
 8007af6:	f7fa fc91 	bl	800241c <_fstat>
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	d102      	bne.n	8007b04 <_fstat_r+0x1c>
 8007afe:	682b      	ldr	r3, [r5, #0]
 8007b00:	b103      	cbz	r3, 8007b04 <_fstat_r+0x1c>
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	bd38      	pop	{r3, r4, r5, pc}
 8007b06:	bf00      	nop
 8007b08:	200042ac 	.word	0x200042ac

08007b0c <_isatty_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4d06      	ldr	r5, [pc, #24]	@ (8007b28 <_isatty_r+0x1c>)
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	602b      	str	r3, [r5, #0]
 8007b18:	f7fa fc90 	bl	800243c <_isatty>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_isatty_r+0x1a>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_isatty_r+0x1a>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	200042ac 	.word	0x200042ac

08007b2c <_init>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr

08007b38 <_fini>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	bf00      	nop
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr
