
ElementalCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001880  08008bd4  08008bd4  00009bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a454  0800a454  0000c100  2**0
                  CONTENTS
  4 .ARM          00000008  0800a454  0800a454  0000b454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a45c  0800a45c  0000c100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a45c  0800a45c  0000b45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a460  0800a460  0000b460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800a464  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c100  2**0
                  CONTENTS
 10 .bss          000041e4  20000100  20000100  0000c100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042e4  200042e4  0000c100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013afe  00000000  00000000  0000c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003abc  00000000  00000000  0001fc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  000236f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002415b  00000000  00000000  00024948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160b5  00000000  00000000  00048aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0902  00000000  00000000  0005eb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f45a  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000de0  00000000  00000000  0012f49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000053e8  00000000  00000000  00130280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00135668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bbc 	.word	0x08008bbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08008bbc 	.word	0x08008bbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2000011c 	.word	0x2000011c
 80005cc:	20000170 	.word	0x20000170

080005d0 <vInitBattle>:
 * @brief Executa a lógica de batalha turno a turno, atualizando a vida dos jogadores.
 * @param pUserPlayer: Ponteiro para o jogador do usuário.
 * @param pCpuPlayer: Ponteiro para o jogador da CPU.
 */
void vInitBattle(EWizard* pUserPlayer, EWizard* pCpuPlayer)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80005da:	2300      	movs	r3, #0
 80005dc:	75fb      	strb	r3, [r7, #23]
 80005de:	e092      	b.n	8000706 <vInitBattle+0x136>
  {
    // Pega os ataques deste turno
    EColor userAttack = pUserPlayer->eAttackSequential[u8Idx];
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	753b      	strb	r3, [r7, #20]
    EColor cpuAttack = pCpuPlayer->eAttackSequential[u8Idx];
 80005ea:	7dfb      	ldrb	r3, [r7, #23]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	4413      	add	r3, r2
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	74fb      	strb	r3, [r7, #19]

    // Calcula o resultado do ataque do Jogador -> CPU
    EAttackOutcome userOutcome = eGetAttackOutcome(userAttack, cpuAttack);
 80005f4:	7cfa      	ldrb	r2, [r7, #19]
 80005f6:	7d3b      	ldrb	r3, [r7, #20]
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f88c 	bl	8000718 <eGetAttackOutcome>
 8000600:	4603      	mov	r3, r0
 8000602:	74bb      	strb	r3, [r7, #18]
    uint8_t userDamage = BASE_ATTACK_DAMAGE;
 8000604:	230a      	movs	r3, #10
 8000606:	75bb      	strb	r3, [r7, #22]

    if (userOutcome == eOutcome_SuperEffective)
 8000608:	7cbb      	ldrb	r3, [r7, #18]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d10f      	bne.n	800062e <vInitBattle+0x5e>
    {
      userDamage *= SUPER_EFFECTIVE_MODIFIER;
 800060e:	7dbb      	ldrb	r3, [r7, #22]
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000618:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800061c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000624:	edc7 7a01 	vstr	s15, [r7, #4]
 8000628:	793b      	ldrb	r3, [r7, #4]
 800062a:	75bb      	strb	r3, [r7, #22]
 800062c:	e011      	b.n	8000652 <vInitBattle+0x82>
    }
    else if (userOutcome == eOutcome_NotEffective)
 800062e:	7cbb      	ldrb	r3, [r7, #18]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d10e      	bne.n	8000652 <vInitBattle+0x82>
    {
      userDamage *= NOT_EFFECTIVE_MODIFIER;
 8000634:	7dbb      	ldrb	r3, [r7, #22]
 8000636:	ee07 3a90 	vmov	s15, r3
 800063a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800063e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800064a:	edc7 7a01 	vstr	s15, [r7, #4]
 800064e:	793b      	ldrb	r3, [r7, #4]
 8000650:	75bb      	strb	r3, [r7, #22]
    }

    // Calcula o resultado do ataque da CPU -> Jogador
    EAttackOutcome cpuOutcome = eGetAttackOutcome(cpuAttack, userAttack);
 8000652:	7d3a      	ldrb	r2, [r7, #20]
 8000654:	7cfb      	ldrb	r3, [r7, #19]
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f85d 	bl	8000718 <eGetAttackOutcome>
 800065e:	4603      	mov	r3, r0
 8000660:	747b      	strb	r3, [r7, #17]
    uint8_t cpuDamage = BASE_ATTACK_DAMAGE;
 8000662:	230a      	movs	r3, #10
 8000664:	757b      	strb	r3, [r7, #21]

    if (cpuOutcome == eOutcome_SuperEffective)
 8000666:	7c7b      	ldrb	r3, [r7, #17]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10f      	bne.n	800068c <vInitBattle+0xbc>
    {
      cpuDamage *= SUPER_EFFECTIVE_MODIFIER;
 800066c:	7d7b      	ldrb	r3, [r7, #21]
 800066e:	ee07 3a90 	vmov	s15, r3
 8000672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000676:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800067a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800067e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000682:	edc7 7a01 	vstr	s15, [r7, #4]
 8000686:	793b      	ldrb	r3, [r7, #4]
 8000688:	757b      	strb	r3, [r7, #21]
 800068a:	e011      	b.n	80006b0 <vInitBattle+0xe0>
    }
    else if (cpuOutcome == eOutcome_NotEffective)
 800068c:	7c7b      	ldrb	r3, [r7, #17]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d10e      	bne.n	80006b0 <vInitBattle+0xe0>
    {
      cpuDamage *= NOT_EFFECTIVE_MODIFIER;
 8000692:	7d7b      	ldrb	r3, [r7, #21]
 8000694:	ee07 3a90 	vmov	s15, r3
 8000698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800069c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80006a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80006ac:	793b      	ldrb	r3, [r7, #4]
 80006ae:	757b      	strb	r3, [r7, #21]
    }

    // Aplica o dano, garantindo que a vida não fique negativa
    if (pCpuPlayer->u8HeartPoints >= userDamage)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	7dba      	ldrb	r2, [r7, #22]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d807      	bhi.n	80006ca <vInitBattle+0xfa>
    {
      pCpuPlayer->u8HeartPoints -= userDamage;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	7dbb      	ldrb	r3, [r7, #22]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e002      	b.n	80006d0 <vInitBattle+0x100>
    }
    else
    {
      pCpuPlayer->u8HeartPoints = 0;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
    }

    if (pUserPlayer->u8HeartPoints >= cpuDamage)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	7d7a      	ldrb	r2, [r7, #21]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d807      	bhi.n	80006ea <vInitBattle+0x11a>
    {
      pUserPlayer->u8HeartPoints -= cpuDamage;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	7d7b      	ldrb	r3, [r7, #21]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e002      	b.n	80006f0 <vInitBattle+0x120>
    }
    else
    {
      pUserPlayer->u8HeartPoints = 0;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
    }
    
    // Se a vida de alguém chegar a 0, a batalha pode parar mais cedo
    if(pUserPlayer->u8HeartPoints == 0 || pCpuPlayer->u8HeartPoints == 0)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00a      	beq.n	800070e <vInitBattle+0x13e>
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <vInitBattle+0x13e>
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	3301      	adds	r3, #1
 8000704:	75fb      	strb	r3, [r7, #23]
 8000706:	7dfb      	ldrb	r3, [r7, #23]
 8000708:	2b03      	cmp	r3, #3
 800070a:	f67f af69 	bls.w	80005e0 <vInitBattle+0x10>
    {
        break; // Encerra o loop for
    }
  }
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <eGetAttackOutcome>:
 * @param eAttackerAttack: O elemento do atacante.
 * @param eDefenderAttack: O elemento do defensor no mesmo turno.
 * @retval EAttackOutcome: O resultado da interação.
 */
EAttackOutcome eGetAttackOutcome(EColor eAttackerAttack, EColor eDefenderAttack)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
  switch (eAttackerAttack)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b05      	cmp	r3, #5
 800072c:	d859      	bhi.n	80007e2 <eGetAttackOutcome+0xca>
 800072e:	a201      	add	r2, pc, #4	@ (adr r2, 8000734 <eGetAttackOutcome+0x1c>)
 8000730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000734:	0800074d 	.word	0x0800074d
 8000738:	0800076b 	.word	0x0800076b
 800073c:	080007a7 	.word	0x080007a7
 8000740:	08000789 	.word	0x08000789
 8000744:	080007bb 	.word	0x080007bb
 8000748:	080007cf 	.word	0x080007cf
  {
    case eRed: // FOGO
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Fogo > Terra
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d101      	bne.n	8000756 <eGetAttackOutcome+0x3e>
 8000752:	2301      	movs	r3, #1
 8000754:	e053      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective;  //  Fogo > Sombra
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	2b05      	cmp	r3, #5
 800075a:	d101      	bne.n	8000760 <eGetAttackOutcome+0x48>
 800075c:	2301      	movs	r3, #1
 800075e:	e04e      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlue) return eOutcome_NotEffective;     // Fogo < Agua
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d13f      	bne.n	80007e6 <eGetAttackOutcome+0xce>
 8000766:	2302      	movs	r3, #2
 8000768:	e049      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    case eBlue: // ÁGUA
      if (eDefenderAttack == eRed) return eOutcome_SuperEffective;    // Agua > Fogo
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d101      	bne.n	8000774 <eGetAttackOutcome+0x5c>
 8000770:	2301      	movs	r3, #1
 8000772:	e044      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eGreen) return eOutcome_SuperEffective;  // Agua > Ar
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d101      	bne.n	800077e <eGetAttackOutcome+0x66>
 800077a:	2301      	movs	r3, #1
 800077c:	e03f      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;   // Agua < Terra
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d132      	bne.n	80007ea <eGetAttackOutcome+0xd2>
 8000784:	2302      	movs	r3, #2
 8000786:	e03a      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    case eYellow: // TERRA
      if (eDefenderAttack == eBlue) return eOutcome_SuperEffective;   // Terra > Agua
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d101      	bne.n	8000792 <eGetAttackOutcome+0x7a>
 800078e:	2301      	movs	r3, #1
 8000790:	e035      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective;  // Terra > Luz
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d101      	bne.n	800079c <eGetAttackOutcome+0x84>
 8000798:	2301      	movs	r3, #1
 800079a:	e030      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Terra < Fogo
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d125      	bne.n	80007ee <eGetAttackOutcome+0xd6>
 80007a2:	2302      	movs	r3, #2
 80007a4:	e02b      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    case eGreen: // AR
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Ar > Terra
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d101      	bne.n	80007b0 <eGetAttackOutcome+0x98>
 80007ac:	2301      	movs	r3, #1
 80007ae:	e026      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Ar < Fogo
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d11d      	bne.n	80007f2 <eGetAttackOutcome+0xda>
 80007b6:	2302      	movs	r3, #2
 80007b8:	e021      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;
    
    case eWhite: // LUZ
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective; // Luz > Sombra
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	2b05      	cmp	r3, #5
 80007be:	d101      	bne.n	80007c4 <eGetAttackOutcome+0xac>
 80007c0:	2301      	movs	r3, #1
 80007c2:	e01c      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;  // Luz < Terra
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d115      	bne.n	80007f6 <eGetAttackOutcome+0xde>
 80007ca:	2302      	movs	r3, #2
 80007cc:	e017      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    case eBlack: // SOMBRA
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective; // Sombra > Luz
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d101      	bne.n	80007d8 <eGetAttackOutcome+0xc0>
 80007d4:	2301      	movs	r3, #1
 80007d6:	e012      	b.n	80007fe <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;     // Sombra < Fogo
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d10d      	bne.n	80007fa <eGetAttackOutcome+0xe2>
 80007de:	2302      	movs	r3, #2
 80007e0:	e00d      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;

    default:
      return eOutcome_Neutral;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e00b      	b.n	80007fe <eGetAttackOutcome+0xe6>
      break;
 80007e6:	bf00      	nop
 80007e8:	e008      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007ea:	bf00      	nop
 80007ec:	e006      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007ee:	bf00      	nop
 80007f0:	e004      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007f2:	bf00      	nop
 80007f4:	e002      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007f6:	bf00      	nop
 80007f8:	e000      	b.n	80007fc <eGetAttackOutcome+0xe4>
      break;
 80007fa:	bf00      	nop
  }
  return eOutcome_Neutral; // Retorno padrão se nenhuma regra se aplicar
 80007fc:	2300      	movs	r3, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <ClearScreen>:
#include "ili9341.h"
#include "fonts.h"
#include "stdint.h"
#include <stdio.h>

void ClearScreen() {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af02      	add	r7, sp, #8
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, ILI9341_BLACK);
 8000812:	2300      	movs	r3, #0
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	23f0      	movs	r3, #240	@ 0xf0
 8000818:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800081c:	2100      	movs	r1, #0
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fb1a 	bl	8000e58 <ILI9341_FillRectangle>
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <DrawMenu>:

void DrawMenu(const char* title, const char** options, int numOptions, int currentSelection) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b092      	sub	sp, #72	@ 0x48
 8000830:	af04      	add	r7, sp, #16
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	603b      	str	r3, [r7, #0]
    char buffer[30];

    // Desenha o título com a fonte maior, mais abaixo no ecrã
    sprintf(buffer, "%s", title);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	492c      	ldr	r1, [pc, #176]	@ (80008f4 <DrawMenu+0xc8>)
 8000842:	4618      	mov	r0, r3
 8000844:	f007 f906 	bl	8007a54 <siprintf>
    ILI9341_WriteString(10, 50, buffer, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8000848:	4b2b      	ldr	r3, [pc, #172]	@ (80008f8 <DrawMenu+0xcc>)
 800084a:	f107 0114 	add.w	r1, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	9202      	str	r2, [sp, #8]
 8000852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000856:	9201      	str	r2, [sp, #4]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	9200      	str	r2, [sp, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	460a      	mov	r2, r1
 8000860:	2132      	movs	r1, #50	@ 0x32
 8000862:	200a      	movs	r0, #10
 8000864:	f000 faac 	bl	8000dc0 <ILI9341_WriteString>

    // Desenha as opções com mais espaçamento vertical
    for (int i = 0; i < numOptions; i++) {
 8000868:	2300      	movs	r3, #0
 800086a:	637b      	str	r3, [r7, #52]	@ 0x34
 800086c:	e039      	b.n	80008e2 <DrawMenu+0xb6>
        uint16_t color = (i == currentSelection) ? ILI9341_YELLOW : ILI9341_WHITE;
 800086e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	429a      	cmp	r2, r3
 8000874:	d102      	bne.n	800087c <DrawMenu+0x50>
 8000876:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800087a:	e001      	b.n	8000880 <DrawMenu+0x54>
 800087c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000880:	867b      	strh	r3, [r7, #50]	@ 0x32
        sprintf(buffer, "%s %s", (i == currentSelection) ? ">" : " ", options[i]);
 8000882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d101      	bne.n	800088e <DrawMenu+0x62>
 800088a:	491c      	ldr	r1, [pc, #112]	@ (80008fc <DrawMenu+0xd0>)
 800088c:	e000      	b.n	8000890 <DrawMenu+0x64>
 800088e:	491c      	ldr	r1, [pc, #112]	@ (8000900 <DrawMenu+0xd4>)
 8000890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	4413      	add	r3, r2
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f107 0014 	add.w	r0, r7, #20
 800089e:	460a      	mov	r2, r1
 80008a0:	4918      	ldr	r1, [pc, #96]	@ (8000904 <DrawMenu+0xd8>)
 80008a2:	f007 f8d7 	bl	8007a54 <siprintf>
        // Aumenta o espaçamento entre as linhas (de 15 para 25)
        ILI9341_WriteString(10, 100 + (i * 25), buffer, Font_11x18, color, ILI9341_BLACK);
 80008a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	0091      	lsls	r1, r2, #2
 80008b4:	461a      	mov	r2, r3
 80008b6:	460b      	mov	r3, r1
 80008b8:	4413      	add	r3, r2
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	3364      	adds	r3, #100	@ 0x64
 80008be:	b299      	uxth	r1, r3
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <DrawMenu+0xcc>)
 80008c2:	f107 0014 	add.w	r0, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	9202      	str	r2, [sp, #8]
 80008ca:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80008cc:	9201      	str	r2, [sp, #4]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	9200      	str	r2, [sp, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4602      	mov	r2, r0
 80008d6:	200a      	movs	r0, #10
 80008d8:	f000 fa72 	bl	8000dc0 <ILI9341_WriteString>
    for (int i = 0; i < numOptions; i++) {
 80008dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008de:	3301      	adds	r3, #1
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80008e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbc1      	blt.n	800086e <DrawMenu+0x42>
    }
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3738      	adds	r7, #56	@ 0x38
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08008bd4 	.word	0x08008bd4
 80008f8:	20000008 	.word	0x20000008
 80008fc:	08008bd8 	.word	0x08008bd8
 8000900:	08008bdc 	.word	0x08008bdc
 8000904:	08008be0 	.word	0x08008be0

08000908 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000912:	4802      	ldr	r0, [pc, #8]	@ (800091c <ILI9341_Select+0x14>)
 8000914:	f002 fbf0 	bl	80030f8 <HAL_GPIO_WritePin>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020400 	.word	0x40020400

08000920 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800092a:	4802      	ldr	r0, [pc, #8]	@ (8000934 <ILI9341_Unselect+0x14>)
 800092c:	f002 fbe4 	bl	80030f8 <HAL_GPIO_WritePin>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40020400 	.word	0x40020400

08000938 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2101      	movs	r1, #1
 8000940:	4806      	ldr	r0, [pc, #24]	@ (800095c <ILI9341_Reset+0x24>)
 8000942:	f002 fbd9 	bl	80030f8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000946:	2032      	movs	r0, #50	@ 0x32
 8000948:	f001 fec6 	bl	80026d8 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2101      	movs	r1, #1
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <ILI9341_Reset+0x24>)
 8000952:	f002 fbd1 	bl	80030f8 <HAL_GPIO_WritePin>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40020400 	.word	0x40020400

08000960 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	4807      	ldr	r0, [pc, #28]	@ (800098c <ILI9341_WriteCommand+0x2c>)
 8000970:	f002 fbc2 	bl	80030f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000974:	1df9      	adds	r1, r7, #7
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	2201      	movs	r2, #1
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <ILI9341_WriteCommand+0x30>)
 800097e:	f003 f8d0 	bl	8003b22 <HAL_SPI_Transmit>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020800 	.word	0x40020800
 8000990:	20000370 	.word	0x20000370

08000994 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2110      	movs	r1, #16
 80009a2:	4811      	ldr	r0, [pc, #68]	@ (80009e8 <ILI9341_WriteData+0x54>)
 80009a4:	f002 fba8 	bl	80030f8 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80009a8:	e015      	b.n	80009d6 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80009b0:	bf28      	it	cs
 80009b2:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80009b6:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80009b8:	89fa      	ldrh	r2, [r7, #14]
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	480a      	ldr	r0, [pc, #40]	@ (80009ec <ILI9341_WriteData+0x58>)
 80009c2:	f003 f8ae 	bl	8003b22 <HAL_SPI_Transmit>
        buff += chunk_size;
 80009c6:	89fb      	ldrh	r3, [r7, #14]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1e6      	bne.n	80009aa <ILI9341_WriteData+0x16>
    }
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40020800 	.word	0x40020800
 80009ec:	20000370 	.word	0x20000370

080009f0 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4604      	mov	r4, r0
 80009f8:	4608      	mov	r0, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	4623      	mov	r3, r4
 8000a00:	80fb      	strh	r3, [r7, #6]
 8000a02:	4603      	mov	r3, r0
 8000a04:	80bb      	strh	r3, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	807b      	strh	r3, [r7, #2]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000a0e:	202a      	movs	r0, #42	@ 0x2a
 8000a10:	f7ff ffa6 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	0a1b      	lsrs	r3, r3, #8
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	733b      	strb	r3, [r7, #12]
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	737b      	strb	r3, [r7, #13]
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	73bb      	strb	r3, [r7, #14]
 8000a2e:	887b      	ldrh	r3, [r7, #2]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ffaa 	bl	8000994 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000a40:	202b      	movs	r0, #43	@ 0x2b
 8000a42:	f7ff ff8d 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000a46:	88bb      	ldrh	r3, [r7, #4]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	723b      	strb	r3, [r7, #8]
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	727b      	strb	r3, [r7, #9]
 8000a56:	883b      	ldrh	r3, [r7, #0]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	72bb      	strb	r3, [r7, #10]
 8000a60:	883b      	ldrh	r3, [r7, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff91 	bl	8000994 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000a72:	202c      	movs	r0, #44	@ 0x2c
 8000a74:	f7ff ff74 	bl	8000960 <ILI9341_WriteCommand>
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd90      	pop	{r4, r7, pc}

08000a80 <ILI9341_Init>:

void ILI9341_Init() {
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b09b      	sub	sp, #108	@ 0x6c
 8000a84:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000a86:	f7ff ff3f 	bl	8000908 <ILI9341_Select>
    ILI9341_Reset();
 8000a8a:	f7ff ff55 	bl	8000938 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff ff66 	bl	8000960 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000a94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a98:	f001 fe1e 	bl	80026d8 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000a9c:	20cb      	movs	r0, #203	@ 0xcb
 8000a9e:	f7ff ff5f 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000aa2:	4a87      	ldr	r2, [pc, #540]	@ (8000cc0 <ILI9341_Init+0x240>)
 8000aa4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aac:	6018      	str	r0, [r3, #0]
 8000aae:	3304      	adds	r3, #4
 8000ab0:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000ab2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff6b 	bl	8000994 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000abe:	20cf      	movs	r0, #207	@ 0xcf
 8000ac0:	f7ff ff4e 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000ac4:	4a7f      	ldr	r2, [pc, #508]	@ (8000cc4 <ILI9341_Init+0x244>)
 8000ac6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	4611      	mov	r1, r2
 8000ace:	8019      	strh	r1, [r3, #0]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	0c12      	lsrs	r2, r2, #16
 8000ad4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000ad6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ada:	2103      	movs	r1, #3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff59 	bl	8000994 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000ae2:	20e8      	movs	r0, #232	@ 0xe8
 8000ae4:	f7ff ff3c 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000ae8:	4a77      	ldr	r2, [pc, #476]	@ (8000cc8 <ILI9341_Init+0x248>)
 8000aea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	4611      	mov	r1, r2
 8000af2:	8019      	strh	r1, [r3, #0]
 8000af4:	3302      	adds	r3, #2
 8000af6:	0c12      	lsrs	r2, r2, #16
 8000af8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000afa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000afe:	2103      	movs	r1, #3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff47 	bl	8000994 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000b06:	20ea      	movs	r0, #234	@ 0xea
 8000b08:	f7ff ff2a 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000b12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b16:	2102      	movs	r1, #2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff3b 	bl	8000994 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000b1e:	20ed      	movs	r0, #237	@ 0xed
 8000b20:	f7ff ff1e 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000b24:	4b69      	ldr	r3, [pc, #420]	@ (8000ccc <ILI9341_Init+0x24c>)
 8000b26:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000b28:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff30 	bl	8000994 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000b34:	20f7      	movs	r0, #247	@ 0xf7
 8000b36:	f7ff ff13 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000b40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b44:	2101      	movs	r1, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff24 	bl	8000994 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000b4c:	20c0      	movs	r0, #192	@ 0xc0
 8000b4e:	f7ff ff07 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000b52:	2323      	movs	r3, #35	@ 0x23
 8000b54:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000b58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff18 	bl	8000994 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000b64:	20c1      	movs	r0, #193	@ 0xc1
 8000b66:	f7ff fefb 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000b70:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff0c 	bl	8000994 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000b7c:	20c5      	movs	r0, #197	@ 0xc5
 8000b7e:	f7ff feef 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000b82:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000b86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000b8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff feff 	bl	8000994 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000b96:	20c7      	movs	r0, #199	@ 0xc7
 8000b98:	f7ff fee2 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000b9c:	2386      	movs	r3, #134	@ 0x86
 8000b9e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000ba2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fef3 	bl	8000994 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8000bae:	2036      	movs	r0, #54	@ 0x36
 8000bb0:	f7ff fed6 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000bb4:	2348      	movs	r3, #72	@ 0x48
 8000bb6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000bba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fee7 	bl	8000994 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000bc6:	203a      	movs	r0, #58	@ 0x3a
 8000bc8:	f7ff feca 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000bcc:	2355      	movs	r3, #85	@ 0x55
 8000bce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000bd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fedb 	bl	8000994 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8000bde:	20b1      	movs	r0, #177	@ 0xb1
 8000be0:	f7ff febe 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000be4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000be8:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000bea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fecf 	bl	8000994 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000bf6:	20b6      	movs	r0, #182	@ 0xb6
 8000bf8:	f7ff feb2 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000bfc:	4a34      	ldr	r2, [pc, #208]	@ (8000cd0 <ILI9341_Init+0x250>)
 8000bfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	4611      	mov	r1, r2
 8000c06:	8019      	strh	r1, [r3, #0]
 8000c08:	3302      	adds	r3, #2
 8000c0a:	0c12      	lsrs	r2, r2, #16
 8000c0c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c12:	2103      	movs	r1, #3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff febd 	bl	8000994 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000c1a:	20f2      	movs	r0, #242	@ 0xf2
 8000c1c:	f7ff fea0 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000c20:	2300      	movs	r3, #0
 8000c22:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8000c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff feb1 	bl	8000994 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8000c32:	2026      	movs	r0, #38	@ 0x26
 8000c34:	f7ff fe94 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000c38:	2301      	movs	r3, #1
 8000c3a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	2101      	movs	r1, #1
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fea5 	bl	8000994 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8000c4a:	20e0      	movs	r0, #224	@ 0xe0
 8000c4c:	f7ff fe88 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000c50:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <ILI9341_Init+0x254>)
 8000c52:	f107 0414 	add.w	r4, r7, #20
 8000c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c58:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5a:	8023      	strh	r3, [r4, #0]
 8000c5c:	3402      	adds	r4, #2
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	210f      	movs	r1, #15
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe93 	bl	8000994 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8000c6e:	20e1      	movs	r0, #225	@ 0xe1
 8000c70:	f7ff fe76 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <ILI9341_Init+0x258>)
 8000c76:	1d3c      	adds	r4, r7, #4
 8000c78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7a:	c407      	stmia	r4!, {r0, r1, r2}
 8000c7c:	8023      	strh	r3, [r4, #0]
 8000c7e:	3402      	adds	r4, #2
 8000c80:	0c1b      	lsrs	r3, r3, #16
 8000c82:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	210f      	movs	r1, #15
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe83 	bl	8000994 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8000c8e:	2011      	movs	r0, #17
 8000c90:	f7ff fe66 	bl	8000960 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000c94:	2078      	movs	r0, #120	@ 0x78
 8000c96:	f001 fd1f 	bl	80026d8 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000c9a:	2029      	movs	r0, #41	@ 0x29
 8000c9c:	f7ff fe60 	bl	8000960 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000ca0:	2036      	movs	r0, #54	@ 0x36
 8000ca2:	f7ff fe5d 	bl	8000960 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000ca6:	23e8      	movs	r3, #232	@ 0xe8
 8000ca8:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000caa:	463b      	mov	r3, r7
 8000cac:	2101      	movs	r1, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe70 	bl	8000994 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000cb4:	f7ff fe34 	bl	8000920 <ILI9341_Unselect>
}
 8000cb8:	bf00      	nop
 8000cba:	376c      	adds	r7, #108	@ 0x6c
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	08008be8 	.word	0x08008be8
 8000cc4:	08008bf0 	.word	0x08008bf0
 8000cc8:	08008bf4 	.word	0x08008bf4
 8000ccc:	81120364 	.word	0x81120364
 8000cd0:	08008bf8 	.word	0x08008bf8
 8000cd4:	08008bfc 	.word	0x08008bfc
 8000cd8:	08008c0c 	.word	0x08008c0c

08000cdc <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000cdc:	b082      	sub	sp, #8
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b088      	sub	sp, #32
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	460b      	mov	r3, r1
 8000cec:	80bb      	strh	r3, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000cf2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000d06:	4619      	mov	r1, r3
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	440b      	add	r3, r1
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	88b9      	ldrh	r1, [r7, #4]
 8000d14:	88f8      	ldrh	r0, [r7, #6]
 8000d16:	f7ff fe6b 	bl	80009f0 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e041      	b.n	8000da4 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8000d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	3b20      	subs	r3, #32
 8000d26:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000d2a:	fb01 f303 	mul.w	r3, r1, r3
 8000d2e:	4619      	mov	r1, r3
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	440b      	add	r3, r1
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	e027      	b.n	8000d92 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00e      	beq.n	8000d70 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000d52:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	743b      	strb	r3, [r7, #16]
 8000d5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	2102      	movs	r1, #2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fe13 	bl	8000994 <ILI9341_WriteData>
 8000d6e:	e00d      	b.n	8000d8c <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000d70:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	733b      	strb	r3, [r7, #12]
 8000d7a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2102      	movs	r1, #2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe04 	bl	8000994 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d96:	461a      	mov	r2, r3
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d3d1      	bcc.n	8000d42 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3301      	adds	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000da8:	461a      	mov	r2, r3
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d3b7      	bcc.n	8000d20 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dbc:	b002      	add	sp, #8
 8000dbe:	4770      	bx	lr

08000dc0 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af04      	add	r7, sp, #16
 8000dc8:	603a      	str	r2, [r7, #0]
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80fb      	strh	r3, [r7, #6]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000dd4:	f7ff fd98 	bl	8000908 <ILI9341_Select>

    while(*str) {
 8000dd8:	e02e      	b.n	8000e38 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	7d3a      	ldrb	r2, [r7, #20]
 8000dde:	4413      	add	r3, r2
 8000de0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000de4:	db13      	blt.n	8000e0e <ILI9341_WriteString+0x4e>
            x = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000dea:	7d7b      	ldrb	r3, [r7, #21]
 8000dec:	461a      	mov	r2, r3
 8000dee:	88bb      	ldrh	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	7d7a      	ldrb	r2, [r7, #21]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2bef      	cmp	r3, #239	@ 0xef
 8000dfc:	dc21      	bgt.n	8000e42 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b20      	cmp	r3, #32
 8000e04:	d103      	bne.n	8000e0e <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	603b      	str	r3, [r7, #0]
                continue;
 8000e0c:	e014      	b.n	8000e38 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	781a      	ldrb	r2, [r3, #0]
 8000e12:	88b9      	ldrh	r1, [r7, #4]
 8000e14:	88f8      	ldrh	r0, [r7, #6]
 8000e16:	8c3b      	ldrh	r3, [r7, #32]
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	8bbb      	ldrh	r3, [r7, #28]
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f7ff ff5a 	bl	8000cdc <ILI9341_WriteChar>
        x += font.width;
 8000e28:	7d3b      	ldrb	r3, [r7, #20]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	4413      	add	r3, r2
 8000e30:	80fb      	strh	r3, [r7, #6]
        str++;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1cc      	bne.n	8000dda <ILI9341_WriteString+0x1a>
 8000e40:	e000      	b.n	8000e44 <ILI9341_WriteString+0x84>
                break;
 8000e42:	bf00      	nop
    }

    ILI9341_Unselect();
 8000e44:	f7ff fd6c 	bl	8000920 <ILI9341_Unselect>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e52:	b002      	add	sp, #8
 8000e54:	4770      	bx	lr
	...

08000e58 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4608      	mov	r0, r1
 8000e62:	4611      	mov	r1, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	4623      	mov	r3, r4
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80bb      	strh	r3, [r7, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	807b      	strh	r3, [r7, #2]
 8000e72:	4613      	mov	r3, r2
 8000e74:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e7c:	d252      	bcs.n	8000f24 <ILI9341_FillRectangle+0xcc>
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	2bef      	cmp	r3, #239	@ 0xef
 8000e82:	d84f      	bhi.n	8000f24 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000e84:	88fa      	ldrh	r2, [r7, #6]
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	4413      	add	r3, r2
 8000e8a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e8e:	dd03      	ble.n	8000e98 <ILI9341_FillRectangle+0x40>
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000e96:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000e98:	88ba      	ldrh	r2, [r7, #4]
 8000e9a:	883b      	ldrh	r3, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000ea0:	dd03      	ble.n	8000eaa <ILI9341_FillRectangle+0x52>
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000ea8:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000eaa:	f7ff fd2d 	bl	8000908 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000eae:	88fa      	ldrh	r2, [r7, #6]
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	b29c      	uxth	r4, r3
 8000eba:	88ba      	ldrh	r2, [r7, #4]
 8000ebc:	883b      	ldrh	r3, [r7, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	88b9      	ldrh	r1, [r7, #4]
 8000ec8:	88f8      	ldrh	r0, [r7, #6]
 8000eca:	4622      	mov	r2, r4
 8000ecc:	f7ff fd90 	bl	80009f0 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000ed0:	8c3b      	ldrh	r3, [r7, #32]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	733b      	strb	r3, [r7, #12]
 8000eda:	8c3b      	ldrh	r3, [r7, #32]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <ILI9341_FillRectangle+0xd4>)
 8000ee6:	f002 f907 	bl	80030f8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000eea:	883b      	ldrh	r3, [r7, #0]
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	e013      	b.n	8000f18 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	e00a      	b.n	8000f0c <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000ef6:	f107 010c 	add.w	r1, r7, #12
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	2202      	movs	r2, #2
 8000f00:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <ILI9341_FillRectangle+0xd8>)
 8000f02:	f002 fe0e 	bl	8003b22 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	80fb      	strh	r3, [r7, #6]
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f1      	bne.n	8000ef6 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000f12:	88bb      	ldrh	r3, [r7, #4]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	80bb      	strh	r3, [r7, #4]
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e8      	bne.n	8000ef0 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8000f1e:	f7ff fcff 	bl	8000920 <ILI9341_Unselect>
 8000f22:	e000      	b.n	8000f26 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000f24:	bf00      	nop
}
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	20000370 	.word	0x20000370

08000f34 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	23f0      	movs	r3, #240	@ 0xf0
 8000f44:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff ff84 	bl	8000e58 <ILI9341_FillRectangle>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <KEYPAD_Scan>:
Keypad_Pin_t C_PINS[4] = {{C4_GPIO_Port, C4_Pin}, {C3_GPIO_Port, C3_Pin}, {C2_GPIO_Port, C2_Pin}, {C1_GPIO_Port, C1_Pin}};
// Pinos das linhas (entradas)
Keypad_Pin_t R_PINS[4] = {{R2_GPIO_Port, R2_Pin}, {R1_GPIO_Port, R1_Pin}, {R3_GPIO_Port, R3_Pin}, {R4_GPIO_Port, R4_Pin}};


char KEYPAD_Scan(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
    // Coloca todas as colunas em nível alto
    for (int i = 0; i < 4; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e00f      	b.n	8000f84 <KEYPAD_Scan+0x2c>
        HAL_GPIO_WritePin(C_PINS[i].PORT, C_PINS[i].PIN, GPIO_PIN_SET);
 8000f64:	4a3e      	ldr	r2, [pc, #248]	@ (8001060 <KEYPAD_Scan+0x108>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f6c:	4a3c      	ldr	r2, [pc, #240]	@ (8001060 <KEYPAD_Scan+0x108>)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	889b      	ldrh	r3, [r3, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f002 f8bd 	bl	80030f8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	ddec      	ble.n	8000f64 <KEYPAD_Scan+0xc>
    }

    // Loop para varrer cada coluna
    for (int col = 0; col < 4; col++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	e05e      	b.n	800104e <KEYPAD_Scan+0xf6>
        // Ativa a coluna atual (coloca em nível baixo)
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_RESET);
 8000f90:	4a33      	ldr	r2, [pc, #204]	@ (8001060 <KEYPAD_Scan+0x108>)
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f98:	4a31      	ldr	r2, [pc, #196]	@ (8001060 <KEYPAD_Scan+0x108>)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	889b      	ldrh	r3, [r3, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f002 f8a7 	bl	80030f8 <HAL_GPIO_WritePin>

        // Verifica qual linha foi para nível baixo
        for (int row = 0; row < 4; row++) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	e03b      	b.n	8001028 <KEYPAD_Scan+0xd0>
            if (HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET) {
 8000fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8001064 <KEYPAD_Scan+0x10c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000fb8:	492a      	ldr	r1, [pc, #168]	@ (8001064 <KEYPAD_Scan+0x10c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	889b      	ldrh	r3, [r3, #4]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	f002 f87f 	bl	80030c8 <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d128      	bne.n	8001022 <KEYPAD_Scan+0xca>
                // Botão pressionado!
                
                // --- Debounce e espera soltar a tecla ---
                HAL_Delay(50); // Simples debounce por atraso
 8000fd0:	2032      	movs	r0, #50	@ 0x32
 8000fd2:	f001 fb81 	bl	80026d8 <HAL_Delay>

                // Espera o usuário soltar a tecla para não ler a mesma tecla várias vezes
                while(HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET);
 8000fd6:	bf00      	nop
 8000fd8:	4a22      	ldr	r2, [pc, #136]	@ (8001064 <KEYPAD_Scan+0x10c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000fe0:	4920      	ldr	r1, [pc, #128]	@ (8001064 <KEYPAD_Scan+0x10c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	889b      	ldrh	r3, [r3, #4]
 8000fea:	4619      	mov	r1, r3
 8000fec:	4610      	mov	r0, r2
 8000fee:	f002 f86b 	bl	80030c8 <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0ef      	beq.n	8000fd8 <KEYPAD_Scan+0x80>
                
                // Restaura a coluna para nível alto antes de retornar
                HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8000ff8:	4a19      	ldr	r2, [pc, #100]	@ (8001060 <KEYPAD_Scan+0x108>)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001000:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <KEYPAD_Scan+0x108>)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	889b      	ldrh	r3, [r3, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	f002 f873 	bl	80030f8 <HAL_GPIO_WritePin>

                return KEYPAD_MAP[row][col];
 8001012:	4a15      	ldr	r2, [pc, #84]	@ (8001068 <KEYPAD_Scan+0x110>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	441a      	add	r2, r3
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	e019      	b.n	8001056 <KEYPAD_Scan+0xfe>
        for (int row = 0; row < 4; row++) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3301      	adds	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b03      	cmp	r3, #3
 800102c:	ddc0      	ble.n	8000fb0 <KEYPAD_Scan+0x58>
            }
        }

        // Desativa a coluna atual antes de ir para a próxima
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 800102e:	4a0c      	ldr	r2, [pc, #48]	@ (8001060 <KEYPAD_Scan+0x108>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <KEYPAD_Scan+0x108>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	889b      	ldrh	r3, [r3, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	f002 f858 	bl	80030f8 <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	3301      	adds	r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b03      	cmp	r3, #3
 8001052:	dd9d      	ble.n	8000f90 <KEYPAD_Scan+0x38>
    }

    return '\0'; // Retorna nulo se nenhuma tecla for pressionada
 8001054:	2300      	movs	r3, #0
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000010 	.word	0x20000010
 8001064:	20000030 	.word	0x20000030
 8001068:	0800a34c 	.word	0x0800a34c

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b098      	sub	sp, #96	@ 0x60
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001072:	f001 fabf 	bl	80025f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001076:	f000 f861 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107a:	f000 f929 	bl	80012d0 <MX_GPIO_Init>
  MX_UART4_Init();
 800107e:	f000 f8fd 	bl	800127c <MX_UART4_Init>
  MX_SPI1_Init();
 8001082:	f000 f8c5 	bl	8001210 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init();
 8001086:	f7ff fcfb 	bl	8000a80 <ILI9341_Init>
  ILI9341_FillScreen(ILI9341_BLACK);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ff52 	bl	8000f34 <ILI9341_FillScreen>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  osMutexDef(gameMutex);
 8001090:	2300      	movs	r3, #0
 8001092:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	@ 0x5c
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 8001098:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800109c:	4618      	mov	r0, r3
 800109e:	f004 f842 	bl	8005126 <osMutexCreate>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001120 <main+0xb4>)
 80010a6:	6013      	str	r3, [r2, #0]

  osThreadDef(initPutHalTask, StartInputHalTask, osPriorityNormal, 0, 128);
 80010a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <main+0xb8>)
 80010aa:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  inputHalTaskHandle = osThreadCreate(osThread(initPutHalTask), NULL);
 80010bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 ffcf 	bl	8005066 <osThreadCreate>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <main+0xbc>)
 80010cc:	6013      	str	r3, [r2, #0]

  osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 256);
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <main+0xc0>)
 80010d0:	f107 0420 	add.w	r4, r7, #32
 80010d4:	461d      	mov	r5, r3
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 ffbc 	bl	8005066 <osThreadCreate>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <main+0xc4>)
 80010f2:	6013      	str	r3, [r2, #0]

  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <main+0xc8>)
 80010f6:	1d3c      	adds	r4, r7, #4
 80010f8:	461d      	mov	r5, r3
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f003 ffab 	bl	8005066 <osThreadCreate>
 8001110:	4603      	mov	r3, r0
 8001112:	4a09      	ldr	r2, [pc, #36]	@ (8001138 <main+0xcc>)
 8001114:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001116:	f003 ff9f 	bl	8005058 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800111a:	bf00      	nop
 800111c:	e7fd      	b.n	800111a <main+0xae>
 800111e:	bf00      	nop
 8001120:	2000041c 	.word	0x2000041c
 8001124:	08008c8c 	.word	0x08008c8c
 8001128:	20000410 	.word	0x20000410
 800112c:	08008cb4 	.word	0x08008cb4
 8001130:	20000414 	.word	0x20000414
 8001134:	08008cdc 	.word	0x08008cdc
 8001138:	20000418 	.word	0x20000418

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	@ 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	@ 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f006 fce7 	bl	8007b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <SystemClock_Config+0xcc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	4a27      	ldr	r2, [pc, #156]	@ (8001208 <SystemClock_Config+0xcc>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001170:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <SystemClock_Config+0xcc>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <SystemClock_Config+0xd0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a21      	ldr	r2, [pc, #132]	@ (800120c <SystemClock_Config+0xd0>)
 8001186:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <SystemClock_Config+0xd0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	2310      	movs	r3, #16
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a8:	2300      	movs	r3, #0
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011b0:	23a8      	movs	r3, #168	@ 0xa8
 80011b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b8:	2304      	movs	r3, #4
 80011ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 ffcd 	bl	8003160 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011cc:	f000 ffc6 	bl	800215c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2302      	movs	r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2105      	movs	r1, #5
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fa2e 	bl	8003650 <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011fa:	f000 ffaf 	bl	800215c <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3750      	adds	r7, #80	@ 0x50
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001214:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <MX_SPI1_Init+0x64>)
 8001216:	4a18      	ldr	r2, [pc, #96]	@ (8001278 <MX_SPI1_Init+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800121a:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <MX_SPI1_Init+0x64>)
 800121c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_SPI1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <MX_SPI1_Init+0x64>)
 800123c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001240:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <MX_SPI1_Init+0x64>)
 8001244:	2208      	movs	r2, #8
 8001246:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <MX_SPI1_Init+0x64>)
 800125c:	220a      	movs	r2, #10
 800125e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <MX_SPI1_Init+0x64>)
 8001262:	f002 fbd5 	bl	8003a10 <HAL_SPI_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800126c:	f000 ff76 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000370 	.word	0x20000370
 8001278:	40013000 	.word	0x40013000

0800127c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_UART4_Init+0x4c>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <MX_UART4_Init+0x50>)
 8001284:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <MX_UART4_Init+0x4c>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_UART4_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_UART4_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <MX_UART4_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_UART4_Init+0x4c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <MX_UART4_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_UART4_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_UART4_Init+0x4c>)
 80012b4:	f002 ff74 	bl	80041a0 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80012be:	f000 ff4d 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200003c8 	.word	0x200003c8
 80012cc:	40004c00 	.word	0x40004c00

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	@ 0x28
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001414 <MX_GPIO_Init+0x144>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a49      	ldr	r2, [pc, #292]	@ (8001414 <MX_GPIO_Init+0x144>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b47      	ldr	r3, [pc, #284]	@ (8001414 <MX_GPIO_Init+0x144>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b43      	ldr	r3, [pc, #268]	@ (8001414 <MX_GPIO_Init+0x144>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a42      	ldr	r2, [pc, #264]	@ (8001414 <MX_GPIO_Init+0x144>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b40      	ldr	r3, [pc, #256]	@ (8001414 <MX_GPIO_Init+0x144>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b3c      	ldr	r3, [pc, #240]	@ (8001414 <MX_GPIO_Init+0x144>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a3b      	ldr	r2, [pc, #236]	@ (8001414 <MX_GPIO_Init+0x144>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b39      	ldr	r3, [pc, #228]	@ (8001414 <MX_GPIO_Init+0x144>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b35      	ldr	r3, [pc, #212]	@ (8001414 <MX_GPIO_Init+0x144>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a34      	ldr	r2, [pc, #208]	@ (8001414 <MX_GPIO_Init+0x144>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b32      	ldr	r3, [pc, #200]	@ (8001414 <MX_GPIO_Init+0x144>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800135c:	482e      	ldr	r0, [pc, #184]	@ (8001418 <MX_GPIO_Init+0x148>)
 800135e:	f001 fecb 	bl	80030f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2110      	movs	r1, #16
 8001366:	482d      	ldr	r0, [pc, #180]	@ (800141c <MX_GPIO_Init+0x14c>)
 8001368:	f001 fec6 	bl	80030f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	4829      	ldr	r0, [pc, #164]	@ (8001418 <MX_GPIO_Init+0x148>)
 8001372:	f001 fec1 	bl	80030f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	210f      	movs	r1, #15
 800137a:	4829      	ldr	r0, [pc, #164]	@ (8001420 <MX_GPIO_Init+0x150>)
 800137c:	f001 febc 	bl	80030f8 <HAL_GPIO_WritePin>

 /* Configure LCD_CS_Pin (PB12) */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	481f      	ldr	r0, [pc, #124]	@ (8001418 <MX_GPIO_Init+0x148>)
 800139a:	f001 fcf9 	bl	8002d90 <HAL_GPIO_Init>

  /* Configure LCD_DC_Pin (PC4) - ESTE É O PINO CRÍTICO */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4819      	ldr	r0, [pc, #100]	@ (800141c <MX_GPIO_Init+0x14c>)
 80013b6:	f001 fceb 	bl	8002d90 <HAL_GPIO_Init>

  /* Configure LCD_RST_Pin (PB0) */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80013ba:	2301      	movs	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4811      	ldr	r0, [pc, #68]	@ (8001418 <MX_GPIO_Init+0x148>)
 80013d2:	f001 fcdd 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin (Keypad) */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 80013d6:	230f      	movs	r3, #15
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <MX_GPIO_Init+0x150>)
 80013ee:	f001 fccf 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin (Keypad) */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80013f2:	23f0      	movs	r3, #240	@ 0xf0
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4806      	ldr	r0, [pc, #24]	@ (8001420 <MX_GPIO_Init+0x150>)
 8001406:	f001 fcc3 	bl	8002d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	@ 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00

08001424 <StartInputHalTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartInputHalTask(void const * argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char cCurrent;
  /* Infinite loop */
  for(;;) // O loop infinito de uma tarefa RTOS é "for(;;)"
  {
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 800142c:	f7ff fd94 	bl	8000f58 <KEYPAD_Scan>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
    if(cCurrent != '\0')
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <StartInputHalTask+0x1c>
    {
      keyPressed = cCurrent;
 800143a:	4a03      	ldr	r2, [pc, #12]	@ (8001448 <StartInputHalTask+0x24>)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	7013      	strb	r3, [r2, #0]
    }
    osDelay(50);
 8001440:	2032      	movs	r0, #50	@ 0x32
 8001442:	f003 fe5c 	bl	80050fe <osDelay>
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8001446:	e7f1      	b.n	800142c <StartInputHalTask+0x8>
 8001448:	20000420 	.word	0x20000420

0800144c <StartGameTask>:
  }
}

void StartGameTask(void const * argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  char cLocalKeyPressed;
  for(;;)
  {
    cLocalKeyPressed = NONE_KEY;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]
    
    osMutexWait(gameMutexHandle, osWaitForever);
 8001458:	4baf      	ldr	r3, [pc, #700]	@ (8001718 <StartGameTask+0x2cc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fe79 	bl	8005158 <osMutexWait>
    if (keyPressed != NONE_KEY) {
 8001466:	4bad      	ldr	r3, [pc, #692]	@ (800171c <StartGameTask+0x2d0>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <StartGameTask+0x30>
      cLocalKeyPressed = keyPressed;
 8001470:	4baa      	ldr	r3, [pc, #680]	@ (800171c <StartGameTask+0x2d0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	73fb      	strb	r3, [r7, #15]
      keyPressed = NONE_KEY; 
 8001476:	4ba9      	ldr	r3, [pc, #676]	@ (800171c <StartGameTask+0x2d0>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 800147c:	4ba6      	ldr	r3, [pc, #664]	@ (8001718 <StartGameTask+0x2cc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f003 feb7 	bl	80051f4 <osMutexRelease>
    
    if (cLocalKeyPressed != NONE_KEY)
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8273 	beq.w	8001974 <StartGameTask+0x528>
    {
      osMutexWait(gameMutexHandle, osWaitForever);
 800148e:	4ba2      	ldr	r3, [pc, #648]	@ (8001718 <StartGameTask+0x2cc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f04f 31ff 	mov.w	r1, #4294967295
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fe5e 	bl	8005158 <osMutexWait>
      switch(eCurrentState)
 800149c:	4ba0      	ldr	r3, [pc, #640]	@ (8001720 <StartGameTask+0x2d4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	f200 8255 	bhi.w	8001952 <StartGameTask+0x506>
 80014a8:	a201      	add	r2, pc, #4	@ (adr r2, 80014b0 <StartGameTask+0x64>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014c9 	.word	0x080014c9
 80014b4:	080014f1 	.word	0x080014f1
 80014b8:	080015c5 	.word	0x080015c5
 80014bc:	08001749 	.word	0x08001749
 80014c0:	080018c1 	.word	0x080018c1
 80014c4:	0800193f 	.word	0x0800193f
      {
        case eInitGame:
        {
          eUserPlayer.u8HeartPoints = 100;
 80014c8:	4b96      	ldr	r3, [pc, #600]	@ (8001724 <StartGameTask+0x2d8>)
 80014ca:	2264      	movs	r2, #100	@ 0x64
 80014cc:	701a      	strb	r2, [r3, #0]
          eCpuPlayer.u8HeartPoints = 100;
 80014ce:	4b96      	ldr	r3, [pc, #600]	@ (8001728 <StartGameTask+0x2dc>)
 80014d0:	2264      	movs	r2, #100	@ 0x64
 80014d2:	701a      	strb	r2, [r3, #0]
          if(cLocalKeyPressed == CONFIRM_KEY)
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80014d8:	f040 8242 	bne.w	8001960 <StartGameTask+0x514>
          {
            eCurrentState = eDificultSelect;
 80014dc:	4b90      	ldr	r3, [pc, #576]	@ (8001720 <StartGameTask+0x2d4>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
            selectedOption = 0;
 80014e2:	4b92      	ldr	r3, [pc, #584]	@ (800172c <StartGameTask+0x2e0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
            u8CleanScreen = TRUE;
 80014e8:	4b91      	ldr	r3, [pc, #580]	@ (8001730 <StartGameTask+0x2e4>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
            }
          break;
 80014ee:	e237      	b.n	8001960 <StartGameTask+0x514>
        }
        case eDificultSelect:
        {
          switch(cLocalKeyPressed)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	3b23      	subs	r3, #35	@ 0x23
 80014f4:	2b15      	cmp	r3, #21
 80014f6:	d863      	bhi.n	80015c0 <StartGameTask+0x174>
 80014f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <StartGameTask+0xb4>)
 80014fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fe:	bf00      	nop
 8001500:	08001595 	.word	0x08001595
 8001504:	080015c1 	.word	0x080015c1
 8001508:	080015c1 	.word	0x080015c1
 800150c:	080015c1 	.word	0x080015c1
 8001510:	080015c1 	.word	0x080015c1
 8001514:	080015c1 	.word	0x080015c1
 8001518:	080015c1 	.word	0x080015c1
 800151c:	080015a3 	.word	0x080015a3
 8001520:	080015c1 	.word	0x080015c1
 8001524:	080015c1 	.word	0x080015c1
 8001528:	080015c1 	.word	0x080015c1
 800152c:	080015c1 	.word	0x080015c1
 8001530:	080015c1 	.word	0x080015c1
 8001534:	080015c1 	.word	0x080015c1
 8001538:	080015c1 	.word	0x080015c1
 800153c:	08001577 	.word	0x08001577
 8001540:	080015c1 	.word	0x080015c1
 8001544:	080015c1 	.word	0x080015c1
 8001548:	080015c1 	.word	0x080015c1
 800154c:	080015c1 	.word	0x080015c1
 8001550:	080015c1 	.word	0x080015c1
 8001554:	08001559 	.word	0x08001559
          {
            case UP_KEY:
            {
              selectedOption = (selectedOption < MENU_OPTIONS_DIFFICULTY - 1) ? selectedOption + 1 : 0;
 8001558:	4b74      	ldr	r3, [pc, #464]	@ (800172c <StartGameTask+0x2e0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	dc03      	bgt.n	8001568 <StartGameTask+0x11c>
 8001560:	4b72      	ldr	r3, [pc, #456]	@ (800172c <StartGameTask+0x2e0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	e000      	b.n	800156a <StartGameTask+0x11e>
 8001568:	2300      	movs	r3, #0
 800156a:	4a70      	ldr	r2, [pc, #448]	@ (800172c <StartGameTask+0x2e0>)
 800156c:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800156e:	4b70      	ldr	r3, [pc, #448]	@ (8001730 <StartGameTask+0x2e4>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
              break;
 8001574:	e025      	b.n	80015c2 <StartGameTask+0x176>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_DIFFICULTY - 1;
 8001576:	4b6d      	ldr	r3, [pc, #436]	@ (800172c <StartGameTask+0x2e0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	dd03      	ble.n	8001586 <StartGameTask+0x13a>
 800157e:	4b6b      	ldr	r3, [pc, #428]	@ (800172c <StartGameTask+0x2e0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3b01      	subs	r3, #1
 8001584:	e000      	b.n	8001588 <StartGameTask+0x13c>
 8001586:	2302      	movs	r3, #2
 8001588:	4a68      	ldr	r2, [pc, #416]	@ (800172c <StartGameTask+0x2e0>)
 800158a:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 800158c:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <StartGameTask+0x2e4>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
              break;
 8001592:	e016      	b.n	80015c2 <StartGameTask+0x176>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8001594:	4b66      	ldr	r3, [pc, #408]	@ (8001730 <StartGameTask+0x2e4>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
              eCurrentState = eInitGame;
 800159a:	4b61      	ldr	r3, [pc, #388]	@ (8001720 <StartGameTask+0x2d4>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
              break;
 80015a0:	e00f      	b.n	80015c2 <StartGameTask+0x176>
            }
            case CONFIRM_KEY:
            {
              selectedDifficulty = (EDificult)selectedOption;
 80015a2:	4b62      	ldr	r3, [pc, #392]	@ (800172c <StartGameTask+0x2e0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b62      	ldr	r3, [pc, #392]	@ (8001734 <StartGameTask+0x2e8>)
 80015aa:	701a      	strb	r2, [r3, #0]
              eCurrentState = ePersonaSelect;
 80015ac:	4b5c      	ldr	r3, [pc, #368]	@ (8001720 <StartGameTask+0x2d4>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	701a      	strb	r2, [r3, #0]
              selectedOption = FALSE; // Reseta para o próximo menu
 80015b2:	4b5e      	ldr	r3, [pc, #376]	@ (800172c <StartGameTask+0x2e0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80015b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <StartGameTask+0x2e4>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
              break;
 80015be:	e000      	b.n	80015c2 <StartGameTask+0x176>
            }
            default:
            {
              break;
 80015c0:	bf00      	nop
            }
          }
          break;
 80015c2:	e1d2      	b.n	800196a <StartGameTask+0x51e>
        }
        case ePersonaSelect:
        {
          switch(cLocalKeyPressed)
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	3b23      	subs	r3, #35	@ 0x23
 80015c8:	2b15      	cmp	r3, #21
 80015ca:	f200 80a2 	bhi.w	8001712 <StartGameTask+0x2c6>
 80015ce:	a201      	add	r2, pc, #4	@ (adr r2, 80015d4 <StartGameTask+0x188>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	08001669 	.word	0x08001669
 80015d8:	08001713 	.word	0x08001713
 80015dc:	08001713 	.word	0x08001713
 80015e0:	08001713 	.word	0x08001713
 80015e4:	08001713 	.word	0x08001713
 80015e8:	08001713 	.word	0x08001713
 80015ec:	08001713 	.word	0x08001713
 80015f0:	08001677 	.word	0x08001677
 80015f4:	08001713 	.word	0x08001713
 80015f8:	08001713 	.word	0x08001713
 80015fc:	08001713 	.word	0x08001713
 8001600:	08001713 	.word	0x08001713
 8001604:	08001713 	.word	0x08001713
 8001608:	08001713 	.word	0x08001713
 800160c:	08001713 	.word	0x08001713
 8001610:	0800164b 	.word	0x0800164b
 8001614:	08001713 	.word	0x08001713
 8001618:	08001713 	.word	0x08001713
 800161c:	08001713 	.word	0x08001713
 8001620:	08001713 	.word	0x08001713
 8001624:	08001713 	.word	0x08001713
 8001628:	0800162d 	.word	0x0800162d
          {
            case UP_KEY:
            {                  
              selectedOption = (selectedOption < MENU_OPTIONS_PERSONA - 1) ? selectedOption + 1 : 0;
 800162c:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <StartGameTask+0x2e0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b03      	cmp	r3, #3
 8001632:	dc03      	bgt.n	800163c <StartGameTask+0x1f0>
 8001634:	4b3d      	ldr	r3, [pc, #244]	@ (800172c <StartGameTask+0x2e0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	e000      	b.n	800163e <StartGameTask+0x1f2>
 800163c:	2300      	movs	r3, #0
 800163e:	4a3b      	ldr	r2, [pc, #236]	@ (800172c <StartGameTask+0x2e0>)
 8001640:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8001642:	4b3b      	ldr	r3, [pc, #236]	@ (8001730 <StartGameTask+0x2e4>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
              break;
 8001648:	e064      	b.n	8001714 <StartGameTask+0x2c8>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_PERSONA - 1;
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <StartGameTask+0x2e0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	dd03      	ble.n	800165a <StartGameTask+0x20e>
 8001652:	4b36      	ldr	r3, [pc, #216]	@ (800172c <StartGameTask+0x2e0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3b01      	subs	r3, #1
 8001658:	e000      	b.n	800165c <StartGameTask+0x210>
 800165a:	2304      	movs	r3, #4
 800165c:	4a33      	ldr	r2, [pc, #204]	@ (800172c <StartGameTask+0x2e0>)
 800165e:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8001660:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <StartGameTask+0x2e4>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
              break;
 8001666:	e055      	b.n	8001714 <StartGameTask+0x2c8>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8001668:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <StartGameTask+0x2e4>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
              eCurrentState = eDificultSelect;
 800166e:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <StartGameTask+0x2d4>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
              break;
 8001674:	e04e      	b.n	8001714 <StartGameTask+0x2c8>
            }
            case CONFIRM_KEY:
            {
              eUserPlayer.ePersonaElemental = (EElemental)selectedOption;
 8001676:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <StartGameTask+0x2e0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <StartGameTask+0x2d8>)
 800167e:	705a      	strb	r2, [r3, #1]
              eCurrentState = eBattleInit;
 8001680:	4b27      	ldr	r3, [pc, #156]	@ (8001720 <StartGameTask+0x2d4>)
 8001682:	2203      	movs	r2, #3
 8001684:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001686:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <StartGameTask+0x2e4>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0;     // Zera o contador de ataques
 800168c:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <StartGameTask+0x2ec>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;   // Inicia com a primeira opção (Fogo) pré-selecionada
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <StartGameTask+0x2e0>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 8001698:	2204      	movs	r2, #4
 800169a:	2100      	movs	r1, #0
 800169c:	4827      	ldr	r0, [pc, #156]	@ (800173c <StartGameTask+0x2f0>)
 800169e:	f006 fa3e 	bl	8007b1e <memset>
              memset((void*)eCpuPlayer.eAttackSequential, 0, sizeof(eCpuPlayer.eAttackSequential));
 80016a2:	2204      	movs	r2, #4
 80016a4:	2100      	movs	r1, #0
 80016a6:	4826      	ldr	r0, [pc, #152]	@ (8001740 <StartGameTask+0x2f4>)
 80016a8:	f006 fa39 	bl	8007b1e <memset>

              srand(HAL_GetTick()); 
 80016ac:	f001 f808 	bl	80026c0 <HAL_GetTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f006 f8a0 	bl	80077f8 <srand>
              eCpuPlayer.ePersonaElemental = (rand() % 6);
 80016b8:	f006 f8cc 	bl	8007854 <rand>
 80016bc:	4602      	mov	r2, r0
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <StartGameTask+0x2f8>)
 80016c0:	fb83 3102 	smull	r3, r1, r3, r2
 80016c4:	17d3      	asrs	r3, r2, #31
 80016c6:	1ac9      	subs	r1, r1, r3
 80016c8:	460b      	mov	r3, r1
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	440b      	add	r3, r1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	1ad1      	subs	r1, r2, r3
 80016d2:	b2ca      	uxtb	r2, r1
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <StartGameTask+0x2dc>)
 80016d6:	705a      	strb	r2, [r3, #1]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80016d8:	2300      	movs	r3, #0
 80016da:	73bb      	strb	r3, [r7, #14]
 80016dc:	e015      	b.n	800170a <StartGameTask+0x2be>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6); 
 80016de:	f006 f8b9 	bl	8007854 <rand>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <StartGameTask+0x2f8>)
 80016e6:	fb83 3102 	smull	r3, r1, r3, r2
 80016ea:	17d3      	asrs	r3, r2, #31
 80016ec:	1ac9      	subs	r1, r1, r3
 80016ee:	460b      	mov	r3, r1
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	440b      	add	r3, r1
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	1ad1      	subs	r1, r2, r3
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	b2c9      	uxtb	r1, r1
 80016fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <StartGameTask+0x2dc>)
 80016fe:	4413      	add	r3, r2
 8001700:	460a      	mov	r2, r1
 8001702:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	3301      	adds	r3, #1
 8001708:	73bb      	strb	r3, [r7, #14]
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d9e6      	bls.n	80016de <StartGameTask+0x292>
              }
              break;
 8001710:	e000      	b.n	8001714 <StartGameTask+0x2c8>
            }
            default:
            {
              break;
 8001712:	bf00      	nop
            }
          }
          break;
 8001714:	e129      	b.n	800196a <StartGameTask+0x51e>
 8001716:	bf00      	nop
 8001718:	2000041c 	.word	0x2000041c
 800171c:	20000420 	.word	0x20000420
 8001720:	20000421 	.word	0x20000421
 8001724:	2000042c 	.word	0x2000042c
 8001728:	20000434 	.word	0x20000434
 800172c:	20000424 	.word	0x20000424
 8001730:	20000050 	.word	0x20000050
 8001734:	20000428 	.word	0x20000428
 8001738:	2000043a 	.word	0x2000043a
 800173c:	2000042e 	.word	0x2000042e
 8001740:	20000436 	.word	0x20000436
 8001744:	2aaaaaab 	.word	0x2aaaaaab
        }
        case eBattleInit:
        {
          switch (cLocalKeyPressed)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	3b23      	subs	r3, #35	@ 0x23
 800174c:	2b21      	cmp	r3, #33	@ 0x21
 800174e:	f200 80b5 	bhi.w	80018bc <StartGameTask+0x470>
 8001752:	a201      	add	r2, pc, #4	@ (adr r2, 8001758 <StartGameTask+0x30c>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	080018af 	.word	0x080018af
 800175c:	080018bd 	.word	0x080018bd
 8001760:	080018bd 	.word	0x080018bd
 8001764:	080018bd 	.word	0x080018bd
 8001768:	080018bd 	.word	0x080018bd
 800176c:	080018bd 	.word	0x080018bd
 8001770:	080018bd 	.word	0x080018bd
 8001774:	08001819 	.word	0x08001819
 8001778:	080018bd 	.word	0x080018bd
 800177c:	080018bd 	.word	0x080018bd
 8001780:	080018bd 	.word	0x080018bd
 8001784:	080018bd 	.word	0x080018bd
 8001788:	080018bd 	.word	0x080018bd
 800178c:	080018bd 	.word	0x080018bd
 8001790:	080018bd 	.word	0x080018bd
 8001794:	080018bd 	.word	0x080018bd
 8001798:	080018bd 	.word	0x080018bd
 800179c:	080018bd 	.word	0x080018bd
 80017a0:	080018bd 	.word	0x080018bd
 80017a4:	080018bd 	.word	0x080018bd
 80017a8:	080018bd 	.word	0x080018bd
 80017ac:	080018bd 	.word	0x080018bd
 80017b0:	080018bd 	.word	0x080018bd
 80017b4:	080018bd 	.word	0x080018bd
 80017b8:	080018bd 	.word	0x080018bd
 80017bc:	080018bd 	.word	0x080018bd
 80017c0:	080018bd 	.word	0x080018bd
 80017c4:	080018bd 	.word	0x080018bd
 80017c8:	080018bd 	.word	0x080018bd
 80017cc:	080018bd 	.word	0x080018bd
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	080017ef 	.word	0x080017ef
 80017d8:	080017fd 	.word	0x080017fd
 80017dc:	0800180b 	.word	0x0800180b
          {
            case FIRE_KEY:
            {
              selectedOption = 0;
 80017e0:	4b66      	ldr	r3, [pc, #408]	@ (800197c <StartGameTask+0x530>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80017e6:	4b66      	ldr	r3, [pc, #408]	@ (8001980 <StartGameTask+0x534>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
              break;
 80017ec:	e067      	b.n	80018be <StartGameTask+0x472>
            }
            case WATER_KEY:
            {
              selectedOption = 1;
 80017ee:	4b63      	ldr	r3, [pc, #396]	@ (800197c <StartGameTask+0x530>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80017f4:	4b62      	ldr	r3, [pc, #392]	@ (8001980 <StartGameTask+0x534>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
              break;
 80017fa:	e060      	b.n	80018be <StartGameTask+0x472>
            }
            case AIR_KEY: 
            {
              selectedOption = 2;
 80017fc:	4b5f      	ldr	r3, [pc, #380]	@ (800197c <StartGameTask+0x530>)
 80017fe:	2202      	movs	r2, #2
 8001800:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001802:	4b5f      	ldr	r3, [pc, #380]	@ (8001980 <StartGameTask+0x534>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
              break;
 8001808:	e059      	b.n	80018be <StartGameTask+0x472>
            }
            case EARTH_KEY: 
            {
              selectedOption = 3;
 800180a:	4b5c      	ldr	r3, [pc, #368]	@ (800197c <StartGameTask+0x530>)
 800180c:	2203      	movs	r2, #3
 800180e:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8001810:	4b5b      	ldr	r3, [pc, #364]	@ (8001980 <StartGameTask+0x534>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
              break;
 8001816:	e052      	b.n	80018be <StartGameTask+0x472>
            }
            case CONFIRM_KEY:
            {
              switch(selectedOption)
 8001818:	4b58      	ldr	r3, [pc, #352]	@ (800197c <StartGameTask+0x530>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d82f      	bhi.n	8001880 <StartGameTask+0x434>
 8001820:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <StartGameTask+0x3dc>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001839 	.word	0x08001839
 800182c:	0800184b 	.word	0x0800184b
 8001830:	0800185d 	.word	0x0800185d
 8001834:	0800186f 	.word	0x0800186f
              {
                  case 0: eUserPlayer.eAttackSequential[u8ContAttack] = eRed;    break;
 8001838:	4b52      	ldr	r3, [pc, #328]	@ (8001984 <StartGameTask+0x538>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	4b51      	ldr	r3, [pc, #324]	@ (8001988 <StartGameTask+0x53c>)
 8001842:	4413      	add	r3, r2
 8001844:	2200      	movs	r2, #0
 8001846:	709a      	strb	r2, [r3, #2]
 8001848:	e01a      	b.n	8001880 <StartGameTask+0x434>
                  case 1: eUserPlayer.eAttackSequential[u8ContAttack] = eBlue;   break;
 800184a:	4b4e      	ldr	r3, [pc, #312]	@ (8001984 <StartGameTask+0x538>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <StartGameTask+0x53c>)
 8001854:	4413      	add	r3, r2
 8001856:	2201      	movs	r2, #1
 8001858:	709a      	strb	r2, [r3, #2]
 800185a:	e011      	b.n	8001880 <StartGameTask+0x434>
                  case 2: eUserPlayer.eAttackSequential[u8ContAttack] = eGreen;  break;
 800185c:	4b49      	ldr	r3, [pc, #292]	@ (8001984 <StartGameTask+0x538>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	4b48      	ldr	r3, [pc, #288]	@ (8001988 <StartGameTask+0x53c>)
 8001866:	4413      	add	r3, r2
 8001868:	2202      	movs	r2, #2
 800186a:	709a      	strb	r2, [r3, #2]
 800186c:	e008      	b.n	8001880 <StartGameTask+0x434>
                  case 3: eUserPlayer.eAttackSequential[u8ContAttack] = eYellow; break;
 800186e:	4b45      	ldr	r3, [pc, #276]	@ (8001984 <StartGameTask+0x538>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	4b44      	ldr	r3, [pc, #272]	@ (8001988 <StartGameTask+0x53c>)
 8001878:	4413      	add	r3, r2
 800187a:	2203      	movs	r2, #3
 800187c:	709a      	strb	r2, [r3, #2]
 800187e:	bf00      	nop
              }
              
              u8ContAttack++; 
 8001880:	4b40      	ldr	r3, [pc, #256]	@ (8001984 <StartGameTask+0x538>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	3301      	adds	r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b3e      	ldr	r3, [pc, #248]	@ (8001984 <StartGameTask+0x538>)
 800188c:	701a      	strb	r2, [r3, #0]
              
              if (u8ContAttack >= ATTACKS_NUMBERS)
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <StartGameTask+0x538>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d906      	bls.n	80018a6 <StartGameTask+0x45a>
              {
                vInitBattle(&eUserPlayer, &eCpuPlayer);
 8001898:	493c      	ldr	r1, [pc, #240]	@ (800198c <StartGameTask+0x540>)
 800189a:	483b      	ldr	r0, [pc, #236]	@ (8001988 <StartGameTask+0x53c>)
 800189c:	f7fe fe98 	bl	80005d0 <vInitBattle>
                eCurrentState = ePlayerTurn;
 80018a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <StartGameTask+0x544>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	701a      	strb	r2, [r3, #0]
              }
              
              u8CleanScreen = TRUE;
 80018a6:	4b36      	ldr	r3, [pc, #216]	@ (8001980 <StartGameTask+0x534>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
              break;
 80018ac:	e007      	b.n	80018be <StartGameTask+0x472>
            }
            case BACK_KEY:
            {
              eCurrentState = ePersonaSelect;
 80018ae:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <StartGameTask+0x544>)
 80018b0:	2202      	movs	r2, #2
 80018b2:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80018b4:	4b32      	ldr	r3, [pc, #200]	@ (8001980 <StartGameTask+0x534>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
              break;
 80018ba:	e000      	b.n	80018be <StartGameTask+0x472>
            }
            default:
            {
              break;
 80018bc:	bf00      	nop
            }
          }
          break;
 80018be:	e054      	b.n	800196a <StartGameTask+0x51e>
        }
        case ePlayerTurn:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80018c4:	d14e      	bne.n	8001964 <StartGameTask+0x518>
          {            
            if (eUserPlayer.u8HeartPoints == 0 || eCpuPlayer.u8HeartPoints == 0)
 80018c6:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <StartGameTask+0x53c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <StartGameTask+0x48e>
 80018d0:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <StartGameTask+0x540>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <StartGameTask+0x496>
            {
              eCurrentState = eEndGame; 
 80018da:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <StartGameTask+0x544>)
 80018dc:	2205      	movs	r2, #5
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e029      	b.n	8001936 <StartGameTask+0x4ea>
            }
            else
            {
              // Ninguém perdeu, volta para selecionar novos ataques
              eCurrentState = eBattleInit;
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <StartGameTask+0x544>)
 80018e4:	2203      	movs	r2, #3
 80018e6:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0; // Prepara para o novo round
 80018e8:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <StartGameTask+0x538>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;
 80018ee:	4b23      	ldr	r3, [pc, #140]	@ (800197c <StartGameTask+0x530>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 80018f4:	2204      	movs	r2, #4
 80018f6:	2100      	movs	r1, #0
 80018f8:	4826      	ldr	r0, [pc, #152]	@ (8001994 <StartGameTask+0x548>)
 80018fa:	f006 f910 	bl	8007b1e <memset>
              
              // Gera novos ataques para a CPU para o próximo round
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	737b      	strb	r3, [r7, #13]
 8001902:	e015      	b.n	8001930 <StartGameTask+0x4e4>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6);
 8001904:	f005 ffa6 	bl	8007854 <rand>
 8001908:	4602      	mov	r2, r0
 800190a:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <StartGameTask+0x54c>)
 800190c:	fb83 3102 	smull	r3, r1, r3, r2
 8001910:	17d3      	asrs	r3, r2, #31
 8001912:	1ac9      	subs	r1, r1, r3
 8001914:	460b      	mov	r3, r1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	440b      	add	r3, r1
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	1ad1      	subs	r1, r2, r3
 800191e:	7b7b      	ldrb	r3, [r7, #13]
 8001920:	b2c9      	uxtb	r1, r1
 8001922:	4a1a      	ldr	r2, [pc, #104]	@ (800198c <StartGameTask+0x540>)
 8001924:	4413      	add	r3, r2
 8001926:	460a      	mov	r2, r1
 8001928:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 800192a:	7b7b      	ldrb	r3, [r7, #13]
 800192c:	3301      	adds	r3, #1
 800192e:	737b      	strb	r3, [r7, #13]
 8001930:	7b7b      	ldrb	r3, [r7, #13]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d9e6      	bls.n	8001904 <StartGameTask+0x4b8>
              }
            }
            u8CleanScreen = TRUE;
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <StartGameTask+0x534>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800193c:	e012      	b.n	8001964 <StartGameTask+0x518>
        }
        case eEndGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b2a      	cmp	r3, #42	@ 0x2a
 8001942:	d111      	bne.n	8001968 <StartGameTask+0x51c>
          {
            eCurrentState = eInitGame;
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <StartGameTask+0x544>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 800194a:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <StartGameTask+0x534>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001950:	e00a      	b.n	8001968 <StartGameTask+0x51c>
        }
        default:
        {
          // Estado desconhecido, volta para o início por segurança
          eCurrentState = eInitGame;
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <StartGameTask+0x544>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
          u8CleanScreen = TRUE;
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <StartGameTask+0x534>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
          break;
 800195e:	e004      	b.n	800196a <StartGameTask+0x51e>
          break;
 8001960:	bf00      	nop
 8001962:	e002      	b.n	800196a <StartGameTask+0x51e>
          break;
 8001964:	bf00      	nop
 8001966:	e000      	b.n	800196a <StartGameTask+0x51e>
          break;
 8001968:	bf00      	nop
        }
      }
      osMutexRelease(gameMutexHandle);
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <StartGameTask+0x550>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fc40 	bl	80051f4 <osMutexRelease>
    }
    osDelay(50);
 8001974:	2032      	movs	r0, #50	@ 0x32
 8001976:	f003 fbc2 	bl	80050fe <osDelay>
    cLocalKeyPressed = NONE_KEY;
 800197a:	e56b      	b.n	8001454 <StartGameTask+0x8>
 800197c:	20000424 	.word	0x20000424
 8001980:	20000050 	.word	0x20000050
 8001984:	2000043a 	.word	0x2000043a
 8001988:	2000042c 	.word	0x2000042c
 800198c:	20000434 	.word	0x20000434
 8001990:	20000421 	.word	0x20000421
 8001994:	2000042e 	.word	0x2000042e
 8001998:	2aaaaaab 	.word	0x2aaaaaab
 800199c:	2000041c 	.word	0x2000041c

080019a0 <StartDisplayTask>:
  }
}

void StartDisplayTask(void const * argument)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	@ 0x50
 80019a4:	af04      	add	r7, sp, #16
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  char buffer[30];
  uint8_t u8RedrawScreen = FALSE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  for(;;)
  {
    osMutexWait(gameMutexHandle, osWaitForever);
 80019ae:	4bb1      	ldr	r3, [pc, #708]	@ (8001c74 <StartDisplayTask+0x2d4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f04f 31ff 	mov.w	r1, #4294967295
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 fbce 	bl	8005158 <osMutexWait>
    if (TRUE == u8CleanScreen) {
 80019bc:	4bae      	ldr	r3, [pc, #696]	@ (8001c78 <StartDisplayTask+0x2d8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d105      	bne.n	80019d2 <StartDisplayTask+0x32>
        u8RedrawScreen = TRUE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        u8CleanScreen = FALSE;
 80019cc:	4baa      	ldr	r3, [pc, #680]	@ (8001c78 <StartDisplayTask+0x2d8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 80019d2:	4ba8      	ldr	r3, [pc, #672]	@ (8001c74 <StartDisplayTask+0x2d4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fc0c 	bl	80051f4 <osMutexRelease>

    if(TRUE == u8RedrawScreen)
 80019dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	f040 83a0 	bne.w	8002126 <StartDisplayTask+0x786>
    {
      ClearScreen();
 80019e6:	f7fe ff11 	bl	800080c <ClearScreen>

      switch(eCurrentState)
 80019ea:	4ba4      	ldr	r3, [pc, #656]	@ (8001c7c <StartDisplayTask+0x2dc>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	f200 8386 	bhi.w	8002102 <StartDisplayTask+0x762>
 80019f6:	a201      	add	r2, pc, #4	@ (adr r2, 80019fc <StartDisplayTask+0x5c>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a15 	.word	0x08001a15
 8001a00:	08001a4f 	.word	0x08001a4f
 8001a04:	08001a5f 	.word	0x08001a5f
 8001a08:	08001a6f 	.word	0x08001a6f
 8001a0c:	08001def 	.word	0x08001def
 8001a10:	08002039 	.word	0x08002039
      {
          case eInitGame:
          {
            ILI9341_WriteString(40, 120, "ElementalCube!", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001a14:	4b9a      	ldr	r3, [pc, #616]	@ (8001c80 <StartDisplayTask+0x2e0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	9202      	str	r2, [sp, #8]
 8001a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a1e:	9201      	str	r2, [sp, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	9200      	str	r2, [sp, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a97      	ldr	r2, [pc, #604]	@ (8001c84 <StartDisplayTask+0x2e4>)
 8001a28:	2178      	movs	r1, #120	@ 0x78
 8001a2a:	2028      	movs	r0, #40	@ 0x28
 8001a2c:	f7ff f9c8 	bl	8000dc0 <ILI9341_WriteString>
            ILI9341_WriteString(60, 160, "Pressione *", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001a30:	4b93      	ldr	r3, [pc, #588]	@ (8001c80 <StartDisplayTask+0x2e0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	9202      	str	r2, [sp, #8]
 8001a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a3a:	9201      	str	r2, [sp, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	9200      	str	r2, [sp, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a91      	ldr	r2, [pc, #580]	@ (8001c88 <StartDisplayTask+0x2e8>)
 8001a44:	21a0      	movs	r1, #160	@ 0xa0
 8001a46:	203c      	movs	r0, #60	@ 0x3c
 8001a48:	f7ff f9ba 	bl	8000dc0 <ILI9341_WriteString>
            break;
 8001a4c:	e368      	b.n	8002120 <StartDisplayTask+0x780>
          }
          case eDificultSelect:
          {
            DrawMenu("Selecione Dificuldade", difficultyOptions, MENU_OPTIONS_DIFFICULTY, selectedOption);
 8001a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8001c8c <StartDisplayTask+0x2ec>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2203      	movs	r2, #3
 8001a54:	498e      	ldr	r1, [pc, #568]	@ (8001c90 <StartDisplayTask+0x2f0>)
 8001a56:	488f      	ldr	r0, [pc, #572]	@ (8001c94 <StartDisplayTask+0x2f4>)
 8001a58:	f7fe fee8 	bl	800082c <DrawMenu>
            break;
 8001a5c:	e360      	b.n	8002120 <StartDisplayTask+0x780>
          }
          case ePersonaSelect:
          {
            DrawMenu("Selecione Personagem", personaOptions, MENU_OPTIONS_PERSONA, selectedOption);
 8001a5e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c8c <StartDisplayTask+0x2ec>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2205      	movs	r2, #5
 8001a64:	498c      	ldr	r1, [pc, #560]	@ (8001c98 <StartDisplayTask+0x2f8>)
 8001a66:	488d      	ldr	r0, [pc, #564]	@ (8001c9c <StartDisplayTask+0x2fc>)
 8001a68:	f7fe fee0 	bl	800082c <DrawMenu>
            break;
 8001a6c:	e358      	b.n	8002120 <StartDisplayTask+0x780>
          }
          case eBattleInit:
          {
            sprintf(buffer, "Selecione o %d ataque", (u8ContAttack + 1));
 8001a6e:	4b8c      	ldr	r3, [pc, #560]	@ (8001ca0 <StartDisplayTask+0x300>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	498a      	ldr	r1, [pc, #552]	@ (8001ca4 <StartDisplayTask+0x304>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f005 ffe9 	bl	8007a54 <siprintf>
            ILI9341_WriteString(10, 15, buffer, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001a82:	4b7f      	ldr	r3, [pc, #508]	@ (8001c80 <StartDisplayTask+0x2e0>)
 8001a84:	f107 0108 	add.w	r1, r7, #8
 8001a88:	2200      	movs	r2, #0
 8001a8a:	9202      	str	r2, [sp, #8]
 8001a8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a90:	9201      	str	r2, [sp, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	9200      	str	r2, [sp, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	460a      	mov	r2, r1
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	f7ff f98f 	bl	8000dc0 <ILI9341_WriteString>

            uint16_t colorFogo  = (selectedOption == 0) ? ILI9341_YELLOW : ILI9341_WHITE;
 8001aa2:	4b7a      	ldr	r3, [pc, #488]	@ (8001c8c <StartDisplayTask+0x2ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <StartDisplayTask+0x110>
 8001aaa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001aae:	e001      	b.n	8001ab4 <StartDisplayTask+0x114>
 8001ab0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ab4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            uint16_t colorAgua  = (selectedOption == 1) ? ILI9341_YELLOW : ILI9341_WHITE;
 8001ab6:	4b75      	ldr	r3, [pc, #468]	@ (8001c8c <StartDisplayTask+0x2ec>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d102      	bne.n	8001ac4 <StartDisplayTask+0x124>
 8001abe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ac2:	e001      	b.n	8001ac8 <StartDisplayTask+0x128>
 8001ac4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ac8:	857b      	strh	r3, [r7, #42]	@ 0x2a
            uint16_t colorAr    = (selectedOption == 2) ? ILI9341_YELLOW : ILI9341_WHITE;
 8001aca:	4b70      	ldr	r3, [pc, #448]	@ (8001c8c <StartDisplayTask+0x2ec>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d102      	bne.n	8001ad8 <StartDisplayTask+0x138>
 8001ad2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ad6:	e001      	b.n	8001adc <StartDisplayTask+0x13c>
 8001ad8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001adc:	853b      	strh	r3, [r7, #40]	@ 0x28
            uint16_t colorTerra = (selectedOption == 3) ? ILI9341_YELLOW : ILI9341_WHITE;
 8001ade:	4b6b      	ldr	r3, [pc, #428]	@ (8001c8c <StartDisplayTask+0x2ec>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d102      	bne.n	8001aec <StartDisplayTask+0x14c>
 8001ae6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001aea:	e001      	b.n	8001af0 <StartDisplayTask+0x150>
 8001aec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001af0:	84fb      	strh	r3, [r7, #38]	@ 0x26

            ILI9341_FillRectangle(10, 50, 25, 25, ILI9341_RED);
 8001af2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2319      	movs	r3, #25
 8001afa:	2219      	movs	r2, #25
 8001afc:	2132      	movs	r1, #50	@ 0x32
 8001afe:	200a      	movs	r0, #10
 8001b00:	f7ff f9aa 	bl	8000e58 <ILI9341_FillRectangle>
            ILI9341_WriteString(45, 55, "A - Fogo", Font_7x10, colorFogo, ILI9341_BLACK);
 8001b04:	4b68      	ldr	r3, [pc, #416]	@ (8001ca8 <StartDisplayTask+0x308>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	9202      	str	r2, [sp, #8]
 8001b0a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001b0c:	9201      	str	r2, [sp, #4]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	9200      	str	r2, [sp, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a65      	ldr	r2, [pc, #404]	@ (8001cac <StartDisplayTask+0x30c>)
 8001b16:	2137      	movs	r1, #55	@ 0x37
 8001b18:	202d      	movs	r0, #45	@ 0x2d
 8001b1a:	f7ff f951 	bl	8000dc0 <ILI9341_WriteString>
            ILI9341_FillRectangle(10, 85, 25, 25, ILI9341_BLUE);
 8001b1e:	231f      	movs	r3, #31
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2319      	movs	r3, #25
 8001b24:	2219      	movs	r2, #25
 8001b26:	2155      	movs	r1, #85	@ 0x55
 8001b28:	200a      	movs	r0, #10
 8001b2a:	f7ff f995 	bl	8000e58 <ILI9341_FillRectangle>
            ILI9341_WriteString(45, 90, "B - Agua", Font_7x10, colorAgua, ILI9341_BLACK);
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca8 <StartDisplayTask+0x308>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	9202      	str	r2, [sp, #8]
 8001b34:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001b36:	9201      	str	r2, [sp, #4]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	9200      	str	r2, [sp, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001cb0 <StartDisplayTask+0x310>)
 8001b40:	215a      	movs	r1, #90	@ 0x5a
 8001b42:	202d      	movs	r0, #45	@ 0x2d
 8001b44:	f7ff f93c 	bl	8000dc0 <ILI9341_WriteString>
            ILI9341_FillRectangle(10, 120, 25, 25, ILI9341_CYAN);
 8001b48:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2319      	movs	r3, #25
 8001b50:	2219      	movs	r2, #25
 8001b52:	2178      	movs	r1, #120	@ 0x78
 8001b54:	200a      	movs	r0, #10
 8001b56:	f7ff f97f 	bl	8000e58 <ILI9341_FillRectangle>
            ILI9341_WriteString(45, 125, "C - Ar", Font_7x10, colorAr, ILI9341_BLACK);
 8001b5a:	4b53      	ldr	r3, [pc, #332]	@ (8001ca8 <StartDisplayTask+0x308>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	9202      	str	r2, [sp, #8]
 8001b60:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001b62:	9201      	str	r2, [sp, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	9200      	str	r2, [sp, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a52      	ldr	r2, [pc, #328]	@ (8001cb4 <StartDisplayTask+0x314>)
 8001b6c:	217d      	movs	r1, #125	@ 0x7d
 8001b6e:	202d      	movs	r0, #45	@ 0x2d
 8001b70:	f7ff f926 	bl	8000dc0 <ILI9341_WriteString>
            ILI9341_FillRectangle(10, 155, 25, 25, ILI9341_BROWN);
 8001b74:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2319      	movs	r3, #25
 8001b7c:	2219      	movs	r2, #25
 8001b7e:	219b      	movs	r1, #155	@ 0x9b
 8001b80:	200a      	movs	r0, #10
 8001b82:	f7ff f969 	bl	8000e58 <ILI9341_FillRectangle>
            ILI9341_WriteString(45, 160, "D - Terra", Font_7x10, colorTerra, ILI9341_BLACK);
 8001b86:	4b48      	ldr	r3, [pc, #288]	@ (8001ca8 <StartDisplayTask+0x308>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b8e:	9201      	str	r2, [sp, #4]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	9200      	str	r2, [sp, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a48      	ldr	r2, [pc, #288]	@ (8001cb8 <StartDisplayTask+0x318>)
 8001b98:	21a0      	movs	r1, #160	@ 0xa0
 8001b9a:	202d      	movs	r0, #45	@ 0x2d
 8001b9c:	f7ff f910 	bl	8000dc0 <ILI9341_WriteString>
            ILI9341_WriteString(10, 200, "Player:", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8001ba0:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <StartDisplayTask+0x308>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	9202      	str	r2, [sp, #8]
 8001ba6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001baa:	9201      	str	r2, [sp, #4]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	9200      	str	r2, [sp, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a42      	ldr	r2, [pc, #264]	@ (8001cbc <StartDisplayTask+0x31c>)
 8001bb4:	21c8      	movs	r1, #200	@ 0xc8
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f7ff f902 	bl	8000dc0 <ILI9341_WriteString>
            ILI9341_WriteString(10, 250, "CPU:", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8001bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca8 <StartDisplayTask+0x308>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	9202      	str	r2, [sp, #8]
 8001bc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc6:	9201      	str	r2, [sp, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	9200      	str	r2, [sp, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc0 <StartDisplayTask+0x320>)
 8001bd0:	21fa      	movs	r1, #250	@ 0xfa
 8001bd2:	200a      	movs	r0, #10
 8001bd4:	f7ff f8f4 	bl	8000dc0 <ILI9341_WriteString>

            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001bde:	e0ad      	b.n	8001d3c <StartDisplayTask+0x39c>
            {
              uint8_t showAttack = FALSE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
              if (selectedDifficulty == eDificultEasy) { showAttack = TRUE; }
 8001be6:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <StartDisplayTask+0x324>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <StartDisplayTask+0x258>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001bf6:	e00f      	b.n	8001c18 <StartDisplayTask+0x278>
              else if (selectedDifficulty == eDificultMedium) { if (i == 0 || i == 2) { showAttack = TRUE; } }
 8001bf8:	4b32      	ldr	r3, [pc, #200]	@ (8001cc4 <StartDisplayTask+0x324>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10a      	bne.n	8001c18 <StartDisplayTask+0x278>
 8001c02:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <StartDisplayTask+0x272>
 8001c0a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d102      	bne.n	8001c18 <StartDisplayTask+0x278>
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
              if(showAttack) {
 8001c18:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d070      	beq.n	8001d02 <StartDisplayTask+0x362>
                uint16_t attackColor = ILI9341_WHITE;
 8001c20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c24:	877b      	strh	r3, [r7, #58]	@ 0x3a
                switch(eCpuPlayer.eAttackSequential[i]) {
 8001c26:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001c2a:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <StartDisplayTask+0x328>)
 8001c2c:	4413      	add	r3, r2
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d852      	bhi.n	8001cdc <StartDisplayTask+0x33c>
 8001c36:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <StartDisplayTask+0x29c>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c55 	.word	0x08001c55
 8001c40:	08001c5d 	.word	0x08001c5d
 8001c44:	08001c63 	.word	0x08001c63
 8001c48:	08001c6b 	.word	0x08001c6b
 8001c4c:	08001ccd 	.word	0x08001ccd
 8001c50:	08001cd5 	.word	0x08001cd5
                    case eRed:    attackColor = ILI9341_RED;   break;
 8001c54:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c58:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001c5a:	e03f      	b.n	8001cdc <StartDisplayTask+0x33c>
                    case eBlue:   attackColor = ILI9341_BLUE;  break;
 8001c5c:	231f      	movs	r3, #31
 8001c5e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001c60:	e03c      	b.n	8001cdc <StartDisplayTask+0x33c>
                    case eGreen:  attackColor = ILI9341_CYAN;  break;
 8001c62:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c66:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001c68:	e038      	b.n	8001cdc <StartDisplayTask+0x33c>
                    case eYellow: attackColor = ILI9341_BROWN; break;
 8001c6a:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001c6e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001c70:	e034      	b.n	8001cdc <StartDisplayTask+0x33c>
 8001c72:	bf00      	nop
 8001c74:	2000041c 	.word	0x2000041c
 8001c78:	20000050 	.word	0x20000050
 8001c7c:	20000421 	.word	0x20000421
 8001c80:	20000008 	.word	0x20000008
 8001c84:	08008cf8 	.word	0x08008cf8
 8001c88:	08008d08 	.word	0x08008d08
 8001c8c:	20000424 	.word	0x20000424
 8001c90:	20000054 	.word	0x20000054
 8001c94:	08008d14 	.word	0x08008d14
 8001c98:	20000060 	.word	0x20000060
 8001c9c:	08008d2c 	.word	0x08008d2c
 8001ca0:	2000043a 	.word	0x2000043a
 8001ca4:	08008d44 	.word	0x08008d44
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	08008d5c 	.word	0x08008d5c
 8001cb0:	08008d68 	.word	0x08008d68
 8001cb4:	08008d74 	.word	0x08008d74
 8001cb8:	08008d7c 	.word	0x08008d7c
 8001cbc:	08008d88 	.word	0x08008d88
 8001cc0:	08008d90 	.word	0x08008d90
 8001cc4:	20000428 	.word	0x20000428
 8001cc8:	20000434 	.word	0x20000434
                    case eWhite:  attackColor = ILI9341_WHITE; break;
 8001ccc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cd0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001cd2:	e003      	b.n	8001cdc <StartDisplayTask+0x33c>
                    case eBlack:  attackColor = ILI9341_GRAY;  break;
 8001cd4:	f246 330c 	movw	r3, #25356	@ 0x630c
 8001cd8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001cda:	bf00      	nop
                }
                ILI9341_FillRectangle(10 + (i * 30), 270, 20, 20, attackColor);
 8001cdc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	330a      	adds	r3, #10
 8001cee:	b298      	uxth	r0, r3
 8001cf0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2314      	movs	r3, #20
 8001cf6:	2214      	movs	r2, #20
 8001cf8:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001cfc:	f7ff f8ac 	bl	8000e58 <ILI9341_FillRectangle>
 8001d00:	e017      	b.n	8001d32 <StartDisplayTask+0x392>
              } else {
                ILI9341_WriteString(10 + (i * 30), 270, "??", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001d02:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	330a      	adds	r3, #10
 8001d14:	b298      	uxth	r0, r3
 8001d16:	4ba6      	ldr	r3, [pc, #664]	@ (8001fb0 <StartDisplayTask+0x610>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	9202      	str	r2, [sp, #8]
 8001d1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d20:	9201      	str	r2, [sp, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	9200      	str	r2, [sp, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4aa2      	ldr	r2, [pc, #648]	@ (8001fb4 <StartDisplayTask+0x614>)
 8001d2a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001d2e:	f7ff f847 	bl	8000dc0 <ILI9341_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++)
 8001d32:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001d36:	3301      	adds	r3, #1
 8001d38:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001d3c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	f67f af4d 	bls.w	8001be0 <StartDisplayTask+0x240>
              }
            }
            for(uint8_t i = 0; i < u8ContAttack; i++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001d4c:	e047      	b.n	8001dde <StartDisplayTask+0x43e>
              uint16_t attackColor = ILI9341_WHITE;
 8001d4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d52:	86fb      	strh	r3, [r7, #54]	@ 0x36
              switch(eUserPlayer.eAttackSequential[i]) {
 8001d54:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001d58:	4a97      	ldr	r2, [pc, #604]	@ (8001fb8 <StartDisplayTask+0x618>)
 8001d5a:	4413      	add	r3, r2
 8001d5c:	789b      	ldrb	r3, [r3, #2]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d826      	bhi.n	8001db2 <StartDisplayTask+0x412>
 8001d64:	a201      	add	r2, pc, #4	@ (adr r2, 8001d6c <StartDisplayTask+0x3cc>)
 8001d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6a:	bf00      	nop
 8001d6c:	08001d85 	.word	0x08001d85
 8001d70:	08001d8d 	.word	0x08001d8d
 8001d74:	08001d93 	.word	0x08001d93
 8001d78:	08001d9b 	.word	0x08001d9b
 8001d7c:	08001da3 	.word	0x08001da3
 8001d80:	08001dab 	.word	0x08001dab
                  case eRed:    attackColor = ILI9341_RED;   break;
 8001d84:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d88:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001d8a:	e012      	b.n	8001db2 <StartDisplayTask+0x412>
                  case eBlue:   attackColor = ILI9341_BLUE;  break;
 8001d8c:	231f      	movs	r3, #31
 8001d8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001d90:	e00f      	b.n	8001db2 <StartDisplayTask+0x412>
                  case eGreen:  attackColor = ILI9341_CYAN;  break;
 8001d92:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001d96:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001d98:	e00b      	b.n	8001db2 <StartDisplayTask+0x412>
                  case eYellow: attackColor = ILI9341_BROWN; break;
 8001d9a:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001d9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001da0:	e007      	b.n	8001db2 <StartDisplayTask+0x412>
                  case eWhite:  attackColor = ILI9341_WHITE; break;
 8001da2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001da6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001da8:	e003      	b.n	8001db2 <StartDisplayTask+0x412>
                  case eBlack:  attackColor = ILI9341_GRAY;  break;
 8001daa:	f246 330c 	movw	r3, #25356	@ 0x630c
 8001dae:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001db0:	bf00      	nop
              }
              ILI9341_FillRectangle(10 + (i * 30), 220, 20, 20, attackColor);
 8001db2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	330a      	adds	r3, #10
 8001dc4:	b298      	uxth	r0, r3
 8001dc6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2314      	movs	r3, #20
 8001dcc:	2214      	movs	r2, #20
 8001dce:	21dc      	movs	r1, #220	@ 0xdc
 8001dd0:	f7ff f842 	bl	8000e58 <ILI9341_FillRectangle>
            for(uint8_t i = 0; i < u8ContAttack; i++) {
 8001dd4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001dde:	4b77      	ldr	r3, [pc, #476]	@ (8001fbc <StartDisplayTask+0x61c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d3b0      	bcc.n	8001d4e <StartDisplayTask+0x3ae>
            }
            break;
 8001dec:	e198      	b.n	8002120 <StartDisplayTask+0x780>
          }
          case ePlayerTurn:
          {
            ILI9341_WriteString(10, 20, "Resultado do Round", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001dee:	4b70      	ldr	r3, [pc, #448]	@ (8001fb0 <StartDisplayTask+0x610>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	9202      	str	r2, [sp, #8]
 8001df4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001df8:	9201      	str	r2, [sp, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	9200      	str	r2, [sp, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a6f      	ldr	r2, [pc, #444]	@ (8001fc0 <StartDisplayTask+0x620>)
 8001e02:	2114      	movs	r1, #20
 8001e04:	200a      	movs	r0, #10
 8001e06:	f7fe ffdb 	bl	8000dc0 <ILI9341_WriteString>
            sprintf(buffer, "Sua Vida: %d", eUserPlayer.u8HeartPoints);
 8001e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb8 <StartDisplayTask+0x618>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	496b      	ldr	r1, [pc, #428]	@ (8001fc4 <StartDisplayTask+0x624>)
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f005 fe1b 	bl	8007a54 <siprintf>
            ILI9341_WriteString(10, 60, buffer, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8001e1e:	4b64      	ldr	r3, [pc, #400]	@ (8001fb0 <StartDisplayTask+0x610>)
 8001e20:	f107 0108 	add.w	r1, r7, #8
 8001e24:	2200      	movs	r2, #0
 8001e26:	9202      	str	r2, [sp, #8]
 8001e28:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001e2c:	9201      	str	r2, [sp, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	9200      	str	r2, [sp, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	460a      	mov	r2, r1
 8001e36:	213c      	movs	r1, #60	@ 0x3c
 8001e38:	200a      	movs	r0, #10
 8001e3a:	f7fe ffc1 	bl	8000dc0 <ILI9341_WriteString>
            sprintf(buffer, "Vida CPU: %d", eCpuPlayer.u8HeartPoints);
 8001e3e:	4b62      	ldr	r3, [pc, #392]	@ (8001fc8 <StartDisplayTask+0x628>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	4960      	ldr	r1, [pc, #384]	@ (8001fcc <StartDisplayTask+0x62c>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f005 fe01 	bl	8007a54 <siprintf>
            ILI9341_WriteString(10, 90, buffer, Font_11x18, ILI9341_RED, ILI9341_BLACK);
 8001e52:	4b57      	ldr	r3, [pc, #348]	@ (8001fb0 <StartDisplayTask+0x610>)
 8001e54:	f107 0108 	add.w	r1, r7, #8
 8001e58:	2200      	movs	r2, #0
 8001e5a:	9202      	str	r2, [sp, #8]
 8001e5c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e60:	9201      	str	r2, [sp, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	9200      	str	r2, [sp, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	460a      	mov	r2, r1
 8001e6a:	215a      	movs	r1, #90	@ 0x5a
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f7fe ffa7 	bl	8000dc0 <ILI9341_WriteString>
            ILI9341_WriteString(10, 130, "Seus Ataques:", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8001e72:	4b57      	ldr	r3, [pc, #348]	@ (8001fd0 <StartDisplayTask+0x630>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	9202      	str	r2, [sp, #8]
 8001e78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e7c:	9201      	str	r2, [sp, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	9200      	str	r2, [sp, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a53      	ldr	r2, [pc, #332]	@ (8001fd4 <StartDisplayTask+0x634>)
 8001e86:	2182      	movs	r1, #130	@ 0x82
 8001e88:	200a      	movs	r0, #10
 8001e8a:	f7fe ff99 	bl	8000dc0 <ILI9341_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001e94:	e047      	b.n	8001f26 <StartDisplayTask+0x586>
                uint16_t attackColor = ILI9341_WHITE;
 8001e96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e9a:	867b      	strh	r3, [r7, #50]	@ 0x32
                switch(eUserPlayer.eAttackSequential[i]) {
 8001e9c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001ea0:	4a45      	ldr	r2, [pc, #276]	@ (8001fb8 <StartDisplayTask+0x618>)
 8001ea2:	4413      	add	r3, r2
 8001ea4:	789b      	ldrb	r3, [r3, #2]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d826      	bhi.n	8001efa <StartDisplayTask+0x55a>
 8001eac:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb4 <StartDisplayTask+0x514>)
 8001eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb2:	bf00      	nop
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ed5 	.word	0x08001ed5
 8001ebc:	08001edb 	.word	0x08001edb
 8001ec0:	08001ee3 	.word	0x08001ee3
 8001ec4:	08001eeb 	.word	0x08001eeb
 8001ec8:	08001ef3 	.word	0x08001ef3
                    case eRed:    attackColor = ILI9341_RED;   break;
 8001ecc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ed0:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001ed2:	e012      	b.n	8001efa <StartDisplayTask+0x55a>
                    case eBlue:   attackColor = ILI9341_BLUE;  break;
 8001ed4:	231f      	movs	r3, #31
 8001ed6:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001ed8:	e00f      	b.n	8001efa <StartDisplayTask+0x55a>
                    case eGreen:  attackColor = ILI9341_CYAN;  break;
 8001eda:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001ede:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001ee0:	e00b      	b.n	8001efa <StartDisplayTask+0x55a>
                    case eYellow: attackColor = ILI9341_BROWN; break;
 8001ee2:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001ee6:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001ee8:	e007      	b.n	8001efa <StartDisplayTask+0x55a>
                    case eWhite:  attackColor = ILI9341_WHITE; break;
 8001eea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eee:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001ef0:	e003      	b.n	8001efa <StartDisplayTask+0x55a>
                    case eBlack:  attackColor = ILI9341_GRAY;  break;
 8001ef2:	f246 330c 	movw	r3, #25356	@ 0x630c
 8001ef6:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001ef8:	bf00      	nop
                }
                ILI9341_FillRectangle(10 + (i * 30), 150, 20, 20, attackColor);
 8001efa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	330a      	adds	r3, #10
 8001f0c:	b298      	uxth	r0, r3
 8001f0e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2314      	movs	r3, #20
 8001f14:	2214      	movs	r2, #20
 8001f16:	2196      	movs	r1, #150	@ 0x96
 8001f18:	f7fe ff9e 	bl	8000e58 <ILI9341_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8001f1c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f20:	3301      	adds	r3, #1
 8001f22:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001f26:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d9b3      	bls.n	8001e96 <StartDisplayTask+0x4f6>
            }
            ILI9341_WriteString(10, 190, "Ataques CPU:", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8001f2e:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <StartDisplayTask+0x630>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	9202      	str	r2, [sp, #8]
 8001f34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f38:	9201      	str	r2, [sp, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	9200      	str	r2, [sp, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a25      	ldr	r2, [pc, #148]	@ (8001fd8 <StartDisplayTask+0x638>)
 8001f42:	21be      	movs	r1, #190	@ 0xbe
 8001f44:	200a      	movs	r0, #10
 8001f46:	f7fe ff3b 	bl	8000dc0 <ILI9341_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001f50:	e05e      	b.n	8002010 <StartDisplayTask+0x670>
                uint16_t attackColor = ILI9341_WHITE;
 8001f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f56:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                switch(eCpuPlayer.eAttackSequential[i]) {
 8001f58:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc8 <StartDisplayTask+0x628>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	789b      	ldrb	r3, [r3, #2]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d83d      	bhi.n	8001fe4 <StartDisplayTask+0x644>
 8001f68:	a201      	add	r2, pc, #4	@ (adr r2, 8001f70 <StartDisplayTask+0x5d0>)
 8001f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6e:	bf00      	nop
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08001f91 	.word	0x08001f91
 8001f78:	08001f97 	.word	0x08001f97
 8001f7c:	08001f9f 	.word	0x08001f9f
 8001f80:	08001fa7 	.word	0x08001fa7
 8001f84:	08001fdd 	.word	0x08001fdd
                    case eRed:    attackColor = ILI9341_RED;   break;
 8001f88:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001f8e:	e029      	b.n	8001fe4 <StartDisplayTask+0x644>
                    case eBlue:   attackColor = ILI9341_BLUE;  break;
 8001f90:	231f      	movs	r3, #31
 8001f92:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001f94:	e026      	b.n	8001fe4 <StartDisplayTask+0x644>
                    case eGreen:  attackColor = ILI9341_CYAN;  break;
 8001f96:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001f9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001f9c:	e022      	b.n	8001fe4 <StartDisplayTask+0x644>
                    case eYellow: attackColor = ILI9341_BROWN; break;
 8001f9e:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8001fa2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001fa4:	e01e      	b.n	8001fe4 <StartDisplayTask+0x644>
                    case eWhite:  attackColor = ILI9341_WHITE; break;
 8001fa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001faa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001fac:	e01a      	b.n	8001fe4 <StartDisplayTask+0x644>
 8001fae:	bf00      	nop
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	08008d98 	.word	0x08008d98
 8001fb8:	2000042c 	.word	0x2000042c
 8001fbc:	2000043a 	.word	0x2000043a
 8001fc0:	08008d9c 	.word	0x08008d9c
 8001fc4:	08008db0 	.word	0x08008db0
 8001fc8:	20000434 	.word	0x20000434
 8001fcc:	08008dc0 	.word	0x08008dc0
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	08008dd0 	.word	0x08008dd0
 8001fd8:	08008de0 	.word	0x08008de0
                    case eBlack:  attackColor = ILI9341_GRAY;  break;
 8001fdc:	f246 330c 	movw	r3, #25356	@ 0x630c
 8001fe0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001fe2:	bf00      	nop
                }
                ILI9341_FillRectangle(10 + (i * 30), 210, 20, 20, attackColor);
 8001fe4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	330a      	adds	r3, #10
 8001ff6:	b298      	uxth	r0, r3
 8001ff8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2314      	movs	r3, #20
 8001ffe:	2214      	movs	r2, #20
 8002000:	21d2      	movs	r1, #210	@ 0xd2
 8002002:	f7fe ff29 	bl	8000e58 <ILI9341_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002006:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800200a:	3301      	adds	r3, #1
 800200c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002010:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002014:	2b03      	cmp	r3, #3
 8002016:	d99c      	bls.n	8001f52 <StartDisplayTask+0x5b2>
            }
            ILI9341_WriteString(10, 280, "Pressione * para continuar...", Font_7x10, ILI9341_YELLOW, ILI9341_BLACK);
 8002018:	4b45      	ldr	r3, [pc, #276]	@ (8002130 <StartDisplayTask+0x790>)
 800201a:	2200      	movs	r2, #0
 800201c:	9202      	str	r2, [sp, #8]
 800201e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002022:	9201      	str	r2, [sp, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	9200      	str	r2, [sp, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a42      	ldr	r2, [pc, #264]	@ (8002134 <StartDisplayTask+0x794>)
 800202c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002030:	200a      	movs	r0, #10
 8002032:	f7fe fec5 	bl	8000dc0 <ILI9341_WriteString>
            break;
 8002036:	e073      	b.n	8002120 <StartDisplayTask+0x780>
          }
          case eEndGame:
          {
            if (eUserPlayer.u8HeartPoints > 0) {
 8002038:	4b3f      	ldr	r3, [pc, #252]	@ (8002138 <StartDisplayTask+0x798>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00e      	beq.n	8002060 <StartDisplayTask+0x6c0>
                ILI9341_WriteString(70, 80, "VITORIA!", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8002042:	4b3e      	ldr	r3, [pc, #248]	@ (800213c <StartDisplayTask+0x79c>)
 8002044:	2200      	movs	r2, #0
 8002046:	9202      	str	r2, [sp, #8]
 8002048:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800204c:	9201      	str	r2, [sp, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	9200      	str	r2, [sp, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a3a      	ldr	r2, [pc, #232]	@ (8002140 <StartDisplayTask+0x7a0>)
 8002056:	2150      	movs	r1, #80	@ 0x50
 8002058:	2046      	movs	r0, #70	@ 0x46
 800205a:	f7fe feb1 	bl	8000dc0 <ILI9341_WriteString>
 800205e:	e00d      	b.n	800207c <StartDisplayTask+0x6dc>
            } else {
                ILI9341_WriteString(70, 80, "DERROTA!", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 8002060:	4b36      	ldr	r3, [pc, #216]	@ (800213c <StartDisplayTask+0x79c>)
 8002062:	2200      	movs	r2, #0
 8002064:	9202      	str	r2, [sp, #8]
 8002066:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800206a:	9201      	str	r2, [sp, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	9200      	str	r2, [sp, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a34      	ldr	r2, [pc, #208]	@ (8002144 <StartDisplayTask+0x7a4>)
 8002074:	2150      	movs	r1, #80	@ 0x50
 8002076:	2046      	movs	r0, #70	@ 0x46
 8002078:	f7fe fea2 	bl	8000dc0 <ILI9341_WriteString>
            }
            sprintf(buffer, "Sua Vida Final: %d", eUserPlayer.u8HeartPoints);
 800207c:	4b2e      	ldr	r3, [pc, #184]	@ (8002138 <StartDisplayTask+0x798>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	492f      	ldr	r1, [pc, #188]	@ (8002148 <StartDisplayTask+0x7a8>)
 800208a:	4618      	mov	r0, r3
 800208c:	f005 fce2 	bl	8007a54 <siprintf>
            ILI9341_WriteString(10, 140, buffer, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8002090:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <StartDisplayTask+0x790>)
 8002092:	f107 0108 	add.w	r1, r7, #8
 8002096:	2200      	movs	r2, #0
 8002098:	9202      	str	r2, [sp, #8]
 800209a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800209e:	9201      	str	r2, [sp, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	9200      	str	r2, [sp, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	460a      	mov	r2, r1
 80020a8:	218c      	movs	r1, #140	@ 0x8c
 80020aa:	200a      	movs	r0, #10
 80020ac:	f7fe fe88 	bl	8000dc0 <ILI9341_WriteString>
            sprintf(buffer, "Vida Final CPU: %d", eCpuPlayer.u8HeartPoints);
 80020b0:	4b26      	ldr	r3, [pc, #152]	@ (800214c <StartDisplayTask+0x7ac>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	4924      	ldr	r1, [pc, #144]	@ (8002150 <StartDisplayTask+0x7b0>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f005 fcc8 	bl	8007a54 <siprintf>
            ILI9341_WriteString(10, 160, buffer, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80020c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <StartDisplayTask+0x790>)
 80020c6:	f107 0108 	add.w	r1, r7, #8
 80020ca:	2200      	movs	r2, #0
 80020cc:	9202      	str	r2, [sp, #8]
 80020ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020d2:	9201      	str	r2, [sp, #4]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	9200      	str	r2, [sp, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	460a      	mov	r2, r1
 80020dc:	21a0      	movs	r1, #160	@ 0xa0
 80020de:	200a      	movs	r0, #10
 80020e0:	f7fe fe6e 	bl	8000dc0 <ILI9341_WriteString>
            ILI9341_WriteString(10, 250, "Pressione * para recomecar", Font_7x10, ILI9341_YELLOW, ILI9341_BLACK);
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <StartDisplayTask+0x790>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	9202      	str	r2, [sp, #8]
 80020ea:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80020ee:	9201      	str	r2, [sp, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	9200      	str	r2, [sp, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a17      	ldr	r2, [pc, #92]	@ (8002154 <StartDisplayTask+0x7b4>)
 80020f8:	21fa      	movs	r1, #250	@ 0xfa
 80020fa:	200a      	movs	r0, #10
 80020fc:	f7fe fe60 	bl	8000dc0 <ILI9341_WriteString>
            break;
 8002100:	e00e      	b.n	8002120 <StartDisplayTask+0x780>
          }
          default:
          {
            ILI9341_WriteString(10, 10, "Erro de Estado!", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <StartDisplayTask+0x79c>)
 8002104:	2200      	movs	r2, #0
 8002106:	9202      	str	r2, [sp, #8]
 8002108:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800210c:	9201      	str	r2, [sp, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	9200      	str	r2, [sp, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a10      	ldr	r2, [pc, #64]	@ (8002158 <StartDisplayTask+0x7b8>)
 8002116:	210a      	movs	r1, #10
 8002118:	200a      	movs	r0, #10
 800211a:	f7fe fe51 	bl	8000dc0 <ILI9341_WriteString>
            break;
 800211e:	bf00      	nop
          }
      }
      u8RedrawScreen = FALSE;
 8002120:	2300      	movs	r3, #0
 8002122:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    osDelay(5);
 8002126:	2005      	movs	r0, #5
 8002128:	f002 ffe9 	bl	80050fe <osDelay>
    osMutexWait(gameMutexHandle, osWaitForever);
 800212c:	e43f      	b.n	80019ae <StartDisplayTask+0xe>
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000
 8002134:	08008df0 	.word	0x08008df0
 8002138:	2000042c 	.word	0x2000042c
 800213c:	20000008 	.word	0x20000008
 8002140:	08008e10 	.word	0x08008e10
 8002144:	08008e1c 	.word	0x08008e1c
 8002148:	08008e28 	.word	0x08008e28
 800214c:	20000434 	.word	0x20000434
 8002150:	08008e3c 	.word	0x08008e3c
 8002154:	08008e50 	.word	0x08008e50
 8002158:	08008e6c 	.word	0x08008e6c

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002160:	b672      	cpsid	i
}
 8002162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <Error_Handler+0x8>

08002168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <HAL_MspInit+0x94>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	4a21      	ldr	r2, [pc, #132]	@ (80021fc <HAL_MspInit+0x94>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800217c:	6453      	str	r3, [r2, #68]	@ 0x44
 800217e:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <HAL_MspInit+0x94>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_MspInit+0x94>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	4a1a      	ldr	r2, [pc, #104]	@ (80021fc <HAL_MspInit+0x94>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6413      	str	r3, [r2, #64]	@ 0x40
 800219a:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <HAL_MspInit+0x94>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	210f      	movs	r1, #15
 80021aa:	f06f 0001 	mvn.w	r0, #1
 80021ae:	f000 fb92 	bl	80028d6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2105      	movs	r1, #5
 80021b6:	2001      	movs	r0, #1
 80021b8:	f000 fb8d 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80021bc:	2001      	movs	r0, #1
 80021be:	f000 fba6 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2105      	movs	r1, #5
 80021c6:	2004      	movs	r0, #4
 80021c8:	f000 fb85 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80021cc:	2004      	movs	r0, #4
 80021ce:	f000 fb9e 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2105      	movs	r1, #5
 80021d6:	2005      	movs	r0, #5
 80021d8:	f000 fb7d 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80021dc:	2005      	movs	r0, #5
 80021de:	f000 fb96 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2105      	movs	r1, #5
 80021e6:	2051      	movs	r0, #81	@ 0x51
 80021e8:	f000 fb75 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80021ec:	2051      	movs	r0, #81	@ 0x51
 80021ee:	f000 fb8e 	bl	800290e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1d      	ldr	r2, [pc, #116]	@ (8002294 <HAL_SPI_MspInit+0x94>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d133      	bne.n	800228a <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <HAL_SPI_MspInit+0x98>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <HAL_SPI_MspInit+0x98>)
 800222c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002230:	6453      	str	r3, [r2, #68]	@ 0x44
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_SPI_MspInit+0x98>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_SPI_MspInit+0x98>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <HAL_SPI_MspInit+0x98>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_SPI_MspInit+0x98>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800225a:	23e0      	movs	r3, #224	@ 0xe0
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800226a:	2305      	movs	r3, #5
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	4809      	ldr	r0, [pc, #36]	@ (800229c <HAL_SPI_MspInit+0x9c>)
 8002276:	f000 fd8b 	bl	8002d90 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2105      	movs	r1, #5
 800227e:	2023      	movs	r0, #35	@ 0x23
 8002280:	f000 fb29 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002284:	2023      	movs	r0, #35	@ 0x23
 8002286:	f000 fb42 	bl	800290e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	@ 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40013000 	.word	0x40013000
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000

080022a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	@ 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <HAL_UART_MspInit+0x94>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d133      	bne.n	800232a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <HAL_UART_MspInit+0x98>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002338 <HAL_UART_MspInit+0x98>)
 80022cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d2:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_UART_MspInit+0x98>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_UART_MspInit+0x98>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <HAL_UART_MspInit+0x98>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_UART_MspInit+0x98>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022fa:	2303      	movs	r3, #3
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800230a:	2308      	movs	r3, #8
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4809      	ldr	r0, [pc, #36]	@ (800233c <HAL_UART_MspInit+0x9c>)
 8002316:	f000 fd3b 	bl	8002d90 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2105      	movs	r1, #5
 800231e:	2034      	movs	r0, #52	@ 0x34
 8002320:	f000 fad9 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002324:	2034      	movs	r0, #52	@ 0x34
 8002326:	f000 faf2 	bl	800290e <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	@ 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40004c00 	.word	0x40004c00
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <NMI_Handler+0x4>

08002348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <MemManage_Handler+0x4>

08002358 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <BusFault_Handler+0x4>

08002360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <UsageFault_Handler+0x4>

08002368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237a:	f000 f98d 	bl	8002698 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800237e:	f004 fbd5 	bl	8006b2c <xTaskGetSchedulerState>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d001      	beq.n	800238c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002388:	f004 ffb6 	bl	80072f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002394:	f000 feca 	bl	800312c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80023a0:	f000 fb62 	bl	8002a68 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <SPI1_IRQHandler+0x10>)
 80023be:	f001 fcf5 	bl	8003dac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000370 	.word	0x20000370

080023cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <UART4_IRQHandler+0x10>)
 80023d2:	f001 ff35 	bl	8004240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200003c8 	.word	0x200003c8

080023e0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  return 1;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_kill>:

int _kill(int pid, int sig)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002408:	f005 fbd8 	bl	8007bbc <__errno>
 800240c:	4603      	mov	r3, r0
 800240e:	2216      	movs	r2, #22
 8002410:	601a      	str	r2, [r3, #0]
  return -1;
 8002412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_exit>:

void _exit (int status)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002426:	f04f 31ff 	mov.w	r1, #4294967295
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffe7 	bl	80023fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <_exit+0x12>

08002434 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e00a      	b.n	800245c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002446:	f3af 8000 	nop.w
 800244a:	4601      	mov	r1, r0
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	60ba      	str	r2, [r7, #8]
 8002452:	b2ca      	uxtb	r2, r1
 8002454:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3301      	adds	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	dbf0      	blt.n	8002446 <_read+0x12>
  }

  return len;
 8002464:	687b      	ldr	r3, [r7, #4]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e009      	b.n	8002494 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	60ba      	str	r2, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	dbf1      	blt.n	8002480 <_write+0x12>
  }
  return len;
 800249c:	687b      	ldr	r3, [r7, #4]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_close>:

int _close(int file)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024ce:	605a      	str	r2, [r3, #4]
  return 0;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_isatty>:

int _isatty(int file)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002518:	4a14      	ldr	r2, [pc, #80]	@ (800256c <_sbrk+0x5c>)
 800251a:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <_sbrk+0x60>)
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002524:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <_sbrk+0x64>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <_sbrk+0x64>)
 800252e:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <_sbrk+0x68>)
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	429a      	cmp	r2, r3
 800253e:	d207      	bcs.n	8002550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002540:	f005 fb3c 	bl	8007bbc <__errno>
 8002544:	4603      	mov	r3, r0
 8002546:	220c      	movs	r2, #12
 8002548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	e009      	b.n	8002564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002550:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002556:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <_sbrk+0x64>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	4a05      	ldr	r2, [pc, #20]	@ (8002574 <_sbrk+0x64>)
 8002560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20020000 	.word	0x20020000
 8002570:	00000400 	.word	0x00000400
 8002574:	2000043c 	.word	0x2000043c
 8002578:	200042e8 	.word	0x200042e8

0800257c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <SystemInit+0x20>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <SystemInit+0x20>)
 8002588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800258c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025a4:	f7ff ffea 	bl	800257c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480c      	ldr	r0, [pc, #48]	@ (80025dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025aa:	490d      	ldr	r1, [pc, #52]	@ (80025e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025ac:	4a0d      	ldr	r2, [pc, #52]	@ (80025e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c0:	4c0a      	ldr	r4, [pc, #40]	@ (80025ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ce:	f005 fafb 	bl	8007bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d2:	f7fe fd4b 	bl	800106c <main>
  bx  lr    
 80025d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80025e4:	0800a464 	.word	0x0800a464
  ldr r2, =_sbss
 80025e8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80025ec:	200042e4 	.word	0x200042e4

080025f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC_IRQHandler>
	...

080025f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <HAL_Init+0x40>)
 80025fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <HAL_Init+0x40>)
 800260a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800260e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002610:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a07      	ldr	r2, [pc, #28]	@ (8002634 <HAL_Init+0x40>)
 8002616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800261c:	2003      	movs	r0, #3
 800261e:	f000 f94f 	bl	80028c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002622:	200f      	movs	r0, #15
 8002624:	f000 f808 	bl	8002638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002628:	f7ff fd9e 	bl	8002168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023c00 	.word	0x40023c00

08002638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002640:	4b12      	ldr	r3, [pc, #72]	@ (800268c <HAL_InitTick+0x54>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_InitTick+0x58>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f967 	bl	800292a <HAL_SYSTICK_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00e      	b.n	8002684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0f      	cmp	r3, #15
 800266a:	d80a      	bhi.n	8002682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800266c:	2200      	movs	r2, #0
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f000 f92f 	bl	80028d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002678:	4a06      	ldr	r2, [pc, #24]	@ (8002694 <HAL_InitTick+0x5c>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000074 	.word	0x20000074
 8002690:	2000007c 	.word	0x2000007c
 8002694:	20000078 	.word	0x20000078

08002698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_IncTick+0x20>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_IncTick+0x24>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	4a04      	ldr	r2, [pc, #16]	@ (80026bc <HAL_IncTick+0x24>)
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	2000007c 	.word	0x2000007c
 80026bc:	20000440 	.word	0x20000440

080026c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return uwTick;
 80026c4:	4b03      	ldr	r3, [pc, #12]	@ (80026d4 <HAL_GetTick+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000440 	.word	0x20000440

080026d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7ff ffee 	bl	80026c0 <HAL_GetTick>
 80026e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d005      	beq.n	80026fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f2:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <HAL_Delay+0x44>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026fe:	bf00      	nop
 8002700:	f7ff ffde 	bl	80026c0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	429a      	cmp	r2, r3
 800270e:	d8f7      	bhi.n	8002700 <HAL_Delay+0x28>
  {
  }
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	2000007c 	.word	0x2000007c

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4907      	ldr	r1, [pc, #28]	@ (80027bc <__NVIC_EnableIRQ+0x38>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	@ (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	@ (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	@ 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f1c3 0307 	rsb	r3, r3, #7
 800282e:	2b04      	cmp	r3, #4
 8002830:	bf28      	it	cs
 8002832:	2304      	movcs	r3, #4
 8002834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3304      	adds	r3, #4
 800283a:	2b06      	cmp	r3, #6
 800283c:	d902      	bls.n	8002844 <NVIC_EncodePriority+0x30>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3b03      	subs	r3, #3
 8002842:	e000      	b.n	8002846 <NVIC_EncodePriority+0x32>
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43d9      	mvns	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	4313      	orrs	r3, r2
         );
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	@ 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800288c:	d301      	bcc.n	8002892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288e:	2301      	movs	r3, #1
 8002890:	e00f      	b.n	80028b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <SysTick_Config+0x40>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289a:	210f      	movs	r1, #15
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f7ff ff8e 	bl	80027c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <SysTick_Config+0x40>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028aa:	4b04      	ldr	r3, [pc, #16]	@ (80028bc <SysTick_Config+0x40>)
 80028ac:	2207      	movs	r2, #7
 80028ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	e000e010 	.word	0xe000e010

080028c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff29 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff3e 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff8e 	bl	8002814 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5d 	bl	80027c0 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff31 	bl	8002784 <__NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa2 	bl	800287c <SysTick_Config>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7ff feb6 	bl	80026c0 <HAL_GetTick>
 8002954:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d008      	beq.n	8002974 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2280      	movs	r2, #128	@ 0x80
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e052      	b.n	8002a1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0216 	bic.w	r2, r2, #22
 8002982:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002992:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d103      	bne.n	80029a4 <HAL_DMA_Abort+0x62>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0208 	bic.w	r2, r2, #8
 80029b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c4:	e013      	b.n	80029ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029c6:	f7ff fe7b 	bl	80026c0 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d90c      	bls.n	80029ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2203      	movs	r2, #3
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e015      	b.n	8002a1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e4      	bne.n	80029c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	223f      	movs	r2, #63	@ 0x3f
 8002a02:	409a      	lsls	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d004      	beq.n	8002a40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2280      	movs	r2, #128	@ 0x80
 8002a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e00c      	b.n	8002a5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2205      	movs	r2, #5
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002a72:	4b49      	ldr	r3, [pc, #292]	@ (8002b98 <HAL_FLASH_IRQHandler+0x130>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d020      	beq.n	8002ac0 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002a88:	4b44      	ldr	r3, [pc, #272]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8002a8e:	4b43      	ldr	r3, [pc, #268]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	e00b      	b.n	8002ab0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002a98:	4b40      	ldr	r3, [pc, #256]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d103      	bne.n	8002aaa <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8002aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	e002      	b.n	8002ab0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002ab0:	f000 f88a 	bl	8002bc8 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f87d 	bl	8002bb4 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002aba:	4b38      	ldr	r3, [pc, #224]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002ac0:	4b35      	ldr	r3, [pc, #212]	@ (8002b98 <HAL_FLASH_IRQHandler+0x130>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d04a      	beq.n	8002b62 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002acc:	4b32      	ldr	r3, [pc, #200]	@ (8002b98 <HAL_FLASH_IRQHandler+0x130>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002ad2:	4b32      	ldr	r3, [pc, #200]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d12d      	bne.n	8002b38 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002adc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002ae4:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d015      	beq.n	8002b1a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8002aee:	4b2b      	ldr	r3, [pc, #172]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f853 	bl	8002ba0 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8002afa:	4b28      	ldr	r3, [pc, #160]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	3301      	adds	r3, #1
 8002b00:	4a26      	ldr	r2, [pc, #152]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b02:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8002b04:	4b25      	ldr	r3, [pc, #148]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8002b0a:	4b24      	ldr	r3, [pc, #144]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b0c:	7a1b      	ldrb	r3, [r3, #8]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	4619      	mov	r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8ae 	bl	8002c74 <FLASH_Erase_Sector>
 8002b18:	e023      	b.n	8002b62 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	4a1e      	ldr	r2, [pc, #120]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b26:	4b1d      	ldr	r3, [pc, #116]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002b2c:	f000 f8ea 	bl	8002d04 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f835 	bl	8002ba0 <HAL_FLASH_EndOfOperationCallback>
 8002b36:	e014      	b.n	8002b62 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002b38:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8002b42:	f000 f8df 	bl	8002d04 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002b46:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f828 	bl	8002ba0 <HAL_FLASH_EndOfOperationCallback>
 8002b50:	e004      	b.n	8002b5c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f822 	bl	8002ba0 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002b62:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <HAL_FLASH_IRQHandler+0x134>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <HAL_FLASH_IRQHandler+0x130>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	4a09      	ldr	r2, [pc, #36]	@ (8002b98 <HAL_FLASH_IRQHandler+0x130>)
 8002b72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002b76:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002b78:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <HAL_FLASH_IRQHandler+0x130>)
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	4a06      	ldr	r2, [pc, #24]	@ (8002b98 <HAL_FLASH_IRQHandler+0x130>)
 8002b7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b82:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <HAL_FLASH_IRQHandler+0x130>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	4a03      	ldr	r2, [pc, #12]	@ (8002b98 <HAL_FLASH_IRQHandler+0x130>)
 8002b8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	6113      	str	r3, [r2, #16]
  }
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023c00 	.word	0x40023c00
 8002b9c:	20000080 	.word	0x20000080

08002ba0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002bcc:	4b27      	ldr	r3, [pc, #156]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002bd8:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f043 0310 	orr.w	r3, r3, #16
 8002be0:	4a23      	ldr	r2, [pc, #140]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002be2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002be4:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002be6:	2210      	movs	r2, #16
 8002be8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002bea:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f043 0308 	orr.w	r3, r3, #8
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002c00:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002c02:	4b1a      	ldr	r3, [pc, #104]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002c04:	2220      	movs	r2, #32
 8002c06:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002c08:	4b18      	ldr	r3, [pc, #96]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002c14:	4b16      	ldr	r3, [pc, #88]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	4a14      	ldr	r2, [pc, #80]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002c1e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002c20:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002c22:	2240      	movs	r2, #64	@ 0x40
 8002c24:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002c26:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f043 0302 	orr.w	r3, r3, #2
 8002c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002c3c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002c40:	2280      	movs	r2, #128	@ 0x80
 8002c42:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002c44:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002c50:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f043 0320 	orr.w	r3, r3, #32
 8002c58:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <FLASH_SetErrorCode+0xa8>)
 8002c5a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <FLASH_SetErrorCode+0xa4>)
 8002c5e:	2202      	movs	r2, #2
 8002c60:	60da      	str	r2, [r3, #12]
  }
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40023c00 	.word	0x40023c00
 8002c70:	20000080 	.word	0x20000080

08002c74 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e010      	b.n	8002cb2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d103      	bne.n	8002c9e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002c96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e009      	b.n	8002cb2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d103      	bne.n	8002cac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e002      	b.n	8002cb2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002cac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002cb2:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	490f      	ldr	r1, [pc, #60]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	4a0c      	ldr	r2, [pc, #48]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002cd0:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8002cd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	4a07      	ldr	r2, [pc, #28]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002ce2:	f043 0302 	orr.w	r3, r3, #2
 8002ce6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <FLASH_Erase_Sector+0x8c>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf2:	6113      	str	r3, [r2, #16]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40023c00 	.word	0x40023c00

08002d04 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002d08:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d017      	beq.n	8002d44 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002d14:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d1a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d1e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002d20:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d26:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a16      	ldr	r2, [pc, #88]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d36:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d38:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d42:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002d44:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d017      	beq.n	8002d80 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002d50:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0d      	ldr	r2, [pc, #52]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d5a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a07      	ldr	r2, [pc, #28]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d72:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a04      	ldr	r2, [pc, #16]	@ (8002d8c <FLASH_FlushCaches+0x88>)
 8002d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d7e:	6013      	str	r3, [r2, #0]
  }
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	@ 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e16b      	b.n	8003084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	f040 815a 	bne.w	800307e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d005      	beq.n	8002de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d130      	bne.n	8002e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e18:	2201      	movs	r2, #1
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 0201 	and.w	r2, r3, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d017      	beq.n	8002e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d123      	bne.n	8002ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	08da      	lsrs	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3208      	adds	r2, #8
 8002e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	08da      	lsrs	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3208      	adds	r2, #8
 8002ece:	69b9      	ldr	r1, [r7, #24]
 8002ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0203 	and.w	r2, r3, #3
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80b4 	beq.w	800307e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b60      	ldr	r3, [pc, #384]	@ (800309c <HAL_GPIO_Init+0x30c>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	4a5f      	ldr	r2, [pc, #380]	@ (800309c <HAL_GPIO_Init+0x30c>)
 8002f20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f26:	4b5d      	ldr	r3, [pc, #372]	@ (800309c <HAL_GPIO_Init+0x30c>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f32:	4a5b      	ldr	r2, [pc, #364]	@ (80030a0 <HAL_GPIO_Init+0x310>)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	3302      	adds	r3, #2
 8002f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	220f      	movs	r2, #15
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a52      	ldr	r2, [pc, #328]	@ (80030a4 <HAL_GPIO_Init+0x314>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02b      	beq.n	8002fb6 <HAL_GPIO_Init+0x226>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a51      	ldr	r2, [pc, #324]	@ (80030a8 <HAL_GPIO_Init+0x318>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d025      	beq.n	8002fb2 <HAL_GPIO_Init+0x222>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a50      	ldr	r2, [pc, #320]	@ (80030ac <HAL_GPIO_Init+0x31c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01f      	beq.n	8002fae <HAL_GPIO_Init+0x21e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4f      	ldr	r2, [pc, #316]	@ (80030b0 <HAL_GPIO_Init+0x320>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d019      	beq.n	8002faa <HAL_GPIO_Init+0x21a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4e      	ldr	r2, [pc, #312]	@ (80030b4 <HAL_GPIO_Init+0x324>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_GPIO_Init+0x216>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4d      	ldr	r2, [pc, #308]	@ (80030b8 <HAL_GPIO_Init+0x328>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00d      	beq.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4c      	ldr	r2, [pc, #304]	@ (80030bc <HAL_GPIO_Init+0x32c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d007      	beq.n	8002f9e <HAL_GPIO_Init+0x20e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4b      	ldr	r2, [pc, #300]	@ (80030c0 <HAL_GPIO_Init+0x330>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_GPIO_Init+0x20a>
 8002f96:	2307      	movs	r3, #7
 8002f98:	e00e      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	e00c      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002f9e:	2306      	movs	r3, #6
 8002fa0:	e00a      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	e008      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e004      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f002 0203 	and.w	r2, r2, #3
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc8:	4935      	ldr	r1, [pc, #212]	@ (80030a0 <HAL_GPIO_Init+0x310>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80030c4 <HAL_GPIO_Init+0x334>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffa:	4a32      	ldr	r2, [pc, #200]	@ (80030c4 <HAL_GPIO_Init+0x334>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003000:	4b30      	ldr	r3, [pc, #192]	@ (80030c4 <HAL_GPIO_Init+0x334>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003024:	4a27      	ldr	r2, [pc, #156]	@ (80030c4 <HAL_GPIO_Init+0x334>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302a:	4b26      	ldr	r3, [pc, #152]	@ (80030c4 <HAL_GPIO_Init+0x334>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800304e:	4a1d      	ldr	r2, [pc, #116]	@ (80030c4 <HAL_GPIO_Init+0x334>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <HAL_GPIO_Init+0x334>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003078:	4a12      	ldr	r2, [pc, #72]	@ (80030c4 <HAL_GPIO_Init+0x334>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b0f      	cmp	r3, #15
 8003088:	f67f ae90 	bls.w	8002dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3724      	adds	r7, #36	@ 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40020400 	.word	0x40020400
 80030ac:	40020800 	.word	0x40020800
 80030b0:	40020c00 	.word	0x40020c00
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40021400 	.word	0x40021400
 80030bc:	40021800 	.word	0x40021800
 80030c0:	40021c00 	.word	0x40021c00
 80030c4:	40013c00 	.word	0x40013c00

080030c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	e001      	b.n	80030ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
 8003104:	4613      	mov	r3, r2
 8003106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003108:	787b      	ldrb	r3, [r7, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003114:	e003      	b.n	800311e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	619a      	str	r2, [r3, #24]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800313c:	f000 f808 	bl	8003150 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003140:	4b02      	ldr	r3, [pc, #8]	@ (800314c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003142:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003146:	615a      	str	r2, [r3, #20]
  }
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40013c00 	.word	0x40013c00

08003150 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e267      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d075      	beq.n	800326a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800317e:	4b88      	ldr	r3, [pc, #544]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b04      	cmp	r3, #4
 8003188:	d00c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b85      	ldr	r3, [pc, #532]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003192:	2b08      	cmp	r3, #8
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b82      	ldr	r3, [pc, #520]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	4b7e      	ldr	r3, [pc, #504]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d05b      	beq.n	8003268 <HAL_RCC_OscConfig+0x108>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d157      	bne.n	8003268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e242      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x74>
 80031c6:	4b76      	ldr	r3, [pc, #472]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a75      	ldr	r2, [pc, #468]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01d      	b.n	8003210 <HAL_RCC_OscConfig+0xb0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x98>
 80031de:	4b70      	ldr	r3, [pc, #448]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6f      	ldr	r2, [pc, #444]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b6d      	ldr	r3, [pc, #436]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6c      	ldr	r2, [pc, #432]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0xb0>
 80031f8:	4b69      	ldr	r3, [pc, #420]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a68      	ldr	r2, [pc, #416]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b66      	ldr	r3, [pc, #408]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a65      	ldr	r2, [pc, #404]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7ff fa52 	bl	80026c0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7ff fa4e 	bl	80026c0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e207      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b5b      	ldr	r3, [pc, #364]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0xc0>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7ff fa3e 	bl	80026c0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7ff fa3a 	bl	80026c0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	@ 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e1f3      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b51      	ldr	r3, [pc, #324]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0xe8>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d063      	beq.n	800333e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003276:	4b4a      	ldr	r3, [pc, #296]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003282:	4b47      	ldr	r3, [pc, #284]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800328a:	2b08      	cmp	r3, #8
 800328c:	d11c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328e:	4b44      	ldr	r3, [pc, #272]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x152>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1c7      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b2:	4b3b      	ldr	r3, [pc, #236]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4937      	ldr	r1, [pc, #220]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	e03a      	b.n	800333e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d0:	4b34      	ldr	r3, [pc, #208]	@ (80033a4 <HAL_RCC_OscConfig+0x244>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7ff f9f3 	bl	80026c0 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032de:	f7ff f9ef 	bl	80026c0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1a8      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	4b2b      	ldr	r3, [pc, #172]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b28      	ldr	r3, [pc, #160]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4925      	ldr	r1, [pc, #148]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
 8003310:	e015      	b.n	800333e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003312:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <HAL_RCC_OscConfig+0x244>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7ff f9d2 	bl	80026c0 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003320:	f7ff f9ce 	bl	80026c0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e187      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d036      	beq.n	80033b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003352:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <HAL_RCC_OscConfig+0x248>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7ff f9b2 	bl	80026c0 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003360:	f7ff f9ae 	bl	80026c0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e167      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x200>
 800337e:	e01b      	b.n	80033b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003380:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <HAL_RCC_OscConfig+0x248>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7ff f99b 	bl	80026c0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	e00e      	b.n	80033ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338e:	f7ff f997 	bl	80026c0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d907      	bls.n	80033ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e150      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
 80033a0:	40023800 	.word	0x40023800
 80033a4:	42470000 	.word	0x42470000
 80033a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	4b88      	ldr	r3, [pc, #544]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ea      	bne.n	800338e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8097 	beq.w	80034f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b81      	ldr	r3, [pc, #516]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	4b7d      	ldr	r3, [pc, #500]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	4a7c      	ldr	r2, [pc, #496]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e6:	4b7a      	ldr	r3, [pc, #488]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b77      	ldr	r3, [pc, #476]	@ (80035d4 <HAL_RCC_OscConfig+0x474>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003402:	4b74      	ldr	r3, [pc, #464]	@ (80035d4 <HAL_RCC_OscConfig+0x474>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a73      	ldr	r2, [pc, #460]	@ (80035d4 <HAL_RCC_OscConfig+0x474>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340e:	f7ff f957 	bl	80026c0 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003416:	f7ff f953 	bl	80026c0 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e10c      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	4b6a      	ldr	r3, [pc, #424]	@ (80035d4 <HAL_RCC_OscConfig+0x474>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x2ea>
 800343c:	4b64      	ldr	r3, [pc, #400]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003440:	4a63      	ldr	r2, [pc, #396]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6713      	str	r3, [r2, #112]	@ 0x70
 8003448:	e01c      	b.n	8003484 <HAL_RCC_OscConfig+0x324>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b05      	cmp	r3, #5
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x30c>
 8003452:	4b5f      	ldr	r3, [pc, #380]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	4a5e      	ldr	r2, [pc, #376]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	6713      	str	r3, [r2, #112]	@ 0x70
 800345e:	4b5c      	ldr	r3, [pc, #368]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	4a5b      	ldr	r2, [pc, #364]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6713      	str	r3, [r2, #112]	@ 0x70
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0x324>
 800346c:	4b58      	ldr	r3, [pc, #352]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003470:	4a57      	ldr	r2, [pc, #348]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	@ 0x70
 8003478:	4b55      	ldr	r3, [pc, #340]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347c:	4a54      	ldr	r2, [pc, #336]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800347e:	f023 0304 	bic.w	r3, r3, #4
 8003482:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7ff f918 	bl	80026c0 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7ff f914 	bl	80026c0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0cb      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	4b49      	ldr	r3, [pc, #292]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ee      	beq.n	8003494 <HAL_RCC_OscConfig+0x334>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7ff f902 	bl	80026c0 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7ff f8fe 	bl	80026c0 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0b5      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	4b3e      	ldr	r3, [pc, #248]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ee      	bne.n	80034c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b39      	ldr	r3, [pc, #228]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	4a38      	ldr	r2, [pc, #224]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a1 	beq.w	8003640 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fe:	4b34      	ldr	r3, [pc, #208]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d05c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d141      	bne.n	8003596 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b31      	ldr	r3, [pc, #196]	@ (80035d8 <HAL_RCC_OscConfig+0x478>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7ff f8d2 	bl	80026c0 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7ff f8ce 	bl	80026c0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e087      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b27      	ldr	r3, [pc, #156]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	3b01      	subs	r3, #1
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	491b      	ldr	r1, [pc, #108]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b1b      	ldr	r3, [pc, #108]	@ (80035d8 <HAL_RCC_OscConfig+0x478>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7ff f8a7 	bl	80026c0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7ff f8a3 	bl	80026c0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e05c      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x416>
 8003594:	e054      	b.n	8003640 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <HAL_RCC_OscConfig+0x478>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7ff f890 	bl	80026c0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7ff f88c 	bl	80026c0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e045      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_RCC_OscConfig+0x470>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x444>
 80035c2:	e03d      	b.n	8003640 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e038      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40007000 	.word	0x40007000
 80035d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	@ (800364c <HAL_RCC_OscConfig+0x4ec>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d028      	beq.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d121      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d11a      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003614:	4293      	cmp	r3, r2
 8003616:	d111      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	3b01      	subs	r3, #1
 8003626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d107      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800

08003650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0cc      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b68      	ldr	r3, [pc, #416]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d90c      	bls.n	800368c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b65      	ldr	r3, [pc, #404]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b63      	ldr	r3, [pc, #396]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0b8      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a4:	4b59      	ldr	r3, [pc, #356]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a58      	ldr	r2, [pc, #352]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036bc:	4b53      	ldr	r3, [pc, #332]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a52      	ldr	r2, [pc, #328]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4b50      	ldr	r3, [pc, #320]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	494d      	ldr	r1, [pc, #308]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d044      	beq.n	8003770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b47      	ldr	r3, [pc, #284]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d119      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e07f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d003      	beq.n	800370e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370a:	2b03      	cmp	r3, #3
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	4b3f      	ldr	r3, [pc, #252]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e067      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372e:	4b37      	ldr	r3, [pc, #220]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4934      	ldr	r1, [pc, #208]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003740:	f7fe ffbe 	bl	80026c0 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	e00a      	b.n	800375e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fe ffba 	bl	80026c0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e04f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 020c 	and.w	r2, r3, #12
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	429a      	cmp	r2, r3
 800376e:	d1eb      	bne.n	8003748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003770:	4b25      	ldr	r3, [pc, #148]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d20c      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b22      	ldr	r3, [pc, #136]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b20      	ldr	r3, [pc, #128]	@ (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e032      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a4:	4b19      	ldr	r3, [pc, #100]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4916      	ldr	r1, [pc, #88]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c2:	4b12      	ldr	r3, [pc, #72]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	490e      	ldr	r1, [pc, #56]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037d6:	f000 f821 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490a      	ldr	r1, [pc, #40]	@ (8003810 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	4a09      	ldr	r2, [pc, #36]	@ (8003814 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037f2:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe ff1e 	bl	8002638 <HAL_InitTick>

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023c00 	.word	0x40023c00
 800380c:	40023800 	.word	0x40023800
 8003810:	0800a35c 	.word	0x0800a35c
 8003814:	20000074 	.word	0x20000074
 8003818:	20000078 	.word	0x20000078

0800381c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003820:	b090      	sub	sp, #64	@ 0x40
 8003822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003834:	4b59      	ldr	r3, [pc, #356]	@ (800399c <HAL_RCC_GetSysClockFreq+0x180>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d00d      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x40>
 8003840:	2b08      	cmp	r3, #8
 8003842:	f200 80a1 	bhi.w	8003988 <HAL_RCC_GetSysClockFreq+0x16c>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x34>
 800384a:	2b04      	cmp	r3, #4
 800384c:	d003      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x3a>
 800384e:	e09b      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003850:	4b53      	ldr	r3, [pc, #332]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003852:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003854:	e09b      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003856:	4b53      	ldr	r3, [pc, #332]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003858:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800385a:	e098      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800385c:	4b4f      	ldr	r3, [pc, #316]	@ (800399c <HAL_RCC_GetSysClockFreq+0x180>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003866:	4b4d      	ldr	r3, [pc, #308]	@ (800399c <HAL_RCC_GetSysClockFreq+0x180>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d028      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003872:	4b4a      	ldr	r3, [pc, #296]	@ (800399c <HAL_RCC_GetSysClockFreq+0x180>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	2200      	movs	r2, #0
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	627a      	str	r2, [r7, #36]	@ 0x24
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003884:	2100      	movs	r1, #0
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003888:	fb03 f201 	mul.w	r2, r3, r1
 800388c:	2300      	movs	r3, #0
 800388e:	fb00 f303 	mul.w	r3, r0, r3
 8003892:	4413      	add	r3, r2
 8003894:	4a43      	ldr	r2, [pc, #268]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003896:	fba0 1202 	umull	r1, r2, r0, r2
 800389a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800389c:	460a      	mov	r2, r1
 800389e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038a2:	4413      	add	r3, r2
 80038a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a8:	2200      	movs	r2, #0
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	61fa      	str	r2, [r7, #28]
 80038ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038b6:	f7fc fcdb 	bl	8000270 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4613      	mov	r3, r2
 80038c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038c2:	e053      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c4:	4b35      	ldr	r3, [pc, #212]	@ (800399c <HAL_RCC_GetSysClockFreq+0x180>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	2200      	movs	r2, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	617a      	str	r2, [r7, #20]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038d6:	f04f 0b00 	mov.w	fp, #0
 80038da:	4652      	mov	r2, sl
 80038dc:	465b      	mov	r3, fp
 80038de:	f04f 0000 	mov.w	r0, #0
 80038e2:	f04f 0100 	mov.w	r1, #0
 80038e6:	0159      	lsls	r1, r3, #5
 80038e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ec:	0150      	lsls	r0, r2, #5
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	ebb2 080a 	subs.w	r8, r2, sl
 80038f6:	eb63 090b 	sbc.w	r9, r3, fp
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003906:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800390a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800390e:	ebb2 0408 	subs.w	r4, r2, r8
 8003912:	eb63 0509 	sbc.w	r5, r3, r9
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	00eb      	lsls	r3, r5, #3
 8003920:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003924:	00e2      	lsls	r2, r4, #3
 8003926:	4614      	mov	r4, r2
 8003928:	461d      	mov	r5, r3
 800392a:	eb14 030a 	adds.w	r3, r4, sl
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	eb45 030b 	adc.w	r3, r5, fp
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003942:	4629      	mov	r1, r5
 8003944:	028b      	lsls	r3, r1, #10
 8003946:	4621      	mov	r1, r4
 8003948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800394c:	4621      	mov	r1, r4
 800394e:	028a      	lsls	r2, r1, #10
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003956:	2200      	movs	r2, #0
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	60fa      	str	r2, [r7, #12]
 800395c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003960:	f7fc fc86 	bl	8000270 <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4613      	mov	r3, r2
 800396a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <HAL_RCC_GetSysClockFreq+0x180>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	0c1b      	lsrs	r3, r3, #16
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	3301      	adds	r3, #1
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800397c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003986:	e002      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800398a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800398c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003990:	4618      	mov	r0, r3
 8003992:	3740      	adds	r7, #64	@ 0x40
 8003994:	46bd      	mov	sp, r7
 8003996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	00f42400 	.word	0x00f42400
 80039a4:	017d7840 	.word	0x017d7840

080039a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ac:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000074 	.word	0x20000074

080039c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039c4:	f7ff fff0 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 80039c8:	4602      	mov	r2, r0
 80039ca:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	0a9b      	lsrs	r3, r3, #10
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	4903      	ldr	r1, [pc, #12]	@ (80039e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d6:	5ccb      	ldrb	r3, [r1, r3]
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40023800 	.word	0x40023800
 80039e4:	0800a36c 	.word	0x0800a36c

080039e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039ec:	f7ff ffdc 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0b5b      	lsrs	r3, r3, #13
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4903      	ldr	r1, [pc, #12]	@ (8003a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	0800a36c 	.word	0x0800a36c

08003a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07b      	b.n	8003b1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d108      	bne.n	8003a3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a32:	d009      	beq.n	8003a48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	61da      	str	r2, [r3, #28]
 8003a3a:	e005      	b.n	8003a48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fe fbcc 	bl	8002200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003acc:	ea42 0103 	orr.w	r1, r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	f003 0104 	and.w	r1, r3, #4
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	f003 0210 	and.w	r2, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b088      	sub	sp, #32
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b32:	f7fe fdc5 	bl	80026c0 <HAL_GetTick>
 8003b36:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d001      	beq.n	8003b4c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e12a      	b.n	8003da2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_SPI_Transmit+0x36>
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e122      	b.n	8003da2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_SPI_Transmit+0x48>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e11b      	b.n	8003da2 <HAL_SPI_Transmit+0x280>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2203      	movs	r2, #3
 8003b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	88fa      	ldrh	r2, [r7, #6]
 8003b8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	88fa      	ldrh	r2, [r7, #6]
 8003b90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bb8:	d10f      	bne.n	8003bda <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b40      	cmp	r3, #64	@ 0x40
 8003be6:	d007      	beq.n	8003bf8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c00:	d152      	bne.n	8003ca8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_SPI_Transmit+0xee>
 8003c0a:	8b7b      	ldrh	r3, [r7, #26]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d145      	bne.n	8003c9c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	1c9a      	adds	r2, r3, #2
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c34:	e032      	b.n	8003c9c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d112      	bne.n	8003c6a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c68:	e018      	b.n	8003c9c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c6a:	f7fe fd29 	bl	80026c0 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d803      	bhi.n	8003c82 <HAL_SPI_Transmit+0x160>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d102      	bne.n	8003c88 <HAL_SPI_Transmit+0x166>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e082      	b.n	8003da2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1c7      	bne.n	8003c36 <HAL_SPI_Transmit+0x114>
 8003ca6:	e053      	b.n	8003d50 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_SPI_Transmit+0x194>
 8003cb0:	8b7b      	ldrh	r3, [r7, #26]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d147      	bne.n	8003d46 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	7812      	ldrb	r2, [r2, #0]
 8003cc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cdc:	e033      	b.n	8003d46 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d113      	bne.n	8003d14 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	7812      	ldrb	r2, [r2, #0]
 8003cf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d12:	e018      	b.n	8003d46 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d14:	f7fe fcd4 	bl	80026c0 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d803      	bhi.n	8003d2c <HAL_SPI_Transmit+0x20a>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d102      	bne.n	8003d32 <HAL_SPI_Transmit+0x210>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e02d      	b.n	8003da2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1c6      	bne.n	8003cde <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f9cf 	bl	80040f8 <SPI_EndRxTxTransaction>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10f      	bne.n	8003df0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
    return;
 8003dee:	e0d7      	b.n	8003fa0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_SPI_IRQHandler+0x66>
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	09db      	lsrs	r3, r3, #7
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
    return;
 8003e10:	e0c6      	b.n	8003fa0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_SPI_IRQHandler+0x8c>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	099b      	lsrs	r3, r3, #6
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80b4 	beq.w	8003fa0 <HAL_SPI_IRQHandler+0x1f4>
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80ad 	beq.w	8003fa0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	099b      	lsrs	r3, r3, #6
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d023      	beq.n	8003e9a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d011      	beq.n	8003e82 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	e00b      	b.n	8003e9a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]
        return;
 8003e98:	e082      	b.n	8003fa0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d014      	beq.n	8003ed0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00c      	beq.n	8003ef6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee0:	f043 0208 	orr.w	r2, r3, #8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d04f      	beq.n	8003f9e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f0c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <HAL_SPI_IRQHandler+0x17e>
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d034      	beq.n	8003f94 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0203 	bic.w	r2, r2, #3
 8003f38:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d011      	beq.n	8003f66 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f46:	4a18      	ldr	r2, [pc, #96]	@ (8003fa8 <HAL_SPI_IRQHandler+0x1fc>)
 8003f48:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe fd67 	bl	8002a22 <HAL_DMA_Abort_IT>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f72:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa8 <HAL_SPI_IRQHandler+0x1fc>)
 8003f74:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fd51 	bl	8002a22 <HAL_DMA_Abort_IT>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003f92:	e003      	b.n	8003f9c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f809 	bl	8003fac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003f9a:	e000      	b.n	8003f9e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003f9c:	bf00      	nop
    return;
 8003f9e:	bf00      	nop
  }
}
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	08003fc1 	.word	0x08003fc1

08003fac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fcc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff ffe6 	bl	8003fac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ff8:	f7fe fb62 	bl	80026c0 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4413      	add	r3, r2
 8004006:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004008:	f7fe fb5a 	bl	80026c0 <HAL_GetTick>
 800400c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800400e:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	015b      	lsls	r3, r3, #5
 8004014:	0d1b      	lsrs	r3, r3, #20
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800401e:	e055      	b.n	80040cc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d051      	beq.n	80040cc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004028:	f7fe fb4a 	bl	80026c0 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	429a      	cmp	r2, r3
 8004036:	d902      	bls.n	800403e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d13d      	bne.n	80040ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800404c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004056:	d111      	bne.n	800407c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004060:	d004      	beq.n	800406c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406a:	d107      	bne.n	800407c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800407a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004080:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004084:	d10f      	bne.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e018      	b.n	80040ec <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	e002      	b.n	80040cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d19a      	bne.n	8004020 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000074 	.word	0x20000074

080040f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2201      	movs	r2, #1
 800410c:	2102      	movs	r1, #2
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f7ff ff6a 	bl	8003fe8 <SPI_WaitFlagStateUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e032      	b.n	8004190 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800412a:	4b1b      	ldr	r3, [pc, #108]	@ (8004198 <SPI_EndRxTxTransaction+0xa0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1b      	ldr	r2, [pc, #108]	@ (800419c <SPI_EndRxTxTransaction+0xa4>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	0d5b      	lsrs	r3, r3, #21
 8004136:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004148:	d112      	bne.n	8004170 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2200      	movs	r2, #0
 8004152:	2180      	movs	r1, #128	@ 0x80
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7ff ff47 	bl	8003fe8 <SPI_WaitFlagStateUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d016      	beq.n	800418e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e00f      	b.n	8004190 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	3b01      	subs	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004186:	2b80      	cmp	r3, #128	@ 0x80
 8004188:	d0f2      	beq.n	8004170 <SPI_EndRxTxTransaction+0x78>
 800418a:	e000      	b.n	800418e <SPI_EndRxTxTransaction+0x96>
        break;
 800418c:	bf00      	nop
  }

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000074 	.word	0x20000074
 800419c:	165e9f81 	.word	0x165e9f81

080041a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e042      	b.n	8004238 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe f86a 	bl	80022a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	@ 0x24
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fc99 	bl	8004b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b0ba      	sub	sp, #232	@ 0xe8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800427e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_UART_IRQHandler+0x66>
 8004292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fb7e 	bl	80049a0 <UART_Receive_IT>
      return;
 80042a4:	e273      	b.n	800478e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80de 	beq.w	800446c <HAL_UART_IRQHandler+0x22c>
 80042b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80d1 	beq.w	800446c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_UART_IRQHandler+0xae>
 80042d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f043 0201 	orr.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_UART_IRQHandler+0xd2>
 80042fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	f043 0202 	orr.w	r2, r3, #2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_UART_IRQHandler+0xf6>
 800431e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f043 0204 	orr.w	r2, r3, #4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <HAL_UART_IRQHandler+0x126>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800434e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435e:	f043 0208 	orr.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 820a 	beq.w	8004784 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_UART_IRQHandler+0x14e>
 800437c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fb09 	bl	80049a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b40      	cmp	r3, #64	@ 0x40
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_UART_IRQHandler+0x17a>
 80043b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d04f      	beq.n	800445a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa14 	bl	80047e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ca:	2b40      	cmp	r3, #64	@ 0x40
 80043cc:	d141      	bne.n	8004452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3314      	adds	r3, #20
 80043f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1d9      	bne.n	80043ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d013      	beq.n	800444a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004426:	4a8a      	ldr	r2, [pc, #552]	@ (8004650 <HAL_UART_IRQHandler+0x410>)
 8004428:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe faf7 	bl	8002a22 <HAL_DMA_Abort_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004444:	4610      	mov	r0, r2
 8004446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e00e      	b.n	8004468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9b6 	bl	80047bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	e00a      	b.n	8004468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9b2 	bl	80047bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	e006      	b.n	8004468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9ae 	bl	80047bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004466:	e18d      	b.n	8004784 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	bf00      	nop
    return;
 800446a:	e18b      	b.n	8004784 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004470:	2b01      	cmp	r3, #1
 8004472:	f040 8167 	bne.w	8004744 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8160 	beq.w	8004744 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8159 	beq.w	8004744 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b2:	2b40      	cmp	r3, #64	@ 0x40
 80044b4:	f040 80ce 	bne.w	8004654 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80a9 	beq.w	8004620 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044d6:	429a      	cmp	r2, r3
 80044d8:	f080 80a2 	bcs.w	8004620 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ee:	f000 8088 	beq.w	8004602 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800450c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800451e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800452a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1d9      	bne.n	80044f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3314      	adds	r3, #20
 8004544:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800454e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004562:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800456a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e1      	bne.n	800453e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3314      	adds	r3, #20
 8004580:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800458a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800458c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3314      	adds	r3, #20
 800459a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800459e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e3      	bne.n	800457a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d2:	f023 0310 	bic.w	r3, r3, #16
 80045d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e3      	bne.n	80045c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe f9a0 	bl	8002942 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004610:	b29b      	uxth	r3, r3
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	b29b      	uxth	r3, r3
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f8d9 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800461e:	e0b3      	b.n	8004788 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004624:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004628:	429a      	cmp	r2, r3
 800462a:	f040 80ad 	bne.w	8004788 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004638:	f040 80a6 	bne.w	8004788 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8c1 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
      return;
 800464e:	e09b      	b.n	8004788 <HAL_UART_IRQHandler+0x548>
 8004650:	080048af 	.word	0x080048af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800465c:	b29b      	uxth	r3, r3
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 808e 	beq.w	800478c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8089 	beq.w	800478c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800468a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800468c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004690:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800469e:	647a      	str	r2, [r7, #68]	@ 0x44
 80046a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e3      	bne.n	800467a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3314      	adds	r3, #20
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	623b      	str	r3, [r7, #32]
   return(result);
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e3      	bne.n	80046b2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60fb      	str	r3, [r7, #12]
   return(result);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800471c:	61fa      	str	r2, [r7, #28]
 800471e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	617b      	str	r3, [r7, #20]
   return(result);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e3      	bne.n	80046f8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004736:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f847 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004742:	e023      	b.n	800478c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <HAL_UART_IRQHandler+0x524>
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f8b7 	bl	80048d0 <UART_Transmit_IT>
    return;
 8004762:	e014      	b.n	800478e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00e      	beq.n	800478e <HAL_UART_IRQHandler+0x54e>
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8f7 	bl	8004970 <UART_EndTransmit_IT>
    return;
 8004782:	e004      	b.n	800478e <HAL_UART_IRQHandler+0x54e>
    return;
 8004784:	bf00      	nop
 8004786:	e002      	b.n	800478e <HAL_UART_IRQHandler+0x54e>
      return;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_UART_IRQHandler+0x54e>
      return;
 800478c:	bf00      	nop
  }
}
 800478e:	37e8      	adds	r7, #232	@ 0xe8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b095      	sub	sp, #84	@ 0x54
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004810:	643a      	str	r2, [r7, #64]	@ 0x40
 8004812:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e5      	bne.n	80047f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3314      	adds	r3, #20
 800482a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	61fb      	str	r3, [r7, #28]
   return(result);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3314      	adds	r3, #20
 8004842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004844:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800484a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	2b01      	cmp	r3, #1
 800485e:	d119      	bne.n	8004894 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f023 0310 	bic.w	r3, r3, #16
 8004876:	647b      	str	r3, [r7, #68]	@ 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004880:	61ba      	str	r2, [r7, #24]
 8004882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6979      	ldr	r1, [r7, #20]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	613b      	str	r3, [r7, #16]
   return(result);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048a2:	bf00      	nop
 80048a4:	3754      	adds	r7, #84	@ 0x54
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff ff7a 	bl	80047bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b21      	cmp	r3, #33	@ 0x21
 80048e2:	d13e      	bne.n	8004962 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ec:	d114      	bne.n	8004918 <UART_Transmit_IT+0x48>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d110      	bne.n	8004918 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	1c9a      	adds	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	621a      	str	r2, [r3, #32]
 8004916:	e008      	b.n	800492a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	1c59      	adds	r1, r3, #1
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6211      	str	r1, [r2, #32]
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4619      	mov	r1, r3
 8004938:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800494c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800495c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
  }
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004986:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff feff 	bl	8004794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	@ 0x30
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b22      	cmp	r3, #34	@ 0x22
 80049ba:	f040 80aa 	bne.w	8004b12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c6:	d115      	bne.n	80049f4 <UART_Receive_IT+0x54>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d111      	bne.n	80049f4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80049f2:	e024      	b.n	8004a3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a02:	d007      	beq.n	8004a14 <UART_Receive_IT+0x74>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <UART_Receive_IT+0x82>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e008      	b.n	8004a34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d15d      	bne.n	8004b0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0220 	bic.w	r2, r2, #32
 8004a60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695a      	ldr	r2, [r3, #20]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d135      	bne.n	8004b04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	613b      	str	r3, [r7, #16]
   return(result);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f023 0310 	bic.w	r3, r3, #16
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abe:	623a      	str	r2, [r7, #32]
 8004ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	69f9      	ldr	r1, [r7, #28]
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e5      	bne.n	8004a9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d10a      	bne.n	8004af6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff fe67 	bl	80047d0 <HAL_UARTEx_RxEventCallback>
 8004b02:	e002      	b.n	8004b0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fe4f 	bl	80047a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e002      	b.n	8004b14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e000      	b.n	8004b14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b12:	2302      	movs	r3, #2
  }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3730      	adds	r7, #48	@ 0x30
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b20:	b0c0      	sub	sp, #256	@ 0x100
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	68d9      	ldr	r1, [r3, #12]
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	ea40 0301 	orr.w	r3, r0, r1
 8004b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b74:	f021 010c 	bic.w	r1, r1, #12
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b82:	430b      	orrs	r3, r1
 8004b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b96:	6999      	ldr	r1, [r3, #24]
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	ea40 0301 	orr.w	r3, r0, r1
 8004ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b8f      	ldr	r3, [pc, #572]	@ (8004de8 <UART_SetConfig+0x2cc>)
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d005      	beq.n	8004bbc <UART_SetConfig+0xa0>
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8004dec <UART_SetConfig+0x2d0>)
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d104      	bne.n	8004bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7fe ff14 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bc4:	e003      	b.n	8004bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bc6:	f7fe fefb 	bl	80039c0 <HAL_RCC_GetPCLK1Freq>
 8004bca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd8:	f040 810c 	bne.w	8004df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004be6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bee:	4622      	mov	r2, r4
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	1891      	adds	r1, r2, r2
 8004bf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bf6:	415b      	adcs	r3, r3
 8004bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bfe:	4621      	mov	r1, r4
 8004c00:	eb12 0801 	adds.w	r8, r2, r1
 8004c04:	4629      	mov	r1, r5
 8004c06:	eb43 0901 	adc.w	r9, r3, r1
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c1e:	4690      	mov	r8, r2
 8004c20:	4699      	mov	r9, r3
 8004c22:	4623      	mov	r3, r4
 8004c24:	eb18 0303 	adds.w	r3, r8, r3
 8004c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	eb49 0303 	adc.w	r3, r9, r3
 8004c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	18db      	adds	r3, r3, r3
 8004c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c50:	4613      	mov	r3, r2
 8004c52:	eb42 0303 	adc.w	r3, r2, r3
 8004c56:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c60:	f7fb fb06 	bl	8000270 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4b61      	ldr	r3, [pc, #388]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	011c      	lsls	r4, r3, #4
 8004c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c84:	4642      	mov	r2, r8
 8004c86:	464b      	mov	r3, r9
 8004c88:	1891      	adds	r1, r2, r2
 8004c8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c8c:	415b      	adcs	r3, r3
 8004c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c94:	4641      	mov	r1, r8
 8004c96:	eb12 0a01 	adds.w	sl, r2, r1
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb4:	4692      	mov	sl, r2
 8004cb6:	469b      	mov	fp, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	eb1a 0303 	adds.w	r3, sl, r3
 8004cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	18db      	adds	r3, r3, r3
 8004ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cf6:	f7fb fabb 	bl	8000270 <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4b3b      	ldr	r3, [pc, #236]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004d02:	fba3 2301 	umull	r2, r3, r3, r1
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2264      	movs	r2, #100	@ 0x64
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	1acb      	subs	r3, r1, r3
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d16:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004d18:	fba3 2302 	umull	r2, r3, r3, r2
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d24:	441c      	add	r4, r3
 8004d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	1891      	adds	r1, r2, r2
 8004d3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d40:	415b      	adcs	r3, r3
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d48:	4641      	mov	r1, r8
 8004d4a:	1851      	adds	r1, r2, r1
 8004d4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d4e:	4649      	mov	r1, r9
 8004d50:	414b      	adcs	r3, r1
 8004d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d60:	4659      	mov	r1, fp
 8004d62:	00cb      	lsls	r3, r1, #3
 8004d64:	4651      	mov	r1, sl
 8004d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	00ca      	lsls	r2, r1, #3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4619      	mov	r1, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	4642      	mov	r2, r8
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	460a      	mov	r2, r1
 8004d80:	eb42 0303 	adc.w	r3, r2, r3
 8004d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	18db      	adds	r3, r3, r3
 8004da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004da2:	4613      	mov	r3, r2
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004db2:	f7fb fa5d 	bl	8000270 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	2164      	movs	r1, #100	@ 0x64
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	3332      	adds	r3, #50	@ 0x32
 8004dce:	4a08      	ldr	r2, [pc, #32]	@ (8004df0 <UART_SetConfig+0x2d4>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	f003 0207 	and.w	r2, r3, #7
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4422      	add	r2, r4
 8004de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004de4:	e106      	b.n	8004ff4 <UART_SetConfig+0x4d8>
 8004de6:	bf00      	nop
 8004de8:	40011000 	.word	0x40011000
 8004dec:	40011400 	.word	0x40011400
 8004df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e06:	4642      	mov	r2, r8
 8004e08:	464b      	mov	r3, r9
 8004e0a:	1891      	adds	r1, r2, r2
 8004e0c:	6239      	str	r1, [r7, #32]
 8004e0e:	415b      	adcs	r3, r3
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e16:	4641      	mov	r1, r8
 8004e18:	1854      	adds	r4, r2, r1
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	eb43 0501 	adc.w	r5, r3, r1
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	00eb      	lsls	r3, r5, #3
 8004e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e2e:	00e2      	lsls	r2, r4, #3
 8004e30:	4614      	mov	r4, r2
 8004e32:	461d      	mov	r5, r3
 8004e34:	4643      	mov	r3, r8
 8004e36:	18e3      	adds	r3, r4, r3
 8004e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	eb45 0303 	adc.w	r3, r5, r3
 8004e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e62:	4629      	mov	r1, r5
 8004e64:	008b      	lsls	r3, r1, #2
 8004e66:	4621      	mov	r1, r4
 8004e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	008a      	lsls	r2, r1, #2
 8004e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e74:	f7fb f9fc 	bl	8000270 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4b60      	ldr	r3, [pc, #384]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	011c      	lsls	r4, r3, #4
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	1891      	adds	r1, r2, r2
 8004e9e:	61b9      	str	r1, [r7, #24]
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	1851      	adds	r1, r2, r1
 8004eac:	6139      	str	r1, [r7, #16]
 8004eae:	4649      	mov	r1, r9
 8004eb0:	414b      	adcs	r3, r1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	00cb      	lsls	r3, r1, #3
 8004ec4:	4651      	mov	r1, sl
 8004ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eca:	4651      	mov	r1, sl
 8004ecc:	00ca      	lsls	r2, r1, #3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004edc:	464b      	mov	r3, r9
 8004ede:	460a      	mov	r2, r1
 8004ee0:	eb42 0303 	adc.w	r3, r2, r3
 8004ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ef2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f00:	4649      	mov	r1, r9
 8004f02:	008b      	lsls	r3, r1, #2
 8004f04:	4641      	mov	r1, r8
 8004f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	008a      	lsls	r2, r1, #2
 8004f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f12:	f7fb f9ad 	bl	8000270 <__aeabi_uldivmod>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4b38      	ldr	r3, [pc, #224]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	2264      	movs	r2, #100	@ 0x64
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	1acb      	subs	r3, r1, r3
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	3332      	adds	r3, #50	@ 0x32
 8004f30:	4a33      	ldr	r2, [pc, #204]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f3c:	441c      	add	r4, r3
 8004f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f42:	2200      	movs	r2, #0
 8004f44:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f46:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	415b      	adcs	r3, r3
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	1851      	adds	r1, r2, r1
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	4649      	mov	r1, r9
 8004f64:	414b      	adcs	r3, r1
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f74:	4659      	mov	r1, fp
 8004f76:	00cb      	lsls	r3, r1, #3
 8004f78:	4651      	mov	r1, sl
 8004f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7e:	4651      	mov	r1, sl
 8004f80:	00ca      	lsls	r2, r1, #3
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	4642      	mov	r2, r8
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f8e:	464b      	mov	r3, r9
 8004f90:	460a      	mov	r2, r1
 8004f92:	eb42 0303 	adc.w	r3, r2, r3
 8004f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fa2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	008b      	lsls	r3, r1, #2
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fba:	4641      	mov	r1, r8
 8004fbc:	008a      	lsls	r2, r1, #2
 8004fbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fc2:	f7fb f955 	bl	8000270 <__aeabi_uldivmod>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	2164      	movs	r1, #100	@ 0x64
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	3332      	adds	r3, #50	@ 0x32
 8004fde:	4a08      	ldr	r2, [pc, #32]	@ (8005000 <UART_SetConfig+0x4e4>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 020f 	and.w	r2, r3, #15
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4422      	add	r2, r4
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005000:	51eb851f 	.word	0x51eb851f

08005004 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005016:	2b84      	cmp	r3, #132	@ 0x84
 8005018:	d005      	beq.n	8005026 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800501a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	3303      	adds	r3, #3
 8005024:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005026:	68fb      	ldr	r3, [r7, #12]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800503a:	f3ef 8305 	mrs	r3, IPSR
 800503e:	607b      	str	r3, [r7, #4]
  return(result);
 8005040:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800505c:	f001 f95c 	bl	8006318 <vTaskStartScheduler>
  
  return osOK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	bd80      	pop	{r7, pc}

08005066 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005066:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005068:	b089      	sub	sp, #36	@ 0x24
 800506a:	af04      	add	r7, sp, #16
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d020      	beq.n	80050ba <osThreadCreate+0x54>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01c      	beq.n	80050ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685c      	ldr	r4, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691e      	ldr	r6, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff ffb6 	bl	8005004 <makeFreeRtosPriority>
 8005098:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050a2:	9202      	str	r2, [sp, #8]
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	9100      	str	r1, [sp, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4632      	mov	r2, r6
 80050ac:	4629      	mov	r1, r5
 80050ae:	4620      	mov	r0, r4
 80050b0:	f000 ff64 	bl	8005f7c <xTaskCreateStatic>
 80050b4:	4603      	mov	r3, r0
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e01c      	b.n	80050f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685c      	ldr	r4, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff ff98 	bl	8005004 <makeFreeRtosPriority>
 80050d4:	4602      	mov	r2, r0
 80050d6:	f107 030c 	add.w	r3, r7, #12
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	9200      	str	r2, [sp, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	4632      	mov	r2, r6
 80050e2:	4629      	mov	r1, r5
 80050e4:	4620      	mov	r0, r4
 80050e6:	f000 ffa9 	bl	800603c <xTaskCreate>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d001      	beq.n	80050f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050f4:	68fb      	ldr	r3, [r7, #12]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <osDelay+0x16>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	e000      	b.n	8005116 <osDelay+0x18>
 8005114:	2301      	movs	r3, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f001 f8c8 	bl	80062ac <vTaskDelay>
  
  return osOK;
 800511c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4619      	mov	r1, r3
 800513c:	2001      	movs	r0, #1
 800513e:	f000 fab6 	bl	80056ae <xQueueCreateMutexStatic>
 8005142:	4603      	mov	r3, r0
 8005144:	e003      	b.n	800514e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005146:	2001      	movs	r0, #1
 8005148:	f000 fa99 	bl	800567e <xQueueCreateMutex>
 800514c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <osMutexWait+0x18>
    return osErrorParameter;
 800516c:	2380      	movs	r3, #128	@ 0x80
 800516e:	e03a      	b.n	80051e6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517a:	d103      	bne.n	8005184 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e009      	b.n	8005198 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d006      	beq.n	8005198 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <osMutexWait+0x40>
      ticks = 1;
 8005194:	2301      	movs	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005198:	f7ff ff4c 	bl	8005034 <inHandlerMode>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d017      	beq.n	80051d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80051a2:	f107 0308 	add.w	r3, r7, #8
 80051a6:	461a      	mov	r2, r3
 80051a8:	2100      	movs	r1, #0
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fd3c 	bl	8005c28 <xQueueReceiveFromISR>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d001      	beq.n	80051ba <osMutexWait+0x62>
      return osErrorOS;
 80051b6:	23ff      	movs	r3, #255	@ 0xff
 80051b8:	e015      	b.n	80051e6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d011      	beq.n	80051e4 <osMutexWait+0x8c>
 80051c0:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <osMutexWait+0x98>)
 80051c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	e008      	b.n	80051e4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fc17 	bl	8005a08 <xQueueSemaphoreTake>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d001      	beq.n	80051e4 <osMutexWait+0x8c>
    return osErrorOS;
 80051e0:	23ff      	movs	r3, #255	@ 0xff
 80051e2:	e000      	b.n	80051e6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005204:	f7ff ff16 	bl	8005034 <inHandlerMode>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800520e:	f107 0308 	add.w	r3, r7, #8
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fb67 	bl	80058e8 <xQueueGiveFromISR>
 800521a:	4603      	mov	r3, r0
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <osMutexRelease+0x30>
      return osErrorOS;
 8005220:	23ff      	movs	r3, #255	@ 0xff
 8005222:	e017      	b.n	8005254 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d013      	beq.n	8005252 <osMutexRelease+0x5e>
 800522a:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <osMutexRelease+0x68>)
 800522c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	e00a      	b.n	8005252 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800523c:	2300      	movs	r3, #0
 800523e:	2200      	movs	r2, #0
 8005240:	2100      	movs	r1, #0
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa4e 	bl	80056e4 <xQueueGenericSend>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d001      	beq.n	8005252 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800524e:	23ff      	movs	r3, #255	@ 0xff
 8005250:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005252:	68fb      	ldr	r3, [r7, #12]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	e000ed04 	.word	0xe000ed04

08005260 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f103 0208 	add.w	r2, r3, #8
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f04f 32ff 	mov.w	r2, #4294967295
 8005278:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 0208 	add.w	r2, r3, #8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f103 0208 	add.w	r2, r3, #8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d103      	bne.n	8005322 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e00c      	b.n	800533c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3308      	adds	r3, #8
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e002      	b.n	8005330 <vListInsert+0x2e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	429a      	cmp	r2, r3
 800533a:	d2f6      	bcs.n	800532a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	601a      	str	r2, [r3, #0]
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6892      	ldr	r2, [r2, #8]
 800538a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6852      	ldr	r2, [r2, #4]
 8005394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d103      	bne.n	80053a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053ee:	bf00      	nop
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053f4:	f001 fef0 	bl	80071d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005400:	68f9      	ldr	r1, [r7, #12]
 8005402:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	441a      	add	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005424:	3b01      	subs	r3, #1
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800542a:	fb01 f303 	mul.w	r3, r1, r3
 800542e:	441a      	add	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	22ff      	movs	r2, #255	@ 0xff
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	22ff      	movs	r2, #255	@ 0xff
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d114      	bne.n	8005474 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01a      	beq.n	8005488 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3310      	adds	r3, #16
 8005456:	4618      	mov	r0, r3
 8005458:	f001 f9a8 	bl	80067ac <xTaskRemoveFromEventList>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d012      	beq.n	8005488 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005462:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <xQueueGenericReset+0xd0>)
 8005464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	e009      	b.n	8005488 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3310      	adds	r3, #16
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fef1 	bl	8005260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3324      	adds	r3, #36	@ 0x24
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff feec 	bl	8005260 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005488:	f001 fed8 	bl	800723c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800548c:	2301      	movs	r3, #1
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08e      	sub	sp, #56	@ 0x38
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10b      	bne.n	80054e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <xQueueGenericCreateStatic+0x56>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <xQueueGenericCreateStatic+0x5a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <xQueueGenericCreateStatic+0x5c>
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	623b      	str	r3, [r7, #32]
}
 800550e:	bf00      	nop
 8005510:	bf00      	nop
 8005512:	e7fd      	b.n	8005510 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <xQueueGenericCreateStatic+0x84>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <xQueueGenericCreateStatic+0x88>
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <xQueueGenericCreateStatic+0x8a>
 8005524:	2300      	movs	r3, #0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	61fb      	str	r3, [r7, #28]
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	e7fd      	b.n	800553e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005542:	2348      	movs	r3, #72	@ 0x48
 8005544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b48      	cmp	r3, #72	@ 0x48
 800554a:	d00b      	beq.n	8005564 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	61bb      	str	r3, [r7, #24]
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	e7fd      	b.n	8005560 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005564:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00d      	beq.n	800558c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005578:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800557c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f840 	bl	800560c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800558e:	4618      	mov	r0, r3
 8005590:	3730      	adds	r7, #48	@ 0x30
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005596:	b580      	push	{r7, lr}
 8005598:	b08a      	sub	sp, #40	@ 0x28
 800559a:	af02      	add	r7, sp, #8
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	4613      	mov	r3, r2
 80055a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	613b      	str	r3, [r7, #16]
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	e7fd      	b.n	80055be <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	fb02 f303 	mul.w	r3, r2, r3
 80055ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	3348      	adds	r3, #72	@ 0x48
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 ff23 	bl	800741c <pvPortMalloc>
 80055d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d011      	beq.n	8005602 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	3348      	adds	r3, #72	@ 0x48
 80055e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055f0:	79fa      	ldrb	r2, [r7, #7]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	4613      	mov	r3, r2
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f805 	bl	800560c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005602:	69bb      	ldr	r3, [r7, #24]
	}
 8005604:	4618      	mov	r0, r3
 8005606:	3720      	adds	r7, #32
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e002      	b.n	800562e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800563a:	2101      	movs	r1, #1
 800563c:	69b8      	ldr	r0, [r7, #24]
 800563e:	f7ff fec3 	bl	80053c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00e      	beq.n	8005676 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800566a:	2300      	movs	r3, #0
 800566c:	2200      	movs	r2, #0
 800566e:	2100      	movs	r1, #0
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f837 	bl	80056e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	4603      	mov	r3, r0
 8005686:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005688:	2301      	movs	r3, #1
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	461a      	mov	r2, r3
 8005694:	6939      	ldr	r1, [r7, #16]
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	f7ff ff7d 	bl	8005596 <xQueueGenericCreate>
 800569c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff ffd3 	bl	800564a <prvInitialiseMutex>

		return xNewQueue;
 80056a4:	68fb      	ldr	r3, [r7, #12]
	}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b088      	sub	sp, #32
 80056b2:	af02      	add	r7, sp, #8
 80056b4:	4603      	mov	r3, r0
 80056b6:	6039      	str	r1, [r7, #0]
 80056b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056ba:	2301      	movs	r3, #1
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2200      	movs	r2, #0
 80056ca:	6939      	ldr	r1, [r7, #16]
 80056cc:	6978      	ldr	r0, [r7, #20]
 80056ce:	f7ff fee5 	bl	800549c <xQueueGenericCreateStatic>
 80056d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff ffb8 	bl	800564a <prvInitialiseMutex>

		return xNewQueue;
 80056da:	68fb      	ldr	r3, [r7, #12]
	}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08e      	sub	sp, #56	@ 0x38
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056f2:	2300      	movs	r3, #0
 80056f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <xQueueGenericSend+0x34>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <xQueueGenericSend+0x42>
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <xQueueGenericSend+0x46>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <xQueueGenericSend+0x48>
 800572a:	2300      	movs	r3, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <xQueueGenericSend+0x64>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d103      	bne.n	8005756 <xQueueGenericSend+0x72>
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <xQueueGenericSend+0x76>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <xQueueGenericSend+0x78>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <xQueueGenericSend+0x94>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	623b      	str	r3, [r7, #32]
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005778:	f001 f9d8 	bl	8006b2c <xTaskGetSchedulerState>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <xQueueGenericSend+0xa4>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <xQueueGenericSend+0xa8>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <xQueueGenericSend+0xaa>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <xQueueGenericSend+0xc6>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	61fb      	str	r3, [r7, #28]
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	e7fd      	b.n	80057a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057aa:	f001 fd15 	bl	80071d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d302      	bcc.n	80057c0 <xQueueGenericSend+0xdc>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d129      	bne.n	8005814 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057c6:	f000 fac9 	bl	8005d5c <prvCopyDataToQueue>
 80057ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d010      	beq.n	80057f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	3324      	adds	r3, #36	@ 0x24
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 ffe7 	bl	80067ac <xTaskRemoveFromEventList>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d013      	beq.n	800580c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057e4:	4b3f      	ldr	r3, [pc, #252]	@ (80058e4 <xQueueGenericSend+0x200>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	e00a      	b.n	800580c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057fc:	4b39      	ldr	r3, [pc, #228]	@ (80058e4 <xQueueGenericSend+0x200>)
 80057fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800580c:	f001 fd16 	bl	800723c <vPortExitCritical>
				return pdPASS;
 8005810:	2301      	movs	r3, #1
 8005812:	e063      	b.n	80058dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800581a:	f001 fd0f 	bl	800723c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800581e:	2300      	movs	r3, #0
 8005820:	e05c      	b.n	80058dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005828:	f107 0314 	add.w	r3, r7, #20
 800582c:	4618      	mov	r0, r3
 800582e:	f001 f821 	bl	8006874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005832:	2301      	movs	r3, #1
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005836:	f001 fd01 	bl	800723c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800583a:	f000 fdcf 	bl	80063dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800583e:	f001 fccb 	bl	80071d8 <vPortEnterCritical>
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005848:	b25b      	sxtb	r3, r3
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d103      	bne.n	8005858 <xQueueGenericSend+0x174>
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800585e:	b25b      	sxtb	r3, r3
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005864:	d103      	bne.n	800586e <xQueueGenericSend+0x18a>
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800586e:	f001 fce5 	bl	800723c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005872:	1d3a      	adds	r2, r7, #4
 8005874:	f107 0314 	add.w	r3, r7, #20
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f001 f810 	bl	80068a0 <xTaskCheckForTimeOut>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d124      	bne.n	80058d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005886:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005888:	f000 fb60 	bl	8005f4c <prvIsQueueFull>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d018      	beq.n	80058c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	3310      	adds	r3, #16
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f000 ff60 	bl	8006760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058a2:	f000 faeb 	bl	8005e7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058a6:	f000 fda7 	bl	80063f8 <xTaskResumeAll>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f47f af7c 	bne.w	80057aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80058b2:	4b0c      	ldr	r3, [pc, #48]	@ (80058e4 <xQueueGenericSend+0x200>)
 80058b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	e772      	b.n	80057aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058c6:	f000 fad9 	bl	8005e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ca:	f000 fd95 	bl	80063f8 <xTaskResumeAll>
 80058ce:	e76c      	b.n	80057aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058d2:	f000 fad3 	bl	8005e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058d6:	f000 fd8f 	bl	80063f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3738      	adds	r7, #56	@ 0x38
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08e      	sub	sp, #56	@ 0x38
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	623b      	str	r3, [r7, #32]
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	61fb      	str	r3, [r7, #28]
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <xQueueGiveFromISR+0x5c>
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <xQueueGiveFromISR+0x60>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <xQueueGiveFromISR+0x62>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	61bb      	str	r3, [r7, #24]
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	e7fd      	b.n	8005962 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005966:	f001 fd17 	bl	8007398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800596a:	f3ef 8211 	mrs	r2, BASEPRI
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	617a      	str	r2, [r7, #20]
 8005980:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005982:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005984:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005992:	429a      	cmp	r2, r3
 8005994:	d22b      	bcs.n	80059ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800599c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d112      	bne.n	80059d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d016      	beq.n	80059e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	3324      	adds	r3, #36	@ 0x24
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fef4 	bl	80067ac <xTaskRemoveFromEventList>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00e      	beq.n	80059e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e007      	b.n	80059e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059dc:	3301      	adds	r3, #1
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	b25a      	sxtb	r2, r3
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059e8:	2301      	movs	r3, #1
 80059ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ec:	e001      	b.n	80059f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3738      	adds	r7, #56	@ 0x38
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08e      	sub	sp, #56	@ 0x38
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10b      	bne.n	8005a3c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	623b      	str	r3, [r7, #32]
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	61fb      	str	r3, [r7, #28]
}
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
 8005a5a:	e7fd      	b.n	8005a58 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a5c:	f001 f866 	bl	8006b2c <xTaskGetSchedulerState>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d102      	bne.n	8005a6c <xQueueSemaphoreTake+0x64>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <xQueueSemaphoreTake+0x68>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <xQueueSemaphoreTake+0x6a>
 8005a70:	2300      	movs	r3, #0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	61bb      	str	r3, [r7, #24]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a8e:	f001 fba3 	bl	80071d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d024      	beq.n	8005ae8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa0:	1e5a      	subs	r2, r3, #1
 8005aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005aae:	f001 f9e9 	bl	8006e84 <pvTaskIncrementMutexHeldCount>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00f      	beq.n	8005ae0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac2:	3310      	adds	r3, #16
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fe71 	bl	80067ac <xTaskRemoveFromEventList>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ad0:	4b54      	ldr	r3, [pc, #336]	@ (8005c24 <xQueueSemaphoreTake+0x21c>)
 8005ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ae0:	f001 fbac 	bl	800723c <vPortExitCritical>
				return pdPASS;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e098      	b.n	8005c1a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d112      	bne.n	8005b14 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	617b      	str	r3, [r7, #20]
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b0c:	f001 fb96 	bl	800723c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b10:	2300      	movs	r3, #0
 8005b12:	e082      	b.n	8005c1a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fea8 	bl	8006874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b28:	f001 fb88 	bl	800723c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b2c:	f000 fc56 	bl	80063dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b30:	f001 fb52 	bl	80071d8 <vPortEnterCritical>
 8005b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b3a:	b25b      	sxtb	r3, r3
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d103      	bne.n	8005b4a <xQueueSemaphoreTake+0x142>
 8005b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b50:	b25b      	sxtb	r3, r3
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d103      	bne.n	8005b60 <xQueueSemaphoreTake+0x158>
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b60:	f001 fb6c 	bl	800723c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b64:	463a      	mov	r2, r7
 8005b66:	f107 030c 	add.w	r3, r7, #12
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fe97 	bl	80068a0 <xTaskCheckForTimeOut>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d132      	bne.n	8005bde <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b7a:	f000 f9d1 	bl	8005f20 <prvIsQueueEmpty>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d026      	beq.n	8005bd2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005b8c:	f001 fb24 	bl	80071d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 ffe7 	bl	8006b68 <xTaskPriorityInherit>
 8005b9a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005b9c:	f001 fb4e 	bl	800723c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	3324      	adds	r3, #36	@ 0x24
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fdd9 	bl	8006760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bb0:	f000 f964 	bl	8005e7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bb4:	f000 fc20 	bl	80063f8 <xTaskResumeAll>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f47f af67 	bne.w	8005a8e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005bc0:	4b18      	ldr	r3, [pc, #96]	@ (8005c24 <xQueueSemaphoreTake+0x21c>)
 8005bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	e75d      	b.n	8005a8e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bd4:	f000 f952 	bl	8005e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bd8:	f000 fc0e 	bl	80063f8 <xTaskResumeAll>
 8005bdc:	e757      	b.n	8005a8e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005bde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005be0:	f000 f94c 	bl	8005e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005be4:	f000 fc08 	bl	80063f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bea:	f000 f999 	bl	8005f20 <prvIsQueueEmpty>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f43f af4c 	beq.w	8005a8e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005bfc:	f001 faec 	bl	80071d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c02:	f000 f893 	bl	8005d2c <prvGetDisinheritPriorityAfterTimeout>
 8005c06:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 f8a8 	bl	8006d64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c14:	f001 fb12 	bl	800723c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3738      	adds	r7, #56	@ 0x38
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08e      	sub	sp, #56	@ 0x38
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	623b      	str	r3, [r7, #32]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <xQueueReceiveFromISR+0x3c>
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <xQueueReceiveFromISR+0x40>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <xQueueReceiveFromISR+0x42>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	61fb      	str	r3, [r7, #28]
}
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	e7fd      	b.n	8005c82 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c86:	f001 fb87 	bl	8007398 <vPortValidateInterruptPriority>
	__asm volatile
 8005c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	61ba      	str	r2, [r7, #24]
 8005ca0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ca2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d02f      	beq.n	8005d12 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cc0:	f000 f8b6 	bl	8005e30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc6:	1e5a      	subs	r2, r3, #1
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ccc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d112      	bne.n	8005cfc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d016      	beq.n	8005d0c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	3310      	adds	r3, #16
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fd62 	bl	80067ac <xTaskRemoveFromEventList>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00e      	beq.n	8005d0c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00b      	beq.n	8005d0c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e007      	b.n	8005d0c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d00:	3301      	adds	r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	b25a      	sxtb	r2, r3
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d10:	e001      	b.n	8005d16 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f383 8811 	msr	BASEPRI, r3
}
 8005d20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3738      	adds	r7, #56	@ 0x38
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d006      	beq.n	8005d4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1c3 0307 	rsb	r3, r3, #7
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e001      	b.n	8005d4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10d      	bne.n	8005d96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d14d      	bne.n	8005e1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 ff64 	bl	8006c54 <xTaskPriorityDisinherit>
 8005d8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	609a      	str	r2, [r3, #8]
 8005d94:	e043      	b.n	8005e1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d119      	bne.n	8005dd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6858      	ldr	r0, [r3, #4]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da4:	461a      	mov	r2, r3
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	f001 ff35 	bl	8007c16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db4:	441a      	add	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d32b      	bcc.n	8005e1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	e026      	b.n	8005e1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68d8      	ldr	r0, [r3, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	f001 ff1b 	bl	8007c16 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de8:	425b      	negs	r3, r3
 8005dea:	441a      	add	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d207      	bcs.n	8005e0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e04:	425b      	negs	r3, r3
 8005e06:	441a      	add	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d105      	bne.n	8005e1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005e26:	697b      	ldr	r3, [r7, #20]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d018      	beq.n	8005e74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	441a      	add	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d303      	bcc.n	8005e64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68d9      	ldr	r1, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6838      	ldr	r0, [r7, #0]
 8005e70:	f001 fed1 	bl	8007c16 <memcpy>
	}
}
 8005e74:	bf00      	nop
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e84:	f001 f9a8 	bl	80071d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e90:	e011      	b.n	8005eb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d012      	beq.n	8005ec0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3324      	adds	r3, #36	@ 0x24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fc84 	bl	80067ac <xTaskRemoveFromEventList>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005eaa:	f000 fd5d 	bl	8006968 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	dce9      	bgt.n	8005e92 <prvUnlockQueue+0x16>
 8005ebe:	e000      	b.n	8005ec2 <prvUnlockQueue+0x46>
					break;
 8005ec0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	22ff      	movs	r2, #255	@ 0xff
 8005ec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005eca:	f001 f9b7 	bl	800723c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ece:	f001 f983 	bl	80071d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ed8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eda:	e011      	b.n	8005f00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d012      	beq.n	8005f0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3310      	adds	r3, #16
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fc5f 	bl	80067ac <xTaskRemoveFromEventList>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ef4:	f000 fd38 	bl	8006968 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	dce9      	bgt.n	8005edc <prvUnlockQueue+0x60>
 8005f08:	e000      	b.n	8005f0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	22ff      	movs	r2, #255	@ 0xff
 8005f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f14:	f001 f992 	bl	800723c <vPortExitCritical>
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f28:	f001 f956 	bl	80071d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e001      	b.n	8005f3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f3e:	f001 f97d 	bl	800723c <vPortExitCritical>

	return xReturn;
 8005f42:	68fb      	ldr	r3, [r7, #12]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f54:	f001 f940 	bl	80071d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d102      	bne.n	8005f6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f64:	2301      	movs	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e001      	b.n	8005f6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f6e:	f001 f965 	bl	800723c <vPortExitCritical>

	return xReturn;
 8005f72:	68fb      	ldr	r3, [r7, #12]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08e      	sub	sp, #56	@ 0x38
 8005f80:	af04      	add	r7, sp, #16
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10b      	bne.n	8005fa8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	623b      	str	r3, [r7, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	61fb      	str	r3, [r7, #28]
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	e7fd      	b.n	8005fc2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fc6:	2354      	movs	r3, #84	@ 0x54
 8005fc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b54      	cmp	r3, #84	@ 0x54
 8005fce:	d00b      	beq.n	8005fe8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	61bb      	str	r3, [r7, #24]
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	e7fd      	b.n	8005fe4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fe8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01e      	beq.n	800602e <xTaskCreateStatic+0xb2>
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01b      	beq.n	800602e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ffe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	2202      	movs	r2, #2
 8006004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006008:	2300      	movs	r3, #0
 800600a:	9303      	str	r3, [sp, #12]
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	9302      	str	r3, [sp, #8]
 8006010:	f107 0314 	add.w	r3, r7, #20
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f850 	bl	80060c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006026:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006028:	f000 f8d6 	bl	80061d8 <prvAddNewTaskToReadyList>
 800602c:	e001      	b.n	8006032 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006032:	697b      	ldr	r3, [r7, #20]
	}
 8006034:	4618      	mov	r0, r3
 8006036:	3728      	adds	r7, #40	@ 0x28
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08c      	sub	sp, #48	@ 0x30
 8006040:	af04      	add	r7, sp, #16
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4618      	mov	r0, r3
 8006052:	f001 f9e3 	bl	800741c <pvPortMalloc>
 8006056:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00e      	beq.n	800607c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800605e:	2054      	movs	r0, #84	@ 0x54
 8006060:	f001 f9dc 	bl	800741c <pvPortMalloc>
 8006064:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	631a      	str	r2, [r3, #48]	@ 0x30
 8006072:	e005      	b.n	8006080 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006074:	6978      	ldr	r0, [r7, #20]
 8006076:	f001 fa9f 	bl	80075b8 <vPortFree>
 800607a:	e001      	b.n	8006080 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800607c:	2300      	movs	r3, #0
 800607e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d017      	beq.n	80060b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800608e:	88fa      	ldrh	r2, [r7, #6]
 8006090:	2300      	movs	r3, #0
 8006092:	9303      	str	r3, [sp, #12]
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	9302      	str	r3, [sp, #8]
 8006098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f80e 	bl	80060c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060aa:	69f8      	ldr	r0, [r7, #28]
 80060ac:	f000 f894 	bl	80061d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060b0:	2301      	movs	r3, #1
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	e002      	b.n	80060bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060b6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060bc:	69bb      	ldr	r3, [r7, #24]
	}
 80060be:	4618      	mov	r0, r3
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b088      	sub	sp, #32
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060de:	3b01      	subs	r3, #1
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	f023 0307 	bic.w	r3, r3, #7
 80060ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	617b      	str	r3, [r7, #20]
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01f      	beq.n	8006156 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	e012      	b.n	8006142 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	7819      	ldrb	r1, [r3, #0]
 8006124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	3334      	adds	r3, #52	@ 0x34
 800612c:	460a      	mov	r2, r1
 800612e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	4413      	add	r3, r2
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d006      	beq.n	800614a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	3301      	adds	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2b0f      	cmp	r3, #15
 8006146:	d9e9      	bls.n	800611c <prvInitialiseNewTask+0x56>
 8006148:	e000      	b.n	800614c <prvInitialiseNewTask+0x86>
			{
				break;
 800614a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006154:	e003      	b.n	800615e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800615e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006160:	2b06      	cmp	r3, #6
 8006162:	d901      	bls.n	8006168 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006164:	2306      	movs	r3, #6
 8006166:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800616c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006172:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	2200      	movs	r2, #0
 8006178:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	3304      	adds	r3, #4
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff f88e 	bl	80052a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	3318      	adds	r3, #24
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff f889 	bl	80052a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006192:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006196:	f1c3 0207 	rsb	r2, r3, #7
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	2200      	movs	r2, #0
 80061a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	68f9      	ldr	r1, [r7, #12]
 80061b6:	69b8      	ldr	r0, [r7, #24]
 80061b8:	f000 fede 	bl	8006f78 <pxPortInitialiseStack>
 80061bc:	4602      	mov	r2, r0
 80061be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ce:	bf00      	nop
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061e0:	f000 fffa 	bl	80071d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006290 <prvAddNewTaskToReadyList+0xb8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	4a29      	ldr	r2, [pc, #164]	@ (8006290 <prvAddNewTaskToReadyList+0xb8>)
 80061ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061ee:	4b29      	ldr	r3, [pc, #164]	@ (8006294 <prvAddNewTaskToReadyList+0xbc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061f6:	4a27      	ldr	r2, [pc, #156]	@ (8006294 <prvAddNewTaskToReadyList+0xbc>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061fc:	4b24      	ldr	r3, [pc, #144]	@ (8006290 <prvAddNewTaskToReadyList+0xb8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d110      	bne.n	8006226 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006204:	f000 fbd4 	bl	80069b0 <prvInitialiseTaskLists>
 8006208:	e00d      	b.n	8006226 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800620a:	4b23      	ldr	r3, [pc, #140]	@ (8006298 <prvAddNewTaskToReadyList+0xc0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006212:	4b20      	ldr	r3, [pc, #128]	@ (8006294 <prvAddNewTaskToReadyList+0xbc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	429a      	cmp	r2, r3
 800621e:	d802      	bhi.n	8006226 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006220:	4a1c      	ldr	r2, [pc, #112]	@ (8006294 <prvAddNewTaskToReadyList+0xbc>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006226:	4b1d      	ldr	r3, [pc, #116]	@ (800629c <prvAddNewTaskToReadyList+0xc4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3301      	adds	r3, #1
 800622c:	4a1b      	ldr	r2, [pc, #108]	@ (800629c <prvAddNewTaskToReadyList+0xc4>)
 800622e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	2201      	movs	r2, #1
 8006236:	409a      	lsls	r2, r3
 8006238:	4b19      	ldr	r3, [pc, #100]	@ (80062a0 <prvAddNewTaskToReadyList+0xc8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4313      	orrs	r3, r2
 800623e:	4a18      	ldr	r2, [pc, #96]	@ (80062a0 <prvAddNewTaskToReadyList+0xc8>)
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4a15      	ldr	r2, [pc, #84]	@ (80062a4 <prvAddNewTaskToReadyList+0xcc>)
 8006250:	441a      	add	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3304      	adds	r3, #4
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f7ff f82e 	bl	80052ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800625e:	f000 ffed 	bl	800723c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006262:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <prvAddNewTaskToReadyList+0xc0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00e      	beq.n	8006288 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800626a:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <prvAddNewTaskToReadyList+0xbc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006274:	429a      	cmp	r2, r3
 8006276:	d207      	bcs.n	8006288 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006278:	4b0b      	ldr	r3, [pc, #44]	@ (80062a8 <prvAddNewTaskToReadyList+0xd0>)
 800627a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000544 	.word	0x20000544
 8006294:	20000444 	.word	0x20000444
 8006298:	20000550 	.word	0x20000550
 800629c:	20000560 	.word	0x20000560
 80062a0:	2000054c 	.word	0x2000054c
 80062a4:	20000448 	.word	0x20000448
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d018      	beq.n	80062f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062be:	4b14      	ldr	r3, [pc, #80]	@ (8006310 <vTaskDelay+0x64>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00b      	beq.n	80062de <vTaskDelay+0x32>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60bb      	str	r3, [r7, #8]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062de:	f000 f87d 	bl	80063dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062e2:	2100      	movs	r1, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fde1 	bl	8006eac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062ea:	f000 f885 	bl	80063f8 <xTaskResumeAll>
 80062ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d107      	bne.n	8006306 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80062f6:	4b07      	ldr	r3, [pc, #28]	@ (8006314 <vTaskDelay+0x68>)
 80062f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	2000056c 	.word	0x2000056c
 8006314:	e000ed04 	.word	0xe000ed04

08006318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08a      	sub	sp, #40	@ 0x28
 800631c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006326:	463a      	mov	r2, r7
 8006328:	1d39      	adds	r1, r7, #4
 800632a:	f107 0308 	add.w	r3, r7, #8
 800632e:	4618      	mov	r0, r3
 8006330:	f7fa f934 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	9202      	str	r2, [sp, #8]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	2300      	movs	r3, #0
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	2300      	movs	r3, #0
 8006344:	460a      	mov	r2, r1
 8006346:	491f      	ldr	r1, [pc, #124]	@ (80063c4 <vTaskStartScheduler+0xac>)
 8006348:	481f      	ldr	r0, [pc, #124]	@ (80063c8 <vTaskStartScheduler+0xb0>)
 800634a:	f7ff fe17 	bl	8005f7c <xTaskCreateStatic>
 800634e:	4603      	mov	r3, r0
 8006350:	4a1e      	ldr	r2, [pc, #120]	@ (80063cc <vTaskStartScheduler+0xb4>)
 8006352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006354:	4b1d      	ldr	r3, [pc, #116]	@ (80063cc <vTaskStartScheduler+0xb4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800635c:	2301      	movs	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e001      	b.n	8006366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d116      	bne.n	800639a <vTaskStartScheduler+0x82>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	613b      	str	r3, [r7, #16]
}
 800637e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006380:	4b13      	ldr	r3, [pc, #76]	@ (80063d0 <vTaskStartScheduler+0xb8>)
 8006382:	f04f 32ff 	mov.w	r2, #4294967295
 8006386:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006388:	4b12      	ldr	r3, [pc, #72]	@ (80063d4 <vTaskStartScheduler+0xbc>)
 800638a:	2201      	movs	r2, #1
 800638c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800638e:	4b12      	ldr	r3, [pc, #72]	@ (80063d8 <vTaskStartScheduler+0xc0>)
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006394:	f000 fe7c 	bl	8007090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006398:	e00f      	b.n	80063ba <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d10b      	bne.n	80063ba <vTaskStartScheduler+0xa2>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60fb      	str	r3, [r7, #12]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <vTaskStartScheduler+0x9e>
}
 80063ba:	bf00      	nop
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	08008e7c 	.word	0x08008e7c
 80063c8:	08006981 	.word	0x08006981
 80063cc:	20000568 	.word	0x20000568
 80063d0:	20000564 	.word	0x20000564
 80063d4:	20000550 	.word	0x20000550
 80063d8:	20000548 	.word	0x20000548

080063dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063e0:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <vTaskSuspendAll+0x18>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	4a03      	ldr	r2, [pc, #12]	@ (80063f4 <vTaskSuspendAll+0x18>)
 80063e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063ea:	bf00      	nop
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	2000056c 	.word	0x2000056c

080063f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006402:	2300      	movs	r3, #0
 8006404:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006406:	4b42      	ldr	r3, [pc, #264]	@ (8006510 <xTaskResumeAll+0x118>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <xTaskResumeAll+0x2e>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	603b      	str	r3, [r7, #0]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006426:	f000 fed7 	bl	80071d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800642a:	4b39      	ldr	r3, [pc, #228]	@ (8006510 <xTaskResumeAll+0x118>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3b01      	subs	r3, #1
 8006430:	4a37      	ldr	r2, [pc, #220]	@ (8006510 <xTaskResumeAll+0x118>)
 8006432:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006434:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <xTaskResumeAll+0x118>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d161      	bne.n	8006500 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800643c:	4b35      	ldr	r3, [pc, #212]	@ (8006514 <xTaskResumeAll+0x11c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d05d      	beq.n	8006500 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006444:	e02e      	b.n	80064a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006446:	4b34      	ldr	r3, [pc, #208]	@ (8006518 <xTaskResumeAll+0x120>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3318      	adds	r3, #24
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe ff8e 	bl	8005374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3304      	adds	r3, #4
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe ff89 	bl	8005374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006466:	2201      	movs	r2, #1
 8006468:	409a      	lsls	r2, r3
 800646a:	4b2c      	ldr	r3, [pc, #176]	@ (800651c <xTaskResumeAll+0x124>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4313      	orrs	r3, r2
 8006470:	4a2a      	ldr	r2, [pc, #168]	@ (800651c <xTaskResumeAll+0x124>)
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4a27      	ldr	r2, [pc, #156]	@ (8006520 <xTaskResumeAll+0x128>)
 8006482:	441a      	add	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3304      	adds	r3, #4
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f7fe ff15 	bl	80052ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006494:	4b23      	ldr	r3, [pc, #140]	@ (8006524 <xTaskResumeAll+0x12c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649a:	429a      	cmp	r2, r3
 800649c:	d302      	bcc.n	80064a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800649e:	4b22      	ldr	r3, [pc, #136]	@ (8006528 <xTaskResumeAll+0x130>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006518 <xTaskResumeAll+0x120>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1cc      	bne.n	8006446 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064b2:	f000 fb1b 	bl	8006aec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064b6:	4b1d      	ldr	r3, [pc, #116]	@ (800652c <xTaskResumeAll+0x134>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d010      	beq.n	80064e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064c2:	f000 f837 	bl	8006534 <xTaskIncrementTick>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064cc:	4b16      	ldr	r3, [pc, #88]	@ (8006528 <xTaskResumeAll+0x130>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f1      	bne.n	80064c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064de:	4b13      	ldr	r3, [pc, #76]	@ (800652c <xTaskResumeAll+0x134>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064e4:	4b10      	ldr	r3, [pc, #64]	@ (8006528 <xTaskResumeAll+0x130>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006530 <xTaskResumeAll+0x138>)
 80064f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006500:	f000 fe9c 	bl	800723c <vPortExitCritical>

	return xAlreadyYielded;
 8006504:	68bb      	ldr	r3, [r7, #8]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	2000056c 	.word	0x2000056c
 8006514:	20000544 	.word	0x20000544
 8006518:	20000504 	.word	0x20000504
 800651c:	2000054c 	.word	0x2000054c
 8006520:	20000448 	.word	0x20000448
 8006524:	20000444 	.word	0x20000444
 8006528:	20000558 	.word	0x20000558
 800652c:	20000554 	.word	0x20000554
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800653e:	4b4f      	ldr	r3, [pc, #316]	@ (800667c <xTaskIncrementTick+0x148>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f040 808f 	bne.w	8006666 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006548:	4b4d      	ldr	r3, [pc, #308]	@ (8006680 <xTaskIncrementTick+0x14c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006550:	4a4b      	ldr	r2, [pc, #300]	@ (8006680 <xTaskIncrementTick+0x14c>)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d121      	bne.n	80065a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800655c:	4b49      	ldr	r3, [pc, #292]	@ (8006684 <xTaskIncrementTick+0x150>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00b      	beq.n	800657e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	603b      	str	r3, [r7, #0]
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	e7fd      	b.n	800657a <xTaskIncrementTick+0x46>
 800657e:	4b41      	ldr	r3, [pc, #260]	@ (8006684 <xTaskIncrementTick+0x150>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	4b40      	ldr	r3, [pc, #256]	@ (8006688 <xTaskIncrementTick+0x154>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a3e      	ldr	r2, [pc, #248]	@ (8006684 <xTaskIncrementTick+0x150>)
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	4a3e      	ldr	r2, [pc, #248]	@ (8006688 <xTaskIncrementTick+0x154>)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	4b3e      	ldr	r3, [pc, #248]	@ (800668c <xTaskIncrementTick+0x158>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3301      	adds	r3, #1
 8006598:	4a3c      	ldr	r2, [pc, #240]	@ (800668c <xTaskIncrementTick+0x158>)
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	f000 faa6 	bl	8006aec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006690 <xTaskIncrementTick+0x15c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d348      	bcc.n	800663c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065aa:	4b36      	ldr	r3, [pc, #216]	@ (8006684 <xTaskIncrementTick+0x150>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b4:	4b36      	ldr	r3, [pc, #216]	@ (8006690 <xTaskIncrementTick+0x15c>)
 80065b6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ba:	601a      	str	r2, [r3, #0]
					break;
 80065bc:	e03e      	b.n	800663c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065be:	4b31      	ldr	r3, [pc, #196]	@ (8006684 <xTaskIncrementTick+0x150>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d203      	bcs.n	80065de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065d6:	4a2e      	ldr	r2, [pc, #184]	@ (8006690 <xTaskIncrementTick+0x15c>)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065dc:	e02e      	b.n	800663c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fec6 	bl	8005374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d004      	beq.n	80065fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	3318      	adds	r3, #24
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe febd 	bl	8005374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fe:	2201      	movs	r2, #1
 8006600:	409a      	lsls	r2, r3
 8006602:	4b24      	ldr	r3, [pc, #144]	@ (8006694 <xTaskIncrementTick+0x160>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4313      	orrs	r3, r2
 8006608:	4a22      	ldr	r2, [pc, #136]	@ (8006694 <xTaskIncrementTick+0x160>)
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4a1f      	ldr	r2, [pc, #124]	@ (8006698 <xTaskIncrementTick+0x164>)
 800661a:	441a      	add	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f7fe fe49 	bl	80052ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800662c:	4b1b      	ldr	r3, [pc, #108]	@ (800669c <xTaskIncrementTick+0x168>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006632:	429a      	cmp	r2, r3
 8006634:	d3b9      	bcc.n	80065aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006636:	2301      	movs	r3, #1
 8006638:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800663a:	e7b6      	b.n	80065aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800663c:	4b17      	ldr	r3, [pc, #92]	@ (800669c <xTaskIncrementTick+0x168>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006642:	4915      	ldr	r1, [pc, #84]	@ (8006698 <xTaskIncrementTick+0x164>)
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d901      	bls.n	8006658 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006654:	2301      	movs	r3, #1
 8006656:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006658:	4b11      	ldr	r3, [pc, #68]	@ (80066a0 <xTaskIncrementTick+0x16c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006660:	2301      	movs	r3, #1
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	e004      	b.n	8006670 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006666:	4b0f      	ldr	r3, [pc, #60]	@ (80066a4 <xTaskIncrementTick+0x170>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	4a0d      	ldr	r2, [pc, #52]	@ (80066a4 <xTaskIncrementTick+0x170>)
 800666e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006670:	697b      	ldr	r3, [r7, #20]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	2000056c 	.word	0x2000056c
 8006680:	20000548 	.word	0x20000548
 8006684:	200004fc 	.word	0x200004fc
 8006688:	20000500 	.word	0x20000500
 800668c:	2000055c 	.word	0x2000055c
 8006690:	20000564 	.word	0x20000564
 8006694:	2000054c 	.word	0x2000054c
 8006698:	20000448 	.word	0x20000448
 800669c:	20000444 	.word	0x20000444
 80066a0:	20000558 	.word	0x20000558
 80066a4:	20000554 	.word	0x20000554

080066a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066ae:	4b27      	ldr	r3, [pc, #156]	@ (800674c <vTaskSwitchContext+0xa4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066b6:	4b26      	ldr	r3, [pc, #152]	@ (8006750 <vTaskSwitchContext+0xa8>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066bc:	e040      	b.n	8006740 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80066be:	4b24      	ldr	r3, [pc, #144]	@ (8006750 <vTaskSwitchContext+0xa8>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c4:	4b23      	ldr	r3, [pc, #140]	@ (8006754 <vTaskSwitchContext+0xac>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	fab3 f383 	clz	r3, r3
 80066d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80066d2:	7afb      	ldrb	r3, [r7, #11]
 80066d4:	f1c3 031f 	rsb	r3, r3, #31
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	491f      	ldr	r1, [pc, #124]	@ (8006758 <vTaskSwitchContext+0xb0>)
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10b      	bne.n	8006706 <vTaskSwitchContext+0x5e>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	607b      	str	r3, [r7, #4]
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <vTaskSwitchContext+0x5a>
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4a11      	ldr	r2, [pc, #68]	@ (8006758 <vTaskSwitchContext+0xb0>)
 8006712:	4413      	add	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	605a      	str	r2, [r3, #4]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	3308      	adds	r3, #8
 8006728:	429a      	cmp	r2, r3
 800672a:	d104      	bne.n	8006736 <vTaskSwitchContext+0x8e>
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	4a07      	ldr	r2, [pc, #28]	@ (800675c <vTaskSwitchContext+0xb4>)
 800673e:	6013      	str	r3, [r2, #0]
}
 8006740:	bf00      	nop
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	2000056c 	.word	0x2000056c
 8006750:	20000558 	.word	0x20000558
 8006754:	2000054c 	.word	0x2000054c
 8006758:	20000448 	.word	0x20000448
 800675c:	20000444 	.word	0x20000444

08006760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	60fb      	str	r3, [r7, #12]
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006788:	4b07      	ldr	r3, [pc, #28]	@ (80067a8 <vTaskPlaceOnEventList+0x48>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3318      	adds	r3, #24
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7fe fdb6 	bl	8005302 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006796:	2101      	movs	r1, #1
 8006798:	6838      	ldr	r0, [r7, #0]
 800679a:	f000 fb87 	bl	8006eac <prvAddCurrentTaskToDelayedList>
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000444 	.word	0x20000444

080067ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	60fb      	str	r3, [r7, #12]
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	e7fd      	b.n	80067d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	3318      	adds	r3, #24
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fdc8 	bl	8005374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067e4:	4b1d      	ldr	r3, [pc, #116]	@ (800685c <xTaskRemoveFromEventList+0xb0>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11c      	bne.n	8006826 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe fdbf 	bl	8005374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fa:	2201      	movs	r2, #1
 80067fc:	409a      	lsls	r2, r3
 80067fe:	4b18      	ldr	r3, [pc, #96]	@ (8006860 <xTaskRemoveFromEventList+0xb4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4313      	orrs	r3, r2
 8006804:	4a16      	ldr	r2, [pc, #88]	@ (8006860 <xTaskRemoveFromEventList+0xb4>)
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4a13      	ldr	r2, [pc, #76]	@ (8006864 <xTaskRemoveFromEventList+0xb8>)
 8006816:	441a      	add	r2, r3
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	3304      	adds	r3, #4
 800681c:	4619      	mov	r1, r3
 800681e:	4610      	mov	r0, r2
 8006820:	f7fe fd4b 	bl	80052ba <vListInsertEnd>
 8006824:	e005      	b.n	8006832 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3318      	adds	r3, #24
 800682a:	4619      	mov	r1, r3
 800682c:	480e      	ldr	r0, [pc, #56]	@ (8006868 <xTaskRemoveFromEventList+0xbc>)
 800682e:	f7fe fd44 	bl	80052ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006836:	4b0d      	ldr	r3, [pc, #52]	@ (800686c <xTaskRemoveFromEventList+0xc0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683c:	429a      	cmp	r2, r3
 800683e:	d905      	bls.n	800684c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006840:	2301      	movs	r3, #1
 8006842:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006844:	4b0a      	ldr	r3, [pc, #40]	@ (8006870 <xTaskRemoveFromEventList+0xc4>)
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e001      	b.n	8006850 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006850:	697b      	ldr	r3, [r7, #20]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	2000056c 	.word	0x2000056c
 8006860:	2000054c 	.word	0x2000054c
 8006864:	20000448 	.word	0x20000448
 8006868:	20000504 	.word	0x20000504
 800686c:	20000444 	.word	0x20000444
 8006870:	20000558 	.word	0x20000558

08006874 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800687c:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <vTaskInternalSetTimeOutState+0x24>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006884:	4b05      	ldr	r3, [pc, #20]	@ (800689c <vTaskInternalSetTimeOutState+0x28>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	605a      	str	r2, [r3, #4]
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	2000055c 	.word	0x2000055c
 800689c:	20000548 	.word	0x20000548

080068a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	613b      	str	r3, [r7, #16]
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	e7fd      	b.n	80068c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60fb      	str	r3, [r7, #12]
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	e7fd      	b.n	80068e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80068e6:	f000 fc77 	bl	80071d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006960 <xTaskCheckForTimeOut+0xc0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d102      	bne.n	800690a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006904:	2300      	movs	r3, #0
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	e023      	b.n	8006952 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <xTaskCheckForTimeOut+0xc4>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d007      	beq.n	8006926 <xTaskCheckForTimeOut+0x86>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	429a      	cmp	r2, r3
 800691e:	d302      	bcc.n	8006926 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e015      	b.n	8006952 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	429a      	cmp	r2, r3
 800692e:	d20b      	bcs.n	8006948 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff ff99 	bl	8006874 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	e004      	b.n	8006952 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800694e:	2301      	movs	r3, #1
 8006950:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006952:	f000 fc73 	bl	800723c <vPortExitCritical>

	return xReturn;
 8006956:	69fb      	ldr	r3, [r7, #28]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000548 	.word	0x20000548
 8006964:	2000055c 	.word	0x2000055c

08006968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800696c:	4b03      	ldr	r3, [pc, #12]	@ (800697c <vTaskMissedYield+0x14>)
 800696e:	2201      	movs	r2, #1
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20000558 	.word	0x20000558

08006980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006988:	f000 f852 	bl	8006a30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800698c:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <prvIdleTask+0x28>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d9f9      	bls.n	8006988 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006994:	4b05      	ldr	r3, [pc, #20]	@ (80069ac <prvIdleTask+0x2c>)
 8006996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069a4:	e7f0      	b.n	8006988 <prvIdleTask+0x8>
 80069a6:	bf00      	nop
 80069a8:	20000448 	.word	0x20000448
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	e00c      	b.n	80069d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4a12      	ldr	r2, [pc, #72]	@ (8006a10 <prvInitialiseTaskLists+0x60>)
 80069c8:	4413      	add	r3, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe fc48 	bl	8005260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3301      	adds	r3, #1
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b06      	cmp	r3, #6
 80069da:	d9ef      	bls.n	80069bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069dc:	480d      	ldr	r0, [pc, #52]	@ (8006a14 <prvInitialiseTaskLists+0x64>)
 80069de:	f7fe fc3f 	bl	8005260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069e2:	480d      	ldr	r0, [pc, #52]	@ (8006a18 <prvInitialiseTaskLists+0x68>)
 80069e4:	f7fe fc3c 	bl	8005260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069e8:	480c      	ldr	r0, [pc, #48]	@ (8006a1c <prvInitialiseTaskLists+0x6c>)
 80069ea:	f7fe fc39 	bl	8005260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069ee:	480c      	ldr	r0, [pc, #48]	@ (8006a20 <prvInitialiseTaskLists+0x70>)
 80069f0:	f7fe fc36 	bl	8005260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069f4:	480b      	ldr	r0, [pc, #44]	@ (8006a24 <prvInitialiseTaskLists+0x74>)
 80069f6:	f7fe fc33 	bl	8005260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006a28 <prvInitialiseTaskLists+0x78>)
 80069fc:	4a05      	ldr	r2, [pc, #20]	@ (8006a14 <prvInitialiseTaskLists+0x64>)
 80069fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a00:	4b0a      	ldr	r3, [pc, #40]	@ (8006a2c <prvInitialiseTaskLists+0x7c>)
 8006a02:	4a05      	ldr	r2, [pc, #20]	@ (8006a18 <prvInitialiseTaskLists+0x68>)
 8006a04:	601a      	str	r2, [r3, #0]
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000448 	.word	0x20000448
 8006a14:	200004d4 	.word	0x200004d4
 8006a18:	200004e8 	.word	0x200004e8
 8006a1c:	20000504 	.word	0x20000504
 8006a20:	20000518 	.word	0x20000518
 8006a24:	20000530 	.word	0x20000530
 8006a28:	200004fc 	.word	0x200004fc
 8006a2c:	20000500 	.word	0x20000500

08006a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a36:	e019      	b.n	8006a6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a38:	f000 fbce 	bl	80071d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a3c:	4b10      	ldr	r3, [pc, #64]	@ (8006a80 <prvCheckTasksWaitingTermination+0x50>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fc93 	bl	8005374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <prvCheckTasksWaitingTermination+0x54>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	4a0b      	ldr	r2, [pc, #44]	@ (8006a84 <prvCheckTasksWaitingTermination+0x54>)
 8006a56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a58:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <prvCheckTasksWaitingTermination+0x58>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a88 <prvCheckTasksWaitingTermination+0x58>)
 8006a60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a62:	f000 fbeb 	bl	800723c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f810 	bl	8006a8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a6c:	4b06      	ldr	r3, [pc, #24]	@ (8006a88 <prvCheckTasksWaitingTermination+0x58>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e1      	bne.n	8006a38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000518 	.word	0x20000518
 8006a84:	20000544 	.word	0x20000544
 8006a88:	2000052c 	.word	0x2000052c

08006a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d108      	bne.n	8006ab0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fd88 	bl	80075b8 <vPortFree>
				vPortFree( pxTCB );
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fd85 	bl	80075b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006aae:	e019      	b.n	8006ae4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d103      	bne.n	8006ac2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fd7c 	bl	80075b8 <vPortFree>
	}
 8006ac0:	e010      	b.n	8006ae4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d00b      	beq.n	8006ae4 <prvDeleteTCB+0x58>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60fb      	str	r3, [r7, #12]
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <prvDeleteTCB+0x54>
	}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006af2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b24 <prvResetNextTaskUnblockTime+0x38>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <prvResetNextTaskUnblockTime+0x3c>)
 8006afe:	f04f 32ff 	mov.w	r2, #4294967295
 8006b02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b04:	e008      	b.n	8006b18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b06:	4b07      	ldr	r3, [pc, #28]	@ (8006b24 <prvResetNextTaskUnblockTime+0x38>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	4a04      	ldr	r2, [pc, #16]	@ (8006b28 <prvResetNextTaskUnblockTime+0x3c>)
 8006b16:	6013      	str	r3, [r2, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	200004fc 	.word	0x200004fc
 8006b28:	20000564 	.word	0x20000564

08006b2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b32:	4b0b      	ldr	r3, [pc, #44]	@ (8006b60 <xTaskGetSchedulerState+0x34>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	607b      	str	r3, [r7, #4]
 8006b3e:	e008      	b.n	8006b52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b40:	4b08      	ldr	r3, [pc, #32]	@ (8006b64 <xTaskGetSchedulerState+0x38>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d102      	bne.n	8006b4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	607b      	str	r3, [r7, #4]
 8006b4c:	e001      	b.n	8006b52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b52:	687b      	ldr	r3, [r7, #4]
	}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20000550 	.word	0x20000550
 8006b64:	2000056c 	.word	0x2000056c

08006b68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d05e      	beq.n	8006c3c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b82:	4b31      	ldr	r3, [pc, #196]	@ (8006c48 <xTaskPriorityInherit+0xe0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d24e      	bcs.n	8006c2a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	db06      	blt.n	8006ba2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b94:	4b2c      	ldr	r3, [pc, #176]	@ (8006c48 <xTaskPriorityInherit+0xe0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	f1c3 0207 	rsb	r2, r3, #7
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6959      	ldr	r1, [r3, #20]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4a26      	ldr	r2, [pc, #152]	@ (8006c4c <xTaskPriorityInherit+0xe4>)
 8006bb4:	4413      	add	r3, r2
 8006bb6:	4299      	cmp	r1, r3
 8006bb8:	d12f      	bne.n	8006c1a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fe fbd8 	bl	8005374 <uxListRemove>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	2201      	movs	r2, #1
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	43da      	mvns	r2, r3
 8006bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c50 <xTaskPriorityInherit+0xe8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8006c50 <xTaskPriorityInherit+0xe8>)
 8006bde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006be0:	4b19      	ldr	r3, [pc, #100]	@ (8006c48 <xTaskPriorityInherit+0xe0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	2201      	movs	r2, #1
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	4b17      	ldr	r3, [pc, #92]	@ (8006c50 <xTaskPriorityInherit+0xe8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	4a15      	ldr	r2, [pc, #84]	@ (8006c50 <xTaskPriorityInherit+0xe8>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4a10      	ldr	r2, [pc, #64]	@ (8006c4c <xTaskPriorityInherit+0xe4>)
 8006c0a:	441a      	add	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fe fb51 	bl	80052ba <vListInsertEnd>
 8006c18:	e004      	b.n	8006c24 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <xTaskPriorityInherit+0xe0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	e008      	b.n	8006c3c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c2e:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <xTaskPriorityInherit+0xe0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d201      	bcs.n	8006c3c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
	}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000444 	.word	0x20000444
 8006c4c:	20000448 	.word	0x20000448
 8006c50:	2000054c 	.word	0x2000054c

08006c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d070      	beq.n	8006d4c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d58 <xTaskPriorityDisinherit+0x104>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d00b      	beq.n	8006c8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	60fb      	str	r3, [r7, #12]
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	e7fd      	b.n	8006c88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10b      	bne.n	8006cac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	60bb      	str	r3, [r7, #8]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb0:	1e5a      	subs	r2, r3, #1
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d044      	beq.n	8006d4c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d140      	bne.n	8006d4c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fb50 	bl	8005374 <uxListRemove>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d115      	bne.n	8006d06 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	491f      	ldr	r1, [pc, #124]	@ (8006d5c <xTaskPriorityDisinherit+0x108>)
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xTaskPriorityDisinherit+0xb2>
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	43da      	mvns	r2, r3
 8006cfc:	4b18      	ldr	r3, [pc, #96]	@ (8006d60 <xTaskPriorityDisinherit+0x10c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4013      	ands	r3, r2
 8006d02:	4a17      	ldr	r2, [pc, #92]	@ (8006d60 <xTaskPriorityDisinherit+0x10c>)
 8006d04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d12:	f1c3 0207 	rsb	r2, r3, #7
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1e:	2201      	movs	r2, #1
 8006d20:	409a      	lsls	r2, r3
 8006d22:	4b0f      	ldr	r3, [pc, #60]	@ (8006d60 <xTaskPriorityDisinherit+0x10c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	4a0d      	ldr	r2, [pc, #52]	@ (8006d60 <xTaskPriorityDisinherit+0x10c>)
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4a08      	ldr	r2, [pc, #32]	@ (8006d5c <xTaskPriorityDisinherit+0x108>)
 8006d3a:	441a      	add	r2, r3
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	4619      	mov	r1, r3
 8006d42:	4610      	mov	r0, r2
 8006d44:	f7fe fab9 	bl	80052ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d4c:	697b      	ldr	r3, [r7, #20]
	}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000444 	.word	0x20000444
 8006d5c:	20000448 	.word	0x20000448
 8006d60:	2000054c 	.word	0x2000054c

08006d64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d72:	2301      	movs	r3, #1
 8006d74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d079      	beq.n	8006e70 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	60fb      	str	r3, [r7, #12]
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d902      	bls.n	8006dac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	e002      	b.n	8006db2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d059      	beq.n	8006e70 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d154      	bne.n	8006e70 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8006e78 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d10b      	bne.n	8006de8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60bb      	str	r3, [r7, #8]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	db04      	blt.n	8006e06 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f1c3 0207 	rsb	r2, r3, #7
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	6959      	ldr	r1, [r3, #20]
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4a19      	ldr	r2, [pc, #100]	@ (8006e7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006e16:	4413      	add	r3, r2
 8006e18:	4299      	cmp	r1, r3
 8006e1a:	d129      	bne.n	8006e70 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe faa7 	bl	8005374 <uxListRemove>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e30:	2201      	movs	r2, #1
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	43da      	mvns	r2, r3
 8006e38:	4b11      	ldr	r3, [pc, #68]	@ (8006e80 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	4a10      	ldr	r2, [pc, #64]	@ (8006e80 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	2201      	movs	r2, #1
 8006e48:	409a      	lsls	r2, r3
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e80 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	4a0b      	ldr	r2, [pc, #44]	@ (8006e80 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4a06      	ldr	r2, [pc, #24]	@ (8006e7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006e62:	441a      	add	r2, r3
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f7fe fa25 	bl	80052ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e70:	bf00      	nop
 8006e72:	3720      	adds	r7, #32
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000444 	.word	0x20000444
 8006e7c:	20000448 	.word	0x20000448
 8006e80:	2000054c 	.word	0x2000054c

08006e84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e88:	4b07      	ldr	r3, [pc, #28]	@ (8006ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e90:	4b05      	ldr	r3, [pc, #20]	@ (8006ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e96:	3201      	adds	r2, #1
 8006e98:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8006e9a:	4b03      	ldr	r3, [pc, #12]	@ (8006ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
	}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20000444 	.word	0x20000444

08006eac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eb6:	4b29      	ldr	r3, [pc, #164]	@ (8006f5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ebc:	4b28      	ldr	r3, [pc, #160]	@ (8006f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fa56 	bl	8005374 <uxListRemove>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006ece:	4b24      	ldr	r3, [pc, #144]	@ (8006f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	43da      	mvns	r2, r3
 8006edc:	4b21      	ldr	r3, [pc, #132]	@ (8006f64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	4a20      	ldr	r2, [pc, #128]	@ (8006f64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ee4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d10a      	bne.n	8006f04 <prvAddCurrentTaskToDelayedList+0x58>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	4619      	mov	r1, r3
 8006efc:	481a      	ldr	r0, [pc, #104]	@ (8006f68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006efe:	f7fe f9dc 	bl	80052ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f02:	e026      	b.n	8006f52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4413      	add	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f0c:	4b14      	ldr	r3, [pc, #80]	@ (8006f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d209      	bcs.n	8006f30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f1c:	4b13      	ldr	r3, [pc, #76]	@ (8006f6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	4b0f      	ldr	r3, [pc, #60]	@ (8006f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4619      	mov	r1, r3
 8006f28:	4610      	mov	r0, r2
 8006f2a:	f7fe f9ea 	bl	8005302 <vListInsert>
}
 8006f2e:	e010      	b.n	8006f52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f30:	4b0f      	ldr	r3, [pc, #60]	@ (8006f70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	4b0a      	ldr	r3, [pc, #40]	@ (8006f60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f7fe f9e0 	bl	8005302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f42:	4b0c      	ldr	r3, [pc, #48]	@ (8006f74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d202      	bcs.n	8006f52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f4c:	4a09      	ldr	r2, [pc, #36]	@ (8006f74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6013      	str	r3, [r2, #0]
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000548 	.word	0x20000548
 8006f60:	20000444 	.word	0x20000444
 8006f64:	2000054c 	.word	0x2000054c
 8006f68:	20000530 	.word	0x20000530
 8006f6c:	20000500 	.word	0x20000500
 8006f70:	200004fc 	.word	0x200004fc
 8006f74:	20000564 	.word	0x20000564

08006f78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3b04      	subs	r3, #4
 8006f88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3b04      	subs	r3, #4
 8006f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f023 0201 	bic.w	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3b04      	subs	r3, #4
 8006fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8006fdc <pxPortInitialiseStack+0x64>)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3b14      	subs	r3, #20
 8006fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f06f 0202 	mvn.w	r2, #2
 8006fc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3b20      	subs	r3, #32
 8006fcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fce:	68fb      	ldr	r3, [r7, #12]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	08006fe1 	.word	0x08006fe1

08006fe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fea:	4b13      	ldr	r3, [pc, #76]	@ (8007038 <prvTaskExitError+0x58>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d00b      	beq.n	800700c <prvTaskExitError+0x2c>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	60fb      	str	r3, [r7, #12]
}
 8007006:	bf00      	nop
 8007008:	bf00      	nop
 800700a:	e7fd      	b.n	8007008 <prvTaskExitError+0x28>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	60bb      	str	r3, [r7, #8]
}
 800701e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007020:	bf00      	nop
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0fc      	beq.n	8007022 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	200000a0 	.word	0x200000a0
 800703c:	00000000 	.word	0x00000000

08007040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <pxCurrentTCBConst2>)
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	6808      	ldr	r0, [r1, #0]
 8007046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704a:	f380 8809 	msr	PSP, r0
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f04f 0000 	mov.w	r0, #0
 8007056:	f380 8811 	msr	BASEPRI, r0
 800705a:	4770      	bx	lr
 800705c:	f3af 8000 	nop.w

08007060 <pxCurrentTCBConst2>:
 8007060:	20000444 	.word	0x20000444
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop

08007068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007068:	4808      	ldr	r0, [pc, #32]	@ (800708c <prvPortStartFirstTask+0x24>)
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	6800      	ldr	r0, [r0, #0]
 800706e:	f380 8808 	msr	MSP, r0
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8814 	msr	CONTROL, r0
 800707a:	b662      	cpsie	i
 800707c:	b661      	cpsie	f
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	df00      	svc	0
 8007088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800708a:	bf00      	nop
 800708c:	e000ed08 	.word	0xe000ed08

08007090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007096:	4b47      	ldr	r3, [pc, #284]	@ (80071b4 <xPortStartScheduler+0x124>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a47      	ldr	r2, [pc, #284]	@ (80071b8 <xPortStartScheduler+0x128>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d10b      	bne.n	80070b8 <xPortStartScheduler+0x28>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	60fb      	str	r3, [r7, #12]
}
 80070b2:	bf00      	nop
 80070b4:	bf00      	nop
 80070b6:	e7fd      	b.n	80070b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070b8:	4b3e      	ldr	r3, [pc, #248]	@ (80071b4 <xPortStartScheduler+0x124>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a3f      	ldr	r2, [pc, #252]	@ (80071bc <xPortStartScheduler+0x12c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d10b      	bne.n	80070da <xPortStartScheduler+0x4a>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	613b      	str	r3, [r7, #16]
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070da:	4b39      	ldr	r3, [pc, #228]	@ (80071c0 <xPortStartScheduler+0x130>)
 80070dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	22ff      	movs	r2, #255	@ 0xff
 80070ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4b31      	ldr	r3, [pc, #196]	@ (80071c4 <xPortStartScheduler+0x134>)
 8007100:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007102:	4b31      	ldr	r3, [pc, #196]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007104:	2207      	movs	r2, #7
 8007106:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007108:	e009      	b.n	800711e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800710a:	4b2f      	ldr	r3, [pc, #188]	@ (80071c8 <xPortStartScheduler+0x138>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3b01      	subs	r3, #1
 8007110:	4a2d      	ldr	r2, [pc, #180]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007112:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007126:	2b80      	cmp	r3, #128	@ 0x80
 8007128:	d0ef      	beq.n	800710a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800712a:	4b27      	ldr	r3, [pc, #156]	@ (80071c8 <xPortStartScheduler+0x138>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f1c3 0307 	rsb	r3, r3, #7
 8007132:	2b04      	cmp	r3, #4
 8007134:	d00b      	beq.n	800714e <xPortStartScheduler+0xbe>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	60bb      	str	r3, [r7, #8]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800714e:	4b1e      	ldr	r3, [pc, #120]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	4a1c      	ldr	r2, [pc, #112]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007158:	4b1b      	ldr	r3, [pc, #108]	@ (80071c8 <xPortStartScheduler+0x138>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007160:	4a19      	ldr	r2, [pc, #100]	@ (80071c8 <xPortStartScheduler+0x138>)
 8007162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800716c:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <xPortStartScheduler+0x13c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a16      	ldr	r2, [pc, #88]	@ (80071cc <xPortStartScheduler+0x13c>)
 8007172:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007178:	4b14      	ldr	r3, [pc, #80]	@ (80071cc <xPortStartScheduler+0x13c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a13      	ldr	r2, [pc, #76]	@ (80071cc <xPortStartScheduler+0x13c>)
 800717e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007184:	f000 f8da 	bl	800733c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007188:	4b11      	ldr	r3, [pc, #68]	@ (80071d0 <xPortStartScheduler+0x140>)
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800718e:	f000 f8f9 	bl	8007384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007192:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <xPortStartScheduler+0x144>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a0f      	ldr	r2, [pc, #60]	@ (80071d4 <xPortStartScheduler+0x144>)
 8007198:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800719c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800719e:	f7ff ff63 	bl	8007068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071a2:	f7ff fa81 	bl	80066a8 <vTaskSwitchContext>
	prvTaskExitError();
 80071a6:	f7ff ff1b 	bl	8006fe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	e000ed00 	.word	0xe000ed00
 80071b8:	410fc271 	.word	0x410fc271
 80071bc:	410fc270 	.word	0x410fc270
 80071c0:	e000e400 	.word	0xe000e400
 80071c4:	20000570 	.word	0x20000570
 80071c8:	20000574 	.word	0x20000574
 80071cc:	e000ed20 	.word	0xe000ed20
 80071d0:	200000a0 	.word	0x200000a0
 80071d4:	e000ef34 	.word	0xe000ef34

080071d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	607b      	str	r3, [r7, #4]
}
 80071f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071f2:	4b10      	ldr	r3, [pc, #64]	@ (8007234 <vPortEnterCritical+0x5c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3301      	adds	r3, #1
 80071f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007234 <vPortEnterCritical+0x5c>)
 80071fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <vPortEnterCritical+0x5c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d110      	bne.n	8007226 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007204:	4b0c      	ldr	r3, [pc, #48]	@ (8007238 <vPortEnterCritical+0x60>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <vPortEnterCritical+0x4e>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	603b      	str	r3, [r7, #0]
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <vPortEnterCritical+0x4a>
	}
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	200000a0 	.word	0x200000a0
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007242:	4b12      	ldr	r3, [pc, #72]	@ (800728c <vPortExitCritical+0x50>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10b      	bne.n	8007262 <vPortExitCritical+0x26>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	607b      	str	r3, [r7, #4]
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	e7fd      	b.n	800725e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007262:	4b0a      	ldr	r3, [pc, #40]	@ (800728c <vPortExitCritical+0x50>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3b01      	subs	r3, #1
 8007268:	4a08      	ldr	r2, [pc, #32]	@ (800728c <vPortExitCritical+0x50>)
 800726a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800726c:	4b07      	ldr	r3, [pc, #28]	@ (800728c <vPortExitCritical+0x50>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <vPortExitCritical+0x44>
 8007274:	2300      	movs	r3, #0
 8007276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f383 8811 	msr	BASEPRI, r3
}
 800727e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	200000a0 	.word	0x200000a0

08007290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007290:	f3ef 8009 	mrs	r0, PSP
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	4b15      	ldr	r3, [pc, #84]	@ (80072f0 <pxCurrentTCBConst>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	f01e 0f10 	tst.w	lr, #16
 80072a0:	bf08      	it	eq
 80072a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	6010      	str	r0, [r2, #0]
 80072ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80072b4:	f380 8811 	msr	BASEPRI, r0
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f7ff f9f2 	bl	80066a8 <vTaskSwitchContext>
 80072c4:	f04f 0000 	mov.w	r0, #0
 80072c8:	f380 8811 	msr	BASEPRI, r0
 80072cc:	bc09      	pop	{r0, r3}
 80072ce:	6819      	ldr	r1, [r3, #0]
 80072d0:	6808      	ldr	r0, [r1, #0]
 80072d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d6:	f01e 0f10 	tst.w	lr, #16
 80072da:	bf08      	it	eq
 80072dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072e0:	f380 8809 	msr	PSP, r0
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	f3af 8000 	nop.w

080072f0 <pxCurrentTCBConst>:
 80072f0:	20000444 	.word	0x20000444
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop

080072f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007312:	f7ff f90f 	bl	8006534 <xTaskIncrementTick>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800731c:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <xPortSysTickHandler+0x40>)
 800731e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f383 8811 	msr	BASEPRI, r3
}
 800732e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007340:	4b0b      	ldr	r3, [pc, #44]	@ (8007370 <vPortSetupTimerInterrupt+0x34>)
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007346:	4b0b      	ldr	r3, [pc, #44]	@ (8007374 <vPortSetupTimerInterrupt+0x38>)
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800734c:	4b0a      	ldr	r3, [pc, #40]	@ (8007378 <vPortSetupTimerInterrupt+0x3c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0a      	ldr	r2, [pc, #40]	@ (800737c <vPortSetupTimerInterrupt+0x40>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	099b      	lsrs	r3, r3, #6
 8007358:	4a09      	ldr	r2, [pc, #36]	@ (8007380 <vPortSetupTimerInterrupt+0x44>)
 800735a:	3b01      	subs	r3, #1
 800735c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800735e:	4b04      	ldr	r3, [pc, #16]	@ (8007370 <vPortSetupTimerInterrupt+0x34>)
 8007360:	2207      	movs	r2, #7
 8007362:	601a      	str	r2, [r3, #0]
}
 8007364:	bf00      	nop
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	e000e010 	.word	0xe000e010
 8007374:	e000e018 	.word	0xe000e018
 8007378:	20000074 	.word	0x20000074
 800737c:	10624dd3 	.word	0x10624dd3
 8007380:	e000e014 	.word	0xe000e014

08007384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007384:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007394 <vPortEnableVFP+0x10>
 8007388:	6801      	ldr	r1, [r0, #0]
 800738a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800738e:	6001      	str	r1, [r0, #0]
 8007390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007392:	bf00      	nop
 8007394:	e000ed88 	.word	0xe000ed88

08007398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800739e:	f3ef 8305 	mrs	r3, IPSR
 80073a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b0f      	cmp	r3, #15
 80073a8:	d915      	bls.n	80073d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073aa:	4a18      	ldr	r2, [pc, #96]	@ (800740c <vPortValidateInterruptPriority+0x74>)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073b4:	4b16      	ldr	r3, [pc, #88]	@ (8007410 <vPortValidateInterruptPriority+0x78>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	7afa      	ldrb	r2, [r7, #11]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d20b      	bcs.n	80073d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	607b      	str	r3, [r7, #4]
}
 80073d0:	bf00      	nop
 80073d2:	bf00      	nop
 80073d4:	e7fd      	b.n	80073d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007414 <vPortValidateInterruptPriority+0x7c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80073de:	4b0e      	ldr	r3, [pc, #56]	@ (8007418 <vPortValidateInterruptPriority+0x80>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d90b      	bls.n	80073fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	603b      	str	r3, [r7, #0]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <vPortValidateInterruptPriority+0x62>
	}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	e000e3f0 	.word	0xe000e3f0
 8007410:	20000570 	.word	0x20000570
 8007414:	e000ed0c 	.word	0xe000ed0c
 8007418:	20000574 	.word	0x20000574

0800741c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08a      	sub	sp, #40	@ 0x28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007428:	f7fe ffd8 	bl	80063dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800742c:	4b5c      	ldr	r3, [pc, #368]	@ (80075a0 <pvPortMalloc+0x184>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007434:	f000 f924 	bl	8007680 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007438:	4b5a      	ldr	r3, [pc, #360]	@ (80075a4 <pvPortMalloc+0x188>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4013      	ands	r3, r2
 8007440:	2b00      	cmp	r3, #0
 8007442:	f040 8095 	bne.w	8007570 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01e      	beq.n	800748a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800744c:	2208      	movs	r2, #8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4413      	add	r3, r2
 8007452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d015      	beq.n	800748a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f023 0307 	bic.w	r3, r3, #7
 8007464:	3308      	adds	r3, #8
 8007466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <pvPortMalloc+0x6e>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	617b      	str	r3, [r7, #20]
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	e7fd      	b.n	8007486 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d06f      	beq.n	8007570 <pvPortMalloc+0x154>
 8007490:	4b45      	ldr	r3, [pc, #276]	@ (80075a8 <pvPortMalloc+0x18c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	d86a      	bhi.n	8007570 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800749a:	4b44      	ldr	r3, [pc, #272]	@ (80075ac <pvPortMalloc+0x190>)
 800749c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800749e:	4b43      	ldr	r3, [pc, #268]	@ (80075ac <pvPortMalloc+0x190>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074a4:	e004      	b.n	80074b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d903      	bls.n	80074c2 <pvPortMalloc+0xa6>
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f1      	bne.n	80074a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074c2:	4b37      	ldr	r3, [pc, #220]	@ (80075a0 <pvPortMalloc+0x184>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d051      	beq.n	8007570 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2208      	movs	r2, #8
 80074d2:	4413      	add	r3, r2
 80074d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	1ad2      	subs	r2, r2, r3
 80074e6:	2308      	movs	r3, #8
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d920      	bls.n	8007530 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4413      	add	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <pvPortMalloc+0xfc>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	613b      	str	r3, [r7, #16]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800752a:	69b8      	ldr	r0, [r7, #24]
 800752c:	f000 f90a 	bl	8007744 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007530:	4b1d      	ldr	r3, [pc, #116]	@ (80075a8 <pvPortMalloc+0x18c>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	4a1b      	ldr	r2, [pc, #108]	@ (80075a8 <pvPortMalloc+0x18c>)
 800753c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800753e:	4b1a      	ldr	r3, [pc, #104]	@ (80075a8 <pvPortMalloc+0x18c>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4b1b      	ldr	r3, [pc, #108]	@ (80075b0 <pvPortMalloc+0x194>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d203      	bcs.n	8007552 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800754a:	4b17      	ldr	r3, [pc, #92]	@ (80075a8 <pvPortMalloc+0x18c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a18      	ldr	r2, [pc, #96]	@ (80075b0 <pvPortMalloc+0x194>)
 8007550:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4b13      	ldr	r3, [pc, #76]	@ (80075a4 <pvPortMalloc+0x188>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	431a      	orrs	r2, r3
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007566:	4b13      	ldr	r3, [pc, #76]	@ (80075b4 <pvPortMalloc+0x198>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3301      	adds	r3, #1
 800756c:	4a11      	ldr	r2, [pc, #68]	@ (80075b4 <pvPortMalloc+0x198>)
 800756e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007570:	f7fe ff42 	bl	80063f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00b      	beq.n	8007596 <pvPortMalloc+0x17a>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60fb      	str	r3, [r7, #12]
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	e7fd      	b.n	8007592 <pvPortMalloc+0x176>
	return pvReturn;
 8007596:	69fb      	ldr	r3, [r7, #28]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3728      	adds	r7, #40	@ 0x28
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20004180 	.word	0x20004180
 80075a4:	20004194 	.word	0x20004194
 80075a8:	20004184 	.word	0x20004184
 80075ac:	20004178 	.word	0x20004178
 80075b0:	20004188 	.word	0x20004188
 80075b4:	2000418c 	.word	0x2000418c

080075b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d04f      	beq.n	800766a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075ca:	2308      	movs	r3, #8
 80075cc:	425b      	negs	r3, r3
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4413      	add	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	4b25      	ldr	r3, [pc, #148]	@ (8007674 <vPortFree+0xbc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <vPortFree+0x46>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60fb      	str	r3, [r7, #12]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <vPortFree+0x66>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	60bb      	str	r3, [r7, #8]
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	e7fd      	b.n	800761a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	4b14      	ldr	r3, [pc, #80]	@ (8007674 <vPortFree+0xbc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4013      	ands	r3, r2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01e      	beq.n	800766a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d11a      	bne.n	800766a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	4b0e      	ldr	r3, [pc, #56]	@ (8007674 <vPortFree+0xbc>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	43db      	mvns	r3, r3
 800763e:	401a      	ands	r2, r3
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007644:	f7fe feca 	bl	80063dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	4b0a      	ldr	r3, [pc, #40]	@ (8007678 <vPortFree+0xc0>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4413      	add	r3, r2
 8007652:	4a09      	ldr	r2, [pc, #36]	@ (8007678 <vPortFree+0xc0>)
 8007654:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007656:	6938      	ldr	r0, [r7, #16]
 8007658:	f000 f874 	bl	8007744 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800765c:	4b07      	ldr	r3, [pc, #28]	@ (800767c <vPortFree+0xc4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3301      	adds	r3, #1
 8007662:	4a06      	ldr	r2, [pc, #24]	@ (800767c <vPortFree+0xc4>)
 8007664:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007666:	f7fe fec7 	bl	80063f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800766a:	bf00      	nop
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20004194 	.word	0x20004194
 8007678:	20004184 	.word	0x20004184
 800767c:	20004190 	.word	0x20004190

08007680 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007686:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800768a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800768c:	4b27      	ldr	r3, [pc, #156]	@ (800772c <prvHeapInit+0xac>)
 800768e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00c      	beq.n	80076b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3307      	adds	r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0307 	bic.w	r3, r3, #7
 80076a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	4a1f      	ldr	r2, [pc, #124]	@ (800772c <prvHeapInit+0xac>)
 80076b0:	4413      	add	r3, r2
 80076b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007730 <prvHeapInit+0xb0>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076be:	4b1c      	ldr	r3, [pc, #112]	@ (8007730 <prvHeapInit+0xb0>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	4413      	add	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076cc:	2208      	movs	r2, #8
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0307 	bic.w	r3, r3, #7
 80076da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4a15      	ldr	r2, [pc, #84]	@ (8007734 <prvHeapInit+0xb4>)
 80076e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076e2:	4b14      	ldr	r3, [pc, #80]	@ (8007734 <prvHeapInit+0xb4>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ea:	4b12      	ldr	r3, [pc, #72]	@ (8007734 <prvHeapInit+0xb4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	1ad2      	subs	r2, r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007700:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <prvHeapInit+0xb4>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	4a0a      	ldr	r2, [pc, #40]	@ (8007738 <prvHeapInit+0xb8>)
 800770e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4a09      	ldr	r2, [pc, #36]	@ (800773c <prvHeapInit+0xbc>)
 8007716:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007718:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <prvHeapInit+0xc0>)
 800771a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800771e:	601a      	str	r2, [r3, #0]
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20000578 	.word	0x20000578
 8007730:	20004178 	.word	0x20004178
 8007734:	20004180 	.word	0x20004180
 8007738:	20004188 	.word	0x20004188
 800773c:	20004184 	.word	0x20004184
 8007740:	20004194 	.word	0x20004194

08007744 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800774c:	4b28      	ldr	r3, [pc, #160]	@ (80077f0 <prvInsertBlockIntoFreeList+0xac>)
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e002      	b.n	8007758 <prvInsertBlockIntoFreeList+0x14>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	429a      	cmp	r2, r3
 8007760:	d8f7      	bhi.n	8007752 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	429a      	cmp	r2, r3
 8007772:	d108      	bne.n	8007786 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	441a      	add	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	441a      	add	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d118      	bne.n	80077cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b15      	ldr	r3, [pc, #84]	@ (80077f4 <prvInsertBlockIntoFreeList+0xb0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d00d      	beq.n	80077c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	441a      	add	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e008      	b.n	80077d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077c2:	4b0c      	ldr	r3, [pc, #48]	@ (80077f4 <prvInsertBlockIntoFreeList+0xb0>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e003      	b.n	80077d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d002      	beq.n	80077e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077e2:	bf00      	nop
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	20004178 	.word	0x20004178
 80077f4:	20004180 	.word	0x20004180

080077f8 <srand>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4b10      	ldr	r3, [pc, #64]	@ (800783c <srand+0x44>)
 80077fc:	681d      	ldr	r5, [r3, #0]
 80077fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007800:	4604      	mov	r4, r0
 8007802:	b9b3      	cbnz	r3, 8007832 <srand+0x3a>
 8007804:	2018      	movs	r0, #24
 8007806:	f000 fa7d 	bl	8007d04 <malloc>
 800780a:	4602      	mov	r2, r0
 800780c:	6328      	str	r0, [r5, #48]	@ 0x30
 800780e:	b920      	cbnz	r0, 800781a <srand+0x22>
 8007810:	4b0b      	ldr	r3, [pc, #44]	@ (8007840 <srand+0x48>)
 8007812:	480c      	ldr	r0, [pc, #48]	@ (8007844 <srand+0x4c>)
 8007814:	2146      	movs	r1, #70	@ 0x46
 8007816:	f000 fa0d 	bl	8007c34 <__assert_func>
 800781a:	490b      	ldr	r1, [pc, #44]	@ (8007848 <srand+0x50>)
 800781c:	4b0b      	ldr	r3, [pc, #44]	@ (800784c <srand+0x54>)
 800781e:	e9c0 1300 	strd	r1, r3, [r0]
 8007822:	4b0b      	ldr	r3, [pc, #44]	@ (8007850 <srand+0x58>)
 8007824:	6083      	str	r3, [r0, #8]
 8007826:	230b      	movs	r3, #11
 8007828:	8183      	strh	r3, [r0, #12]
 800782a:	2100      	movs	r1, #0
 800782c:	2001      	movs	r0, #1
 800782e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007832:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007834:	2200      	movs	r2, #0
 8007836:	611c      	str	r4, [r3, #16]
 8007838:	615a      	str	r2, [r3, #20]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	200000b0 	.word	0x200000b0
 8007840:	0800a374 	.word	0x0800a374
 8007844:	0800a38b 	.word	0x0800a38b
 8007848:	abcd330e 	.word	0xabcd330e
 800784c:	e66d1234 	.word	0xe66d1234
 8007850:	0005deec 	.word	0x0005deec

08007854 <rand>:
 8007854:	4b16      	ldr	r3, [pc, #88]	@ (80078b0 <rand+0x5c>)
 8007856:	b510      	push	{r4, lr}
 8007858:	681c      	ldr	r4, [r3, #0]
 800785a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800785c:	b9b3      	cbnz	r3, 800788c <rand+0x38>
 800785e:	2018      	movs	r0, #24
 8007860:	f000 fa50 	bl	8007d04 <malloc>
 8007864:	4602      	mov	r2, r0
 8007866:	6320      	str	r0, [r4, #48]	@ 0x30
 8007868:	b920      	cbnz	r0, 8007874 <rand+0x20>
 800786a:	4b12      	ldr	r3, [pc, #72]	@ (80078b4 <rand+0x60>)
 800786c:	4812      	ldr	r0, [pc, #72]	@ (80078b8 <rand+0x64>)
 800786e:	2152      	movs	r1, #82	@ 0x52
 8007870:	f000 f9e0 	bl	8007c34 <__assert_func>
 8007874:	4911      	ldr	r1, [pc, #68]	@ (80078bc <rand+0x68>)
 8007876:	4b12      	ldr	r3, [pc, #72]	@ (80078c0 <rand+0x6c>)
 8007878:	e9c0 1300 	strd	r1, r3, [r0]
 800787c:	4b11      	ldr	r3, [pc, #68]	@ (80078c4 <rand+0x70>)
 800787e:	6083      	str	r3, [r0, #8]
 8007880:	230b      	movs	r3, #11
 8007882:	8183      	strh	r3, [r0, #12]
 8007884:	2100      	movs	r1, #0
 8007886:	2001      	movs	r0, #1
 8007888:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800788c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800788e:	480e      	ldr	r0, [pc, #56]	@ (80078c8 <rand+0x74>)
 8007890:	690b      	ldr	r3, [r1, #16]
 8007892:	694c      	ldr	r4, [r1, #20]
 8007894:	4a0d      	ldr	r2, [pc, #52]	@ (80078cc <rand+0x78>)
 8007896:	4358      	muls	r0, r3
 8007898:	fb02 0004 	mla	r0, r2, r4, r0
 800789c:	fba3 3202 	umull	r3, r2, r3, r2
 80078a0:	3301      	adds	r3, #1
 80078a2:	eb40 0002 	adc.w	r0, r0, r2
 80078a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80078aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80078ae:	bd10      	pop	{r4, pc}
 80078b0:	200000b0 	.word	0x200000b0
 80078b4:	0800a374 	.word	0x0800a374
 80078b8:	0800a38b 	.word	0x0800a38b
 80078bc:	abcd330e 	.word	0xabcd330e
 80078c0:	e66d1234 	.word	0xe66d1234
 80078c4:	0005deec 	.word	0x0005deec
 80078c8:	5851f42d 	.word	0x5851f42d
 80078cc:	4c957f2d 	.word	0x4c957f2d

080078d0 <std>:
 80078d0:	2300      	movs	r3, #0
 80078d2:	b510      	push	{r4, lr}
 80078d4:	4604      	mov	r4, r0
 80078d6:	e9c0 3300 	strd	r3, r3, [r0]
 80078da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078de:	6083      	str	r3, [r0, #8]
 80078e0:	8181      	strh	r1, [r0, #12]
 80078e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80078e4:	81c2      	strh	r2, [r0, #14]
 80078e6:	6183      	str	r3, [r0, #24]
 80078e8:	4619      	mov	r1, r3
 80078ea:	2208      	movs	r2, #8
 80078ec:	305c      	adds	r0, #92	@ 0x5c
 80078ee:	f000 f916 	bl	8007b1e <memset>
 80078f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <std+0x58>)
 80078f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80078f6:	4b0d      	ldr	r3, [pc, #52]	@ (800792c <std+0x5c>)
 80078f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007930 <std+0x60>)
 80078fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007934 <std+0x64>)
 8007900:	6323      	str	r3, [r4, #48]	@ 0x30
 8007902:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <std+0x68>)
 8007904:	6224      	str	r4, [r4, #32]
 8007906:	429c      	cmp	r4, r3
 8007908:	d006      	beq.n	8007918 <std+0x48>
 800790a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800790e:	4294      	cmp	r4, r2
 8007910:	d002      	beq.n	8007918 <std+0x48>
 8007912:	33d0      	adds	r3, #208	@ 0xd0
 8007914:	429c      	cmp	r4, r3
 8007916:	d105      	bne.n	8007924 <std+0x54>
 8007918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800791c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007920:	f000 b976 	b.w	8007c10 <__retarget_lock_init_recursive>
 8007924:	bd10      	pop	{r4, pc}
 8007926:	bf00      	nop
 8007928:	08007a99 	.word	0x08007a99
 800792c:	08007abb 	.word	0x08007abb
 8007930:	08007af3 	.word	0x08007af3
 8007934:	08007b17 	.word	0x08007b17
 8007938:	20004198 	.word	0x20004198

0800793c <stdio_exit_handler>:
 800793c:	4a02      	ldr	r2, [pc, #8]	@ (8007948 <stdio_exit_handler+0xc>)
 800793e:	4903      	ldr	r1, [pc, #12]	@ (800794c <stdio_exit_handler+0x10>)
 8007940:	4803      	ldr	r0, [pc, #12]	@ (8007950 <stdio_exit_handler+0x14>)
 8007942:	f000 b869 	b.w	8007a18 <_fwalk_sglue>
 8007946:	bf00      	nop
 8007948:	200000a4 	.word	0x200000a4
 800794c:	08008541 	.word	0x08008541
 8007950:	200000b4 	.word	0x200000b4

08007954 <cleanup_stdio>:
 8007954:	6841      	ldr	r1, [r0, #4]
 8007956:	4b0c      	ldr	r3, [pc, #48]	@ (8007988 <cleanup_stdio+0x34>)
 8007958:	4299      	cmp	r1, r3
 800795a:	b510      	push	{r4, lr}
 800795c:	4604      	mov	r4, r0
 800795e:	d001      	beq.n	8007964 <cleanup_stdio+0x10>
 8007960:	f000 fdee 	bl	8008540 <_fflush_r>
 8007964:	68a1      	ldr	r1, [r4, #8]
 8007966:	4b09      	ldr	r3, [pc, #36]	@ (800798c <cleanup_stdio+0x38>)
 8007968:	4299      	cmp	r1, r3
 800796a:	d002      	beq.n	8007972 <cleanup_stdio+0x1e>
 800796c:	4620      	mov	r0, r4
 800796e:	f000 fde7 	bl	8008540 <_fflush_r>
 8007972:	68e1      	ldr	r1, [r4, #12]
 8007974:	4b06      	ldr	r3, [pc, #24]	@ (8007990 <cleanup_stdio+0x3c>)
 8007976:	4299      	cmp	r1, r3
 8007978:	d004      	beq.n	8007984 <cleanup_stdio+0x30>
 800797a:	4620      	mov	r0, r4
 800797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007980:	f000 bdde 	b.w	8008540 <_fflush_r>
 8007984:	bd10      	pop	{r4, pc}
 8007986:	bf00      	nop
 8007988:	20004198 	.word	0x20004198
 800798c:	20004200 	.word	0x20004200
 8007990:	20004268 	.word	0x20004268

08007994 <global_stdio_init.part.0>:
 8007994:	b510      	push	{r4, lr}
 8007996:	4b0b      	ldr	r3, [pc, #44]	@ (80079c4 <global_stdio_init.part.0+0x30>)
 8007998:	4c0b      	ldr	r4, [pc, #44]	@ (80079c8 <global_stdio_init.part.0+0x34>)
 800799a:	4a0c      	ldr	r2, [pc, #48]	@ (80079cc <global_stdio_init.part.0+0x38>)
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	4620      	mov	r0, r4
 80079a0:	2200      	movs	r2, #0
 80079a2:	2104      	movs	r1, #4
 80079a4:	f7ff ff94 	bl	80078d0 <std>
 80079a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079ac:	2201      	movs	r2, #1
 80079ae:	2109      	movs	r1, #9
 80079b0:	f7ff ff8e 	bl	80078d0 <std>
 80079b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079b8:	2202      	movs	r2, #2
 80079ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079be:	2112      	movs	r1, #18
 80079c0:	f7ff bf86 	b.w	80078d0 <std>
 80079c4:	200042d0 	.word	0x200042d0
 80079c8:	20004198 	.word	0x20004198
 80079cc:	0800793d 	.word	0x0800793d

080079d0 <__sfp_lock_acquire>:
 80079d0:	4801      	ldr	r0, [pc, #4]	@ (80079d8 <__sfp_lock_acquire+0x8>)
 80079d2:	f000 b91e 	b.w	8007c12 <__retarget_lock_acquire_recursive>
 80079d6:	bf00      	nop
 80079d8:	200042d9 	.word	0x200042d9

080079dc <__sfp_lock_release>:
 80079dc:	4801      	ldr	r0, [pc, #4]	@ (80079e4 <__sfp_lock_release+0x8>)
 80079de:	f000 b919 	b.w	8007c14 <__retarget_lock_release_recursive>
 80079e2:	bf00      	nop
 80079e4:	200042d9 	.word	0x200042d9

080079e8 <__sinit>:
 80079e8:	b510      	push	{r4, lr}
 80079ea:	4604      	mov	r4, r0
 80079ec:	f7ff fff0 	bl	80079d0 <__sfp_lock_acquire>
 80079f0:	6a23      	ldr	r3, [r4, #32]
 80079f2:	b11b      	cbz	r3, 80079fc <__sinit+0x14>
 80079f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f8:	f7ff bff0 	b.w	80079dc <__sfp_lock_release>
 80079fc:	4b04      	ldr	r3, [pc, #16]	@ (8007a10 <__sinit+0x28>)
 80079fe:	6223      	str	r3, [r4, #32]
 8007a00:	4b04      	ldr	r3, [pc, #16]	@ (8007a14 <__sinit+0x2c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f5      	bne.n	80079f4 <__sinit+0xc>
 8007a08:	f7ff ffc4 	bl	8007994 <global_stdio_init.part.0>
 8007a0c:	e7f2      	b.n	80079f4 <__sinit+0xc>
 8007a0e:	bf00      	nop
 8007a10:	08007955 	.word	0x08007955
 8007a14:	200042d0 	.word	0x200042d0

08007a18 <_fwalk_sglue>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	4688      	mov	r8, r1
 8007a20:	4614      	mov	r4, r2
 8007a22:	2600      	movs	r6, #0
 8007a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a28:	f1b9 0901 	subs.w	r9, r9, #1
 8007a2c:	d505      	bpl.n	8007a3a <_fwalk_sglue+0x22>
 8007a2e:	6824      	ldr	r4, [r4, #0]
 8007a30:	2c00      	cmp	r4, #0
 8007a32:	d1f7      	bne.n	8007a24 <_fwalk_sglue+0xc>
 8007a34:	4630      	mov	r0, r6
 8007a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3a:	89ab      	ldrh	r3, [r5, #12]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d907      	bls.n	8007a50 <_fwalk_sglue+0x38>
 8007a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a44:	3301      	adds	r3, #1
 8007a46:	d003      	beq.n	8007a50 <_fwalk_sglue+0x38>
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	47c0      	blx	r8
 8007a4e:	4306      	orrs	r6, r0
 8007a50:	3568      	adds	r5, #104	@ 0x68
 8007a52:	e7e9      	b.n	8007a28 <_fwalk_sglue+0x10>

08007a54 <siprintf>:
 8007a54:	b40e      	push	{r1, r2, r3}
 8007a56:	b510      	push	{r4, lr}
 8007a58:	b09d      	sub	sp, #116	@ 0x74
 8007a5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007a5c:	9002      	str	r0, [sp, #8]
 8007a5e:	9006      	str	r0, [sp, #24]
 8007a60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a64:	480a      	ldr	r0, [pc, #40]	@ (8007a90 <siprintf+0x3c>)
 8007a66:	9107      	str	r1, [sp, #28]
 8007a68:	9104      	str	r1, [sp, #16]
 8007a6a:	490a      	ldr	r1, [pc, #40]	@ (8007a94 <siprintf+0x40>)
 8007a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a70:	9105      	str	r1, [sp, #20]
 8007a72:	2400      	movs	r4, #0
 8007a74:	a902      	add	r1, sp, #8
 8007a76:	6800      	ldr	r0, [r0, #0]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007a7c:	f000 fa54 	bl	8007f28 <_svfiprintf_r>
 8007a80:	9b02      	ldr	r3, [sp, #8]
 8007a82:	701c      	strb	r4, [r3, #0]
 8007a84:	b01d      	add	sp, #116	@ 0x74
 8007a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a8a:	b003      	add	sp, #12
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	200000b0 	.word	0x200000b0
 8007a94:	ffff0208 	.word	0xffff0208

08007a98 <__sread>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa0:	f000 f868 	bl	8007b74 <_read_r>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	bfab      	itete	ge
 8007aa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8007aac:	181b      	addge	r3, r3, r0
 8007aae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ab2:	bfac      	ite	ge
 8007ab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ab6:	81a3      	strhlt	r3, [r4, #12]
 8007ab8:	bd10      	pop	{r4, pc}

08007aba <__swrite>:
 8007aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007abe:	461f      	mov	r7, r3
 8007ac0:	898b      	ldrh	r3, [r1, #12]
 8007ac2:	05db      	lsls	r3, r3, #23
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	4616      	mov	r6, r2
 8007aca:	d505      	bpl.n	8007ad8 <__swrite+0x1e>
 8007acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f000 f83c 	bl	8007b50 <_lseek_r>
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ade:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ae2:	81a3      	strh	r3, [r4, #12]
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	4628      	mov	r0, r5
 8007aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aee:	f000 b853 	b.w	8007b98 <_write_r>

08007af2 <__sseek>:
 8007af2:	b510      	push	{r4, lr}
 8007af4:	460c      	mov	r4, r1
 8007af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afa:	f000 f829 	bl	8007b50 <_lseek_r>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	bf15      	itete	ne
 8007b04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b0e:	81a3      	strheq	r3, [r4, #12]
 8007b10:	bf18      	it	ne
 8007b12:	81a3      	strhne	r3, [r4, #12]
 8007b14:	bd10      	pop	{r4, pc}

08007b16 <__sclose>:
 8007b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1a:	f000 b809 	b.w	8007b30 <_close_r>

08007b1e <memset>:
 8007b1e:	4402      	add	r2, r0
 8007b20:	4603      	mov	r3, r0
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d100      	bne.n	8007b28 <memset+0xa>
 8007b26:	4770      	bx	lr
 8007b28:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2c:	e7f9      	b.n	8007b22 <memset+0x4>
	...

08007b30 <_close_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d06      	ldr	r5, [pc, #24]	@ (8007b4c <_close_r+0x1c>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7fa fcb3 	bl	80024a6 <_close>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_close_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_close_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	200042d4 	.word	0x200042d4

08007b50 <_lseek_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d07      	ldr	r5, [pc, #28]	@ (8007b70 <_lseek_r+0x20>)
 8007b54:	4604      	mov	r4, r0
 8007b56:	4608      	mov	r0, r1
 8007b58:	4611      	mov	r1, r2
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	602a      	str	r2, [r5, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f7fa fcc8 	bl	80024f4 <_lseek>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d102      	bne.n	8007b6e <_lseek_r+0x1e>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	b103      	cbz	r3, 8007b6e <_lseek_r+0x1e>
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	200042d4 	.word	0x200042d4

08007b74 <_read_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d07      	ldr	r5, [pc, #28]	@ (8007b94 <_read_r+0x20>)
 8007b78:	4604      	mov	r4, r0
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	2200      	movs	r2, #0
 8007b80:	602a      	str	r2, [r5, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f7fa fc56 	bl	8002434 <_read>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_read_r+0x1e>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_read_r+0x1e>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	200042d4 	.word	0x200042d4

08007b98 <_write_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4d07      	ldr	r5, [pc, #28]	@ (8007bb8 <_write_r+0x20>)
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	4608      	mov	r0, r1
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	602a      	str	r2, [r5, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f7fa fc61 	bl	800246e <_write>
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	d102      	bne.n	8007bb6 <_write_r+0x1e>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	b103      	cbz	r3, 8007bb6 <_write_r+0x1e>
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
 8007bb8:	200042d4 	.word	0x200042d4

08007bbc <__errno>:
 8007bbc:	4b01      	ldr	r3, [pc, #4]	@ (8007bc4 <__errno+0x8>)
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	200000b0 	.word	0x200000b0

08007bc8 <__libc_init_array>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	4d0d      	ldr	r5, [pc, #52]	@ (8007c00 <__libc_init_array+0x38>)
 8007bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8007c04 <__libc_init_array+0x3c>)
 8007bce:	1b64      	subs	r4, r4, r5
 8007bd0:	10a4      	asrs	r4, r4, #2
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	42a6      	cmp	r6, r4
 8007bd6:	d109      	bne.n	8007bec <__libc_init_array+0x24>
 8007bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8007c08 <__libc_init_array+0x40>)
 8007bda:	4c0c      	ldr	r4, [pc, #48]	@ (8007c0c <__libc_init_array+0x44>)
 8007bdc:	f000 ffee 	bl	8008bbc <_init>
 8007be0:	1b64      	subs	r4, r4, r5
 8007be2:	10a4      	asrs	r4, r4, #2
 8007be4:	2600      	movs	r6, #0
 8007be6:	42a6      	cmp	r6, r4
 8007be8:	d105      	bne.n	8007bf6 <__libc_init_array+0x2e>
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf0:	4798      	blx	r3
 8007bf2:	3601      	adds	r6, #1
 8007bf4:	e7ee      	b.n	8007bd4 <__libc_init_array+0xc>
 8007bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bfa:	4798      	blx	r3
 8007bfc:	3601      	adds	r6, #1
 8007bfe:	e7f2      	b.n	8007be6 <__libc_init_array+0x1e>
 8007c00:	0800a45c 	.word	0x0800a45c
 8007c04:	0800a45c 	.word	0x0800a45c
 8007c08:	0800a45c 	.word	0x0800a45c
 8007c0c:	0800a460 	.word	0x0800a460

08007c10 <__retarget_lock_init_recursive>:
 8007c10:	4770      	bx	lr

08007c12 <__retarget_lock_acquire_recursive>:
 8007c12:	4770      	bx	lr

08007c14 <__retarget_lock_release_recursive>:
 8007c14:	4770      	bx	lr

08007c16 <memcpy>:
 8007c16:	440a      	add	r2, r1
 8007c18:	4291      	cmp	r1, r2
 8007c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c1e:	d100      	bne.n	8007c22 <memcpy+0xc>
 8007c20:	4770      	bx	lr
 8007c22:	b510      	push	{r4, lr}
 8007c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c2c:	4291      	cmp	r1, r2
 8007c2e:	d1f9      	bne.n	8007c24 <memcpy+0xe>
 8007c30:	bd10      	pop	{r4, pc}
	...

08007c34 <__assert_func>:
 8007c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c36:	4614      	mov	r4, r2
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4b09      	ldr	r3, [pc, #36]	@ (8007c60 <__assert_func+0x2c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4605      	mov	r5, r0
 8007c40:	68d8      	ldr	r0, [r3, #12]
 8007c42:	b14c      	cbz	r4, 8007c58 <__assert_func+0x24>
 8007c44:	4b07      	ldr	r3, [pc, #28]	@ (8007c64 <__assert_func+0x30>)
 8007c46:	9100      	str	r1, [sp, #0]
 8007c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c4c:	4906      	ldr	r1, [pc, #24]	@ (8007c68 <__assert_func+0x34>)
 8007c4e:	462b      	mov	r3, r5
 8007c50:	f000 fc9e 	bl	8008590 <fiprintf>
 8007c54:	f000 fcd8 	bl	8008608 <abort>
 8007c58:	4b04      	ldr	r3, [pc, #16]	@ (8007c6c <__assert_func+0x38>)
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	e7f3      	b.n	8007c46 <__assert_func+0x12>
 8007c5e:	bf00      	nop
 8007c60:	200000b0 	.word	0x200000b0
 8007c64:	0800a3e3 	.word	0x0800a3e3
 8007c68:	0800a3f0 	.word	0x0800a3f0
 8007c6c:	0800a41e 	.word	0x0800a41e

08007c70 <_free_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4605      	mov	r5, r0
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d041      	beq.n	8007cfc <_free_r+0x8c>
 8007c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c7c:	1f0c      	subs	r4, r1, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bfb8      	it	lt
 8007c82:	18e4      	addlt	r4, r4, r3
 8007c84:	f000 f8e8 	bl	8007e58 <__malloc_lock>
 8007c88:	4a1d      	ldr	r2, [pc, #116]	@ (8007d00 <_free_r+0x90>)
 8007c8a:	6813      	ldr	r3, [r2, #0]
 8007c8c:	b933      	cbnz	r3, 8007c9c <_free_r+0x2c>
 8007c8e:	6063      	str	r3, [r4, #4]
 8007c90:	6014      	str	r4, [r2, #0]
 8007c92:	4628      	mov	r0, r5
 8007c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c98:	f000 b8e4 	b.w	8007e64 <__malloc_unlock>
 8007c9c:	42a3      	cmp	r3, r4
 8007c9e:	d908      	bls.n	8007cb2 <_free_r+0x42>
 8007ca0:	6820      	ldr	r0, [r4, #0]
 8007ca2:	1821      	adds	r1, r4, r0
 8007ca4:	428b      	cmp	r3, r1
 8007ca6:	bf01      	itttt	eq
 8007ca8:	6819      	ldreq	r1, [r3, #0]
 8007caa:	685b      	ldreq	r3, [r3, #4]
 8007cac:	1809      	addeq	r1, r1, r0
 8007cae:	6021      	streq	r1, [r4, #0]
 8007cb0:	e7ed      	b.n	8007c8e <_free_r+0x1e>
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	b10b      	cbz	r3, 8007cbc <_free_r+0x4c>
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	d9fa      	bls.n	8007cb2 <_free_r+0x42>
 8007cbc:	6811      	ldr	r1, [r2, #0]
 8007cbe:	1850      	adds	r0, r2, r1
 8007cc0:	42a0      	cmp	r0, r4
 8007cc2:	d10b      	bne.n	8007cdc <_free_r+0x6c>
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	4401      	add	r1, r0
 8007cc8:	1850      	adds	r0, r2, r1
 8007cca:	4283      	cmp	r3, r0
 8007ccc:	6011      	str	r1, [r2, #0]
 8007cce:	d1e0      	bne.n	8007c92 <_free_r+0x22>
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	6053      	str	r3, [r2, #4]
 8007cd6:	4408      	add	r0, r1
 8007cd8:	6010      	str	r0, [r2, #0]
 8007cda:	e7da      	b.n	8007c92 <_free_r+0x22>
 8007cdc:	d902      	bls.n	8007ce4 <_free_r+0x74>
 8007cde:	230c      	movs	r3, #12
 8007ce0:	602b      	str	r3, [r5, #0]
 8007ce2:	e7d6      	b.n	8007c92 <_free_r+0x22>
 8007ce4:	6820      	ldr	r0, [r4, #0]
 8007ce6:	1821      	adds	r1, r4, r0
 8007ce8:	428b      	cmp	r3, r1
 8007cea:	bf04      	itt	eq
 8007cec:	6819      	ldreq	r1, [r3, #0]
 8007cee:	685b      	ldreq	r3, [r3, #4]
 8007cf0:	6063      	str	r3, [r4, #4]
 8007cf2:	bf04      	itt	eq
 8007cf4:	1809      	addeq	r1, r1, r0
 8007cf6:	6021      	streq	r1, [r4, #0]
 8007cf8:	6054      	str	r4, [r2, #4]
 8007cfa:	e7ca      	b.n	8007c92 <_free_r+0x22>
 8007cfc:	bd38      	pop	{r3, r4, r5, pc}
 8007cfe:	bf00      	nop
 8007d00:	200042e0 	.word	0x200042e0

08007d04 <malloc>:
 8007d04:	4b02      	ldr	r3, [pc, #8]	@ (8007d10 <malloc+0xc>)
 8007d06:	4601      	mov	r1, r0
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	f000 b825 	b.w	8007d58 <_malloc_r>
 8007d0e:	bf00      	nop
 8007d10:	200000b0 	.word	0x200000b0

08007d14 <sbrk_aligned>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	4e0f      	ldr	r6, [pc, #60]	@ (8007d54 <sbrk_aligned+0x40>)
 8007d18:	460c      	mov	r4, r1
 8007d1a:	6831      	ldr	r1, [r6, #0]
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	b911      	cbnz	r1, 8007d26 <sbrk_aligned+0x12>
 8007d20:	f000 fc62 	bl	80085e8 <_sbrk_r>
 8007d24:	6030      	str	r0, [r6, #0]
 8007d26:	4621      	mov	r1, r4
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f000 fc5d 	bl	80085e8 <_sbrk_r>
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	d103      	bne.n	8007d3a <sbrk_aligned+0x26>
 8007d32:	f04f 34ff 	mov.w	r4, #4294967295
 8007d36:	4620      	mov	r0, r4
 8007d38:	bd70      	pop	{r4, r5, r6, pc}
 8007d3a:	1cc4      	adds	r4, r0, #3
 8007d3c:	f024 0403 	bic.w	r4, r4, #3
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d0f8      	beq.n	8007d36 <sbrk_aligned+0x22>
 8007d44:	1a21      	subs	r1, r4, r0
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 fc4e 	bl	80085e8 <_sbrk_r>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d1f2      	bne.n	8007d36 <sbrk_aligned+0x22>
 8007d50:	e7ef      	b.n	8007d32 <sbrk_aligned+0x1e>
 8007d52:	bf00      	nop
 8007d54:	200042dc 	.word	0x200042dc

08007d58 <_malloc_r>:
 8007d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d5c:	1ccd      	adds	r5, r1, #3
 8007d5e:	f025 0503 	bic.w	r5, r5, #3
 8007d62:	3508      	adds	r5, #8
 8007d64:	2d0c      	cmp	r5, #12
 8007d66:	bf38      	it	cc
 8007d68:	250c      	movcc	r5, #12
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	db01      	blt.n	8007d74 <_malloc_r+0x1c>
 8007d70:	42a9      	cmp	r1, r5
 8007d72:	d904      	bls.n	8007d7e <_malloc_r+0x26>
 8007d74:	230c      	movs	r3, #12
 8007d76:	6033      	str	r3, [r6, #0]
 8007d78:	2000      	movs	r0, #0
 8007d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e54 <_malloc_r+0xfc>
 8007d82:	f000 f869 	bl	8007e58 <__malloc_lock>
 8007d86:	f8d8 3000 	ldr.w	r3, [r8]
 8007d8a:	461c      	mov	r4, r3
 8007d8c:	bb44      	cbnz	r4, 8007de0 <_malloc_r+0x88>
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7ff ffbf 	bl	8007d14 <sbrk_aligned>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	4604      	mov	r4, r0
 8007d9a:	d158      	bne.n	8007e4e <_malloc_r+0xf6>
 8007d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8007da0:	4627      	mov	r7, r4
 8007da2:	2f00      	cmp	r7, #0
 8007da4:	d143      	bne.n	8007e2e <_malloc_r+0xd6>
 8007da6:	2c00      	cmp	r4, #0
 8007da8:	d04b      	beq.n	8007e42 <_malloc_r+0xea>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	4639      	mov	r1, r7
 8007dae:	4630      	mov	r0, r6
 8007db0:	eb04 0903 	add.w	r9, r4, r3
 8007db4:	f000 fc18 	bl	80085e8 <_sbrk_r>
 8007db8:	4581      	cmp	r9, r0
 8007dba:	d142      	bne.n	8007e42 <_malloc_r+0xea>
 8007dbc:	6821      	ldr	r1, [r4, #0]
 8007dbe:	1a6d      	subs	r5, r5, r1
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ffa6 	bl	8007d14 <sbrk_aligned>
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d03a      	beq.n	8007e42 <_malloc_r+0xea>
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	442b      	add	r3, r5
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	bb62      	cbnz	r2, 8007e34 <_malloc_r+0xdc>
 8007dda:	f8c8 7000 	str.w	r7, [r8]
 8007dde:	e00f      	b.n	8007e00 <_malloc_r+0xa8>
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	1b52      	subs	r2, r2, r5
 8007de4:	d420      	bmi.n	8007e28 <_malloc_r+0xd0>
 8007de6:	2a0b      	cmp	r2, #11
 8007de8:	d917      	bls.n	8007e1a <_malloc_r+0xc2>
 8007dea:	1961      	adds	r1, r4, r5
 8007dec:	42a3      	cmp	r3, r4
 8007dee:	6025      	str	r5, [r4, #0]
 8007df0:	bf18      	it	ne
 8007df2:	6059      	strne	r1, [r3, #4]
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	bf08      	it	eq
 8007df8:	f8c8 1000 	streq.w	r1, [r8]
 8007dfc:	5162      	str	r2, [r4, r5]
 8007dfe:	604b      	str	r3, [r1, #4]
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 f82f 	bl	8007e64 <__malloc_unlock>
 8007e06:	f104 000b 	add.w	r0, r4, #11
 8007e0a:	1d23      	adds	r3, r4, #4
 8007e0c:	f020 0007 	bic.w	r0, r0, #7
 8007e10:	1ac2      	subs	r2, r0, r3
 8007e12:	bf1c      	itt	ne
 8007e14:	1a1b      	subne	r3, r3, r0
 8007e16:	50a3      	strne	r3, [r4, r2]
 8007e18:	e7af      	b.n	8007d7a <_malloc_r+0x22>
 8007e1a:	6862      	ldr	r2, [r4, #4]
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	bf0c      	ite	eq
 8007e20:	f8c8 2000 	streq.w	r2, [r8]
 8007e24:	605a      	strne	r2, [r3, #4]
 8007e26:	e7eb      	b.n	8007e00 <_malloc_r+0xa8>
 8007e28:	4623      	mov	r3, r4
 8007e2a:	6864      	ldr	r4, [r4, #4]
 8007e2c:	e7ae      	b.n	8007d8c <_malloc_r+0x34>
 8007e2e:	463c      	mov	r4, r7
 8007e30:	687f      	ldr	r7, [r7, #4]
 8007e32:	e7b6      	b.n	8007da2 <_malloc_r+0x4a>
 8007e34:	461a      	mov	r2, r3
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	42a3      	cmp	r3, r4
 8007e3a:	d1fb      	bne.n	8007e34 <_malloc_r+0xdc>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	6053      	str	r3, [r2, #4]
 8007e40:	e7de      	b.n	8007e00 <_malloc_r+0xa8>
 8007e42:	230c      	movs	r3, #12
 8007e44:	6033      	str	r3, [r6, #0]
 8007e46:	4630      	mov	r0, r6
 8007e48:	f000 f80c 	bl	8007e64 <__malloc_unlock>
 8007e4c:	e794      	b.n	8007d78 <_malloc_r+0x20>
 8007e4e:	6005      	str	r5, [r0, #0]
 8007e50:	e7d6      	b.n	8007e00 <_malloc_r+0xa8>
 8007e52:	bf00      	nop
 8007e54:	200042e0 	.word	0x200042e0

08007e58 <__malloc_lock>:
 8007e58:	4801      	ldr	r0, [pc, #4]	@ (8007e60 <__malloc_lock+0x8>)
 8007e5a:	f7ff beda 	b.w	8007c12 <__retarget_lock_acquire_recursive>
 8007e5e:	bf00      	nop
 8007e60:	200042d8 	.word	0x200042d8

08007e64 <__malloc_unlock>:
 8007e64:	4801      	ldr	r0, [pc, #4]	@ (8007e6c <__malloc_unlock+0x8>)
 8007e66:	f7ff bed5 	b.w	8007c14 <__retarget_lock_release_recursive>
 8007e6a:	bf00      	nop
 8007e6c:	200042d8 	.word	0x200042d8

08007e70 <__ssputs_r>:
 8007e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e74:	688e      	ldr	r6, [r1, #8]
 8007e76:	461f      	mov	r7, r3
 8007e78:	42be      	cmp	r6, r7
 8007e7a:	680b      	ldr	r3, [r1, #0]
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	4690      	mov	r8, r2
 8007e82:	d82d      	bhi.n	8007ee0 <__ssputs_r+0x70>
 8007e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e8c:	d026      	beq.n	8007edc <__ssputs_r+0x6c>
 8007e8e:	6965      	ldr	r5, [r4, #20]
 8007e90:	6909      	ldr	r1, [r1, #16]
 8007e92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e96:	eba3 0901 	sub.w	r9, r3, r1
 8007e9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e9e:	1c7b      	adds	r3, r7, #1
 8007ea0:	444b      	add	r3, r9
 8007ea2:	106d      	asrs	r5, r5, #1
 8007ea4:	429d      	cmp	r5, r3
 8007ea6:	bf38      	it	cc
 8007ea8:	461d      	movcc	r5, r3
 8007eaa:	0553      	lsls	r3, r2, #21
 8007eac:	d527      	bpl.n	8007efe <__ssputs_r+0x8e>
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7ff ff52 	bl	8007d58 <_malloc_r>
 8007eb4:	4606      	mov	r6, r0
 8007eb6:	b360      	cbz	r0, 8007f12 <__ssputs_r+0xa2>
 8007eb8:	6921      	ldr	r1, [r4, #16]
 8007eba:	464a      	mov	r2, r9
 8007ebc:	f7ff feab 	bl	8007c16 <memcpy>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	6126      	str	r6, [r4, #16]
 8007ece:	6165      	str	r5, [r4, #20]
 8007ed0:	444e      	add	r6, r9
 8007ed2:	eba5 0509 	sub.w	r5, r5, r9
 8007ed6:	6026      	str	r6, [r4, #0]
 8007ed8:	60a5      	str	r5, [r4, #8]
 8007eda:	463e      	mov	r6, r7
 8007edc:	42be      	cmp	r6, r7
 8007ede:	d900      	bls.n	8007ee2 <__ssputs_r+0x72>
 8007ee0:	463e      	mov	r6, r7
 8007ee2:	6820      	ldr	r0, [r4, #0]
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	4641      	mov	r1, r8
 8007ee8:	f000 fb64 	bl	80085b4 <memmove>
 8007eec:	68a3      	ldr	r3, [r4, #8]
 8007eee:	1b9b      	subs	r3, r3, r6
 8007ef0:	60a3      	str	r3, [r4, #8]
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	4433      	add	r3, r6
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	2000      	movs	r0, #0
 8007efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efe:	462a      	mov	r2, r5
 8007f00:	f000 fb89 	bl	8008616 <_realloc_r>
 8007f04:	4606      	mov	r6, r0
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d1e0      	bne.n	8007ecc <__ssputs_r+0x5c>
 8007f0a:	6921      	ldr	r1, [r4, #16]
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	f7ff feaf 	bl	8007c70 <_free_r>
 8007f12:	230c      	movs	r3, #12
 8007f14:	f8ca 3000 	str.w	r3, [sl]
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	e7e9      	b.n	8007efa <__ssputs_r+0x8a>
	...

08007f28 <_svfiprintf_r>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	898b      	ldrh	r3, [r1, #12]
 8007f30:	061b      	lsls	r3, r3, #24
 8007f32:	b09d      	sub	sp, #116	@ 0x74
 8007f34:	4607      	mov	r7, r0
 8007f36:	460d      	mov	r5, r1
 8007f38:	4614      	mov	r4, r2
 8007f3a:	d510      	bpl.n	8007f5e <_svfiprintf_r+0x36>
 8007f3c:	690b      	ldr	r3, [r1, #16]
 8007f3e:	b973      	cbnz	r3, 8007f5e <_svfiprintf_r+0x36>
 8007f40:	2140      	movs	r1, #64	@ 0x40
 8007f42:	f7ff ff09 	bl	8007d58 <_malloc_r>
 8007f46:	6028      	str	r0, [r5, #0]
 8007f48:	6128      	str	r0, [r5, #16]
 8007f4a:	b930      	cbnz	r0, 8007f5a <_svfiprintf_r+0x32>
 8007f4c:	230c      	movs	r3, #12
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295
 8007f54:	b01d      	add	sp, #116	@ 0x74
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	2340      	movs	r3, #64	@ 0x40
 8007f5c:	616b      	str	r3, [r5, #20]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f62:	2320      	movs	r3, #32
 8007f64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f6c:	2330      	movs	r3, #48	@ 0x30
 8007f6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800810c <_svfiprintf_r+0x1e4>
 8007f72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f76:	f04f 0901 	mov.w	r9, #1
 8007f7a:	4623      	mov	r3, r4
 8007f7c:	469a      	mov	sl, r3
 8007f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f82:	b10a      	cbz	r2, 8007f88 <_svfiprintf_r+0x60>
 8007f84:	2a25      	cmp	r2, #37	@ 0x25
 8007f86:	d1f9      	bne.n	8007f7c <_svfiprintf_r+0x54>
 8007f88:	ebba 0b04 	subs.w	fp, sl, r4
 8007f8c:	d00b      	beq.n	8007fa6 <_svfiprintf_r+0x7e>
 8007f8e:	465b      	mov	r3, fp
 8007f90:	4622      	mov	r2, r4
 8007f92:	4629      	mov	r1, r5
 8007f94:	4638      	mov	r0, r7
 8007f96:	f7ff ff6b 	bl	8007e70 <__ssputs_r>
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f000 80a7 	beq.w	80080ee <_svfiprintf_r+0x1c6>
 8007fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fa2:	445a      	add	r2, fp
 8007fa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 809f 	beq.w	80080ee <_svfiprintf_r+0x1c6>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fba:	f10a 0a01 	add.w	sl, sl, #1
 8007fbe:	9304      	str	r3, [sp, #16]
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fc8:	4654      	mov	r4, sl
 8007fca:	2205      	movs	r2, #5
 8007fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd0:	484e      	ldr	r0, [pc, #312]	@ (800810c <_svfiprintf_r+0x1e4>)
 8007fd2:	f7f8 f8fd 	bl	80001d0 <memchr>
 8007fd6:	9a04      	ldr	r2, [sp, #16]
 8007fd8:	b9d8      	cbnz	r0, 8008012 <_svfiprintf_r+0xea>
 8007fda:	06d0      	lsls	r0, r2, #27
 8007fdc:	bf44      	itt	mi
 8007fde:	2320      	movmi	r3, #32
 8007fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fe4:	0711      	lsls	r1, r2, #28
 8007fe6:	bf44      	itt	mi
 8007fe8:	232b      	movmi	r3, #43	@ 0x2b
 8007fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fee:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ff4:	d015      	beq.n	8008022 <_svfiprintf_r+0xfa>
 8007ff6:	9a07      	ldr	r2, [sp, #28]
 8007ff8:	4654      	mov	r4, sl
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f04f 0c0a 	mov.w	ip, #10
 8008000:	4621      	mov	r1, r4
 8008002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008006:	3b30      	subs	r3, #48	@ 0x30
 8008008:	2b09      	cmp	r3, #9
 800800a:	d94b      	bls.n	80080a4 <_svfiprintf_r+0x17c>
 800800c:	b1b0      	cbz	r0, 800803c <_svfiprintf_r+0x114>
 800800e:	9207      	str	r2, [sp, #28]
 8008010:	e014      	b.n	800803c <_svfiprintf_r+0x114>
 8008012:	eba0 0308 	sub.w	r3, r0, r8
 8008016:	fa09 f303 	lsl.w	r3, r9, r3
 800801a:	4313      	orrs	r3, r2
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	46a2      	mov	sl, r4
 8008020:	e7d2      	b.n	8007fc8 <_svfiprintf_r+0xa0>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	1d19      	adds	r1, r3, #4
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	9103      	str	r1, [sp, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	bfbb      	ittet	lt
 800802e:	425b      	neglt	r3, r3
 8008030:	f042 0202 	orrlt.w	r2, r2, #2
 8008034:	9307      	strge	r3, [sp, #28]
 8008036:	9307      	strlt	r3, [sp, #28]
 8008038:	bfb8      	it	lt
 800803a:	9204      	strlt	r2, [sp, #16]
 800803c:	7823      	ldrb	r3, [r4, #0]
 800803e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008040:	d10a      	bne.n	8008058 <_svfiprintf_r+0x130>
 8008042:	7863      	ldrb	r3, [r4, #1]
 8008044:	2b2a      	cmp	r3, #42	@ 0x2a
 8008046:	d132      	bne.n	80080ae <_svfiprintf_r+0x186>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	1d1a      	adds	r2, r3, #4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	9203      	str	r2, [sp, #12]
 8008050:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008054:	3402      	adds	r4, #2
 8008056:	9305      	str	r3, [sp, #20]
 8008058:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800811c <_svfiprintf_r+0x1f4>
 800805c:	7821      	ldrb	r1, [r4, #0]
 800805e:	2203      	movs	r2, #3
 8008060:	4650      	mov	r0, sl
 8008062:	f7f8 f8b5 	bl	80001d0 <memchr>
 8008066:	b138      	cbz	r0, 8008078 <_svfiprintf_r+0x150>
 8008068:	9b04      	ldr	r3, [sp, #16]
 800806a:	eba0 000a 	sub.w	r0, r0, sl
 800806e:	2240      	movs	r2, #64	@ 0x40
 8008070:	4082      	lsls	r2, r0
 8008072:	4313      	orrs	r3, r2
 8008074:	3401      	adds	r4, #1
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807c:	4824      	ldr	r0, [pc, #144]	@ (8008110 <_svfiprintf_r+0x1e8>)
 800807e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008082:	2206      	movs	r2, #6
 8008084:	f7f8 f8a4 	bl	80001d0 <memchr>
 8008088:	2800      	cmp	r0, #0
 800808a:	d036      	beq.n	80080fa <_svfiprintf_r+0x1d2>
 800808c:	4b21      	ldr	r3, [pc, #132]	@ (8008114 <_svfiprintf_r+0x1ec>)
 800808e:	bb1b      	cbnz	r3, 80080d8 <_svfiprintf_r+0x1b0>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	3307      	adds	r3, #7
 8008094:	f023 0307 	bic.w	r3, r3, #7
 8008098:	3308      	adds	r3, #8
 800809a:	9303      	str	r3, [sp, #12]
 800809c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800809e:	4433      	add	r3, r6
 80080a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080a2:	e76a      	b.n	8007f7a <_svfiprintf_r+0x52>
 80080a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080a8:	460c      	mov	r4, r1
 80080aa:	2001      	movs	r0, #1
 80080ac:	e7a8      	b.n	8008000 <_svfiprintf_r+0xd8>
 80080ae:	2300      	movs	r3, #0
 80080b0:	3401      	adds	r4, #1
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	4619      	mov	r1, r3
 80080b6:	f04f 0c0a 	mov.w	ip, #10
 80080ba:	4620      	mov	r0, r4
 80080bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080c0:	3a30      	subs	r2, #48	@ 0x30
 80080c2:	2a09      	cmp	r2, #9
 80080c4:	d903      	bls.n	80080ce <_svfiprintf_r+0x1a6>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0c6      	beq.n	8008058 <_svfiprintf_r+0x130>
 80080ca:	9105      	str	r1, [sp, #20]
 80080cc:	e7c4      	b.n	8008058 <_svfiprintf_r+0x130>
 80080ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80080d2:	4604      	mov	r4, r0
 80080d4:	2301      	movs	r3, #1
 80080d6:	e7f0      	b.n	80080ba <_svfiprintf_r+0x192>
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	462a      	mov	r2, r5
 80080de:	4b0e      	ldr	r3, [pc, #56]	@ (8008118 <_svfiprintf_r+0x1f0>)
 80080e0:	a904      	add	r1, sp, #16
 80080e2:	4638      	mov	r0, r7
 80080e4:	f3af 8000 	nop.w
 80080e8:	1c42      	adds	r2, r0, #1
 80080ea:	4606      	mov	r6, r0
 80080ec:	d1d6      	bne.n	800809c <_svfiprintf_r+0x174>
 80080ee:	89ab      	ldrh	r3, [r5, #12]
 80080f0:	065b      	lsls	r3, r3, #25
 80080f2:	f53f af2d 	bmi.w	8007f50 <_svfiprintf_r+0x28>
 80080f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080f8:	e72c      	b.n	8007f54 <_svfiprintf_r+0x2c>
 80080fa:	ab03      	add	r3, sp, #12
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	462a      	mov	r2, r5
 8008100:	4b05      	ldr	r3, [pc, #20]	@ (8008118 <_svfiprintf_r+0x1f0>)
 8008102:	a904      	add	r1, sp, #16
 8008104:	4638      	mov	r0, r7
 8008106:	f000 f879 	bl	80081fc <_printf_i>
 800810a:	e7ed      	b.n	80080e8 <_svfiprintf_r+0x1c0>
 800810c:	0800a41f 	.word	0x0800a41f
 8008110:	0800a429 	.word	0x0800a429
 8008114:	00000000 	.word	0x00000000
 8008118:	08007e71 	.word	0x08007e71
 800811c:	0800a425 	.word	0x0800a425

08008120 <_printf_common>:
 8008120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008124:	4616      	mov	r6, r2
 8008126:	4698      	mov	r8, r3
 8008128:	688a      	ldr	r2, [r1, #8]
 800812a:	690b      	ldr	r3, [r1, #16]
 800812c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008130:	4293      	cmp	r3, r2
 8008132:	bfb8      	it	lt
 8008134:	4613      	movlt	r3, r2
 8008136:	6033      	str	r3, [r6, #0]
 8008138:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800813c:	4607      	mov	r7, r0
 800813e:	460c      	mov	r4, r1
 8008140:	b10a      	cbz	r2, 8008146 <_printf_common+0x26>
 8008142:	3301      	adds	r3, #1
 8008144:	6033      	str	r3, [r6, #0]
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	0699      	lsls	r1, r3, #26
 800814a:	bf42      	ittt	mi
 800814c:	6833      	ldrmi	r3, [r6, #0]
 800814e:	3302      	addmi	r3, #2
 8008150:	6033      	strmi	r3, [r6, #0]
 8008152:	6825      	ldr	r5, [r4, #0]
 8008154:	f015 0506 	ands.w	r5, r5, #6
 8008158:	d106      	bne.n	8008168 <_printf_common+0x48>
 800815a:	f104 0a19 	add.w	sl, r4, #25
 800815e:	68e3      	ldr	r3, [r4, #12]
 8008160:	6832      	ldr	r2, [r6, #0]
 8008162:	1a9b      	subs	r3, r3, r2
 8008164:	42ab      	cmp	r3, r5
 8008166:	dc26      	bgt.n	80081b6 <_printf_common+0x96>
 8008168:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800816c:	6822      	ldr	r2, [r4, #0]
 800816e:	3b00      	subs	r3, #0
 8008170:	bf18      	it	ne
 8008172:	2301      	movne	r3, #1
 8008174:	0692      	lsls	r2, r2, #26
 8008176:	d42b      	bmi.n	80081d0 <_printf_common+0xb0>
 8008178:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800817c:	4641      	mov	r1, r8
 800817e:	4638      	mov	r0, r7
 8008180:	47c8      	blx	r9
 8008182:	3001      	adds	r0, #1
 8008184:	d01e      	beq.n	80081c4 <_printf_common+0xa4>
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	6922      	ldr	r2, [r4, #16]
 800818a:	f003 0306 	and.w	r3, r3, #6
 800818e:	2b04      	cmp	r3, #4
 8008190:	bf02      	ittt	eq
 8008192:	68e5      	ldreq	r5, [r4, #12]
 8008194:	6833      	ldreq	r3, [r6, #0]
 8008196:	1aed      	subeq	r5, r5, r3
 8008198:	68a3      	ldr	r3, [r4, #8]
 800819a:	bf0c      	ite	eq
 800819c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081a0:	2500      	movne	r5, #0
 80081a2:	4293      	cmp	r3, r2
 80081a4:	bfc4      	itt	gt
 80081a6:	1a9b      	subgt	r3, r3, r2
 80081a8:	18ed      	addgt	r5, r5, r3
 80081aa:	2600      	movs	r6, #0
 80081ac:	341a      	adds	r4, #26
 80081ae:	42b5      	cmp	r5, r6
 80081b0:	d11a      	bne.n	80081e8 <_printf_common+0xc8>
 80081b2:	2000      	movs	r0, #0
 80081b4:	e008      	b.n	80081c8 <_printf_common+0xa8>
 80081b6:	2301      	movs	r3, #1
 80081b8:	4652      	mov	r2, sl
 80081ba:	4641      	mov	r1, r8
 80081bc:	4638      	mov	r0, r7
 80081be:	47c8      	blx	r9
 80081c0:	3001      	adds	r0, #1
 80081c2:	d103      	bne.n	80081cc <_printf_common+0xac>
 80081c4:	f04f 30ff 	mov.w	r0, #4294967295
 80081c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081cc:	3501      	adds	r5, #1
 80081ce:	e7c6      	b.n	800815e <_printf_common+0x3e>
 80081d0:	18e1      	adds	r1, r4, r3
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	2030      	movs	r0, #48	@ 0x30
 80081d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081da:	4422      	add	r2, r4
 80081dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081e4:	3302      	adds	r3, #2
 80081e6:	e7c7      	b.n	8008178 <_printf_common+0x58>
 80081e8:	2301      	movs	r3, #1
 80081ea:	4622      	mov	r2, r4
 80081ec:	4641      	mov	r1, r8
 80081ee:	4638      	mov	r0, r7
 80081f0:	47c8      	blx	r9
 80081f2:	3001      	adds	r0, #1
 80081f4:	d0e6      	beq.n	80081c4 <_printf_common+0xa4>
 80081f6:	3601      	adds	r6, #1
 80081f8:	e7d9      	b.n	80081ae <_printf_common+0x8e>
	...

080081fc <_printf_i>:
 80081fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	7e0f      	ldrb	r7, [r1, #24]
 8008202:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008204:	2f78      	cmp	r7, #120	@ 0x78
 8008206:	4691      	mov	r9, r2
 8008208:	4680      	mov	r8, r0
 800820a:	460c      	mov	r4, r1
 800820c:	469a      	mov	sl, r3
 800820e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008212:	d807      	bhi.n	8008224 <_printf_i+0x28>
 8008214:	2f62      	cmp	r7, #98	@ 0x62
 8008216:	d80a      	bhi.n	800822e <_printf_i+0x32>
 8008218:	2f00      	cmp	r7, #0
 800821a:	f000 80d1 	beq.w	80083c0 <_printf_i+0x1c4>
 800821e:	2f58      	cmp	r7, #88	@ 0x58
 8008220:	f000 80b8 	beq.w	8008394 <_printf_i+0x198>
 8008224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008228:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800822c:	e03a      	b.n	80082a4 <_printf_i+0xa8>
 800822e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008232:	2b15      	cmp	r3, #21
 8008234:	d8f6      	bhi.n	8008224 <_printf_i+0x28>
 8008236:	a101      	add	r1, pc, #4	@ (adr r1, 800823c <_printf_i+0x40>)
 8008238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800823c:	08008295 	.word	0x08008295
 8008240:	080082a9 	.word	0x080082a9
 8008244:	08008225 	.word	0x08008225
 8008248:	08008225 	.word	0x08008225
 800824c:	08008225 	.word	0x08008225
 8008250:	08008225 	.word	0x08008225
 8008254:	080082a9 	.word	0x080082a9
 8008258:	08008225 	.word	0x08008225
 800825c:	08008225 	.word	0x08008225
 8008260:	08008225 	.word	0x08008225
 8008264:	08008225 	.word	0x08008225
 8008268:	080083a7 	.word	0x080083a7
 800826c:	080082d3 	.word	0x080082d3
 8008270:	08008361 	.word	0x08008361
 8008274:	08008225 	.word	0x08008225
 8008278:	08008225 	.word	0x08008225
 800827c:	080083c9 	.word	0x080083c9
 8008280:	08008225 	.word	0x08008225
 8008284:	080082d3 	.word	0x080082d3
 8008288:	08008225 	.word	0x08008225
 800828c:	08008225 	.word	0x08008225
 8008290:	08008369 	.word	0x08008369
 8008294:	6833      	ldr	r3, [r6, #0]
 8008296:	1d1a      	adds	r2, r3, #4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6032      	str	r2, [r6, #0]
 800829c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082a4:	2301      	movs	r3, #1
 80082a6:	e09c      	b.n	80083e2 <_printf_i+0x1e6>
 80082a8:	6833      	ldr	r3, [r6, #0]
 80082aa:	6820      	ldr	r0, [r4, #0]
 80082ac:	1d19      	adds	r1, r3, #4
 80082ae:	6031      	str	r1, [r6, #0]
 80082b0:	0606      	lsls	r6, r0, #24
 80082b2:	d501      	bpl.n	80082b8 <_printf_i+0xbc>
 80082b4:	681d      	ldr	r5, [r3, #0]
 80082b6:	e003      	b.n	80082c0 <_printf_i+0xc4>
 80082b8:	0645      	lsls	r5, r0, #25
 80082ba:	d5fb      	bpl.n	80082b4 <_printf_i+0xb8>
 80082bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082c0:	2d00      	cmp	r5, #0
 80082c2:	da03      	bge.n	80082cc <_printf_i+0xd0>
 80082c4:	232d      	movs	r3, #45	@ 0x2d
 80082c6:	426d      	negs	r5, r5
 80082c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082cc:	4858      	ldr	r0, [pc, #352]	@ (8008430 <_printf_i+0x234>)
 80082ce:	230a      	movs	r3, #10
 80082d0:	e011      	b.n	80082f6 <_printf_i+0xfa>
 80082d2:	6821      	ldr	r1, [r4, #0]
 80082d4:	6833      	ldr	r3, [r6, #0]
 80082d6:	0608      	lsls	r0, r1, #24
 80082d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80082dc:	d402      	bmi.n	80082e4 <_printf_i+0xe8>
 80082de:	0649      	lsls	r1, r1, #25
 80082e0:	bf48      	it	mi
 80082e2:	b2ad      	uxthmi	r5, r5
 80082e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80082e6:	4852      	ldr	r0, [pc, #328]	@ (8008430 <_printf_i+0x234>)
 80082e8:	6033      	str	r3, [r6, #0]
 80082ea:	bf14      	ite	ne
 80082ec:	230a      	movne	r3, #10
 80082ee:	2308      	moveq	r3, #8
 80082f0:	2100      	movs	r1, #0
 80082f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082f6:	6866      	ldr	r6, [r4, #4]
 80082f8:	60a6      	str	r6, [r4, #8]
 80082fa:	2e00      	cmp	r6, #0
 80082fc:	db05      	blt.n	800830a <_printf_i+0x10e>
 80082fe:	6821      	ldr	r1, [r4, #0]
 8008300:	432e      	orrs	r6, r5
 8008302:	f021 0104 	bic.w	r1, r1, #4
 8008306:	6021      	str	r1, [r4, #0]
 8008308:	d04b      	beq.n	80083a2 <_printf_i+0x1a6>
 800830a:	4616      	mov	r6, r2
 800830c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008310:	fb03 5711 	mls	r7, r3, r1, r5
 8008314:	5dc7      	ldrb	r7, [r0, r7]
 8008316:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800831a:	462f      	mov	r7, r5
 800831c:	42bb      	cmp	r3, r7
 800831e:	460d      	mov	r5, r1
 8008320:	d9f4      	bls.n	800830c <_printf_i+0x110>
 8008322:	2b08      	cmp	r3, #8
 8008324:	d10b      	bne.n	800833e <_printf_i+0x142>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	07df      	lsls	r7, r3, #31
 800832a:	d508      	bpl.n	800833e <_printf_i+0x142>
 800832c:	6923      	ldr	r3, [r4, #16]
 800832e:	6861      	ldr	r1, [r4, #4]
 8008330:	4299      	cmp	r1, r3
 8008332:	bfde      	ittt	le
 8008334:	2330      	movle	r3, #48	@ 0x30
 8008336:	f806 3c01 	strble.w	r3, [r6, #-1]
 800833a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800833e:	1b92      	subs	r2, r2, r6
 8008340:	6122      	str	r2, [r4, #16]
 8008342:	f8cd a000 	str.w	sl, [sp]
 8008346:	464b      	mov	r3, r9
 8008348:	aa03      	add	r2, sp, #12
 800834a:	4621      	mov	r1, r4
 800834c:	4640      	mov	r0, r8
 800834e:	f7ff fee7 	bl	8008120 <_printf_common>
 8008352:	3001      	adds	r0, #1
 8008354:	d14a      	bne.n	80083ec <_printf_i+0x1f0>
 8008356:	f04f 30ff 	mov.w	r0, #4294967295
 800835a:	b004      	add	sp, #16
 800835c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	f043 0320 	orr.w	r3, r3, #32
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	4832      	ldr	r0, [pc, #200]	@ (8008434 <_printf_i+0x238>)
 800836a:	2778      	movs	r7, #120	@ 0x78
 800836c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	6831      	ldr	r1, [r6, #0]
 8008374:	061f      	lsls	r7, r3, #24
 8008376:	f851 5b04 	ldr.w	r5, [r1], #4
 800837a:	d402      	bmi.n	8008382 <_printf_i+0x186>
 800837c:	065f      	lsls	r7, r3, #25
 800837e:	bf48      	it	mi
 8008380:	b2ad      	uxthmi	r5, r5
 8008382:	6031      	str	r1, [r6, #0]
 8008384:	07d9      	lsls	r1, r3, #31
 8008386:	bf44      	itt	mi
 8008388:	f043 0320 	orrmi.w	r3, r3, #32
 800838c:	6023      	strmi	r3, [r4, #0]
 800838e:	b11d      	cbz	r5, 8008398 <_printf_i+0x19c>
 8008390:	2310      	movs	r3, #16
 8008392:	e7ad      	b.n	80082f0 <_printf_i+0xf4>
 8008394:	4826      	ldr	r0, [pc, #152]	@ (8008430 <_printf_i+0x234>)
 8008396:	e7e9      	b.n	800836c <_printf_i+0x170>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	f023 0320 	bic.w	r3, r3, #32
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	e7f6      	b.n	8008390 <_printf_i+0x194>
 80083a2:	4616      	mov	r6, r2
 80083a4:	e7bd      	b.n	8008322 <_printf_i+0x126>
 80083a6:	6833      	ldr	r3, [r6, #0]
 80083a8:	6825      	ldr	r5, [r4, #0]
 80083aa:	6961      	ldr	r1, [r4, #20]
 80083ac:	1d18      	adds	r0, r3, #4
 80083ae:	6030      	str	r0, [r6, #0]
 80083b0:	062e      	lsls	r6, r5, #24
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	d501      	bpl.n	80083ba <_printf_i+0x1be>
 80083b6:	6019      	str	r1, [r3, #0]
 80083b8:	e002      	b.n	80083c0 <_printf_i+0x1c4>
 80083ba:	0668      	lsls	r0, r5, #25
 80083bc:	d5fb      	bpl.n	80083b6 <_printf_i+0x1ba>
 80083be:	8019      	strh	r1, [r3, #0]
 80083c0:	2300      	movs	r3, #0
 80083c2:	6123      	str	r3, [r4, #16]
 80083c4:	4616      	mov	r6, r2
 80083c6:	e7bc      	b.n	8008342 <_printf_i+0x146>
 80083c8:	6833      	ldr	r3, [r6, #0]
 80083ca:	1d1a      	adds	r2, r3, #4
 80083cc:	6032      	str	r2, [r6, #0]
 80083ce:	681e      	ldr	r6, [r3, #0]
 80083d0:	6862      	ldr	r2, [r4, #4]
 80083d2:	2100      	movs	r1, #0
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7f7 fefb 	bl	80001d0 <memchr>
 80083da:	b108      	cbz	r0, 80083e0 <_printf_i+0x1e4>
 80083dc:	1b80      	subs	r0, r0, r6
 80083de:	6060      	str	r0, [r4, #4]
 80083e0:	6863      	ldr	r3, [r4, #4]
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	2300      	movs	r3, #0
 80083e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083ea:	e7aa      	b.n	8008342 <_printf_i+0x146>
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	4632      	mov	r2, r6
 80083f0:	4649      	mov	r1, r9
 80083f2:	4640      	mov	r0, r8
 80083f4:	47d0      	blx	sl
 80083f6:	3001      	adds	r0, #1
 80083f8:	d0ad      	beq.n	8008356 <_printf_i+0x15a>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	079b      	lsls	r3, r3, #30
 80083fe:	d413      	bmi.n	8008428 <_printf_i+0x22c>
 8008400:	68e0      	ldr	r0, [r4, #12]
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	4298      	cmp	r0, r3
 8008406:	bfb8      	it	lt
 8008408:	4618      	movlt	r0, r3
 800840a:	e7a6      	b.n	800835a <_printf_i+0x15e>
 800840c:	2301      	movs	r3, #1
 800840e:	4632      	mov	r2, r6
 8008410:	4649      	mov	r1, r9
 8008412:	4640      	mov	r0, r8
 8008414:	47d0      	blx	sl
 8008416:	3001      	adds	r0, #1
 8008418:	d09d      	beq.n	8008356 <_printf_i+0x15a>
 800841a:	3501      	adds	r5, #1
 800841c:	68e3      	ldr	r3, [r4, #12]
 800841e:	9903      	ldr	r1, [sp, #12]
 8008420:	1a5b      	subs	r3, r3, r1
 8008422:	42ab      	cmp	r3, r5
 8008424:	dcf2      	bgt.n	800840c <_printf_i+0x210>
 8008426:	e7eb      	b.n	8008400 <_printf_i+0x204>
 8008428:	2500      	movs	r5, #0
 800842a:	f104 0619 	add.w	r6, r4, #25
 800842e:	e7f5      	b.n	800841c <_printf_i+0x220>
 8008430:	0800a430 	.word	0x0800a430
 8008434:	0800a441 	.word	0x0800a441

08008438 <__sflush_r>:
 8008438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800843c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008440:	0716      	lsls	r6, r2, #28
 8008442:	4605      	mov	r5, r0
 8008444:	460c      	mov	r4, r1
 8008446:	d454      	bmi.n	80084f2 <__sflush_r+0xba>
 8008448:	684b      	ldr	r3, [r1, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dc02      	bgt.n	8008454 <__sflush_r+0x1c>
 800844e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008450:	2b00      	cmp	r3, #0
 8008452:	dd48      	ble.n	80084e6 <__sflush_r+0xae>
 8008454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008456:	2e00      	cmp	r6, #0
 8008458:	d045      	beq.n	80084e6 <__sflush_r+0xae>
 800845a:	2300      	movs	r3, #0
 800845c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008460:	682f      	ldr	r7, [r5, #0]
 8008462:	6a21      	ldr	r1, [r4, #32]
 8008464:	602b      	str	r3, [r5, #0]
 8008466:	d030      	beq.n	80084ca <__sflush_r+0x92>
 8008468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	0759      	lsls	r1, r3, #29
 800846e:	d505      	bpl.n	800847c <__sflush_r+0x44>
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	1ad2      	subs	r2, r2, r3
 8008474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008476:	b10b      	cbz	r3, 800847c <__sflush_r+0x44>
 8008478:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800847a:	1ad2      	subs	r2, r2, r3
 800847c:	2300      	movs	r3, #0
 800847e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008480:	6a21      	ldr	r1, [r4, #32]
 8008482:	4628      	mov	r0, r5
 8008484:	47b0      	blx	r6
 8008486:	1c43      	adds	r3, r0, #1
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	d106      	bne.n	800849a <__sflush_r+0x62>
 800848c:	6829      	ldr	r1, [r5, #0]
 800848e:	291d      	cmp	r1, #29
 8008490:	d82b      	bhi.n	80084ea <__sflush_r+0xb2>
 8008492:	4a2a      	ldr	r2, [pc, #168]	@ (800853c <__sflush_r+0x104>)
 8008494:	40ca      	lsrs	r2, r1
 8008496:	07d6      	lsls	r6, r2, #31
 8008498:	d527      	bpl.n	80084ea <__sflush_r+0xb2>
 800849a:	2200      	movs	r2, #0
 800849c:	6062      	str	r2, [r4, #4]
 800849e:	04d9      	lsls	r1, r3, #19
 80084a0:	6922      	ldr	r2, [r4, #16]
 80084a2:	6022      	str	r2, [r4, #0]
 80084a4:	d504      	bpl.n	80084b0 <__sflush_r+0x78>
 80084a6:	1c42      	adds	r2, r0, #1
 80084a8:	d101      	bne.n	80084ae <__sflush_r+0x76>
 80084aa:	682b      	ldr	r3, [r5, #0]
 80084ac:	b903      	cbnz	r3, 80084b0 <__sflush_r+0x78>
 80084ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80084b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084b2:	602f      	str	r7, [r5, #0]
 80084b4:	b1b9      	cbz	r1, 80084e6 <__sflush_r+0xae>
 80084b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084ba:	4299      	cmp	r1, r3
 80084bc:	d002      	beq.n	80084c4 <__sflush_r+0x8c>
 80084be:	4628      	mov	r0, r5
 80084c0:	f7ff fbd6 	bl	8007c70 <_free_r>
 80084c4:	2300      	movs	r3, #0
 80084c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80084c8:	e00d      	b.n	80084e6 <__sflush_r+0xae>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b0      	blx	r6
 80084d0:	4602      	mov	r2, r0
 80084d2:	1c50      	adds	r0, r2, #1
 80084d4:	d1c9      	bne.n	800846a <__sflush_r+0x32>
 80084d6:	682b      	ldr	r3, [r5, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d0c6      	beq.n	800846a <__sflush_r+0x32>
 80084dc:	2b1d      	cmp	r3, #29
 80084de:	d001      	beq.n	80084e4 <__sflush_r+0xac>
 80084e0:	2b16      	cmp	r3, #22
 80084e2:	d11e      	bne.n	8008522 <__sflush_r+0xea>
 80084e4:	602f      	str	r7, [r5, #0]
 80084e6:	2000      	movs	r0, #0
 80084e8:	e022      	b.n	8008530 <__sflush_r+0xf8>
 80084ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ee:	b21b      	sxth	r3, r3
 80084f0:	e01b      	b.n	800852a <__sflush_r+0xf2>
 80084f2:	690f      	ldr	r7, [r1, #16]
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	d0f6      	beq.n	80084e6 <__sflush_r+0xae>
 80084f8:	0793      	lsls	r3, r2, #30
 80084fa:	680e      	ldr	r6, [r1, #0]
 80084fc:	bf08      	it	eq
 80084fe:	694b      	ldreq	r3, [r1, #20]
 8008500:	600f      	str	r7, [r1, #0]
 8008502:	bf18      	it	ne
 8008504:	2300      	movne	r3, #0
 8008506:	eba6 0807 	sub.w	r8, r6, r7
 800850a:	608b      	str	r3, [r1, #8]
 800850c:	f1b8 0f00 	cmp.w	r8, #0
 8008510:	dde9      	ble.n	80084e6 <__sflush_r+0xae>
 8008512:	6a21      	ldr	r1, [r4, #32]
 8008514:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008516:	4643      	mov	r3, r8
 8008518:	463a      	mov	r2, r7
 800851a:	4628      	mov	r0, r5
 800851c:	47b0      	blx	r6
 800851e:	2800      	cmp	r0, #0
 8008520:	dc08      	bgt.n	8008534 <__sflush_r+0xfc>
 8008522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008534:	4407      	add	r7, r0
 8008536:	eba8 0800 	sub.w	r8, r8, r0
 800853a:	e7e7      	b.n	800850c <__sflush_r+0xd4>
 800853c:	20400001 	.word	0x20400001

08008540 <_fflush_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	690b      	ldr	r3, [r1, #16]
 8008544:	4605      	mov	r5, r0
 8008546:	460c      	mov	r4, r1
 8008548:	b913      	cbnz	r3, 8008550 <_fflush_r+0x10>
 800854a:	2500      	movs	r5, #0
 800854c:	4628      	mov	r0, r5
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	b118      	cbz	r0, 800855a <_fflush_r+0x1a>
 8008552:	6a03      	ldr	r3, [r0, #32]
 8008554:	b90b      	cbnz	r3, 800855a <_fflush_r+0x1a>
 8008556:	f7ff fa47 	bl	80079e8 <__sinit>
 800855a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0f3      	beq.n	800854a <_fflush_r+0xa>
 8008562:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008564:	07d0      	lsls	r0, r2, #31
 8008566:	d404      	bmi.n	8008572 <_fflush_r+0x32>
 8008568:	0599      	lsls	r1, r3, #22
 800856a:	d402      	bmi.n	8008572 <_fflush_r+0x32>
 800856c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800856e:	f7ff fb50 	bl	8007c12 <__retarget_lock_acquire_recursive>
 8008572:	4628      	mov	r0, r5
 8008574:	4621      	mov	r1, r4
 8008576:	f7ff ff5f 	bl	8008438 <__sflush_r>
 800857a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800857c:	07da      	lsls	r2, r3, #31
 800857e:	4605      	mov	r5, r0
 8008580:	d4e4      	bmi.n	800854c <_fflush_r+0xc>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	059b      	lsls	r3, r3, #22
 8008586:	d4e1      	bmi.n	800854c <_fflush_r+0xc>
 8008588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800858a:	f7ff fb43 	bl	8007c14 <__retarget_lock_release_recursive>
 800858e:	e7dd      	b.n	800854c <_fflush_r+0xc>

08008590 <fiprintf>:
 8008590:	b40e      	push	{r1, r2, r3}
 8008592:	b503      	push	{r0, r1, lr}
 8008594:	4601      	mov	r1, r0
 8008596:	ab03      	add	r3, sp, #12
 8008598:	4805      	ldr	r0, [pc, #20]	@ (80085b0 <fiprintf+0x20>)
 800859a:	f853 2b04 	ldr.w	r2, [r3], #4
 800859e:	6800      	ldr	r0, [r0, #0]
 80085a0:	9301      	str	r3, [sp, #4]
 80085a2:	f000 f88f 	bl	80086c4 <_vfiprintf_r>
 80085a6:	b002      	add	sp, #8
 80085a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085ac:	b003      	add	sp, #12
 80085ae:	4770      	bx	lr
 80085b0:	200000b0 	.word	0x200000b0

080085b4 <memmove>:
 80085b4:	4288      	cmp	r0, r1
 80085b6:	b510      	push	{r4, lr}
 80085b8:	eb01 0402 	add.w	r4, r1, r2
 80085bc:	d902      	bls.n	80085c4 <memmove+0x10>
 80085be:	4284      	cmp	r4, r0
 80085c0:	4623      	mov	r3, r4
 80085c2:	d807      	bhi.n	80085d4 <memmove+0x20>
 80085c4:	1e43      	subs	r3, r0, #1
 80085c6:	42a1      	cmp	r1, r4
 80085c8:	d008      	beq.n	80085dc <memmove+0x28>
 80085ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085d2:	e7f8      	b.n	80085c6 <memmove+0x12>
 80085d4:	4402      	add	r2, r0
 80085d6:	4601      	mov	r1, r0
 80085d8:	428a      	cmp	r2, r1
 80085da:	d100      	bne.n	80085de <memmove+0x2a>
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085e6:	e7f7      	b.n	80085d8 <memmove+0x24>

080085e8 <_sbrk_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4d06      	ldr	r5, [pc, #24]	@ (8008604 <_sbrk_r+0x1c>)
 80085ec:	2300      	movs	r3, #0
 80085ee:	4604      	mov	r4, r0
 80085f0:	4608      	mov	r0, r1
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	f7f9 ff8c 	bl	8002510 <_sbrk>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d102      	bne.n	8008602 <_sbrk_r+0x1a>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	b103      	cbz	r3, 8008602 <_sbrk_r+0x1a>
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	200042d4 	.word	0x200042d4

08008608 <abort>:
 8008608:	b508      	push	{r3, lr}
 800860a:	2006      	movs	r0, #6
 800860c:	f000 fa2e 	bl	8008a6c <raise>
 8008610:	2001      	movs	r0, #1
 8008612:	f7f9 ff04 	bl	800241e <_exit>

08008616 <_realloc_r>:
 8008616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800861a:	4607      	mov	r7, r0
 800861c:	4614      	mov	r4, r2
 800861e:	460d      	mov	r5, r1
 8008620:	b921      	cbnz	r1, 800862c <_realloc_r+0x16>
 8008622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	4611      	mov	r1, r2
 8008628:	f7ff bb96 	b.w	8007d58 <_malloc_r>
 800862c:	b92a      	cbnz	r2, 800863a <_realloc_r+0x24>
 800862e:	f7ff fb1f 	bl	8007c70 <_free_r>
 8008632:	4625      	mov	r5, r4
 8008634:	4628      	mov	r0, r5
 8008636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863a:	f000 fa33 	bl	8008aa4 <_malloc_usable_size_r>
 800863e:	4284      	cmp	r4, r0
 8008640:	4606      	mov	r6, r0
 8008642:	d802      	bhi.n	800864a <_realloc_r+0x34>
 8008644:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008648:	d8f4      	bhi.n	8008634 <_realloc_r+0x1e>
 800864a:	4621      	mov	r1, r4
 800864c:	4638      	mov	r0, r7
 800864e:	f7ff fb83 	bl	8007d58 <_malloc_r>
 8008652:	4680      	mov	r8, r0
 8008654:	b908      	cbnz	r0, 800865a <_realloc_r+0x44>
 8008656:	4645      	mov	r5, r8
 8008658:	e7ec      	b.n	8008634 <_realloc_r+0x1e>
 800865a:	42b4      	cmp	r4, r6
 800865c:	4622      	mov	r2, r4
 800865e:	4629      	mov	r1, r5
 8008660:	bf28      	it	cs
 8008662:	4632      	movcs	r2, r6
 8008664:	f7ff fad7 	bl	8007c16 <memcpy>
 8008668:	4629      	mov	r1, r5
 800866a:	4638      	mov	r0, r7
 800866c:	f7ff fb00 	bl	8007c70 <_free_r>
 8008670:	e7f1      	b.n	8008656 <_realloc_r+0x40>

08008672 <__sfputc_r>:
 8008672:	6893      	ldr	r3, [r2, #8]
 8008674:	3b01      	subs	r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	b410      	push	{r4}
 800867a:	6093      	str	r3, [r2, #8]
 800867c:	da08      	bge.n	8008690 <__sfputc_r+0x1e>
 800867e:	6994      	ldr	r4, [r2, #24]
 8008680:	42a3      	cmp	r3, r4
 8008682:	db01      	blt.n	8008688 <__sfputc_r+0x16>
 8008684:	290a      	cmp	r1, #10
 8008686:	d103      	bne.n	8008690 <__sfputc_r+0x1e>
 8008688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800868c:	f000 b932 	b.w	80088f4 <__swbuf_r>
 8008690:	6813      	ldr	r3, [r2, #0]
 8008692:	1c58      	adds	r0, r3, #1
 8008694:	6010      	str	r0, [r2, #0]
 8008696:	7019      	strb	r1, [r3, #0]
 8008698:	4608      	mov	r0, r1
 800869a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <__sfputs_r>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	4606      	mov	r6, r0
 80086a4:	460f      	mov	r7, r1
 80086a6:	4614      	mov	r4, r2
 80086a8:	18d5      	adds	r5, r2, r3
 80086aa:	42ac      	cmp	r4, r5
 80086ac:	d101      	bne.n	80086b2 <__sfputs_r+0x12>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e007      	b.n	80086c2 <__sfputs_r+0x22>
 80086b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b6:	463a      	mov	r2, r7
 80086b8:	4630      	mov	r0, r6
 80086ba:	f7ff ffda 	bl	8008672 <__sfputc_r>
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	d1f3      	bne.n	80086aa <__sfputs_r+0xa>
 80086c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086c4 <_vfiprintf_r>:
 80086c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c8:	460d      	mov	r5, r1
 80086ca:	b09d      	sub	sp, #116	@ 0x74
 80086cc:	4614      	mov	r4, r2
 80086ce:	4698      	mov	r8, r3
 80086d0:	4606      	mov	r6, r0
 80086d2:	b118      	cbz	r0, 80086dc <_vfiprintf_r+0x18>
 80086d4:	6a03      	ldr	r3, [r0, #32]
 80086d6:	b90b      	cbnz	r3, 80086dc <_vfiprintf_r+0x18>
 80086d8:	f7ff f986 	bl	80079e8 <__sinit>
 80086dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086de:	07d9      	lsls	r1, r3, #31
 80086e0:	d405      	bmi.n	80086ee <_vfiprintf_r+0x2a>
 80086e2:	89ab      	ldrh	r3, [r5, #12]
 80086e4:	059a      	lsls	r2, r3, #22
 80086e6:	d402      	bmi.n	80086ee <_vfiprintf_r+0x2a>
 80086e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086ea:	f7ff fa92 	bl	8007c12 <__retarget_lock_acquire_recursive>
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	071b      	lsls	r3, r3, #28
 80086f2:	d501      	bpl.n	80086f8 <_vfiprintf_r+0x34>
 80086f4:	692b      	ldr	r3, [r5, #16]
 80086f6:	b99b      	cbnz	r3, 8008720 <_vfiprintf_r+0x5c>
 80086f8:	4629      	mov	r1, r5
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f938 	bl	8008970 <__swsetup_r>
 8008700:	b170      	cbz	r0, 8008720 <_vfiprintf_r+0x5c>
 8008702:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008704:	07dc      	lsls	r4, r3, #31
 8008706:	d504      	bpl.n	8008712 <_vfiprintf_r+0x4e>
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	b01d      	add	sp, #116	@ 0x74
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	89ab      	ldrh	r3, [r5, #12]
 8008714:	0598      	lsls	r0, r3, #22
 8008716:	d4f7      	bmi.n	8008708 <_vfiprintf_r+0x44>
 8008718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800871a:	f7ff fa7b 	bl	8007c14 <__retarget_lock_release_recursive>
 800871e:	e7f3      	b.n	8008708 <_vfiprintf_r+0x44>
 8008720:	2300      	movs	r3, #0
 8008722:	9309      	str	r3, [sp, #36]	@ 0x24
 8008724:	2320      	movs	r3, #32
 8008726:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800872a:	f8cd 800c 	str.w	r8, [sp, #12]
 800872e:	2330      	movs	r3, #48	@ 0x30
 8008730:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088e0 <_vfiprintf_r+0x21c>
 8008734:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008738:	f04f 0901 	mov.w	r9, #1
 800873c:	4623      	mov	r3, r4
 800873e:	469a      	mov	sl, r3
 8008740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008744:	b10a      	cbz	r2, 800874a <_vfiprintf_r+0x86>
 8008746:	2a25      	cmp	r2, #37	@ 0x25
 8008748:	d1f9      	bne.n	800873e <_vfiprintf_r+0x7a>
 800874a:	ebba 0b04 	subs.w	fp, sl, r4
 800874e:	d00b      	beq.n	8008768 <_vfiprintf_r+0xa4>
 8008750:	465b      	mov	r3, fp
 8008752:	4622      	mov	r2, r4
 8008754:	4629      	mov	r1, r5
 8008756:	4630      	mov	r0, r6
 8008758:	f7ff ffa2 	bl	80086a0 <__sfputs_r>
 800875c:	3001      	adds	r0, #1
 800875e:	f000 80a7 	beq.w	80088b0 <_vfiprintf_r+0x1ec>
 8008762:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008764:	445a      	add	r2, fp
 8008766:	9209      	str	r2, [sp, #36]	@ 0x24
 8008768:	f89a 3000 	ldrb.w	r3, [sl]
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 809f 	beq.w	80088b0 <_vfiprintf_r+0x1ec>
 8008772:	2300      	movs	r3, #0
 8008774:	f04f 32ff 	mov.w	r2, #4294967295
 8008778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800877c:	f10a 0a01 	add.w	sl, sl, #1
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	9307      	str	r3, [sp, #28]
 8008784:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008788:	931a      	str	r3, [sp, #104]	@ 0x68
 800878a:	4654      	mov	r4, sl
 800878c:	2205      	movs	r2, #5
 800878e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008792:	4853      	ldr	r0, [pc, #332]	@ (80088e0 <_vfiprintf_r+0x21c>)
 8008794:	f7f7 fd1c 	bl	80001d0 <memchr>
 8008798:	9a04      	ldr	r2, [sp, #16]
 800879a:	b9d8      	cbnz	r0, 80087d4 <_vfiprintf_r+0x110>
 800879c:	06d1      	lsls	r1, r2, #27
 800879e:	bf44      	itt	mi
 80087a0:	2320      	movmi	r3, #32
 80087a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087a6:	0713      	lsls	r3, r2, #28
 80087a8:	bf44      	itt	mi
 80087aa:	232b      	movmi	r3, #43	@ 0x2b
 80087ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087b0:	f89a 3000 	ldrb.w	r3, [sl]
 80087b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80087b6:	d015      	beq.n	80087e4 <_vfiprintf_r+0x120>
 80087b8:	9a07      	ldr	r2, [sp, #28]
 80087ba:	4654      	mov	r4, sl
 80087bc:	2000      	movs	r0, #0
 80087be:	f04f 0c0a 	mov.w	ip, #10
 80087c2:	4621      	mov	r1, r4
 80087c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c8:	3b30      	subs	r3, #48	@ 0x30
 80087ca:	2b09      	cmp	r3, #9
 80087cc:	d94b      	bls.n	8008866 <_vfiprintf_r+0x1a2>
 80087ce:	b1b0      	cbz	r0, 80087fe <_vfiprintf_r+0x13a>
 80087d0:	9207      	str	r2, [sp, #28]
 80087d2:	e014      	b.n	80087fe <_vfiprintf_r+0x13a>
 80087d4:	eba0 0308 	sub.w	r3, r0, r8
 80087d8:	fa09 f303 	lsl.w	r3, r9, r3
 80087dc:	4313      	orrs	r3, r2
 80087de:	9304      	str	r3, [sp, #16]
 80087e0:	46a2      	mov	sl, r4
 80087e2:	e7d2      	b.n	800878a <_vfiprintf_r+0xc6>
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	1d19      	adds	r1, r3, #4
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	9103      	str	r1, [sp, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bfbb      	ittet	lt
 80087f0:	425b      	neglt	r3, r3
 80087f2:	f042 0202 	orrlt.w	r2, r2, #2
 80087f6:	9307      	strge	r3, [sp, #28]
 80087f8:	9307      	strlt	r3, [sp, #28]
 80087fa:	bfb8      	it	lt
 80087fc:	9204      	strlt	r2, [sp, #16]
 80087fe:	7823      	ldrb	r3, [r4, #0]
 8008800:	2b2e      	cmp	r3, #46	@ 0x2e
 8008802:	d10a      	bne.n	800881a <_vfiprintf_r+0x156>
 8008804:	7863      	ldrb	r3, [r4, #1]
 8008806:	2b2a      	cmp	r3, #42	@ 0x2a
 8008808:	d132      	bne.n	8008870 <_vfiprintf_r+0x1ac>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	1d1a      	adds	r2, r3, #4
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	9203      	str	r2, [sp, #12]
 8008812:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008816:	3402      	adds	r4, #2
 8008818:	9305      	str	r3, [sp, #20]
 800881a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088f0 <_vfiprintf_r+0x22c>
 800881e:	7821      	ldrb	r1, [r4, #0]
 8008820:	2203      	movs	r2, #3
 8008822:	4650      	mov	r0, sl
 8008824:	f7f7 fcd4 	bl	80001d0 <memchr>
 8008828:	b138      	cbz	r0, 800883a <_vfiprintf_r+0x176>
 800882a:	9b04      	ldr	r3, [sp, #16]
 800882c:	eba0 000a 	sub.w	r0, r0, sl
 8008830:	2240      	movs	r2, #64	@ 0x40
 8008832:	4082      	lsls	r2, r0
 8008834:	4313      	orrs	r3, r2
 8008836:	3401      	adds	r4, #1
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883e:	4829      	ldr	r0, [pc, #164]	@ (80088e4 <_vfiprintf_r+0x220>)
 8008840:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008844:	2206      	movs	r2, #6
 8008846:	f7f7 fcc3 	bl	80001d0 <memchr>
 800884a:	2800      	cmp	r0, #0
 800884c:	d03f      	beq.n	80088ce <_vfiprintf_r+0x20a>
 800884e:	4b26      	ldr	r3, [pc, #152]	@ (80088e8 <_vfiprintf_r+0x224>)
 8008850:	bb1b      	cbnz	r3, 800889a <_vfiprintf_r+0x1d6>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	3307      	adds	r3, #7
 8008856:	f023 0307 	bic.w	r3, r3, #7
 800885a:	3308      	adds	r3, #8
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008860:	443b      	add	r3, r7
 8008862:	9309      	str	r3, [sp, #36]	@ 0x24
 8008864:	e76a      	b.n	800873c <_vfiprintf_r+0x78>
 8008866:	fb0c 3202 	mla	r2, ip, r2, r3
 800886a:	460c      	mov	r4, r1
 800886c:	2001      	movs	r0, #1
 800886e:	e7a8      	b.n	80087c2 <_vfiprintf_r+0xfe>
 8008870:	2300      	movs	r3, #0
 8008872:	3401      	adds	r4, #1
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	4619      	mov	r1, r3
 8008878:	f04f 0c0a 	mov.w	ip, #10
 800887c:	4620      	mov	r0, r4
 800887e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008882:	3a30      	subs	r2, #48	@ 0x30
 8008884:	2a09      	cmp	r2, #9
 8008886:	d903      	bls.n	8008890 <_vfiprintf_r+0x1cc>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0c6      	beq.n	800881a <_vfiprintf_r+0x156>
 800888c:	9105      	str	r1, [sp, #20]
 800888e:	e7c4      	b.n	800881a <_vfiprintf_r+0x156>
 8008890:	fb0c 2101 	mla	r1, ip, r1, r2
 8008894:	4604      	mov	r4, r0
 8008896:	2301      	movs	r3, #1
 8008898:	e7f0      	b.n	800887c <_vfiprintf_r+0x1b8>
 800889a:	ab03      	add	r3, sp, #12
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	462a      	mov	r2, r5
 80088a0:	4b12      	ldr	r3, [pc, #72]	@ (80088ec <_vfiprintf_r+0x228>)
 80088a2:	a904      	add	r1, sp, #16
 80088a4:	4630      	mov	r0, r6
 80088a6:	f3af 8000 	nop.w
 80088aa:	4607      	mov	r7, r0
 80088ac:	1c78      	adds	r0, r7, #1
 80088ae:	d1d6      	bne.n	800885e <_vfiprintf_r+0x19a>
 80088b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d405      	bmi.n	80088c2 <_vfiprintf_r+0x1fe>
 80088b6:	89ab      	ldrh	r3, [r5, #12]
 80088b8:	059a      	lsls	r2, r3, #22
 80088ba:	d402      	bmi.n	80088c2 <_vfiprintf_r+0x1fe>
 80088bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088be:	f7ff f9a9 	bl	8007c14 <__retarget_lock_release_recursive>
 80088c2:	89ab      	ldrh	r3, [r5, #12]
 80088c4:	065b      	lsls	r3, r3, #25
 80088c6:	f53f af1f 	bmi.w	8008708 <_vfiprintf_r+0x44>
 80088ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088cc:	e71e      	b.n	800870c <_vfiprintf_r+0x48>
 80088ce:	ab03      	add	r3, sp, #12
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	462a      	mov	r2, r5
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <_vfiprintf_r+0x228>)
 80088d6:	a904      	add	r1, sp, #16
 80088d8:	4630      	mov	r0, r6
 80088da:	f7ff fc8f 	bl	80081fc <_printf_i>
 80088de:	e7e4      	b.n	80088aa <_vfiprintf_r+0x1e6>
 80088e0:	0800a41f 	.word	0x0800a41f
 80088e4:	0800a429 	.word	0x0800a429
 80088e8:	00000000 	.word	0x00000000
 80088ec:	080086a1 	.word	0x080086a1
 80088f0:	0800a425 	.word	0x0800a425

080088f4 <__swbuf_r>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	460e      	mov	r6, r1
 80088f8:	4614      	mov	r4, r2
 80088fa:	4605      	mov	r5, r0
 80088fc:	b118      	cbz	r0, 8008906 <__swbuf_r+0x12>
 80088fe:	6a03      	ldr	r3, [r0, #32]
 8008900:	b90b      	cbnz	r3, 8008906 <__swbuf_r+0x12>
 8008902:	f7ff f871 	bl	80079e8 <__sinit>
 8008906:	69a3      	ldr	r3, [r4, #24]
 8008908:	60a3      	str	r3, [r4, #8]
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	071a      	lsls	r2, r3, #28
 800890e:	d501      	bpl.n	8008914 <__swbuf_r+0x20>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	b943      	cbnz	r3, 8008926 <__swbuf_r+0x32>
 8008914:	4621      	mov	r1, r4
 8008916:	4628      	mov	r0, r5
 8008918:	f000 f82a 	bl	8008970 <__swsetup_r>
 800891c:	b118      	cbz	r0, 8008926 <__swbuf_r+0x32>
 800891e:	f04f 37ff 	mov.w	r7, #4294967295
 8008922:	4638      	mov	r0, r7
 8008924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	6922      	ldr	r2, [r4, #16]
 800892a:	1a98      	subs	r0, r3, r2
 800892c:	6963      	ldr	r3, [r4, #20]
 800892e:	b2f6      	uxtb	r6, r6
 8008930:	4283      	cmp	r3, r0
 8008932:	4637      	mov	r7, r6
 8008934:	dc05      	bgt.n	8008942 <__swbuf_r+0x4e>
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f7ff fe01 	bl	8008540 <_fflush_r>
 800893e:	2800      	cmp	r0, #0
 8008940:	d1ed      	bne.n	800891e <__swbuf_r+0x2a>
 8008942:	68a3      	ldr	r3, [r4, #8]
 8008944:	3b01      	subs	r3, #1
 8008946:	60a3      	str	r3, [r4, #8]
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	6022      	str	r2, [r4, #0]
 800894e:	701e      	strb	r6, [r3, #0]
 8008950:	6962      	ldr	r2, [r4, #20]
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	429a      	cmp	r2, r3
 8008956:	d004      	beq.n	8008962 <__swbuf_r+0x6e>
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	07db      	lsls	r3, r3, #31
 800895c:	d5e1      	bpl.n	8008922 <__swbuf_r+0x2e>
 800895e:	2e0a      	cmp	r6, #10
 8008960:	d1df      	bne.n	8008922 <__swbuf_r+0x2e>
 8008962:	4621      	mov	r1, r4
 8008964:	4628      	mov	r0, r5
 8008966:	f7ff fdeb 	bl	8008540 <_fflush_r>
 800896a:	2800      	cmp	r0, #0
 800896c:	d0d9      	beq.n	8008922 <__swbuf_r+0x2e>
 800896e:	e7d6      	b.n	800891e <__swbuf_r+0x2a>

08008970 <__swsetup_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4b29      	ldr	r3, [pc, #164]	@ (8008a18 <__swsetup_r+0xa8>)
 8008974:	4605      	mov	r5, r0
 8008976:	6818      	ldr	r0, [r3, #0]
 8008978:	460c      	mov	r4, r1
 800897a:	b118      	cbz	r0, 8008984 <__swsetup_r+0x14>
 800897c:	6a03      	ldr	r3, [r0, #32]
 800897e:	b90b      	cbnz	r3, 8008984 <__swsetup_r+0x14>
 8008980:	f7ff f832 	bl	80079e8 <__sinit>
 8008984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008988:	0719      	lsls	r1, r3, #28
 800898a:	d422      	bmi.n	80089d2 <__swsetup_r+0x62>
 800898c:	06da      	lsls	r2, r3, #27
 800898e:	d407      	bmi.n	80089a0 <__swsetup_r+0x30>
 8008990:	2209      	movs	r2, #9
 8008992:	602a      	str	r2, [r5, #0]
 8008994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	f04f 30ff 	mov.w	r0, #4294967295
 800899e:	e033      	b.n	8008a08 <__swsetup_r+0x98>
 80089a0:	0758      	lsls	r0, r3, #29
 80089a2:	d512      	bpl.n	80089ca <__swsetup_r+0x5a>
 80089a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089a6:	b141      	cbz	r1, 80089ba <__swsetup_r+0x4a>
 80089a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089ac:	4299      	cmp	r1, r3
 80089ae:	d002      	beq.n	80089b6 <__swsetup_r+0x46>
 80089b0:	4628      	mov	r0, r5
 80089b2:	f7ff f95d 	bl	8007c70 <_free_r>
 80089b6:	2300      	movs	r3, #0
 80089b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	2300      	movs	r3, #0
 80089c4:	6063      	str	r3, [r4, #4]
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	f043 0308 	orr.w	r3, r3, #8
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	b94b      	cbnz	r3, 80089ea <__swsetup_r+0x7a>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e0:	d003      	beq.n	80089ea <__swsetup_r+0x7a>
 80089e2:	4621      	mov	r1, r4
 80089e4:	4628      	mov	r0, r5
 80089e6:	f000 f88b 	bl	8008b00 <__smakebuf_r>
 80089ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ee:	f013 0201 	ands.w	r2, r3, #1
 80089f2:	d00a      	beq.n	8008a0a <__swsetup_r+0x9a>
 80089f4:	2200      	movs	r2, #0
 80089f6:	60a2      	str	r2, [r4, #8]
 80089f8:	6962      	ldr	r2, [r4, #20]
 80089fa:	4252      	negs	r2, r2
 80089fc:	61a2      	str	r2, [r4, #24]
 80089fe:	6922      	ldr	r2, [r4, #16]
 8008a00:	b942      	cbnz	r2, 8008a14 <__swsetup_r+0xa4>
 8008a02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a06:	d1c5      	bne.n	8008994 <__swsetup_r+0x24>
 8008a08:	bd38      	pop	{r3, r4, r5, pc}
 8008a0a:	0799      	lsls	r1, r3, #30
 8008a0c:	bf58      	it	pl
 8008a0e:	6962      	ldrpl	r2, [r4, #20]
 8008a10:	60a2      	str	r2, [r4, #8]
 8008a12:	e7f4      	b.n	80089fe <__swsetup_r+0x8e>
 8008a14:	2000      	movs	r0, #0
 8008a16:	e7f7      	b.n	8008a08 <__swsetup_r+0x98>
 8008a18:	200000b0 	.word	0x200000b0

08008a1c <_raise_r>:
 8008a1c:	291f      	cmp	r1, #31
 8008a1e:	b538      	push	{r3, r4, r5, lr}
 8008a20:	4605      	mov	r5, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	d904      	bls.n	8008a30 <_raise_r+0x14>
 8008a26:	2316      	movs	r3, #22
 8008a28:	6003      	str	r3, [r0, #0]
 8008a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a32:	b112      	cbz	r2, 8008a3a <_raise_r+0x1e>
 8008a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a38:	b94b      	cbnz	r3, 8008a4e <_raise_r+0x32>
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f000 f830 	bl	8008aa0 <_getpid_r>
 8008a40:	4622      	mov	r2, r4
 8008a42:	4601      	mov	r1, r0
 8008a44:	4628      	mov	r0, r5
 8008a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a4a:	f000 b817 	b.w	8008a7c <_kill_r>
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d00a      	beq.n	8008a68 <_raise_r+0x4c>
 8008a52:	1c59      	adds	r1, r3, #1
 8008a54:	d103      	bne.n	8008a5e <_raise_r+0x42>
 8008a56:	2316      	movs	r3, #22
 8008a58:	6003      	str	r3, [r0, #0]
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	e7e7      	b.n	8008a2e <_raise_r+0x12>
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a64:	4620      	mov	r0, r4
 8008a66:	4798      	blx	r3
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e7e0      	b.n	8008a2e <_raise_r+0x12>

08008a6c <raise>:
 8008a6c:	4b02      	ldr	r3, [pc, #8]	@ (8008a78 <raise+0xc>)
 8008a6e:	4601      	mov	r1, r0
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	f7ff bfd3 	b.w	8008a1c <_raise_r>
 8008a76:	bf00      	nop
 8008a78:	200000b0 	.word	0x200000b0

08008a7c <_kill_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d07      	ldr	r5, [pc, #28]	@ (8008a9c <_kill_r+0x20>)
 8008a80:	2300      	movs	r3, #0
 8008a82:	4604      	mov	r4, r0
 8008a84:	4608      	mov	r0, r1
 8008a86:	4611      	mov	r1, r2
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	f7f9 fcb8 	bl	80023fe <_kill>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	d102      	bne.n	8008a98 <_kill_r+0x1c>
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	b103      	cbz	r3, 8008a98 <_kill_r+0x1c>
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	bd38      	pop	{r3, r4, r5, pc}
 8008a9a:	bf00      	nop
 8008a9c:	200042d4 	.word	0x200042d4

08008aa0 <_getpid_r>:
 8008aa0:	f7f9 bca5 	b.w	80023ee <_getpid>

08008aa4 <_malloc_usable_size_r>:
 8008aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa8:	1f18      	subs	r0, r3, #4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfbc      	itt	lt
 8008aae:	580b      	ldrlt	r3, [r1, r0]
 8008ab0:	18c0      	addlt	r0, r0, r3
 8008ab2:	4770      	bx	lr

08008ab4 <__swhatbuf_r>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008abc:	2900      	cmp	r1, #0
 8008abe:	b096      	sub	sp, #88	@ 0x58
 8008ac0:	4615      	mov	r5, r2
 8008ac2:	461e      	mov	r6, r3
 8008ac4:	da0d      	bge.n	8008ae2 <__swhatbuf_r+0x2e>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008acc:	f04f 0100 	mov.w	r1, #0
 8008ad0:	bf14      	ite	ne
 8008ad2:	2340      	movne	r3, #64	@ 0x40
 8008ad4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ad8:	2000      	movs	r0, #0
 8008ada:	6031      	str	r1, [r6, #0]
 8008adc:	602b      	str	r3, [r5, #0]
 8008ade:	b016      	add	sp, #88	@ 0x58
 8008ae0:	bd70      	pop	{r4, r5, r6, pc}
 8008ae2:	466a      	mov	r2, sp
 8008ae4:	f000 f848 	bl	8008b78 <_fstat_r>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	dbec      	blt.n	8008ac6 <__swhatbuf_r+0x12>
 8008aec:	9901      	ldr	r1, [sp, #4]
 8008aee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008af2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008af6:	4259      	negs	r1, r3
 8008af8:	4159      	adcs	r1, r3
 8008afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008afe:	e7eb      	b.n	8008ad8 <__swhatbuf_r+0x24>

08008b00 <__smakebuf_r>:
 8008b00:	898b      	ldrh	r3, [r1, #12]
 8008b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b04:	079d      	lsls	r5, r3, #30
 8008b06:	4606      	mov	r6, r0
 8008b08:	460c      	mov	r4, r1
 8008b0a:	d507      	bpl.n	8008b1c <__smakebuf_r+0x1c>
 8008b0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	6123      	str	r3, [r4, #16]
 8008b14:	2301      	movs	r3, #1
 8008b16:	6163      	str	r3, [r4, #20]
 8008b18:	b003      	add	sp, #12
 8008b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b1c:	ab01      	add	r3, sp, #4
 8008b1e:	466a      	mov	r2, sp
 8008b20:	f7ff ffc8 	bl	8008ab4 <__swhatbuf_r>
 8008b24:	9f00      	ldr	r7, [sp, #0]
 8008b26:	4605      	mov	r5, r0
 8008b28:	4639      	mov	r1, r7
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff f914 	bl	8007d58 <_malloc_r>
 8008b30:	b948      	cbnz	r0, 8008b46 <__smakebuf_r+0x46>
 8008b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b36:	059a      	lsls	r2, r3, #22
 8008b38:	d4ee      	bmi.n	8008b18 <__smakebuf_r+0x18>
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	f043 0302 	orr.w	r3, r3, #2
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	e7e2      	b.n	8008b0c <__smakebuf_r+0xc>
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	6020      	str	r0, [r4, #0]
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b56:	b15b      	cbz	r3, 8008b70 <__smakebuf_r+0x70>
 8008b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f000 f81d 	bl	8008b9c <_isatty_r>
 8008b62:	b128      	cbz	r0, 8008b70 <__smakebuf_r+0x70>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	f023 0303 	bic.w	r3, r3, #3
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	431d      	orrs	r5, r3
 8008b74:	81a5      	strh	r5, [r4, #12]
 8008b76:	e7cf      	b.n	8008b18 <__smakebuf_r+0x18>

08008b78 <_fstat_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4d07      	ldr	r5, [pc, #28]	@ (8008b98 <_fstat_r+0x20>)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	4611      	mov	r1, r2
 8008b84:	602b      	str	r3, [r5, #0]
 8008b86:	f7f9 fc9a 	bl	80024be <_fstat>
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	d102      	bne.n	8008b94 <_fstat_r+0x1c>
 8008b8e:	682b      	ldr	r3, [r5, #0]
 8008b90:	b103      	cbz	r3, 8008b94 <_fstat_r+0x1c>
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	bd38      	pop	{r3, r4, r5, pc}
 8008b96:	bf00      	nop
 8008b98:	200042d4 	.word	0x200042d4

08008b9c <_isatty_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4d06      	ldr	r5, [pc, #24]	@ (8008bb8 <_isatty_r+0x1c>)
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	4608      	mov	r0, r1
 8008ba6:	602b      	str	r3, [r5, #0]
 8008ba8:	f7f9 fc99 	bl	80024de <_isatty>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_isatty_r+0x1a>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_isatty_r+0x1a>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	200042d4 	.word	0x200042d4

08008bbc <_init>:
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	bf00      	nop
 8008bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc2:	bc08      	pop	{r3}
 8008bc4:	469e      	mov	lr, r3
 8008bc6:	4770      	bx	lr

08008bc8 <_fini>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr
