
ElementalCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007270  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08007400  08007400  00008400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079b0  080079b0  000090e4  2**0
                  CONTENTS
  4 .ARM          00000008  080079b0  080079b0  000089b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b8  080079b8  000090e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b8  080079b8  000089b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079bc  080079bc  000089bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080079c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090e4  2**0
                  CONTENTS
 10 .bss          000041d8  200000e4  200000e4  000090e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042bc  200042bc  000090e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b5e  00000000  00000000  00009114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003703  00000000  00000000  0001bc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  0001f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022814  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b15  00000000  00000000  00042d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce32f  00000000  00000000  00057819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125b48  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000d3d  00000000  00000000  00125b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004aac  00000000  00000000  001268c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0012b374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073e8 	.word	0x080073e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	080073e8 	.word	0x080073e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000100 	.word	0x20000100
 80005cc:	20000154 	.word	0x20000154

080005d0 <ClearScreen>:
#include "game_screen.h"
#include "st7789.h"
#include "stdint.h"

void ClearScreen() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af02      	add	r7, sp, #8
    ST7789_FillRectangle(0, 0, 240, 240, ST7789_BLACK);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	23f0      	movs	r3, #240	@ 0xf0
 80005dc:	22f0      	movs	r2, #240	@ 0xf0
 80005de:	2100      	movs	r1, #0
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fe47 	bl	8001274 <ST7789_FillRectangle>
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <DrawMenu>:

void DrawMenu(const char* title, const char** options, int numOptions, int currentSelection) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	@ 0x40
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
 80005f8:	603b      	str	r3, [r7, #0]
    char buffer[30];
    ClearScreen();
 80005fa:	f7ff ffe9 	bl	80005d0 <ClearScreen>
    sprintf(buffer, "%s", title);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	4926      	ldr	r1, [pc, #152]	@ (80006a0 <DrawMenu+0xb4>)
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fa4e 	bl	8006aa8 <siprintf>
    ST7789_DrawText(10, 10, buffer, ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 800060c:	f107 0214 	add.w	r2, r7, #20
 8000610:	2302      	movs	r3, #2
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2300      	movs	r3, #0
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800061c:	210a      	movs	r1, #10
 800061e:	200a      	movs	r0, #10
 8000620:	f000 ff50 	bl	80014c4 <ST7789_DrawText>

    for (int i = 0; i < numOptions; i++) {
 8000624:	2300      	movs	r3, #0
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
 8000628:	e031      	b.n	800068e <DrawMenu+0xa2>
        uint16_t color = (i == currentSelection) ? ST7789_YELLOW : ST7789_WHITE;
 800062a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	429a      	cmp	r2, r3
 8000630:	d102      	bne.n	8000638 <DrawMenu+0x4c>
 8000632:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000636:	e001      	b.n	800063c <DrawMenu+0x50>
 8000638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800063c:	867b      	strh	r3, [r7, #50]	@ 0x32
        sprintf(buffer, "%s %s", (i == currentSelection) ? ">" : " ", options[i]);
 800063e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	d101      	bne.n	800064a <DrawMenu+0x5e>
 8000646:	4917      	ldr	r1, [pc, #92]	@ (80006a4 <DrawMenu+0xb8>)
 8000648:	e000      	b.n	800064c <DrawMenu+0x60>
 800064a:	4917      	ldr	r1, [pc, #92]	@ (80006a8 <DrawMenu+0xbc>)
 800064c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	4413      	add	r3, r2
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f107 0014 	add.w	r0, r7, #20
 800065a:	460a      	mov	r2, r1
 800065c:	4913      	ldr	r1, [pc, #76]	@ (80006ac <DrawMenu+0xc0>)
 800065e:	f006 fa23 	bl	8006aa8 <siprintf>
        ST7789_DrawText(10, 40 + (i * 20), buffer, color, ST7789_BLACK, ST7789_SIZE);
 8000662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000664:	b29b      	uxth	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	0092      	lsls	r2, r2, #2
 800066a:	4413      	add	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	b29b      	uxth	r3, r3
 8000670:	3328      	adds	r3, #40	@ 0x28
 8000672:	b299      	uxth	r1, r3
 8000674:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000676:	f107 0214 	add.w	r2, r7, #20
 800067a:	2002      	movs	r0, #2
 800067c:	9001      	str	r0, [sp, #4]
 800067e:	2000      	movs	r0, #0
 8000680:	9000      	str	r0, [sp, #0]
 8000682:	200a      	movs	r0, #10
 8000684:	f000 ff1e 	bl	80014c4 <ST7789_DrawText>
    for (int i = 0; i < numOptions; i++) {
 8000688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800068a:	3301      	adds	r3, #1
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
 800068e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	429a      	cmp	r2, r3
 8000694:	dbc9      	blt.n	800062a <DrawMenu+0x3e>
    }
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	3738      	adds	r7, #56	@ 0x38
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	08007400 	.word	0x08007400
 80006a4:	08007404 	.word	0x08007404
 80006a8:	08007408 	.word	0x08007408
 80006ac:	0800740c 	.word	0x0800740c

080006b0 <KEYPAD_Scan>:
Keypad_Pin_t C_PINS[4] = {{C4_GPIO_Port, C4_Pin}, {C3_GPIO_Port, C3_Pin}, {C2_GPIO_Port, C2_Pin}, {C1_GPIO_Port, C1_Pin}};
// Pinos das linhas (entradas)
Keypad_Pin_t R_PINS[4] = {{R2_GPIO_Port, R2_Pin}, {R1_GPIO_Port, R1_Pin}, {R3_GPIO_Port, R3_Pin}, {R4_GPIO_Port, R4_Pin}};


char KEYPAD_Scan(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
    // Coloca todas as colunas em nível alto
    for (int i = 0; i < 4; i++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	e00f      	b.n	80006dc <KEYPAD_Scan+0x2c>
        HAL_GPIO_WritePin(C_PINS[i].PORT, C_PINS[i].PIN, GPIO_PIN_SET);
 80006bc:	4a3e      	ldr	r2, [pc, #248]	@ (80007b8 <KEYPAD_Scan+0x108>)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006c4:	4a3c      	ldr	r2, [pc, #240]	@ (80007b8 <KEYPAD_Scan+0x108>)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	4413      	add	r3, r2
 80006cc:	889b      	ldrh	r3, [r3, #4]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	f001 fe6b 	bl	80023ac <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	ddec      	ble.n	80006bc <KEYPAD_Scan+0xc>
    }

    // Loop para varrer cada coluna
    for (int col = 0; col < 4; col++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	e05e      	b.n	80007a6 <KEYPAD_Scan+0xf6>
        // Ativa a coluna atual (coloca em nível baixo)
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_RESET);
 80006e8:	4a33      	ldr	r2, [pc, #204]	@ (80007b8 <KEYPAD_Scan+0x108>)
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006f0:	4a31      	ldr	r2, [pc, #196]	@ (80007b8 <KEYPAD_Scan+0x108>)
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	4413      	add	r3, r2
 80006f8:	889b      	ldrh	r3, [r3, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	f001 fe55 	bl	80023ac <HAL_GPIO_WritePin>

        // Verifica qual linha foi para nível baixo
        for (int row = 0; row < 4; row++) {
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	e03b      	b.n	8000780 <KEYPAD_Scan+0xd0>
            if (HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET) {
 8000708:	4a2c      	ldr	r2, [pc, #176]	@ (80007bc <KEYPAD_Scan+0x10c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000710:	492a      	ldr	r1, [pc, #168]	@ (80007bc <KEYPAD_Scan+0x10c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	440b      	add	r3, r1
 8000718:	889b      	ldrh	r3, [r3, #4]
 800071a:	4619      	mov	r1, r3
 800071c:	4610      	mov	r0, r2
 800071e:	f001 fe2d 	bl	800237c <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d128      	bne.n	800077a <KEYPAD_Scan+0xca>
                // Botão pressionado!
                
                // --- Debounce e espera soltar a tecla ---
                HAL_Delay(50); // Simples debounce por atraso
 8000728:	2032      	movs	r0, #50	@ 0x32
 800072a:	f001 f92f 	bl	800198c <HAL_Delay>

                // Espera o usuário soltar a tecla para não ler a mesma tecla várias vezes
                while(HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET);
 800072e:	bf00      	nop
 8000730:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <KEYPAD_Scan+0x10c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000738:	4920      	ldr	r1, [pc, #128]	@ (80007bc <KEYPAD_Scan+0x10c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	440b      	add	r3, r1
 8000740:	889b      	ldrh	r3, [r3, #4]
 8000742:	4619      	mov	r1, r3
 8000744:	4610      	mov	r0, r2
 8000746:	f001 fe19 	bl	800237c <HAL_GPIO_ReadPin>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0ef      	beq.n	8000730 <KEYPAD_Scan+0x80>
                
                // Restaura a coluna para nível alto antes de retornar
                HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8000750:	4a19      	ldr	r2, [pc, #100]	@ (80007b8 <KEYPAD_Scan+0x108>)
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <KEYPAD_Scan+0x108>)
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	4413      	add	r3, r2
 8000760:	889b      	ldrh	r3, [r3, #4]
 8000762:	2201      	movs	r2, #1
 8000764:	4619      	mov	r1, r3
 8000766:	f001 fe21 	bl	80023ac <HAL_GPIO_WritePin>

                return KEYPAD_MAP[row][col];
 800076a:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <KEYPAD_Scan+0x110>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	441a      	add	r2, r3
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	e019      	b.n	80007ae <KEYPAD_Scan+0xfe>
        for (int row = 0; row < 4; row++) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b03      	cmp	r3, #3
 8000784:	ddc0      	ble.n	8000708 <KEYPAD_Scan+0x58>
            }
        }

        // Desativa a coluna atual antes de ir para a próxima
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8000786:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <KEYPAD_Scan+0x108>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800078e:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <KEYPAD_Scan+0x108>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4413      	add	r3, r2
 8000796:	889b      	ldrh	r3, [r3, #4]
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	f001 fe06 	bl	80023ac <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	dd9d      	ble.n	80006e8 <KEYPAD_Scan+0x38>
    }

    return '\0'; // Retorna nulo se nenhuma tecla for pressionada
 80007ac:	2300      	movs	r3, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000020 	.word	0x20000020
 80007c0:	08007954 	.word	0x08007954

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b09c      	sub	sp, #112	@ 0x70
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f001 f86d 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f861 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 f927 	bl	8000a24 <MX_GPIO_Init>
  MX_UART4_Init();
 80007d6:	f000 f8fb 	bl	80009d0 <MX_UART4_Init>
  MX_SPI1_Init();
 80007da:	f000 f8c3 	bl	8000964 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7789_Init();
 80007de:	f000 fcf1 	bl	80011c4 <ST7789_Init>
  ST7789_FillScreen(ST7789_BLACK);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 fdb4 	bl	8001350 <ST7789_FillScreen>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  osMutexDef(gameMutex);
 80007e8:	2300      	movs	r3, #0
 80007ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80007ec:	2300      	movs	r3, #0
 80007ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 80007f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 fdf0 	bl	80043da <osMutexCreate>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000878 <main+0xb4>)
 80007fe:	6013      	str	r3, [r2, #0]

  osThreadDef(initPutHalTask, StartInputHalTask, osPriorityNormal, 0, 128);
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <main+0xb8>)
 8000802:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000806:	461d      	mov	r5, r3
 8000808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  inputHalTaskHandle = osThreadCreate(osThread(initPutHalTask), NULL);
 8000814:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fd7d 	bl	800431a <osThreadCreate>
 8000820:	4603      	mov	r3, r0
 8000822:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <main+0xbc>)
 8000824:	6013      	str	r3, [r2, #0]

  osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 256);
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <main+0xc0>)
 8000828:	f107 041c 	add.w	r4, r7, #28
 800082c:	461d      	mov	r5, r3
 800082e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000832:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fd6a 	bl	800431a <osThreadCreate>
 8000846:	4603      	mov	r3, r0
 8000848:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <main+0xc4>)
 800084a:	6013      	str	r3, [r2, #0]

  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <main+0xc8>)
 800084e:	463c      	mov	r4, r7
 8000850:	461d      	mov	r5, r3
 8000852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000856:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800085a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 800085e:	463b      	mov	r3, r7
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fd59 	bl	800431a <osThreadCreate>
 8000868:	4603      	mov	r3, r0
 800086a:	4a09      	ldr	r2, [pc, #36]	@ (8000890 <main+0xcc>)
 800086c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800086e:	f003 fd4d 	bl	800430c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000872:	bf00      	nop
 8000874:	e7fd      	b.n	8000872 <main+0xae>
 8000876:	bf00      	nop
 8000878:	20000400 	.word	0x20000400
 800087c:	08007484 	.word	0x08007484
 8000880:	200003f4 	.word	0x200003f4
 8000884:	080074ac 	.word	0x080074ac
 8000888:	200003f8 	.word	0x200003f8
 800088c:	080074d4 	.word	0x080074d4
 8000890:	200003fc 	.word	0x200003fc

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	@ 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	@ 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f006 f922 	bl	8006aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b27      	ldr	r3, [pc, #156]	@ (800095c <SystemClock_Config+0xc8>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	4a26      	ldr	r2, [pc, #152]	@ (800095c <SystemClock_Config+0xc8>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c8:	4b24      	ldr	r3, [pc, #144]	@ (800095c <SystemClock_Config+0xc8>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <SystemClock_Config+0xcc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a20      	ldr	r2, [pc, #128]	@ (8000960 <SystemClock_Config+0xcc>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <SystemClock_Config+0xcc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f8:	2310      	movs	r3, #16
 80008fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fc:	2302      	movs	r3, #2
 80008fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000900:	2300      	movs	r3, #0
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000904:	2308      	movs	r3, #8
 8000906:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000908:	2332      	movs	r3, #50	@ 0x32
 800090a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090c:	2302      	movs	r3, #2
 800090e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fd7b 	bl	8002414 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000924:	f000 fb94 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000928:	230f      	movs	r3, #15
 800092a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	2302      	movs	r3, #2
 800092e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2101      	movs	r1, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f001 ffdd 	bl	8002904 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000950:	f000 fb7e 	bl	8001050 <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3750      	adds	r7, #80	@ 0x50
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40007000 	.word	0x40007000

08000964 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_SPI1_Init+0x64>)
 800096a:	4a18      	ldr	r2, [pc, #96]	@ (80009cc <MX_SPI1_Init+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_SPI1_Init+0x64>)
 8000984:	2202      	movs	r2, #2
 8000986:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_SPI1_Init+0x64>)
 800098a:	2201      	movs	r2, #1
 800098c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_SPI1_Init+0x64>)
 8000990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000994:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_SPI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099c:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <MX_SPI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_SPI1_Init+0x64>)
 80009b0:	220a      	movs	r2, #10
 80009b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_SPI1_Init+0x64>)
 80009b6:	f002 f985 	bl	8002cc4 <HAL_SPI_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009c0:	f000 fb46 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000354 	.word	0x20000354
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_UART4_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <MX_UART4_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_UART4_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_UART4_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_UART4_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_UART4_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_UART4_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_UART4_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_UART4_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_UART4_Init+0x4c>)
 8000a08:	f002 fd24 	bl	8003454 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 fb1d 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200003ac 	.word	0x200003ac
 8000a20:	40004c00 	.word	0x40004c00

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	@ 0x28
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a49      	ldr	r2, [pc, #292]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b47      	ldr	r3, [pc, #284]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b43      	ldr	r3, [pc, #268]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a42      	ldr	r2, [pc, #264]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b40      	ldr	r3, [pc, #256]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b3c      	ldr	r3, [pc, #240]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a3b      	ldr	r2, [pc, #236]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b39      	ldr	r3, [pc, #228]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b35      	ldr	r3, [pc, #212]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a34      	ldr	r2, [pc, #208]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <MX_GPIO_Init+0x144>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|LCD_DC_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2182      	movs	r1, #130	@ 0x82
 8000aae:	482f      	ldr	r0, [pc, #188]	@ (8000b6c <MX_GPIO_Init+0x148>)
 8000ab0:	f001 fc7c 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aba:	482d      	ldr	r0, [pc, #180]	@ (8000b70 <MX_GPIO_Init+0x14c>)
 8000abc:	f001 fc76 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C1_Pin|C2_Pin|C3_Pin|C4_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	482b      	ldr	r0, [pc, #172]	@ (8000b74 <MX_GPIO_Init+0x150>)
 8000ac6:	f001 fc71 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2140      	movs	r1, #64	@ 0x40
 8000ace:	482a      	ldr	r0, [pc, #168]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000ad0:	f001 fc6c 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LCD_DC_Pin;
 8000ad4:	2382      	movs	r3, #130	@ 0x82
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4820      	ldr	r0, [pc, #128]	@ (8000b6c <MX_GPIO_Init+0x148>)
 8000aec:	f001 faaa 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4819      	ldr	r0, [pc, #100]	@ (8000b70 <MX_GPIO_Init+0x14c>)
 8000b0a:	f001 fa9b 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4813      	ldr	r0, [pc, #76]	@ (8000b74 <MX_GPIO_Init+0x150>)
 8000b26:	f001 fa8d 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8000b2a:	23f0      	movs	r3, #240	@ 0xf0
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <MX_GPIO_Init+0x150>)
 8000b3e:	f001 fa81 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000b42:	2340      	movs	r3, #64	@ 0x40
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <MX_GPIO_Init+0x154>)
 8000b5a:	f001 fa73 	bl	8002044 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	@ 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40020400 	.word	0x40020400

08000b7c <StartInputHalTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartInputHalTask(void const * argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char cCurrent;
  /* Infinite loop */
  for(;;) // O loop infinito de uma tarefa RTOS é "for(;;)"
  {
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8000b84:	f7ff fd94 	bl	80006b0 <KEYPAD_Scan>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73fb      	strb	r3, [r7, #15]
    if(cCurrent != '\0')
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <StartInputHalTask+0x1c>
    {
      keyPressed = cCurrent;
 8000b92:	4a03      	ldr	r2, [pc, #12]	@ (8000ba0 <StartInputHalTask+0x24>)
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	7013      	strb	r3, [r2, #0]
    }
    osDelay(50);
 8000b98:	2032      	movs	r0, #50	@ 0x32
 8000b9a:	f003 fc0a 	bl	80043b2 <osDelay>
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8000b9e:	e7f1      	b.n	8000b84 <StartInputHalTask+0x8>
 8000ba0:	20000404 	.word	0x20000404

08000ba4 <StartGameTask>:
  }
}

void StartGameTask(void const * argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  char cLocalKeyPressed;

  for(;;)
  {
    cLocalKeyPressed = NONE_KEY;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

    osMutexWait(gameMutexHandle, osWaitForever);
 8000bb0:	4ba5      	ldr	r3, [pc, #660]	@ (8000e48 <StartGameTask+0x2a4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 fc27 	bl	800440c <osMutexWait>
    if (keyPressed != NONE_KEY) {
 8000bbe:	4ba3      	ldr	r3, [pc, #652]	@ (8000e4c <StartGameTask+0x2a8>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d005      	beq.n	8000bd4 <StartGameTask+0x30>
        cLocalKeyPressed = keyPressed;
 8000bc8:	4ba0      	ldr	r3, [pc, #640]	@ (8000e4c <StartGameTask+0x2a8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	73fb      	strb	r3, [r7, #15]
        keyPressed = NONE_KEY; 
 8000bce:	4b9f      	ldr	r3, [pc, #636]	@ (8000e4c <StartGameTask+0x2a8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 8000bd4:	4b9c      	ldr	r3, [pc, #624]	@ (8000e48 <StartGameTask+0x2a4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fc65 	bl	80044a8 <osMutexRelease>

    if (cLocalKeyPressed != NONE_KEY)
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f000 812d 	beq.w	8000e40 <StartGameTask+0x29c>
    {
      osMutexWait(gameMutexHandle, osWaitForever);
 8000be6:	4b98      	ldr	r3, [pc, #608]	@ (8000e48 <StartGameTask+0x2a4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f04f 31ff 	mov.w	r1, #4294967295
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fc0c 	bl	800440c <osMutexWait>
      switch(eCurrentState)
 8000bf4:	4b96      	ldr	r3, [pc, #600]	@ (8000e50 <StartGameTask+0x2ac>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b05      	cmp	r3, #5
 8000bfc:	f200 810d 	bhi.w	8000e1a <StartGameTask+0x276>
 8000c00:	a201      	add	r2, pc, #4	@ (adr r2, 8000c08 <StartGameTask+0x64>)
 8000c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c06:	bf00      	nop
 8000c08:	08000c21 	.word	0x08000c21
 8000c0c:	08000c3d 	.word	0x08000c3d
 8000c10:	08000d11 	.word	0x08000d11
 8000c14:	08000ddf 	.word	0x08000ddf
 8000c18:	08000df3 	.word	0x08000df3
 8000c1c:	08000e07 	.word	0x08000e07
      {
        case eInitGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c24:	f040 8100 	bne.w	8000e28 <StartGameTask+0x284>
          {
            eCurrentState = eDificultSelect;
 8000c28:	4b89      	ldr	r3, [pc, #548]	@ (8000e50 <StartGameTask+0x2ac>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
            selectedOption = 0;
 8000c2e:	4b89      	ldr	r3, [pc, #548]	@ (8000e54 <StartGameTask+0x2b0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8000c34:	4b88      	ldr	r3, [pc, #544]	@ (8000e58 <StartGameTask+0x2b4>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
            }
          break;
 8000c3a:	e0f5      	b.n	8000e28 <StartGameTask+0x284>
        }
        case eDificultSelect:
        {
          switch(cLocalKeyPressed)
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	3b23      	subs	r3, #35	@ 0x23
 8000c40:	2b15      	cmp	r3, #21
 8000c42:	d863      	bhi.n	8000d0c <StartGameTask+0x168>
 8000c44:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <StartGameTask+0xa8>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000ce1 	.word	0x08000ce1
 8000c50:	08000d0d 	.word	0x08000d0d
 8000c54:	08000d0d 	.word	0x08000d0d
 8000c58:	08000d0d 	.word	0x08000d0d
 8000c5c:	08000d0d 	.word	0x08000d0d
 8000c60:	08000d0d 	.word	0x08000d0d
 8000c64:	08000d0d 	.word	0x08000d0d
 8000c68:	08000cef 	.word	0x08000cef
 8000c6c:	08000d0d 	.word	0x08000d0d
 8000c70:	08000d0d 	.word	0x08000d0d
 8000c74:	08000d0d 	.word	0x08000d0d
 8000c78:	08000d0d 	.word	0x08000d0d
 8000c7c:	08000d0d 	.word	0x08000d0d
 8000c80:	08000d0d 	.word	0x08000d0d
 8000c84:	08000d0d 	.word	0x08000d0d
 8000c88:	08000cc3 	.word	0x08000cc3
 8000c8c:	08000d0d 	.word	0x08000d0d
 8000c90:	08000d0d 	.word	0x08000d0d
 8000c94:	08000d0d 	.word	0x08000d0d
 8000c98:	08000d0d 	.word	0x08000d0d
 8000c9c:	08000d0d 	.word	0x08000d0d
 8000ca0:	08000ca5 	.word	0x08000ca5
          {
            case UP_KEY:
            {
              selectedOption = (selectedOption < MENU_OPTIONS_DIFFICULTY - 1) ? selectedOption + 1 : 0;
 8000ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8000e54 <StartGameTask+0x2b0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	dc03      	bgt.n	8000cb4 <StartGameTask+0x110>
 8000cac:	4b69      	ldr	r3, [pc, #420]	@ (8000e54 <StartGameTask+0x2b0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <StartGameTask+0x112>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4a67      	ldr	r2, [pc, #412]	@ (8000e54 <StartGameTask+0x2b0>)
 8000cb8:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000cba:	4b67      	ldr	r3, [pc, #412]	@ (8000e58 <StartGameTask+0x2b4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
              break;
 8000cc0:	e025      	b.n	8000d0e <StartGameTask+0x16a>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_DIFFICULTY - 1;
 8000cc2:	4b64      	ldr	r3, [pc, #400]	@ (8000e54 <StartGameTask+0x2b0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd03      	ble.n	8000cd2 <StartGameTask+0x12e>
 8000cca:	4b62      	ldr	r3, [pc, #392]	@ (8000e54 <StartGameTask+0x2b0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <StartGameTask+0x130>
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	4a5f      	ldr	r2, [pc, #380]	@ (8000e54 <StartGameTask+0x2b0>)
 8000cd6:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8000e58 <StartGameTask+0x2b4>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
              break;
 8000cde:	e016      	b.n	8000d0e <StartGameTask+0x16a>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8000ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8000e58 <StartGameTask+0x2b4>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
              eCurrentState = eInitGame;
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e50 <StartGameTask+0x2ac>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
              break;
 8000cec:	e00f      	b.n	8000d0e <StartGameTask+0x16a>
            }
            case CONFIRM_KEY:
            {
              selectedDifficulty = (EDificult)selectedOption;
 8000cee:	4b59      	ldr	r3, [pc, #356]	@ (8000e54 <StartGameTask+0x2b0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b59      	ldr	r3, [pc, #356]	@ (8000e5c <StartGameTask+0x2b8>)
 8000cf6:	701a      	strb	r2, [r3, #0]
              eCurrentState = ePersonaSelect;
 8000cf8:	4b55      	ldr	r3, [pc, #340]	@ (8000e50 <StartGameTask+0x2ac>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	701a      	strb	r2, [r3, #0]
              selectedOption = FALSE; // Reseta para o próximo menu
 8000cfe:	4b55      	ldr	r3, [pc, #340]	@ (8000e54 <StartGameTask+0x2b0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000d04:	4b54      	ldr	r3, [pc, #336]	@ (8000e58 <StartGameTask+0x2b4>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
              break;
 8000d0a:	e000      	b.n	8000d0e <StartGameTask+0x16a>
            }
            default:
            {
              break;
 8000d0c:	bf00      	nop
            }
          }
          break;
 8000d0e:	e092      	b.n	8000e36 <StartGameTask+0x292>
        }
        case ePersonaSelect:
        {
          switch(cLocalKeyPressed)
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3b23      	subs	r3, #35	@ 0x23
 8000d14:	2b15      	cmp	r3, #21
 8000d16:	d860      	bhi.n	8000dda <StartGameTask+0x236>
 8000d18:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <StartGameTask+0x17c>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000db5 	.word	0x08000db5
 8000d24:	08000ddb 	.word	0x08000ddb
 8000d28:	08000ddb 	.word	0x08000ddb
 8000d2c:	08000ddb 	.word	0x08000ddb
 8000d30:	08000ddb 	.word	0x08000ddb
 8000d34:	08000ddb 	.word	0x08000ddb
 8000d38:	08000ddb 	.word	0x08000ddb
 8000d3c:	08000dc3 	.word	0x08000dc3
 8000d40:	08000ddb 	.word	0x08000ddb
 8000d44:	08000ddb 	.word	0x08000ddb
 8000d48:	08000ddb 	.word	0x08000ddb
 8000d4c:	08000ddb 	.word	0x08000ddb
 8000d50:	08000ddb 	.word	0x08000ddb
 8000d54:	08000ddb 	.word	0x08000ddb
 8000d58:	08000ddb 	.word	0x08000ddb
 8000d5c:	08000d97 	.word	0x08000d97
 8000d60:	08000ddb 	.word	0x08000ddb
 8000d64:	08000ddb 	.word	0x08000ddb
 8000d68:	08000ddb 	.word	0x08000ddb
 8000d6c:	08000ddb 	.word	0x08000ddb
 8000d70:	08000ddb 	.word	0x08000ddb
 8000d74:	08000d79 	.word	0x08000d79
          {
            case UP_KEY:
            {                  
              selectedOption = (selectedOption < MENU_OPTIONS_PERSONA - 1) ? selectedOption + 1 : 0;
 8000d78:	4b36      	ldr	r3, [pc, #216]	@ (8000e54 <StartGameTask+0x2b0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	dc03      	bgt.n	8000d88 <StartGameTask+0x1e4>
 8000d80:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <StartGameTask+0x2b0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	e000      	b.n	8000d8a <StartGameTask+0x1e6>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4a32      	ldr	r2, [pc, #200]	@ (8000e54 <StartGameTask+0x2b0>)
 8000d8c:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000d8e:	4b32      	ldr	r3, [pc, #200]	@ (8000e58 <StartGameTask+0x2b4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
              break;
 8000d94:	e022      	b.n	8000ddc <StartGameTask+0x238>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_PERSONA - 1;
 8000d96:	4b2f      	ldr	r3, [pc, #188]	@ (8000e54 <StartGameTask+0x2b0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	dd03      	ble.n	8000da6 <StartGameTask+0x202>
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e54 <StartGameTask+0x2b0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	e000      	b.n	8000da8 <StartGameTask+0x204>
 8000da6:	2304      	movs	r3, #4
 8000da8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e54 <StartGameTask+0x2b0>)
 8000daa:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <StartGameTask+0x2b4>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
              break;
 8000db2:	e013      	b.n	8000ddc <StartGameTask+0x238>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <StartGameTask+0x2b4>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
              eCurrentState = eDificultSelect;
 8000dba:	4b25      	ldr	r3, [pc, #148]	@ (8000e50 <StartGameTask+0x2ac>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
              break;
 8000dc0:	e00c      	b.n	8000ddc <StartGameTask+0x238>
            }
            case CONFIRM_KEY:
            {
              selectedPersona.ePersonaElemental = (EElemental)selectedOption;
 8000dc2:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <StartGameTask+0x2b0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <StartGameTask+0x2bc>)
 8000dca:	705a      	strb	r2, [r3, #1]
              eCurrentState = eBattleInit;
 8000dcc:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <StartGameTask+0x2ac>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <StartGameTask+0x2b4>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
              break;
 8000dd8:	e000      	b.n	8000ddc <StartGameTask+0x238>
            }
            default:
            {
              break;
 8000dda:	bf00      	nop
            }
          }
          break;
 8000ddc:	e02b      	b.n	8000e36 <StartGameTask+0x292>
        }
        case eBattleInit:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000de2:	d123      	bne.n	8000e2c <StartGameTask+0x288>
          {
            eCurrentState = ePlayerTurn;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <StartGameTask+0x2ac>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8000dea:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <StartGameTask+0x2b4>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
          }
          break;
 8000df0:	e01c      	b.n	8000e2c <StartGameTask+0x288>
        }
        case ePlayerTurn:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000df6:	d11b      	bne.n	8000e30 <StartGameTask+0x28c>
          {
            eCurrentState = eEndGame;
 8000df8:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <StartGameTask+0x2ac>)
 8000dfa:	2205      	movs	r2, #5
 8000dfc:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <StartGameTask+0x2b4>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
          }
          break;
 8000e04:	e014      	b.n	8000e30 <StartGameTask+0x28c>
        }
        case eEndGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e0a:	d113      	bne.n	8000e34 <StartGameTask+0x290>
          {
            eCurrentState = eInitGame;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <StartGameTask+0x2ac>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <StartGameTask+0x2b4>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
          }
          break;
 8000e18:	e00c      	b.n	8000e34 <StartGameTask+0x290>
        }
        default:
        {
          // Estado desconhecido, volta para o início por segurança
          eCurrentState = eInitGame;
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <StartGameTask+0x2ac>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
          u8CleanScreen = TRUE;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <StartGameTask+0x2b4>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
          break;
 8000e26:	e006      	b.n	8000e36 <StartGameTask+0x292>
          break;
 8000e28:	bf00      	nop
 8000e2a:	e004      	b.n	8000e36 <StartGameTask+0x292>
          break;
 8000e2c:	bf00      	nop
 8000e2e:	e002      	b.n	8000e36 <StartGameTask+0x292>
          break;
 8000e30:	bf00      	nop
 8000e32:	e000      	b.n	8000e36 <StartGameTask+0x292>
          break;
 8000e34:	bf00      	nop
        }
      }
      osMutexRelease(gameMutexHandle);
 8000e36:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <StartGameTask+0x2a4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fb34 	bl	80044a8 <osMutexRelease>
    }
    osDelay(50);
 8000e40:	2032      	movs	r0, #50	@ 0x32
 8000e42:	f003 fab6 	bl	80043b2 <osDelay>
    cLocalKeyPressed = NONE_KEY;
 8000e46:	e6b1      	b.n	8000bac <StartGameTask+0x8>
 8000e48:	20000400 	.word	0x20000400
 8000e4c:	20000404 	.word	0x20000404
 8000e50:	20000405 	.word	0x20000405
 8000e54:	20000408 	.word	0x20000408
 8000e58:	20000040 	.word	0x20000040
 8000e5c:	2000040c 	.word	0x2000040c
 8000e60:	20000410 	.word	0x20000410

08000e64 <StartDisplayTask>:
  }
}

void StartDisplayTask(void const * argument)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	@ 0x30
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  char buffer[30];
  uint8_t u8RedrawScreen = FALSE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  for(;;)
  {

    osMutexWait(gameMutexHandle, osWaitForever);
 8000e72:	4b65      	ldr	r3, [pc, #404]	@ (8001008 <StartDisplayTask+0x1a4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fac6 	bl	800440c <osMutexWait>
    if (TRUE == u8CleanScreen) {
 8000e80:	4b62      	ldr	r3, [pc, #392]	@ (800100c <StartDisplayTask+0x1a8>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d105      	bne.n	8000e96 <StartDisplayTask+0x32>
        u8RedrawScreen = TRUE;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        u8CleanScreen = FALSE; 
 8000e90:	4b5e      	ldr	r3, [pc, #376]	@ (800100c <StartDisplayTask+0x1a8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 8000e96:	4b5c      	ldr	r3, [pc, #368]	@ (8001008 <StartDisplayTask+0x1a4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 fb04 	bl	80044a8 <osMutexRelease>


    if(TRUE == u8RedrawScreen)
 8000ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	f040 80ab 	bne.w	8001000 <StartDisplayTask+0x19c>
    {
        switch(eCurrentState)
 8000eaa:	4b59      	ldr	r3, [pc, #356]	@ (8001010 <StartDisplayTask+0x1ac>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	f200 8094 	bhi.w	8000fde <StartDisplayTask+0x17a>
 8000eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ebc <StartDisplayTask+0x58>)
 8000eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebc:	08000ed5 	.word	0x08000ed5
 8000ec0:	08000f07 	.word	0x08000f07
 8000ec4:	08000f17 	.word	0x08000f17
 8000ec8:	08000f27 	.word	0x08000f27
 8000ecc:	08000fa7 	.word	0x08000fa7
 8000ed0:	08000fc3 	.word	0x08000fc3
        {
            case eInitGame:
                ClearScreen();
 8000ed4:	f7ff fb7c 	bl	80005d0 <ClearScreen>
                ST7789_DrawText(10, 10, "ElementalCube!", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8000ed8:	2302      	movs	r3, #2
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2300      	movs	r3, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8001014 <StartDisplayTask+0x1b0>)
 8000ee6:	210a      	movs	r1, #10
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f000 faeb 	bl	80014c4 <ST7789_DrawText>
                ST7789_DrawText(10, 40, "Pressione *", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8000eee:	2302      	movs	r3, #2
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000efa:	4a47      	ldr	r2, [pc, #284]	@ (8001018 <StartDisplayTask+0x1b4>)
 8000efc:	2128      	movs	r1, #40	@ 0x28
 8000efe:	200a      	movs	r0, #10
 8000f00:	f000 fae0 	bl	80014c4 <ST7789_DrawText>
                break;
 8000f04:	e079      	b.n	8000ffa <StartDisplayTask+0x196>
            case eDificultSelect:
                DrawMenu("Selecione Dificuldade", difficultyOptions, MENU_OPTIONS_DIFFICULTY, selectedOption);
 8000f06:	4b45      	ldr	r3, [pc, #276]	@ (800101c <StartDisplayTask+0x1b8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	4944      	ldr	r1, [pc, #272]	@ (8001020 <StartDisplayTask+0x1bc>)
 8000f0e:	4845      	ldr	r0, [pc, #276]	@ (8001024 <StartDisplayTask+0x1c0>)
 8000f10:	f7ff fb6c 	bl	80005ec <DrawMenu>
                break;
 8000f14:	e071      	b.n	8000ffa <StartDisplayTask+0x196>
            case ePersonaSelect:
                DrawMenu("Selecione Personagem", personaOptions, MENU_OPTIONS_PERSONA, selectedOption);
 8000f16:	4b41      	ldr	r3, [pc, #260]	@ (800101c <StartDisplayTask+0x1b8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	4942      	ldr	r1, [pc, #264]	@ (8001028 <StartDisplayTask+0x1c4>)
 8000f1e:	4843      	ldr	r0, [pc, #268]	@ (800102c <StartDisplayTask+0x1c8>)
 8000f20:	f7ff fb64 	bl	80005ec <DrawMenu>
                break;
 8000f24:	e069      	b.n	8000ffa <StartDisplayTask+0x196>
            case eBattleInit:
                ClearScreen();
 8000f26:	f7ff fb53 	bl	80005d0 <ClearScreen>
                ST7789_DrawText(10, 10, "Batalha Iniciando...", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f36:	4a3e      	ldr	r2, [pc, #248]	@ (8001030 <StartDisplayTask+0x1cc>)
 8000f38:	210a      	movs	r1, #10
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f000 fac2 	bl	80014c4 <ST7789_DrawText>
                sprintf(buffer, "Dif: %s", difficultyOptions[selectedDifficulty]);
 8000f40:	4b3c      	ldr	r3, [pc, #240]	@ (8001034 <StartDisplayTask+0x1d0>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b35      	ldr	r3, [pc, #212]	@ (8001020 <StartDisplayTask+0x1bc>)
 8000f4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4939      	ldr	r1, [pc, #228]	@ (8001038 <StartDisplayTask+0x1d4>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 fda7 	bl	8006aa8 <siprintf>
                ST7789_DrawText(10, 40, buffer, ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	2302      	movs	r3, #2
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	2300      	movs	r3, #0
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f6a:	2128      	movs	r1, #40	@ 0x28
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f000 faa9 	bl	80014c4 <ST7789_DrawText>
                sprintf(buffer, "Pers: %s", personaOptions[selectedPersona.ePersonaElemental]);
 8000f72:	4b32      	ldr	r3, [pc, #200]	@ (800103c <StartDisplayTask+0x1d8>)
 8000f74:	785b      	ldrb	r3, [r3, #1]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001028 <StartDisplayTask+0x1c4>)
 8000f7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	492e      	ldr	r1, [pc, #184]	@ (8001040 <StartDisplayTask+0x1dc>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 fd8e 	bl	8006aa8 <siprintf>
                ST7789_DrawText(10, 60, buffer, ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	2302      	movs	r3, #2
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	2300      	movs	r3, #0
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f9c:	213c      	movs	r1, #60	@ 0x3c
 8000f9e:	200a      	movs	r0, #10
 8000fa0:	f000 fa90 	bl	80014c4 <ST7789_DrawText>
                break;
 8000fa4:	e029      	b.n	8000ffa <StartDisplayTask+0x196>
            case ePlayerTurn:
                 ClearScreen();
 8000fa6:	f7ff fb13 	bl	80005d0 <ClearScreen>
                 ST7789_DrawText(10, 10, "Seu Turno!", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8000faa:	2302      	movs	r3, #2
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb6:	4a23      	ldr	r2, [pc, #140]	@ (8001044 <StartDisplayTask+0x1e0>)
 8000fb8:	210a      	movs	r1, #10
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f000 fa82 	bl	80014c4 <ST7789_DrawText>
                 break;
 8000fc0:	e01b      	b.n	8000ffa <StartDisplayTask+0x196>
            case eEndGame:
                 ClearScreen();
 8000fc2:	f7ff fb05 	bl	80005d0 <ClearScreen>
                 ST7789_DrawText(10, 10, "Fim de Jogo!", ST7789_WHITE, ST7789_BLACK, ST7789_SIZE);
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001048 <StartDisplayTask+0x1e4>)
 8000fd4:	210a      	movs	r1, #10
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f000 fa74 	bl	80014c4 <ST7789_DrawText>
                 break;
 8000fdc:	e00d      	b.n	8000ffa <StartDisplayTask+0x196>
            default:
                 ClearScreen();
 8000fde:	f7ff faf7 	bl	80005d0 <ClearScreen>
                 ST7789_DrawText(10, 10, "Erro de Estado!", ST7789_RED, ST7789_BLACK, ST7789_SIZE);
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fee:	4a17      	ldr	r2, [pc, #92]	@ (800104c <StartDisplayTask+0x1e8>)
 8000ff0:	210a      	movs	r1, #10
 8000ff2:	200a      	movs	r0, #10
 8000ff4:	f000 fa66 	bl	80014c4 <ST7789_DrawText>
                 break;
 8000ff8:	bf00      	nop
        }
        u8RedrawScreen = FALSE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    osDelay(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f003 f9d6 	bl	80043b2 <osDelay>
    osMutexWait(gameMutexHandle, osWaitForever);
 8001006:	e734      	b.n	8000e72 <StartDisplayTask+0xe>
 8001008:	20000400 	.word	0x20000400
 800100c:	20000040 	.word	0x20000040
 8001010:	20000405 	.word	0x20000405
 8001014:	080074f0 	.word	0x080074f0
 8001018:	08007500 	.word	0x08007500
 800101c:	20000408 	.word	0x20000408
 8001020:	20000044 	.word	0x20000044
 8001024:	0800750c 	.word	0x0800750c
 8001028:	20000050 	.word	0x20000050
 800102c:	08007524 	.word	0x08007524
 8001030:	0800753c 	.word	0x0800753c
 8001034:	2000040c 	.word	0x2000040c
 8001038:	08007554 	.word	0x08007554
 800103c:	20000410 	.word	0x20000410
 8001040:	0800755c 	.word	0x0800755c
 8001044:	08007568 	.word	0x08007568
 8001048:	08007574 	.word	0x08007574
 800104c:	08007584 	.word	0x08007584

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <Error_Handler+0x8>

0800105c <ST7789_Select>:
#define LCD_DC_PIN    LCD_DC_Pin
#define LCD_RST_PORT  LCD_RST_GPIO_Port
#define LCD_RST_PIN   LCD_RST_Pin

// Funções privadas (auxiliares)
static void ST7789_Select(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2140      	movs	r1, #64	@ 0x40
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <ST7789_Select+0x14>)
 8001066:	f001 f9a1 	bl	80023ac <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40020400 	.word	0x40020400

08001074 <ST7789_Unselect>:

static void ST7789_Unselect(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2140      	movs	r1, #64	@ 0x40
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <ST7789_Unselect+0x14>)
 800107e:	f001 f995 	bl	80023ac <HAL_GPIO_WritePin>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40020400 	.word	0x40020400

0800108c <ST7789_Reset>:

static void ST7789_Reset(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001096:	4808      	ldr	r0, [pc, #32]	@ (80010b8 <ST7789_Reset+0x2c>)
 8001098:	f001 f988 	bl	80023ac <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800109c:	2005      	movs	r0, #5
 800109e:	f000 fc75 	bl	800198c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a8:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <ST7789_Reset+0x2c>)
 80010aa:	f001 f97f 	bl	80023ac <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80010ae:	2005      	movs	r0, #5
 80010b0:	f000 fc6c 	bl	800198c <HAL_Delay>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020000 	.word	0x40020000

080010bc <ST7789_WriteCommand>:

static void ST7789_WriteCommand(uint8_t cmd) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET); // Modo Comando
 80010c6:	2200      	movs	r2, #0
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <ST7789_WriteCommand+0x34>)
 80010cc:	f001 f96e 	bl	80023ac <HAL_GPIO_WritePin>
    ST7789_Select();
 80010d0:	f7ff ffc4 	bl	800105c <ST7789_Select>
    HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80010d4:	1df9      	adds	r1, r7, #7
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	2201      	movs	r2, #1
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <ST7789_WriteCommand+0x38>)
 80010de:	f001 fe7a 	bl	8002dd6 <HAL_SPI_Transmit>
    ST7789_Unselect();
 80010e2:	f7ff ffc7 	bl	8001074 <ST7789_Unselect>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020800 	.word	0x40020800
 80010f4:	20000354 	.word	0x20000354

080010f8 <ST7789_WriteData>:

static void ST7789_WriteData(uint8_t* buff, size_t buff_size) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET); // Modo Dado
 8001102:	2201      	movs	r2, #1
 8001104:	2180      	movs	r1, #128	@ 0x80
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <ST7789_WriteData+0x34>)
 8001108:	f001 f950 	bl	80023ac <HAL_GPIO_WritePin>
    ST7789_Select();
 800110c:	f7ff ffa6 	bl	800105c <ST7789_Select>
    HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b29a      	uxth	r2, r3
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <ST7789_WriteData+0x38>)
 800111c:	f001 fe5b 	bl	8002dd6 <HAL_SPI_Transmit>
    ST7789_Unselect();
 8001120:	f7ff ffa8 	bl	8001074 <ST7789_Unselect>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020800 	.word	0x40020800
 8001130:	20000354 	.word	0x20000354

08001134 <ST7789_SetAddressWindow>:

// Define a "janela" de memória onde os pixels serão escritos
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4623      	mov	r3, r4
 8001144:	80fb      	strh	r3, [r7, #6]
 8001146:	4603      	mov	r3, r0
 8001148:	80bb      	strh	r3, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	807b      	strh	r3, [r7, #2]
 800114e:	4613      	mov	r3, r2
 8001150:	803b      	strh	r3, [r7, #0]
    uint8_t data[4];

    // Column Address Set
    ST7789_WriteCommand(0x2A);
 8001152:	202a      	movs	r0, #42	@ 0x2a
 8001154:	f7ff ffb2 	bl	80010bc <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	b29b      	uxth	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	733b      	strb	r3, [r7, #12]
    data[1] = x0 & 0xFF;
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	737b      	strb	r3, [r7, #13]
    data[2] = (x1 >> 8) & 0xFF;
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b29b      	uxth	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73bb      	strb	r3, [r7, #14]
    data[3] = x1 & 0xFF;
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	73fb      	strb	r3, [r7, #15]
    ST7789_WriteData(data, sizeof(data));
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2104      	movs	r1, #4
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffba 	bl	80010f8 <ST7789_WriteData>

    // Row Address Set
    ST7789_WriteCommand(0x2B);
 8001184:	202b      	movs	r0, #43	@ 0x2b
 8001186:	f7ff ff99 	bl	80010bc <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	733b      	strb	r3, [r7, #12]
    data[1] = y0 & 0xFF;
 8001194:	88bb      	ldrh	r3, [r7, #4]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	737b      	strb	r3, [r7, #13]
    data[2] = (y1 >> 8) & 0xFF;
 800119a:	883b      	ldrh	r3, [r7, #0]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	73bb      	strb	r3, [r7, #14]
    data[3] = y1 & 0xFF;
 80011a4:	883b      	ldrh	r3, [r7, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	73fb      	strb	r3, [r7, #15]
    ST7789_WriteData(data, sizeof(data));
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	2104      	movs	r1, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ffa1 	bl	80010f8 <ST7789_WriteData>

    // Write to RAM
    ST7789_WriteCommand(0x2C);
 80011b6:	202c      	movs	r0, #44	@ 0x2c
 80011b8:	f7ff ff80 	bl	80010bc <ST7789_WriteCommand>
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}

080011c4 <ST7789_Init>:

// Função de inicialização com a sequência de comandos para o ST7789
void ST7789_Init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
    ST7789_Reset();
 80011ca:	f7ff ff5f 	bl	800108c <ST7789_Reset>

    ST7789_WriteCommand(0x11); // Sleep Out
 80011ce:	2011      	movs	r0, #17
 80011d0:	f7ff ff74 	bl	80010bc <ST7789_WriteCommand>
    HAL_Delay(120);
 80011d4:	2078      	movs	r0, #120	@ 0x78
 80011d6:	f000 fbd9 	bl	800198c <HAL_Delay>

    ST7789_WriteCommand(0x36); // Memory Data Access Control
 80011da:	2036      	movs	r0, #54	@ 0x36
 80011dc:	f7ff ff6e 	bl	80010bc <ST7789_WriteCommand>
    uint8_t madctl = 0x00;
 80011e0:	2300      	movs	r3, #0
 80011e2:	71fb      	strb	r3, [r7, #7]
    ST7789_WriteData(&madctl, 1);
 80011e4:	1dfb      	adds	r3, r7, #7
 80011e6:	2101      	movs	r1, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff85 	bl	80010f8 <ST7789_WriteData>

    ST7789_WriteCommand(0x3A); // Interface Pixel Format
 80011ee:	203a      	movs	r0, #58	@ 0x3a
 80011f0:	f7ff ff64 	bl	80010bc <ST7789_WriteCommand>
    uint8_t pixfmt = 0x55; // 16 bits/pixel
 80011f4:	2355      	movs	r3, #85	@ 0x55
 80011f6:	71bb      	strb	r3, [r7, #6]
    ST7789_WriteData(&pixfmt, 1);
 80011f8:	1dbb      	adds	r3, r7, #6
 80011fa:	2101      	movs	r1, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff7b 	bl	80010f8 <ST7789_WriteData>

    ST7789_WriteCommand(0x21); // Display Inversion On
 8001202:	2021      	movs	r0, #33	@ 0x21
 8001204:	f7ff ff5a 	bl	80010bc <ST7789_WriteCommand>

    ST7789_WriteCommand(0x13); // Normal Display Mode On
 8001208:	2013      	movs	r0, #19
 800120a:	f7ff ff57 	bl	80010bc <ST7789_WriteCommand>

    ST7789_WriteCommand(0x29); // Display On
 800120e:	2029      	movs	r0, #41	@ 0x29
 8001210:	f7ff ff54 	bl	80010bc <ST7789_WriteCommand>
    HAL_Delay(120);
 8001214:	2078      	movs	r0, #120	@ 0x78
 8001216:	f000 fbb9 	bl	800198c <HAL_Delay>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <ST7789_DrawPixel>:

// Funções públicas (implementação)
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	460b      	mov	r3, r1
 800122e:	80bb      	strh	r3, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	807b      	strh	r3, [r7, #2]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	2bef      	cmp	r3, #239	@ 0xef
 8001238:	d817      	bhi.n	800126a <ST7789_DrawPixel+0x48>
 800123a:	88bb      	ldrh	r3, [r7, #4]
 800123c:	2bef      	cmp	r3, #239	@ 0xef
 800123e:	d814      	bhi.n	800126a <ST7789_DrawPixel+0x48>

    ST7789_SetAddressWindow(x, y, x, y);
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	88fa      	ldrh	r2, [r7, #6]
 8001244:	88b9      	ldrh	r1, [r7, #4]
 8001246:	88f8      	ldrh	r0, [r7, #6]
 8001248:	f7ff ff74 	bl	8001134 <ST7789_SetAddressWindow>
    uint8_t data[] = { (color >> 8) & 0xFF, color & 0xFF };
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	b29b      	uxth	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	733b      	strb	r3, [r7, #12]
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	737b      	strb	r3, [r7, #13]
    ST7789_WriteData(data, sizeof(data));
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2102      	movs	r1, #2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff48 	bl	80010f8 <ST7789_WriteData>
 8001268:	e000      	b.n	800126c <ST7789_DrawPixel+0x4a>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 800126a:	bf00      	nop
}
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <ST7789_FillRectangle>:

void ST7789_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	4604      	mov	r4, r0
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4623      	mov	r3, r4
 8001284:	80fb      	strh	r3, [r7, #6]
 8001286:	4603      	mov	r3, r0
 8001288:	80bb      	strh	r3, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	807b      	strh	r3, [r7, #2]
 800128e:	4613      	mov	r3, r2
 8001290:	803b      	strh	r3, [r7, #0]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	2bef      	cmp	r3, #239	@ 0xef
 8001296:	d853      	bhi.n	8001340 <ST7789_FillRectangle+0xcc>
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	2bef      	cmp	r3, #239	@ 0xef
 800129c:	d850      	bhi.n	8001340 <ST7789_FillRectangle+0xcc>
    if ((x + w - 1) >= ST7789_WIDTH) w = ST7789_WIDTH - x;
 800129e:	88fa      	ldrh	r2, [r7, #6]
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4413      	add	r3, r2
 80012a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80012a6:	dd03      	ble.n	80012b0 <ST7789_FillRectangle+0x3c>
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80012ae:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 80012b0:	88ba      	ldrh	r2, [r7, #4]
 80012b2:	883b      	ldrh	r3, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80012b8:	dd03      	ble.n	80012c2 <ST7789_FillRectangle+0x4e>
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80012c0:	803b      	strh	r3, [r7, #0]

    ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	3b01      	subs	r3, #1
 80012cc:	b29c      	uxth	r4, r3
 80012ce:	88ba      	ldrh	r2, [r7, #4]
 80012d0:	883b      	ldrh	r3, [r7, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	3b01      	subs	r3, #1
 80012d8:	b29b      	uxth	r3, r3
 80012da:	88b9      	ldrh	r1, [r7, #4]
 80012dc:	88f8      	ldrh	r0, [r7, #6]
 80012de:	4622      	mov	r2, r4
 80012e0:	f7ff ff28 	bl	8001134 <ST7789_SetAddressWindow>

    uint8_t data[] = { (color >> 8) & 0xFF, color & 0xFF };
 80012e4:	8c3b      	ldrh	r3, [r7, #32]
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	733b      	strb	r3, [r7, #12]
 80012ee:	8c3b      	ldrh	r3, [r7, #32]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET); // Data mode
 80012f4:	2201      	movs	r2, #1
 80012f6:	2180      	movs	r1, #128	@ 0x80
 80012f8:	4813      	ldr	r0, [pc, #76]	@ (8001348 <ST7789_FillRectangle+0xd4>)
 80012fa:	f001 f857 	bl	80023ac <HAL_GPIO_WritePin>
    ST7789_Select();
 80012fe:	f7ff fead 	bl	800105c <ST7789_Select>

    for (y = 0; y < h; y++) {
 8001302:	2300      	movs	r3, #0
 8001304:	80bb      	strh	r3, [r7, #4]
 8001306:	e014      	b.n	8001332 <ST7789_FillRectangle+0xbe>
        for (x = 0; x < w; x++) {
 8001308:	2300      	movs	r3, #0
 800130a:	80fb      	strh	r3, [r7, #6]
 800130c:	e00a      	b.n	8001324 <ST7789_FillRectangle+0xb0>
            HAL_SPI_Transmit(&ST7789_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800130e:	f107 010c 	add.w	r1, r7, #12
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	2202      	movs	r2, #2
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <ST7789_FillRectangle+0xd8>)
 800131a:	f001 fd5c 	bl	8002dd6 <HAL_SPI_Transmit>
        for (x = 0; x < w; x++) {
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	3301      	adds	r3, #1
 8001322:	80fb      	strh	r3, [r7, #6]
 8001324:	88fa      	ldrh	r2, [r7, #6]
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	429a      	cmp	r2, r3
 800132a:	d3f0      	bcc.n	800130e <ST7789_FillRectangle+0x9a>
    for (y = 0; y < h; y++) {
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	3301      	adds	r3, #1
 8001330:	80bb      	strh	r3, [r7, #4]
 8001332:	88ba      	ldrh	r2, [r7, #4]
 8001334:	883b      	ldrh	r3, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d3e6      	bcc.n	8001308 <ST7789_FillRectangle+0x94>
        }
    }
    ST7789_Unselect();
 800133a:	f7ff fe9b 	bl	8001074 <ST7789_Unselect>
 800133e:	e000      	b.n	8001342 <ST7789_FillRectangle+0xce>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001340:	bf00      	nop
}
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	40020800 	.word	0x40020800
 800134c:	20000354 	.word	0x20000354

08001350 <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
    ST7789_FillRectangle(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	23f0      	movs	r3, #240	@ 0xf0
 8001360:	22f0      	movs	r2, #240	@ 0xf0
 8001362:	2100      	movs	r1, #0
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff ff85 	bl	8001274 <ST7789_FillRectangle>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <ST7789_DrawChar>:
 * @param y Coordenada Y do canto superior esquerdo.
 * @param ch O caractere a ser desenhado.
 * @param foreground Cor do caractere.
 * @param background Cor do fundo.
 */
void ST7789_DrawChar(uint16_t x, uint16_t y, char ch, uint16_t foreground, uint16_t background, uint8_t size) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4623      	mov	r3, r4
 8001384:	80fb      	strh	r3, [r7, #6]
 8001386:	4603      	mov	r3, r0
 8001388:	80bb      	strh	r3, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
 800138e:	4613      	mov	r3, r2
 8001390:	803b      	strh	r3, [r7, #0]
    if (x + (FONT_WIDTH * size) > ST7789_WIDTH || y + (FONT_HEIGHT * size) > ST7789_HEIGHT) {
 8001392:	88f9      	ldrh	r1, [r7, #6]
 8001394:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	440b      	add	r3, r1
 80013a0:	2bf0      	cmp	r3, #240	@ 0xf0
 80013a2:	f300 8089 	bgt.w	80014b8 <ST7789_DrawChar+0x144>
 80013a6:	88b9      	ldrh	r1, [r7, #4]
 80013a8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	440b      	add	r3, r1
 80013b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80013b8:	dc7e      	bgt.n	80014b8 <ST7789_DrawChar+0x144>
        return; // Garante que o caractere ampliado ainda caiba na tela
    }

    uint32_t font_idx = (ch - ' ') * FONT_HEIGHT;
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	f1a3 0220 	sub.w	r2, r3, #32
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < FONT_HEIGHT; i++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e06f      	b.n	80014b0 <ST7789_DrawChar+0x13c>
        uint8_t line_data = font[font_idx + i];
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a3a      	ldr	r2, [pc, #232]	@ (80014c0 <ST7789_DrawChar+0x14c>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
 80013da:	72fb      	strb	r3, [r7, #11]
        for (int j = 0; j < FONT_WIDTH; j++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	e060      	b.n	80014a4 <ST7789_DrawChar+0x130>
            if ((line_data >> j) & 1) {
 80013e2:	7afa      	ldrb	r2, [r7, #11]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	fa42 f303 	asr.w	r3, r2, r3
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d034      	beq.n	800145c <ST7789_DrawChar+0xe8>
                // Em vez de desenhar um pixel, desenha um retângulo do tamanho do scale
                if (size == 1) {
 80013f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d10e      	bne.n	8001418 <ST7789_DrawChar+0xa4>
                    ST7789_DrawPixel(x + j, y + i, foreground);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4413      	add	r3, r2
 8001402:	b298      	uxth	r0, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	b29a      	uxth	r2, r3
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	883a      	ldrh	r2, [r7, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff ff06 	bl	8001222 <ST7789_DrawPixel>
 8001416:	e042      	b.n	800149e <ST7789_DrawChar+0x12a>
                } else {
                    ST7789_FillRectangle(x + (i * size), y + (j * size), size, size, foreground);
 8001418:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800141c:	b29a      	uxth	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	b29b      	uxth	r3, r3
 8001422:	fb12 f303 	smulbb	r3, r2, r3
 8001426:	b29a      	uxth	r2, r3
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4413      	add	r3, r2
 800142c:	b298      	uxth	r0, r3
 800142e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001432:	b29a      	uxth	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	b29b      	uxth	r3, r3
 8001438:	fb12 f303 	smulbb	r3, r2, r3
 800143c:	b29a      	uxth	r2, r3
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	b299      	uxth	r1, r3
 8001444:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001448:	b29a      	uxth	r2, r3
 800144a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800144e:	b29c      	uxth	r4, r3
 8001450:	883b      	ldrh	r3, [r7, #0]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4623      	mov	r3, r4
 8001456:	f7ff ff0d 	bl	8001274 <ST7789_FillRectangle>
 800145a:	e020      	b.n	800149e <ST7789_DrawChar+0x12a>
                }
            } else {
                 // Faz o mesmo para o fundo, para não deixar "buracos"
                 ST7789_FillRectangle(x + (i * size), y + (j * size), size, size, background);
 800145c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001460:	b29a      	uxth	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	b29b      	uxth	r3, r3
 8001466:	fb12 f303 	smulbb	r3, r2, r3
 800146a:	b29a      	uxth	r2, r3
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	4413      	add	r3, r2
 8001470:	b298      	uxth	r0, r3
 8001472:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001476:	b29a      	uxth	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	b29b      	uxth	r3, r3
 800147c:	fb12 f303 	smulbb	r3, r2, r3
 8001480:	b29a      	uxth	r2, r3
 8001482:	88bb      	ldrh	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	b299      	uxth	r1, r3
 8001488:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800148c:	b29a      	uxth	r2, r3
 800148e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001492:	b29c      	uxth	r4, r3
 8001494:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	4623      	mov	r3, r4
 800149a:	f7ff feeb 	bl	8001274 <ST7789_FillRectangle>
        for (int j = 0; j < FONT_WIDTH; j++) {
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	3301      	adds	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	dd9b      	ble.n	80013e2 <ST7789_DrawChar+0x6e>
    for (int i = 0; i < FONT_HEIGHT; i++) {
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b09      	cmp	r3, #9
 80014b4:	dd8c      	ble.n	80013d0 <ST7789_DrawChar+0x5c>
 80014b6:	e000      	b.n	80014ba <ST7789_DrawChar+0x146>
        return; // Garante que o caractere ampliado ainda caiba na tela
 80014b8:	bf00      	nop
            }
        }
    }
}
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	0800759c 	.word	0x0800759c

080014c4 <ST7789_DrawText>:
 * @param y Coordenada Y do início do texto.
 * @param str Ponteiro para a string a ser desenhada.
 * @param foreground Cor do texto.
 * @param background Cor do fundo.
 */
void ST7789_DrawText(uint16_t x, uint16_t y, const char* str, uint16_t foreground, uint16_t background, uint8_t size) {
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	60ba      	str	r2, [r7, #8]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	81fb      	strh	r3, [r7, #14]
 80014d2:	460b      	mov	r3, r1
 80014d4:	81bb      	strh	r3, [r7, #12]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80fb      	strh	r3, [r7, #6]
    uint16_t current_x = x;
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	82fb      	strh	r3, [r7, #22]

    while (*str) {
 80014de:	e022      	b.n	8001526 <ST7789_DrawText+0x62>
        // A largura de cada caractere agora é multiplicada pelo tamanho
        if (current_x + (FONT_WIDTH * size) > ST7789_WIDTH) {
 80014e0:	8af9      	ldrh	r1, [r7, #22]
 80014e2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80014f0:	dc1e      	bgt.n	8001530 <ST7789_DrawText+0x6c>
            break; 
        }

        ST7789_DrawChar(current_x, y, *str, foreground, background, size);
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	781a      	ldrb	r2, [r3, #0]
 80014f6:	88fc      	ldrh	r4, [r7, #6]
 80014f8:	89b9      	ldrh	r1, [r7, #12]
 80014fa:	8af8      	ldrh	r0, [r7, #22]
 80014fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4623      	mov	r3, r4
 8001508:	f7ff ff34 	bl	8001374 <ST7789_DrawChar>
        current_x += (FONT_WIDTH * size); // Avança o cursor pela largura correta
 800150c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001510:	b29b      	uxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b29a      	uxth	r2, r3
 800151a:	8afb      	ldrh	r3, [r7, #22]
 800151c:	4413      	add	r3, r2
 800151e:	82fb      	strh	r3, [r7, #22]
        str++;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3301      	adds	r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1d8      	bne.n	80014e0 <ST7789_DrawText+0x1c>
    }
 800152e:	e000      	b.n	8001532 <ST7789_DrawText+0x6e>
            break; 
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
	...

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b22      	ldr	r3, [pc, #136]	@ (80015d0 <HAL_MspInit+0x94>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	4a21      	ldr	r2, [pc, #132]	@ (80015d0 <HAL_MspInit+0x94>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001550:	6453      	str	r3, [r2, #68]	@ 0x44
 8001552:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <HAL_MspInit+0x94>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_MspInit+0x94>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	4a1a      	ldr	r2, [pc, #104]	@ (80015d0 <HAL_MspInit+0x94>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	@ 0x40
 800156e:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <HAL_MspInit+0x94>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	210f      	movs	r1, #15
 800157e:	f06f 0001 	mvn.w	r0, #1
 8001582:	f000 fb02 	bl	8001b8a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2105      	movs	r1, #5
 800158a:	2001      	movs	r0, #1
 800158c:	f000 fafd 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001590:	2001      	movs	r0, #1
 8001592:	f000 fb16 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	2004      	movs	r0, #4
 800159c:	f000 faf5 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80015a0:	2004      	movs	r0, #4
 80015a2:	f000 fb0e 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2105      	movs	r1, #5
 80015aa:	2005      	movs	r0, #5
 80015ac:	f000 faed 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80015b0:	2005      	movs	r0, #5
 80015b2:	f000 fb06 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2105      	movs	r1, #5
 80015ba:	2051      	movs	r0, #81	@ 0x51
 80015bc:	f000 fae5 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80015c0:	2051      	movs	r0, #81	@ 0x51
 80015c2:	f000 fafe 	bl	8001bc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001668 <HAL_SPI_MspInit+0x94>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d133      	bne.n	800165e <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <HAL_SPI_MspInit+0x98>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a1b      	ldr	r2, [pc, #108]	@ (800166c <HAL_SPI_MspInit+0x98>)
 8001600:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <HAL_SPI_MspInit+0x98>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_SPI_MspInit+0x98>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a14      	ldr	r2, [pc, #80]	@ (800166c <HAL_SPI_MspInit+0x98>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_SPI_MspInit+0x98>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800162e:	23e0      	movs	r3, #224	@ 0xe0
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163e:	2305      	movs	r3, #5
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4809      	ldr	r0, [pc, #36]	@ (8001670 <HAL_SPI_MspInit+0x9c>)
 800164a:	f000 fcfb 	bl	8002044 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2105      	movs	r1, #5
 8001652:	2023      	movs	r0, #35	@ 0x23
 8001654:	f000 fa99 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001658:	2023      	movs	r0, #35	@ 0x23
 800165a:	f000 fab2 	bl	8001bc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	@ 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40013000 	.word	0x40013000
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000

08001674 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_UART_MspInit+0x94>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d133      	bne.n	80016fe <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <HAL_UART_MspInit+0x98>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <HAL_UART_MspInit+0x98>)
 80016a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_UART_MspInit+0x98>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_UART_MspInit+0x98>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a14      	ldr	r2, [pc, #80]	@ (800170c <HAL_UART_MspInit+0x98>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_UART_MspInit+0x98>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ce:	2303      	movs	r3, #3
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016de:	2308      	movs	r3, #8
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4809      	ldr	r0, [pc, #36]	@ (8001710 <HAL_UART_MspInit+0x9c>)
 80016ea:	f000 fcab 	bl	8002044 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2105      	movs	r1, #5
 80016f2:	2034      	movs	r0, #52	@ 0x34
 80016f4:	f000 fa49 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016f8:	2034      	movs	r0, #52	@ 0x34
 80016fa:	f000 fa62 	bl	8001bc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	@ 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40004c00 	.word	0x40004c00
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174e:	f000 f8fd 	bl	800194c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001752:	f004 fb45 	bl	8005de0 <xTaskGetSchedulerState>
 8001756:	4603      	mov	r3, r0
 8001758:	2b01      	cmp	r3, #1
 800175a:	d001      	beq.n	8001760 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800175c:	f004 ff24 	bl	80065a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001768:	f000 fe3a 	bl	80023e0 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001774:	f000 fad2 	bl	8001d1c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <SPI1_IRQHandler+0x10>)
 8001792:	f001 fc65 	bl	8003060 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000354 	.word	0x20000354

080017a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <UART4_IRQHandler+0x10>)
 80017a6:	f001 fea5 	bl	80034f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003ac 	.word	0x200003ac

080017b4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f005 f982 	bl	8006afc <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20020000 	.word	0x20020000
 8001824:	00000400 	.word	0x00000400
 8001828:	20000418 	.word	0x20000418
 800182c:	200042c0 	.word	0x200042c0

08001830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800188c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001858:	f7ff ffea 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	@ (8001890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	@ (8001894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	@ (80018a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f005 f941 	bl	8006b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7fe ff9d 	bl	80007c4 <main>
  bx  lr    
 800188a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800188c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8001898:	080079c0 	.word	0x080079c0
  ldr r2, =_sbss
 800189c:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 80018a0:	200042bc 	.word	0x200042bc

080018a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ac:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <HAL_Init+0x40>)
 80018b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_Init+0x40>)
 80018be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <HAL_Init+0x40>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f94f 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	200f      	movs	r0, #15
 80018d8:	f000 f808 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff fe2e 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f967 	bl	8001bde <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f92f 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	@ (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000064 	.word	0x20000064
 8001944:	2000006c 	.word	0x2000006c
 8001948:	20000068 	.word	0x20000068

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	2000006c 	.word	0x2000006c
 8001970:	2000041c 	.word	0x2000041c

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	2000041c 	.word	0x2000041c

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000006c 	.word	0x2000006c

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4907      	ldr	r1, [pc, #28]	@ (8001a70 <__NVIC_EnableIRQ+0x38>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	@ (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	@ (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff29 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff3e 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff8e 	bl	8001ac8 <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff31 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffa2 	bl	8001b30 <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff feb6 	bl	8001974 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d008      	beq.n	8001c28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2280      	movs	r2, #128	@ 0x80
 8001c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e052      	b.n	8001cce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0216 	bic.w	r2, r2, #22
 8001c36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <HAL_DMA_Abort+0x62>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0208 	bic.w	r2, r2, #8
 8001c66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c78:	e013      	b.n	8001ca2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7a:	f7ff fe7b 	bl	8001974 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d90c      	bls.n	8001ca2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e015      	b.n	8001cce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e4      	bne.n	8001c7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb4:	223f      	movs	r2, #63	@ 0x3f
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2280      	movs	r2, #128	@ 0x80
 8001cee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e00c      	b.n	8001d0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001d26:	4b49      	ldr	r3, [pc, #292]	@ (8001e4c <HAL_FLASH_IRQHandler+0x130>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d020      	beq.n	8001d74 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001d32:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d107      	bne.n	8001d4c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8001d3c:	4b44      	ldr	r3, [pc, #272]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	e00b      	b.n	8001d64 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001d4c:	4b40      	ldr	r3, [pc, #256]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d103      	bne.n	8001d5e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8001d56:	4b3e      	ldr	r3, [pc, #248]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	e002      	b.n	8001d64 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8001d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8001d64:	f000 f88a 	bl	8001e7c <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f87d 	bl	8001e68 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d74:	4b35      	ldr	r3, [pc, #212]	@ (8001e4c <HAL_FLASH_IRQHandler+0x130>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d04a      	beq.n	8001e16 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d80:	4b32      	ldr	r3, [pc, #200]	@ (8001e4c <HAL_FLASH_IRQHandler+0x130>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001d86:	4b32      	ldr	r3, [pc, #200]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d12d      	bne.n	8001dec <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8001d90:	4b2f      	ldr	r3, [pc, #188]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	4a2e      	ldr	r2, [pc, #184]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d98:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d015      	beq.n	8001dce <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8001da2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f853 	bl	8001e54 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a26      	ldr	r2, [pc, #152]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001db6:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8001db8:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001dc0:	7a1b      	ldrb	r3, [r3, #8]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8ae 	bl	8001f28 <FLASH_Erase_Sector>
 8001dcc:	e023      	b.n	8001e16 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8001de0:	f000 f8ea 	bl	8001fb8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f835 	bl	8001e54 <HAL_FLASH_EndOfOperationCallback>
 8001dea:	e014      	b.n	8001e16 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001dec:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d107      	bne.n	8001e06 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8001df6:	f000 f8df 	bl	8001fb8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f828 	bl	8001e54 <HAL_FLASH_EndOfOperationCallback>
 8001e04:	e004      	b.n	8001e10 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f822 	bl	8001e54 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_FLASH_IRQHandler+0x134>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d111      	bne.n	8001e44 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_FLASH_IRQHandler+0x130>)
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <HAL_FLASH_IRQHandler+0x130>)
 8001e26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001e2a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <HAL_FLASH_IRQHandler+0x130>)
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	4a06      	ldr	r2, [pc, #24]	@ (8001e4c <HAL_FLASH_IRQHandler+0x130>)
 8001e32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e36:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <HAL_FLASH_IRQHandler+0x130>)
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	4a03      	ldr	r2, [pc, #12]	@ (8001e4c <HAL_FLASH_IRQHandler+0x130>)
 8001e3e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	6113      	str	r3, [r2, #16]
  }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023c00 	.word	0x40023c00
 8001e50:	20000070 	.word	0x20000070

08001e54 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001e80:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	4a23      	ldr	r2, [pc, #140]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001e96:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001e98:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001eb4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001eb8:	2220      	movs	r2, #32
 8001eba:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ec8:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	4a14      	ldr	r2, [pc, #80]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001ed2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001ed6:	2240      	movs	r2, #64	@ 0x40
 8001ed8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001eda:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001ef0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001ef4:	2280      	movs	r2, #128	@ 0x80
 8001ef6:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f04:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f043 0320 	orr.w	r3, r3, #32
 8001f0c:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <FLASH_SetErrorCode+0xa8>)
 8001f0e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f10:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <FLASH_SetErrorCode+0xa4>)
 8001f12:	2202      	movs	r2, #2
 8001f14:	60da      	str	r2, [r3, #12]
  }
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40023c00 	.word	0x40023c00
 8001f24:	20000070 	.word	0x20000070

08001f28 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e010      	b.n	8001f66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d103      	bne.n	8001f52 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001f4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	e009      	b.n	8001f66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d103      	bne.n	8001f60 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001f58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e002      	b.n	8001f66 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001f60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f66:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	490f      	ldr	r1, [pc, #60]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001f84:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8001f88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4313      	orrs	r3, r2
 8001f94:	4a07      	ldr	r2, [pc, #28]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001f96:	f043 0302 	orr.w	r3, r3, #2
 8001f9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <FLASH_Erase_Sector+0x8c>)
 8001fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa6:	6113      	str	r3, [r2, #16]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40023c00 	.word	0x40023c00

08001fb8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001fbc:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d017      	beq.n	8001ff8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001fce:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001fd2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001fda:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001fe6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001fea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fec:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a13      	ldr	r2, [pc, #76]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ff6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d017      	beq.n	8002034 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <FLASH_FlushCaches+0x88>)
 800200a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800200e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8002016:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <FLASH_FlushCaches+0x88>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <FLASH_FlushCaches+0x88>)
 8002022:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002026:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002028:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <FLASH_FlushCaches+0x88>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <FLASH_FlushCaches+0x88>)
 800202e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002032:	6013      	str	r3, [r2, #0]
  }
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40023c00 	.word	0x40023c00

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e16b      	b.n	8002338 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 815a 	bne.w	8002332 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80b4 	beq.w	8002332 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b60      	ldr	r3, [pc, #384]	@ (8002350 <HAL_GPIO_Init+0x30c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002350 <HAL_GPIO_Init+0x30c>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021da:	4b5d      	ldr	r3, [pc, #372]	@ (8002350 <HAL_GPIO_Init+0x30c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002354 <HAL_GPIO_Init+0x310>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a52      	ldr	r2, [pc, #328]	@ (8002358 <HAL_GPIO_Init+0x314>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <HAL_GPIO_Init+0x226>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a51      	ldr	r2, [pc, #324]	@ (800235c <HAL_GPIO_Init+0x318>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d025      	beq.n	8002266 <HAL_GPIO_Init+0x222>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a50      	ldr	r2, [pc, #320]	@ (8002360 <HAL_GPIO_Init+0x31c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01f      	beq.n	8002262 <HAL_GPIO_Init+0x21e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4f      	ldr	r2, [pc, #316]	@ (8002364 <HAL_GPIO_Init+0x320>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_Init+0x21a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4e      	ldr	r2, [pc, #312]	@ (8002368 <HAL_GPIO_Init+0x324>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0x216>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4d      	ldr	r2, [pc, #308]	@ (800236c <HAL_GPIO_Init+0x328>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_Init+0x212>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4c      	ldr	r2, [pc, #304]	@ (8002370 <HAL_GPIO_Init+0x32c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_Init+0x20e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4b      	ldr	r2, [pc, #300]	@ (8002374 <HAL_GPIO_Init+0x330>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_Init+0x20a>
 800224a:	2307      	movs	r3, #7
 800224c:	e00e      	b.n	800226c <HAL_GPIO_Init+0x228>
 800224e:	2308      	movs	r3, #8
 8002250:	e00c      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002252:	2306      	movs	r3, #6
 8002254:	e00a      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002256:	2305      	movs	r3, #5
 8002258:	e008      	b.n	800226c <HAL_GPIO_Init+0x228>
 800225a:	2304      	movs	r3, #4
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x228>
 800225e:	2303      	movs	r3, #3
 8002260:	e004      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002262:	2302      	movs	r3, #2
 8002264:	e002      	b.n	800226c <HAL_GPIO_Init+0x228>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x228>
 800226a:	2300      	movs	r3, #0
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f002 0203 	and.w	r2, r2, #3
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	4093      	lsls	r3, r2
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227c:	4935      	ldr	r1, [pc, #212]	@ (8002354 <HAL_GPIO_Init+0x310>)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800228a:	4b3b      	ldr	r3, [pc, #236]	@ (8002378 <HAL_GPIO_Init+0x334>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ae:	4a32      	ldr	r2, [pc, #200]	@ (8002378 <HAL_GPIO_Init+0x334>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b4:	4b30      	ldr	r3, [pc, #192]	@ (8002378 <HAL_GPIO_Init+0x334>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d8:	4a27      	ldr	r2, [pc, #156]	@ (8002378 <HAL_GPIO_Init+0x334>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022de:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <HAL_GPIO_Init+0x334>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002302:	4a1d      	ldr	r2, [pc, #116]	@ (8002378 <HAL_GPIO_Init+0x334>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_GPIO_Init+0x334>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_GPIO_Init+0x334>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	f67f ae90 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40021c00 	.word	0x40021c00
 8002378:	40013c00 	.word	0x40013c00

0800237c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e001      	b.n	800239e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	619a      	str	r2, [r3, #24]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_PWR_PVD_IRQHandler+0x20>)
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80023f0:	f000 f808 	bl	8002404 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80023f4:	4b02      	ldr	r3, [pc, #8]	@ (8002400 <HAL_PWR_PVD_IRQHandler+0x20>)
 80023f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023fa:	615a      	str	r2, [r3, #20]
  }
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40013c00 	.word	0x40013c00

08002404 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e267      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d075      	beq.n	800251e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002432:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d00c      	beq.n	8002458 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002446:	2b08      	cmp	r3, #8
 8002448:	d112      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b82      	ldr	r3, [pc, #520]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b7e      	ldr	r3, [pc, #504]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05b      	beq.n	800251c <HAL_RCC_OscConfig+0x108>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d157      	bne.n	800251c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e242      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x74>
 800247a:	4b76      	ldr	r3, [pc, #472]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a75      	ldr	r2, [pc, #468]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x98>
 8002492:	4b70      	ldr	r3, [pc, #448]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6f      	ldr	r2, [pc, #444]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b6d      	ldr	r3, [pc, #436]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 80024ac:	4b69      	ldr	r3, [pc, #420]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a68      	ldr	r2, [pc, #416]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b66      	ldr	r3, [pc, #408]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a65      	ldr	r2, [pc, #404]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fa52 	bl	8001974 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff fa4e 	bl	8001974 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e207      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xc0>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fa3e 	bl	8001974 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff fa3a 	bl	8001974 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1f3      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b51      	ldr	r3, [pc, #324]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0xe8>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800252a:	4b4a      	ldr	r3, [pc, #296]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1c7      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b3b      	ldr	r3, [pc, #236]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4937      	ldr	r1, [pc, #220]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <HAL_RCC_OscConfig+0x244>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7ff f9f3 	bl	8001974 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7ff f9ef 	bl	8001974 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1a8      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4925      	ldr	r1, [pc, #148]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <HAL_RCC_OscConfig+0x244>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7ff f9d2 	bl	8001974 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7ff f9ce 	bl	8001974 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e187      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d036      	beq.n	800266c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d016      	beq.n	8002634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_RCC_OscConfig+0x248>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff f9b2 	bl	8001974 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff f9ae 	bl	8001974 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e167      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x200>
 8002632:	e01b      	b.n	800266c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002634:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_RCC_OscConfig+0x248>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7ff f99b 	bl	8001974 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	e00e      	b.n	8002660 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7ff f997 	bl	8001974 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d907      	bls.n	8002660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e150      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
 8002654:	40023800 	.word	0x40023800
 8002658:	42470000 	.word	0x42470000
 800265c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	4b88      	ldr	r3, [pc, #544]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ea      	bne.n	8002642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8097 	beq.w	80027a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b81      	ldr	r3, [pc, #516]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	4b7d      	ldr	r3, [pc, #500]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	4a7c      	ldr	r2, [pc, #496]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	@ 0x40
 800269a:	4b7a      	ldr	r3, [pc, #488]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b77      	ldr	r3, [pc, #476]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b6:	4b74      	ldr	r3, [pc, #464]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a73      	ldr	r2, [pc, #460]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c2:	f7ff f957 	bl	8001974 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7ff f953 	bl	8001974 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e10c      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x2ea>
 80026f0:	4b64      	ldr	r3, [pc, #400]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f4:	4a63      	ldr	r2, [pc, #396]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fc:	e01c      	b.n	8002738 <HAL_RCC_OscConfig+0x324>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x30c>
 8002706:	4b5f      	ldr	r3, [pc, #380]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270a:	4a5e      	ldr	r2, [pc, #376]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	6713      	str	r3, [r2, #112]	@ 0x70
 8002712:	4b5c      	ldr	r3, [pc, #368]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	4a5b      	ldr	r2, [pc, #364]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6713      	str	r3, [r2, #112]	@ 0x70
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0x324>
 8002720:	4b58      	ldr	r3, [pc, #352]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	4a57      	ldr	r2, [pc, #348]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6713      	str	r3, [r2, #112]	@ 0x70
 800272c:	4b55      	ldr	r3, [pc, #340]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a54      	ldr	r2, [pc, #336]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d015      	beq.n	800276c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7ff f918 	bl	8001974 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7ff f914 	bl	8001974 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0cb      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275e:	4b49      	ldr	r3, [pc, #292]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0ee      	beq.n	8002748 <HAL_RCC_OscConfig+0x334>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276c:	f7ff f902 	bl	8001974 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7ff f8fe 	bl	8001974 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0b5      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278a:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ee      	bne.n	8002774 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b39      	ldr	r3, [pc, #228]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	4a38      	ldr	r2, [pc, #224]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a1 	beq.w	80028f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b2:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d05c      	beq.n	8002878 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d141      	bne.n	800284a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b31      	ldr	r3, [pc, #196]	@ (800288c <HAL_RCC_OscConfig+0x478>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff f8d2 	bl	8001974 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f8ce 	bl	8001974 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e087      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	4b27      	ldr	r3, [pc, #156]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	3b01      	subs	r3, #1
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	491b      	ldr	r1, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_RCC_OscConfig+0x478>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7ff f8a7 	bl	8001974 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7ff f8a3 	bl	8001974 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e05c      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x416>
 8002848:	e054      	b.n	80028f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_RCC_OscConfig+0x478>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff f890 	bl	8001974 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7ff f88c 	bl	8001974 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e045      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x444>
 8002876:	e03d      	b.n	80028f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e038      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000
 800288c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x4ec>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d028      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d121      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d11a      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d111      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	3b01      	subs	r3, #1
 80028da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0cc      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b68      	ldr	r3, [pc, #416]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d90c      	bls.n	8002940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b65      	ldr	r3, [pc, #404]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a58      	ldr	r2, [pc, #352]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a52      	ldr	r2, [pc, #328]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800297a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d044      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d119      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e067      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b37      	ldr	r3, [pc, #220]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4934      	ldr	r1, [pc, #208]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe ffbe 	bl	8001974 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe ffba 	bl	8001974 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b25      	ldr	r3, [pc, #148]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d20c      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a76:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f821 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	490a      	ldr	r1, [pc, #40]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	5ccb      	ldrb	r3, [r1, r3]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe ff1e 	bl	80018ec <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	08007964 	.word	0x08007964
 8002ac8:	20000064 	.word	0x20000064
 8002acc:	20000068 	.word	0x20000068

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad4:	b090      	sub	sp, #64	@ 0x40
 8002ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae8:	4b59      	ldr	r3, [pc, #356]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d00d      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x40>
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	f200 80a1 	bhi.w	8002c3c <HAL_RCC_GetSysClockFreq+0x16c>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b02:	e09b      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b53      	ldr	r3, [pc, #332]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b08:	e09b      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0a:	4b53      	ldr	r3, [pc, #332]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b0e:	e098      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b10:	4b4f      	ldr	r3, [pc, #316]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d028      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b26:	4b4a      	ldr	r3, [pc, #296]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	623b      	str	r3, [r7, #32]
 8002b30:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4b47      	ldr	r3, [pc, #284]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b3c:	fb03 f201 	mul.w	r2, r3, r1
 8002b40:	2300      	movs	r3, #0
 8002b42:	fb00 f303 	mul.w	r3, r0, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	4a43      	ldr	r2, [pc, #268]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b4a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b50:	460a      	mov	r2, r1
 8002b52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b56:	4413      	add	r3, r2
 8002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	61fa      	str	r2, [r7, #28]
 8002b62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b6a:	f7fd fb81 	bl	8000270 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4613      	mov	r3, r2
 8002b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b76:	e053      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b78:	4b35      	ldr	r3, [pc, #212]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	2200      	movs	r2, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	617a      	str	r2, [r7, #20]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b8a:	f04f 0b00 	mov.w	fp, #0
 8002b8e:	4652      	mov	r2, sl
 8002b90:	465b      	mov	r3, fp
 8002b92:	f04f 0000 	mov.w	r0, #0
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	0159      	lsls	r1, r3, #5
 8002b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba0:	0150      	lsls	r0, r2, #5
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	ebb2 080a 	subs.w	r8, r2, sl
 8002baa:	eb63 090b 	sbc.w	r9, r3, fp
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bc2:	ebb2 0408 	subs.w	r4, r2, r8
 8002bc6:	eb63 0509 	sbc.w	r5, r3, r9
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	00eb      	lsls	r3, r5, #3
 8002bd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bd8:	00e2      	lsls	r2, r4, #3
 8002bda:	4614      	mov	r4, r2
 8002bdc:	461d      	mov	r5, r3
 8002bde:	eb14 030a 	adds.w	r3, r4, sl
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	eb45 030b 	adc.w	r3, r5, fp
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	028b      	lsls	r3, r1, #10
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c00:	4621      	mov	r1, r4
 8002c02:	028a      	lsls	r2, r1, #10
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	60fa      	str	r2, [r7, #12]
 8002c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c14:	f7fd fb2c 	bl	8000270 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c3a:	e002      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3740      	adds	r7, #64	@ 0x40
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	017d7840 	.word	0x017d7840

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b03      	ldr	r3, [pc, #12]	@ (8002c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000064 	.word	0x20000064

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c78:	f7ff fff0 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	0a9b      	lsrs	r3, r3, #10
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4903      	ldr	r1, [pc, #12]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	08007974 	.word	0x08007974

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca0:	f7ff ffdc 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0b5b      	lsrs	r3, r3, #13
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	@ (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	08007974 	.word	0x08007974

08002cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e07b      	b.n	8002dce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ce6:	d009      	beq.n	8002cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
 8002cee:	e005      	b.n	8002cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe fc5c 	bl	80015d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d80:	ea42 0103 	orr.w	r1, r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0104 	and.w	r1, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	f003 0210 	and.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b088      	sub	sp, #32
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de6:	f7fe fdc5 	bl	8001974 <HAL_GetTick>
 8002dea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e12a      	b.n	8003056 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_SPI_Transmit+0x36>
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e122      	b.n	8003056 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_SPI_Transmit+0x48>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e11b      	b.n	8003056 <HAL_SPI_Transmit+0x280>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2203      	movs	r2, #3
 8002e2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	88fa      	ldrh	r2, [r7, #6]
 8002e3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	88fa      	ldrh	r2, [r7, #6]
 8002e44:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e6c:	d10f      	bne.n	8002e8e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e98:	2b40      	cmp	r3, #64	@ 0x40
 8002e9a:	d007      	beq.n	8002eac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eb4:	d152      	bne.n	8002f5c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_SPI_Transmit+0xee>
 8002ebe:	8b7b      	ldrh	r3, [r7, #26]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d145      	bne.n	8002f50 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	1c9a      	adds	r2, r3, #2
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ee8:	e032      	b.n	8002f50 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d112      	bne.n	8002f1e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	881a      	ldrh	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	1c9a      	adds	r2, r3, #2
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f1c:	e018      	b.n	8002f50 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f1e:	f7fe fd29 	bl	8001974 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d803      	bhi.n	8002f36 <HAL_SPI_Transmit+0x160>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d102      	bne.n	8002f3c <HAL_SPI_Transmit+0x166>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e082      	b.n	8003056 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1c7      	bne.n	8002eea <HAL_SPI_Transmit+0x114>
 8002f5a:	e053      	b.n	8003004 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_SPI_Transmit+0x194>
 8002f64:	8b7b      	ldrh	r3, [r7, #26]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d147      	bne.n	8002ffa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f90:	e033      	b.n	8002ffa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d113      	bne.n	8002fc8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fc6:	e018      	b.n	8002ffa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc8:	f7fe fcd4 	bl	8001974 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d803      	bhi.n	8002fe0 <HAL_SPI_Transmit+0x20a>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d102      	bne.n	8002fe6 <HAL_SPI_Transmit+0x210>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e02d      	b.n	8003056 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1c6      	bne.n	8002f92 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	6839      	ldr	r1, [r7, #0]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f9cf 	bl	80033ac <SPI_EndRxTxTransaction>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003054:	2300      	movs	r3, #0
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	099b      	lsrs	r3, r3, #6
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10f      	bne.n	80030a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
    return;
 80030a2:	e0d7      	b.n	8003254 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_SPI_IRQHandler+0x66>
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	09db      	lsrs	r3, r3, #7
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
    return;
 80030c4:	e0c6      	b.n	8003254 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_SPI_IRQHandler+0x8c>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80b4 	beq.w	8003254 <HAL_SPI_IRQHandler+0x1f4>
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80ad 	beq.w	8003254 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d023      	beq.n	800314e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b03      	cmp	r3, #3
 8003110:	d011      	beq.n	8003136 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	e00b      	b.n	800314e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]
        return;
 800314c:	e082      	b.n	8003254 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d014      	beq.n	8003184 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	f043 0208 	orr.w	r2, r3, #8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d04f      	beq.n	8003252 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_SPI_IRQHandler+0x17e>
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d034      	beq.n	8003248 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0203 	bic.w	r2, r2, #3
 80031ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d011      	beq.n	800321a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fa:	4a18      	ldr	r2, [pc, #96]	@ (800325c <HAL_SPI_IRQHandler+0x1fc>)
 80031fc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fd67 	bl	8001cd6 <HAL_DMA_Abort_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003212:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003226:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <HAL_SPI_IRQHandler+0x1fc>)
 8003228:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fd51 	bl	8001cd6 <HAL_DMA_Abort_IT>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003246:	e003      	b.n	8003250 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f809 	bl	8003260 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800324e:	e000      	b.n	8003252 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003250:	bf00      	nop
    return;
 8003252:	bf00      	nop
  }
}
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	08003275 	.word	0x08003275

08003260 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ffe6 	bl	8003260 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032ac:	f7fe fb62 	bl	8001974 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	4413      	add	r3, r2
 80032ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032bc:	f7fe fb5a 	bl	8001974 <HAL_GetTick>
 80032c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032c2:	4b39      	ldr	r3, [pc, #228]	@ (80033a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	015b      	lsls	r3, r3, #5
 80032c8:	0d1b      	lsrs	r3, r3, #20
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d2:	e055      	b.n	8003380 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d051      	beq.n	8003380 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032dc:	f7fe fb4a 	bl	8001974 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d902      	bls.n	80032f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d13d      	bne.n	800336e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800330a:	d111      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x94>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003314:	d004      	beq.n	8003320 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331e:	d107      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800332e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003338:	d10f      	bne.n	800335a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e018      	b.n	80033a0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	e002      	b.n	8003380 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3b01      	subs	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4013      	ands	r3, r2
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	429a      	cmp	r2, r3
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	429a      	cmp	r2, r3
 800339c:	d19a      	bne.n	80032d4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000064 	.word	0x20000064

080033ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2201      	movs	r2, #1
 80033c0:	2102      	movs	r1, #2
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f7ff ff6a 	bl	800329c <SPI_WaitFlagStateUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e032      	b.n	8003444 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033de:	4b1b      	ldr	r3, [pc, #108]	@ (800344c <SPI_EndRxTxTransaction+0xa0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003450 <SPI_EndRxTxTransaction+0xa4>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	0d5b      	lsrs	r3, r3, #21
 80033ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033fc:	d112      	bne.n	8003424 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2200      	movs	r2, #0
 8003406:	2180      	movs	r1, #128	@ 0x80
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff ff47 	bl	800329c <SPI_WaitFlagStateUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d016      	beq.n	8003442 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e00f      	b.n	8003444 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3b01      	subs	r3, #1
 800342e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343a:	2b80      	cmp	r3, #128	@ 0x80
 800343c:	d0f2      	beq.n	8003424 <SPI_EndRxTxTransaction+0x78>
 800343e:	e000      	b.n	8003442 <SPI_EndRxTxTransaction+0x96>
        break;
 8003440:	bf00      	nop
  }

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000064 	.word	0x20000064
 8003450:	165e9f81 	.word	0x165e9f81

08003454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e042      	b.n	80034ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fe f8fa 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2224      	movs	r2, #36	@ 0x24
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fc99 	bl	8003dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b0ba      	sub	sp, #232	@ 0xe8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_UART_IRQHandler+0x66>
 8003546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fb7e 	bl	8003c54 <UART_Receive_IT>
      return;
 8003558:	e273      	b.n	8003a42 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800355a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80de 	beq.w	8003720 <HAL_UART_IRQHandler+0x22c>
 8003564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003574:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80d1 	beq.w	8003720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_UART_IRQHandler+0xae>
 800358a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800358e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_UART_IRQHandler+0xd2>
 80035ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f043 0202 	orr.w	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_UART_IRQHandler+0xf6>
 80035d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f043 0204 	orr.w	r2, r3, #4
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d011      	beq.n	800361a <HAL_UART_IRQHandler+0x126>
 80035f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	f043 0208 	orr.w	r2, r3, #8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 820a 	beq.w	8003a38 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_UART_IRQHandler+0x14e>
 8003630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fb09 	bl	8003c54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364c:	2b40      	cmp	r3, #64	@ 0x40
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <HAL_UART_IRQHandler+0x17a>
 8003666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d04f      	beq.n	800370e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa14 	bl	8003a9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d141      	bne.n	8003706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3314      	adds	r3, #20
 8003688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800369c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3314      	adds	r3, #20
 80036aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1d9      	bne.n	8003682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d013      	beq.n	80036fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036da:	4a8a      	ldr	r2, [pc, #552]	@ (8003904 <HAL_UART_IRQHandler+0x410>)
 80036dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe faf7 	bl	8001cd6 <HAL_DMA_Abort_IT>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036f8:	4610      	mov	r0, r2
 80036fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	e00e      	b.n	800371c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9b6 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003704:	e00a      	b.n	800371c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f9b2 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	e006      	b.n	800371c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f9ae 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800371a:	e18d      	b.n	8003a38 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371c:	bf00      	nop
    return;
 800371e:	e18b      	b.n	8003a38 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	2b01      	cmp	r3, #1
 8003726:	f040 8167 	bne.w	80039f8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8160 	beq.w	80039f8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8159 	beq.w	80039f8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003766:	2b40      	cmp	r3, #64	@ 0x40
 8003768:	f040 80ce 	bne.w	8003908 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a9 	beq.w	80038d4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800378a:	429a      	cmp	r2, r3
 800378c:	f080 80a2 	bcs.w	80038d4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003796:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037a2:	f000 8088 	beq.w	80038b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1d9      	bne.n	80037a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3314      	adds	r3, #20
 80037f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003802:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003816:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800381a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800381e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e1      	bne.n	80037f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3314      	adds	r3, #20
 8003834:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800383e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003852:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003854:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003858:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e3      	bne.n	800382e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003886:	f023 0310 	bic.w	r3, r3, #16
 800388a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003898:	65ba      	str	r2, [r7, #88]	@ 0x58
 800389a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800389e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e3      	bne.n	8003874 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe f9a0 	bl	8001bf6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8d9 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80038d2:	e0b3      	b.n	8003a3c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038dc:	429a      	cmp	r2, r3
 80038de:	f040 80ad 	bne.w	8003a3c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ec:	f040 80a6 	bne.w	8003a3c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f8c1 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
      return;
 8003902:	e09b      	b.n	8003a3c <HAL_UART_IRQHandler+0x548>
 8003904:	08003b63 	.word	0x08003b63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003910:	b29b      	uxth	r3, r3
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 808e 	beq.w	8003a40 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8089 	beq.w	8003a40 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800393e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003952:	647a      	str	r2, [r7, #68]	@ 0x44
 8003954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e3      	bne.n	800392e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	623b      	str	r3, [r7, #32]
   return(result);
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800398a:	633a      	str	r2, [r7, #48]	@ 0x30
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e3      	bne.n	8003966 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039d0:	61fa      	str	r2, [r7, #28]
 80039d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	617b      	str	r3, [r7, #20]
   return(result);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e3      	bne.n	80039ac <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f847 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039f6:	e023      	b.n	8003a40 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <HAL_UART_IRQHandler+0x524>
 8003a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f8b7 	bl	8003b84 <UART_Transmit_IT>
    return;
 8003a16:	e014      	b.n	8003a42 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <HAL_UART_IRQHandler+0x54e>
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8f7 	bl	8003c24 <UART_EndTransmit_IT>
    return;
 8003a36:	e004      	b.n	8003a42 <HAL_UART_IRQHandler+0x54e>
    return;
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <HAL_UART_IRQHandler+0x54e>
      return;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <HAL_UART_IRQHandler+0x54e>
      return;
 8003a40:	bf00      	nop
  }
}
 8003a42:	37e8      	adds	r7, #232	@ 0xe8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b095      	sub	sp, #84	@ 0x54
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ac4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e5      	bne.n	8003aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3314      	adds	r3, #20
 8003ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3314      	adds	r3, #20
 8003af6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003af8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d119      	bne.n	8003b48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f023 0310 	bic.w	r3, r3, #16
 8003b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b34:	61ba      	str	r2, [r7, #24]
 8003b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	613b      	str	r3, [r7, #16]
   return(result);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b56:	bf00      	nop
 8003b58:	3754      	adds	r7, #84	@ 0x54
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff ff7a 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b21      	cmp	r3, #33	@ 0x21
 8003b96:	d13e      	bne.n	8003c16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba0:	d114      	bne.n	8003bcc <UART_Transmit_IT+0x48>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d110      	bne.n	8003bcc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	621a      	str	r2, [r3, #32]
 8003bca:	e008      	b.n	8003bde <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	1c59      	adds	r1, r3, #1
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6211      	str	r1, [r2, #32]
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4619      	mov	r1, r3
 8003bec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
  }
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff feff 	bl	8003a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08c      	sub	sp, #48	@ 0x30
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b22      	cmp	r3, #34	@ 0x22
 8003c6e:	f040 80aa 	bne.w	8003dc6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7a:	d115      	bne.n	8003ca8 <UART_Receive_IT+0x54>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	1c9a      	adds	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ca6:	e024      	b.n	8003cf2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb6:	d007      	beq.n	8003cc8 <UART_Receive_IT+0x74>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <UART_Receive_IT+0x82>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e008      	b.n	8003ce8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d15d      	bne.n	8003dc2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0220 	bic.w	r2, r2, #32
 8003d14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0201 	bic.w	r2, r2, #1
 8003d34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d135      	bne.n	8003db8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	613b      	str	r3, [r7, #16]
   return(result);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f023 0310 	bic.w	r3, r3, #16
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d72:	623a      	str	r2, [r7, #32]
 8003d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	69f9      	ldr	r1, [r7, #28]
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d10a      	bne.n	8003daa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fe67 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
 8003db6:	e002      	b.n	8003dbe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fe4f 	bl	8003a5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e002      	b.n	8003dc8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3730      	adds	r7, #48	@ 0x30
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd4:	b0c0      	sub	sp, #256	@ 0x100
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	68d9      	ldr	r1, [r3, #12]
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	ea40 0301 	orr.w	r3, r0, r1
 8003df8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e28:	f021 010c 	bic.w	r1, r1, #12
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e36:	430b      	orrs	r3, r1
 8003e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	6999      	ldr	r1, [r3, #24]
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	ea40 0301 	orr.w	r3, r0, r1
 8003e56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800409c <UART_SetConfig+0x2cc>)
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d005      	beq.n	8003e70 <UART_SetConfig+0xa0>
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80040a0 <UART_SetConfig+0x2d0>)
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d104      	bne.n	8003e7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e70:	f7fe ff14 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8003e74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e78:	e003      	b.n	8003e82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e7a:	f7fe fefb 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8003e7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e8c:	f040 810c 	bne.w	80040a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	1891      	adds	r1, r2, r2
 8003ea8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eaa:	415b      	adcs	r3, r3
 8003eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	eb12 0801 	adds.w	r8, r2, r1
 8003eb8:	4629      	mov	r1, r5
 8003eba:	eb43 0901 	adc.w	r9, r3, r1
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ed2:	4690      	mov	r8, r2
 8003ed4:	4699      	mov	r9, r3
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	eb18 0303 	adds.w	r3, r8, r3
 8003edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	eb49 0303 	adc.w	r3, r9, r3
 8003ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ef6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003efe:	460b      	mov	r3, r1
 8003f00:	18db      	adds	r3, r3, r3
 8003f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f04:	4613      	mov	r3, r2
 8003f06:	eb42 0303 	adc.w	r3, r2, r3
 8003f0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f14:	f7fc f9ac 	bl	8000270 <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4b61      	ldr	r3, [pc, #388]	@ (80040a4 <UART_SetConfig+0x2d4>)
 8003f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	011c      	lsls	r4, r3, #4
 8003f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	1891      	adds	r1, r2, r2
 8003f3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f40:	415b      	adcs	r3, r3
 8003f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f48:	4641      	mov	r1, r8
 8003f4a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f4e:	4649      	mov	r1, r9
 8003f50:	eb43 0b01 	adc.w	fp, r3, r1
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f68:	4692      	mov	sl, r2
 8003f6a:	469b      	mov	fp, r3
 8003f6c:	4643      	mov	r3, r8
 8003f6e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f76:	464b      	mov	r3, r9
 8003f78:	eb4b 0303 	adc.w	r3, fp, r3
 8003f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f94:	460b      	mov	r3, r1
 8003f96:	18db      	adds	r3, r3, r3
 8003f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	eb42 0303 	adc.w	r3, r2, r3
 8003fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003faa:	f7fc f961 	bl	8000270 <__aeabi_uldivmod>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80040a4 <UART_SetConfig+0x2d4>)
 8003fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2264      	movs	r2, #100	@ 0x64
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	1acb      	subs	r3, r1, r3
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fca:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <UART_SetConfig+0x2d4>)
 8003fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fd8:	441c      	add	r4, r3
 8003fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fe4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fec:	4642      	mov	r2, r8
 8003fee:	464b      	mov	r3, r9
 8003ff0:	1891      	adds	r1, r2, r2
 8003ff2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ff4:	415b      	adcs	r3, r3
 8003ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	1851      	adds	r1, r2, r1
 8004000:	6339      	str	r1, [r7, #48]	@ 0x30
 8004002:	4649      	mov	r1, r9
 8004004:	414b      	adcs	r3, r1
 8004006:	637b      	str	r3, [r7, #52]	@ 0x34
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004014:	4659      	mov	r1, fp
 8004016:	00cb      	lsls	r3, r1, #3
 8004018:	4651      	mov	r1, sl
 800401a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401e:	4651      	mov	r1, sl
 8004020:	00ca      	lsls	r2, r1, #3
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	4603      	mov	r3, r0
 8004028:	4642      	mov	r2, r8
 800402a:	189b      	adds	r3, r3, r2
 800402c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004030:	464b      	mov	r3, r9
 8004032:	460a      	mov	r2, r1
 8004034:	eb42 0303 	adc.w	r3, r2, r3
 8004038:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004048:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800404c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004050:	460b      	mov	r3, r1
 8004052:	18db      	adds	r3, r3, r3
 8004054:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004056:	4613      	mov	r3, r2
 8004058:	eb42 0303 	adc.w	r3, r2, r3
 800405c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800405e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004066:	f7fc f903 	bl	8000270 <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4b0d      	ldr	r3, [pc, #52]	@ (80040a4 <UART_SetConfig+0x2d4>)
 8004070:	fba3 1302 	umull	r1, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	2164      	movs	r1, #100	@ 0x64
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	3332      	adds	r3, #50	@ 0x32
 8004082:	4a08      	ldr	r2, [pc, #32]	@ (80040a4 <UART_SetConfig+0x2d4>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	f003 0207 	and.w	r2, r3, #7
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4422      	add	r2, r4
 8004096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004098:	e106      	b.n	80042a8 <UART_SetConfig+0x4d8>
 800409a:	bf00      	nop
 800409c:	40011000 	.word	0x40011000
 80040a0:	40011400 	.word	0x40011400
 80040a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ac:	2200      	movs	r2, #0
 80040ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040ba:	4642      	mov	r2, r8
 80040bc:	464b      	mov	r3, r9
 80040be:	1891      	adds	r1, r2, r2
 80040c0:	6239      	str	r1, [r7, #32]
 80040c2:	415b      	adcs	r3, r3
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ca:	4641      	mov	r1, r8
 80040cc:	1854      	adds	r4, r2, r1
 80040ce:	4649      	mov	r1, r9
 80040d0:	eb43 0501 	adc.w	r5, r3, r1
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	00eb      	lsls	r3, r5, #3
 80040de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e2:	00e2      	lsls	r2, r4, #3
 80040e4:	4614      	mov	r4, r2
 80040e6:	461d      	mov	r5, r3
 80040e8:	4643      	mov	r3, r8
 80040ea:	18e3      	adds	r3, r4, r3
 80040ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040f0:	464b      	mov	r3, r9
 80040f2:	eb45 0303 	adc.w	r3, r5, r3
 80040f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004106:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004116:	4629      	mov	r1, r5
 8004118:	008b      	lsls	r3, r1, #2
 800411a:	4621      	mov	r1, r4
 800411c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004120:	4621      	mov	r1, r4
 8004122:	008a      	lsls	r2, r1, #2
 8004124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004128:	f7fc f8a2 	bl	8000270 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4b60      	ldr	r3, [pc, #384]	@ (80042b4 <UART_SetConfig+0x4e4>)
 8004132:	fba3 2302 	umull	r2, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	011c      	lsls	r4, r3, #4
 800413a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004144:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	1891      	adds	r1, r2, r2
 8004152:	61b9      	str	r1, [r7, #24]
 8004154:	415b      	adcs	r3, r3
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800415c:	4641      	mov	r1, r8
 800415e:	1851      	adds	r1, r2, r1
 8004160:	6139      	str	r1, [r7, #16]
 8004162:	4649      	mov	r1, r9
 8004164:	414b      	adcs	r3, r1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004174:	4659      	mov	r1, fp
 8004176:	00cb      	lsls	r3, r1, #3
 8004178:	4651      	mov	r1, sl
 800417a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417e:	4651      	mov	r1, sl
 8004180:	00ca      	lsls	r2, r1, #3
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	4603      	mov	r3, r0
 8004188:	4642      	mov	r2, r8
 800418a:	189b      	adds	r3, r3, r2
 800418c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004190:	464b      	mov	r3, r9
 8004192:	460a      	mov	r2, r1
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041b4:	4649      	mov	r1, r9
 80041b6:	008b      	lsls	r3, r1, #2
 80041b8:	4641      	mov	r1, r8
 80041ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041be:	4641      	mov	r1, r8
 80041c0:	008a      	lsls	r2, r1, #2
 80041c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041c6:	f7fc f853 	bl	8000270 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	4b38      	ldr	r3, [pc, #224]	@ (80042b4 <UART_SetConfig+0x4e4>)
 80041d2:	fba3 2301 	umull	r2, r3, r3, r1
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2264      	movs	r2, #100	@ 0x64
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	1acb      	subs	r3, r1, r3
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	3332      	adds	r3, #50	@ 0x32
 80041e4:	4a33      	ldr	r2, [pc, #204]	@ (80042b4 <UART_SetConfig+0x4e4>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041f0:	441c      	add	r4, r3
 80041f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f6:	2200      	movs	r2, #0
 80041f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80041fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80041fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	1891      	adds	r1, r2, r2
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	415b      	adcs	r3, r3
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004210:	4641      	mov	r1, r8
 8004212:	1851      	adds	r1, r2, r1
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	4649      	mov	r1, r9
 8004218:	414b      	adcs	r3, r1
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004228:	4659      	mov	r1, fp
 800422a:	00cb      	lsls	r3, r1, #3
 800422c:	4651      	mov	r1, sl
 800422e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004232:	4651      	mov	r1, sl
 8004234:	00ca      	lsls	r2, r1, #3
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	4603      	mov	r3, r0
 800423c:	4642      	mov	r2, r8
 800423e:	189b      	adds	r3, r3, r2
 8004240:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004242:	464b      	mov	r3, r9
 8004244:	460a      	mov	r2, r1
 8004246:	eb42 0303 	adc.w	r3, r2, r3
 800424a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	663b      	str	r3, [r7, #96]	@ 0x60
 8004256:	667a      	str	r2, [r7, #100]	@ 0x64
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004264:	4649      	mov	r1, r9
 8004266:	008b      	lsls	r3, r1, #2
 8004268:	4641      	mov	r1, r8
 800426a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800426e:	4641      	mov	r1, r8
 8004270:	008a      	lsls	r2, r1, #2
 8004272:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004276:	f7fb fffb 	bl	8000270 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <UART_SetConfig+0x4e4>)
 8004280:	fba3 1302 	umull	r1, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	2164      	movs	r1, #100	@ 0x64
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	3332      	adds	r3, #50	@ 0x32
 8004292:	4a08      	ldr	r2, [pc, #32]	@ (80042b4 <UART_SetConfig+0x4e4>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	f003 020f 	and.w	r2, r3, #15
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4422      	add	r2, r4
 80042a6:	609a      	str	r2, [r3, #8]
}
 80042a8:	bf00      	nop
 80042aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042ae:	46bd      	mov	sp, r7
 80042b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b4:	51eb851f 	.word	0x51eb851f

080042b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ca:	2b84      	cmp	r3, #132	@ 0x84
 80042cc:	d005      	beq.n	80042da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	3303      	adds	r3, #3
 80042d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042da:	68fb      	ldr	r3, [r7, #12]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ee:	f3ef 8305 	mrs	r3, IPSR
 80042f2:	607b      	str	r3, [r7, #4]
  return(result);
 80042f4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004310:	f001 f95c 	bl	80055cc <vTaskStartScheduler>
  
  return osOK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	bd80      	pop	{r7, pc}

0800431a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800431a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431c:	b089      	sub	sp, #36	@ 0x24
 800431e:	af04      	add	r7, sp, #16
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d020      	beq.n	800436e <osThreadCreate+0x54>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01c      	beq.n	800436e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685c      	ldr	r4, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691e      	ldr	r6, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff ffb6 	bl	80042b8 <makeFreeRtosPriority>
 800434c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004356:	9202      	str	r2, [sp, #8]
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	9100      	str	r1, [sp, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4632      	mov	r2, r6
 8004360:	4629      	mov	r1, r5
 8004362:	4620      	mov	r0, r4
 8004364:	f000 ff64 	bl	8005230 <xTaskCreateStatic>
 8004368:	4603      	mov	r3, r0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e01c      	b.n	80043a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685c      	ldr	r4, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800437a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ff98 	bl	80042b8 <makeFreeRtosPriority>
 8004388:	4602      	mov	r2, r0
 800438a:	f107 030c 	add.w	r3, r7, #12
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	9200      	str	r2, [sp, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	4632      	mov	r2, r6
 8004396:	4629      	mov	r1, r5
 8004398:	4620      	mov	r0, r4
 800439a:	f000 ffa9 	bl	80052f0 <xTaskCreate>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e000      	b.n	80043aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80043a8:	68fb      	ldr	r3, [r7, #12]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <osDelay+0x16>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	e000      	b.n	80043ca <osDelay+0x18>
 80043c8:	2301      	movs	r3, #1
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 f8c8 	bl	8005560 <vTaskDelay>
  
  return osOK;
 80043d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4619      	mov	r1, r3
 80043f0:	2001      	movs	r0, #1
 80043f2:	f000 fab6 	bl	8004962 <xQueueCreateMutexStatic>
 80043f6:	4603      	mov	r3, r0
 80043f8:	e003      	b.n	8004402 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80043fa:	2001      	movs	r0, #1
 80043fc:	f000 fa99 	bl	8004932 <xQueueCreateMutex>
 8004400:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <osMutexWait+0x18>
    return osErrorParameter;
 8004420:	2380      	movs	r3, #128	@ 0x80
 8004422:	e03a      	b.n	800449a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d103      	bne.n	8004438 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e009      	b.n	800444c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <osMutexWait+0x40>
      ticks = 1;
 8004448:	2301      	movs	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800444c:	f7ff ff4c 	bl	80042e8 <inHandlerMode>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d017      	beq.n	8004486 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004456:	f107 0308 	add.w	r3, r7, #8
 800445a:	461a      	mov	r2, r3
 800445c:	2100      	movs	r1, #0
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fd3c 	bl	8004edc <xQueueReceiveFromISR>
 8004464:	4603      	mov	r3, r0
 8004466:	2b01      	cmp	r3, #1
 8004468:	d001      	beq.n	800446e <osMutexWait+0x62>
      return osErrorOS;
 800446a:	23ff      	movs	r3, #255	@ 0xff
 800446c:	e015      	b.n	800449a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d011      	beq.n	8004498 <osMutexWait+0x8c>
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <osMutexWait+0x98>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	e008      	b.n	8004498 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fc17 	bl	8004cbc <xQueueSemaphoreTake>
 800448e:	4603      	mov	r3, r0
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <osMutexWait+0x8c>
    return osErrorOS;
 8004494:	23ff      	movs	r3, #255	@ 0xff
 8004496:	e000      	b.n	800449a <osMutexWait+0x8e>
  }
  
  return osOK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80044b8:	f7ff ff16 	bl	80042e8 <inHandlerMode>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d016      	beq.n	80044f0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80044c2:	f107 0308 	add.w	r3, r7, #8
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fb67 	bl	8004b9c <xQueueGiveFromISR>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d001      	beq.n	80044d8 <osMutexRelease+0x30>
      return osErrorOS;
 80044d4:	23ff      	movs	r3, #255	@ 0xff
 80044d6:	e017      	b.n	8004508 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d013      	beq.n	8004506 <osMutexRelease+0x5e>
 80044de:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <osMutexRelease+0x68>)
 80044e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	e00a      	b.n	8004506 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80044f0:	2300      	movs	r3, #0
 80044f2:	2200      	movs	r2, #0
 80044f4:	2100      	movs	r1, #0
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa4e 	bl	8004998 <xQueueGenericSend>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d001      	beq.n	8004506 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004502:	23ff      	movs	r3, #255	@ 0xff
 8004504:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004506:	68fb      	ldr	r3, [r7, #12]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	e000ed04 	.word	0xe000ed04

08004514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f103 0208 	add.w	r2, r3, #8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f04f 32ff 	mov.w	r2, #4294967295
 800452c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f103 0208 	add.w	r2, r3, #8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f103 0208 	add.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d103      	bne.n	80045d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e00c      	b.n	80045f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3308      	adds	r3, #8
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e002      	b.n	80045e4 <vListInsert+0x2e>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d2f6      	bcs.n	80045de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]
}
 800461c:	bf00      	nop
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6892      	ldr	r2, [r2, #8]
 800463e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6852      	ldr	r2, [r2, #4]
 8004648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d103      	bne.n	800465c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	1e5a      	subs	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046a8:	f001 feee 	bl	8006488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b4:	68f9      	ldr	r1, [r7, #12]
 80046b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	441a      	add	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	3b01      	subs	r3, #1
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	441a      	add	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	22ff      	movs	r2, #255	@ 0xff
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	22ff      	movs	r2, #255	@ 0xff
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d114      	bne.n	8004728 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01a      	beq.n	800473c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3310      	adds	r3, #16
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f9a8 	bl	8005a60 <xTaskRemoveFromEventList>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d012      	beq.n	800473c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004716:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <xQueueGenericReset+0xd0>)
 8004718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	e009      	b.n	800473c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3310      	adds	r3, #16
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fef1 	bl	8004514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3324      	adds	r3, #36	@ 0x24
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff feec 	bl	8004514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800473c:	f001 fed6 	bl	80064ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004740:	2301      	movs	r3, #1
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	@ 0x38
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <xQueueGenericCreateStatic+0x56>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <xQueueGenericCreateStatic+0x5a>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <xQueueGenericCreateStatic+0x5c>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	623b      	str	r3, [r7, #32]
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <xQueueGenericCreateStatic+0x84>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <xQueueGenericCreateStatic+0x88>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <xQueueGenericCreateStatic+0x8a>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	61fb      	str	r3, [r7, #28]
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	e7fd      	b.n	80047f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047f6:	2348      	movs	r3, #72	@ 0x48
 80047f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b48      	cmp	r3, #72	@ 0x48
 80047fe:	d00b      	beq.n	8004818 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	61bb      	str	r3, [r7, #24]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004818:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800481e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800482c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f840 	bl	80048c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004842:	4618      	mov	r0, r3
 8004844:	3730      	adds	r7, #48	@ 0x30
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800484a:	b580      	push	{r7, lr}
 800484c:	b08a      	sub	sp, #40	@ 0x28
 800484e:	af02      	add	r7, sp, #8
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	4613      	mov	r3, r2
 8004856:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10b      	bne.n	8004876 <xQueueGenericCreate+0x2c>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	613b      	str	r3, [r7, #16]
}
 8004870:	bf00      	nop
 8004872:	bf00      	nop
 8004874:	e7fd      	b.n	8004872 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	3348      	adds	r3, #72	@ 0x48
 8004884:	4618      	mov	r0, r3
 8004886:	f001 ff21 	bl	80066cc <pvPortMalloc>
 800488a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d011      	beq.n	80048b6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	3348      	adds	r3, #72	@ 0x48
 800489a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048a4:	79fa      	ldrb	r2, [r7, #7]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f805 	bl	80048c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048b6:	69bb      	ldr	r3, [r7, #24]
	}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e002      	b.n	80048e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048ee:	2101      	movs	r1, #1
 80048f0:	69b8      	ldr	r0, [r7, #24]
 80048f2:	f7ff fec3 	bl	800467c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800491e:	2300      	movs	r3, #0
 8004920:	2200      	movs	r2, #0
 8004922:	2100      	movs	r1, #0
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f837 	bl	8004998 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004932:	b580      	push	{r7, lr}
 8004934:	b086      	sub	sp, #24
 8004936:	af00      	add	r7, sp, #0
 8004938:	4603      	mov	r3, r0
 800493a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800493c:	2301      	movs	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	461a      	mov	r2, r3
 8004948:	6939      	ldr	r1, [r7, #16]
 800494a:	6978      	ldr	r0, [r7, #20]
 800494c:	f7ff ff7d 	bl	800484a <xQueueGenericCreate>
 8004950:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff ffd3 	bl	80048fe <prvInitialiseMutex>

		return xNewQueue;
 8004958:	68fb      	ldr	r3, [r7, #12]
	}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004962:	b580      	push	{r7, lr}
 8004964:	b088      	sub	sp, #32
 8004966:	af02      	add	r7, sp, #8
 8004968:	4603      	mov	r3, r0
 800496a:	6039      	str	r1, [r7, #0]
 800496c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800496e:	2301      	movs	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2200      	movs	r2, #0
 800497e:	6939      	ldr	r1, [r7, #16]
 8004980:	6978      	ldr	r0, [r7, #20]
 8004982:	f7ff fee5 	bl	8004750 <xQueueGenericCreateStatic>
 8004986:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff ffb8 	bl	80048fe <prvInitialiseMutex>

		return xNewQueue;
 800498e:	68fb      	ldr	r3, [r7, #12]
	}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08e      	sub	sp, #56	@ 0x38
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049a6:	2300      	movs	r3, #0
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <xQueueGenericSend+0x34>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049c6:	bf00      	nop
 80049c8:	bf00      	nop
 80049ca:	e7fd      	b.n	80049c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <xQueueGenericSend+0x42>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <xQueueGenericSend+0x46>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueGenericSend+0x48>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <xQueueGenericSend+0x64>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049f6:	bf00      	nop
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d103      	bne.n	8004a0a <xQueueGenericSend+0x72>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <xQueueGenericSend+0x76>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <xQueueGenericSend+0x78>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <xQueueGenericSend+0x94>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	623b      	str	r3, [r7, #32]
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a2c:	f001 f9d8 	bl	8005de0 <xTaskGetSchedulerState>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <xQueueGenericSend+0xa4>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <xQueueGenericSend+0xa8>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <xQueueGenericSend+0xaa>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10b      	bne.n	8004a5e <xQueueGenericSend+0xc6>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	61fb      	str	r3, [r7, #28]
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	e7fd      	b.n	8004a5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a5e:	f001 fd13 	bl	8006488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <xQueueGenericSend+0xdc>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d129      	bne.n	8004ac8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7a:	f000 fac9 	bl	8005010 <prvCopyDataToQueue>
 8004a7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	3324      	adds	r3, #36	@ 0x24
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ffe7 	bl	8005a60 <xTaskRemoveFromEventList>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a98:	4b3f      	ldr	r3, [pc, #252]	@ (8004b98 <xQueueGenericSend+0x200>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	e00a      	b.n	8004ac0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ab0:	4b39      	ldr	r3, [pc, #228]	@ (8004b98 <xQueueGenericSend+0x200>)
 8004ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ac0:	f001 fd14 	bl	80064ec <vPortExitCritical>
				return pdPASS;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e063      	b.n	8004b90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ace:	f001 fd0d 	bl	80064ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e05c      	b.n	8004b90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 f821 	bl	8005b28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aea:	f001 fcff 	bl	80064ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aee:	f000 fdcf 	bl	8005690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004af2:	f001 fcc9 	bl	8006488 <vPortEnterCritical>
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d103      	bne.n	8004b0c <xQueueGenericSend+0x174>
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d103      	bne.n	8004b22 <xQueueGenericSend+0x18a>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b22:	f001 fce3 	bl	80064ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b26:	1d3a      	adds	r2, r7, #4
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 f810 	bl	8005b54 <xTaskCheckForTimeOut>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d124      	bne.n	8004b84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b3c:	f000 fb60 	bl	8005200 <prvIsQueueFull>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	3310      	adds	r3, #16
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 ff60 	bl	8005a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b56:	f000 faeb 	bl	8005130 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b5a:	f000 fda7 	bl	80056ac <xTaskResumeAll>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f af7c 	bne.w	8004a5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b66:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <xQueueGenericSend+0x200>)
 8004b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	e772      	b.n	8004a5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b7a:	f000 fad9 	bl	8005130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b7e:	f000 fd95 	bl	80056ac <xTaskResumeAll>
 8004b82:	e76c      	b.n	8004a5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b86:	f000 fad3 	bl	8005130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b8a:	f000 fd8f 	bl	80056ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3738      	adds	r7, #56	@ 0x38
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	@ 0x38
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10b      	bne.n	8004bc8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	623b      	str	r3, [r7, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	e7fd      	b.n	8004bc4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	61fb      	str	r3, [r7, #28]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <xQueueGiveFromISR+0x5c>
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <xQueueGiveFromISR+0x60>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <xQueueGiveFromISR+0x62>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	61bb      	str	r3, [r7, #24]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c1a:	f001 fd15 	bl	8006648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c1e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	617a      	str	r2, [r7, #20]
 8004c34:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c36:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d22b      	bcs.n	8004ca2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d112      	bne.n	8004c8c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d016      	beq.n	8004c9c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	3324      	adds	r3, #36	@ 0x24
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fef4 	bl	8005a60 <xTaskRemoveFromEventList>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00e      	beq.n	8004c9c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00b      	beq.n	8004c9c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e007      	b.n	8004c9c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c90:	3301      	adds	r3, #1
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	b25a      	sxtb	r2, r3
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca0:	e001      	b.n	8004ca6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3738      	adds	r7, #56	@ 0x38
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08e      	sub	sp, #56	@ 0x38
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	623b      	str	r3, [r7, #32]
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00b      	beq.n	8004d10 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	61fb      	str	r3, [r7, #28]
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d10:	f001 f866 	bl	8005de0 <xTaskGetSchedulerState>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <xQueueSemaphoreTake+0x64>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <xQueueSemaphoreTake+0x68>
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <xQueueSemaphoreTake+0x6a>
 8004d24:	2300      	movs	r3, #0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	61bb      	str	r3, [r7, #24]
}
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
 8004d40:	e7fd      	b.n	8004d3e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d42:	f001 fba1 	bl	8006488 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d024      	beq.n	8004d9c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d58:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004d62:	f001 f9e9 	bl	8006138 <pvTaskIncrementMutexHeldCount>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00f      	beq.n	8004d94 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d76:	3310      	adds	r3, #16
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fe71 	bl	8005a60 <xTaskRemoveFromEventList>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d84:	4b54      	ldr	r3, [pc, #336]	@ (8004ed8 <xQueueSemaphoreTake+0x21c>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d94:	f001 fbaa 	bl	80064ec <vPortExitCritical>
				return pdPASS;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e098      	b.n	8004ece <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d112      	bne.n	8004dc8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	617b      	str	r3, [r7, #20]
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004dc0:	f001 fb94 	bl	80064ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e082      	b.n	8004ece <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dce:	f107 030c 	add.w	r3, r7, #12
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fea8 	bl	8005b28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ddc:	f001 fb86 	bl	80064ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004de0:	f000 fc56 	bl	8005690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004de4:	f001 fb50 	bl	8006488 <vPortEnterCritical>
 8004de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dee:	b25b      	sxtb	r3, r3
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d103      	bne.n	8004dfe <xQueueSemaphoreTake+0x142>
 8004df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e04:	b25b      	sxtb	r3, r3
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d103      	bne.n	8004e14 <xQueueSemaphoreTake+0x158>
 8004e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e14:	f001 fb6a 	bl	80064ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e18:	463a      	mov	r2, r7
 8004e1a:	f107 030c 	add.w	r3, r7, #12
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fe97 	bl	8005b54 <xTaskCheckForTimeOut>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d132      	bne.n	8004e92 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e2e:	f000 f9d1 	bl	80051d4 <prvIsQueueEmpty>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d026      	beq.n	8004e86 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004e40:	f001 fb22 	bl	8006488 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 ffe7 	bl	8005e1c <xTaskPriorityInherit>
 8004e4e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004e50:	f001 fb4c 	bl	80064ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e56:	3324      	adds	r3, #36	@ 0x24
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fdd9 	bl	8005a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e64:	f000 f964 	bl	8005130 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e68:	f000 fc20 	bl	80056ac <xTaskResumeAll>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f47f af67 	bne.w	8004d42 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004e74:	4b18      	ldr	r3, [pc, #96]	@ (8004ed8 <xQueueSemaphoreTake+0x21c>)
 8004e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	e75d      	b.n	8004d42 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004e86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e88:	f000 f952 	bl	8005130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e8c:	f000 fc0e 	bl	80056ac <xTaskResumeAll>
 8004e90:	e757      	b.n	8004d42 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e94:	f000 f94c 	bl	8005130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e98:	f000 fc08 	bl	80056ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e9e:	f000 f999 	bl	80051d4 <prvIsQueueEmpty>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f43f af4c 	beq.w	8004d42 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004eb0:	f001 faea 	bl	8006488 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004eb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004eb6:	f000 f893 	bl	8004fe0 <prvGetDisinheritPriorityAfterTimeout>
 8004eba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 f8a8 	bl	8006018 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004ec8:	f001 fb10 	bl	80064ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ecc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3738      	adds	r7, #56	@ 0x38
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08e      	sub	sp, #56	@ 0x38
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	623b      	str	r3, [r7, #32]
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop
 8004f08:	e7fd      	b.n	8004f06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d103      	bne.n	8004f18 <xQueueReceiveFromISR+0x3c>
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <xQueueReceiveFromISR+0x40>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <xQueueReceiveFromISR+0x42>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	61fb      	str	r3, [r7, #28]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f3a:	f001 fb85 	bl	8006648 <vPortValidateInterruptPriority>
	__asm volatile
 8004f3e:	f3ef 8211 	mrs	r2, BASEPRI
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	61ba      	str	r2, [r7, #24]
 8004f54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d02f      	beq.n	8004fc6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f74:	f000 f8b6 	bl	80050e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	1e5a      	subs	r2, r3, #1
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d112      	bne.n	8004fb0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d016      	beq.n	8004fc0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	3310      	adds	r3, #16
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fd62 	bl	8005a60 <xTaskRemoveFromEventList>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00e      	beq.n	8004fc0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e007      	b.n	8004fc0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	b25a      	sxtb	r2, r3
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fc4:	e001      	b.n	8004fca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fcc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f383 8811 	msr	BASEPRI, r3
}
 8004fd4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3738      	adds	r7, #56	@ 0x38
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d006      	beq.n	8004ffe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1c3 0307 	rsb	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e001      	b.n	8005002 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005002:	68fb      	ldr	r3, [r7, #12]
	}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10d      	bne.n	800504a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d14d      	bne.n	80050d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 ff64 	bl	8005f08 <xTaskPriorityDisinherit>
 8005040:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	609a      	str	r2, [r3, #8]
 8005048:	e043      	b.n	80050d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d119      	bne.n	8005084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6858      	ldr	r0, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	461a      	mov	r2, r3
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	f001 fd7a 	bl	8006b54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005068:	441a      	add	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	d32b      	bcc.n	80050d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	e026      	b.n	80050d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68d8      	ldr	r0, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	461a      	mov	r2, r3
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	f001 fd60 	bl	8006b54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509c:	425b      	negs	r3, r3
 800509e:	441a      	add	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d207      	bcs.n	80050c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b8:	425b      	negs	r3, r3
 80050ba:	441a      	add	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d105      	bne.n	80050d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80050da:	697b      	ldr	r3, [r7, #20]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d018      	beq.n	8005128 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	441a      	add	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	429a      	cmp	r2, r3
 800510e:	d303      	bcc.n	8005118 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68d9      	ldr	r1, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	461a      	mov	r2, r3
 8005122:	6838      	ldr	r0, [r7, #0]
 8005124:	f001 fd16 	bl	8006b54 <memcpy>
	}
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005138:	f001 f9a6 	bl	8006488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005142:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005144:	e011      	b.n	800516a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	2b00      	cmp	r3, #0
 800514c:	d012      	beq.n	8005174 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3324      	adds	r3, #36	@ 0x24
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fc84 	bl	8005a60 <xTaskRemoveFromEventList>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800515e:	f000 fd5d 	bl	8005c1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	3b01      	subs	r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800516a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	dce9      	bgt.n	8005146 <prvUnlockQueue+0x16>
 8005172:	e000      	b.n	8005176 <prvUnlockQueue+0x46>
					break;
 8005174:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	22ff      	movs	r2, #255	@ 0xff
 800517a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800517e:	f001 f9b5 	bl	80064ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005182:	f001 f981 	bl	8006488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800518c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800518e:	e011      	b.n	80051b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d012      	beq.n	80051be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3310      	adds	r3, #16
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fc5f 	bl	8005a60 <xTaskRemoveFromEventList>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051a8:	f000 fd38 	bl	8005c1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dce9      	bgt.n	8005190 <prvUnlockQueue+0x60>
 80051bc:	e000      	b.n	80051c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	22ff      	movs	r2, #255	@ 0xff
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80051c8:	f001 f990 	bl	80064ec <vPortExitCritical>
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051dc:	f001 f954 	bl	8006488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	e001      	b.n	80051f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051f2:	f001 f97b 	bl	80064ec <vPortExitCritical>

	return xReturn;
 80051f6:	68fb      	ldr	r3, [r7, #12]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005208:	f001 f93e 	bl	8006488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005214:	429a      	cmp	r2, r3
 8005216:	d102      	bne.n	800521e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	e001      	b.n	8005222 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005222:	f001 f963 	bl	80064ec <vPortExitCritical>

	return xReturn;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08e      	sub	sp, #56	@ 0x38
 8005234:	af04      	add	r7, sp, #16
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800523e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	623b      	str	r3, [r7, #32]
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800525c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	61fb      	str	r3, [r7, #28]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800527a:	2354      	movs	r3, #84	@ 0x54
 800527c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b54      	cmp	r3, #84	@ 0x54
 8005282:	d00b      	beq.n	800529c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	61bb      	str	r3, [r7, #24]
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	e7fd      	b.n	8005298 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800529c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800529e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01e      	beq.n	80052e2 <xTaskCreateStatic+0xb2>
 80052a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01b      	beq.n	80052e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052bc:	2300      	movs	r3, #0
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	9302      	str	r3, [sp, #8]
 80052c4:	f107 0314 	add.w	r3, r7, #20
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f850 	bl	800537a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052dc:	f000 f8d6 	bl	800548c <prvAddNewTaskToReadyList>
 80052e0:	e001      	b.n	80052e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052e6:	697b      	ldr	r3, [r7, #20]
	}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3728      	adds	r7, #40	@ 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	@ 0x30
 80052f4:	af04      	add	r7, sp, #16
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4618      	mov	r0, r3
 8005306:	f001 f9e1 	bl	80066cc <pvPortMalloc>
 800530a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005312:	2054      	movs	r0, #84	@ 0x54
 8005314:	f001 f9da 	bl	80066cc <pvPortMalloc>
 8005318:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	631a      	str	r2, [r3, #48]	@ 0x30
 8005326:	e005      	b.n	8005334 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005328:	6978      	ldr	r0, [r7, #20]
 800532a:	f001 fa9d 	bl	8006868 <vPortFree>
 800532e:	e001      	b.n	8005334 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d017      	beq.n	800536a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005342:	88fa      	ldrh	r2, [r7, #6]
 8005344:	2300      	movs	r3, #0
 8005346:	9303      	str	r3, [sp, #12]
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f80e 	bl	800537a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800535e:	69f8      	ldr	r0, [r7, #28]
 8005360:	f000 f894 	bl	800548c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005364:	2301      	movs	r3, #1
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	e002      	b.n	8005370 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005370:	69bb      	ldr	r3, [r7, #24]
	}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b088      	sub	sp, #32
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
 8005386:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005392:	3b01      	subs	r3, #1
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	617b      	str	r3, [r7, #20]
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	e7fd      	b.n	80053c0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01f      	beq.n	800540a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	e012      	b.n	80053f6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	7819      	ldrb	r1, [r3, #0]
 80053d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	3334      	adds	r3, #52	@ 0x34
 80053e0:	460a      	mov	r2, r1
 80053e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d006      	beq.n	80053fe <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b0f      	cmp	r3, #15
 80053fa:	d9e9      	bls.n	80053d0 <prvInitialiseNewTask+0x56>
 80053fc:	e000      	b.n	8005400 <prvInitialiseNewTask+0x86>
			{
				break;
 80053fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005408:	e003      	b.n	8005412 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	2b06      	cmp	r3, #6
 8005416:	d901      	bls.n	800541c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005418:	2306      	movs	r3, #6
 800541a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005420:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005426:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	2200      	movs	r2, #0
 800542c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	3304      	adds	r3, #4
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff f88e 	bl	8004554 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	3318      	adds	r3, #24
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff f889 	bl	8004554 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005446:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	f1c3 0207 	rsb	r2, r3, #7
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005456:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	2200      	movs	r2, #0
 800545c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	68f9      	ldr	r1, [r7, #12]
 800546a:	69b8      	ldr	r0, [r7, #24]
 800546c:	f000 fede 	bl	800622c <pxPortInitialiseStack>
 8005470:	4602      	mov	r2, r0
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005482:	bf00      	nop
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005494:	f000 fff8 	bl	8006488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005498:	4b2a      	ldr	r3, [pc, #168]	@ (8005544 <prvAddNewTaskToReadyList+0xb8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	4a29      	ldr	r2, [pc, #164]	@ (8005544 <prvAddNewTaskToReadyList+0xb8>)
 80054a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054a2:	4b29      	ldr	r3, [pc, #164]	@ (8005548 <prvAddNewTaskToReadyList+0xbc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054aa:	4a27      	ldr	r2, [pc, #156]	@ (8005548 <prvAddNewTaskToReadyList+0xbc>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054b0:	4b24      	ldr	r3, [pc, #144]	@ (8005544 <prvAddNewTaskToReadyList+0xb8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d110      	bne.n	80054da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054b8:	f000 fbd4 	bl	8005c64 <prvInitialiseTaskLists>
 80054bc:	e00d      	b.n	80054da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054be:	4b23      	ldr	r3, [pc, #140]	@ (800554c <prvAddNewTaskToReadyList+0xc0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054c6:	4b20      	ldr	r3, [pc, #128]	@ (8005548 <prvAddNewTaskToReadyList+0xbc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d802      	bhi.n	80054da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <prvAddNewTaskToReadyList+0xbc>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054da:	4b1d      	ldr	r3, [pc, #116]	@ (8005550 <prvAddNewTaskToReadyList+0xc4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3301      	adds	r3, #1
 80054e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005550 <prvAddNewTaskToReadyList+0xc4>)
 80054e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	2201      	movs	r2, #1
 80054ea:	409a      	lsls	r2, r3
 80054ec:	4b19      	ldr	r3, [pc, #100]	@ (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	4a18      	ldr	r2, [pc, #96]	@ (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <prvAddNewTaskToReadyList+0xcc>)
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3304      	adds	r3, #4
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7ff f82e 	bl	800456e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005512:	f000 ffeb 	bl	80064ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005516:	4b0d      	ldr	r3, [pc, #52]	@ (800554c <prvAddNewTaskToReadyList+0xc0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00e      	beq.n	800553c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800551e:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <prvAddNewTaskToReadyList+0xbc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	429a      	cmp	r2, r3
 800552a:	d207      	bcs.n	800553c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800552c:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <prvAddNewTaskToReadyList+0xd0>)
 800552e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000520 	.word	0x20000520
 8005548:	20000420 	.word	0x20000420
 800554c:	2000052c 	.word	0x2000052c
 8005550:	2000053c 	.word	0x2000053c
 8005554:	20000528 	.word	0x20000528
 8005558:	20000424 	.word	0x20000424
 800555c:	e000ed04 	.word	0xe000ed04

08005560 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d018      	beq.n	80055a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005572:	4b14      	ldr	r3, [pc, #80]	@ (80055c4 <vTaskDelay+0x64>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <vTaskDelay+0x32>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	60bb      	str	r3, [r7, #8]
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005592:	f000 f87d 	bl	8005690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005596:	2100      	movs	r1, #0
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fde1 	bl	8006160 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800559e:	f000 f885 	bl	80056ac <xTaskResumeAll>
 80055a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d107      	bne.n	80055ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80055aa:	4b07      	ldr	r3, [pc, #28]	@ (80055c8 <vTaskDelay+0x68>)
 80055ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000548 	.word	0x20000548
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	@ 0x28
 80055d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055da:	463a      	mov	r2, r7
 80055dc:	1d39      	adds	r1, r7, #4
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fa ffda 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	9202      	str	r2, [sp, #8]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	460a      	mov	r2, r1
 80055fa:	491f      	ldr	r1, [pc, #124]	@ (8005678 <vTaskStartScheduler+0xac>)
 80055fc:	481f      	ldr	r0, [pc, #124]	@ (800567c <vTaskStartScheduler+0xb0>)
 80055fe:	f7ff fe17 	bl	8005230 <xTaskCreateStatic>
 8005602:	4603      	mov	r3, r0
 8005604:	4a1e      	ldr	r2, [pc, #120]	@ (8005680 <vTaskStartScheduler+0xb4>)
 8005606:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005608:	4b1d      	ldr	r3, [pc, #116]	@ (8005680 <vTaskStartScheduler+0xb4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005610:	2301      	movs	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e001      	b.n	800561a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d116      	bne.n	800564e <vTaskStartScheduler+0x82>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	613b      	str	r3, [r7, #16]
}
 8005632:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005634:	4b13      	ldr	r3, [pc, #76]	@ (8005684 <vTaskStartScheduler+0xb8>)
 8005636:	f04f 32ff 	mov.w	r2, #4294967295
 800563a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800563c:	4b12      	ldr	r3, [pc, #72]	@ (8005688 <vTaskStartScheduler+0xbc>)
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005642:	4b12      	ldr	r3, [pc, #72]	@ (800568c <vTaskStartScheduler+0xc0>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005648:	f000 fe7a 	bl	8006340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800564c:	e00f      	b.n	800566e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d10b      	bne.n	800566e <vTaskStartScheduler+0xa2>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60fb      	str	r3, [r7, #12]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <vTaskStartScheduler+0x9e>
}
 800566e:	bf00      	nop
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	08007594 	.word	0x08007594
 800567c:	08005c35 	.word	0x08005c35
 8005680:	20000544 	.word	0x20000544
 8005684:	20000540 	.word	0x20000540
 8005688:	2000052c 	.word	0x2000052c
 800568c:	20000524 	.word	0x20000524

08005690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005694:	4b04      	ldr	r3, [pc, #16]	@ (80056a8 <vTaskSuspendAll+0x18>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	4a03      	ldr	r2, [pc, #12]	@ (80056a8 <vTaskSuspendAll+0x18>)
 800569c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800569e:	bf00      	nop
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20000548 	.word	0x20000548

080056ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056ba:	4b42      	ldr	r3, [pc, #264]	@ (80057c4 <xTaskResumeAll+0x118>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <xTaskResumeAll+0x2e>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	603b      	str	r3, [r7, #0]
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	e7fd      	b.n	80056d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056da:	f000 fed5 	bl	8006488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056de:	4b39      	ldr	r3, [pc, #228]	@ (80057c4 <xTaskResumeAll+0x118>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	4a37      	ldr	r2, [pc, #220]	@ (80057c4 <xTaskResumeAll+0x118>)
 80056e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056e8:	4b36      	ldr	r3, [pc, #216]	@ (80057c4 <xTaskResumeAll+0x118>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d161      	bne.n	80057b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056f0:	4b35      	ldr	r3, [pc, #212]	@ (80057c8 <xTaskResumeAll+0x11c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05d      	beq.n	80057b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056f8:	e02e      	b.n	8005758 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fa:	4b34      	ldr	r3, [pc, #208]	@ (80057cc <xTaskResumeAll+0x120>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3318      	adds	r3, #24
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe ff8e 	bl	8004628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3304      	adds	r3, #4
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe ff89 	bl	8004628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	2201      	movs	r2, #1
 800571c:	409a      	lsls	r2, r3
 800571e:	4b2c      	ldr	r3, [pc, #176]	@ (80057d0 <xTaskResumeAll+0x124>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	4a2a      	ldr	r2, [pc, #168]	@ (80057d0 <xTaskResumeAll+0x124>)
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4a27      	ldr	r2, [pc, #156]	@ (80057d4 <xTaskResumeAll+0x128>)
 8005736:	441a      	add	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f7fe ff15 	bl	800456e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	4b23      	ldr	r3, [pc, #140]	@ (80057d8 <xTaskResumeAll+0x12c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005752:	4b22      	ldr	r3, [pc, #136]	@ (80057dc <xTaskResumeAll+0x130>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005758:	4b1c      	ldr	r3, [pc, #112]	@ (80057cc <xTaskResumeAll+0x120>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1cc      	bne.n	80056fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005766:	f000 fb1b 	bl	8005da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800576a:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <xTaskResumeAll+0x134>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005776:	f000 f837 	bl	80057e8 <xTaskIncrementTick>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005780:	4b16      	ldr	r3, [pc, #88]	@ (80057dc <xTaskResumeAll+0x130>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3b01      	subs	r3, #1
 800578a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f1      	bne.n	8005776 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005792:	4b13      	ldr	r3, [pc, #76]	@ (80057e0 <xTaskResumeAll+0x134>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005798:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <xTaskResumeAll+0x130>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d009      	beq.n	80057b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057a4:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <xTaskResumeAll+0x138>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057b4:	f000 fe9a 	bl	80064ec <vPortExitCritical>

	return xAlreadyYielded;
 80057b8:	68bb      	ldr	r3, [r7, #8]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000548 	.word	0x20000548
 80057c8:	20000520 	.word	0x20000520
 80057cc:	200004e0 	.word	0x200004e0
 80057d0:	20000528 	.word	0x20000528
 80057d4:	20000424 	.word	0x20000424
 80057d8:	20000420 	.word	0x20000420
 80057dc:	20000534 	.word	0x20000534
 80057e0:	20000530 	.word	0x20000530
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005930 <xTaskIncrementTick+0x148>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 808f 	bne.w	800591a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005934 <xTaskIncrementTick+0x14c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005804:	4a4b      	ldr	r2, [pc, #300]	@ (8005934 <xTaskIncrementTick+0x14c>)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d121      	bne.n	8005854 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005810:	4b49      	ldr	r3, [pc, #292]	@ (8005938 <xTaskIncrementTick+0x150>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <xTaskIncrementTick+0x4a>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	603b      	str	r3, [r7, #0]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <xTaskIncrementTick+0x46>
 8005832:	4b41      	ldr	r3, [pc, #260]	@ (8005938 <xTaskIncrementTick+0x150>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	4b40      	ldr	r3, [pc, #256]	@ (800593c <xTaskIncrementTick+0x154>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a3e      	ldr	r2, [pc, #248]	@ (8005938 <xTaskIncrementTick+0x150>)
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	4a3e      	ldr	r2, [pc, #248]	@ (800593c <xTaskIncrementTick+0x154>)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	4b3e      	ldr	r3, [pc, #248]	@ (8005940 <xTaskIncrementTick+0x158>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3301      	adds	r3, #1
 800584c:	4a3c      	ldr	r2, [pc, #240]	@ (8005940 <xTaskIncrementTick+0x158>)
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	f000 faa6 	bl	8005da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005854:	4b3b      	ldr	r3, [pc, #236]	@ (8005944 <xTaskIncrementTick+0x15c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	429a      	cmp	r2, r3
 800585c:	d348      	bcc.n	80058f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800585e:	4b36      	ldr	r3, [pc, #216]	@ (8005938 <xTaskIncrementTick+0x150>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005868:	4b36      	ldr	r3, [pc, #216]	@ (8005944 <xTaskIncrementTick+0x15c>)
 800586a:	f04f 32ff 	mov.w	r2, #4294967295
 800586e:	601a      	str	r2, [r3, #0]
					break;
 8005870:	e03e      	b.n	80058f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005872:	4b31      	ldr	r3, [pc, #196]	@ (8005938 <xTaskIncrementTick+0x150>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	429a      	cmp	r2, r3
 8005888:	d203      	bcs.n	8005892 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800588a:	4a2e      	ldr	r2, [pc, #184]	@ (8005944 <xTaskIncrementTick+0x15c>)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005890:	e02e      	b.n	80058f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	3304      	adds	r3, #4
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fec6 	bl	8004628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	3318      	adds	r3, #24
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe febd 	bl	8004628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	2201      	movs	r2, #1
 80058b4:	409a      	lsls	r2, r3
 80058b6:	4b24      	ldr	r3, [pc, #144]	@ (8005948 <xTaskIncrementTick+0x160>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	4a22      	ldr	r2, [pc, #136]	@ (8005948 <xTaskIncrementTick+0x160>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4a1f      	ldr	r2, [pc, #124]	@ (800594c <xTaskIncrementTick+0x164>)
 80058ce:	441a      	add	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7fe fe49 	bl	800456e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005950 <xTaskIncrementTick+0x168>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d3b9      	bcc.n	800585e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ee:	e7b6      	b.n	800585e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058f0:	4b17      	ldr	r3, [pc, #92]	@ (8005950 <xTaskIncrementTick+0x168>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f6:	4915      	ldr	r1, [pc, #84]	@ (800594c <xTaskIncrementTick+0x164>)
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d901      	bls.n	800590c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800590c:	4b11      	ldr	r3, [pc, #68]	@ (8005954 <xTaskIncrementTick+0x16c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e004      	b.n	8005924 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <xTaskIncrementTick+0x170>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3301      	adds	r3, #1
 8005920:	4a0d      	ldr	r2, [pc, #52]	@ (8005958 <xTaskIncrementTick+0x170>)
 8005922:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005924:	697b      	ldr	r3, [r7, #20]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000548 	.word	0x20000548
 8005934:	20000524 	.word	0x20000524
 8005938:	200004d8 	.word	0x200004d8
 800593c:	200004dc 	.word	0x200004dc
 8005940:	20000538 	.word	0x20000538
 8005944:	20000540 	.word	0x20000540
 8005948:	20000528 	.word	0x20000528
 800594c:	20000424 	.word	0x20000424
 8005950:	20000420 	.word	0x20000420
 8005954:	20000534 	.word	0x20000534
 8005958:	20000530 	.word	0x20000530

0800595c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005962:	4b27      	ldr	r3, [pc, #156]	@ (8005a00 <vTaskSwitchContext+0xa4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800596a:	4b26      	ldr	r3, [pc, #152]	@ (8005a04 <vTaskSwitchContext+0xa8>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005970:	e040      	b.n	80059f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005972:	4b24      	ldr	r3, [pc, #144]	@ (8005a04 <vTaskSwitchContext+0xa8>)
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005978:	4b23      	ldr	r3, [pc, #140]	@ (8005a08 <vTaskSwitchContext+0xac>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	fab3 f383 	clz	r3, r3
 8005984:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005986:	7afb      	ldrb	r3, [r7, #11]
 8005988:	f1c3 031f 	rsb	r3, r3, #31
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	491f      	ldr	r1, [pc, #124]	@ (8005a0c <vTaskSwitchContext+0xb0>)
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	607b      	str	r3, [r7, #4]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <vTaskSwitchContext+0x5a>
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4a11      	ldr	r2, [pc, #68]	@ (8005a0c <vTaskSwitchContext+0xb0>)
 80059c6:	4413      	add	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	605a      	str	r2, [r3, #4]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	3308      	adds	r3, #8
 80059dc:	429a      	cmp	r2, r3
 80059de:	d104      	bne.n	80059ea <vTaskSwitchContext+0x8e>
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	605a      	str	r2, [r3, #4]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4a07      	ldr	r2, [pc, #28]	@ (8005a10 <vTaskSwitchContext+0xb4>)
 80059f2:	6013      	str	r3, [r2, #0]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	20000548 	.word	0x20000548
 8005a04:	20000534 	.word	0x20000534
 8005a08:	20000528 	.word	0x20000528
 8005a0c:	20000424 	.word	0x20000424
 8005a10:	20000420 	.word	0x20000420

08005a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10b      	bne.n	8005a3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	60fb      	str	r3, [r7, #12]
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a3c:	4b07      	ldr	r3, [pc, #28]	@ (8005a5c <vTaskPlaceOnEventList+0x48>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3318      	adds	r3, #24
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fe fdb6 	bl	80045b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	6838      	ldr	r0, [r7, #0]
 8005a4e:	f000 fb87 	bl	8006160 <prvAddCurrentTaskToDelayedList>
}
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000420 	.word	0x20000420

08005a60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60fb      	str	r3, [r7, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	3318      	adds	r3, #24
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe fdc8 	bl	8004628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a98:	4b1d      	ldr	r3, [pc, #116]	@ (8005b10 <xTaskRemoveFromEventList+0xb0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d11c      	bne.n	8005ada <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fe fdbf 	bl	8004628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	2201      	movs	r2, #1
 8005ab0:	409a      	lsls	r2, r3
 8005ab2:	4b18      	ldr	r3, [pc, #96]	@ (8005b14 <xTaskRemoveFromEventList+0xb4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	4a16      	ldr	r2, [pc, #88]	@ (8005b14 <xTaskRemoveFromEventList+0xb4>)
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4a13      	ldr	r2, [pc, #76]	@ (8005b18 <xTaskRemoveFromEventList+0xb8>)
 8005aca:	441a      	add	r2, r3
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f7fe fd4b 	bl	800456e <vListInsertEnd>
 8005ad8:	e005      	b.n	8005ae6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3318      	adds	r3, #24
 8005ade:	4619      	mov	r1, r3
 8005ae0:	480e      	ldr	r0, [pc, #56]	@ (8005b1c <xTaskRemoveFromEventList+0xbc>)
 8005ae2:	f7fe fd44 	bl	800456e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aea:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <xTaskRemoveFromEventList+0xc0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d905      	bls.n	8005b00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005af8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b24 <xTaskRemoveFromEventList+0xc4>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e001      	b.n	8005b04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b04:	697b      	ldr	r3, [r7, #20]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000548 	.word	0x20000548
 8005b14:	20000528 	.word	0x20000528
 8005b18:	20000424 	.word	0x20000424
 8005b1c:	200004e0 	.word	0x200004e0
 8005b20:	20000420 	.word	0x20000420
 8005b24:	20000534 	.word	0x20000534

08005b28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b30:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <vTaskInternalSetTimeOutState+0x24>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b38:	4b05      	ldr	r3, [pc, #20]	@ (8005b50 <vTaskInternalSetTimeOutState+0x28>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	605a      	str	r2, [r3, #4]
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	20000538 	.word	0x20000538
 8005b50:	20000524 	.word	0x20000524

08005b54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	613b      	str	r3, [r7, #16]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	60fb      	str	r3, [r7, #12]
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005b9a:	f000 fc75 	bl	8006488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c14 <xTaskCheckForTimeOut+0xc0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d102      	bne.n	8005bbe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61fb      	str	r3, [r7, #28]
 8005bbc:	e023      	b.n	8005c06 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b15      	ldr	r3, [pc, #84]	@ (8005c18 <xTaskCheckForTimeOut+0xc4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d007      	beq.n	8005bda <xTaskCheckForTimeOut+0x86>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d302      	bcc.n	8005bda <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e015      	b.n	8005c06 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d20b      	bcs.n	8005bfc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1ad2      	subs	r2, r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ff99 	bl	8005b28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e004      	b.n	8005c06 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c02:	2301      	movs	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c06:	f000 fc71 	bl	80064ec <vPortExitCritical>

	return xReturn;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20000524 	.word	0x20000524
 8005c18:	20000538 	.word	0x20000538

08005c1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c20:	4b03      	ldr	r3, [pc, #12]	@ (8005c30 <vTaskMissedYield+0x14>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	20000534 	.word	0x20000534

08005c34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c3c:	f000 f852 	bl	8005ce4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c40:	4b06      	ldr	r3, [pc, #24]	@ (8005c5c <prvIdleTask+0x28>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d9f9      	bls.n	8005c3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c48:	4b05      	ldr	r3, [pc, #20]	@ (8005c60 <prvIdleTask+0x2c>)
 8005c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c58:	e7f0      	b.n	8005c3c <prvIdleTask+0x8>
 8005c5a:	bf00      	nop
 8005c5c:	20000424 	.word	0x20000424
 8005c60:	e000ed04 	.word	0xe000ed04

08005c64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	e00c      	b.n	8005c8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4a12      	ldr	r2, [pc, #72]	@ (8005cc4 <prvInitialiseTaskLists+0x60>)
 8005c7c:	4413      	add	r3, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fc48 	bl	8004514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3301      	adds	r3, #1
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d9ef      	bls.n	8005c70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c90:	480d      	ldr	r0, [pc, #52]	@ (8005cc8 <prvInitialiseTaskLists+0x64>)
 8005c92:	f7fe fc3f 	bl	8004514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c96:	480d      	ldr	r0, [pc, #52]	@ (8005ccc <prvInitialiseTaskLists+0x68>)
 8005c98:	f7fe fc3c 	bl	8004514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c9c:	480c      	ldr	r0, [pc, #48]	@ (8005cd0 <prvInitialiseTaskLists+0x6c>)
 8005c9e:	f7fe fc39 	bl	8004514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ca2:	480c      	ldr	r0, [pc, #48]	@ (8005cd4 <prvInitialiseTaskLists+0x70>)
 8005ca4:	f7fe fc36 	bl	8004514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ca8:	480b      	ldr	r0, [pc, #44]	@ (8005cd8 <prvInitialiseTaskLists+0x74>)
 8005caa:	f7fe fc33 	bl	8004514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cae:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <prvInitialiseTaskLists+0x78>)
 8005cb0:	4a05      	ldr	r2, [pc, #20]	@ (8005cc8 <prvInitialiseTaskLists+0x64>)
 8005cb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <prvInitialiseTaskLists+0x7c>)
 8005cb6:	4a05      	ldr	r2, [pc, #20]	@ (8005ccc <prvInitialiseTaskLists+0x68>)
 8005cb8:	601a      	str	r2, [r3, #0]
}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000424 	.word	0x20000424
 8005cc8:	200004b0 	.word	0x200004b0
 8005ccc:	200004c4 	.word	0x200004c4
 8005cd0:	200004e0 	.word	0x200004e0
 8005cd4:	200004f4 	.word	0x200004f4
 8005cd8:	2000050c 	.word	0x2000050c
 8005cdc:	200004d8 	.word	0x200004d8
 8005ce0:	200004dc 	.word	0x200004dc

08005ce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cea:	e019      	b.n	8005d20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cec:	f000 fbcc 	bl	8006488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf0:	4b10      	ldr	r3, [pc, #64]	@ (8005d34 <prvCheckTasksWaitingTermination+0x50>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe fc93 	bl	8004628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <prvCheckTasksWaitingTermination+0x54>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	4a0b      	ldr	r2, [pc, #44]	@ (8005d38 <prvCheckTasksWaitingTermination+0x54>)
 8005d0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d3c <prvCheckTasksWaitingTermination+0x58>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	4a0a      	ldr	r2, [pc, #40]	@ (8005d3c <prvCheckTasksWaitingTermination+0x58>)
 8005d14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d16:	f000 fbe9 	bl	80064ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f810 	bl	8005d40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <prvCheckTasksWaitingTermination+0x58>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e1      	bne.n	8005cec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200004f4 	.word	0x200004f4
 8005d38:	20000520 	.word	0x20000520
 8005d3c:	20000508 	.word	0x20000508

08005d40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d108      	bne.n	8005d64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fd86 	bl	8006868 <vPortFree>
				vPortFree( pxTCB );
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fd83 	bl	8006868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d62:	e019      	b.n	8005d98 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d103      	bne.n	8005d76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fd7a 	bl	8006868 <vPortFree>
	}
 8005d74:	e010      	b.n	8005d98 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d00b      	beq.n	8005d98 <prvDeleteTCB+0x58>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <prvDeleteTCB+0x54>
	}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da6:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd8 <prvResetNextTaskUnblockTime+0x38>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005db0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <prvResetNextTaskUnblockTime+0x3c>)
 8005db2:	f04f 32ff 	mov.w	r2, #4294967295
 8005db6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005db8:	e008      	b.n	8005dcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dba:	4b07      	ldr	r3, [pc, #28]	@ (8005dd8 <prvResetNextTaskUnblockTime+0x38>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4a04      	ldr	r2, [pc, #16]	@ (8005ddc <prvResetNextTaskUnblockTime+0x3c>)
 8005dca:	6013      	str	r3, [r2, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	200004d8 	.word	0x200004d8
 8005ddc:	20000540 	.word	0x20000540

08005de0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005de6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <xTaskGetSchedulerState+0x34>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dee:	2301      	movs	r3, #1
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	e008      	b.n	8005e06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005df4:	4b08      	ldr	r3, [pc, #32]	@ (8005e18 <xTaskGetSchedulerState+0x38>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	e001      	b.n	8005e06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e02:	2300      	movs	r3, #0
 8005e04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e06:	687b      	ldr	r3, [r7, #4]
	}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	2000052c 	.word	0x2000052c
 8005e18:	20000548 	.word	0x20000548

08005e1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d05e      	beq.n	8005ef0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e36:	4b31      	ldr	r3, [pc, #196]	@ (8005efc <xTaskPriorityInherit+0xe0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d24e      	bcs.n	8005ede <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	db06      	blt.n	8005e56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e48:	4b2c      	ldr	r3, [pc, #176]	@ (8005efc <xTaskPriorityInherit+0xe0>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4e:	f1c3 0207 	rsb	r2, r3, #7
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6959      	ldr	r1, [r3, #20]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4a26      	ldr	r2, [pc, #152]	@ (8005f00 <xTaskPriorityInherit+0xe4>)
 8005e68:	4413      	add	r3, r2
 8005e6a:	4299      	cmp	r1, r3
 8005e6c:	d12f      	bne.n	8005ece <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fbd8 	bl	8004628 <uxListRemove>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e82:	2201      	movs	r2, #1
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	43da      	mvns	r2, r3
 8005e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005f04 <xTaskPriorityInherit+0xe8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	4a1c      	ldr	r2, [pc, #112]	@ (8005f04 <xTaskPriorityInherit+0xe8>)
 8005e92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e94:	4b19      	ldr	r3, [pc, #100]	@ (8005efc <xTaskPriorityInherit+0xe0>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	409a      	lsls	r2, r3
 8005ea6:	4b17      	ldr	r3, [pc, #92]	@ (8005f04 <xTaskPriorityInherit+0xe8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	4a15      	ldr	r2, [pc, #84]	@ (8005f04 <xTaskPriorityInherit+0xe8>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4a10      	ldr	r2, [pc, #64]	@ (8005f00 <xTaskPriorityInherit+0xe4>)
 8005ebe:	441a      	add	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f7fe fb51 	bl	800456e <vListInsertEnd>
 8005ecc:	e004      	b.n	8005ed8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ece:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <xTaskPriorityInherit+0xe0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	e008      	b.n	8005ef0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ee2:	4b06      	ldr	r3, [pc, #24]	@ (8005efc <xTaskPriorityInherit+0xe0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d201      	bcs.n	8005ef0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005eec:	2301      	movs	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
	}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000420 	.word	0x20000420
 8005f00:	20000424 	.word	0x20000424
 8005f04:	20000528 	.word	0x20000528

08005f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d070      	beq.n	8006000 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800600c <xTaskPriorityDisinherit+0x104>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d00b      	beq.n	8005f40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	60fb      	str	r3, [r7, #12]
}
 8005f3a:	bf00      	nop
 8005f3c:	bf00      	nop
 8005f3e:	e7fd      	b.n	8005f3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	60bb      	str	r3, [r7, #8]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f64:	1e5a      	subs	r2, r3, #1
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d044      	beq.n	8006000 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d140      	bne.n	8006000 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe fb50 	bl	8004628 <uxListRemove>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d115      	bne.n	8005fba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f92:	491f      	ldr	r1, [pc, #124]	@ (8006010 <xTaskPriorityDisinherit+0x108>)
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xTaskPriorityDisinherit+0xb2>
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa8:	2201      	movs	r2, #1
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43da      	mvns	r2, r3
 8005fb0:	4b18      	ldr	r3, [pc, #96]	@ (8006014 <xTaskPriorityDisinherit+0x10c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	4a17      	ldr	r2, [pc, #92]	@ (8006014 <xTaskPriorityDisinherit+0x10c>)
 8005fb8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	f1c3 0207 	rsb	r2, r3, #7
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006014 <xTaskPriorityDisinherit+0x10c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8006014 <xTaskPriorityDisinherit+0x10c>)
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4a08      	ldr	r2, [pc, #32]	@ (8006010 <xTaskPriorityDisinherit+0x108>)
 8005fee:	441a      	add	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f7fe fab9 	bl	800456e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006000:	697b      	ldr	r3, [r7, #20]
	}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000420 	.word	0x20000420
 8006010:	20000424 	.word	0x20000424
 8006014:	20000528 	.word	0x20000528

08006018 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006026:	2301      	movs	r3, #1
 8006028:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d079      	beq.n	8006124 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	60fb      	str	r3, [r7, #12]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d902      	bls.n	8006060 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	e002      	b.n	8006066 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006064:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	429a      	cmp	r2, r3
 800606e:	d059      	beq.n	8006124 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	429a      	cmp	r2, r3
 8006078:	d154      	bne.n	8006124 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800607a:	4b2c      	ldr	r3, [pc, #176]	@ (800612c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	429a      	cmp	r2, r3
 8006082:	d10b      	bne.n	800609c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60bb      	str	r3, [r7, #8]
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	e7fd      	b.n	8006098 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	db04      	blt.n	80060ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f1c3 0207 	rsb	r2, r3, #7
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	6959      	ldr	r1, [r3, #20]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4a19      	ldr	r2, [pc, #100]	@ (8006130 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060ca:	4413      	add	r3, r2
 80060cc:	4299      	cmp	r1, r3
 80060ce:	d129      	bne.n	8006124 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe faa7 	bl	8004628 <uxListRemove>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	2201      	movs	r2, #1
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43da      	mvns	r2, r3
 80060ec:	4b11      	ldr	r3, [pc, #68]	@ (8006134 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4013      	ands	r3, r2
 80060f2:	4a10      	ldr	r2, [pc, #64]	@ (8006134 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80060f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fa:	2201      	movs	r2, #1
 80060fc:	409a      	lsls	r2, r3
 80060fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4313      	orrs	r3, r2
 8006104:	4a0b      	ldr	r2, [pc, #44]	@ (8006134 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4a06      	ldr	r2, [pc, #24]	@ (8006130 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006116:	441a      	add	r2, r3
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f7fe fa25 	bl	800456e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006124:	bf00      	nop
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000420 	.word	0x20000420
 8006130:	20000424 	.word	0x20000424
 8006134:	20000528 	.word	0x20000528

08006138 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800613c:	4b07      	ldr	r3, [pc, #28]	@ (800615c <pvTaskIncrementMutexHeldCount+0x24>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006144:	4b05      	ldr	r3, [pc, #20]	@ (800615c <pvTaskIncrementMutexHeldCount+0x24>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800614a:	3201      	adds	r2, #1
 800614c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800614e:	4b03      	ldr	r3, [pc, #12]	@ (800615c <pvTaskIncrementMutexHeldCount+0x24>)
 8006150:	681b      	ldr	r3, [r3, #0]
	}
 8006152:	4618      	mov	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	20000420 	.word	0x20000420

08006160 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800616a:	4b29      	ldr	r3, [pc, #164]	@ (8006210 <prvAddCurrentTaskToDelayedList+0xb0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006170:	4b28      	ldr	r3, [pc, #160]	@ (8006214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3304      	adds	r3, #4
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fa56 	bl	8004628 <uxListRemove>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006182:	4b24      	ldr	r3, [pc, #144]	@ (8006214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006188:	2201      	movs	r2, #1
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43da      	mvns	r2, r3
 8006190:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4013      	ands	r3, r2
 8006196:	4a20      	ldr	r2, [pc, #128]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006198:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d10a      	bne.n	80061b8 <prvAddCurrentTaskToDelayedList+0x58>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	481a      	ldr	r0, [pc, #104]	@ (800621c <prvAddCurrentTaskToDelayedList+0xbc>)
 80061b2:	f7fe f9dc 	bl	800456e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061b6:	e026      	b.n	8006206 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061c0:	4b14      	ldr	r3, [pc, #80]	@ (8006214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d209      	bcs.n	80061e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061d0:	4b13      	ldr	r3, [pc, #76]	@ (8006220 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3304      	adds	r3, #4
 80061da:	4619      	mov	r1, r3
 80061dc:	4610      	mov	r0, r2
 80061de:	f7fe f9ea 	bl	80045b6 <vListInsert>
}
 80061e2:	e010      	b.n	8006206 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006224 <prvAddCurrentTaskToDelayedList+0xc4>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f7fe f9e0 	bl	80045b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d202      	bcs.n	8006206 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006200:	4a09      	ldr	r2, [pc, #36]	@ (8006228 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6013      	str	r3, [r2, #0]
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000524 	.word	0x20000524
 8006214:	20000420 	.word	0x20000420
 8006218:	20000528 	.word	0x20000528
 800621c:	2000050c 	.word	0x2000050c
 8006220:	200004dc 	.word	0x200004dc
 8006224:	200004d8 	.word	0x200004d8
 8006228:	20000540 	.word	0x20000540

0800622c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b04      	subs	r3, #4
 800623c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3b04      	subs	r3, #4
 800624a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f023 0201 	bic.w	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3b04      	subs	r3, #4
 800625a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800625c:	4a0c      	ldr	r2, [pc, #48]	@ (8006290 <pxPortInitialiseStack+0x64>)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3b14      	subs	r3, #20
 8006266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3b04      	subs	r3, #4
 8006272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f06f 0202 	mvn.w	r2, #2
 800627a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3b20      	subs	r3, #32
 8006280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006282:	68fb      	ldr	r3, [r7, #12]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	08006295 	.word	0x08006295

08006294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800629e:	4b13      	ldr	r3, [pc, #76]	@ (80062ec <prvTaskExitError+0x58>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d00b      	beq.n	80062c0 <prvTaskExitError+0x2c>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	e7fd      	b.n	80062bc <prvTaskExitError+0x28>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	60bb      	str	r3, [r7, #8]
}
 80062d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062d4:	bf00      	nop
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0fc      	beq.n	80062d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	20000090 	.word	0x20000090

080062f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062f0:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <pxCurrentTCBConst2>)
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	6808      	ldr	r0, [r1, #0]
 80062f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	f380 8809 	msr	PSP, r0
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8811 	msr	BASEPRI, r0
 800630a:	4770      	bx	lr
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst2>:
 8006310:	20000420 	.word	0x20000420
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006318:	4808      	ldr	r0, [pc, #32]	@ (800633c <prvPortStartFirstTask+0x24>)
 800631a:	6800      	ldr	r0, [r0, #0]
 800631c:	6800      	ldr	r0, [r0, #0]
 800631e:	f380 8808 	msr	MSP, r0
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8814 	msr	CONTROL, r0
 800632a:	b662      	cpsie	i
 800632c:	b661      	cpsie	f
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	df00      	svc	0
 8006338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800633a:	bf00      	nop
 800633c:	e000ed08 	.word	0xe000ed08

08006340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006346:	4b47      	ldr	r3, [pc, #284]	@ (8006464 <xPortStartScheduler+0x124>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a47      	ldr	r2, [pc, #284]	@ (8006468 <xPortStartScheduler+0x128>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10b      	bne.n	8006368 <xPortStartScheduler+0x28>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	60fb      	str	r3, [r7, #12]
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006368:	4b3e      	ldr	r3, [pc, #248]	@ (8006464 <xPortStartScheduler+0x124>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3f      	ldr	r2, [pc, #252]	@ (800646c <xPortStartScheduler+0x12c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d10b      	bne.n	800638a <xPortStartScheduler+0x4a>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	613b      	str	r3, [r7, #16]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800638a:	4b39      	ldr	r3, [pc, #228]	@ (8006470 <xPortStartScheduler+0x130>)
 800638c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	22ff      	movs	r2, #255	@ 0xff
 800639a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	4b31      	ldr	r3, [pc, #196]	@ (8006474 <xPortStartScheduler+0x134>)
 80063b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063b2:	4b31      	ldr	r3, [pc, #196]	@ (8006478 <xPortStartScheduler+0x138>)
 80063b4:	2207      	movs	r2, #7
 80063b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063b8:	e009      	b.n	80063ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80063ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006478 <xPortStartScheduler+0x138>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3b01      	subs	r3, #1
 80063c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006478 <xPortStartScheduler+0x138>)
 80063c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d6:	2b80      	cmp	r3, #128	@ 0x80
 80063d8:	d0ef      	beq.n	80063ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063da:	4b27      	ldr	r3, [pc, #156]	@ (8006478 <xPortStartScheduler+0x138>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f1c3 0307 	rsb	r3, r3, #7
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d00b      	beq.n	80063fe <xPortStartScheduler+0xbe>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60bb      	str	r3, [r7, #8]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006478 <xPortStartScheduler+0x138>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	4a1c      	ldr	r2, [pc, #112]	@ (8006478 <xPortStartScheduler+0x138>)
 8006406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006408:	4b1b      	ldr	r3, [pc, #108]	@ (8006478 <xPortStartScheduler+0x138>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006410:	4a19      	ldr	r2, [pc, #100]	@ (8006478 <xPortStartScheduler+0x138>)
 8006412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800641c:	4b17      	ldr	r3, [pc, #92]	@ (800647c <xPortStartScheduler+0x13c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a16      	ldr	r2, [pc, #88]	@ (800647c <xPortStartScheduler+0x13c>)
 8006422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006428:	4b14      	ldr	r3, [pc, #80]	@ (800647c <xPortStartScheduler+0x13c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a13      	ldr	r2, [pc, #76]	@ (800647c <xPortStartScheduler+0x13c>)
 800642e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006434:	f000 f8da 	bl	80065ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006438:	4b11      	ldr	r3, [pc, #68]	@ (8006480 <xPortStartScheduler+0x140>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800643e:	f000 f8f9 	bl	8006634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <xPortStartScheduler+0x144>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a0f      	ldr	r2, [pc, #60]	@ (8006484 <xPortStartScheduler+0x144>)
 8006448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800644c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800644e:	f7ff ff63 	bl	8006318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006452:	f7ff fa83 	bl	800595c <vTaskSwitchContext>
	prvTaskExitError();
 8006456:	f7ff ff1d 	bl	8006294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	e000ed00 	.word	0xe000ed00
 8006468:	410fc271 	.word	0x410fc271
 800646c:	410fc270 	.word	0x410fc270
 8006470:	e000e400 	.word	0xe000e400
 8006474:	2000054c 	.word	0x2000054c
 8006478:	20000550 	.word	0x20000550
 800647c:	e000ed20 	.word	0xe000ed20
 8006480:	20000090 	.word	0x20000090
 8006484:	e000ef34 	.word	0xe000ef34

08006488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	607b      	str	r3, [r7, #4]
}
 80064a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064a2:	4b10      	ldr	r3, [pc, #64]	@ (80064e4 <vPortEnterCritical+0x5c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	4a0e      	ldr	r2, [pc, #56]	@ (80064e4 <vPortEnterCritical+0x5c>)
 80064aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064ac:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <vPortEnterCritical+0x5c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d110      	bne.n	80064d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064b4:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <vPortEnterCritical+0x60>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	603b      	str	r3, [r7, #0]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <vPortEnterCritical+0x4a>
	}
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20000090 	.word	0x20000090
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064f2:	4b12      	ldr	r3, [pc, #72]	@ (800653c <vPortExitCritical+0x50>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <vPortExitCritical+0x26>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	607b      	str	r3, [r7, #4]
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	e7fd      	b.n	800650e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006512:	4b0a      	ldr	r3, [pc, #40]	@ (800653c <vPortExitCritical+0x50>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3b01      	subs	r3, #1
 8006518:	4a08      	ldr	r2, [pc, #32]	@ (800653c <vPortExitCritical+0x50>)
 800651a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800651c:	4b07      	ldr	r3, [pc, #28]	@ (800653c <vPortExitCritical+0x50>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <vPortExitCritical+0x44>
 8006524:	2300      	movs	r3, #0
 8006526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f383 8811 	msr	BASEPRI, r3
}
 800652e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	20000090 	.word	0x20000090

08006540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006540:	f3ef 8009 	mrs	r0, PSP
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4b15      	ldr	r3, [pc, #84]	@ (80065a0 <pxCurrentTCBConst>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	f01e 0f10 	tst.w	lr, #16
 8006550:	bf08      	it	eq
 8006552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	6010      	str	r0, [r2, #0]
 800655c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006564:	f380 8811 	msr	BASEPRI, r0
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f7ff f9f4 	bl	800595c <vTaskSwitchContext>
 8006574:	f04f 0000 	mov.w	r0, #0
 8006578:	f380 8811 	msr	BASEPRI, r0
 800657c:	bc09      	pop	{r0, r3}
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	6808      	ldr	r0, [r1, #0]
 8006582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006586:	f01e 0f10 	tst.w	lr, #16
 800658a:	bf08      	it	eq
 800658c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006590:	f380 8809 	msr	PSP, r0
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	f3af 8000 	nop.w

080065a0 <pxCurrentTCBConst>:
 80065a0:	20000420 	.word	0x20000420
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	607b      	str	r3, [r7, #4]
}
 80065c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065c2:	f7ff f911 	bl	80057e8 <xTaskIncrementTick>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065cc:	4b06      	ldr	r3, [pc, #24]	@ (80065e8 <xPortSysTickHandler+0x40>)
 80065ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	f383 8811 	msr	BASEPRI, r3
}
 80065de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <vPortSetupTimerInterrupt+0x34>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <vPortSetupTimerInterrupt+0x38>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006628 <vPortSetupTimerInterrupt+0x3c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0a      	ldr	r2, [pc, #40]	@ (800662c <vPortSetupTimerInterrupt+0x40>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	099b      	lsrs	r3, r3, #6
 8006608:	4a09      	ldr	r2, [pc, #36]	@ (8006630 <vPortSetupTimerInterrupt+0x44>)
 800660a:	3b01      	subs	r3, #1
 800660c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800660e:	4b04      	ldr	r3, [pc, #16]	@ (8006620 <vPortSetupTimerInterrupt+0x34>)
 8006610:	2207      	movs	r2, #7
 8006612:	601a      	str	r2, [r3, #0]
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	e000e010 	.word	0xe000e010
 8006624:	e000e018 	.word	0xe000e018
 8006628:	20000064 	.word	0x20000064
 800662c:	10624dd3 	.word	0x10624dd3
 8006630:	e000e014 	.word	0xe000e014

08006634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006644 <vPortEnableVFP+0x10>
 8006638:	6801      	ldr	r1, [r0, #0]
 800663a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800663e:	6001      	str	r1, [r0, #0]
 8006640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006642:	bf00      	nop
 8006644:	e000ed88 	.word	0xe000ed88

08006648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800664e:	f3ef 8305 	mrs	r3, IPSR
 8006652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d915      	bls.n	8006686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800665a:	4a18      	ldr	r2, [pc, #96]	@ (80066bc <vPortValidateInterruptPriority+0x74>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006664:	4b16      	ldr	r3, [pc, #88]	@ (80066c0 <vPortValidateInterruptPriority+0x78>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	7afa      	ldrb	r2, [r7, #11]
 800666a:	429a      	cmp	r2, r3
 800666c:	d20b      	bcs.n	8006686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	607b      	str	r3, [r7, #4]
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	e7fd      	b.n	8006682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006686:	4b0f      	ldr	r3, [pc, #60]	@ (80066c4 <vPortValidateInterruptPriority+0x7c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800668e:	4b0e      	ldr	r3, [pc, #56]	@ (80066c8 <vPortValidateInterruptPriority+0x80>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d90b      	bls.n	80066ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	603b      	str	r3, [r7, #0]
}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	e7fd      	b.n	80066aa <vPortValidateInterruptPriority+0x62>
	}
 80066ae:	bf00      	nop
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	e000e3f0 	.word	0xe000e3f0
 80066c0:	2000054c 	.word	0x2000054c
 80066c4:	e000ed0c 	.word	0xe000ed0c
 80066c8:	20000550 	.word	0x20000550

080066cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	@ 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066d8:	f7fe ffda 	bl	8005690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006850 <pvPortMalloc+0x184>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066e4:	f000 f924 	bl	8006930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006854 <pvPortMalloc+0x188>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f040 8095 	bne.w	8006820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01e      	beq.n	800673a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80066fc:	2208      	movs	r2, #8
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b00      	cmp	r3, #0
 800670c:	d015      	beq.n	800673a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f023 0307 	bic.w	r3, r3, #7
 8006714:	3308      	adds	r3, #8
 8006716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00b      	beq.n	800673a <pvPortMalloc+0x6e>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	617b      	str	r3, [r7, #20]
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	e7fd      	b.n	8006736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d06f      	beq.n	8006820 <pvPortMalloc+0x154>
 8006740:	4b45      	ldr	r3, [pc, #276]	@ (8006858 <pvPortMalloc+0x18c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	429a      	cmp	r2, r3
 8006748:	d86a      	bhi.n	8006820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800674a:	4b44      	ldr	r3, [pc, #272]	@ (800685c <pvPortMalloc+0x190>)
 800674c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800674e:	4b43      	ldr	r3, [pc, #268]	@ (800685c <pvPortMalloc+0x190>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006754:	e004      	b.n	8006760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d903      	bls.n	8006772 <pvPortMalloc+0xa6>
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f1      	bne.n	8006756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006772:	4b37      	ldr	r3, [pc, #220]	@ (8006850 <pvPortMalloc+0x184>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006778:	429a      	cmp	r2, r3
 800677a:	d051      	beq.n	8006820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2208      	movs	r2, #8
 8006782:	4413      	add	r3, r2
 8006784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	1ad2      	subs	r2, r2, r3
 8006796:	2308      	movs	r3, #8
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	429a      	cmp	r2, r3
 800679c:	d920      	bls.n	80067e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800679e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <pvPortMalloc+0xfc>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	613b      	str	r3, [r7, #16]
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067da:	69b8      	ldr	r0, [r7, #24]
 80067dc:	f000 f90a 	bl	80069f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006858 <pvPortMalloc+0x18c>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006858 <pvPortMalloc+0x18c>)
 80067ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006858 <pvPortMalloc+0x18c>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006860 <pvPortMalloc+0x194>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d203      	bcs.n	8006802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067fa:	4b17      	ldr	r3, [pc, #92]	@ (8006858 <pvPortMalloc+0x18c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a18      	ldr	r2, [pc, #96]	@ (8006860 <pvPortMalloc+0x194>)
 8006800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <pvPortMalloc+0x188>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	431a      	orrs	r2, r3
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006816:	4b13      	ldr	r3, [pc, #76]	@ (8006864 <pvPortMalloc+0x198>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	4a11      	ldr	r2, [pc, #68]	@ (8006864 <pvPortMalloc+0x198>)
 800681e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006820:	f7fe ff44 	bl	80056ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00b      	beq.n	8006846 <pvPortMalloc+0x17a>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60fb      	str	r3, [r7, #12]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <pvPortMalloc+0x176>
	return pvReturn;
 8006846:	69fb      	ldr	r3, [r7, #28]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3728      	adds	r7, #40	@ 0x28
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	2000415c 	.word	0x2000415c
 8006854:	20004170 	.word	0x20004170
 8006858:	20004160 	.word	0x20004160
 800685c:	20004154 	.word	0x20004154
 8006860:	20004164 	.word	0x20004164
 8006864:	20004168 	.word	0x20004168

08006868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04f      	beq.n	800691a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800687a:	2308      	movs	r3, #8
 800687c:	425b      	negs	r3, r3
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	4b25      	ldr	r3, [pc, #148]	@ (8006924 <vPortFree+0xbc>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4013      	ands	r3, r2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10b      	bne.n	80068ae <vPortFree+0x46>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60fb      	str	r3, [r7, #12]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <vPortFree+0x66>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60bb      	str	r3, [r7, #8]
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	e7fd      	b.n	80068ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	4b14      	ldr	r3, [pc, #80]	@ (8006924 <vPortFree+0xbc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01e      	beq.n	800691a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d11a      	bne.n	800691a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006924 <vPortFree+0xbc>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	43db      	mvns	r3, r3
 80068ee:	401a      	ands	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068f4:	f7fe fecc 	bl	8005690 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <vPortFree+0xc0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4413      	add	r3, r2
 8006902:	4a09      	ldr	r2, [pc, #36]	@ (8006928 <vPortFree+0xc0>)
 8006904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f000 f874 	bl	80069f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800690c:	4b07      	ldr	r3, [pc, #28]	@ (800692c <vPortFree+0xc4>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	4a06      	ldr	r2, [pc, #24]	@ (800692c <vPortFree+0xc4>)
 8006914:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006916:	f7fe fec9 	bl	80056ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800691a:	bf00      	nop
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20004170 	.word	0x20004170
 8006928:	20004160 	.word	0x20004160
 800692c:	2000416c 	.word	0x2000416c

08006930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006936:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800693a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800693c:	4b27      	ldr	r3, [pc, #156]	@ (80069dc <prvHeapInit+0xac>)
 800693e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3307      	adds	r3, #7
 800694e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0307 	bic.w	r3, r3, #7
 8006956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	4a1f      	ldr	r2, [pc, #124]	@ (80069dc <prvHeapInit+0xac>)
 8006960:	4413      	add	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006968:	4a1d      	ldr	r2, [pc, #116]	@ (80069e0 <prvHeapInit+0xb0>)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800696e:	4b1c      	ldr	r3, [pc, #112]	@ (80069e0 <prvHeapInit+0xb0>)
 8006970:	2200      	movs	r2, #0
 8006972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	4413      	add	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800697c:	2208      	movs	r2, #8
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0307 	bic.w	r3, r3, #7
 800698a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a15      	ldr	r2, [pc, #84]	@ (80069e4 <prvHeapInit+0xb4>)
 8006990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006992:	4b14      	ldr	r3, [pc, #80]	@ (80069e4 <prvHeapInit+0xb4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2200      	movs	r2, #0
 8006998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800699a:	4b12      	ldr	r3, [pc, #72]	@ (80069e4 <prvHeapInit+0xb4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069b0:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <prvHeapInit+0xb4>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4a0a      	ldr	r2, [pc, #40]	@ (80069e8 <prvHeapInit+0xb8>)
 80069be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4a09      	ldr	r2, [pc, #36]	@ (80069ec <prvHeapInit+0xbc>)
 80069c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069c8:	4b09      	ldr	r3, [pc, #36]	@ (80069f0 <prvHeapInit+0xc0>)
 80069ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80069ce:	601a      	str	r2, [r3, #0]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000554 	.word	0x20000554
 80069e0:	20004154 	.word	0x20004154
 80069e4:	2000415c 	.word	0x2000415c
 80069e8:	20004164 	.word	0x20004164
 80069ec:	20004160 	.word	0x20004160
 80069f0:	20004170 	.word	0x20004170

080069f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069fc:	4b28      	ldr	r3, [pc, #160]	@ (8006aa0 <prvInsertBlockIntoFreeList+0xac>)
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e002      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x14>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d8f7      	bhi.n	8006a02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d108      	bne.n	8006a36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	441a      	add	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	441a      	add	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d118      	bne.n	8006a7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b15      	ldr	r3, [pc, #84]	@ (8006aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d00d      	beq.n	8006a72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	441a      	add	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	e008      	b.n	8006a84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a72:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e003      	b.n	8006a84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d002      	beq.n	8006a92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20004154 	.word	0x20004154
 8006aa4:	2000415c 	.word	0x2000415c

08006aa8 <siprintf>:
 8006aa8:	b40e      	push	{r1, r2, r3}
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	b09d      	sub	sp, #116	@ 0x74
 8006aae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006ab0:	9002      	str	r0, [sp, #8]
 8006ab2:	9006      	str	r0, [sp, #24]
 8006ab4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ab8:	480a      	ldr	r0, [pc, #40]	@ (8006ae4 <siprintf+0x3c>)
 8006aba:	9107      	str	r1, [sp, #28]
 8006abc:	9104      	str	r1, [sp, #16]
 8006abe:	490a      	ldr	r1, [pc, #40]	@ (8006ae8 <siprintf+0x40>)
 8006ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac4:	9105      	str	r1, [sp, #20]
 8006ac6:	2400      	movs	r4, #0
 8006ac8:	a902      	add	r1, sp, #8
 8006aca:	6800      	ldr	r0, [r0, #0]
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006ad0:	f000 f9a2 	bl	8006e18 <_svfiprintf_r>
 8006ad4:	9b02      	ldr	r3, [sp, #8]
 8006ad6:	701c      	strb	r4, [r3, #0]
 8006ad8:	b01d      	add	sp, #116	@ 0x74
 8006ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ade:	b003      	add	sp, #12
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000094 	.word	0x20000094
 8006ae8:	ffff0208 	.word	0xffff0208

08006aec <memset>:
 8006aec:	4402      	add	r2, r0
 8006aee:	4603      	mov	r3, r0
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d100      	bne.n	8006af6 <memset+0xa>
 8006af4:	4770      	bx	lr
 8006af6:	f803 1b01 	strb.w	r1, [r3], #1
 8006afa:	e7f9      	b.n	8006af0 <memset+0x4>

08006afc <__errno>:
 8006afc:	4b01      	ldr	r3, [pc, #4]	@ (8006b04 <__errno+0x8>)
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000094 	.word	0x20000094

08006b08 <__libc_init_array>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b40 <__libc_init_array+0x38>)
 8006b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b44 <__libc_init_array+0x3c>)
 8006b0e:	1b64      	subs	r4, r4, r5
 8006b10:	10a4      	asrs	r4, r4, #2
 8006b12:	2600      	movs	r6, #0
 8006b14:	42a6      	cmp	r6, r4
 8006b16:	d109      	bne.n	8006b2c <__libc_init_array+0x24>
 8006b18:	4d0b      	ldr	r5, [pc, #44]	@ (8006b48 <__libc_init_array+0x40>)
 8006b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b4c <__libc_init_array+0x44>)
 8006b1c:	f000 fc64 	bl	80073e8 <_init>
 8006b20:	1b64      	subs	r4, r4, r5
 8006b22:	10a4      	asrs	r4, r4, #2
 8006b24:	2600      	movs	r6, #0
 8006b26:	42a6      	cmp	r6, r4
 8006b28:	d105      	bne.n	8006b36 <__libc_init_array+0x2e>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b30:	4798      	blx	r3
 8006b32:	3601      	adds	r6, #1
 8006b34:	e7ee      	b.n	8006b14 <__libc_init_array+0xc>
 8006b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3a:	4798      	blx	r3
 8006b3c:	3601      	adds	r6, #1
 8006b3e:	e7f2      	b.n	8006b26 <__libc_init_array+0x1e>
 8006b40:	080079b8 	.word	0x080079b8
 8006b44:	080079b8 	.word	0x080079b8
 8006b48:	080079b8 	.word	0x080079b8
 8006b4c:	080079bc 	.word	0x080079bc

08006b50 <__retarget_lock_acquire_recursive>:
 8006b50:	4770      	bx	lr

08006b52 <__retarget_lock_release_recursive>:
 8006b52:	4770      	bx	lr

08006b54 <memcpy>:
 8006b54:	440a      	add	r2, r1
 8006b56:	4291      	cmp	r1, r2
 8006b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b5c:	d100      	bne.n	8006b60 <memcpy+0xc>
 8006b5e:	4770      	bx	lr
 8006b60:	b510      	push	{r4, lr}
 8006b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b6a:	4291      	cmp	r1, r2
 8006b6c:	d1f9      	bne.n	8006b62 <memcpy+0xe>
 8006b6e:	bd10      	pop	{r4, pc}

08006b70 <_free_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4605      	mov	r5, r0
 8006b74:	2900      	cmp	r1, #0
 8006b76:	d041      	beq.n	8006bfc <_free_r+0x8c>
 8006b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b7c:	1f0c      	subs	r4, r1, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bfb8      	it	lt
 8006b82:	18e4      	addlt	r4, r4, r3
 8006b84:	f000 f8e0 	bl	8006d48 <__malloc_lock>
 8006b88:	4a1d      	ldr	r2, [pc, #116]	@ (8006c00 <_free_r+0x90>)
 8006b8a:	6813      	ldr	r3, [r2, #0]
 8006b8c:	b933      	cbnz	r3, 8006b9c <_free_r+0x2c>
 8006b8e:	6063      	str	r3, [r4, #4]
 8006b90:	6014      	str	r4, [r2, #0]
 8006b92:	4628      	mov	r0, r5
 8006b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b98:	f000 b8dc 	b.w	8006d54 <__malloc_unlock>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d908      	bls.n	8006bb2 <_free_r+0x42>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	1821      	adds	r1, r4, r0
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	bf01      	itttt	eq
 8006ba8:	6819      	ldreq	r1, [r3, #0]
 8006baa:	685b      	ldreq	r3, [r3, #4]
 8006bac:	1809      	addeq	r1, r1, r0
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	e7ed      	b.n	8006b8e <_free_r+0x1e>
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b10b      	cbz	r3, 8006bbc <_free_r+0x4c>
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d9fa      	bls.n	8006bb2 <_free_r+0x42>
 8006bbc:	6811      	ldr	r1, [r2, #0]
 8006bbe:	1850      	adds	r0, r2, r1
 8006bc0:	42a0      	cmp	r0, r4
 8006bc2:	d10b      	bne.n	8006bdc <_free_r+0x6c>
 8006bc4:	6820      	ldr	r0, [r4, #0]
 8006bc6:	4401      	add	r1, r0
 8006bc8:	1850      	adds	r0, r2, r1
 8006bca:	4283      	cmp	r3, r0
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	d1e0      	bne.n	8006b92 <_free_r+0x22>
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	6053      	str	r3, [r2, #4]
 8006bd6:	4408      	add	r0, r1
 8006bd8:	6010      	str	r0, [r2, #0]
 8006bda:	e7da      	b.n	8006b92 <_free_r+0x22>
 8006bdc:	d902      	bls.n	8006be4 <_free_r+0x74>
 8006bde:	230c      	movs	r3, #12
 8006be0:	602b      	str	r3, [r5, #0]
 8006be2:	e7d6      	b.n	8006b92 <_free_r+0x22>
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	1821      	adds	r1, r4, r0
 8006be8:	428b      	cmp	r3, r1
 8006bea:	bf04      	itt	eq
 8006bec:	6819      	ldreq	r1, [r3, #0]
 8006bee:	685b      	ldreq	r3, [r3, #4]
 8006bf0:	6063      	str	r3, [r4, #4]
 8006bf2:	bf04      	itt	eq
 8006bf4:	1809      	addeq	r1, r1, r0
 8006bf6:	6021      	streq	r1, [r4, #0]
 8006bf8:	6054      	str	r4, [r2, #4]
 8006bfa:	e7ca      	b.n	8006b92 <_free_r+0x22>
 8006bfc:	bd38      	pop	{r3, r4, r5, pc}
 8006bfe:	bf00      	nop
 8006c00:	200042b8 	.word	0x200042b8

08006c04 <sbrk_aligned>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4e0f      	ldr	r6, [pc, #60]	@ (8006c44 <sbrk_aligned+0x40>)
 8006c08:	460c      	mov	r4, r1
 8006c0a:	6831      	ldr	r1, [r6, #0]
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	b911      	cbnz	r1, 8006c16 <sbrk_aligned+0x12>
 8006c10:	f000 fba4 	bl	800735c <_sbrk_r>
 8006c14:	6030      	str	r0, [r6, #0]
 8006c16:	4621      	mov	r1, r4
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 fb9f 	bl	800735c <_sbrk_r>
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d103      	bne.n	8006c2a <sbrk_aligned+0x26>
 8006c22:	f04f 34ff 	mov.w	r4, #4294967295
 8006c26:	4620      	mov	r0, r4
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	1cc4      	adds	r4, r0, #3
 8006c2c:	f024 0403 	bic.w	r4, r4, #3
 8006c30:	42a0      	cmp	r0, r4
 8006c32:	d0f8      	beq.n	8006c26 <sbrk_aligned+0x22>
 8006c34:	1a21      	subs	r1, r4, r0
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 fb90 	bl	800735c <_sbrk_r>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d1f2      	bne.n	8006c26 <sbrk_aligned+0x22>
 8006c40:	e7ef      	b.n	8006c22 <sbrk_aligned+0x1e>
 8006c42:	bf00      	nop
 8006c44:	200042b4 	.word	0x200042b4

08006c48 <_malloc_r>:
 8006c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c4c:	1ccd      	adds	r5, r1, #3
 8006c4e:	f025 0503 	bic.w	r5, r5, #3
 8006c52:	3508      	adds	r5, #8
 8006c54:	2d0c      	cmp	r5, #12
 8006c56:	bf38      	it	cc
 8006c58:	250c      	movcc	r5, #12
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	db01      	blt.n	8006c64 <_malloc_r+0x1c>
 8006c60:	42a9      	cmp	r1, r5
 8006c62:	d904      	bls.n	8006c6e <_malloc_r+0x26>
 8006c64:	230c      	movs	r3, #12
 8006c66:	6033      	str	r3, [r6, #0]
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d44 <_malloc_r+0xfc>
 8006c72:	f000 f869 	bl	8006d48 <__malloc_lock>
 8006c76:	f8d8 3000 	ldr.w	r3, [r8]
 8006c7a:	461c      	mov	r4, r3
 8006c7c:	bb44      	cbnz	r4, 8006cd0 <_malloc_r+0x88>
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff ffbf 	bl	8006c04 <sbrk_aligned>
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	4604      	mov	r4, r0
 8006c8a:	d158      	bne.n	8006d3e <_malloc_r+0xf6>
 8006c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8006c90:	4627      	mov	r7, r4
 8006c92:	2f00      	cmp	r7, #0
 8006c94:	d143      	bne.n	8006d1e <_malloc_r+0xd6>
 8006c96:	2c00      	cmp	r4, #0
 8006c98:	d04b      	beq.n	8006d32 <_malloc_r+0xea>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	eb04 0903 	add.w	r9, r4, r3
 8006ca4:	f000 fb5a 	bl	800735c <_sbrk_r>
 8006ca8:	4581      	cmp	r9, r0
 8006caa:	d142      	bne.n	8006d32 <_malloc_r+0xea>
 8006cac:	6821      	ldr	r1, [r4, #0]
 8006cae:	1a6d      	subs	r5, r5, r1
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff ffa6 	bl	8006c04 <sbrk_aligned>
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d03a      	beq.n	8006d32 <_malloc_r+0xea>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	442b      	add	r3, r5
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	bb62      	cbnz	r2, 8006d24 <_malloc_r+0xdc>
 8006cca:	f8c8 7000 	str.w	r7, [r8]
 8006cce:	e00f      	b.n	8006cf0 <_malloc_r+0xa8>
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	1b52      	subs	r2, r2, r5
 8006cd4:	d420      	bmi.n	8006d18 <_malloc_r+0xd0>
 8006cd6:	2a0b      	cmp	r2, #11
 8006cd8:	d917      	bls.n	8006d0a <_malloc_r+0xc2>
 8006cda:	1961      	adds	r1, r4, r5
 8006cdc:	42a3      	cmp	r3, r4
 8006cde:	6025      	str	r5, [r4, #0]
 8006ce0:	bf18      	it	ne
 8006ce2:	6059      	strne	r1, [r3, #4]
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	bf08      	it	eq
 8006ce8:	f8c8 1000 	streq.w	r1, [r8]
 8006cec:	5162      	str	r2, [r4, r5]
 8006cee:	604b      	str	r3, [r1, #4]
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f000 f82f 	bl	8006d54 <__malloc_unlock>
 8006cf6:	f104 000b 	add.w	r0, r4, #11
 8006cfa:	1d23      	adds	r3, r4, #4
 8006cfc:	f020 0007 	bic.w	r0, r0, #7
 8006d00:	1ac2      	subs	r2, r0, r3
 8006d02:	bf1c      	itt	ne
 8006d04:	1a1b      	subne	r3, r3, r0
 8006d06:	50a3      	strne	r3, [r4, r2]
 8006d08:	e7af      	b.n	8006c6a <_malloc_r+0x22>
 8006d0a:	6862      	ldr	r2, [r4, #4]
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	bf0c      	ite	eq
 8006d10:	f8c8 2000 	streq.w	r2, [r8]
 8006d14:	605a      	strne	r2, [r3, #4]
 8006d16:	e7eb      	b.n	8006cf0 <_malloc_r+0xa8>
 8006d18:	4623      	mov	r3, r4
 8006d1a:	6864      	ldr	r4, [r4, #4]
 8006d1c:	e7ae      	b.n	8006c7c <_malloc_r+0x34>
 8006d1e:	463c      	mov	r4, r7
 8006d20:	687f      	ldr	r7, [r7, #4]
 8006d22:	e7b6      	b.n	8006c92 <_malloc_r+0x4a>
 8006d24:	461a      	mov	r2, r3
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d1fb      	bne.n	8006d24 <_malloc_r+0xdc>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	6053      	str	r3, [r2, #4]
 8006d30:	e7de      	b.n	8006cf0 <_malloc_r+0xa8>
 8006d32:	230c      	movs	r3, #12
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 f80c 	bl	8006d54 <__malloc_unlock>
 8006d3c:	e794      	b.n	8006c68 <_malloc_r+0x20>
 8006d3e:	6005      	str	r5, [r0, #0]
 8006d40:	e7d6      	b.n	8006cf0 <_malloc_r+0xa8>
 8006d42:	bf00      	nop
 8006d44:	200042b8 	.word	0x200042b8

08006d48 <__malloc_lock>:
 8006d48:	4801      	ldr	r0, [pc, #4]	@ (8006d50 <__malloc_lock+0x8>)
 8006d4a:	f7ff bf01 	b.w	8006b50 <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	200042b0 	.word	0x200042b0

08006d54 <__malloc_unlock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	@ (8006d5c <__malloc_unlock+0x8>)
 8006d56:	f7ff befc 	b.w	8006b52 <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	200042b0 	.word	0x200042b0

08006d60 <__ssputs_r>:
 8006d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d64:	688e      	ldr	r6, [r1, #8]
 8006d66:	461f      	mov	r7, r3
 8006d68:	42be      	cmp	r6, r7
 8006d6a:	680b      	ldr	r3, [r1, #0]
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	4690      	mov	r8, r2
 8006d72:	d82d      	bhi.n	8006dd0 <__ssputs_r+0x70>
 8006d74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d7c:	d026      	beq.n	8006dcc <__ssputs_r+0x6c>
 8006d7e:	6965      	ldr	r5, [r4, #20]
 8006d80:	6909      	ldr	r1, [r1, #16]
 8006d82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d86:	eba3 0901 	sub.w	r9, r3, r1
 8006d8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d8e:	1c7b      	adds	r3, r7, #1
 8006d90:	444b      	add	r3, r9
 8006d92:	106d      	asrs	r5, r5, #1
 8006d94:	429d      	cmp	r5, r3
 8006d96:	bf38      	it	cc
 8006d98:	461d      	movcc	r5, r3
 8006d9a:	0553      	lsls	r3, r2, #21
 8006d9c:	d527      	bpl.n	8006dee <__ssputs_r+0x8e>
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7ff ff52 	bl	8006c48 <_malloc_r>
 8006da4:	4606      	mov	r6, r0
 8006da6:	b360      	cbz	r0, 8006e02 <__ssputs_r+0xa2>
 8006da8:	6921      	ldr	r1, [r4, #16]
 8006daa:	464a      	mov	r2, r9
 8006dac:	f7ff fed2 	bl	8006b54 <memcpy>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	6126      	str	r6, [r4, #16]
 8006dbe:	6165      	str	r5, [r4, #20]
 8006dc0:	444e      	add	r6, r9
 8006dc2:	eba5 0509 	sub.w	r5, r5, r9
 8006dc6:	6026      	str	r6, [r4, #0]
 8006dc8:	60a5      	str	r5, [r4, #8]
 8006dca:	463e      	mov	r6, r7
 8006dcc:	42be      	cmp	r6, r7
 8006dce:	d900      	bls.n	8006dd2 <__ssputs_r+0x72>
 8006dd0:	463e      	mov	r6, r7
 8006dd2:	6820      	ldr	r0, [r4, #0]
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	4641      	mov	r1, r8
 8006dd8:	f000 faa6 	bl	8007328 <memmove>
 8006ddc:	68a3      	ldr	r3, [r4, #8]
 8006dde:	1b9b      	subs	r3, r3, r6
 8006de0:	60a3      	str	r3, [r4, #8]
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	4433      	add	r3, r6
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	2000      	movs	r0, #0
 8006dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dee:	462a      	mov	r2, r5
 8006df0:	f000 fac4 	bl	800737c <_realloc_r>
 8006df4:	4606      	mov	r6, r0
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d1e0      	bne.n	8006dbc <__ssputs_r+0x5c>
 8006dfa:	6921      	ldr	r1, [r4, #16]
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	f7ff feb7 	bl	8006b70 <_free_r>
 8006e02:	230c      	movs	r3, #12
 8006e04:	f8ca 3000 	str.w	r3, [sl]
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	e7e9      	b.n	8006dea <__ssputs_r+0x8a>
	...

08006e18 <_svfiprintf_r>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	4698      	mov	r8, r3
 8006e1e:	898b      	ldrh	r3, [r1, #12]
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	b09d      	sub	sp, #116	@ 0x74
 8006e24:	4607      	mov	r7, r0
 8006e26:	460d      	mov	r5, r1
 8006e28:	4614      	mov	r4, r2
 8006e2a:	d510      	bpl.n	8006e4e <_svfiprintf_r+0x36>
 8006e2c:	690b      	ldr	r3, [r1, #16]
 8006e2e:	b973      	cbnz	r3, 8006e4e <_svfiprintf_r+0x36>
 8006e30:	2140      	movs	r1, #64	@ 0x40
 8006e32:	f7ff ff09 	bl	8006c48 <_malloc_r>
 8006e36:	6028      	str	r0, [r5, #0]
 8006e38:	6128      	str	r0, [r5, #16]
 8006e3a:	b930      	cbnz	r0, 8006e4a <_svfiprintf_r+0x32>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
 8006e44:	b01d      	add	sp, #116	@ 0x74
 8006e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4a:	2340      	movs	r3, #64	@ 0x40
 8006e4c:	616b      	str	r3, [r5, #20]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e52:	2320      	movs	r3, #32
 8006e54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e5c:	2330      	movs	r3, #48	@ 0x30
 8006e5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ffc <_svfiprintf_r+0x1e4>
 8006e62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e66:	f04f 0901 	mov.w	r9, #1
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	469a      	mov	sl, r3
 8006e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e72:	b10a      	cbz	r2, 8006e78 <_svfiprintf_r+0x60>
 8006e74:	2a25      	cmp	r2, #37	@ 0x25
 8006e76:	d1f9      	bne.n	8006e6c <_svfiprintf_r+0x54>
 8006e78:	ebba 0b04 	subs.w	fp, sl, r4
 8006e7c:	d00b      	beq.n	8006e96 <_svfiprintf_r+0x7e>
 8006e7e:	465b      	mov	r3, fp
 8006e80:	4622      	mov	r2, r4
 8006e82:	4629      	mov	r1, r5
 8006e84:	4638      	mov	r0, r7
 8006e86:	f7ff ff6b 	bl	8006d60 <__ssputs_r>
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f000 80a7 	beq.w	8006fde <_svfiprintf_r+0x1c6>
 8006e90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e92:	445a      	add	r2, fp
 8006e94:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e96:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 809f 	beq.w	8006fde <_svfiprintf_r+0x1c6>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eaa:	f10a 0a01 	add.w	sl, sl, #1
 8006eae:	9304      	str	r3, [sp, #16]
 8006eb0:	9307      	str	r3, [sp, #28]
 8006eb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006eb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006eb8:	4654      	mov	r4, sl
 8006eba:	2205      	movs	r2, #5
 8006ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec0:	484e      	ldr	r0, [pc, #312]	@ (8006ffc <_svfiprintf_r+0x1e4>)
 8006ec2:	f7f9 f985 	bl	80001d0 <memchr>
 8006ec6:	9a04      	ldr	r2, [sp, #16]
 8006ec8:	b9d8      	cbnz	r0, 8006f02 <_svfiprintf_r+0xea>
 8006eca:	06d0      	lsls	r0, r2, #27
 8006ecc:	bf44      	itt	mi
 8006ece:	2320      	movmi	r3, #32
 8006ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ed4:	0711      	lsls	r1, r2, #28
 8006ed6:	bf44      	itt	mi
 8006ed8:	232b      	movmi	r3, #43	@ 0x2b
 8006eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ede:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee4:	d015      	beq.n	8006f12 <_svfiprintf_r+0xfa>
 8006ee6:	9a07      	ldr	r2, [sp, #28]
 8006ee8:	4654      	mov	r4, sl
 8006eea:	2000      	movs	r0, #0
 8006eec:	f04f 0c0a 	mov.w	ip, #10
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ef6:	3b30      	subs	r3, #48	@ 0x30
 8006ef8:	2b09      	cmp	r3, #9
 8006efa:	d94b      	bls.n	8006f94 <_svfiprintf_r+0x17c>
 8006efc:	b1b0      	cbz	r0, 8006f2c <_svfiprintf_r+0x114>
 8006efe:	9207      	str	r2, [sp, #28]
 8006f00:	e014      	b.n	8006f2c <_svfiprintf_r+0x114>
 8006f02:	eba0 0308 	sub.w	r3, r0, r8
 8006f06:	fa09 f303 	lsl.w	r3, r9, r3
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	9304      	str	r3, [sp, #16]
 8006f0e:	46a2      	mov	sl, r4
 8006f10:	e7d2      	b.n	8006eb8 <_svfiprintf_r+0xa0>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	1d19      	adds	r1, r3, #4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	9103      	str	r1, [sp, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bfbb      	ittet	lt
 8006f1e:	425b      	neglt	r3, r3
 8006f20:	f042 0202 	orrlt.w	r2, r2, #2
 8006f24:	9307      	strge	r3, [sp, #28]
 8006f26:	9307      	strlt	r3, [sp, #28]
 8006f28:	bfb8      	it	lt
 8006f2a:	9204      	strlt	r2, [sp, #16]
 8006f2c:	7823      	ldrb	r3, [r4, #0]
 8006f2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f30:	d10a      	bne.n	8006f48 <_svfiprintf_r+0x130>
 8006f32:	7863      	ldrb	r3, [r4, #1]
 8006f34:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f36:	d132      	bne.n	8006f9e <_svfiprintf_r+0x186>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	1d1a      	adds	r2, r3, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	9203      	str	r2, [sp, #12]
 8006f40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f44:	3402      	adds	r4, #2
 8006f46:	9305      	str	r3, [sp, #20]
 8006f48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800700c <_svfiprintf_r+0x1f4>
 8006f4c:	7821      	ldrb	r1, [r4, #0]
 8006f4e:	2203      	movs	r2, #3
 8006f50:	4650      	mov	r0, sl
 8006f52:	f7f9 f93d 	bl	80001d0 <memchr>
 8006f56:	b138      	cbz	r0, 8006f68 <_svfiprintf_r+0x150>
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	eba0 000a 	sub.w	r0, r0, sl
 8006f5e:	2240      	movs	r2, #64	@ 0x40
 8006f60:	4082      	lsls	r2, r0
 8006f62:	4313      	orrs	r3, r2
 8006f64:	3401      	adds	r4, #1
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6c:	4824      	ldr	r0, [pc, #144]	@ (8007000 <_svfiprintf_r+0x1e8>)
 8006f6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f72:	2206      	movs	r2, #6
 8006f74:	f7f9 f92c 	bl	80001d0 <memchr>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d036      	beq.n	8006fea <_svfiprintf_r+0x1d2>
 8006f7c:	4b21      	ldr	r3, [pc, #132]	@ (8007004 <_svfiprintf_r+0x1ec>)
 8006f7e:	bb1b      	cbnz	r3, 8006fc8 <_svfiprintf_r+0x1b0>
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	3307      	adds	r3, #7
 8006f84:	f023 0307 	bic.w	r3, r3, #7
 8006f88:	3308      	adds	r3, #8
 8006f8a:	9303      	str	r3, [sp, #12]
 8006f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8e:	4433      	add	r3, r6
 8006f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f92:	e76a      	b.n	8006e6a <_svfiprintf_r+0x52>
 8006f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f98:	460c      	mov	r4, r1
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	e7a8      	b.n	8006ef0 <_svfiprintf_r+0xd8>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	3401      	adds	r4, #1
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f04f 0c0a 	mov.w	ip, #10
 8006faa:	4620      	mov	r0, r4
 8006fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb0:	3a30      	subs	r2, #48	@ 0x30
 8006fb2:	2a09      	cmp	r2, #9
 8006fb4:	d903      	bls.n	8006fbe <_svfiprintf_r+0x1a6>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0c6      	beq.n	8006f48 <_svfiprintf_r+0x130>
 8006fba:	9105      	str	r1, [sp, #20]
 8006fbc:	e7c4      	b.n	8006f48 <_svfiprintf_r+0x130>
 8006fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e7f0      	b.n	8006faa <_svfiprintf_r+0x192>
 8006fc8:	ab03      	add	r3, sp, #12
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	462a      	mov	r2, r5
 8006fce:	4b0e      	ldr	r3, [pc, #56]	@ (8007008 <_svfiprintf_r+0x1f0>)
 8006fd0:	a904      	add	r1, sp, #16
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f3af 8000 	nop.w
 8006fd8:	1c42      	adds	r2, r0, #1
 8006fda:	4606      	mov	r6, r0
 8006fdc:	d1d6      	bne.n	8006f8c <_svfiprintf_r+0x174>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	065b      	lsls	r3, r3, #25
 8006fe2:	f53f af2d 	bmi.w	8006e40 <_svfiprintf_r+0x28>
 8006fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fe8:	e72c      	b.n	8006e44 <_svfiprintf_r+0x2c>
 8006fea:	ab03      	add	r3, sp, #12
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4b05      	ldr	r3, [pc, #20]	@ (8007008 <_svfiprintf_r+0x1f0>)
 8006ff2:	a904      	add	r1, sp, #16
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f000 f879 	bl	80070ec <_printf_i>
 8006ffa:	e7ed      	b.n	8006fd8 <_svfiprintf_r+0x1c0>
 8006ffc:	0800797c 	.word	0x0800797c
 8007000:	08007986 	.word	0x08007986
 8007004:	00000000 	.word	0x00000000
 8007008:	08006d61 	.word	0x08006d61
 800700c:	08007982 	.word	0x08007982

08007010 <_printf_common>:
 8007010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007014:	4616      	mov	r6, r2
 8007016:	4698      	mov	r8, r3
 8007018:	688a      	ldr	r2, [r1, #8]
 800701a:	690b      	ldr	r3, [r1, #16]
 800701c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007020:	4293      	cmp	r3, r2
 8007022:	bfb8      	it	lt
 8007024:	4613      	movlt	r3, r2
 8007026:	6033      	str	r3, [r6, #0]
 8007028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800702c:	4607      	mov	r7, r0
 800702e:	460c      	mov	r4, r1
 8007030:	b10a      	cbz	r2, 8007036 <_printf_common+0x26>
 8007032:	3301      	adds	r3, #1
 8007034:	6033      	str	r3, [r6, #0]
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	0699      	lsls	r1, r3, #26
 800703a:	bf42      	ittt	mi
 800703c:	6833      	ldrmi	r3, [r6, #0]
 800703e:	3302      	addmi	r3, #2
 8007040:	6033      	strmi	r3, [r6, #0]
 8007042:	6825      	ldr	r5, [r4, #0]
 8007044:	f015 0506 	ands.w	r5, r5, #6
 8007048:	d106      	bne.n	8007058 <_printf_common+0x48>
 800704a:	f104 0a19 	add.w	sl, r4, #25
 800704e:	68e3      	ldr	r3, [r4, #12]
 8007050:	6832      	ldr	r2, [r6, #0]
 8007052:	1a9b      	subs	r3, r3, r2
 8007054:	42ab      	cmp	r3, r5
 8007056:	dc26      	bgt.n	80070a6 <_printf_common+0x96>
 8007058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800705c:	6822      	ldr	r2, [r4, #0]
 800705e:	3b00      	subs	r3, #0
 8007060:	bf18      	it	ne
 8007062:	2301      	movne	r3, #1
 8007064:	0692      	lsls	r2, r2, #26
 8007066:	d42b      	bmi.n	80070c0 <_printf_common+0xb0>
 8007068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800706c:	4641      	mov	r1, r8
 800706e:	4638      	mov	r0, r7
 8007070:	47c8      	blx	r9
 8007072:	3001      	adds	r0, #1
 8007074:	d01e      	beq.n	80070b4 <_printf_common+0xa4>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	6922      	ldr	r2, [r4, #16]
 800707a:	f003 0306 	and.w	r3, r3, #6
 800707e:	2b04      	cmp	r3, #4
 8007080:	bf02      	ittt	eq
 8007082:	68e5      	ldreq	r5, [r4, #12]
 8007084:	6833      	ldreq	r3, [r6, #0]
 8007086:	1aed      	subeq	r5, r5, r3
 8007088:	68a3      	ldr	r3, [r4, #8]
 800708a:	bf0c      	ite	eq
 800708c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007090:	2500      	movne	r5, #0
 8007092:	4293      	cmp	r3, r2
 8007094:	bfc4      	itt	gt
 8007096:	1a9b      	subgt	r3, r3, r2
 8007098:	18ed      	addgt	r5, r5, r3
 800709a:	2600      	movs	r6, #0
 800709c:	341a      	adds	r4, #26
 800709e:	42b5      	cmp	r5, r6
 80070a0:	d11a      	bne.n	80070d8 <_printf_common+0xc8>
 80070a2:	2000      	movs	r0, #0
 80070a4:	e008      	b.n	80070b8 <_printf_common+0xa8>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4652      	mov	r2, sl
 80070aa:	4641      	mov	r1, r8
 80070ac:	4638      	mov	r0, r7
 80070ae:	47c8      	blx	r9
 80070b0:	3001      	adds	r0, #1
 80070b2:	d103      	bne.n	80070bc <_printf_common+0xac>
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295
 80070b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070bc:	3501      	adds	r5, #1
 80070be:	e7c6      	b.n	800704e <_printf_common+0x3e>
 80070c0:	18e1      	adds	r1, r4, r3
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	2030      	movs	r0, #48	@ 0x30
 80070c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070ca:	4422      	add	r2, r4
 80070cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d4:	3302      	adds	r3, #2
 80070d6:	e7c7      	b.n	8007068 <_printf_common+0x58>
 80070d8:	2301      	movs	r3, #1
 80070da:	4622      	mov	r2, r4
 80070dc:	4641      	mov	r1, r8
 80070de:	4638      	mov	r0, r7
 80070e0:	47c8      	blx	r9
 80070e2:	3001      	adds	r0, #1
 80070e4:	d0e6      	beq.n	80070b4 <_printf_common+0xa4>
 80070e6:	3601      	adds	r6, #1
 80070e8:	e7d9      	b.n	800709e <_printf_common+0x8e>
	...

080070ec <_printf_i>:
 80070ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070f0:	7e0f      	ldrb	r7, [r1, #24]
 80070f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070f4:	2f78      	cmp	r7, #120	@ 0x78
 80070f6:	4691      	mov	r9, r2
 80070f8:	4680      	mov	r8, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	469a      	mov	sl, r3
 80070fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007102:	d807      	bhi.n	8007114 <_printf_i+0x28>
 8007104:	2f62      	cmp	r7, #98	@ 0x62
 8007106:	d80a      	bhi.n	800711e <_printf_i+0x32>
 8007108:	2f00      	cmp	r7, #0
 800710a:	f000 80d1 	beq.w	80072b0 <_printf_i+0x1c4>
 800710e:	2f58      	cmp	r7, #88	@ 0x58
 8007110:	f000 80b8 	beq.w	8007284 <_printf_i+0x198>
 8007114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800711c:	e03a      	b.n	8007194 <_printf_i+0xa8>
 800711e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007122:	2b15      	cmp	r3, #21
 8007124:	d8f6      	bhi.n	8007114 <_printf_i+0x28>
 8007126:	a101      	add	r1, pc, #4	@ (adr r1, 800712c <_printf_i+0x40>)
 8007128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800712c:	08007185 	.word	0x08007185
 8007130:	08007199 	.word	0x08007199
 8007134:	08007115 	.word	0x08007115
 8007138:	08007115 	.word	0x08007115
 800713c:	08007115 	.word	0x08007115
 8007140:	08007115 	.word	0x08007115
 8007144:	08007199 	.word	0x08007199
 8007148:	08007115 	.word	0x08007115
 800714c:	08007115 	.word	0x08007115
 8007150:	08007115 	.word	0x08007115
 8007154:	08007115 	.word	0x08007115
 8007158:	08007297 	.word	0x08007297
 800715c:	080071c3 	.word	0x080071c3
 8007160:	08007251 	.word	0x08007251
 8007164:	08007115 	.word	0x08007115
 8007168:	08007115 	.word	0x08007115
 800716c:	080072b9 	.word	0x080072b9
 8007170:	08007115 	.word	0x08007115
 8007174:	080071c3 	.word	0x080071c3
 8007178:	08007115 	.word	0x08007115
 800717c:	08007115 	.word	0x08007115
 8007180:	08007259 	.word	0x08007259
 8007184:	6833      	ldr	r3, [r6, #0]
 8007186:	1d1a      	adds	r2, r3, #4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6032      	str	r2, [r6, #0]
 800718c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007194:	2301      	movs	r3, #1
 8007196:	e09c      	b.n	80072d2 <_printf_i+0x1e6>
 8007198:	6833      	ldr	r3, [r6, #0]
 800719a:	6820      	ldr	r0, [r4, #0]
 800719c:	1d19      	adds	r1, r3, #4
 800719e:	6031      	str	r1, [r6, #0]
 80071a0:	0606      	lsls	r6, r0, #24
 80071a2:	d501      	bpl.n	80071a8 <_printf_i+0xbc>
 80071a4:	681d      	ldr	r5, [r3, #0]
 80071a6:	e003      	b.n	80071b0 <_printf_i+0xc4>
 80071a8:	0645      	lsls	r5, r0, #25
 80071aa:	d5fb      	bpl.n	80071a4 <_printf_i+0xb8>
 80071ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071b0:	2d00      	cmp	r5, #0
 80071b2:	da03      	bge.n	80071bc <_printf_i+0xd0>
 80071b4:	232d      	movs	r3, #45	@ 0x2d
 80071b6:	426d      	negs	r5, r5
 80071b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071bc:	4858      	ldr	r0, [pc, #352]	@ (8007320 <_printf_i+0x234>)
 80071be:	230a      	movs	r3, #10
 80071c0:	e011      	b.n	80071e6 <_printf_i+0xfa>
 80071c2:	6821      	ldr	r1, [r4, #0]
 80071c4:	6833      	ldr	r3, [r6, #0]
 80071c6:	0608      	lsls	r0, r1, #24
 80071c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80071cc:	d402      	bmi.n	80071d4 <_printf_i+0xe8>
 80071ce:	0649      	lsls	r1, r1, #25
 80071d0:	bf48      	it	mi
 80071d2:	b2ad      	uxthmi	r5, r5
 80071d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071d6:	4852      	ldr	r0, [pc, #328]	@ (8007320 <_printf_i+0x234>)
 80071d8:	6033      	str	r3, [r6, #0]
 80071da:	bf14      	ite	ne
 80071dc:	230a      	movne	r3, #10
 80071de:	2308      	moveq	r3, #8
 80071e0:	2100      	movs	r1, #0
 80071e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071e6:	6866      	ldr	r6, [r4, #4]
 80071e8:	60a6      	str	r6, [r4, #8]
 80071ea:	2e00      	cmp	r6, #0
 80071ec:	db05      	blt.n	80071fa <_printf_i+0x10e>
 80071ee:	6821      	ldr	r1, [r4, #0]
 80071f0:	432e      	orrs	r6, r5
 80071f2:	f021 0104 	bic.w	r1, r1, #4
 80071f6:	6021      	str	r1, [r4, #0]
 80071f8:	d04b      	beq.n	8007292 <_printf_i+0x1a6>
 80071fa:	4616      	mov	r6, r2
 80071fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007200:	fb03 5711 	mls	r7, r3, r1, r5
 8007204:	5dc7      	ldrb	r7, [r0, r7]
 8007206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800720a:	462f      	mov	r7, r5
 800720c:	42bb      	cmp	r3, r7
 800720e:	460d      	mov	r5, r1
 8007210:	d9f4      	bls.n	80071fc <_printf_i+0x110>
 8007212:	2b08      	cmp	r3, #8
 8007214:	d10b      	bne.n	800722e <_printf_i+0x142>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	07df      	lsls	r7, r3, #31
 800721a:	d508      	bpl.n	800722e <_printf_i+0x142>
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	6861      	ldr	r1, [r4, #4]
 8007220:	4299      	cmp	r1, r3
 8007222:	bfde      	ittt	le
 8007224:	2330      	movle	r3, #48	@ 0x30
 8007226:	f806 3c01 	strble.w	r3, [r6, #-1]
 800722a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800722e:	1b92      	subs	r2, r2, r6
 8007230:	6122      	str	r2, [r4, #16]
 8007232:	f8cd a000 	str.w	sl, [sp]
 8007236:	464b      	mov	r3, r9
 8007238:	aa03      	add	r2, sp, #12
 800723a:	4621      	mov	r1, r4
 800723c:	4640      	mov	r0, r8
 800723e:	f7ff fee7 	bl	8007010 <_printf_common>
 8007242:	3001      	adds	r0, #1
 8007244:	d14a      	bne.n	80072dc <_printf_i+0x1f0>
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	b004      	add	sp, #16
 800724c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	f043 0320 	orr.w	r3, r3, #32
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	4832      	ldr	r0, [pc, #200]	@ (8007324 <_printf_i+0x238>)
 800725a:	2778      	movs	r7, #120	@ 0x78
 800725c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	6831      	ldr	r1, [r6, #0]
 8007264:	061f      	lsls	r7, r3, #24
 8007266:	f851 5b04 	ldr.w	r5, [r1], #4
 800726a:	d402      	bmi.n	8007272 <_printf_i+0x186>
 800726c:	065f      	lsls	r7, r3, #25
 800726e:	bf48      	it	mi
 8007270:	b2ad      	uxthmi	r5, r5
 8007272:	6031      	str	r1, [r6, #0]
 8007274:	07d9      	lsls	r1, r3, #31
 8007276:	bf44      	itt	mi
 8007278:	f043 0320 	orrmi.w	r3, r3, #32
 800727c:	6023      	strmi	r3, [r4, #0]
 800727e:	b11d      	cbz	r5, 8007288 <_printf_i+0x19c>
 8007280:	2310      	movs	r3, #16
 8007282:	e7ad      	b.n	80071e0 <_printf_i+0xf4>
 8007284:	4826      	ldr	r0, [pc, #152]	@ (8007320 <_printf_i+0x234>)
 8007286:	e7e9      	b.n	800725c <_printf_i+0x170>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	f023 0320 	bic.w	r3, r3, #32
 800728e:	6023      	str	r3, [r4, #0]
 8007290:	e7f6      	b.n	8007280 <_printf_i+0x194>
 8007292:	4616      	mov	r6, r2
 8007294:	e7bd      	b.n	8007212 <_printf_i+0x126>
 8007296:	6833      	ldr	r3, [r6, #0]
 8007298:	6825      	ldr	r5, [r4, #0]
 800729a:	6961      	ldr	r1, [r4, #20]
 800729c:	1d18      	adds	r0, r3, #4
 800729e:	6030      	str	r0, [r6, #0]
 80072a0:	062e      	lsls	r6, r5, #24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	d501      	bpl.n	80072aa <_printf_i+0x1be>
 80072a6:	6019      	str	r1, [r3, #0]
 80072a8:	e002      	b.n	80072b0 <_printf_i+0x1c4>
 80072aa:	0668      	lsls	r0, r5, #25
 80072ac:	d5fb      	bpl.n	80072a6 <_printf_i+0x1ba>
 80072ae:	8019      	strh	r1, [r3, #0]
 80072b0:	2300      	movs	r3, #0
 80072b2:	6123      	str	r3, [r4, #16]
 80072b4:	4616      	mov	r6, r2
 80072b6:	e7bc      	b.n	8007232 <_printf_i+0x146>
 80072b8:	6833      	ldr	r3, [r6, #0]
 80072ba:	1d1a      	adds	r2, r3, #4
 80072bc:	6032      	str	r2, [r6, #0]
 80072be:	681e      	ldr	r6, [r3, #0]
 80072c0:	6862      	ldr	r2, [r4, #4]
 80072c2:	2100      	movs	r1, #0
 80072c4:	4630      	mov	r0, r6
 80072c6:	f7f8 ff83 	bl	80001d0 <memchr>
 80072ca:	b108      	cbz	r0, 80072d0 <_printf_i+0x1e4>
 80072cc:	1b80      	subs	r0, r0, r6
 80072ce:	6060      	str	r0, [r4, #4]
 80072d0:	6863      	ldr	r3, [r4, #4]
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	2300      	movs	r3, #0
 80072d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072da:	e7aa      	b.n	8007232 <_printf_i+0x146>
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	4632      	mov	r2, r6
 80072e0:	4649      	mov	r1, r9
 80072e2:	4640      	mov	r0, r8
 80072e4:	47d0      	blx	sl
 80072e6:	3001      	adds	r0, #1
 80072e8:	d0ad      	beq.n	8007246 <_printf_i+0x15a>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	079b      	lsls	r3, r3, #30
 80072ee:	d413      	bmi.n	8007318 <_printf_i+0x22c>
 80072f0:	68e0      	ldr	r0, [r4, #12]
 80072f2:	9b03      	ldr	r3, [sp, #12]
 80072f4:	4298      	cmp	r0, r3
 80072f6:	bfb8      	it	lt
 80072f8:	4618      	movlt	r0, r3
 80072fa:	e7a6      	b.n	800724a <_printf_i+0x15e>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4632      	mov	r2, r6
 8007300:	4649      	mov	r1, r9
 8007302:	4640      	mov	r0, r8
 8007304:	47d0      	blx	sl
 8007306:	3001      	adds	r0, #1
 8007308:	d09d      	beq.n	8007246 <_printf_i+0x15a>
 800730a:	3501      	adds	r5, #1
 800730c:	68e3      	ldr	r3, [r4, #12]
 800730e:	9903      	ldr	r1, [sp, #12]
 8007310:	1a5b      	subs	r3, r3, r1
 8007312:	42ab      	cmp	r3, r5
 8007314:	dcf2      	bgt.n	80072fc <_printf_i+0x210>
 8007316:	e7eb      	b.n	80072f0 <_printf_i+0x204>
 8007318:	2500      	movs	r5, #0
 800731a:	f104 0619 	add.w	r6, r4, #25
 800731e:	e7f5      	b.n	800730c <_printf_i+0x220>
 8007320:	0800798d 	.word	0x0800798d
 8007324:	0800799e 	.word	0x0800799e

08007328 <memmove>:
 8007328:	4288      	cmp	r0, r1
 800732a:	b510      	push	{r4, lr}
 800732c:	eb01 0402 	add.w	r4, r1, r2
 8007330:	d902      	bls.n	8007338 <memmove+0x10>
 8007332:	4284      	cmp	r4, r0
 8007334:	4623      	mov	r3, r4
 8007336:	d807      	bhi.n	8007348 <memmove+0x20>
 8007338:	1e43      	subs	r3, r0, #1
 800733a:	42a1      	cmp	r1, r4
 800733c:	d008      	beq.n	8007350 <memmove+0x28>
 800733e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007346:	e7f8      	b.n	800733a <memmove+0x12>
 8007348:	4402      	add	r2, r0
 800734a:	4601      	mov	r1, r0
 800734c:	428a      	cmp	r2, r1
 800734e:	d100      	bne.n	8007352 <memmove+0x2a>
 8007350:	bd10      	pop	{r4, pc}
 8007352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800735a:	e7f7      	b.n	800734c <memmove+0x24>

0800735c <_sbrk_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4d06      	ldr	r5, [pc, #24]	@ (8007378 <_sbrk_r+0x1c>)
 8007360:	2300      	movs	r3, #0
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	602b      	str	r3, [r5, #0]
 8007368:	f7fa fa2c 	bl	80017c4 <_sbrk>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d102      	bne.n	8007376 <_sbrk_r+0x1a>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	b103      	cbz	r3, 8007376 <_sbrk_r+0x1a>
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	200042ac 	.word	0x200042ac

0800737c <_realloc_r>:
 800737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007380:	4607      	mov	r7, r0
 8007382:	4614      	mov	r4, r2
 8007384:	460d      	mov	r5, r1
 8007386:	b921      	cbnz	r1, 8007392 <_realloc_r+0x16>
 8007388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800738c:	4611      	mov	r1, r2
 800738e:	f7ff bc5b 	b.w	8006c48 <_malloc_r>
 8007392:	b92a      	cbnz	r2, 80073a0 <_realloc_r+0x24>
 8007394:	f7ff fbec 	bl	8006b70 <_free_r>
 8007398:	4625      	mov	r5, r4
 800739a:	4628      	mov	r0, r5
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	f000 f81a 	bl	80073d8 <_malloc_usable_size_r>
 80073a4:	4284      	cmp	r4, r0
 80073a6:	4606      	mov	r6, r0
 80073a8:	d802      	bhi.n	80073b0 <_realloc_r+0x34>
 80073aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073ae:	d8f4      	bhi.n	800739a <_realloc_r+0x1e>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4638      	mov	r0, r7
 80073b4:	f7ff fc48 	bl	8006c48 <_malloc_r>
 80073b8:	4680      	mov	r8, r0
 80073ba:	b908      	cbnz	r0, 80073c0 <_realloc_r+0x44>
 80073bc:	4645      	mov	r5, r8
 80073be:	e7ec      	b.n	800739a <_realloc_r+0x1e>
 80073c0:	42b4      	cmp	r4, r6
 80073c2:	4622      	mov	r2, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	bf28      	it	cs
 80073c8:	4632      	movcs	r2, r6
 80073ca:	f7ff fbc3 	bl	8006b54 <memcpy>
 80073ce:	4629      	mov	r1, r5
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff fbcd 	bl	8006b70 <_free_r>
 80073d6:	e7f1      	b.n	80073bc <_realloc_r+0x40>

080073d8 <_malloc_usable_size_r>:
 80073d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073dc:	1f18      	subs	r0, r3, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfbc      	itt	lt
 80073e2:	580b      	ldrlt	r3, [r1, r0]
 80073e4:	18c0      	addlt	r0, r0, r3
 80073e6:	4770      	bx	lr

080073e8 <_init>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr

080073f4 <_fini>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr
