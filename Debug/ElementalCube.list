
ElementalCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00042ac4  0800fb44  0800fb44  00010b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08052608  08052608  000540fc  2**0
                  CONTENTS
  4 .ARM          00000008  08052608  08052608  00053608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08052610  08052610  000540fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08052610  08052610  00053610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08052614  08052614  00053614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08052618  00054000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000540fc  2**0
                  CONTENTS
 10 .bss          00004340  200000fc  200000fc  000540fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000443c  2000443c  000540fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000540fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022083  00000000  00000000  0005412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055e6  00000000  00000000  000761af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f88  00000000  00000000  0007b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000184e  00000000  00000000  0007d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027f5d  00000000  00000000  0007ef6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027246  00000000  00000000  000a6ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1aed  00000000  00000000  000ce111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001afbfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008ea4  00000000  00000000  001afc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001b8ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb2c 	.word	0x0800fb2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	0800fb2c 	.word	0x0800fb2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b988 	b.w	8000c74 <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9d08      	ldr	r5, [sp, #32]
 8000982:	468e      	mov	lr, r1
 8000984:	4604      	mov	r4, r0
 8000986:	4688      	mov	r8, r1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d14a      	bne.n	8000a22 <__udivmoddi4+0xa6>
 800098c:	428a      	cmp	r2, r1
 800098e:	4617      	mov	r7, r2
 8000990:	d962      	bls.n	8000a58 <__udivmoddi4+0xdc>
 8000992:	fab2 f682 	clz	r6, r2
 8000996:	b14e      	cbz	r6, 80009ac <__udivmoddi4+0x30>
 8000998:	f1c6 0320 	rsb	r3, r6, #32
 800099c:	fa01 f806 	lsl.w	r8, r1, r6
 80009a0:	fa20 f303 	lsr.w	r3, r0, r3
 80009a4:	40b7      	lsls	r7, r6
 80009a6:	ea43 0808 	orr.w	r8, r3, r8
 80009aa:	40b4      	lsls	r4, r6
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	fa1f fc87 	uxth.w	ip, r7
 80009b4:	fbb8 f1fe 	udiv	r1, r8, lr
 80009b8:	0c23      	lsrs	r3, r4, #16
 80009ba:	fb0e 8811 	mls	r8, lr, r1, r8
 80009be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009c2:	fb01 f20c 	mul.w	r2, r1, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d909      	bls.n	80009de <__udivmoddi4+0x62>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f101 30ff 	add.w	r0, r1, #4294967295
 80009d0:	f080 80ea 	bcs.w	8000ba8 <__udivmoddi4+0x22c>
 80009d4:	429a      	cmp	r2, r3
 80009d6:	f240 80e7 	bls.w	8000ba8 <__udivmoddi4+0x22c>
 80009da:	3902      	subs	r1, #2
 80009dc:	443b      	add	r3, r7
 80009de:	1a9a      	subs	r2, r3, r2
 80009e0:	b2a3      	uxth	r3, r4
 80009e2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009e6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009ee:	fb00 fc0c 	mul.w	ip, r0, ip
 80009f2:	459c      	cmp	ip, r3
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x8e>
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80009fc:	f080 80d6 	bcs.w	8000bac <__udivmoddi4+0x230>
 8000a00:	459c      	cmp	ip, r3
 8000a02:	f240 80d3 	bls.w	8000bac <__udivmoddi4+0x230>
 8000a06:	443b      	add	r3, r7
 8000a08:	3802      	subs	r0, #2
 8000a0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a0e:	eba3 030c 	sub.w	r3, r3, ip
 8000a12:	2100      	movs	r1, #0
 8000a14:	b11d      	cbz	r5, 8000a1e <__udivmoddi4+0xa2>
 8000a16:	40f3      	lsrs	r3, r6
 8000a18:	2200      	movs	r2, #0
 8000a1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d905      	bls.n	8000a32 <__udivmoddi4+0xb6>
 8000a26:	b10d      	cbz	r5, 8000a2c <__udivmoddi4+0xb0>
 8000a28:	e9c5 0100 	strd	r0, r1, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	e7f5      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000a32:	fab3 f183 	clz	r1, r3
 8000a36:	2900      	cmp	r1, #0
 8000a38:	d146      	bne.n	8000ac8 <__udivmoddi4+0x14c>
 8000a3a:	4573      	cmp	r3, lr
 8000a3c:	d302      	bcc.n	8000a44 <__udivmoddi4+0xc8>
 8000a3e:	4282      	cmp	r2, r0
 8000a40:	f200 8105 	bhi.w	8000c4e <__udivmoddi4+0x2d2>
 8000a44:	1a84      	subs	r4, r0, r2
 8000a46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	4690      	mov	r8, r2
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d0e5      	beq.n	8000a1e <__udivmoddi4+0xa2>
 8000a52:	e9c5 4800 	strd	r4, r8, [r5]
 8000a56:	e7e2      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	f000 8090 	beq.w	8000b7e <__udivmoddi4+0x202>
 8000a5e:	fab2 f682 	clz	r6, r2
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	f040 80a4 	bne.w	8000bb0 <__udivmoddi4+0x234>
 8000a68:	1a8a      	subs	r2, r1, r2
 8000a6a:	0c03      	lsrs	r3, r0, #16
 8000a6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a70:	b280      	uxth	r0, r0
 8000a72:	b2bc      	uxth	r4, r7
 8000a74:	2101      	movs	r1, #1
 8000a76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a82:	fb04 f20c 	mul.w	r2, r4, ip
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d907      	bls.n	8000a9a <__udivmoddi4+0x11e>
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x11c>
 8000a92:	429a      	cmp	r2, r3
 8000a94:	f200 80e0 	bhi.w	8000c58 <__udivmoddi4+0x2dc>
 8000a98:	46c4      	mov	ip, r8
 8000a9a:	1a9b      	subs	r3, r3, r2
 8000a9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000aa0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000aa4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000aa8:	fb02 f404 	mul.w	r4, r2, r4
 8000aac:	429c      	cmp	r4, r3
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0x144>
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0x142>
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	f200 80ca 	bhi.w	8000c52 <__udivmoddi4+0x2d6>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	1b1b      	subs	r3, r3, r4
 8000ac2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ac6:	e7a5      	b.n	8000a14 <__udivmoddi4+0x98>
 8000ac8:	f1c1 0620 	rsb	r6, r1, #32
 8000acc:	408b      	lsls	r3, r1
 8000ace:	fa22 f706 	lsr.w	r7, r2, r6
 8000ad2:	431f      	orrs	r7, r3
 8000ad4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ad8:	fa20 f306 	lsr.w	r3, r0, r6
 8000adc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ae0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ae4:	4323      	orrs	r3, r4
 8000ae6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aea:	fa1f fc87 	uxth.w	ip, r7
 8000aee:	fbbe f0f9 	udiv	r0, lr, r9
 8000af2:	0c1c      	lsrs	r4, r3, #16
 8000af4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000af8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000afc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	fa02 f201 	lsl.w	r2, r2, r1
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x1a0>
 8000b08:	193c      	adds	r4, r7, r4
 8000b0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b0e:	f080 809c 	bcs.w	8000c4a <__udivmoddi4+0x2ce>
 8000b12:	45a6      	cmp	lr, r4
 8000b14:	f240 8099 	bls.w	8000c4a <__udivmoddi4+0x2ce>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	443c      	add	r4, r7
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	fa1f fe83 	uxth.w	lr, r3
 8000b24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b28:	fb09 4413 	mls	r4, r9, r3, r4
 8000b2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b34:	45a4      	cmp	ip, r4
 8000b36:	d908      	bls.n	8000b4a <__udivmoddi4+0x1ce>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b3e:	f080 8082 	bcs.w	8000c46 <__udivmoddi4+0x2ca>
 8000b42:	45a4      	cmp	ip, r4
 8000b44:	d97f      	bls.n	8000c46 <__udivmoddi4+0x2ca>
 8000b46:	3b02      	subs	r3, #2
 8000b48:	443c      	add	r4, r7
 8000b4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b56:	4564      	cmp	r4, ip
 8000b58:	4673      	mov	r3, lr
 8000b5a:	46e1      	mov	r9, ip
 8000b5c:	d362      	bcc.n	8000c24 <__udivmoddi4+0x2a8>
 8000b5e:	d05f      	beq.n	8000c20 <__udivmoddi4+0x2a4>
 8000b60:	b15d      	cbz	r5, 8000b7a <__udivmoddi4+0x1fe>
 8000b62:	ebb8 0203 	subs.w	r2, r8, r3
 8000b66:	eb64 0409 	sbc.w	r4, r4, r9
 8000b6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000b72:	431e      	orrs	r6, r3
 8000b74:	40cc      	lsrs	r4, r1
 8000b76:	e9c5 6400 	strd	r6, r4, [r5]
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	e74f      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000b7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b82:	0c01      	lsrs	r1, r0, #16
 8000b84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b88:	b280      	uxth	r0, r0
 8000b8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4638      	mov	r0, r7
 8000b92:	463c      	mov	r4, r7
 8000b94:	46b8      	mov	r8, r7
 8000b96:	46be      	mov	lr, r7
 8000b98:	2620      	movs	r6, #32
 8000b9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ba2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ba6:	e766      	b.n	8000a76 <__udivmoddi4+0xfa>
 8000ba8:	4601      	mov	r1, r0
 8000baa:	e718      	b.n	80009de <__udivmoddi4+0x62>
 8000bac:	4610      	mov	r0, r2
 8000bae:	e72c      	b.n	8000a0a <__udivmoddi4+0x8e>
 8000bb0:	f1c6 0220 	rsb	r2, r6, #32
 8000bb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000bb8:	40b7      	lsls	r7, r6
 8000bba:	40b1      	lsls	r1, r6
 8000bbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000bca:	b2bc      	uxth	r4, r7
 8000bcc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000bd0:	0c11      	lsrs	r1, r2, #16
 8000bd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd6:	fb08 f904 	mul.w	r9, r8, r4
 8000bda:	40b0      	lsls	r0, r6
 8000bdc:	4589      	cmp	r9, r1
 8000bde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000be2:	b280      	uxth	r0, r0
 8000be4:	d93e      	bls.n	8000c64 <__udivmoddi4+0x2e8>
 8000be6:	1879      	adds	r1, r7, r1
 8000be8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000bec:	d201      	bcs.n	8000bf2 <__udivmoddi4+0x276>
 8000bee:	4589      	cmp	r9, r1
 8000bf0:	d81f      	bhi.n	8000c32 <__udivmoddi4+0x2b6>
 8000bf2:	eba1 0109 	sub.w	r1, r1, r9
 8000bf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bfa:	fb09 f804 	mul.w	r8, r9, r4
 8000bfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c02:	b292      	uxth	r2, r2
 8000c04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c08:	4542      	cmp	r2, r8
 8000c0a:	d229      	bcs.n	8000c60 <__udivmoddi4+0x2e4>
 8000c0c:	18ba      	adds	r2, r7, r2
 8000c0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c12:	d2c4      	bcs.n	8000b9e <__udivmoddi4+0x222>
 8000c14:	4542      	cmp	r2, r8
 8000c16:	d2c2      	bcs.n	8000b9e <__udivmoddi4+0x222>
 8000c18:	f1a9 0102 	sub.w	r1, r9, #2
 8000c1c:	443a      	add	r2, r7
 8000c1e:	e7be      	b.n	8000b9e <__udivmoddi4+0x222>
 8000c20:	45f0      	cmp	r8, lr
 8000c22:	d29d      	bcs.n	8000b60 <__udivmoddi4+0x1e4>
 8000c24:	ebbe 0302 	subs.w	r3, lr, r2
 8000c28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c2c:	3801      	subs	r0, #1
 8000c2e:	46e1      	mov	r9, ip
 8000c30:	e796      	b.n	8000b60 <__udivmoddi4+0x1e4>
 8000c32:	eba7 0909 	sub.w	r9, r7, r9
 8000c36:	4449      	add	r1, r9
 8000c38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c40:	fb09 f804 	mul.w	r8, r9, r4
 8000c44:	e7db      	b.n	8000bfe <__udivmoddi4+0x282>
 8000c46:	4673      	mov	r3, lr
 8000c48:	e77f      	b.n	8000b4a <__udivmoddi4+0x1ce>
 8000c4a:	4650      	mov	r0, sl
 8000c4c:	e766      	b.n	8000b1c <__udivmoddi4+0x1a0>
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e6fd      	b.n	8000a4e <__udivmoddi4+0xd2>
 8000c52:	443b      	add	r3, r7
 8000c54:	3a02      	subs	r2, #2
 8000c56:	e733      	b.n	8000ac0 <__udivmoddi4+0x144>
 8000c58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c5c:	443b      	add	r3, r7
 8000c5e:	e71c      	b.n	8000a9a <__udivmoddi4+0x11e>
 8000c60:	4649      	mov	r1, r9
 8000c62:	e79c      	b.n	8000b9e <__udivmoddi4+0x222>
 8000c64:	eba1 0109 	sub.w	r1, r1, r9
 8000c68:	46c4      	mov	ip, r8
 8000c6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c6e:	fb09 f804 	mul.w	r8, r9, r4
 8000c72:	e7c4      	b.n	8000bfe <__udivmoddi4+0x282>

08000c74 <__aeabi_idiv0>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <ILI9488_Select>:
/* vim: set ai et ts:4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9488.h"

// Funções estáticas (privadas para este arquivo)
static void ILI9488_Select() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <ILI9488_Select+0x14>)
 8000c82:	f003 f94b 	bl	8003f1c <HAL_GPIO_WritePin>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40020000 	.word	0x40020000

08000c90 <ILI9488_Unselect>:

void ILI9488_Unselect() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_CS_GPIO_Port, ILI9488_CS_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2110      	movs	r1, #16
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <ILI9488_Unselect+0x14>)
 8000c9a:	f003 f93f 	bl	8003f1c <HAL_GPIO_WritePin>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <ILI9488_Reset>:

static void ILI9488_Reset() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <ILI9488_Reset+0x28>)
 8000cb2:	f003 f933 	bl	8003f1c <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000cb6:	2032      	movs	r0, #50	@ 0x32
 8000cb8:	f002 fbb0 	bl	800341c <HAL_Delay>
    HAL_GPIO_WritePin(ILI9488_RES_GPIO_Port, ILI9488_RES_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4803      	ldr	r0, [pc, #12]	@ (8000cd0 <ILI9488_Reset+0x28>)
 8000cc2:	f003 f92b 	bl	8003f1c <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8000cc6:	2078      	movs	r0, #120	@ 0x78
 8000cc8:	f002 fba8 	bl	800341c <HAL_Delay>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <ILI9488_WriteCommand>:

static void ILI9488_WriteCommand(uint8_t cmd) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <ILI9488_WriteCommand+0x2c>)
 8000ce4:	f003 f91a 	bl	8003f1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ce8:	1df9      	adds	r1, r7, #7
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <ILI9488_WriteCommand+0x30>)
 8000cf2:	f008 f96c 	bl	8008fce <HAL_SPI_Transmit>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40020400 	.word	0x40020400
 8000d04:	20000444 	.word	0x20000444

08000d08 <ILI9488_WriteData>:

static void ILI9488_WriteData(uint8_t* buff, size_t buff_size) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2102      	movs	r1, #2
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <ILI9488_WriteData+0x2c>)
 8000d18:	f003 f900 	bl	8003f1c <HAL_GPIO_WritePin>
    // Não otimizar para chunks pequenos como 1 ou 3 bytes
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <ILI9488_WriteData+0x30>)
 8000d28:	f008 f951 	bl	8008fce <HAL_SPI_Transmit>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40020400 	.word	0x40020400
 8000d38:	20000444 	.word	0x20000444

08000d3c <ILI9488_WriteSmallData>:

static void ILI9488_WriteSmallData(uint8_t data) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <ILI9488_WriteSmallData+0x2c>)
 8000d4c:	f003 f8e6 	bl	8003f1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9488_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000d50:	1df9      	adds	r1, r7, #7
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	2201      	movs	r2, #1
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <ILI9488_WriteSmallData+0x30>)
 8000d5a:	f008 f938 	bl	8008fce <HAL_SPI_Transmit>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	20000444 	.word	0x20000444

08000d70 <ILI9488_SetAddressWindow>:


static void ILI9488_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4604      	mov	r4, r0
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4623      	mov	r3, r4
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	4603      	mov	r3, r0
 8000d84:	80bb      	strh	r3, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	807b      	strh	r3, [r7, #2]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	803b      	strh	r3, [r7, #0]
    // Column Address Set
    ILI9488_WriteCommand(0x2A);
 8000d8e:	202a      	movs	r0, #42	@ 0x2a
 8000d90:	f7ff ffa0 	bl	8000cd4 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	0a1b      	lsrs	r3, r3, #8
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	733b      	strb	r3, [r7, #12]
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	737b      	strb	r3, [r7, #13]
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	73bb      	strb	r3, [r7, #14]
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	73fb      	strb	r3, [r7, #15]
        ILI9488_WriteData(data, sizeof(data));
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2104      	movs	r1, #4
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffa4 	bl	8000d08 <ILI9488_WriteData>
    }
    // Page Address Set
    ILI9488_WriteCommand(0x2B);
 8000dc0:	202b      	movs	r0, #43	@ 0x2b
 8000dc2:	f7ff ff87 	bl	8000cd4 <ILI9488_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	723b      	strb	r3, [r7, #8]
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	727b      	strb	r3, [r7, #9]
 8000dd6:	883b      	ldrh	r3, [r7, #0]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	72bb      	strb	r3, [r7, #10]
 8000de0:	883b      	ldrh	r3, [r7, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	72fb      	strb	r3, [r7, #11]
        ILI9488_WriteData(data, sizeof(data));
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2104      	movs	r1, #4
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff8b 	bl	8000d08 <ILI9488_WriteData>
    }
    // Memory Write
    ILI9488_WriteCommand(0x2C);
 8000df2:	202c      	movs	r0, #44	@ 0x2c
 8000df4:	f7ff ff6e 	bl	8000cd4 <ILI9488_WriteCommand>
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd90      	pop	{r4, r7, pc}

08000e00 <ILI9488_Init>:

void ILI9488_Init() {
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b095      	sub	sp, #84	@ 0x54
 8000e04:	af00      	add	r7, sp, #0
    ILI9488_Select();
 8000e06:	f7ff ff37 	bl	8000c78 <ILI9488_Select>
    ILI9488_Reset();
 8000e0a:	f7ff ff4d 	bl	8000ca8 <ILI9488_Reset>

    ILI9488_WriteCommand(0xE0); // Positive Gamma Control
 8000e0e:	20e0      	movs	r0, #224	@ 0xe0
 8000e10:	f7ff ff60 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x03, 0x09, 0x08, 0x16, 0x0A, 0x3F, 0x78, 0x4C, 0x09, 0x0A, 0x08, 0x16, 0x1A, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 8000e14:	4b5b      	ldr	r3, [pc, #364]	@ (8000f84 <ILI9488_Init+0x184>)
 8000e16:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000e1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e1c:	c407      	stmia	r4!, {r0, r1, r2}
 8000e1e:	8023      	strh	r3, [r4, #0]
 8000e20:	3402      	adds	r4, #2
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	7023      	strb	r3, [r4, #0]
 8000e26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff6b 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE1); // Negative Gamma Control
 8000e32:	20e1      	movs	r0, #225	@ 0xe1
 8000e34:	f7ff ff4e 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x16, 0x19, 0x03, 0x0F, 0x05, 0x32, 0x45, 0x46, 0x04, 0x0E, 0x0D, 0x35, 0x37, 0x0F}; ILI9488_WriteData(data, sizeof(data)); }
 8000e38:	4b53      	ldr	r3, [pc, #332]	@ (8000f88 <ILI9488_Init+0x188>)
 8000e3a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e40:	c407      	stmia	r4!, {r0, r1, r2}
 8000e42:	8023      	strh	r3, [r4, #0]
 8000e44:	3402      	adds	r4, #2
 8000e46:	0c1b      	lsrs	r3, r3, #16
 8000e48:	7023      	strb	r3, [r4, #0]
 8000e4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e4e:	210f      	movs	r1, #15
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff59 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC0); // Power Control 1
 8000e56:	20c0      	movs	r0, #192	@ 0xc0
 8000e58:	f7ff ff3c 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x17, 0x15}; ILI9488_WriteData(data, sizeof(data)); }
 8000e5c:	f241 5317 	movw	r3, #5399	@ 0x1517
 8000e60:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e66:	2102      	movs	r1, #2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff4d 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC1); // Power Control 2
 8000e6e:	20c1      	movs	r0, #193	@ 0xc1
 8000e70:	f7ff ff30 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x41}; ILI9488_WriteData(data, sizeof(data)); }
 8000e74:	2341      	movs	r3, #65	@ 0x41
 8000e76:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff41 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xC5); // VCOM Control
 8000e86:	20c5      	movs	r0, #197	@ 0xc5
 8000e88:	f7ff ff24 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00, 0x12, 0x80}; ILI9488_WriteData(data, sizeof(data)); }
 8000e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f8c <ILI9488_Init+0x18c>)
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	4611      	mov	r1, r2
 8000e96:	8019      	strh	r1, [r3, #0]
 8000e98:	3302      	adds	r3, #2
 8000e9a:	0c12      	lsrs	r2, r2, #16
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff2f 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0x36); // Memory Access Control
 8000eaa:	2036      	movs	r0, #54	@ 0x36
 8000eac:	f7ff ff12 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {ILI9488_ROTATION}; ILI9488_WriteData(data, sizeof(data)); }
 8000eb0:	2328      	movs	r3, #40	@ 0x28
 8000eb2:	f887 3020 	strb.w	r3, [r7, #32]
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff23 	bl	8000d08 <ILI9488_WriteData>
    
    // ============ MUDANÇA IMPORTANTE ANTERIOR ============
    ILI9488_WriteCommand(0x3A); // Interface Pixel Format
 8000ec2:	203a      	movs	r0, #58	@ 0x3a
 8000ec4:	f7ff ff06 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x66}; ILI9488_WriteSmallData(data[0]); } // 0x66 para 18 bits/pixel
 8000ec8:	2366      	movs	r3, #102	@ 0x66
 8000eca:	773b      	strb	r3, [r7, #28]
 8000ecc:	7f3b      	ldrb	r3, [r7, #28]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff34 	bl	8000d3c <ILI9488_WriteSmallData>

    ILI9488_WriteCommand(0xB0); // Interface Mode Control
 8000ed4:	20b0      	movs	r0, #176	@ 0xb0
 8000ed6:	f7ff fefd 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 8000eda:	2300      	movs	r3, #0
 8000edc:	763b      	strb	r3, [r7, #24]
 8000ede:	f107 0318 	add.w	r3, r7, #24
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff0f 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB1); // Frame Rate Control
 8000eea:	20b1      	movs	r0, #177	@ 0xb1
 8000eec:	f7ff fef2 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xB0, 0x11}; ILI9488_WriteData(data, sizeof(data)); }
 8000ef0:	f241 13b0 	movw	r3, #4528	@ 0x11b0
 8000ef4:	82bb      	strh	r3, [r7, #20]
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2102      	movs	r1, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff03 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB4); // Display Inversion Control
 8000f02:	20b4      	movs	r0, #180	@ 0xb4
 8000f04:	f7ff fee6 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02}; ILI9488_WriteData(data, sizeof(data)); }
 8000f08:	2302      	movs	r3, #2
 8000f0a:	743b      	strb	r3, [r7, #16]
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2101      	movs	r1, #1
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fef8 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xB6); // Display Function Control
 8000f18:	20b6      	movs	r0, #182	@ 0xb6
 8000f1a:	f7ff fedb 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x02, 0x02, 0x3B}; ILI9488_WriteData(data, sizeof(data)); }
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <ILI9488_Init+0x190>)
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	4611      	mov	r1, r2
 8000f28:	8019      	strh	r1, [r3, #0]
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	0c12      	lsrs	r2, r2, #16
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2103      	movs	r1, #3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fee6 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xE9); // Set Image Function
 8000f3c:	20e9      	movs	r0, #233	@ 0xe9
 8000f3e:	f7ff fec9 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0x00}; ILI9488_WriteData(data, sizeof(data)); }
 8000f42:	2300      	movs	r3, #0
 8000f44:	723b      	strb	r3, [r7, #8]
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fedb 	bl	8000d08 <ILI9488_WriteData>
    ILI9488_WriteCommand(0xF7); // Adjust Control 3
 8000f52:	20f7      	movs	r0, #247	@ 0xf7
 8000f54:	f7ff febe 	bl	8000cd4 <ILI9488_WriteCommand>
    { uint8_t data[] = {0xA9, 0x51, 0x2C, 0x82}; ILI9488_WriteData(data, sizeof(data)); }
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <ILI9488_Init+0x194>)
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fed1 	bl	8000d08 <ILI9488_WriteData>
    
    ILI9488_WriteCommand(0x11); // Sleep Out
 8000f66:	2011      	movs	r0, #17
 8000f68:	f7ff feb4 	bl	8000cd4 <ILI9488_WriteCommand>
    HAL_Delay(120);
 8000f6c:	2078      	movs	r0, #120	@ 0x78
 8000f6e:	f002 fa55 	bl	800341c <HAL_Delay>
    ILI9488_WriteCommand(0x29); // Display ON
 8000f72:	2029      	movs	r0, #41	@ 0x29
 8000f74:	f7ff feae 	bl	8000cd4 <ILI9488_WriteCommand>
    ILI9488_Unselect();
 8000f78:	f7ff fe8a 	bl	8000c90 <ILI9488_Unselect>
}
 8000f7c:	bf00      	nop
 8000f7e:	3754      	adds	r7, #84	@ 0x54
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd90      	pop	{r4, r7, pc}
 8000f84:	0800fb44 	.word	0x0800fb44
 8000f88:	0800fb54 	.word	0x0800fb54
 8000f8c:	0800fb64 	.word	0x0800fb64
 8000f90:	0800fb68 	.word	0x0800fb68
 8000f94:	822c51a9 	.word	0x822c51a9

08000f98 <ILI9488_WriteChar>:
    
    ILI9488_Unselect();
}

// ============== NOVA FUNÇÃO DE ESCRITA DE CARACTERE (3 BYTES) ==============
static void ILI9488_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000f98:	b082      	sub	sp, #8
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b08a      	sub	sp, #40	@ 0x28
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	80bb      	strh	r3, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ILI9488_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000fae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	440b      	add	r3, r1
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	88b9      	ldrh	r1, [r7, #4]
 8000fd0:	88f8      	ldrh	r0, [r7, #6]
 8000fd2:	f7ff fecd 	bl	8000d70 <ILI9488_SetAddressWindow>

    // Converte as cores de background e foreground para 3 bytes uma única vez
    uint8_t color_r = ((color >> 11) << 3);
 8000fd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000fd8:	0adb      	lsrs	r3, r3, #11
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	77fb      	strb	r3, [r7, #31]
    uint8_t color_g = ((color >> 5) & 0x3F) << 2;
 8000fe2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000fe4:	095b      	lsrs	r3, r3, #5
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	77bb      	strb	r3, [r7, #30]
    uint8_t color_b = (color & 0x1F) << 3;
 8000fee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	777b      	strb	r3, [r7, #29]

    uint8_t bgcolor_r = ((bgcolor >> 11) << 3);
 8000ff6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000ffa:	0adb      	lsrs	r3, r3, #11
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	773b      	strb	r3, [r7, #28]
    uint8_t bgcolor_g = ((bgcolor >> 5) & 0x3F) << 2;
 8001004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001008:	095b      	lsrs	r3, r3, #5
 800100a:	b29b      	uxth	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	76fb      	strb	r3, [r7, #27]
    uint8_t bgcolor_b = (bgcolor & 0x1F) << 3;
 8001012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001016:	b2db      	uxtb	r3, r3
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	76bb      	strb	r3, [r7, #26]
    
    for(i = 0; i < font.height; i++) {
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001020:	e03d      	b.n	800109e <ILI9488_WriteChar+0x106>
        b = font.data[(ch - 32) * font.height + i];
 8001022:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	3b20      	subs	r3, #32
 8001028:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800102c:	fb01 f303 	mul.w	r3, r1, r3
 8001030:	4619      	mov	r1, r3
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	440b      	add	r3, r1
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
 8001042:	e023      	b.n	800108c <ILI9488_WriteChar+0xf4>
            if((b << j) & 0x8000) {
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00c      	beq.n	800106e <ILI9488_WriteChar+0xd6>
                uint8_t pixel[] = {color_r, color_g, color_b};
 8001054:	7ffb      	ldrb	r3, [r7, #31]
 8001056:	743b      	strb	r3, [r7, #16]
 8001058:	7fbb      	ldrb	r3, [r7, #30]
 800105a:	747b      	strb	r3, [r7, #17]
 800105c:	7f7b      	ldrb	r3, [r7, #29]
 800105e:	74bb      	strb	r3, [r7, #18]
                ILI9488_WriteData(pixel, sizeof(pixel));
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2103      	movs	r1, #3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe4e 	bl	8000d08 <ILI9488_WriteData>
 800106c:	e00b      	b.n	8001086 <ILI9488_WriteChar+0xee>
            } else {
                uint8_t pixel[] = {bgcolor_r, bgcolor_g, bgcolor_b};
 800106e:	7f3b      	ldrb	r3, [r7, #28]
 8001070:	733b      	strb	r3, [r7, #12]
 8001072:	7efb      	ldrb	r3, [r7, #27]
 8001074:	737b      	strb	r3, [r7, #13]
 8001076:	7ebb      	ldrb	r3, [r7, #26]
 8001078:	73bb      	strb	r3, [r7, #14]
                ILI9488_WriteData(pixel, sizeof(pixel));
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2103      	movs	r1, #3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fe41 	bl	8000d08 <ILI9488_WriteData>
        for(j = 0; j < font.width; j++) {
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	3301      	adds	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001090:	461a      	mov	r2, r3
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	4293      	cmp	r3, r2
 8001096:	d3d5      	bcc.n	8001044 <ILI9488_WriteChar+0xac>
    for(i = 0; i < font.height; i++) {
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	3301      	adds	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
 800109e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80010a2:	461a      	mov	r2, r3
 80010a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d3bb      	bcc.n	8001022 <ILI9488_WriteChar+0x8a>
            }
        }
    }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b6:	b002      	add	sp, #8
 80010b8:	4770      	bx	lr
	...

080010bc <ILI9488_FillRectangle>:

// ============== NOVA FUNÇÃO DE PREENCHER RETÂNGULO (3 BYTES) ==============
void ILI9488_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	4603      	mov	r3, r0
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	807b      	strh	r3, [r7, #2]
 80010d6:	4613      	mov	r3, r2
 80010d8:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80010e0:	f080 8083 	bcs.w	80011ea <ILI9488_FillRectangle+0x12e>
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80010ea:	d27e      	bcs.n	80011ea <ILI9488_FillRectangle+0x12e>
    if((x + w) > ILI9488_WIDTH) w = ILI9488_WIDTH - x;
 80010ec:	88fa      	ldrh	r2, [r7, #6]
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	4413      	add	r3, r2
 80010f2:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80010f6:	dd03      	ble.n	8001100 <ILI9488_FillRectangle+0x44>
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 80010fe:	807b      	strh	r3, [r7, #2]
    if((y + h) > ILI9488_HEIGHT) h = ILI9488_HEIGHT - y;
 8001100:	88ba      	ldrh	r2, [r7, #4]
 8001102:	883b      	ldrh	r3, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800110a:	dd03      	ble.n	8001114 <ILI9488_FillRectangle+0x58>
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001112:	803b      	strh	r3, [r7, #0]

    ILI9488_Select();
 8001114:	f7ff fdb0 	bl	8000c78 <ILI9488_Select>
    ILI9488_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	4413      	add	r3, r2
 800111e:	b29b      	uxth	r3, r3
 8001120:	3b01      	subs	r3, #1
 8001122:	b29c      	uxth	r4, r3
 8001124:	88ba      	ldrh	r2, [r7, #4]
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	4413      	add	r3, r2
 800112a:	b29b      	uxth	r3, r3
 800112c:	3b01      	subs	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	88b9      	ldrh	r1, [r7, #4]
 8001132:	88f8      	ldrh	r0, [r7, #6]
 8001134:	4622      	mov	r2, r4
 8001136:	f7ff fe1b 	bl	8000d70 <ILI9488_SetAddressWindow>
    
    // Converte a cor para 3 bytes
    uint8_t r = (color >> 11) & 0x1F;
 800113a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800113c:	0adb      	lsrs	r3, r3, #11
 800113e:	b29b      	uxth	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	74fb      	strb	r3, [r7, #19]
    uint8_t g = (color >> 5) & 0x3F;
 8001148:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	b29b      	uxth	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001154:	74bb      	strb	r3, [r7, #18]
    uint8_t b = color & 0x1F;
 8001156:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	747b      	strb	r3, [r7, #17]

    r = (r << 3) | (r >> 2);
 8001160:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	b25a      	sxtb	r2, r3
 8001168:	7cfb      	ldrb	r3, [r7, #19]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	b25b      	sxtb	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	74fb      	strb	r3, [r7, #19]
    g = (g << 2) | (g >> 4);
 8001176:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	b25a      	sxtb	r2, r3
 800117e:	7cbb      	ldrb	r3, [r7, #18]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	74bb      	strb	r3, [r7, #18]
    b = (b << 3) | (b >> 2);
 800118c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	b25a      	sxtb	r2, r3
 8001194:	7c7b      	ldrb	r3, [r7, #17]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	b25b      	sxtb	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	747b      	strb	r3, [r7, #17]
    
    uint8_t data[] = {r, g, b};
 80011a2:	7cfb      	ldrb	r3, [r7, #19]
 80011a4:	733b      	strb	r3, [r7, #12]
 80011a6:	7cbb      	ldrb	r3, [r7, #18]
 80011a8:	737b      	strb	r3, [r7, #13]
 80011aa:	7c7b      	ldrb	r3, [r7, #17]
 80011ac:	73bb      	strb	r3, [r7, #14]
    
    HAL_GPIO_WritePin(ILI9488_DC_GPIO_Port, ILI9488_DC_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2102      	movs	r1, #2
 80011b2:	4810      	ldr	r0, [pc, #64]	@ (80011f4 <ILI9488_FillRectangle+0x138>)
 80011b4:	f002 feb2 	bl	8003f1c <HAL_GPIO_WritePin>
    for(uint32_t i = 0; i < (h * w); i++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	e00a      	b.n	80011d4 <ILI9488_FillRectangle+0x118>
        HAL_SPI_Transmit(&ILI9488_SPI_PORT, data, 3, HAL_MAX_DELAY);
 80011be:	f107 010c 	add.w	r1, r7, #12
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	2203      	movs	r2, #3
 80011c8:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <ILI9488_FillRectangle+0x13c>)
 80011ca:	f007 ff00 	bl	8008fce <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < (h * w); i++) {
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	883b      	ldrh	r3, [r7, #0]
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d3ec      	bcc.n	80011be <ILI9488_FillRectangle+0x102>
    }

    ILI9488_Unselect();
 80011e4:	f7ff fd54 	bl	8000c90 <ILI9488_Unselect>
 80011e8:	e000      	b.n	80011ec <ILI9488_FillRectangle+0x130>
    if((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 80011ea:	bf00      	nop
}
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020400 	.word	0x40020400
 80011f8:	20000444 	.word	0x20000444

080011fc <ILI9488_WriteString>:

// O restante das funções não precisa de alteração pois dependem das que foram corrigidas

void ILI9488_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011fc:	b082      	sub	sp, #8
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af04      	add	r7, sp, #16
 8001204:	603a      	str	r2, [r7, #0]
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	4603      	mov	r3, r0
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	460b      	mov	r3, r1
 800120e:	80bb      	strh	r3, [r7, #4]
    ILI9488_Select();
 8001210:	f7ff fd32 	bl	8000c78 <ILI9488_Select>
    while(*str) {
 8001214:	e02f      	b.n	8001276 <ILI9488_WriteString+0x7a>
        if(x + font.width >= ILI9488_WIDTH) {
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	7d3a      	ldrb	r2, [r7, #20]
 800121a:	4413      	add	r3, r2
 800121c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001220:	db14      	blt.n	800124c <ILI9488_WriteString+0x50>
            x = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001226:	7d7b      	ldrb	r3, [r7, #21]
 8001228:	461a      	mov	r2, r3
 800122a:	88bb      	ldrh	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9488_HEIGHT) break;
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	7d7a      	ldrb	r2, [r7, #21]
 8001234:	4413      	add	r3, r2
 8001236:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800123a:	da21      	bge.n	8001280 <ILI9488_WriteString+0x84>
            if(*str == ' ') {
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b20      	cmp	r3, #32
 8001242:	d103      	bne.n	800124c <ILI9488_WriteString+0x50>
                str++;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	603b      	str	r3, [r7, #0]
                continue;
 800124a:	e014      	b.n	8001276 <ILI9488_WriteString+0x7a>
            }
        }
        ILI9488_WriteChar(x, y, *str, font, color, bgcolor);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	88b9      	ldrh	r1, [r7, #4]
 8001252:	88f8      	ldrh	r0, [r7, #6]
 8001254:	8c3b      	ldrh	r3, [r7, #32]
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	8bbb      	ldrh	r3, [r7, #28]
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f7ff fe99 	bl	8000f98 <ILI9488_WriteChar>
        x += font.width;
 8001266:	7d3b      	ldrb	r3, [r7, #20]
 8001268:	461a      	mov	r2, r3
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4413      	add	r3, r2
 800126e:	80fb      	strh	r3, [r7, #6]
        str++;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1cb      	bne.n	8001216 <ILI9488_WriteString+0x1a>
 800127e:	e000      	b.n	8001282 <ILI9488_WriteString+0x86>
            if(y + font.height >= ILI9488_HEIGHT) break;
 8001280:	bf00      	nop
    }
    ILI9488_Unselect();
 8001282:	f7ff fd05 	bl	8000c90 <ILI9488_Unselect>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001290:	b002      	add	sp, #8
 8001292:	4770      	bx	lr

08001294 <ILI9488_FillScreen>:

void ILI9488_FillScreen(uint16_t color) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af02      	add	r7, sp, #8
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, color);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80012a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff ff05 	bl	80010bc <ILI9488_FillRectangle>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <ILI9488_DrawImage_RGB666>:
    }

    ILI9488_Unselect();
}

void ILI9488_DrawImage_RGB666(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint8_t* data) {
 80012ba:	b590      	push	{r4, r7, lr}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4604      	mov	r4, r0
 80012c2:	4608      	mov	r0, r1
 80012c4:	4611      	mov	r1, r2
 80012c6:	461a      	mov	r2, r3
 80012c8:	4623      	mov	r3, r4
 80012ca:	80fb      	strh	r3, [r7, #6]
 80012cc:	4603      	mov	r3, r0
 80012ce:	80bb      	strh	r3, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	803b      	strh	r3, [r7, #0]
    if ((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80012de:	d23f      	bcs.n	8001360 <ILI9488_DrawImage_RGB666+0xa6>
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012e6:	d23b      	bcs.n	8001360 <ILI9488_DrawImage_RGB666+0xa6>
    if ((x + w - 1) >= ILI9488_WIDTH) return;
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	4413      	add	r3, r2
 80012ee:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80012f2:	dc37      	bgt.n	8001364 <ILI9488_DrawImage_RGB666+0xaa>
    if ((y + h - 1) >= ILI9488_HEIGHT) return;
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	883b      	ldrh	r3, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012fe:	dc33      	bgt.n	8001368 <ILI9488_DrawImage_RGB666+0xae>

    ILI9488_Select();
 8001300:	f7ff fcba 	bl	8000c78 <ILI9488_Select>
    ILI9488_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	4413      	add	r3, r2
 800130a:	b29b      	uxth	r3, r3
 800130c:	3b01      	subs	r3, #1
 800130e:	b29c      	uxth	r4, r3
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	4413      	add	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	3b01      	subs	r3, #1
 800131a:	b29b      	uxth	r3, r3
 800131c:	88b9      	ldrh	r1, [r7, #4]
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	4622      	mov	r2, r4
 8001322:	f7ff fd25 	bl	8000d70 <ILI9488_SetAddressWindow>
    
    // Calcula o tamanho de uma linha da imagem em bytes (largura * 3 bytes por pixel)
    uint32_t line_size_bytes = (uint32_t)w * 3;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
    
    // Envia os dados da imagem linha por linha
    for (uint16_t i = 0; i < h; i++) {
 8001330:	2300      	movs	r3, #0
 8001332:	82fb      	strh	r3, [r7, #22]
 8001334:	e00d      	b.n	8001352 <ILI9488_DrawImage_RGB666+0x98>
        // Calcula o ponteiro para o início da linha atual
        const uint8_t* p_line_data = data + (i * line_size_bytes);
 8001336:	8afb      	ldrh	r3, [r7, #22]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
        // Envia a linha inteira para o display
        ILI9488_WriteData((uint8_t*)p_line_data, line_size_bytes);
 8001344:	6939      	ldr	r1, [r7, #16]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f7ff fcde 	bl	8000d08 <ILI9488_WriteData>
    for (uint16_t i = 0; i < h; i++) {
 800134c:	8afb      	ldrh	r3, [r7, #22]
 800134e:	3301      	adds	r3, #1
 8001350:	82fb      	strh	r3, [r7, #22]
 8001352:	8afa      	ldrh	r2, [r7, #22]
 8001354:	883b      	ldrh	r3, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d3ed      	bcc.n	8001336 <ILI9488_DrawImage_RGB666+0x7c>
    }
    
    ILI9488_Unselect();
 800135a:	f7ff fc99 	bl	8000c90 <ILI9488_Unselect>
 800135e:	e004      	b.n	800136a <ILI9488_DrawImage_RGB666+0xb0>
    if ((x >= ILI9488_WIDTH) || (y >= ILI9488_HEIGHT)) return;
 8001360:	bf00      	nop
 8001362:	e002      	b.n	800136a <ILI9488_DrawImage_RGB666+0xb0>
    if ((x + w - 1) >= ILI9488_WIDTH) return;
 8001364:	bf00      	nop
 8001366:	e000      	b.n	800136a <ILI9488_DrawImage_RGB666+0xb0>
    if ((y + h - 1) >= ILI9488_HEIGHT) return;
 8001368:	bf00      	nop
}
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <TCA9548A_SelectChannel>:
#include "TCA9548A.h"

HAL_StatusTypeDef TCA9548A_SelectChannel(I2C_HandleTypeDef *hi2c, uint8_t channel)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
    if (channel > 7) return HAL_ERROR; // O multiplexador tem 8 canais (0-7)
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	2b07      	cmp	r3, #7
 8001380:	d901      	bls.n	8001386 <TCA9548A_SelectChannel+0x16>
 8001382:	2301      	movs	r3, #1
 8001384:	e010      	b.n	80013a8 <TCA9548A_SelectChannel+0x38>

    uint8_t buffer = 1 << channel;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	2201      	movs	r2, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Master_Transmit(hi2c, MUX_ADDR, &buffer, 1, HAL_MAX_DELAY);
 8001392:	f107 020f 	add.w	r2, r7, #15
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	21e0      	movs	r1, #224	@ 0xe0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f002 ff2f 	bl	8004204 <HAL_I2C_Master_Transmit>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <TCS3472_Init>:

// Configurações de inicialização
#define TCS3472_ENABLE_PON       0x01 // Power ON
#define TCS3472_ENABLE_AEN       0x02 // RGBC ADC Enable

bool TCS3472_Init(I2C_HandleTypeDef *hi2c, uint8_t channel) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
    uint8_t reg_data;

    // Seleciona o canal do sensor no multiplexador
    if (TCA9548A_SelectChannel(hi2c, channel) != HAL_OK) {
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffd5 	bl	8001370 <TCA9548A_SelectChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <TCS3472_Init+0x20>
        return false; // Falha ao selecionar o canal
 80013cc:	2300      	movs	r3, #0
 80013ce:	e064      	b.n	800149a <TCS3472_Init+0xea>
    }
    HAL_Delay(1); // Pequeno delay para estabilização
 80013d0:	2001      	movs	r0, #1
 80013d2:	f002 f823 	bl	800341c <HAL_Delay>

    // 1. Verifica se o sensor está a responder lendo o seu ID
    if (HAL_I2C_Mem_Read(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ID), 1, &reg_data, 1, HAL_MAX_DELAY) != HAL_OK) {
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	f107 030f 	add.w	r3, r7, #15
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	2292      	movs	r2, #146	@ 0x92
 80013ea:	2152      	movs	r1, #82	@ 0x52
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f003 f901 	bl	80045f4 <HAL_I2C_Mem_Read>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <TCS3472_Init+0x4c>
        return false; // Falha na comunicação I2C
 80013f8:	2300      	movs	r3, #0
 80013fa:	e04e      	b.n	800149a <TCS3472_Init+0xea>
    }
    if (reg_data != 0x44 && reg_data != 0x4D) {
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b44      	cmp	r3, #68	@ 0x44
 8001400:	d004      	beq.n	800140c <TCS3472_Init+0x5c>
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b4d      	cmp	r3, #77	@ 0x4d
 8001406:	d001      	beq.n	800140c <TCS3472_Init+0x5c>
        return false; // ID do sensor incorreto
 8001408:	2300      	movs	r3, #0
 800140a:	e046      	b.n	800149a <TCS3472_Init+0xea>
    }

    // 2. Configura o tempo de integração do sensor
    reg_data = 0xEB; // 70ms
 800140c:	23eb      	movs	r3, #235	@ 0xeb
 800140e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ATIME), 1, &reg_data, 1, HAL_MAX_DELAY);
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	2281      	movs	r2, #129	@ 0x81
 8001424:	2152      	movs	r1, #82	@ 0x52
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f002 ffea 	bl	8004400 <HAL_I2C_Mem_Write>

    // 3. Configura o ganho do sensor
    reg_data = 0x00; // Ganho 1x
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_CONTROL), 1, &reg_data, 1, HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2301      	movs	r3, #1
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	f107 030f 	add.w	r3, r7, #15
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	228f      	movs	r2, #143	@ 0x8f
 8001444:	2152      	movs	r1, #82	@ 0x52
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f002 ffda 	bl	8004400 <HAL_I2C_Mem_Write>

    // 4. Ativa o oscilador interno e o conversor ADC de cor
    reg_data = TCS3472_ENABLE_PON;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ENABLE), 1, &reg_data, 1, HAL_MAX_DELAY);
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	2301      	movs	r3, #1
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	f107 030f 	add.w	r3, r7, #15
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	2280      	movs	r2, #128	@ 0x80
 8001464:	2152      	movs	r1, #82	@ 0x52
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f002 ffca 	bl	8004400 <HAL_I2C_Mem_Write>
    HAL_Delay(3); // Espera o oscilador estabilizar
 800146c:	2003      	movs	r0, #3
 800146e:	f001 ffd5 	bl	800341c <HAL_Delay>
    reg_data |= TCS3472_ENABLE_AEN;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_ENABLE), 1, &reg_data, 1, HAL_MAX_DELAY);
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2301      	movs	r3, #1
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f107 030f 	add.w	r3, r7, #15
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	2280      	movs	r2, #128	@ 0x80
 8001490:	2152      	movs	r1, #82	@ 0x52
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f002 ffb4 	bl	8004400 <HAL_I2C_Mem_Write>

    return true; // Sucesso
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <TCS3472_ReadData>:


void TCS3472_ReadData(I2C_HandleTypeDef *hi2c, uint8_t channel, TCS3472_Data* color_data) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b08a      	sub	sp, #40	@ 0x28
 80014a6:	af04      	add	r7, sp, #16
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	460b      	mov	r3, r1
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	72fb      	strb	r3, [r7, #11]
    uint8_t buffer[8];

    // Tenta selecionar o canal do sensor no multiplexador
    if (TCA9548A_SelectChannel(hi2c, channel) != HAL_OK) {
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	4619      	mov	r1, r3
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff ff5b 	bl	8001370 <TCA9548A_SelectChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d010      	beq.n	80014e2 <TCS3472_ReadData+0x40>
        // Se falhar, define um padrão de erro e retorna
        color_data->clear = 1111;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f240 4257 	movw	r2, #1111	@ 0x457
 80014c6:	80da      	strh	r2, [r3, #6]
        color_data->red   = 1111;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f240 4257 	movw	r2, #1111	@ 0x457
 80014ce:	801a      	strh	r2, [r3, #0]
        color_data->green = 1111;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f240 4257 	movw	r2, #1111	@ 0x457
 80014d6:	805a      	strh	r2, [r3, #2]
        color_data->blue  = 1111;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f240 4257 	movw	r2, #1111	@ 0x457
 80014de:	809a      	strh	r2, [r3, #4]
        return;
 80014e0:	e050      	b.n	8001584 <TCS3472_ReadData+0xe2>
    }
    HAL_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f001 ff9a 	bl	800341c <HAL_Delay>

    // Lê os 8 bytes de dados de cor (Clear, Red, Green, Blue - 2 bytes cada)
    // VERIFICA O RETORNO DA FUNÇÃO DE LEITURA
    if (HAL_I2C_Mem_Read(hi2c, TCS3472_ADDRESS, (TCS3472_COMMAND_BIT | TCS3472_REG_CDATAL), 1, buffer, 8, HAL_MAX_DELAY) != HAL_OK)
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2308      	movs	r3, #8
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	2294      	movs	r2, #148	@ 0x94
 80014fc:	2152      	movs	r1, #82	@ 0x52
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f003 f878 	bl	80045f4 <HAL_I2C_Mem_Read>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d010      	beq.n	800152c <TCS3472_ReadData+0x8a>
    {
        // Se a leitura I2C falhar, define um padrão de erro diferente
        color_data->clear = 2222;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8001510:	80da      	strh	r2, [r3, #6]
        color_data->red   = 2222;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8001518:	801a      	strh	r2, [r3, #0]
        color_data->green = 2222;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8001520:	805a      	strh	r2, [r3, #2]
        color_data->blue  = 2222;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8001528:	809a      	strh	r2, [r3, #4]
        return;
 800152a:	e02b      	b.n	8001584 <TCS3472_ReadData+0xe2>
    }   

    // Se a leitura for bem-sucedida, processa os dados
    color_data->clear = (buffer[1] << 8) | buffer[0];
 800152c:	7c7b      	ldrb	r3, [r7, #17]
 800152e:	b21b      	sxth	r3, r3
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	7c3b      	ldrb	r3, [r7, #16]
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21b      	sxth	r3, r3
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	80da      	strh	r2, [r3, #6]
    color_data->red   = (buffer[3] << 8) | buffer[2];
 8001542:	7cfb      	ldrb	r3, [r7, #19]
 8001544:	b21b      	sxth	r3, r3
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7cbb      	ldrb	r3, [r7, #18]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21b      	sxth	r3, r3
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	801a      	strh	r2, [r3, #0]
    color_data->green = (buffer[5] << 8) | buffer[4];
 8001558:	7d7b      	ldrb	r3, [r7, #21]
 800155a:	b21b      	sxth	r3, r3
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	7d3b      	ldrb	r3, [r7, #20]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	805a      	strh	r2, [r3, #2]
    color_data->blue  = (buffer[7] << 8) | buffer[6];
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	b21b      	sxth	r3, r3
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	7dbb      	ldrb	r3, [r7, #22]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	809a      	strh	r2, [r3, #4]
}
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <TCS3472_DetectColor>:

EColor TCS3472_DetectColor(TCS3472_Data data) {
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	463b      	mov	r3, r7
 8001594:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t red = data.red;
 8001598:	883b      	ldrh	r3, [r7, #0]
 800159a:	81fb      	strh	r3, [r7, #14]
    uint16_t green = data.green;
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	81bb      	strh	r3, [r7, #12]
    uint16_t blue = data.blue;
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	817b      	strh	r3, [r7, #10]
    uint16_t clear = data.clear;
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	813b      	strh	r3, [r7, #8]

    // REGRA 1: Detetar ausência de cor (Preto ou Vazio)
    // Se a intensidade da luz (clear) for muito baixa, não há cor.
    // Baseado nos seus dados, um limiar de 150 parece seguro.
    if (clear < 150) {
 80015a8:	893b      	ldrh	r3, [r7, #8]
 80015aa:	2b95      	cmp	r3, #149	@ 0x95
 80015ac:	d801      	bhi.n	80015b2 <TCS3472_DetectColor+0x26>
        return eBlack;
 80015ae:	2305      	movs	r3, #5
 80015b0:	e05a      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }

    // REGRA 2: Detetar Amarelo
    // Baseado nos seus dados (R=518, G=443, B=152), R e G são altos e B é baixo.
    // Verificamos se R e G são pelo menos 2 vezes maiores que B.
    if (red > blue * 2 && green > blue * 2) {
 80015b2:	89fa      	ldrh	r2, [r7, #14]
 80015b4:	897b      	ldrh	r3, [r7, #10]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dd06      	ble.n	80015ca <TCS3472_DetectColor+0x3e>
 80015bc:	89ba      	ldrh	r2, [r7, #12]
 80015be:	897b      	ldrh	r3, [r7, #10]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dd01      	ble.n	80015ca <TCS3472_DetectColor+0x3e>
        return eYellow;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e04e      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }

    // REGRA 3: Detetar Vermelho
    // Baseado nos seus dados (R=277, G=97, B=74), R é muito maior que G e B.
    // Verificamos se R é pelo menos 2 vezes maior que G e B.
    if (red > green * 2 && red > blue * 2) {
 80015ca:	89fa      	ldrh	r2, [r7, #14]
 80015cc:	89bb      	ldrh	r3, [r7, #12]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dd06      	ble.n	80015e2 <TCS3472_DetectColor+0x56>
 80015d4:	89fa      	ldrh	r2, [r7, #14]
 80015d6:	897b      	ldrh	r3, [r7, #10]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd01      	ble.n	80015e2 <TCS3472_DetectColor+0x56>
        return eRed;
 80015de:	2300      	movs	r3, #0
 80015e0:	e042      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }
    
    // REGRA 4: Detetar Verde
    // Baseado nos seus dados (G=148, R=69, B=68), G é muito maior que R e B.
    // Verificamos se G é pelo menos 1.5 vezes maior que R e B.
    if (green > red * 1.5 && green > blue * 1.5) {
 80015e2:	89bb      	ldrh	r3, [r7, #12]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f8bf 	bl	8000768 <__aeabi_i2d>
 80015ea:	4604      	mov	r4, r0
 80015ec:	460d      	mov	r5, r1
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f8b9 	bl	8000768 <__aeabi_i2d>
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <TCS3472_DetectColor+0xe4>)
 80015fc:	f7fe fe38 	bl	8000270 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7ff f996 	bl	8000938 <__aeabi_dcmpgt>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <TCS3472_DetectColor+0xba>
 8001612:	89bb      	ldrh	r3, [r7, #12]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f8a7 	bl	8000768 <__aeabi_i2d>
 800161a:	4604      	mov	r4, r0
 800161c:	460d      	mov	r5, r1
 800161e:	897b      	ldrh	r3, [r7, #10]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f8a1 	bl	8000768 <__aeabi_i2d>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <TCS3472_DetectColor+0xe4>)
 800162c:	f7fe fe20 	bl	8000270 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7ff f97e 	bl	8000938 <__aeabi_dcmpgt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <TCS3472_DetectColor+0xba>
        return eGreen;
 8001642:	2302      	movs	r3, #2
 8001644:	e010      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }

    // REGRA 5: Detetar Azul (no seu caso, um Ciano/Azul-Esverdeado)
    // Baseado nos seus dados (G=153, B=136, R=67), G e B são altos e R é baixo.
    // Verificamos se G e B são maiores que R.
    if (green > red && blue > red) {
 8001646:	89ba      	ldrh	r2, [r7, #12]
 8001648:	89fb      	ldrh	r3, [r7, #14]
 800164a:	429a      	cmp	r2, r3
 800164c:	d905      	bls.n	800165a <TCS3472_DetectColor+0xce>
 800164e:	897a      	ldrh	r2, [r7, #10]
 8001650:	89fb      	ldrh	r3, [r7, #14]
 8001652:	429a      	cmp	r2, r3
 8001654:	d901      	bls.n	800165a <TCS3472_DetectColor+0xce>
        return eBlue;
 8001656:	2301      	movs	r3, #1
 8001658:	e006      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }

    // REGRA 6: Detetar Branco
    // Baseado nos seus dados, todos os valores são muito altos.
    // Usamos um limiar alto no clear para identificar o branco.
    if (clear > 2000) {
 800165a:	893b      	ldrh	r3, [r7, #8]
 800165c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001660:	d901      	bls.n	8001666 <TCS3472_DetectColor+0xda>
        return eWhite;
 8001662:	2304      	movs	r3, #4
 8001664:	e000      	b.n	8001668 <TCS3472_DetectColor+0xdc>
    }       

    // Se nenhuma cor dominar claramente, pode ser branco
    return eBlack;
 8001666:	2305      	movs	r3, #5
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bdb0      	pop	{r4, r5, r7, pc}
 8001670:	3ff80000 	.word	0x3ff80000

08001674 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001684:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <vApplicationGetIdleTaskMemory+0x30>)
 800168a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000118 	.word	0x20000118
 80016a4:	2000016c 	.word	0x2000016c

080016a8 <vInitBattle>:
 * @brief Executa a lógica de batalha turno a turno, atualizando a vida dos jogadores.
 * @param pUserPlayer: Ponteiro para o jogador do usuário.
 * @param pCpuPlayer: Ponteiro para o jogador da CPU.
 */
void vInitBattle(EWizard* pUserPlayer, EWizard* pCpuPlayer)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]
 80016b6:	e092      	b.n	80017de <vInitBattle+0x136>
  {
    // Pega os ataques deste turno
    EColor userAttack = pUserPlayer->eAttackSequential[u8Idx];
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	753b      	strb	r3, [r7, #20]
    EColor cpuAttack = pCpuPlayer->eAttackSequential[u8Idx];
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	4413      	add	r3, r2
 80016c8:	789b      	ldrb	r3, [r3, #2]
 80016ca:	74fb      	strb	r3, [r7, #19]

    // Calcula o resultado do ataque do Jogador -> CPU
    EAttackOutcome userOutcome = eGetAttackOutcome(userAttack, cpuAttack);
 80016cc:	7cfa      	ldrb	r2, [r7, #19]
 80016ce:	7d3b      	ldrb	r3, [r7, #20]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f88c 	bl	80017f0 <eGetAttackOutcome>
 80016d8:	4603      	mov	r3, r0
 80016da:	74bb      	strb	r3, [r7, #18]
    uint8_t userDamage = BASE_ATTACK_DAMAGE;
 80016dc:	230a      	movs	r3, #10
 80016de:	75bb      	strb	r3, [r7, #22]

    if (userOutcome == eOutcome_SuperEffective)
 80016e0:	7cbb      	ldrb	r3, [r7, #18]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10f      	bne.n	8001706 <vInitBattle+0x5e>
    {
      userDamage *= SUPER_EFFECTIVE_MODIFIER;
 80016e6:	7dbb      	ldrb	r3, [r7, #22]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80016f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001700:	793b      	ldrb	r3, [r7, #4]
 8001702:	75bb      	strb	r3, [r7, #22]
 8001704:	e011      	b.n	800172a <vInitBattle+0x82>
    }
    else if (userOutcome == eOutcome_NotEffective)
 8001706:	7cbb      	ldrb	r3, [r7, #18]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d10e      	bne.n	800172a <vInitBattle+0x82>
    {
      userDamage *= NOT_EFFECTIVE_MODIFIER;
 800170c:	7dbb      	ldrb	r3, [r7, #22]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	edc7 7a01 	vstr	s15, [r7, #4]
 8001726:	793b      	ldrb	r3, [r7, #4]
 8001728:	75bb      	strb	r3, [r7, #22]
    }

    // Calcula o resultado do ataque da CPU -> Jogador
    EAttackOutcome cpuOutcome = eGetAttackOutcome(cpuAttack, userAttack);
 800172a:	7d3a      	ldrb	r2, [r7, #20]
 800172c:	7cfb      	ldrb	r3, [r7, #19]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f85d 	bl	80017f0 <eGetAttackOutcome>
 8001736:	4603      	mov	r3, r0
 8001738:	747b      	strb	r3, [r7, #17]
    uint8_t cpuDamage = BASE_ATTACK_DAMAGE;
 800173a:	230a      	movs	r3, #10
 800173c:	757b      	strb	r3, [r7, #21]

    if (cpuOutcome == eOutcome_SuperEffective)
 800173e:	7c7b      	ldrb	r3, [r7, #17]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d10f      	bne.n	8001764 <vInitBattle+0xbc>
    {
      cpuDamage *= SUPER_EFFECTIVE_MODIFIER;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800175a:	edc7 7a01 	vstr	s15, [r7, #4]
 800175e:	793b      	ldrb	r3, [r7, #4]
 8001760:	757b      	strb	r3, [r7, #21]
 8001762:	e011      	b.n	8001788 <vInitBattle+0xe0>
    }
    else if (cpuOutcome == eOutcome_NotEffective)
 8001764:	7c7b      	ldrb	r3, [r7, #17]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d10e      	bne.n	8001788 <vInitBattle+0xe0>
    {
      cpuDamage *= NOT_EFFECTIVE_MODIFIER;
 800176a:	7d7b      	ldrb	r3, [r7, #21]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001774:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001780:	edc7 7a01 	vstr	s15, [r7, #4]
 8001784:	793b      	ldrb	r3, [r7, #4]
 8001786:	757b      	strb	r3, [r7, #21]
    }

    // Aplica o dano, garantindo que a vida não fique negativa
    if (pCpuPlayer->u8HeartPoints >= userDamage)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	7dba      	ldrb	r2, [r7, #22]
 800178e:	429a      	cmp	r2, r3
 8001790:	d807      	bhi.n	80017a2 <vInitBattle+0xfa>
    {
      pCpuPlayer->u8HeartPoints -= userDamage;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	7dbb      	ldrb	r3, [r7, #22]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e002      	b.n	80017a8 <vInitBattle+0x100>
    }
    else
    {
      pCpuPlayer->u8HeartPoints = 0;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    }

    if (pUserPlayer->u8HeartPoints >= cpuDamage)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	7d7a      	ldrb	r2, [r7, #21]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d807      	bhi.n	80017c2 <vInitBattle+0x11a>
    {
      pUserPlayer->u8HeartPoints -= cpuDamage;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	7d7b      	ldrb	r3, [r7, #21]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e002      	b.n	80017c8 <vInitBattle+0x120>
    }
    else
    {
      pUserPlayer->u8HeartPoints = 0;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
    }
    
    // Se a vida de alguém chegar a 0, a batalha pode parar mais cedo
    if(pUserPlayer->u8HeartPoints == 0 || pCpuPlayer->u8HeartPoints == 0)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00a      	beq.n	80017e6 <vInitBattle+0x13e>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <vInitBattle+0x13e>
  for (uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	3301      	adds	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	f67f af69 	bls.w	80016b8 <vInitBattle+0x10>
    {
        break; // Encerra o loop for
    }
  }
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <eGetAttackOutcome>:
 * @param eAttackerAttack: O elemento do atacante.
 * @param eDefenderAttack: O elemento do defensor no mesmo turno.
 * @retval EAttackOutcome: O resultado da interação.
 */
EAttackOutcome eGetAttackOutcome(EColor eAttackerAttack, EColor eDefenderAttack)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	4613      	mov	r3, r2
 80017fe:	71bb      	strb	r3, [r7, #6]
  switch (eAttackerAttack)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d859      	bhi.n	80018ba <eGetAttackOutcome+0xca>
 8001806:	a201      	add	r2, pc, #4	@ (adr r2, 800180c <eGetAttackOutcome+0x1c>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	08001825 	.word	0x08001825
 8001810:	08001843 	.word	0x08001843
 8001814:	0800187f 	.word	0x0800187f
 8001818:	08001861 	.word	0x08001861
 800181c:	08001893 	.word	0x08001893
 8001820:	080018a7 	.word	0x080018a7
  {
    case eRed: // FOGO
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Fogo > Terra
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d101      	bne.n	800182e <eGetAttackOutcome+0x3e>
 800182a:	2301      	movs	r3, #1
 800182c:	e053      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective;  //  Fogo > Sombra
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d101      	bne.n	8001838 <eGetAttackOutcome+0x48>
 8001834:	2301      	movs	r3, #1
 8001836:	e04e      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eBlue) return eOutcome_NotEffective;     // Fogo < Agua
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d13f      	bne.n	80018be <eGetAttackOutcome+0xce>
 800183e:	2302      	movs	r3, #2
 8001840:	e049      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    case eBlue: // ÁGUA
      if (eDefenderAttack == eRed) return eOutcome_SuperEffective;    // Agua > Fogo
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <eGetAttackOutcome+0x5c>
 8001848:	2301      	movs	r3, #1
 800184a:	e044      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eGreen) return eOutcome_SuperEffective;  // Agua > Ar
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d101      	bne.n	8001856 <eGetAttackOutcome+0x66>
 8001852:	2301      	movs	r3, #1
 8001854:	e03f      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;   // Agua < Terra
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d132      	bne.n	80018c2 <eGetAttackOutcome+0xd2>
 800185c:	2302      	movs	r3, #2
 800185e:	e03a      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    case eYellow: // TERRA
      if (eDefenderAttack == eBlue) return eOutcome_SuperEffective;   // Terra > Agua
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <eGetAttackOutcome+0x7a>
 8001866:	2301      	movs	r3, #1
 8001868:	e035      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective;  // Terra > Luz
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	2b04      	cmp	r3, #4
 800186e:	d101      	bne.n	8001874 <eGetAttackOutcome+0x84>
 8001870:	2301      	movs	r3, #1
 8001872:	e030      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Terra < Fogo
 8001874:	79bb      	ldrb	r3, [r7, #6]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d125      	bne.n	80018c6 <eGetAttackOutcome+0xd6>
 800187a:	2302      	movs	r3, #2
 800187c:	e02b      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    case eGreen: // AR
      if (eDefenderAttack == eYellow) return eOutcome_SuperEffective; // Ar > Terra
 800187e:	79bb      	ldrb	r3, [r7, #6]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d101      	bne.n	8001888 <eGetAttackOutcome+0x98>
 8001884:	2301      	movs	r3, #1
 8001886:	e026      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;      // Ar < Fogo
 8001888:	79bb      	ldrb	r3, [r7, #6]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d11d      	bne.n	80018ca <eGetAttackOutcome+0xda>
 800188e:	2302      	movs	r3, #2
 8001890:	e021      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;
    
    case eWhite: // LUZ
      if (eDefenderAttack == eBlack) return eOutcome_SuperEffective; // Luz > Sombra
 8001892:	79bb      	ldrb	r3, [r7, #6]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d101      	bne.n	800189c <eGetAttackOutcome+0xac>
 8001898:	2301      	movs	r3, #1
 800189a:	e01c      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eYellow) return eOutcome_NotEffective;  // Luz < Terra
 800189c:	79bb      	ldrb	r3, [r7, #6]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d115      	bne.n	80018ce <eGetAttackOutcome+0xde>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e017      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    case eBlack: // SOMBRA
      if (eDefenderAttack == eWhite) return eOutcome_SuperEffective; // Sombra > Luz
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d101      	bne.n	80018b0 <eGetAttackOutcome+0xc0>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e012      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      if (eDefenderAttack == eRed) return eOutcome_NotEffective;     // Sombra < Fogo
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <eGetAttackOutcome+0xe2>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e00d      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;

    default:
      return eOutcome_Neutral;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e00b      	b.n	80018d6 <eGetAttackOutcome+0xe6>
      break;
 80018be:	bf00      	nop
 80018c0:	e008      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018c2:	bf00      	nop
 80018c4:	e006      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018c6:	bf00      	nop
 80018c8:	e004      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018ca:	bf00      	nop
 80018cc:	e002      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018ce:	bf00      	nop
 80018d0:	e000      	b.n	80018d4 <eGetAttackOutcome+0xe4>
      break;
 80018d2:	bf00      	nop
  }
  return eOutcome_Neutral; // Retorno padrão se nenhuma regra se aplicar
 80018d4:	2300      	movs	r3, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <ClearScreen>:
#include "ILI9488.h"
#include "fonts.h"
#include "stdint.h"
#include <stdio.h>

void ClearScreen() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af02      	add	r7, sp, #8
    ILI9488_FillRectangle(0, 0, ILI9488_WIDTH, ILI9488_HEIGHT, ILI9488_BLACK);
 80018ea:	2300      	movs	r3, #0
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80018f2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80018f6:	2100      	movs	r1, #0
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff fbdf 	bl	80010bc <ILI9488_FillRectangle>
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <DrawMenu>:

void DrawMenu(const char* title, const char** options, int numOptions, int currentSelection) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b092      	sub	sp, #72	@ 0x48
 8001908:	af04      	add	r7, sp, #16
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
    char buffer[30];

    // Desenha o título com a fonte maior, mais abaixo no ecrã
    sprintf(buffer, "%s", title);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	492a      	ldr	r1, [pc, #168]	@ (80019c4 <DrawMenu+0xc0>)
 800191a:	4618      	mov	r0, r3
 800191c:	f00d f852 	bl	800e9c4 <siprintf>
    ILI9488_WriteString(0, 0, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001920:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <DrawMenu+0xc4>)
 8001922:	f107 0114 	add.w	r1, r7, #20
 8001926:	2200      	movs	r2, #0
 8001928:	9202      	str	r2, [sp, #8]
 800192a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800192e:	9201      	str	r2, [sp, #4]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	460a      	mov	r2, r1
 8001938:	2100      	movs	r1, #0
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff fc5e 	bl	80011fc <ILI9488_WriteString>

    // Desenha as opções com mais espaçamento vertical
    for (int i = 0; i < numOptions; i++) {
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
 8001944:	e035      	b.n	80019b2 <DrawMenu+0xae>
        uint16_t color = (i == currentSelection) ? ILI9488_YELLOW : ILI9488_WHITE;
 8001946:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d102      	bne.n	8001954 <DrawMenu+0x50>
 800194e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001952:	e001      	b.n	8001958 <DrawMenu+0x54>
 8001954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001958:	867b      	strh	r3, [r7, #50]	@ 0x32
        sprintf(buffer, "%s %s", (i == currentSelection) ? ">" : " ", options[i]);
 800195a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d101      	bne.n	8001966 <DrawMenu+0x62>
 8001962:	491a      	ldr	r1, [pc, #104]	@ (80019cc <DrawMenu+0xc8>)
 8001964:	e000      	b.n	8001968 <DrawMenu+0x64>
 8001966:	491a      	ldr	r1, [pc, #104]	@ (80019d0 <DrawMenu+0xcc>)
 8001968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	4413      	add	r3, r2
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f107 0014 	add.w	r0, r7, #20
 8001976:	460a      	mov	r2, r1
 8001978:	4916      	ldr	r1, [pc, #88]	@ (80019d4 <DrawMenu+0xd0>)
 800197a:	f00d f823 	bl	800e9c4 <siprintf>
        // Aumenta o espaçamento entre as linhas (de 15 para 25)
        ILI9488_WriteString(0, 30 + (i * 20), buffer, Font_7x10, color, ILI9488_BLACK);
 800197e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001980:	b29b      	uxth	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	b29b      	uxth	r3, r3
 800198c:	331e      	adds	r3, #30
 800198e:	b299      	uxth	r1, r3
 8001990:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <DrawMenu+0xc4>)
 8001992:	f107 0014 	add.w	r0, r7, #20
 8001996:	2200      	movs	r2, #0
 8001998:	9202      	str	r2, [sp, #8]
 800199a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800199c:	9201      	str	r2, [sp, #4]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	9200      	str	r2, [sp, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4602      	mov	r2, r0
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fc28 	bl	80011fc <ILI9488_WriteString>
    for (int i = 0; i < numOptions; i++) {
 80019ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ae:	3301      	adds	r3, #1
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	dbc5      	blt.n	8001946 <DrawMenu+0x42>
    }
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3738      	adds	r7, #56	@ 0x38
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	0800fb90 	.word	0x0800fb90
 80019c8:	20000000 	.word	0x20000000
 80019cc:	0800fb94 	.word	0x0800fb94
 80019d0:	0800fb98 	.word	0x0800fb98
 80019d4:	0800fb9c 	.word	0x0800fb9c

080019d8 <KEYPAD_Scan>:
Keypad_Pin_t C_PINS[4] = {{C4_GPIO_Port, C4_Pin}, {C3_GPIO_Port, C3_Pin}, {C2_GPIO_Port, C2_Pin}, {C1_GPIO_Port, C1_Pin}};
// Pinos das linhas (entradas)
Keypad_Pin_t R_PINS[4] = {{R2_GPIO_Port, R2_Pin}, {R1_GPIO_Port, R1_Pin}, {R3_GPIO_Port, R3_Pin}, {R4_GPIO_Port, R4_Pin}};


char KEYPAD_Scan(void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
    // Coloca todas as colunas em nível alto
    for (int i = 0; i < 4; i++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e00f      	b.n	8001a04 <KEYPAD_Scan+0x2c>
        HAL_GPIO_WritePin(C_PINS[i].PORT, C_PINS[i].PIN, GPIO_PIN_SET);
 80019e4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80019ec:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	889b      	ldrh	r3, [r3, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	4619      	mov	r1, r3
 80019fa:	f002 fa8f 	bl	8003f1c <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; i++) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	ddec      	ble.n	80019e4 <KEYPAD_Scan+0xc>
    }

    // Loop para varrer cada coluna
    for (int col = 0; col < 4; col++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	e05e      	b.n	8001ace <KEYPAD_Scan+0xf6>
        // Ativa a coluna atual (coloca em nível baixo)
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_RESET);
 8001a10:	4a33      	ldr	r2, [pc, #204]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a18:	4a31      	ldr	r2, [pc, #196]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4413      	add	r3, r2
 8001a20:	889b      	ldrh	r3, [r3, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	f002 fa79 	bl	8003f1c <HAL_GPIO_WritePin>

        // Verifica qual linha foi para nível baixo
        for (int row = 0; row < 4; row++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e03b      	b.n	8001aa8 <KEYPAD_Scan+0xd0>
            if (HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET) {
 8001a30:	4a2c      	ldr	r2, [pc, #176]	@ (8001ae4 <KEYPAD_Scan+0x10c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a38:	492a      	ldr	r1, [pc, #168]	@ (8001ae4 <KEYPAD_Scan+0x10c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	440b      	add	r3, r1
 8001a40:	889b      	ldrh	r3, [r3, #4]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4610      	mov	r0, r2
 8001a46:	f002 fa51 	bl	8003eec <HAL_GPIO_ReadPin>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d128      	bne.n	8001aa2 <KEYPAD_Scan+0xca>
                // Botão pressionado!
                
                // --- Debounce e espera soltar a tecla ---
                HAL_Delay(50); // Simples debounce por atraso
 8001a50:	2032      	movs	r0, #50	@ 0x32
 8001a52:	f001 fce3 	bl	800341c <HAL_Delay>

                // Espera o usuário soltar a tecla para não ler a mesma tecla várias vezes
                while(HAL_GPIO_ReadPin(R_PINS[row].PORT, R_PINS[row].PIN) == GPIO_PIN_RESET);
 8001a56:	bf00      	nop
 8001a58:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <KEYPAD_Scan+0x10c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a60:	4920      	ldr	r1, [pc, #128]	@ (8001ae4 <KEYPAD_Scan+0x10c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	889b      	ldrh	r3, [r3, #4]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f002 fa3d 	bl	8003eec <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ef      	beq.n	8001a58 <KEYPAD_Scan+0x80>
                
                // Restaura a coluna para nível alto antes de retornar
                HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8001a78:	4a19      	ldr	r2, [pc, #100]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a80:	4a17      	ldr	r2, [pc, #92]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	889b      	ldrh	r3, [r3, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f002 fa45 	bl	8003f1c <HAL_GPIO_WritePin>

                return KEYPAD_MAP[row][col];
 8001a92:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <KEYPAD_Scan+0x110>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	441a      	add	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	e019      	b.n	8001ad6 <KEYPAD_Scan+0xfe>
        for (int row = 0; row < 4; row++) {
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	ddc0      	ble.n	8001a30 <KEYPAD_Scan+0x58>
            }
        }

        // Desativa a coluna atual antes de ir para a próxima
        HAL_GPIO_WritePin(C_PINS[col].PORT, C_PINS[col].PIN, GPIO_PIN_SET);
 8001aae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae0 <KEYPAD_Scan+0x108>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	889b      	ldrh	r3, [r3, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f002 fa2a 	bl	8003f1c <HAL_GPIO_WritePin>
    for (int col = 0; col < 4; col++) {
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	dd9d      	ble.n	8001a10 <KEYPAD_Scan+0x38>
    }

    return '\0'; // Retorna nulo se nenhuma tecla for pressionada
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000028 	.word	0x20000028
 8001ae8:	080524ec 	.word	0x080524ec

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b5b0      	push	{r4, r5, r7, lr}
 8001aee:	b0a6      	sub	sp, #152	@ 0x98
 8001af0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af2:	f001 fc51 	bl	8003398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af6:	f000 f953 	bl	8001da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afa:	f000 fa6b 	bl	8001fd4 <MX_GPIO_Init>
  MX_UART4_Init();
 8001afe:	f000 fa3f 	bl	8001f80 <MX_UART4_Init>
  MX_SPI1_Init();
 8001b02:	f000 fa07 	bl	8001f14 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001b06:	f000 f9b5 	bl	8001e74 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001b0a:	f000 f9e1 	bl	8001ed0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001b0e:	f009 fcdf 	bl	800b4d0 <MX_FATFS_Init>
  // ETAPA DE INICIALIZAÇÃO
  //--------------------------------------------------------------------

  // 1. Inicializa o display. Ele usará a velocidade alta do SPI configurada
  //    no MX_SPI1_Init(), o que é ótimo para performance gráfica.
  ILI9488_Init();
 8001b12:	f7ff f975 	bl	8000e00 <ILI9488_Init>

  // 2. Acende o backlight do display.
  //    (Assumindo que seu pino é o LCD_LED_Pin, como no seu MX_GPIO_Init)
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2180      	movs	r1, #128	@ 0x80
 8001b1a:	4890      	ldr	r0, [pc, #576]	@ (8001d5c <main+0x270>)
 8001b1c:	f002 f9fe 	bl	8003f1c <HAL_GPIO_WritePin>

  // 3. Prepara a tela para o usuário com uma mensagem de boas-vindas.
  ILI9488_FillScreen(ILI9488_BLACK);
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7ff fbb7 	bl	8001294 <ILI9488_FillScreen>
  
  char buffer[40];

  // 1. Verifica se o multiplexador TCA9548A está respondendo
  ILI9488_WriteString(10, 30, "Verificando MUX...", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001b26:	4b8e      	ldr	r3, [pc, #568]	@ (8001d60 <main+0x274>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	9202      	str	r2, [sp, #8]
 8001b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b30:	9201      	str	r2, [sp, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	9200      	str	r2, [sp, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a8a      	ldr	r2, [pc, #552]	@ (8001d64 <main+0x278>)
 8001b3a:	211e      	movs	r1, #30
 8001b3c:	200a      	movs	r0, #10
 8001b3e:	f7ff fb5d 	bl	80011fc <ILI9488_WriteString>
  if (HAL_I2C_IsDeviceReady(&hi2c2, MUX_ADDR, 2, 100) == HAL_OK)
 8001b42:	2364      	movs	r3, #100	@ 0x64
 8001b44:	2202      	movs	r2, #2
 8001b46:	21e0      	movs	r1, #224	@ 0xe0
 8001b48:	4887      	ldr	r0, [pc, #540]	@ (8001d68 <main+0x27c>)
 8001b4a:	f002 ff85 	bl	8004a58 <HAL_I2C_IsDeviceReady>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d115      	bne.n	8001b80 <main+0x94>
  {
    ILI9488_WriteString(10, 50, "Multiplexador OK!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8001b54:	4b82      	ldr	r3, [pc, #520]	@ (8001d60 <main+0x274>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	9202      	str	r2, [sp, #8]
 8001b5a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001b5e:	9201      	str	r2, [sp, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	9200      	str	r2, [sp, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a81      	ldr	r2, [pc, #516]	@ (8001d6c <main+0x280>)
 8001b68:	2132      	movs	r1, #50	@ 0x32
 8001b6a:	200a      	movs	r0, #10
 8001b6c:	f7ff fb46 	bl	80011fc <ILI9488_WriteString>
  {
    ILI9488_WriteString(10, 50, "Falha no Multiplexador!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
    // Trava aqui se o MUX falhar, pois nada mais vai funcionar
    while (1);
  }
  HAL_Delay(1000);
 8001b70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b74:	f001 fc52 	bl	800341c <HAL_Delay>


  // 2. Inicializa e verifica cada um dos 4 sensores de cor
  for (int i = 0; i < 4; i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001b7e:	e08b      	b.n	8001c98 <main+0x1ac>
    ILI9488_WriteString(10, 50, "Falha no Multiplexador!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8001b80:	4b77      	ldr	r3, [pc, #476]	@ (8001d60 <main+0x274>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	9202      	str	r2, [sp, #8]
 8001b86:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001b8a:	9201      	str	r2, [sp, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	9200      	str	r2, [sp, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a77      	ldr	r2, [pc, #476]	@ (8001d70 <main+0x284>)
 8001b94:	2132      	movs	r1, #50	@ 0x32
 8001b96:	200a      	movs	r0, #10
 8001b98:	f7ff fb30 	bl	80011fc <ILI9488_WriteString>
    while (1);
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <main+0xb0>
  {
    sprintf(buffer, "Iniciando Sensor %d...", i + 1);
 8001ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001baa:	4972      	ldr	r1, [pc, #456]	@ (8001d74 <main+0x288>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00c ff09 	bl	800e9c4 <siprintf>
    ILI9488_WriteString(10, 80 + (i * 30), buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8001bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3350      	adds	r3, #80	@ 0x50
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	4b66      	ldr	r3, [pc, #408]	@ (8001d60 <main+0x274>)
 8001bc8:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	9202      	str	r2, [sp, #8]
 8001bd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd4:	9201      	str	r2, [sp, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4602      	mov	r2, r0
 8001bde:	200a      	movs	r0, #10
 8001be0:	f7ff fb0c 	bl	80011fc <ILI9488_WriteString>
    HAL_Delay(100);
 8001be4:	2064      	movs	r0, #100	@ 0x64
 8001be6:	f001 fc19 	bl	800341c <HAL_Delay>

    if (TCS3472_Init(&hi2c2, i))
 8001bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	485d      	ldr	r0, [pc, #372]	@ (8001d68 <main+0x27c>)
 8001bf4:	f7ff fbdc 	bl	80013b0 <TCS3472_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d022      	beq.n	8001c44 <main+0x158>
    {
      sprintf(buffer, "Sensor de Cor %d OK!", i + 1);
 8001bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c08:	495b      	ldr	r1, [pc, #364]	@ (8001d78 <main+0x28c>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f00c feda 	bl	800e9c4 <siprintf>
      ILI9488_WriteString(10, 95 + (i * 30), buffer, Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8001c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	335f      	adds	r3, #95	@ 0x5f
 8001c22:	b299      	uxth	r1, r3
 8001c24:	4b4e      	ldr	r3, [pc, #312]	@ (8001d60 <main+0x274>)
 8001c26:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	9202      	str	r2, [sp, #8]
 8001c2e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001c32:	9201      	str	r2, [sp, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	200a      	movs	r0, #10
 8001c3e:	f7ff fadd 	bl	80011fc <ILI9488_WriteString>
 8001c42:	e021      	b.n	8001c88 <main+0x19c>
    }
    else
    {
      sprintf(buffer, "Erro no Sensor de Cor %d!", i + 1);
 8001c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c4e:	494b      	ldr	r1, [pc, #300]	@ (8001d7c <main+0x290>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00c feb7 	bl	800e9c4 <siprintf>
      ILI9488_WriteString(10, 95 + (i * 30), buffer, Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8001c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	335f      	adds	r3, #95	@ 0x5f
 8001c68:	b299      	uxth	r1, r3
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d60 <main+0x274>)
 8001c6c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001c70:	2200      	movs	r2, #0
 8001c72:	9202      	str	r2, [sp, #8]
 8001c74:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c78:	9201      	str	r2, [sp, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	9200      	str	r2, [sp, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4602      	mov	r2, r0
 8001c82:	200a      	movs	r0, #10
 8001c84:	f7ff faba 	bl	80011fc <ILI9488_WriteString>
    }
    HAL_Delay(250); // Aumenta o tempo para podermos ler
 8001c88:	20fa      	movs	r0, #250	@ 0xfa
 8001c8a:	f001 fbc7 	bl	800341c <HAL_Delay>
  for (int i = 0; i < 4; i++)
 8001c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c92:	3301      	adds	r3, #1
 8001c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	f77f af7f 	ble.w	8001ba0 <main+0xb4>
  }

  ILI9488_WriteString(20, 120, "Sistema Iniciado!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <main+0x274>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	9202      	str	r2, [sp, #8]
 8001ca8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001cac:	9201      	str	r2, [sp, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	9200      	str	r2, [sp, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a32      	ldr	r2, [pc, #200]	@ (8001d80 <main+0x294>)
 8001cb6:	2178      	movs	r1, #120	@ 0x78
 8001cb8:	2014      	movs	r0, #20
 8001cba:	f7ff fa9f 	bl	80011fc <ILI9488_WriteString>
  HAL_Delay(2000); // Uma pequena pausa para o usuário ler a mensagem.
 8001cbe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cc2:	f001 fbab 	bl	800341c <HAL_Delay>

  // 4. Limpa a tela para começar a desenhar.
  ILI9488_FillScreen(ILI9488_BLACK);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff fae4 	bl	8001294 <ILI9488_FillScreen>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osMutexDef(gameMutex);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 8001cd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f009 ff5f 	bl	800bb9c <osMutexCreate>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a28      	ldr	r2, [pc, #160]	@ (8001d84 <main+0x298>)
 8001ce2:	6013      	str	r3, [r2, #0]

  osThreadDef(initPutHalTask, StartInputHalTask, osPriorityNormal, 0, 128);
 8001ce4:	4b28      	ldr	r3, [pc, #160]	@ (8001d88 <main+0x29c>)
 8001ce6:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001cea:	461d      	mov	r5, r3
 8001cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  inputHalTaskHandle = osThreadCreate(osThread(initPutHalTask), NULL);
 8001cf8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f009 feec 	bl	800badc <osThreadCreate>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <main+0x2a0>)
 8001d08:	6013      	str	r3, [r2, #0]

  osThreadDef(gameTask, StartGameTask, osPriorityNormal, 0, 256);
 8001d0a:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <main+0x2a4>)
 8001d0c:	f107 041c 	add.w	r4, r7, #28
 8001d10:	461d      	mov	r5, r3
 8001d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gameTaskHandle = osThreadCreate(osThread(gameTask), NULL);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f009 fed9 	bl	800badc <osThreadCreate>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a19      	ldr	r2, [pc, #100]	@ (8001d94 <main+0x2a8>)
 8001d2e:	6013      	str	r3, [r2, #0]

  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 256);
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <main+0x2ac>)
 8001d32:	463c      	mov	r4, r7
 8001d34:	461d      	mov	r5, r3
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001d42:	463b      	mov	r3, r7
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f009 fec8 	bl	800badc <osThreadCreate>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4a13      	ldr	r2, [pc, #76]	@ (8001d9c <main+0x2b0>)
 8001d50:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001d52:	f009 fea0 	bl	800ba96 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d56:	bf00      	nop
 8001d58:	e7fd      	b.n	8001d56 <main+0x26a>
 8001d5a:	bf00      	nop
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	20000000 	.word	0x20000000
 8001d64:	0800fc04 	.word	0x0800fc04
 8001d68:	2000036c 	.word	0x2000036c
 8001d6c:	0800fc18 	.word	0x0800fc18
 8001d70:	0800fc2c 	.word	0x0800fc2c
 8001d74:	0800fc44 	.word	0x0800fc44
 8001d78:	0800fc5c 	.word	0x0800fc5c
 8001d7c:	0800fc74 	.word	0x0800fc74
 8001d80:	0800fc90 	.word	0x0800fc90
 8001d84:	200004f0 	.word	0x200004f0
 8001d88:	0800fcb4 	.word	0x0800fcb4
 8001d8c:	200004e4 	.word	0x200004e4
 8001d90:	0800fcdc 	.word	0x0800fcdc
 8001d94:	200004e8 	.word	0x200004e8
 8001d98:	0800fd04 	.word	0x0800fd04
 8001d9c:	200004ec 	.word	0x200004ec

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	@ 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2230      	movs	r2, #48	@ 0x30
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00c fe6d 	bl	800ea8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <SystemClock_Config+0xcc>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <SystemClock_Config+0xcc>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd4:	4b25      	ldr	r3, [pc, #148]	@ (8001e6c <SystemClock_Config+0xcc>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <SystemClock_Config+0xd0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a21      	ldr	r2, [pc, #132]	@ (8001e70 <SystemClock_Config+0xd0>)
 8001dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <SystemClock_Config+0xd0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e04:	2310      	movs	r3, #16
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e10:	2308      	movs	r3, #8
 8001e12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e14:	23a8      	movs	r3, #168	@ 0xa8
 8001e16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	4618      	mov	r0, r3
 8001e26:	f005 f88d 	bl	8006f44 <HAL_RCC_OscConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e30:	f000 ff08 	bl	8002c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e34:	230f      	movs	r3, #15
 8001e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e40:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	2105      	movs	r1, #5
 8001e52:	4618      	mov	r0, r3
 8001e54:	f005 faee 	bl	8007434 <HAL_RCC_ClockConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e5e:	f000 fef1 	bl	8002c44 <Error_Handler>
  }
}
 8001e62:	bf00      	nop
 8001e64:	3750      	adds	r7, #80	@ 0x50
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000

08001e74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001e7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ec8 <MX_I2C2_Init+0x54>)
 8001e7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001e80:	4a12      	ldr	r2, [pc, #72]	@ (8001ecc <MX_I2C2_Init+0x58>)
 8001e82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001e92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001eb0:	4804      	ldr	r0, [pc, #16]	@ (8001ec4 <MX_I2C2_Init+0x50>)
 8001eb2:	f002 f84d 	bl	8003f50 <HAL_I2C_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ebc:	f000 fec2 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000036c 	.word	0x2000036c
 8001ec8:	40005800 	.word	0x40005800
 8001ecc:	000186a0 	.word	0x000186a0

08001ed0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <MX_SDIO_SD_Init+0x3c>)
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f10 <MX_SDIO_SD_Init+0x40>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <MX_SDIO_SD_Init+0x3c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <MX_SDIO_SD_Init+0x3c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <MX_SDIO_SD_Init+0x3c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <MX_SDIO_SD_Init+0x3c>)
 8001eee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ef2:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <MX_SDIO_SD_Init+0x3c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001efa:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <MX_SDIO_SD_Init+0x3c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	200003c0 	.word	0x200003c0
 8001f10:	40012c00 	.word	0x40012c00

08001f14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f1a:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <MX_SPI1_Init+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f32:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f46:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f48:	2208      	movs	r2, #8
 8001f4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f58:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f60:	220a      	movs	r2, #10
 8001f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f64:	4804      	ldr	r0, [pc, #16]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f66:	f006 ffa9 	bl	8008ebc <HAL_SPI_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f70:	f000 fe68 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000444 	.word	0x20000444
 8001f7c:	40013000 	.word	0x40013000

08001f80 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <MX_UART4_Init+0x4c>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <MX_UART4_Init+0x50>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <MX_UART4_Init+0x4c>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <MX_UART4_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <MX_UART4_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <MX_UART4_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <MX_UART4_Init+0x4c>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <MX_UART4_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <MX_UART4_Init+0x4c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <MX_UART4_Init+0x4c>)
 8001fb8:	f007 fde4 	bl	8009b84 <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001fc2:	f000 fe3f 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000049c 	.word	0x2000049c
 8001fd0:	40004c00 	.word	0x40004c00

08001fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	@ 0x28
 8001fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b49      	ldr	r3, [pc, #292]	@ (8002114 <MX_GPIO_Init+0x140>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a48      	ldr	r2, [pc, #288]	@ (8002114 <MX_GPIO_Init+0x140>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b46      	ldr	r3, [pc, #280]	@ (8002114 <MX_GPIO_Init+0x140>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b42      	ldr	r3, [pc, #264]	@ (8002114 <MX_GPIO_Init+0x140>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <MX_GPIO_Init+0x140>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b3f      	ldr	r3, [pc, #252]	@ (8002114 <MX_GPIO_Init+0x140>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <MX_GPIO_Init+0x140>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a3a      	ldr	r2, [pc, #232]	@ (8002114 <MX_GPIO_Init+0x140>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <MX_GPIO_Init+0x140>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <MX_GPIO_Init+0x140>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a33      	ldr	r2, [pc, #204]	@ (8002114 <MX_GPIO_Init+0x140>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b31      	ldr	r3, [pc, #196]	@ (8002114 <MX_GPIO_Init+0x140>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	2110      	movs	r1, #16
 800205e:	482e      	ldr	r0, [pc, #184]	@ (8002118 <MX_GPIO_Init+0x144>)
 8002060:	f001 ff5c 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|C3_Pin, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	210b      	movs	r1, #11
 8002068:	482c      	ldr	r0, [pc, #176]	@ (800211c <MX_GPIO_Init+0x148>)
 800206a:	f001 ff57 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2180      	movs	r1, #128	@ 0x80
 8002072:	482b      	ldr	r0, [pc, #172]	@ (8002120 <MX_GPIO_Init+0x14c>)
 8002074:	f001 ff52 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C1_Pin|C2_Pin|C4_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	210b      	movs	r1, #11
 800207c:	4829      	ldr	r0, [pc, #164]	@ (8002124 <MX_GPIO_Init+0x150>)
 800207e:	f001 ff4d 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002082:	2310      	movs	r3, #16
 8002084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002086:	2301      	movs	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	481f      	ldr	r0, [pc, #124]	@ (8002118 <MX_GPIO_Init+0x144>)
 800209a:	f001 fd8b 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin C3_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|C3_Pin;
 800209e:	230b      	movs	r3, #11
 80020a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	4819      	ldr	r0, [pc, #100]	@ (800211c <MX_GPIO_Init+0x148>)
 80020b6:	f001 fd7d 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_LED_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4813      	ldr	r0, [pc, #76]	@ (8002120 <MX_GPIO_Init+0x14c>)
 80020d2:	f001 fd6f 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C4_Pin;
 80020d6:	230b      	movs	r3, #11
 80020d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	480d      	ldr	r0, [pc, #52]	@ (8002124 <MX_GPIO_Init+0x150>)
 80020ee:	f001 fd61 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 80020f2:	23f0      	movs	r3, #240	@ 0xf0
 80020f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4807      	ldr	r0, [pc, #28]	@ (8002124 <MX_GPIO_Init+0x150>)
 8002106:	f001 fd55 	bl	8003bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800210a:	bf00      	nop
 800210c:	3728      	adds	r7, #40	@ 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00

08002128 <StartInputHalTask>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void StartInputHalTask(void const * argument)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  char cCurrent;
  /* Infinite loop */
  for(;;) // O loop infinito de uma tarefa RTOS é "for(;;)"
  {
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8002130:	f7ff fc52 	bl	80019d8 <KEYPAD_Scan>
 8002134:	4603      	mov	r3, r0
 8002136:	72fb      	strb	r3, [r7, #11]
    if(cCurrent != '\0')
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <StartInputHalTask+0x1c>
    {
      keyPressed = cCurrent;
 800213e:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <StartInputHalTask+0x4c>)
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	7013      	strb	r3, [r2, #0]
    }
    for (int i = 0; i < 4; i++) {
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e00c      	b.n	8002164 <StartInputHalTask+0x3c>
        TCS3472_ReadData(&hi2c2, i, &colorData[i]);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	b2d9      	uxtb	r1, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4a09      	ldr	r2, [pc, #36]	@ (8002178 <StartInputHalTask+0x50>)
 8002154:	4413      	add	r3, r2
 8002156:	461a      	mov	r2, r3
 8002158:	4808      	ldr	r0, [pc, #32]	@ (800217c <StartInputHalTask+0x54>)
 800215a:	f7ff f9a2 	bl	80014a2 <TCS3472_ReadData>
    for (int i = 0; i < 4; i++) {
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b03      	cmp	r3, #3
 8002168:	ddef      	ble.n	800214a <StartInputHalTask+0x22>
    }
    osDelay(50);
 800216a:	2032      	movs	r0, #50	@ 0x32
 800216c:	f009 fd02 	bl	800bb74 <osDelay>
    cCurrent = KEYPAD_Scan(); // Escaneia o teclado
 8002170:	e7de      	b.n	8002130 <StartInputHalTask+0x8>
 8002172:	bf00      	nop
 8002174:	200004f4 	.word	0x200004f4
 8002178:	20000510 	.word	0x20000510
 800217c:	2000036c 	.word	0x2000036c

08002180 <StartGameTask>:
  }
}

void StartGameTask(void const * argument)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  char cLocalKeyPressed;
  for(;;)
  {
    cLocalKeyPressed = NONE_KEY;
 8002188:	2300      	movs	r3, #0
 800218a:	75fb      	strb	r3, [r7, #23]
    
    osMutexWait(gameMutexHandle, osWaitForever);
 800218c:	4bb3      	ldr	r3, [pc, #716]	@ (800245c <StartGameTask+0x2dc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	4618      	mov	r0, r3
 8002196:	f009 fd19 	bl	800bbcc <osMutexWait>
    if (keyPressed != NONE_KEY) {
 800219a:	4bb1      	ldr	r3, [pc, #708]	@ (8002460 <StartGameTask+0x2e0>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <StartGameTask+0x30>
      cLocalKeyPressed = keyPressed;
 80021a4:	4bae      	ldr	r3, [pc, #696]	@ (8002460 <StartGameTask+0x2e0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	75fb      	strb	r3, [r7, #23]
      keyPressed = NONE_KEY; 
 80021aa:	4bad      	ldr	r3, [pc, #692]	@ (8002460 <StartGameTask+0x2e0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
    }
    osMutexRelease(gameMutexHandle);
 80021b0:	4baa      	ldr	r3, [pc, #680]	@ (800245c <StartGameTask+0x2dc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f009 fd57 	bl	800bc68 <osMutexRelease>
    
    if (cLocalKeyPressed != NONE_KEY)
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 81e9 	beq.w	8002594 <StartGameTask+0x414>
    {
      osMutexWait(gameMutexHandle, osWaitForever);
 80021c2:	4ba6      	ldr	r3, [pc, #664]	@ (800245c <StartGameTask+0x2dc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f04f 31ff 	mov.w	r1, #4294967295
 80021ca:	4618      	mov	r0, r3
 80021cc:	f009 fcfe 	bl	800bbcc <osMutexWait>
      switch(eCurrentState)
 80021d0:	4ba4      	ldr	r3, [pc, #656]	@ (8002464 <StartGameTask+0x2e4>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	f200 81cb 	bhi.w	8002572 <StartGameTask+0x3f2>
 80021dc:	a201      	add	r2, pc, #4	@ (adr r2, 80021e4 <StartGameTask+0x64>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	080021fd 	.word	0x080021fd
 80021e8:	08002225 	.word	0x08002225
 80021ec:	080022f9 	.word	0x080022f9
 80021f0:	0800244b 	.word	0x0800244b
 80021f4:	080024e1 	.word	0x080024e1
 80021f8:	0800255f 	.word	0x0800255f
      {
        case eInitGame:
        {
          eUserPlayer.u8HeartPoints = 100;
 80021fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002468 <StartGameTask+0x2e8>)
 80021fe:	2264      	movs	r2, #100	@ 0x64
 8002200:	701a      	strb	r2, [r3, #0]
          eCpuPlayer.u8HeartPoints = 100;
 8002202:	4b9a      	ldr	r3, [pc, #616]	@ (800246c <StartGameTask+0x2ec>)
 8002204:	2264      	movs	r2, #100	@ 0x64
 8002206:	701a      	strb	r2, [r3, #0]
          if(cLocalKeyPressed == CONFIRM_KEY)
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b2a      	cmp	r3, #42	@ 0x2a
 800220c:	f040 81b8 	bne.w	8002580 <StartGameTask+0x400>
          {
            eCurrentState = eDificultSelect;
 8002210:	4b94      	ldr	r3, [pc, #592]	@ (8002464 <StartGameTask+0x2e4>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
            selectedOption = 0;
 8002216:	4b96      	ldr	r3, [pc, #600]	@ (8002470 <StartGameTask+0x2f0>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
            u8CleanScreen = TRUE;
 800221c:	4b95      	ldr	r3, [pc, #596]	@ (8002474 <StartGameTask+0x2f4>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
  }
          break;
 8002222:	e1ad      	b.n	8002580 <StartGameTask+0x400>
        }
        case eDificultSelect:
        {
          switch(cLocalKeyPressed)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	3b23      	subs	r3, #35	@ 0x23
 8002228:	2b15      	cmp	r3, #21
 800222a:	d863      	bhi.n	80022f4 <StartGameTask+0x174>
 800222c:	a201      	add	r2, pc, #4	@ (adr r2, 8002234 <StartGameTask+0xb4>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	080022c9 	.word	0x080022c9
 8002238:	080022f5 	.word	0x080022f5
 800223c:	080022f5 	.word	0x080022f5
 8002240:	080022f5 	.word	0x080022f5
 8002244:	080022f5 	.word	0x080022f5
 8002248:	080022f5 	.word	0x080022f5
 800224c:	080022f5 	.word	0x080022f5
 8002250:	080022d7 	.word	0x080022d7
 8002254:	080022f5 	.word	0x080022f5
 8002258:	080022f5 	.word	0x080022f5
 800225c:	080022f5 	.word	0x080022f5
 8002260:	080022f5 	.word	0x080022f5
 8002264:	080022f5 	.word	0x080022f5
 8002268:	080022f5 	.word	0x080022f5
 800226c:	080022f5 	.word	0x080022f5
 8002270:	080022ab 	.word	0x080022ab
 8002274:	080022f5 	.word	0x080022f5
 8002278:	080022f5 	.word	0x080022f5
 800227c:	080022f5 	.word	0x080022f5
 8002280:	080022f5 	.word	0x080022f5
 8002284:	080022f5 	.word	0x080022f5
 8002288:	0800228d 	.word	0x0800228d
          {
            case UP_KEY:
            {
              selectedOption = (selectedOption < MENU_OPTIONS_DIFFICULTY - 1) ? selectedOption + 1 : 0;
 800228c:	4b78      	ldr	r3, [pc, #480]	@ (8002470 <StartGameTask+0x2f0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	dc03      	bgt.n	800229c <StartGameTask+0x11c>
 8002294:	4b76      	ldr	r3, [pc, #472]	@ (8002470 <StartGameTask+0x2f0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3301      	adds	r3, #1
 800229a:	e000      	b.n	800229e <StartGameTask+0x11e>
 800229c:	2300      	movs	r3, #0
 800229e:	4a74      	ldr	r2, [pc, #464]	@ (8002470 <StartGameTask+0x2f0>)
 80022a0:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 80022a2:	4b74      	ldr	r3, [pc, #464]	@ (8002474 <StartGameTask+0x2f4>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
              break;
 80022a8:	e025      	b.n	80022f6 <StartGameTask+0x176>
  }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_DIFFICULTY - 1;
 80022aa:	4b71      	ldr	r3, [pc, #452]	@ (8002470 <StartGameTask+0x2f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	dd03      	ble.n	80022ba <StartGameTask+0x13a>
 80022b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002470 <StartGameTask+0x2f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	e000      	b.n	80022bc <StartGameTask+0x13c>
 80022ba:	2302      	movs	r3, #2
 80022bc:	4a6c      	ldr	r2, [pc, #432]	@ (8002470 <StartGameTask+0x2f0>)
 80022be:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 80022c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002474 <StartGameTask+0x2f4>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
              break;
 80022c6:	e016      	b.n	80022f6 <StartGameTask+0x176>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 80022c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002474 <StartGameTask+0x2f4>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
              eCurrentState = eInitGame;
 80022ce:	4b65      	ldr	r3, [pc, #404]	@ (8002464 <StartGameTask+0x2e4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
              break;
 80022d4:	e00f      	b.n	80022f6 <StartGameTask+0x176>
            }
            case CONFIRM_KEY:
            {
              selectedDifficulty = (EDificult)selectedOption;
 80022d6:	4b66      	ldr	r3, [pc, #408]	@ (8002470 <StartGameTask+0x2f0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b66      	ldr	r3, [pc, #408]	@ (8002478 <StartGameTask+0x2f8>)
 80022de:	701a      	strb	r2, [r3, #0]
              eCurrentState = ePersonaSelect;
 80022e0:	4b60      	ldr	r3, [pc, #384]	@ (8002464 <StartGameTask+0x2e4>)
 80022e2:	2202      	movs	r2, #2
 80022e4:	701a      	strb	r2, [r3, #0]
              selectedOption = FALSE; // Reseta para o próximo menu
 80022e6:	4b62      	ldr	r3, [pc, #392]	@ (8002470 <StartGameTask+0x2f0>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80022ec:	4b61      	ldr	r3, [pc, #388]	@ (8002474 <StartGameTask+0x2f4>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
              break;
 80022f2:	e000      	b.n	80022f6 <StartGameTask+0x176>
            }
            default:
            {
              break;
 80022f4:	bf00      	nop
            }
          }
          break;
 80022f6:	e148      	b.n	800258a <StartGameTask+0x40a>
        }
        case ePersonaSelect:
        {
          switch(cLocalKeyPressed)
 80022f8:	7dfb      	ldrb	r3, [r7, #23]
 80022fa:	3b23      	subs	r3, #35	@ 0x23
 80022fc:	2b15      	cmp	r3, #21
 80022fe:	f200 80a2 	bhi.w	8002446 <StartGameTask+0x2c6>
 8002302:	a201      	add	r2, pc, #4	@ (adr r2, 8002308 <StartGameTask+0x188>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	0800239d 	.word	0x0800239d
 800230c:	08002447 	.word	0x08002447
 8002310:	08002447 	.word	0x08002447
 8002314:	08002447 	.word	0x08002447
 8002318:	08002447 	.word	0x08002447
 800231c:	08002447 	.word	0x08002447
 8002320:	08002447 	.word	0x08002447
 8002324:	080023ab 	.word	0x080023ab
 8002328:	08002447 	.word	0x08002447
 800232c:	08002447 	.word	0x08002447
 8002330:	08002447 	.word	0x08002447
 8002334:	08002447 	.word	0x08002447
 8002338:	08002447 	.word	0x08002447
 800233c:	08002447 	.word	0x08002447
 8002340:	08002447 	.word	0x08002447
 8002344:	0800237f 	.word	0x0800237f
 8002348:	08002447 	.word	0x08002447
 800234c:	08002447 	.word	0x08002447
 8002350:	08002447 	.word	0x08002447
 8002354:	08002447 	.word	0x08002447
 8002358:	08002447 	.word	0x08002447
 800235c:	08002361 	.word	0x08002361
          {
            case UP_KEY:
            {                  
              selectedOption = (selectedOption < MENU_OPTIONS_PERSONA - 1) ? selectedOption + 1 : 0;
 8002360:	4b43      	ldr	r3, [pc, #268]	@ (8002470 <StartGameTask+0x2f0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b03      	cmp	r3, #3
 8002366:	dc03      	bgt.n	8002370 <StartGameTask+0x1f0>
 8002368:	4b41      	ldr	r3, [pc, #260]	@ (8002470 <StartGameTask+0x2f0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	e000      	b.n	8002372 <StartGameTask+0x1f2>
 8002370:	2300      	movs	r3, #0
 8002372:	4a3f      	ldr	r2, [pc, #252]	@ (8002470 <StartGameTask+0x2f0>)
 8002374:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8002376:	4b3f      	ldr	r3, [pc, #252]	@ (8002474 <StartGameTask+0x2f4>)
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
              break;
 800237c:	e064      	b.n	8002448 <StartGameTask+0x2c8>
            }
            case DOWN_KEY:
            {
              selectedOption = (selectedOption > 0) ? selectedOption - 1 : MENU_OPTIONS_PERSONA - 1;
 800237e:	4b3c      	ldr	r3, [pc, #240]	@ (8002470 <StartGameTask+0x2f0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	dd03      	ble.n	800238e <StartGameTask+0x20e>
 8002386:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <StartGameTask+0x2f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3b01      	subs	r3, #1
 800238c:	e000      	b.n	8002390 <StartGameTask+0x210>
 800238e:	2304      	movs	r3, #4
 8002390:	4a37      	ldr	r2, [pc, #220]	@ (8002470 <StartGameTask+0x2f0>)
 8002392:	6013      	str	r3, [r2, #0]
              u8CleanScreen = TRUE;
 8002394:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <StartGameTask+0x2f4>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
              break;
 800239a:	e055      	b.n	8002448 <StartGameTask+0x2c8>
            }
            case BACK_KEY:
            {
              u8CleanScreen = TRUE;
 800239c:	4b35      	ldr	r3, [pc, #212]	@ (8002474 <StartGameTask+0x2f4>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
              eCurrentState = eDificultSelect;
 80023a2:	4b30      	ldr	r3, [pc, #192]	@ (8002464 <StartGameTask+0x2e4>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
              break;
 80023a8:	e04e      	b.n	8002448 <StartGameTask+0x2c8>
            }
            case CONFIRM_KEY:
            {
              eUserPlayer.ePersonaElemental = (EElemental)selectedOption;
 80023aa:	4b31      	ldr	r3, [pc, #196]	@ (8002470 <StartGameTask+0x2f0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <StartGameTask+0x2e8>)
 80023b2:	705a      	strb	r2, [r3, #1]
              eCurrentState = eBattleInit;
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <StartGameTask+0x2e4>)
 80023b6:	2203      	movs	r2, #3
 80023b8:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80023ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002474 <StartGameTask+0x2f4>)
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0;     // Zera o contador de ataques
 80023c0:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <StartGameTask+0x2fc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;   // Inicia com a primeira opção (Fogo) pré-selecionada
 80023c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <StartGameTask+0x2f0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 80023cc:	2204      	movs	r2, #4
 80023ce:	2100      	movs	r1, #0
 80023d0:	482b      	ldr	r0, [pc, #172]	@ (8002480 <StartGameTask+0x300>)
 80023d2:	f00c fb5c 	bl	800ea8e <memset>
              memset((void*)eCpuPlayer.eAttackSequential, 0, sizeof(eCpuPlayer.eAttackSequential));
 80023d6:	2204      	movs	r2, #4
 80023d8:	2100      	movs	r1, #0
 80023da:	482a      	ldr	r0, [pc, #168]	@ (8002484 <StartGameTask+0x304>)
 80023dc:	f00c fb57 	bl	800ea8e <memset>

              srand(HAL_GetTick()); 
 80023e0:	f001 f810 	bl	8003404 <HAL_GetTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f00c f9be 	bl	800e768 <srand>
              eCpuPlayer.ePersonaElemental = (rand() % 6);
 80023ec:	f00c f9ea 	bl	800e7c4 <rand>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <StartGameTask+0x308>)
 80023f4:	fb83 3102 	smull	r3, r1, r3, r2
 80023f8:	17d3      	asrs	r3, r2, #31
 80023fa:	1ac9      	subs	r1, r1, r3
 80023fc:	460b      	mov	r3, r1
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	440b      	add	r3, r1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	1ad1      	subs	r1, r2, r3
 8002406:	b2ca      	uxtb	r2, r1
 8002408:	4b18      	ldr	r3, [pc, #96]	@ (800246c <StartGameTask+0x2ec>)
 800240a:	705a      	strb	r2, [r3, #1]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 800240c:	2300      	movs	r3, #0
 800240e:	75bb      	strb	r3, [r7, #22]
 8002410:	e015      	b.n	800243e <StartGameTask+0x2be>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6); 
 8002412:	f00c f9d7 	bl	800e7c4 <rand>
 8002416:	4602      	mov	r2, r0
 8002418:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <StartGameTask+0x308>)
 800241a:	fb83 3102 	smull	r3, r1, r3, r2
 800241e:	17d3      	asrs	r3, r2, #31
 8002420:	1ac9      	subs	r1, r1, r3
 8002422:	460b      	mov	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	440b      	add	r3, r1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	1ad1      	subs	r1, r2, r3
 800242c:	7dbb      	ldrb	r3, [r7, #22]
 800242e:	b2c9      	uxtb	r1, r1
 8002430:	4a0e      	ldr	r2, [pc, #56]	@ (800246c <StartGameTask+0x2ec>)
 8002432:	4413      	add	r3, r2
 8002434:	460a      	mov	r2, r1
 8002436:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 8002438:	7dbb      	ldrb	r3, [r7, #22]
 800243a:	3301      	adds	r3, #1
 800243c:	75bb      	strb	r3, [r7, #22]
 800243e:	7dbb      	ldrb	r3, [r7, #22]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d9e6      	bls.n	8002412 <StartGameTask+0x292>
              }
              break;
 8002444:	e000      	b.n	8002448 <StartGameTask+0x2c8>
            }
            default:
            {
              break;
 8002446:	bf00      	nop
            }
          }
          break;
 8002448:	e09f      	b.n	800258a <StartGameTask+0x40a>
        }
        case eBattleInit:
        {
          // A lógica de ataque agora só depende das teclas CONFIRM e BACK
          switch (cLocalKeyPressed)
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	2b23      	cmp	r3, #35	@ 0x23
 800244e:	d03e      	beq.n	80024ce <StartGameTask+0x34e>
 8002450:	2b2a      	cmp	r3, #42	@ 0x2a
 8002452:	d143      	bne.n	80024dc <StartGameTask+0x35c>
          {
            case CONFIRM_KEY:
            {
              // Lê a cor de cada um dos 4 sensores e define a sequência de ataque
              for (int i = 0; i < ATTACKS_NUMBERS; i++)
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e02b      	b.n	80024b2 <StartGameTask+0x332>
 800245a:	bf00      	nop
 800245c:	200004f0 	.word	0x200004f0
 8002460:	200004f4 	.word	0x200004f4
 8002464:	200004f5 	.word	0x200004f5
 8002468:	20000500 	.word	0x20000500
 800246c:	20000508 	.word	0x20000508
 8002470:	200004f8 	.word	0x200004f8
 8002474:	20000048 	.word	0x20000048
 8002478:	200004fc 	.word	0x200004fc
 800247c:	20000530 	.word	0x20000530
 8002480:	20000502 	.word	0x20000502
 8002484:	2000050a 	.word	0x2000050a
 8002488:	2aaaaaab 	.word	0x2aaaaaab
              {
                  eUserPlayer.eAttackSequential[i] = TCS3472_DetectColor(colorData[i]);
 800248c:	4a43      	ldr	r2, [pc, #268]	@ (800259c <StartGameTask+0x41c>)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002498:	f7ff f878 	bl	800158c <TCS3472_DetectColor>
 800249c:	4603      	mov	r3, r0
 800249e:	4619      	mov	r1, r3
 80024a0:	4a3f      	ldr	r2, [pc, #252]	@ (80025a0 <StartGameTask+0x420>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	3302      	adds	r3, #2
 80024a8:	460a      	mov	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
              for (int i = 0; i < ATTACKS_NUMBERS; i++)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	3301      	adds	r3, #1
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	dde9      	ble.n	800248c <StartGameTask+0x30c>
              }

              // Prepara e inicia a batalha
              vInitBattle(&eUserPlayer, &eCpuPlayer);
 80024b8:	493a      	ldr	r1, [pc, #232]	@ (80025a4 <StartGameTask+0x424>)
 80024ba:	4839      	ldr	r0, [pc, #228]	@ (80025a0 <StartGameTask+0x420>)
 80024bc:	f7ff f8f4 	bl	80016a8 <vInitBattle>
              eCurrentState = ePlayerTurn;
 80024c0:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <StartGameTask+0x428>)
 80024c2:	2204      	movs	r2, #4
 80024c4:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80024c6:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <StartGameTask+0x42c>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
              break;
 80024cc:	e007      	b.n	80024de <StartGameTask+0x35e>
            } 
            case BACK_KEY:
            {
              eCurrentState = ePersonaSelect;
 80024ce:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <StartGameTask+0x428>)
 80024d0:	2202      	movs	r2, #2
 80024d2:	701a      	strb	r2, [r3, #0]
              u8CleanScreen = TRUE;
 80024d4:	4b35      	ldr	r3, [pc, #212]	@ (80025ac <StartGameTask+0x42c>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
              break;
 80024da:	e000      	b.n	80024de <StartGameTask+0x35e>
            }
            default:
              // Ignora outras teclas, pois a tela se atualiza sozinha
              break;
 80024dc:	bf00      	nop
          }
          break;
 80024de:	e054      	b.n	800258a <StartGameTask+0x40a>
        }
        case ePlayerTurn:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80024e4:	d14e      	bne.n	8002584 <StartGameTask+0x404>
          {            
            if (eUserPlayer.u8HeartPoints == 0 || eCpuPlayer.u8HeartPoints == 0)
 80024e6:	4b2e      	ldr	r3, [pc, #184]	@ (80025a0 <StartGameTask+0x420>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <StartGameTask+0x37a>
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <StartGameTask+0x424>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <StartGameTask+0x382>
            {
              eCurrentState = eEndGame; 
 80024fa:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <StartGameTask+0x428>)
 80024fc:	2205      	movs	r2, #5
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e029      	b.n	8002556 <StartGameTask+0x3d6>
            }
            else
            {
              // Ninguém perdeu, volta para selecionar novos ataques
              eCurrentState = eBattleInit;
 8002502:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <StartGameTask+0x428>)
 8002504:	2203      	movs	r2, #3
 8002506:	701a      	strb	r2, [r3, #0]
              u8ContAttack = 0; // Prepara para o novo round
 8002508:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <StartGameTask+0x430>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
              selectedOption = 0;
 800250e:	4b29      	ldr	r3, [pc, #164]	@ (80025b4 <StartGameTask+0x434>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
              memset((void*)eUserPlayer.eAttackSequential, 0, sizeof(eUserPlayer.eAttackSequential));
 8002514:	2204      	movs	r2, #4
 8002516:	2100      	movs	r1, #0
 8002518:	4827      	ldr	r0, [pc, #156]	@ (80025b8 <StartGameTask+0x438>)
 800251a:	f00c fab8 	bl	800ea8e <memset>
              
              // Gera novos ataques para a CPU para o próximo round
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	e015      	b.n	8002550 <StartGameTask+0x3d0>
              {
                eCpuPlayer.eAttackSequential[u8Idx] = (EColor)(rand() % 6);
 8002524:	f00c f94e 	bl	800e7c4 <rand>
 8002528:	4602      	mov	r2, r0
 800252a:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <StartGameTask+0x43c>)
 800252c:	fb83 3102 	smull	r3, r1, r3, r2
 8002530:	17d3      	asrs	r3, r2, #31
 8002532:	1ac9      	subs	r1, r1, r3
 8002534:	460b      	mov	r3, r1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	1ad1      	subs	r1, r2, r3
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	b2c9      	uxtb	r1, r1
 8002542:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <StartGameTask+0x424>)
 8002544:	4413      	add	r3, r2
 8002546:	460a      	mov	r2, r1
 8002548:	709a      	strb	r2, [r3, #2]
              for(uint8_t u8Idx = 0; u8Idx < ATTACKS_NUMBERS; u8Idx++)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	3301      	adds	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d9e6      	bls.n	8002524 <StartGameTask+0x3a4>
              }
            }
            u8CleanScreen = TRUE;
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <StartGameTask+0x42c>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800255c:	e012      	b.n	8002584 <StartGameTask+0x404>
        }
        case eEndGame:
        {
          if(cLocalKeyPressed == CONFIRM_KEY)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b2a      	cmp	r3, #42	@ 0x2a
 8002562:	d111      	bne.n	8002588 <StartGameTask+0x408>
          {
            eCurrentState = eInitGame;
 8002564:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <StartGameTask+0x428>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
            u8CleanScreen = TRUE;
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <StartGameTask+0x42c>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8002570:	e00a      	b.n	8002588 <StartGameTask+0x408>
        }
        default:
        {
          // Estado desconhecido, volta para o início por segurança
          eCurrentState = eInitGame;
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <StartGameTask+0x428>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
          u8CleanScreen = TRUE;
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <StartGameTask+0x42c>)
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
          break;
 800257e:	e004      	b.n	800258a <StartGameTask+0x40a>
          break;
 8002580:	bf00      	nop
 8002582:	e002      	b.n	800258a <StartGameTask+0x40a>
          break;
 8002584:	bf00      	nop
 8002586:	e000      	b.n	800258a <StartGameTask+0x40a>
          break;
 8002588:	bf00      	nop
        }
      }
      osMutexRelease(gameMutexHandle);
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <StartGameTask+0x440>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f009 fb6a 	bl	800bc68 <osMutexRelease>
    }
    osDelay(50);
 8002594:	2032      	movs	r0, #50	@ 0x32
 8002596:	f009 faed 	bl	800bb74 <osDelay>
    cLocalKeyPressed = NONE_KEY;
 800259a:	e5f5      	b.n	8002188 <StartGameTask+0x8>
 800259c:	20000510 	.word	0x20000510
 80025a0:	20000500 	.word	0x20000500
 80025a4:	20000508 	.word	0x20000508
 80025a8:	200004f5 	.word	0x200004f5
 80025ac:	20000048 	.word	0x20000048
 80025b0:	20000530 	.word	0x20000530
 80025b4:	200004f8 	.word	0x200004f8
 80025b8:	20000502 	.word	0x20000502
 80025bc:	2aaaaaab 	.word	0x2aaaaaab
 80025c0:	200004f0 	.word	0x200004f0

080025c4 <StartDisplayTask>:
  }
}

void StartDisplayTask(void const * argument)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b098      	sub	sp, #96	@ 0x60
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  char buffer[30];
  uint8_t u8RedrawScreen = FALSE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  EGameStates ePreviousState = eInitGame;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  for(;;)
  {
    osMutexWait(gameMutexHandle, osWaitForever);
 80025d8:	4bbc      	ldr	r3, [pc, #752]	@ (80028cc <StartDisplayTask+0x308>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	4618      	mov	r0, r3
 80025e2:	f009 faf3 	bl	800bbcc <osMutexWait>
    EGameStates eLocalCurrentState = eCurrentState;
 80025e6:	4bba      	ldr	r3, [pc, #744]	@ (80028d0 <StartDisplayTask+0x30c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    osMutexRelease(gameMutexHandle);
 80025ee:	4bb7      	ldr	r3, [pc, #732]	@ (80028cc <StartDisplayTask+0x308>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f009 fb38 	bl	800bc68 <osMutexRelease>



    if(eLocalCurrentState != ePreviousState)
 80025f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80025fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002600:	429a      	cmp	r2, r3
 8002602:	f000 8238 	beq.w	8002a76 <StartDisplayTask+0x4b2>
    {
      ClearScreen();
 8002606:	f7ff f96d 	bl	80018e4 <ClearScreen>

      switch(eLocalCurrentState)
 800260a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800260e:	2b05      	cmp	r3, #5
 8002610:	f200 821e 	bhi.w	8002a50 <StartDisplayTask+0x48c>
 8002614:	a201      	add	r2, pc, #4	@ (adr r2, 800261c <StartDisplayTask+0x58>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	08002635 	.word	0x08002635
 8002620:	0800264f 	.word	0x0800264f
 8002624:	0800265f 	.word	0x0800265f
 8002628:	0800266f 	.word	0x0800266f
 800262c:	080026fb 	.word	0x080026fb
 8002630:	08002987 	.word	0x08002987
      {
          case eInitGame:
          {
            ILI9488_DrawImage_RGB666(100, 10, Logo300_map.width, Logo300_map.height, Logo300_map.pixel_data);
 8002634:	4ba7      	ldr	r3, [pc, #668]	@ (80028d4 <StartDisplayTask+0x310>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b29a      	uxth	r2, r3
 800263a:	4ba6      	ldr	r3, [pc, #664]	@ (80028d4 <StartDisplayTask+0x310>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	b29b      	uxth	r3, r3
 8002640:	49a5      	ldr	r1, [pc, #660]	@ (80028d8 <StartDisplayTask+0x314>)
 8002642:	9100      	str	r1, [sp, #0]
 8002644:	210a      	movs	r1, #10
 8002646:	2064      	movs	r0, #100	@ 0x64
 8002648:	f7fe fe37 	bl	80012ba <ILI9488_DrawImage_RGB666>
            break;
 800264c:	e20f      	b.n	8002a6e <StartDisplayTask+0x4aa>
          }
          case eDificultSelect:
          {
            DrawMenu("Selecione Dificuldade", difficultyOptions, MENU_OPTIONS_DIFFICULTY, selectedOption);
 800264e:	4ba3      	ldr	r3, [pc, #652]	@ (80028dc <StartDisplayTask+0x318>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2203      	movs	r2, #3
 8002654:	49a2      	ldr	r1, [pc, #648]	@ (80028e0 <StartDisplayTask+0x31c>)
 8002656:	48a3      	ldr	r0, [pc, #652]	@ (80028e4 <StartDisplayTask+0x320>)
 8002658:	f7ff f954 	bl	8001904 <DrawMenu>
            break;
 800265c:	e207      	b.n	8002a6e <StartDisplayTask+0x4aa>
          }
          case ePersonaSelect:
          {
            DrawMenu("Selecione Personagem", personaOptions, MENU_OPTIONS_PERSONA, selectedOption);
 800265e:	4b9f      	ldr	r3, [pc, #636]	@ (80028dc <StartDisplayTask+0x318>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2205      	movs	r2, #5
 8002664:	49a0      	ldr	r1, [pc, #640]	@ (80028e8 <StartDisplayTask+0x324>)
 8002666:	48a1      	ldr	r0, [pc, #644]	@ (80028ec <StartDisplayTask+0x328>)
 8002668:	f7ff f94c 	bl	8001904 <DrawMenu>
            break;
 800266c:	e1ff      	b.n	8002a6e <StartDisplayTask+0x4aa>
          }
          case eBattleInit:
          {
            ILI9488_WriteString(10, 15, "Prepare seus ataques!", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 800266e:	4ba0      	ldr	r3, [pc, #640]	@ (80028f0 <StartDisplayTask+0x32c>)
 8002670:	2200      	movs	r2, #0
 8002672:	9202      	str	r2, [sp, #8]
 8002674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002678:	9201      	str	r2, [sp, #4]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	9200      	str	r2, [sp, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a9c      	ldr	r2, [pc, #624]	@ (80028f4 <StartDisplayTask+0x330>)
 8002682:	210f      	movs	r1, #15
 8002684:	200a      	movs	r0, #10
 8002686:	f7fe fdb9 	bl	80011fc <ILI9488_WriteString>
            ILI9488_WriteString(10, 35, "Posicione os 4 cubos e pressione *", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 800268a:	4b99      	ldr	r3, [pc, #612]	@ (80028f0 <StartDisplayTask+0x32c>)
 800268c:	2200      	movs	r2, #0
 800268e:	9202      	str	r2, [sp, #8]
 8002690:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002694:	9201      	str	r2, [sp, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	9200      	str	r2, [sp, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a96      	ldr	r2, [pc, #600]	@ (80028f8 <StartDisplayTask+0x334>)
 800269e:	2123      	movs	r1, #35	@ 0x23
 80026a0:	200a      	movs	r0, #10
 80026a2:	f7fe fdab 	bl	80011fc <ILI9488_WriteString>
            for (int i = 0; i < 4; i++) {
 80026a6:	2300      	movs	r3, #0
 80026a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026aa:	e022      	b.n	80026f2 <StartDisplayTask+0x12e>
              sprintf(buffer, "Sensor %d:", i + 1);
 80026ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	f107 0318 	add.w	r3, r7, #24
 80026b4:	4991      	ldr	r1, [pc, #580]	@ (80028fc <StartDisplayTask+0x338>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f00c f984 	bl	800e9c4 <siprintf>
              ILI9488_WriteString(20, 80 + (i * 30), buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80026bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3350      	adds	r3, #80	@ 0x50
 80026cc:	b299      	uxth	r1, r3
 80026ce:	4b88      	ldr	r3, [pc, #544]	@ (80028f0 <StartDisplayTask+0x32c>)
 80026d0:	f107 0018 	add.w	r0, r7, #24
 80026d4:	2200      	movs	r2, #0
 80026d6:	9202      	str	r2, [sp, #8]
 80026d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026dc:	9201      	str	r2, [sp, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	9200      	str	r2, [sp, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4602      	mov	r2, r0
 80026e6:	2014      	movs	r0, #20
 80026e8:	f7fe fd88 	bl	80011fc <ILI9488_WriteString>
            for (int i = 0; i < 4; i++) {
 80026ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ee:	3301      	adds	r3, #1
 80026f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	ddd9      	ble.n	80026ac <StartDisplayTask+0xe8>
              }
            break;
 80026f8:	e1b9      	b.n	8002a6e <StartDisplayTask+0x4aa>
          }
          case ePlayerTurn:
          {
            ILI9488_WriteString(10, 20, "Resultado do Round", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80026fa:	4b7d      	ldr	r3, [pc, #500]	@ (80028f0 <StartDisplayTask+0x32c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	9202      	str	r2, [sp, #8]
 8002700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002704:	9201      	str	r2, [sp, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	9200      	str	r2, [sp, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a7c      	ldr	r2, [pc, #496]	@ (8002900 <StartDisplayTask+0x33c>)
 800270e:	2114      	movs	r1, #20
 8002710:	200a      	movs	r0, #10
 8002712:	f7fe fd73 	bl	80011fc <ILI9488_WriteString>
            sprintf(buffer, "Sua Vida: %d", eUserPlayer.u8HeartPoints);
 8002716:	4b7b      	ldr	r3, [pc, #492]	@ (8002904 <StartDisplayTask+0x340>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	f107 0318 	add.w	r3, r7, #24
 8002722:	4979      	ldr	r1, [pc, #484]	@ (8002908 <StartDisplayTask+0x344>)
 8002724:	4618      	mov	r0, r3
 8002726:	f00c f94d 	bl	800e9c4 <siprintf>
            ILI9488_WriteString(10, 60, buffer, Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 800272a:	4b71      	ldr	r3, [pc, #452]	@ (80028f0 <StartDisplayTask+0x32c>)
 800272c:	f107 0118 	add.w	r1, r7, #24
 8002730:	2200      	movs	r2, #0
 8002732:	9202      	str	r2, [sp, #8]
 8002734:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002738:	9201      	str	r2, [sp, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	9200      	str	r2, [sp, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	460a      	mov	r2, r1
 8002742:	213c      	movs	r1, #60	@ 0x3c
 8002744:	200a      	movs	r0, #10
 8002746:	f7fe fd59 	bl	80011fc <ILI9488_WriteString>
            sprintf(buffer, "Vida CPU: %d", eCpuPlayer.u8HeartPoints);
 800274a:	4b70      	ldr	r3, [pc, #448]	@ (800290c <StartDisplayTask+0x348>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	f107 0318 	add.w	r3, r7, #24
 8002756:	496e      	ldr	r1, [pc, #440]	@ (8002910 <StartDisplayTask+0x34c>)
 8002758:	4618      	mov	r0, r3
 800275a:	f00c f933 	bl	800e9c4 <siprintf>
            ILI9488_WriteString(10, 90, buffer, Font_7x10, ILI9488_RED, ILI9488_BLACK);
 800275e:	4b64      	ldr	r3, [pc, #400]	@ (80028f0 <StartDisplayTask+0x32c>)
 8002760:	f107 0118 	add.w	r1, r7, #24
 8002764:	2200      	movs	r2, #0
 8002766:	9202      	str	r2, [sp, #8]
 8002768:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	9200      	str	r2, [sp, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	460a      	mov	r2, r1
 8002776:	215a      	movs	r1, #90	@ 0x5a
 8002778:	200a      	movs	r0, #10
 800277a:	f7fe fd3f 	bl	80011fc <ILI9488_WriteString>
            ILI9488_WriteString(10, 130, "Seus Ataques:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 800277e:	4b5c      	ldr	r3, [pc, #368]	@ (80028f0 <StartDisplayTask+0x32c>)
 8002780:	2200      	movs	r2, #0
 8002782:	9202      	str	r2, [sp, #8]
 8002784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002788:	9201      	str	r2, [sp, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	9200      	str	r2, [sp, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a60      	ldr	r2, [pc, #384]	@ (8002914 <StartDisplayTask+0x350>)
 8002792:	2182      	movs	r1, #130	@ 0x82
 8002794:	200a      	movs	r0, #10
 8002796:	f7fe fd31 	bl	80011fc <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 800279a:	2300      	movs	r3, #0
 800279c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80027a0:	e04e      	b.n	8002840 <StartDisplayTask+0x27c>
                uint16_t attackColor = ILI9488_WHITE;
 80027a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027a6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
                switch(eUserPlayer.eAttackSequential[i]) {
 80027aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80027ae:	4a55      	ldr	r2, [pc, #340]	@ (8002904 <StartDisplayTask+0x340>)
 80027b0:	4413      	add	r3, r2
 80027b2:	789b      	ldrb	r3, [r3, #2]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d82b      	bhi.n	8002812 <StartDisplayTask+0x24e>
 80027ba:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <StartDisplayTask+0x1fc>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027d9 	.word	0x080027d9
 80027c4:	080027e3 	.word	0x080027e3
 80027c8:	080027eb 	.word	0x080027eb
 80027cc:	080027f5 	.word	0x080027f5
 80027d0:	080027ff 	.word	0x080027ff
 80027d4:	08002809 	.word	0x08002809
                    case eRed:    attackColor = ILI9488_RED;   break;
 80027d8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80027dc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80027e0:	e017      	b.n	8002812 <StartDisplayTask+0x24e>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 80027e2:	231f      	movs	r3, #31
 80027e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80027e8:	e013      	b.n	8002812 <StartDisplayTask+0x24e>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 80027ea:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80027ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80027f2:	e00e      	b.n	8002812 <StartDisplayTask+0x24e>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 80027f4:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 80027f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80027fc:	e009      	b.n	8002812 <StartDisplayTask+0x24e>
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 80027fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002802:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8002806:	e004      	b.n	8002812 <StartDisplayTask+0x24e>
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 8002808:	f246 330c 	movw	r3, #25356	@ 0x630c
 800280c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8002810:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 150, 20, 20, attackColor);
 8002812:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	b29b      	uxth	r3, r3
 8002822:	330a      	adds	r3, #10
 8002824:	b298      	uxth	r0, r3
 8002826:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2314      	movs	r3, #20
 800282e:	2214      	movs	r2, #20
 8002830:	2196      	movs	r1, #150	@ 0x96
 8002832:	f7fe fc43 	bl	80010bc <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002836:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800283a:	3301      	adds	r3, #1
 800283c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002840:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002844:	2b03      	cmp	r3, #3
 8002846:	d9ac      	bls.n	80027a2 <StartDisplayTask+0x1de>
            }
            ILI9488_WriteString(10, 190, "Ataques CPU:", Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002848:	4b29      	ldr	r3, [pc, #164]	@ (80028f0 <StartDisplayTask+0x32c>)
 800284a:	2200      	movs	r2, #0
 800284c:	9202      	str	r2, [sp, #8]
 800284e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002852:	9201      	str	r2, [sp, #4]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	9200      	str	r2, [sp, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2f      	ldr	r2, [pc, #188]	@ (8002918 <StartDisplayTask+0x354>)
 800285c:	21be      	movs	r1, #190	@ 0xbe
 800285e:	200a      	movs	r0, #10
 8002860:	f7fe fccc 	bl	80011fc <ILI9488_WriteString>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002864:	2300      	movs	r3, #0
 8002866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800286a:	e078      	b.n	800295e <StartDisplayTask+0x39a>
                uint16_t attackColor = ILI9488_WHITE;
 800286c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002870:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                switch(eCpuPlayer.eAttackSequential[i]) {
 8002874:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002878:	4a24      	ldr	r2, [pc, #144]	@ (800290c <StartDisplayTask+0x348>)
 800287a:	4413      	add	r3, r2
 800287c:	789b      	ldrb	r3, [r3, #2]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b05      	cmp	r3, #5
 8002882:	d855      	bhi.n	8002930 <StartDisplayTask+0x36c>
 8002884:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <StartDisplayTask+0x2c8>)
 8002886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	080028a5 	.word	0x080028a5
 8002890:	080028af 	.word	0x080028af
 8002894:	080028b7 	.word	0x080028b7
 8002898:	080028c1 	.word	0x080028c1
 800289c:	0800291d 	.word	0x0800291d
 80028a0:	08002927 	.word	0x08002927
                    case eRed:    attackColor = ILI9488_RED;   break;
 80028a4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80028a8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80028ac:	e040      	b.n	8002930 <StartDisplayTask+0x36c>
                    case eBlue:   attackColor = ILI9488_BLUE;  break;
 80028ae:	231f      	movs	r3, #31
 80028b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80028b4:	e03c      	b.n	8002930 <StartDisplayTask+0x36c>
                    case eGreen:  attackColor = ILI9488_CYAN;  break;
 80028b6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80028ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80028be:	e037      	b.n	8002930 <StartDisplayTask+0x36c>
                    case eYellow: attackColor = ILI9488_BROWN; break;
 80028c0:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 80028c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80028c8:	e032      	b.n	8002930 <StartDisplayTask+0x36c>
 80028ca:	bf00      	nop
 80028cc:	200004f0 	.word	0x200004f0
 80028d0:	200004f5 	.word	0x200004f5
 80028d4:	0800fec0 	.word	0x0800fec0
 80028d8:	0800fed0 	.word	0x0800fed0
 80028dc:	200004f8 	.word	0x200004f8
 80028e0:	2000004c 	.word	0x2000004c
 80028e4:	0800fd20 	.word	0x0800fd20
 80028e8:	20000058 	.word	0x20000058
 80028ec:	0800fd38 	.word	0x0800fd38
 80028f0:	20000000 	.word	0x20000000
 80028f4:	0800fd50 	.word	0x0800fd50
 80028f8:	0800fd68 	.word	0x0800fd68
 80028fc:	0800fd8c 	.word	0x0800fd8c
 8002900:	0800fd98 	.word	0x0800fd98
 8002904:	20000500 	.word	0x20000500
 8002908:	0800fdac 	.word	0x0800fdac
 800290c:	20000508 	.word	0x20000508
 8002910:	0800fdbc 	.word	0x0800fdbc
 8002914:	0800fdcc 	.word	0x0800fdcc
 8002918:	0800fddc 	.word	0x0800fddc
                    case eWhite:  attackColor = ILI9488_WHITE; break;
 800291c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002920:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8002924:	e004      	b.n	8002930 <StartDisplayTask+0x36c>
                    case eBlack:  attackColor = ILI9488_GRAY;  break;
 8002926:	f246 330c 	movw	r3, #25356	@ 0x630c
 800292a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800292e:	bf00      	nop
                }
                ILI9488_FillRectangle(10 + (i * 30), 210, 20, 20, attackColor);
 8002930:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002934:	b29b      	uxth	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	b29b      	uxth	r3, r3
 8002940:	330a      	adds	r3, #10
 8002942:	b298      	uxth	r0, r3
 8002944:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2314      	movs	r3, #20
 800294c:	2214      	movs	r2, #20
 800294e:	21d2      	movs	r1, #210	@ 0xd2
 8002950:	f7fe fbb4 	bl	80010bc <ILI9488_FillRectangle>
            for(uint8_t i = 0; i < ATTACKS_NUMBERS; i++) {
 8002954:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002958:	3301      	adds	r3, #1
 800295a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800295e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002962:	2b03      	cmp	r3, #3
 8002964:	d982      	bls.n	800286c <StartDisplayTask+0x2a8>
            }
            ILI9488_WriteString(10, 280, "Pressione * para continuar...", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 8002966:	4b9d      	ldr	r3, [pc, #628]	@ (8002bdc <StartDisplayTask+0x618>)
 8002968:	2200      	movs	r2, #0
 800296a:	9202      	str	r2, [sp, #8]
 800296c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002970:	9201      	str	r2, [sp, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	9200      	str	r2, [sp, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a99      	ldr	r2, [pc, #612]	@ (8002be0 <StartDisplayTask+0x61c>)
 800297a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800297e:	200a      	movs	r0, #10
 8002980:	f7fe fc3c 	bl	80011fc <ILI9488_WriteString>
            break;
 8002984:	e073      	b.n	8002a6e <StartDisplayTask+0x4aa>
          }
          case eEndGame:
          {
            if (eUserPlayer.u8HeartPoints > 0) {
 8002986:	4b97      	ldr	r3, [pc, #604]	@ (8002be4 <StartDisplayTask+0x620>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00e      	beq.n	80029ae <StartDisplayTask+0x3ea>
                ILI9488_WriteString(70, 80, "VITORIA!", Font_7x10, ILI9488_GREEN, ILI9488_BLACK);
 8002990:	4b92      	ldr	r3, [pc, #584]	@ (8002bdc <StartDisplayTask+0x618>)
 8002992:	2200      	movs	r2, #0
 8002994:	9202      	str	r2, [sp, #8]
 8002996:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800299a:	9201      	str	r2, [sp, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	9200      	str	r2, [sp, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a91      	ldr	r2, [pc, #580]	@ (8002be8 <StartDisplayTask+0x624>)
 80029a4:	2150      	movs	r1, #80	@ 0x50
 80029a6:	2046      	movs	r0, #70	@ 0x46
 80029a8:	f7fe fc28 	bl	80011fc <ILI9488_WriteString>
 80029ac:	e00d      	b.n	80029ca <StartDisplayTask+0x406>
            } else {
                ILI9488_WriteString(70, 80, "DERROTA!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 80029ae:	4b8b      	ldr	r3, [pc, #556]	@ (8002bdc <StartDisplayTask+0x618>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	9202      	str	r2, [sp, #8]
 80029b4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a8a      	ldr	r2, [pc, #552]	@ (8002bec <StartDisplayTask+0x628>)
 80029c2:	2150      	movs	r1, #80	@ 0x50
 80029c4:	2046      	movs	r0, #70	@ 0x46
 80029c6:	f7fe fc19 	bl	80011fc <ILI9488_WriteString>
            }
            sprintf(buffer, "Sua Vida Final: %d", eUserPlayer.u8HeartPoints);
 80029ca:	4b86      	ldr	r3, [pc, #536]	@ (8002be4 <StartDisplayTask+0x620>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	f107 0318 	add.w	r3, r7, #24
 80029d6:	4986      	ldr	r1, [pc, #536]	@ (8002bf0 <StartDisplayTask+0x62c>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f00b fff3 	bl	800e9c4 <siprintf>
            ILI9488_WriteString(10, 140, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 80029de:	4b7f      	ldr	r3, [pc, #508]	@ (8002bdc <StartDisplayTask+0x618>)
 80029e0:	f107 0118 	add.w	r1, r7, #24
 80029e4:	2200      	movs	r2, #0
 80029e6:	9202      	str	r2, [sp, #8]
 80029e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	9200      	str	r2, [sp, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	460a      	mov	r2, r1
 80029f6:	218c      	movs	r1, #140	@ 0x8c
 80029f8:	200a      	movs	r0, #10
 80029fa:	f7fe fbff 	bl	80011fc <ILI9488_WriteString>
            sprintf(buffer, "Vida Final CPU: %d", eCpuPlayer.u8HeartPoints);
 80029fe:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf4 <StartDisplayTask+0x630>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	f107 0318 	add.w	r3, r7, #24
 8002a0a:	497b      	ldr	r1, [pc, #492]	@ (8002bf8 <StartDisplayTask+0x634>)
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f00b ffd9 	bl	800e9c4 <siprintf>
            ILI9488_WriteString(10, 160, buffer, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002a12:	4b72      	ldr	r3, [pc, #456]	@ (8002bdc <StartDisplayTask+0x618>)
 8002a14:	f107 0118 	add.w	r1, r7, #24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	9202      	str	r2, [sp, #8]
 8002a1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a20:	9201      	str	r2, [sp, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	9200      	str	r2, [sp, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	460a      	mov	r2, r1
 8002a2a:	21a0      	movs	r1, #160	@ 0xa0
 8002a2c:	200a      	movs	r0, #10
 8002a2e:	f7fe fbe5 	bl	80011fc <ILI9488_WriteString>
            ILI9488_WriteString(10, 250, "Pressione * para recomecar", Font_7x10, ILI9488_YELLOW, ILI9488_BLACK);
 8002a32:	4b6a      	ldr	r3, [pc, #424]	@ (8002bdc <StartDisplayTask+0x618>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	9202      	str	r2, [sp, #8]
 8002a38:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002a3c:	9201      	str	r2, [sp, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	9200      	str	r2, [sp, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a6d      	ldr	r2, [pc, #436]	@ (8002bfc <StartDisplayTask+0x638>)
 8002a46:	21fa      	movs	r1, #250	@ 0xfa
 8002a48:	200a      	movs	r0, #10
 8002a4a:	f7fe fbd7 	bl	80011fc <ILI9488_WriteString>
            break;
 8002a4e:	e00e      	b.n	8002a6e <StartDisplayTask+0x4aa>
          }
          default:
          {
            ILI9488_WriteString(10, 10, "Erro de Estado!", Font_7x10, ILI9488_RED, ILI9488_BLACK);
 8002a50:	4b62      	ldr	r3, [pc, #392]	@ (8002bdc <StartDisplayTask+0x618>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	9202      	str	r2, [sp, #8]
 8002a56:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002a5a:	9201      	str	r2, [sp, #4]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	9200      	str	r2, [sp, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a67      	ldr	r2, [pc, #412]	@ (8002c00 <StartDisplayTask+0x63c>)
 8002a64:	210a      	movs	r1, #10
 8002a66:	200a      	movs	r0, #10
 8002a68:	f7fe fbc8 	bl	80011fc <ILI9488_WriteString>
            break;
 8002a6c:	bf00      	nop
          }
      }
      ePreviousState = eLocalCurrentState;    
 8002a6e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002a72:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    if (eLocalCurrentState == eBattleInit)
 8002a76:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	f040 80aa 	bne.w	8002bd4 <StartDisplayTask+0x610>
  {
        for (int i = 0; i < 4; i++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a84:	e0a2      	b.n	8002bcc <StartDisplayTask+0x608>
            EColor detectedColor = TCS3472_DetectColor(colorData[i]);
 8002a86:	4a5f      	ldr	r2, [pc, #380]	@ (8002c04 <StartDisplayTask+0x640>)
 8002a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a92:	f7fe fd7b 	bl	800158c <TCS3472_DetectColor>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            uint16_t colorBox = ILI9488_BLACK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	877b      	strh	r3, [r7, #58]	@ 0x3a
            char colorName[10] = "Vazio";
 8002aa0:	4a59      	ldr	r2, [pc, #356]	@ (8002c08 <StartDisplayTask+0x644>)
 8002aa2:	f107 030c 	add.w	r3, r7, #12
 8002aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aaa:	6018      	str	r0, [r3, #0]
 8002aac:	3304      	adds	r3, #4
 8002aae:	8019      	strh	r1, [r3, #0]
 8002ab0:	f107 0312 	add.w	r3, r7, #18
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

            switch(detectedColor) {
 8002ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d849      	bhi.n	8002b54 <StartDisplayTask+0x590>
 8002ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac8 <StartDisplayTask+0x504>)
 8002ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac6:	bf00      	nop
 8002ac8:	08002add 	.word	0x08002add
 8002acc:	08002af5 	.word	0x08002af5
 8002ad0:	08002b0b 	.word	0x08002b0b
 8002ad4:	08002b25 	.word	0x08002b25
 8002ad8:	08002b3d 	.word	0x08002b3d
                case eRed:    colorBox = ILI9488_RED;   strcpy(colorName, "Fogo");   break;
 8002adc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ae0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	4a49      	ldr	r2, [pc, #292]	@ (8002c0c <StartDisplayTask+0x648>)
 8002ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aec:	6018      	str	r0, [r3, #0]
 8002aee:	3304      	adds	r3, #4
 8002af0:	7019      	strb	r1, [r3, #0]
 8002af2:	e030      	b.n	8002b56 <StartDisplayTask+0x592>
                case eBlue:   colorBox = ILI9488_BLUE;  strcpy(colorName, "Agua");   break;
 8002af4:	231f      	movs	r3, #31
 8002af6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	4a44      	ldr	r2, [pc, #272]	@ (8002c10 <StartDisplayTask+0x64c>)
 8002afe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b02:	6018      	str	r0, [r3, #0]
 8002b04:	3304      	adds	r3, #4
 8002b06:	7019      	strb	r1, [r3, #0]
 8002b08:	e025      	b.n	8002b56 <StartDisplayTask+0x592>
                case eGreen:  colorBox = ILI9488_CYAN;  strcpy(colorName, "Ar");     break;
 8002b0a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002b0e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	4a3f      	ldr	r2, [pc, #252]	@ (8002c14 <StartDisplayTask+0x650>)
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	8019      	strh	r1, [r3, #0]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	0c12      	lsrs	r2, r2, #16
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e018      	b.n	8002b56 <StartDisplayTask+0x592>
                case eYellow: colorBox = ILI9488_BROWN; strcpy(colorName, "Terra");  break;
 8002b24:	f245 13e0 	movw	r3, #20960	@ 0x51e0
 8002b28:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c18 <StartDisplayTask+0x654>)
 8002b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b34:	6018      	str	r0, [r3, #0]
 8002b36:	3304      	adds	r3, #4
 8002b38:	8019      	strh	r1, [r3, #0]
 8002b3a:	e00c      	b.n	8002b56 <StartDisplayTask+0x592>
                case eWhite:  colorBox = ILI9488_WHITE; strcpy(colorName, "Luz?");   break;
 8002b3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b40:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	4a35      	ldr	r2, [pc, #212]	@ (8002c1c <StartDisplayTask+0x658>)
 8002b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b4c:	6018      	str	r0, [r3, #0]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	7019      	strb	r1, [r3, #0]
 8002b52:	e000      	b.n	8002b56 <StartDisplayTask+0x592>
                default: break;
 8002b54:	bf00      	nop
            }

            // APAGA a área do nome da cor antiga desenhando um retângulo preto por cima
            ILI9488_FillRectangle(100, 80 + (i * 30), 45, 10, ILI9488_BLACK);
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3350      	adds	r3, #80	@ 0x50
 8002b66:	b299      	uxth	r1, r3
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	230a      	movs	r3, #10
 8002b6e:	222d      	movs	r2, #45	@ 0x2d
 8002b70:	2064      	movs	r0, #100	@ 0x64
 8002b72:	f7fe faa3 	bl	80010bc <ILI9488_FillRectangle>
            // Escreve o novo nome da cor
            ILI9488_WriteString(100, 80 + (i * 30), colorName, Font_7x10, ILI9488_WHITE, ILI9488_BLACK);
 8002b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3350      	adds	r3, #80	@ 0x50
 8002b86:	b299      	uxth	r1, r3
 8002b88:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <StartDisplayTask+0x618>)
 8002b8a:	f107 000c 	add.w	r0, r7, #12
 8002b8e:	2200      	movs	r2, #0
 8002b90:	9202      	str	r2, [sp, #8]
 8002b92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b96:	9201      	str	r2, [sp, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	9200      	str	r2, [sp, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	2064      	movs	r0, #100	@ 0x64
 8002ba2:	f7fe fb2b 	bl	80011fc <ILI9488_WriteString>
            // Redesenha o quadrado colorido
            ILI9488_FillRectangle(150, 75 + (i * 30), 20, 20, colorBox);
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	334b      	adds	r3, #75	@ 0x4b
 8002bb6:	b299      	uxth	r1, r3
 8002bb8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2314      	movs	r3, #20
 8002bbe:	2214      	movs	r2, #20
 8002bc0:	2096      	movs	r0, #150	@ 0x96
 8002bc2:	f7fe fa7b 	bl	80010bc <ILI9488_FillRectangle>
        for (int i = 0; i < 4; i++) {
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc8:	3301      	adds	r3, #1
 8002bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	f77f af59 	ble.w	8002a86 <StartDisplayTask+0x4c2>
        }
    }

    HAL_Delay(10);
 8002bd4:	200a      	movs	r0, #10
 8002bd6:	f000 fc21 	bl	800341c <HAL_Delay>
  {
 8002bda:	e4fd      	b.n	80025d8 <StartDisplayTask+0x14>
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	0800fdec 	.word	0x0800fdec
 8002be4:	20000500 	.word	0x20000500
 8002be8:	0800fe0c 	.word	0x0800fe0c
 8002bec:	0800fe18 	.word	0x0800fe18
 8002bf0:	0800fe24 	.word	0x0800fe24
 8002bf4:	20000508 	.word	0x20000508
 8002bf8:	0800fe38 	.word	0x0800fe38
 8002bfc:	0800fe4c 	.word	0x0800fe4c
 8002c00:	0800fe68 	.word	0x0800fe68
 8002c04:	20000510 	.word	0x20000510
 8002c08:	0800fe9c 	.word	0x0800fe9c
 8002c0c:	0800fe78 	.word	0x0800fe78
 8002c10:	0800fe80 	.word	0x0800fe80
 8002c14:	0800fe88 	.word	0x0800fe88
 8002c18:	0800fe8c 	.word	0x0800fe8c
 8002c1c:	0800fe94 	.word	0x0800fe94

08002c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002c32:	f000 fbd3 	bl	80033dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40001000 	.word	0x40001000

08002c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c48:	b672      	cpsid	i
}
 8002c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c4c:	bf00      	nop
 8002c4e:	e7fd      	b.n	8002c4c <Error_Handler+0x8>

08002c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ce4 <HAL_MspInit+0x94>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5e:	4a21      	ldr	r2, [pc, #132]	@ (8002ce4 <HAL_MspInit+0x94>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c66:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce4 <HAL_MspInit+0x94>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <HAL_MspInit+0x94>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce4 <HAL_MspInit+0x94>)
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c82:	4b18      	ldr	r3, [pc, #96]	@ (8002ce4 <HAL_MspInit+0x94>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	210f      	movs	r1, #15
 8002c92:	f06f 0001 	mvn.w	r0, #1
 8002c96:	f000 fc9d 	bl	80035d4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2105      	movs	r1, #5
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f000 fc98 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f000 fcb1 	bl	800360c <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2105      	movs	r1, #5
 8002cae:	2004      	movs	r0, #4
 8002cb0:	f000 fc90 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002cb4:	2004      	movs	r0, #4
 8002cb6:	f000 fca9 	bl	800360c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	2005      	movs	r0, #5
 8002cc0:	f000 fc88 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002cc4:	2005      	movs	r0, #5
 8002cc6:	f000 fca1 	bl	800360c <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2105      	movs	r1, #5
 8002cce:	2051      	movs	r0, #81	@ 0x51
 8002cd0:	f000 fc80 	bl	80035d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002cd4:	2051      	movs	r0, #81	@ 0x51
 8002cd6:	f000 fc99 	bl	800360c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	@ 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a21      	ldr	r2, [pc, #132]	@ (8002d8c <HAL_I2C_MspInit+0xa4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d13c      	bne.n	8002d84 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <HAL_I2C_MspInit+0xa8>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4a1f      	ldr	r2, [pc, #124]	@ (8002d90 <HAL_I2C_MspInit+0xa8>)
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <HAL_I2C_MspInit+0xa8>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d2c:	2312      	movs	r3, #18
 8002d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	4619      	mov	r1, r3
 8002d42:	4814      	ldr	r0, [pc, #80]	@ (8002d94 <HAL_I2C_MspInit+0xac>)
 8002d44:	f000 ff36 	bl	8003bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <HAL_I2C_MspInit+0xa8>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	4a0f      	ldr	r2, [pc, #60]	@ (8002d90 <HAL_I2C_MspInit+0xa8>)
 8002d52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d58:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <HAL_I2C_MspInit+0xa8>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2105      	movs	r1, #5
 8002d68:	2021      	movs	r0, #33	@ 0x21
 8002d6a:	f000 fc33 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002d6e:	2021      	movs	r0, #33	@ 0x21
 8002d70:	f000 fc4c 	bl	800360c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8002d74:	2200      	movs	r2, #0
 8002d76:	2105      	movs	r1, #5
 8002d78:	2022      	movs	r0, #34	@ 0x22
 8002d7a:	f000 fc2b 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002d7e:	2022      	movs	r0, #34	@ 0x22
 8002d80:	f000 fc44 	bl	800360c <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002d84:	bf00      	nop
 8002d86:	3728      	adds	r7, #40	@ 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40005800 	.word	0x40005800
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020400 	.word	0x40020400

08002d98 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	@ 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2c      	ldr	r2, [pc, #176]	@ (8002e68 <HAL_SD_MspInit+0xd0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d152      	bne.n	8002e60 <HAL_SD_MspInit+0xc8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <HAL_SD_MspInit+0xd4>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e6c <HAL_SD_MspInit+0xd4>)
 8002dc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dca:	4b28      	ldr	r3, [pc, #160]	@ (8002e6c <HAL_SD_MspInit+0xd4>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b24      	ldr	r3, [pc, #144]	@ (8002e6c <HAL_SD_MspInit+0xd4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <HAL_SD_MspInit+0xd4>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de6:	4b21      	ldr	r3, [pc, #132]	@ (8002e6c <HAL_SD_MspInit+0xd4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <HAL_SD_MspInit+0xd4>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002e6c <HAL_SD_MspInit+0xd4>)
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e02:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <HAL_SD_MspInit+0xd4>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e0e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002e12:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002e20:	230c      	movs	r3, #12
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4811      	ldr	r0, [pc, #68]	@ (8002e70 <HAL_SD_MspInit+0xd8>)
 8002e2c:	f000 fec2 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e30:	2304      	movs	r3, #4
 8002e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002e40:	230c      	movs	r3, #12
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	480a      	ldr	r0, [pc, #40]	@ (8002e74 <HAL_SD_MspInit+0xdc>)
 8002e4c:	f000 feb2 	bl	8003bb4 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	2105      	movs	r1, #5
 8002e54:	2031      	movs	r0, #49	@ 0x31
 8002e56:	f000 fbbd 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002e5a:	2031      	movs	r0, #49	@ 0x31
 8002e5c:	f000 fbd6 	bl	800360c <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	@ 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020800 	.word	0x40020800
 8002e74:	40020c00 	.word	0x40020c00

08002e78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	@ 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <HAL_SPI_MspInit+0x94>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d133      	bne.n	8002f02 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f10 <HAL_SPI_MspInit+0x98>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f10 <HAL_SPI_MspInit+0x98>)
 8002ea4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eaa:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_SPI_MspInit+0x98>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <HAL_SPI_MspInit+0x98>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	4a14      	ldr	r2, [pc, #80]	@ (8002f10 <HAL_SPI_MspInit+0x98>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec6:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <HAL_SPI_MspInit+0x98>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8002ed2:	23e0      	movs	r3, #224	@ 0xe0
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ee2:	2305      	movs	r3, #5
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	4809      	ldr	r0, [pc, #36]	@ (8002f14 <HAL_SPI_MspInit+0x9c>)
 8002eee:	f000 fe61 	bl	8003bb4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2105      	movs	r1, #5
 8002ef6:	2023      	movs	r0, #35	@ 0x23
 8002ef8:	f000 fb6c 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002efc:	2023      	movs	r0, #35	@ 0x23
 8002efe:	f000 fb85 	bl	800360c <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002f02:	bf00      	nop
 8002f04:	3728      	adds	r7, #40	@ 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40013000 	.word	0x40013000
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020000 	.word	0x40020000

08002f18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	@ 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <HAL_UART_MspInit+0x94>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d133      	bne.n	8002fa2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb0 <HAL_UART_MspInit+0x98>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb0 <HAL_UART_MspInit+0x98>)
 8002f44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4a:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <HAL_UART_MspInit+0x98>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <HAL_UART_MspInit+0x98>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	4a14      	ldr	r2, [pc, #80]	@ (8002fb0 <HAL_UART_MspInit+0x98>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f66:	4b12      	ldr	r3, [pc, #72]	@ (8002fb0 <HAL_UART_MspInit+0x98>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f72:	2303      	movs	r3, #3
 8002f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f82:	2308      	movs	r3, #8
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4809      	ldr	r0, [pc, #36]	@ (8002fb4 <HAL_UART_MspInit+0x9c>)
 8002f8e:	f000 fe11 	bl	8003bb4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2105      	movs	r1, #5
 8002f96:	2034      	movs	r0, #52	@ 0x34
 8002f98:	f000 fb1c 	bl	80035d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002f9c:	2034      	movs	r0, #52	@ 0x34
 8002f9e:	f000 fb35 	bl	800360c <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8002fa2:	bf00      	nop
 8002fa4:	3728      	adds	r7, #40	@ 0x28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40004c00 	.word	0x40004c00
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40020000 	.word	0x40020000

08002fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08e      	sub	sp, #56	@ 0x38
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	4b33      	ldr	r3, [pc, #204]	@ (800309c <HAL_InitTick+0xe4>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	4a32      	ldr	r2, [pc, #200]	@ (800309c <HAL_InitTick+0xe4>)
 8002fd2:	f043 0310 	orr.w	r3, r3, #16
 8002fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd8:	4b30      	ldr	r3, [pc, #192]	@ (800309c <HAL_InitTick+0xe4>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fe4:	f107 0210 	add.w	r2, r7, #16
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 fc00 	bl	80077f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ffe:	f004 fbd1 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 8003002:	6378      	str	r0, [r7, #52]	@ 0x34
 8003004:	e004      	b.n	8003010 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003006:	f004 fbcd 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 800300a:	4603      	mov	r3, r0
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003012:	4a23      	ldr	r2, [pc, #140]	@ (80030a0 <HAL_InitTick+0xe8>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	0c9b      	lsrs	r3, r3, #18
 800301a:	3b01      	subs	r3, #1
 800301c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800301e:	4b21      	ldr	r3, [pc, #132]	@ (80030a4 <HAL_InitTick+0xec>)
 8003020:	4a21      	ldr	r2, [pc, #132]	@ (80030a8 <HAL_InitTick+0xf0>)
 8003022:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003024:	4b1f      	ldr	r3, [pc, #124]	@ (80030a4 <HAL_InitTick+0xec>)
 8003026:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800302a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800302c:	4a1d      	ldr	r2, [pc, #116]	@ (80030a4 <HAL_InitTick+0xec>)
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003032:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <HAL_InitTick+0xec>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003038:	4b1a      	ldr	r3, [pc, #104]	@ (80030a4 <HAL_InitTick+0xec>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800303e:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <HAL_InitTick+0xec>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003044:	4817      	ldr	r0, [pc, #92]	@ (80030a4 <HAL_InitTick+0xec>)
 8003046:	f006 fb01 	bl	800964c <HAL_TIM_Base_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003050:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11b      	bne.n	8003090 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003058:	4812      	ldr	r0, [pc, #72]	@ (80030a4 <HAL_InitTick+0xec>)
 800305a:	f006 fb51 	bl	8009700 <HAL_TIM_Base_Start_IT>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003064:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800306c:	2036      	movs	r0, #54	@ 0x36
 800306e:	f000 facd 	bl	800360c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d808      	bhi.n	800308a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003078:	2200      	movs	r2, #0
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	2036      	movs	r0, #54	@ 0x36
 800307e:	f000 faa9 	bl	80035d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003082:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <HAL_InitTick+0xf4>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	e002      	b.n	8003090 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003090:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003094:	4618      	mov	r0, r3
 8003096:	3738      	adds	r7, #56	@ 0x38
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	431bde83 	.word	0x431bde83
 80030a4:	20000534 	.word	0x20000534
 80030a8:	40001000 	.word	0x40001000
 80030ac:	20000070 	.word	0x20000070

080030b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <NMI_Handler+0x4>

080030b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030bc:	bf00      	nop
 80030be:	e7fd      	b.n	80030bc <HardFault_Handler+0x4>

080030c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <MemManage_Handler+0x4>

080030c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <BusFault_Handler+0x4>

080030d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <UsageFault_Handler+0x4>

080030d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80030ea:	f003 ff11 	bl	8006f10 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80030f6:	f000 fbc9 	bl	800388c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}

080030fe <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003110:	4802      	ldr	r0, [pc, #8]	@ (800311c <I2C2_EV_IRQHandler+0x10>)
 8003112:	f001 fdcf 	bl	8004cb4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000036c 	.word	0x2000036c

08003120 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003124:	4802      	ldr	r0, [pc, #8]	@ (8003130 <I2C2_ER_IRQHandler+0x10>)
 8003126:	f001 ff36 	bl	8004f96 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	2000036c 	.word	0x2000036c

08003134 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003138:	4802      	ldr	r0, [pc, #8]	@ (8003144 <SPI1_IRQHandler+0x10>)
 800313a:	f006 f88d 	bl	8009258 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000444 	.word	0x20000444

08003148 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800314c:	4802      	ldr	r0, [pc, #8]	@ (8003158 <SDIO_IRQHandler+0x10>)
 800314e:	f004 fdf3 	bl	8007d38 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200003c0 	.word	0x200003c0

0800315c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003160:	4802      	ldr	r0, [pc, #8]	@ (800316c <UART4_IRQHandler+0x10>)
 8003162:	f006 fd5f 	bl	8009c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	2000049c 	.word	0x2000049c

08003170 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003174:	4802      	ldr	r0, [pc, #8]	@ (8003180 <TIM6_DAC_IRQHandler+0x10>)
 8003176:	f006 fb33 	bl	80097e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000534 	.word	0x20000534

08003184 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  return 1;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <_kill>:

int _kill(int pid, int sig)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ac:	f00b fcbe 	bl	800eb2c <__errno>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2216      	movs	r2, #22
 80031b4:	601a      	str	r2, [r3, #0]
  return -1;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_exit>:

void _exit (int status)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031ca:	f04f 31ff 	mov.w	r1, #4294967295
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ffe7 	bl	80031a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <_exit+0x12>

080031d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e00a      	b.n	8003200 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031ea:	f3af 8000 	nop.w
 80031ee:	4601      	mov	r1, r0
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	60ba      	str	r2, [r7, #8]
 80031f6:	b2ca      	uxtb	r2, r1
 80031f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	3301      	adds	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	dbf0      	blt.n	80031ea <_read+0x12>
  }

  return len;
 8003208:	687b      	ldr	r3, [r7, #4]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e009      	b.n	8003238 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	60ba      	str	r2, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3301      	adds	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	dbf1      	blt.n	8003224 <_write+0x12>
  }
  return len;
 8003240:	687b      	ldr	r3, [r7, #4]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_close>:

int _close(int file)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003272:	605a      	str	r2, [r3, #4]
  return 0;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_isatty>:

int _isatty(int file)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032bc:	4a14      	ldr	r2, [pc, #80]	@ (8003310 <_sbrk+0x5c>)
 80032be:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <_sbrk+0x60>)
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c8:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <_sbrk+0x64>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d0:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <_sbrk+0x64>)
 80032d2:	4a12      	ldr	r2, [pc, #72]	@ (800331c <_sbrk+0x68>)
 80032d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032d6:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <_sbrk+0x64>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d207      	bcs.n	80032f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032e4:	f00b fc22 	bl	800eb2c <__errno>
 80032e8:	4603      	mov	r3, r0
 80032ea:	220c      	movs	r2, #12
 80032ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	e009      	b.n	8003308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032f4:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <_sbrk+0x64>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032fa:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <_sbrk+0x64>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	4a05      	ldr	r2, [pc, #20]	@ (8003318 <_sbrk+0x64>)
 8003304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20020000 	.word	0x20020000
 8003314:	00000400 	.word	0x00000400
 8003318:	2000057c 	.word	0x2000057c
 800331c:	20004440 	.word	0x20004440

08003320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003324:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <SystemInit+0x20>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	4a05      	ldr	r2, [pc, #20]	@ (8003340 <SystemInit+0x20>)
 800332c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800337c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003348:	f7ff ffea 	bl	8003320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800334c:	480c      	ldr	r0, [pc, #48]	@ (8003380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800334e:	490d      	ldr	r1, [pc, #52]	@ (8003384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003350:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003354:	e002      	b.n	800335c <LoopCopyDataInit>

08003356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800335a:	3304      	adds	r3, #4

0800335c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800335c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800335e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003360:	d3f9      	bcc.n	8003356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003362:	4a0a      	ldr	r2, [pc, #40]	@ (800338c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003364:	4c0a      	ldr	r4, [pc, #40]	@ (8003390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003368:	e001      	b.n	800336e <LoopFillZerobss>

0800336a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800336a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800336c:	3204      	adds	r2, #4

0800336e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800336e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003370:	d3fb      	bcc.n	800336a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003372:	f00b fbe1 	bl	800eb38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003376:	f7fe fbb9 	bl	8001aec <main>
  bx  lr    
 800337a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800337c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003384:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8003388:	08052618 	.word	0x08052618
  ldr r2, =_sbss
 800338c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8003390:	2000443c 	.word	0x2000443c

08003394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003394:	e7fe      	b.n	8003394 <ADC_IRQHandler>
	...

08003398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800339c:	4b0e      	ldr	r3, [pc, #56]	@ (80033d8 <HAL_Init+0x40>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0d      	ldr	r2, [pc, #52]	@ (80033d8 <HAL_Init+0x40>)
 80033a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <HAL_Init+0x40>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0a      	ldr	r2, [pc, #40]	@ (80033d8 <HAL_Init+0x40>)
 80033ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033b4:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <HAL_Init+0x40>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a07      	ldr	r2, [pc, #28]	@ (80033d8 <HAL_Init+0x40>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c0:	2003      	movs	r0, #3
 80033c2:	f000 f8fc 	bl	80035be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033c6:	200f      	movs	r0, #15
 80033c8:	f7ff fdf6 	bl	8002fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033cc:	f7ff fc40 	bl	8002c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023c00 	.word	0x40023c00

080033dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <HAL_IncTick+0x20>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_IncTick+0x24>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4413      	add	r3, r2
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <HAL_IncTick+0x24>)
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000074 	.word	0x20000074
 8003400:	20000580 	.word	0x20000580

08003404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return uwTick;
 8003408:	4b03      	ldr	r3, [pc, #12]	@ (8003418 <HAL_GetTick+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000580 	.word	0x20000580

0800341c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003424:	f7ff ffee 	bl	8003404 <HAL_GetTick>
 8003428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d005      	beq.n	8003442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003436:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <HAL_Delay+0x44>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003442:	bf00      	nop
 8003444:	f7ff ffde 	bl	8003404 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	429a      	cmp	r2, r3
 8003452:	d8f7      	bhi.n	8003444 <HAL_Delay+0x28>
  {
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000074 	.word	0x20000074

08003464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003474:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003480:	4013      	ands	r3, r2
 8003482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800348c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003496:	4a04      	ldr	r2, [pc, #16]	@ (80034a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	60d3      	str	r3, [r2, #12]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b0:	4b04      	ldr	r3, [pc, #16]	@ (80034c4 <__NVIC_GetPriorityGrouping+0x18>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	f003 0307 	and.w	r3, r3, #7
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	db0b      	blt.n	80034f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	f003 021f 	and.w	r2, r3, #31
 80034e0:	4907      	ldr	r1, [pc, #28]	@ (8003500 <__NVIC_EnableIRQ+0x38>)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	2001      	movs	r0, #1
 80034ea:	fa00 f202 	lsl.w	r2, r0, r2
 80034ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e100 	.word	0xe000e100

08003504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	6039      	str	r1, [r7, #0]
 800350e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	2b00      	cmp	r3, #0
 8003516:	db0a      	blt.n	800352e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	b2da      	uxtb	r2, r3
 800351c:	490c      	ldr	r1, [pc, #48]	@ (8003550 <__NVIC_SetPriority+0x4c>)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	0112      	lsls	r2, r2, #4
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	440b      	add	r3, r1
 8003528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800352c:	e00a      	b.n	8003544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4908      	ldr	r1, [pc, #32]	@ (8003554 <__NVIC_SetPriority+0x50>)
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	3b04      	subs	r3, #4
 800353c:	0112      	lsls	r2, r2, #4
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	440b      	add	r3, r1
 8003542:	761a      	strb	r2, [r3, #24]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000e100 	.word	0xe000e100
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003558:	b480      	push	{r7}
 800355a:	b089      	sub	sp, #36	@ 0x24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f1c3 0307 	rsb	r3, r3, #7
 8003572:	2b04      	cmp	r3, #4
 8003574:	bf28      	it	cs
 8003576:	2304      	movcs	r3, #4
 8003578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3304      	adds	r3, #4
 800357e:	2b06      	cmp	r3, #6
 8003580:	d902      	bls.n	8003588 <NVIC_EncodePriority+0x30>
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3b03      	subs	r3, #3
 8003586:	e000      	b.n	800358a <NVIC_EncodePriority+0x32>
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	401a      	ands	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a0:	f04f 31ff 	mov.w	r1, #4294967295
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	43d9      	mvns	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	4313      	orrs	r3, r2
         );
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3724      	adds	r7, #36	@ 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff4c 	bl	8003464 <__NVIC_SetPriorityGrouping>
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e6:	f7ff ff61 	bl	80034ac <__NVIC_GetPriorityGrouping>
 80035ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	6978      	ldr	r0, [r7, #20]
 80035f2:	f7ff ffb1 	bl	8003558 <NVIC_EncodePriority>
 80035f6:	4602      	mov	r2, r0
 80035f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff80 	bl	8003504 <__NVIC_SetPriority>
}
 8003604:	bf00      	nop
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff54 	bl	80034c8 <__NVIC_EnableIRQ>
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_DMA_Start_IT+0x26>
 800364a:	2302      	movs	r3, #2
 800364c:	e040      	b.n	80036d0 <HAL_DMA_Start_IT+0xa8>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d12f      	bne.n	80036c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f8da 	bl	8003830 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	223f      	movs	r2, #63	@ 0x3f
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0216 	orr.w	r2, r2, #22
 8003696:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0208 	orr.w	r2, r2, #8
 80036ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e005      	b.n	80036ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036e6:	f7ff fe8d 	bl	8003404 <HAL_GetTick>
 80036ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d008      	beq.n	800370a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e052      	b.n	80037b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0216 	bic.w	r2, r2, #22
 8003718:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003728:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <HAL_DMA_Abort+0x62>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0208 	bic.w	r2, r2, #8
 8003748:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800375a:	e013      	b.n	8003784 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800375c:	f7ff fe52 	bl	8003404 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b05      	cmp	r3, #5
 8003768:	d90c      	bls.n	8003784 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2203      	movs	r2, #3
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e015      	b.n	80037b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e4      	bne.n	800375c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	223f      	movs	r2, #63	@ 0x3f
 8003798:	409a      	lsls	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d004      	beq.n	80037d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2280      	movs	r2, #128	@ 0x80
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e00c      	b.n	80037f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2205      	movs	r2, #5
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800380a:	b2db      	uxtb	r3, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800384c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b40      	cmp	r3, #64	@ 0x40
 800385c:	d108      	bne.n	8003870 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800386e:	e007      	b.n	8003880 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003896:	4b49      	ldr	r3, [pc, #292]	@ (80039bc <HAL_FLASH_IRQHandler+0x130>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d020      	beq.n	80038e4 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80038a2:	4b47      	ldr	r3, [pc, #284]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d107      	bne.n	80038bc <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 80038ac:	4b44      	ldr	r3, [pc, #272]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 80038b2:	4b43      	ldr	r3, [pc, #268]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 80038b4:	f04f 32ff 	mov.w	r2, #4294967295
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	e00b      	b.n	80038d4 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80038bc:	4b40      	ldr	r3, [pc, #256]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d103      	bne.n	80038ce <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80038c6:	4b3e      	ldr	r3, [pc, #248]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	e002      	b.n	80038d4 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 80038ce:	4b3c      	ldr	r3, [pc, #240]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 80038d4:	f000 f88a 	bl	80039ec <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f87d 	bl	80039d8 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80038de:	4b38      	ldr	r3, [pc, #224]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80038e4:	4b35      	ldr	r3, [pc, #212]	@ (80039bc <HAL_FLASH_IRQHandler+0x130>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d04a      	beq.n	8003986 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80038f0:	4b32      	ldr	r3, [pc, #200]	@ (80039bc <HAL_FLASH_IRQHandler+0x130>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80038f6:	4b32      	ldr	r3, [pc, #200]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d12d      	bne.n	800395c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8003900:	4b2f      	ldr	r3, [pc, #188]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	3b01      	subs	r3, #1
 8003906:	4a2e      	ldr	r2, [pc, #184]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003908:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 800390a:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d015      	beq.n	800393e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8003912:	4b2b      	ldr	r3, [pc, #172]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f853 	bl	80039c4 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 800391e:	4b28      	ldr	r3, [pc, #160]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	3301      	adds	r3, #1
 8003924:	4a26      	ldr	r2, [pc, #152]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003926:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8003928:	4b25      	ldr	r3, [pc, #148]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800392e:	4b24      	ldr	r3, [pc, #144]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003930:	7a1b      	ldrb	r3, [r3, #8]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8ae 	bl	8003a98 <FLASH_Erase_Sector>
 800393c:	e023      	b.n	8003986 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	4a1e      	ldr	r2, [pc, #120]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800394a:	4b1d      	ldr	r3, [pc, #116]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8003950:	f000 f8ea 	bl	8003b28 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f835 	bl	80039c4 <HAL_FLASH_EndOfOperationCallback>
 800395a:	e014      	b.n	8003986 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800395c:	4b18      	ldr	r3, [pc, #96]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d107      	bne.n	8003976 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8003966:	f000 f8df 	bl	8003b28 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f828 	bl	80039c4 <HAL_FLASH_EndOfOperationCallback>
 8003974:	e004      	b.n	8003980 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003976:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f822 	bl	80039c4 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003980:	4b0f      	ldr	r3, [pc, #60]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003986:	4b0e      	ldr	r3, [pc, #56]	@ (80039c0 <HAL_FLASH_IRQHandler+0x134>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d111      	bne.n	80039b4 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003990:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <HAL_FLASH_IRQHandler+0x130>)
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	4a09      	ldr	r2, [pc, #36]	@ (80039bc <HAL_FLASH_IRQHandler+0x130>)
 8003996:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800399a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800399c:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <HAL_FLASH_IRQHandler+0x130>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	4a06      	ldr	r2, [pc, #24]	@ (80039bc <HAL_FLASH_IRQHandler+0x130>)
 80039a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039a6:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <HAL_FLASH_IRQHandler+0x130>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	4a03      	ldr	r2, [pc, #12]	@ (80039bc <HAL_FLASH_IRQHandler+0x130>)
 80039ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	6113      	str	r3, [r2, #16]
  }
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023c00 	.word	0x40023c00
 80039c0:	20000078 	.word	0x20000078

080039c4 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80039f0:	4b27      	ldr	r3, [pc, #156]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80039fc:	4b25      	ldr	r3, [pc, #148]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f043 0310 	orr.w	r3, r3, #16
 8003a04:	4a23      	ldr	r2, [pc, #140]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 8003a06:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003a08:	4b21      	ldr	r3, [pc, #132]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 8003a0a:	2210      	movs	r2, #16
 8003a0c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f043 0308 	orr.w	r3, r3, #8
 8003a22:	4a1c      	ldr	r2, [pc, #112]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 8003a24:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003a26:	4b1a      	ldr	r3, [pc, #104]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 8003a28:	2220      	movs	r2, #32
 8003a2a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003a2c:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003a38:	4b16      	ldr	r3, [pc, #88]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	4a14      	ldr	r2, [pc, #80]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 8003a42:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003a44:	4b12      	ldr	r3, [pc, #72]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 8003a46:	2240      	movs	r2, #64	@ 0x40
 8003a48:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003a4a:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003a56:	4b0f      	ldr	r3, [pc, #60]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 8003a60:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003a62:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 8003a64:	2280      	movs	r2, #128	@ 0x80
 8003a66:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003a68:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003a74:	4b07      	ldr	r3, [pc, #28]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f043 0320 	orr.w	r3, r3, #32
 8003a7c:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <FLASH_SetErrorCode+0xa8>)
 8003a7e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <FLASH_SetErrorCode+0xa4>)
 8003a82:	2202      	movs	r2, #2
 8003a84:	60da      	str	r2, [r3, #12]
  }
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	20000078 	.word	0x20000078

08003a98 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e010      	b.n	8003ad6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d103      	bne.n	8003ac2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003aba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e009      	b.n	8003ad6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d103      	bne.n	8003ad0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003ac8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	e002      	b.n	8003ad6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003ad0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ad6:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	4a12      	ldr	r2, [pc, #72]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	490f      	ldr	r1, [pc, #60]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003aee:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003af4:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8003af8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4313      	orrs	r3, r2
 8003b04:	4a07      	ldr	r2, [pc, #28]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003b06:	f043 0302 	orr.w	r3, r3, #2
 8003b0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <FLASH_Erase_Sector+0x8c>)
 8003b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b16:	6113      	str	r3, [r2, #16]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40023c00 	.word	0x40023c00

08003b28 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003b2c:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d017      	beq.n	8003b68 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003b38:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b3e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b42:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003b44:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b4a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b17      	ldr	r3, [pc, #92]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b5a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b5c:	4b14      	ldr	r3, [pc, #80]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a13      	ldr	r2, [pc, #76]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b66:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003b68:	4b11      	ldr	r3, [pc, #68]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d017      	beq.n	8003ba4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003b74:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b7e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a07      	ldr	r2, [pc, #28]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b96:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a04      	ldr	r2, [pc, #16]	@ (8003bb0 <FLASH_FlushCaches+0x88>)
 8003b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ba2:	6013      	str	r3, [r2, #0]
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023c00 	.word	0x40023c00

08003bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	@ 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e16b      	b.n	8003ea8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	f040 815a 	bne.w	8003ea2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d005      	beq.n	8003c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d130      	bne.n	8003c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	2203      	movs	r2, #3
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 0201 	and.w	r2, r3, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d017      	beq.n	8003ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d123      	bne.n	8003cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	08da      	lsrs	r2, r3, #3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3208      	adds	r2, #8
 8003cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	220f      	movs	r2, #15
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	08da      	lsrs	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3208      	adds	r2, #8
 8003cf2:	69b9      	ldr	r1, [r7, #24]
 8003cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	2203      	movs	r2, #3
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0203 	and.w	r2, r3, #3
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80b4 	beq.w	8003ea2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b60      	ldr	r3, [pc, #384]	@ (8003ec0 <HAL_GPIO_Init+0x30c>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d42:	4a5f      	ldr	r2, [pc, #380]	@ (8003ec0 <HAL_GPIO_Init+0x30c>)
 8003d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ec0 <HAL_GPIO_Init+0x30c>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d56:	4a5b      	ldr	r2, [pc, #364]	@ (8003ec4 <HAL_GPIO_Init+0x310>)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	089b      	lsrs	r3, r3, #2
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	220f      	movs	r2, #15
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a52      	ldr	r2, [pc, #328]	@ (8003ec8 <HAL_GPIO_Init+0x314>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02b      	beq.n	8003dda <HAL_GPIO_Init+0x226>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a51      	ldr	r2, [pc, #324]	@ (8003ecc <HAL_GPIO_Init+0x318>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d025      	beq.n	8003dd6 <HAL_GPIO_Init+0x222>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a50      	ldr	r2, [pc, #320]	@ (8003ed0 <HAL_GPIO_Init+0x31c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01f      	beq.n	8003dd2 <HAL_GPIO_Init+0x21e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4f      	ldr	r2, [pc, #316]	@ (8003ed4 <HAL_GPIO_Init+0x320>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d019      	beq.n	8003dce <HAL_GPIO_Init+0x21a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4e      	ldr	r2, [pc, #312]	@ (8003ed8 <HAL_GPIO_Init+0x324>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_GPIO_Init+0x216>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4d      	ldr	r2, [pc, #308]	@ (8003edc <HAL_GPIO_Init+0x328>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00d      	beq.n	8003dc6 <HAL_GPIO_Init+0x212>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4c      	ldr	r2, [pc, #304]	@ (8003ee0 <HAL_GPIO_Init+0x32c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <HAL_GPIO_Init+0x20e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ee4 <HAL_GPIO_Init+0x330>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_GPIO_Init+0x20a>
 8003dba:	2307      	movs	r3, #7
 8003dbc:	e00e      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	e00c      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dc2:	2306      	movs	r3, #6
 8003dc4:	e00a      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dc6:	2305      	movs	r3, #5
 8003dc8:	e008      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e004      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e002      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_GPIO_Init+0x228>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	f002 0203 	and.w	r2, r2, #3
 8003de2:	0092      	lsls	r2, r2, #2
 8003de4:	4093      	lsls	r3, r2
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dec:	4935      	ldr	r1, [pc, #212]	@ (8003ec4 <HAL_GPIO_Init+0x310>)
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	3302      	adds	r3, #2
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee8 <HAL_GPIO_Init+0x334>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4013      	ands	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e1e:	4a32      	ldr	r2, [pc, #200]	@ (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e24:	4b30      	ldr	r3, [pc, #192]	@ (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e48:	4a27      	ldr	r2, [pc, #156]	@ (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e4e:	4b26      	ldr	r3, [pc, #152]	@ (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e72:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e9c:	4a12      	ldr	r2, [pc, #72]	@ (8003ee8 <HAL_GPIO_Init+0x334>)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	f67f ae90 	bls.w	8003bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3724      	adds	r7, #36	@ 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40020000 	.word	0x40020000
 8003ecc:	40020400 	.word	0x40020400
 8003ed0:	40020800 	.word	0x40020800
 8003ed4:	40020c00 	.word	0x40020c00
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40021400 	.word	0x40021400
 8003ee0:	40021800 	.word	0x40021800
 8003ee4:	40021c00 	.word	0x40021c00
 8003ee8:	40013c00 	.word	0x40013c00

08003eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	887b      	ldrh	r3, [r7, #2]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
 8003f08:	e001      	b.n	8003f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f2c:	787b      	ldrb	r3, [r7, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f38:	e003      	b.n	8003f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	041a      	lsls	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	619a      	str	r2, [r3, #24]
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e12b      	b.n	80041ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fe feb6 	bl	8002ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2224      	movs	r2, #36	@ 0x24
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f003 fbf6 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 8003fb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a81      	ldr	r2, [pc, #516]	@ (80041c4 <HAL_I2C_Init+0x274>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d807      	bhi.n	8003fd4 <HAL_I2C_Init+0x84>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a80      	ldr	r2, [pc, #512]	@ (80041c8 <HAL_I2C_Init+0x278>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	bf94      	ite	ls
 8003fcc:	2301      	movls	r3, #1
 8003fce:	2300      	movhi	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e006      	b.n	8003fe2 <HAL_I2C_Init+0x92>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a7d      	ldr	r2, [pc, #500]	@ (80041cc <HAL_I2C_Init+0x27c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bf94      	ite	ls
 8003fdc:	2301      	movls	r3, #1
 8003fde:	2300      	movhi	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0e7      	b.n	80041ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a78      	ldr	r2, [pc, #480]	@ (80041d0 <HAL_I2C_Init+0x280>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	0c9b      	lsrs	r3, r3, #18
 8003ff4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4a6a      	ldr	r2, [pc, #424]	@ (80041c4 <HAL_I2C_Init+0x274>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d802      	bhi.n	8004024 <HAL_I2C_Init+0xd4>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3301      	adds	r3, #1
 8004022:	e009      	b.n	8004038 <HAL_I2C_Init+0xe8>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	4a69      	ldr	r2, [pc, #420]	@ (80041d4 <HAL_I2C_Init+0x284>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	3301      	adds	r3, #1
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	430b      	orrs	r3, r1
 800403e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800404a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	495c      	ldr	r1, [pc, #368]	@ (80041c4 <HAL_I2C_Init+0x274>)
 8004054:	428b      	cmp	r3, r1
 8004056:	d819      	bhi.n	800408c <HAL_I2C_Init+0x13c>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1e59      	subs	r1, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	fbb1 f3f3 	udiv	r3, r1, r3
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800406c:	400b      	ands	r3, r1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_I2C_Init+0x138>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1e59      	subs	r1, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004080:	3301      	adds	r3, #1
 8004082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004086:	e051      	b.n	800412c <HAL_I2C_Init+0x1dc>
 8004088:	2304      	movs	r3, #4
 800408a:	e04f      	b.n	800412c <HAL_I2C_Init+0x1dc>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d111      	bne.n	80040b8 <HAL_I2C_Init+0x168>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	440b      	add	r3, r1
 80040a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a6:	3301      	adds	r3, #1
 80040a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e012      	b.n	80040de <HAL_I2C_Init+0x18e>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1e58      	subs	r0, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	0099      	lsls	r1, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Init+0x196>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e022      	b.n	800412c <HAL_I2C_Init+0x1dc>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10e      	bne.n	800410c <HAL_I2C_Init+0x1bc>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1e58      	subs	r0, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	440b      	add	r3, r1
 80040fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004100:	3301      	adds	r3, #1
 8004102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800410a:	e00f      	b.n	800412c <HAL_I2C_Init+0x1dc>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1e58      	subs	r0, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	0099      	lsls	r1, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004122:	3301      	adds	r3, #1
 8004124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	6809      	ldr	r1, [r1, #0]
 8004130:	4313      	orrs	r3, r2
 8004132:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69da      	ldr	r2, [r3, #28]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800415a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6911      	ldr	r1, [r2, #16]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68d2      	ldr	r2, [r2, #12]
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	430b      	orrs	r3, r1
 800416e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	000186a0 	.word	0x000186a0
 80041c8:	001e847f 	.word	0x001e847f
 80041cc:	003d08ff 	.word	0x003d08ff
 80041d0:	431bde83 	.word	0x431bde83
 80041d4:	10624dd3 	.word	0x10624dd3

080041d8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	2b80      	cmp	r3, #128	@ 0x80
 80041ec:	d103      	bne.n	80041f6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	611a      	str	r2, [r3, #16]
  }
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	461a      	mov	r2, r3
 8004210:	460b      	mov	r3, r1
 8004212:	817b      	strh	r3, [r7, #10]
 8004214:	4613      	mov	r3, r2
 8004216:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff f8f4 	bl	8003404 <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b20      	cmp	r3, #32
 8004228:	f040 80e0 	bne.w	80043ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2319      	movs	r3, #25
 8004232:	2201      	movs	r2, #1
 8004234:	4970      	ldr	r1, [pc, #448]	@ (80043f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f002 fbe6 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	e0d3      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_I2C_Master_Transmit+0x50>
 8004250:	2302      	movs	r3, #2
 8004252:	e0cc      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d007      	beq.n	800427a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004288:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2221      	movs	r2, #33	@ 0x21
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2210      	movs	r2, #16
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	893a      	ldrh	r2, [r7, #8]
 80042aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a50      	ldr	r2, [pc, #320]	@ (80043fc <HAL_I2C_Master_Transmit+0x1f8>)
 80042ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042bc:	8979      	ldrh	r1, [r7, #10]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f002 f8f8 	bl	80064b8 <I2C_MasterRequestWrite>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e08d      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042e8:	e066      	b.n	80043b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	6a39      	ldr	r1, [r7, #32]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f002 fca4 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00d      	beq.n	8004316 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d107      	bne.n	8004312 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e06b      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d11b      	bne.n	800438c <HAL_I2C_Master_Transmit+0x188>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004358:	2b00      	cmp	r3, #0
 800435a:	d017      	beq.n	800438c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	6a39      	ldr	r1, [r7, #32]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f002 fc9b 	bl	8006ccc <I2C_WaitOnBTFFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d107      	bne.n	80043b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e01a      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d194      	bne.n	80042ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	00100002 	.word	0x00100002
 80043fc:	ffff0000 	.word	0xffff0000

08004400 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	4608      	mov	r0, r1
 800440a:	4611      	mov	r1, r2
 800440c:	461a      	mov	r2, r3
 800440e:	4603      	mov	r3, r0
 8004410:	817b      	strh	r3, [r7, #10]
 8004412:	460b      	mov	r3, r1
 8004414:	813b      	strh	r3, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800441a:	f7fe fff3 	bl	8003404 <HAL_GetTick>
 800441e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b20      	cmp	r3, #32
 800442a:	f040 80d9 	bne.w	80045e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	2319      	movs	r3, #25
 8004434:	2201      	movs	r2, #1
 8004436:	496d      	ldr	r1, [pc, #436]	@ (80045ec <HAL_I2C_Mem_Write+0x1ec>)
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f002 fae5 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004444:	2302      	movs	r3, #2
 8004446:	e0cc      	b.n	80045e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_I2C_Mem_Write+0x56>
 8004452:	2302      	movs	r3, #2
 8004454:	e0c5      	b.n	80045e2 <HAL_I2C_Mem_Write+0x1e2>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d007      	beq.n	800447c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800448a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2221      	movs	r2, #33	@ 0x21
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2240      	movs	r2, #64	@ 0x40
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a4d      	ldr	r2, [pc, #308]	@ (80045f0 <HAL_I2C_Mem_Write+0x1f0>)
 80044bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044be:	88f8      	ldrh	r0, [r7, #6]
 80044c0:	893a      	ldrh	r2, [r7, #8]
 80044c2:	8979      	ldrh	r1, [r7, #10]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	4603      	mov	r3, r0
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f002 f874 	bl	80065bc <I2C_RequestMemoryWrite>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d052      	beq.n	8004580 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e081      	b.n	80045e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f002 fbaa 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d107      	bne.n	8004506 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e06b      	b.n	80045e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b04      	cmp	r3, #4
 8004546:	d11b      	bne.n	8004580 <HAL_I2C_Mem_Write+0x180>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d017      	beq.n	8004580 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1aa      	bne.n	80044de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f002 fb9d 	bl	8006ccc <I2C_WaitOnBTFFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	2b04      	cmp	r3, #4
 800459e:	d107      	bne.n	80045b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e016      	b.n	80045e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	00100002 	.word	0x00100002
 80045f0:	ffff0000 	.word	0xffff0000

080045f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08c      	sub	sp, #48	@ 0x30
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	4608      	mov	r0, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	461a      	mov	r2, r3
 8004602:	4603      	mov	r3, r0
 8004604:	817b      	strh	r3, [r7, #10]
 8004606:	460b      	mov	r3, r1
 8004608:	813b      	strh	r3, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800460e:	f7fe fef9 	bl	8003404 <HAL_GetTick>
 8004612:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b20      	cmp	r3, #32
 800461e:	f040 8214 	bne.w	8004a4a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2319      	movs	r3, #25
 8004628:	2201      	movs	r2, #1
 800462a:	497b      	ldr	r1, [pc, #492]	@ (8004818 <HAL_I2C_Mem_Read+0x224>)
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f002 f9eb 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
 800463a:	e207      	b.n	8004a4c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_I2C_Mem_Read+0x56>
 8004646:	2302      	movs	r3, #2
 8004648:	e200      	b.n	8004a4c <HAL_I2C_Mem_Read+0x458>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b01      	cmp	r3, #1
 800465e:	d007      	beq.n	8004670 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800467e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2222      	movs	r2, #34	@ 0x22
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2240      	movs	r2, #64	@ 0x40
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800469a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80046a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a5b      	ldr	r2, [pc, #364]	@ (800481c <HAL_I2C_Mem_Read+0x228>)
 80046b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046b2:	88f8      	ldrh	r0, [r7, #6]
 80046b4:	893a      	ldrh	r2, [r7, #8]
 80046b6:	8979      	ldrh	r1, [r7, #10]
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	4603      	mov	r3, r0
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f002 f810 	bl	80066e8 <I2C_RequestMemoryRead>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e1bc      	b.n	8004a4c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d113      	bne.n	8004702 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	623b      	str	r3, [r7, #32]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	623b      	str	r3, [r7, #32]
 80046ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e190      	b.n	8004a24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004706:	2b01      	cmp	r3, #1
 8004708:	d11b      	bne.n	8004742 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004718:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e170      	b.n	8004a24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004746:	2b02      	cmp	r3, #2
 8004748:	d11b      	bne.n	8004782 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004758:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004768:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	e150      	b.n	8004a24 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004798:	e144      	b.n	8004a24 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479e:	2b03      	cmp	r3, #3
 80047a0:	f200 80f1 	bhi.w	8004986 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d123      	bne.n	80047f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f002 fb05 	bl	8006dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e145      	b.n	8004a4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047f2:	e117      	b.n	8004a24 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d14e      	bne.n	800489a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004802:	2200      	movs	r2, #0
 8004804:	4906      	ldr	r1, [pc, #24]	@ (8004820 <HAL_I2C_Mem_Read+0x22c>)
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f002 f8fe 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e11a      	b.n	8004a4c <HAL_I2C_Mem_Read+0x458>
 8004816:	bf00      	nop
 8004818:	00100002 	.word	0x00100002
 800481c:	ffff0000 	.word	0xffff0000
 8004820:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004898:	e0c4      	b.n	8004a24 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a0:	2200      	movs	r2, #0
 80048a2:	496c      	ldr	r1, [pc, #432]	@ (8004a54 <HAL_I2C_Mem_Read+0x460>)
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f002 f8af 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0cb      	b.n	8004a4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fc:	2200      	movs	r2, #0
 80048fe:	4955      	ldr	r1, [pc, #340]	@ (8004a54 <HAL_I2C_Mem_Read+0x460>)
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f002 f881 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e09d      	b.n	8004a4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800491e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004984:	e04e      	b.n	8004a24 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004988:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f002 fa18 	bl	8006dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e058      	b.n	8004a4c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d124      	bne.n	8004a24 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d107      	bne.n	80049f2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f47f aeb6 	bne.w	800479a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e000      	b.n	8004a4c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3728      	adds	r7, #40	@ 0x28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	00010004 	.word	0x00010004

08004a58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	@ 0x28
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	460b      	mov	r3, r1
 8004a66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004a68:	f7fe fccc 	bl	8003404 <HAL_GetTick>
 8004a6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	f040 8111 	bne.w	8004ca2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2319      	movs	r3, #25
 8004a86:	2201      	movs	r2, #1
 8004a88:	4988      	ldr	r1, [pc, #544]	@ (8004cac <HAL_I2C_IsDeviceReady+0x254>)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f001 ffbc 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
 8004a98:	e104      	b.n	8004ca4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_I2C_IsDeviceReady+0x50>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e0fd      	b.n	8004ca4 <HAL_I2C_IsDeviceReady+0x24c>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d007      	beq.n	8004ace <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0201 	orr.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2224      	movs	r2, #36	@ 0x24
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4a70      	ldr	r2, [pc, #448]	@ (8004cb0 <HAL_I2C_IsDeviceReady+0x258>)
 8004af0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f001 ff7a 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b28:	d103      	bne.n	8004b32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b30:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e0b6      	b.n	8004ca4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b36:	897b      	ldrh	r3, [r7, #10]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004b46:	f7fe fc5d 	bl	8003404 <HAL_GetTick>
 8004b4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	bf0c      	ite	eq
 8004b5a:	2301      	moveq	r3, #1
 8004b5c:	2300      	movne	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b70:	bf0c      	ite	eq
 8004b72:	2301      	moveq	r3, #1
 8004b74:	2300      	movne	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b7a:	e025      	b.n	8004bc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b7c:	f7fe fc42 	bl	8003404 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <HAL_I2C_IsDeviceReady+0x13a>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	22a0      	movs	r2, #160	@ 0xa0
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2ba0      	cmp	r3, #160	@ 0xa0
 8004bd2:	d005      	beq.n	8004be0 <HAL_I2C_IsDeviceReady+0x188>
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <HAL_I2C_IsDeviceReady+0x188>
 8004bda:	7dbb      	ldrb	r3, [r7, #22]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0cd      	beq.n	8004b7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d129      	bne.n	8004c4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2319      	movs	r3, #25
 8004c22:	2201      	movs	r2, #1
 8004c24:	4921      	ldr	r1, [pc, #132]	@ (8004cac <HAL_I2C_IsDeviceReady+0x254>)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f001 feee 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e036      	b.n	8004ca4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e02c      	b.n	8004ca4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	2319      	movs	r3, #25
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	490f      	ldr	r1, [pc, #60]	@ (8004cac <HAL_I2C_IsDeviceReady+0x254>)
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f001 feca 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e012      	b.n	8004ca4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	f4ff af32 	bcc.w	8004af2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	00100002 	.word	0x00100002
 8004cb0:	ffff0000 	.word	0xffff0000

08004cb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cd4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cdc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d003      	beq.n	8004cec <HAL_I2C_EV_IRQHandler+0x38>
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b40      	cmp	r3, #64	@ 0x40
 8004ce8:	f040 80c1 	bne.w	8004e6e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_I2C_EV_IRQHandler+0x6e>
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004d0c:	d003      	beq.n	8004d16 <HAL_I2C_EV_IRQHandler+0x62>
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004d14:	d101      	bne.n	8004d1a <HAL_I2C_EV_IRQHandler+0x66>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_I2C_EV_IRQHandler+0x68>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	f000 8132 	beq.w	8004f86 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00c      	beq.n	8004d46 <HAL_I2C_EV_IRQHandler+0x92>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	0a5b      	lsrs	r3, r3, #9
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d006      	beq.n	8004d46 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f002 f8cd 	bl	8006ed8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fd9b 	bl	800587a <I2C_Master_SB>
 8004d44:	e092      	b.n	8004e6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	08db      	lsrs	r3, r3, #3
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_I2C_EV_IRQHandler+0xb2>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	0a5b      	lsrs	r3, r3, #9
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fe11 	bl	8005986 <I2C_Master_ADD10>
 8004d64:	e082      	b.n	8004e6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <HAL_I2C_EV_IRQHandler+0xd2>
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	0a5b      	lsrs	r3, r3, #9
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fe2b 	bl	80059da <I2C_Master_ADDR>
 8004d84:	e072      	b.n	8004e6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	089b      	lsrs	r3, r3, #2
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d03b      	beq.n	8004e0a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004da0:	f000 80f3 	beq.w	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	09db      	lsrs	r3, r3, #7
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00f      	beq.n	8004dd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	0a9b      	lsrs	r3, r3, #10
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d009      	beq.n	8004dd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d103      	bne.n	8004dd0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f9f3 	bl	80051b4 <I2C_MasterTransmit_TXE>
 8004dce:	e04d      	b.n	8004e6c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80d6 	beq.w	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	0a5b      	lsrs	r3, r3, #9
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80cf 	beq.w	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004dec:	7bbb      	ldrb	r3, [r7, #14]
 8004dee:	2b21      	cmp	r3, #33	@ 0x21
 8004df0:	d103      	bne.n	8004dfa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa7a 	bl	80052ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004df8:	e0c7      	b.n	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	2b40      	cmp	r3, #64	@ 0x40
 8004dfe:	f040 80c4 	bne.w	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fae8 	bl	80053d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e08:	e0bf      	b.n	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e18:	f000 80b7 	beq.w	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00f      	beq.n	8004e48 <HAL_I2C_EV_IRQHandler+0x194>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	0a9b      	lsrs	r3, r3, #10
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d009      	beq.n	8004e48 <HAL_I2C_EV_IRQHandler+0x194>
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	089b      	lsrs	r3, r3, #2
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d103      	bne.n	8004e48 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fb61 	bl	8005508 <I2C_MasterReceive_RXNE>
 8004e46:	e011      	b.n	8004e6c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 809a 	beq.w	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	0a5b      	lsrs	r3, r3, #9
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8093 	beq.w	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fc17 	bl	8005698 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e6a:	e08e      	b.n	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004e6c:	e08d      	b.n	8004f8a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e007      	b.n	8004e90 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d012      	beq.n	8004ec2 <HAL_I2C_EV_IRQHandler+0x20e>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	0a5b      	lsrs	r3, r3, #9
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00c      	beq.n	8004ec2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004eb8:	69b9      	ldr	r1, [r7, #24]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 ffdc 	bl	8005e78 <I2C_Slave_ADDR>
 8004ec0:	e066      	b.n	8004f90 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_I2C_EV_IRQHandler+0x22e>
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	0a5b      	lsrs	r3, r3, #9
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f001 f816 	bl	8005f0c <I2C_Slave_STOPF>
 8004ee0:	e056      	b.n	8004f90 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ee2:	7bbb      	ldrb	r3, [r7, #14]
 8004ee4:	2b21      	cmp	r3, #33	@ 0x21
 8004ee6:	d002      	beq.n	8004eee <HAL_I2C_EV_IRQHandler+0x23a>
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	2b29      	cmp	r3, #41	@ 0x29
 8004eec:	d125      	bne.n	8004f3a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	09db      	lsrs	r3, r3, #7
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00f      	beq.n	8004f1a <HAL_I2C_EV_IRQHandler+0x266>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	0a9b      	lsrs	r3, r3, #10
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_I2C_EV_IRQHandler+0x266>
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	089b      	lsrs	r3, r3, #2
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d103      	bne.n	8004f1a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fef2 	bl	8005cfc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f18:	e039      	b.n	8004f8e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	089b      	lsrs	r3, r3, #2
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d033      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0x2da>
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	0a5b      	lsrs	r3, r3, #9
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d02d      	beq.n	8004f8e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 ff1f 	bl	8005d76 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f38:	e029      	b.n	8004f8e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00f      	beq.n	8004f66 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	0a9b      	lsrs	r3, r3, #10
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	089b      	lsrs	r3, r3, #2
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 ff2a 	bl	8005db8 <I2C_SlaveReceive_RXNE>
 8004f64:	e014      	b.n	8004f90 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	089b      	lsrs	r3, r3, #2
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00e      	beq.n	8004f90 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	0a5b      	lsrs	r3, r3, #9
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 ff58 	bl	8005e34 <I2C_SlaveReceive_BTF>
 8004f84:	e004      	b.n	8004f90 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004f86:	bf00      	nop
 8004f88:	e002      	b.n	8004f90 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f8a:	bf00      	nop
 8004f8c:	e000      	b.n	8004f90 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f8e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b08a      	sub	sp, #40	@ 0x28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fb8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00e      	beq.n	8004fe4 <HAL_I2C_ER_IRQHandler+0x4e>
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	0a1b      	lsrs	r3, r3, #8
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004fe2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	0a5b      	lsrs	r3, r3, #9
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00e      	beq.n	800500e <HAL_I2C_ER_IRQHandler+0x78>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800500c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	0a9b      	lsrs	r3, r3, #10
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d03f      	beq.n	800509a <HAL_I2C_ER_IRQHandler+0x104>
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	0a1b      	lsrs	r3, r3, #8
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d039      	beq.n	800509a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005026:	7efb      	ldrb	r3, [r7, #27]
 8005028:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005038:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005040:	7ebb      	ldrb	r3, [r7, #26]
 8005042:	2b20      	cmp	r3, #32
 8005044:	d112      	bne.n	800506c <HAL_I2C_ER_IRQHandler+0xd6>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10f      	bne.n	800506c <HAL_I2C_ER_IRQHandler+0xd6>
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	2b21      	cmp	r3, #33	@ 0x21
 8005050:	d008      	beq.n	8005064 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005052:	7cfb      	ldrb	r3, [r7, #19]
 8005054:	2b29      	cmp	r3, #41	@ 0x29
 8005056:	d005      	beq.n	8005064 <HAL_I2C_ER_IRQHandler+0xce>
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	2b28      	cmp	r3, #40	@ 0x28
 800505c:	d106      	bne.n	800506c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b21      	cmp	r3, #33	@ 0x21
 8005062:	d103      	bne.n	800506c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 f881 	bl	800616c <I2C_Slave_AF>
 800506a:	e016      	b.n	800509a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005074:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	f043 0304 	orr.w	r3, r3, #4
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800507e:	7efb      	ldrb	r3, [r7, #27]
 8005080:	2b10      	cmp	r3, #16
 8005082:	d002      	beq.n	800508a <HAL_I2C_ER_IRQHandler+0xf4>
 8005084:	7efb      	ldrb	r3, [r7, #27]
 8005086:	2b40      	cmp	r3, #64	@ 0x40
 8005088:	d107      	bne.n	800509a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005098:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	0adb      	lsrs	r3, r3, #11
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00e      	beq.n	80050c4 <HAL_I2C_ER_IRQHandler+0x12e>
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	0a1b      	lsrs	r3, r3, #8
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	f043 0308 	orr.w	r3, r3, #8
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80050c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 f8bc 	bl	8006254 <I2C_ITError>
  }
}
 80050dc:	bf00      	nop
 80050de:	3728      	adds	r7, #40	@ 0x28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
 8005140:	4613      	mov	r3, r2
 8005142:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d150      	bne.n	800527c <I2C_MasterTransmit_TXE+0xc8>
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	2b21      	cmp	r3, #33	@ 0x21
 80051de:	d14d      	bne.n	800527c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d01d      	beq.n	8005222 <I2C_MasterTransmit_TXE+0x6e>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d01a      	beq.n	8005222 <I2C_MasterTransmit_TXE+0x6e>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051f2:	d016      	beq.n	8005222 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005202:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2211      	movs	r2, #17
 8005208:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff ff62 	bl	80050e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005220:	e060      	b.n	80052e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005230:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005240:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b40      	cmp	r3, #64	@ 0x40
 800525a:	d107      	bne.n	800526c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff ff7d 	bl	8005164 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800526a:	e03b      	b.n	80052e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff ff35 	bl	80050e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800527a:	e033      	b.n	80052e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b21      	cmp	r3, #33	@ 0x21
 8005280:	d005      	beq.n	800528e <I2C_MasterTransmit_TXE+0xda>
 8005282:	7bbb      	ldrb	r3, [r7, #14]
 8005284:	2b40      	cmp	r3, #64	@ 0x40
 8005286:	d12d      	bne.n	80052e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b22      	cmp	r3, #34	@ 0x22
 800528c:	d12a      	bne.n	80052e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d108      	bne.n	80052aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80052a8:	e01c      	b.n	80052e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b40      	cmp	r3, #64	@ 0x40
 80052b4:	d103      	bne.n	80052be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f88e 	bl	80053d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80052bc:	e012      	b.n	80052e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80052e2:	e7ff      	b.n	80052e4 <I2C_MasterTransmit_TXE+0x130>
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b21      	cmp	r3, #33	@ 0x21
 8005304:	d164      	bne.n	80053d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d012      	beq.n	8005336 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005334:	e04c      	b.n	80053d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d01d      	beq.n	8005378 <I2C_MasterTransmit_BTF+0x8c>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b20      	cmp	r3, #32
 8005340:	d01a      	beq.n	8005378 <I2C_MasterTransmit_BTF+0x8c>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005348:	d016      	beq.n	8005378 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005358:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2211      	movs	r2, #17
 800535e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff feb7 	bl	80050e4 <HAL_I2C_MasterTxCpltCallback>
}
 8005376:	e02b      	b.n	80053d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005386:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005396:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b40      	cmp	r3, #64	@ 0x40
 80053b0:	d107      	bne.n	80053c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff fed2 	bl	8005164 <HAL_I2C_MemTxCpltCallback>
}
 80053c0:	e006      	b.n	80053d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff fe8a 	bl	80050e4 <HAL_I2C_MasterTxCpltCallback>
}
 80053d0:	bf00      	nop
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11d      	bne.n	800542c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d10b      	bne.n	8005410 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005408:	1c9a      	adds	r2, r3, #2
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800540e:	e077      	b.n	8005500 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005414:	b29b      	uxth	r3, r3
 8005416:	121b      	asrs	r3, r3, #8
 8005418:	b2da      	uxtb	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800542a:	e069      	b.n	8005500 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10b      	bne.n	800544c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005438:	b2da      	uxtb	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800544a:	e059      	b.n	8005500 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005450:	2b02      	cmp	r3, #2
 8005452:	d152      	bne.n	80054fa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b22      	cmp	r3, #34	@ 0x22
 8005458:	d10d      	bne.n	8005476 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005468:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005474:	e044      	b.n	8005500 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d015      	beq.n	80054ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b21      	cmp	r3, #33	@ 0x21
 8005484:	d112      	bne.n	80054ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80054aa:	e029      	b.n	8005500 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d124      	bne.n	8005500 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b21      	cmp	r3, #33	@ 0x21
 80054ba:	d121      	bne.n	8005500 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff fe36 	bl	8005164 <HAL_I2C_MemTxCpltCallback>
}
 80054f8:	e002      	b.n	8005500 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fe fe6c 	bl	80041d8 <I2C_Flush_DR>
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b22      	cmp	r3, #34	@ 0x22
 800551a:	f040 80b9 	bne.w	8005690 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005528:	b29b      	uxth	r3, r3
 800552a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b03      	cmp	r3, #3
 8005530:	d921      	bls.n	8005576 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b03      	cmp	r3, #3
 8005560:	f040 8096 	bne.w	8005690 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005572:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005574:	e08c      	b.n	8005690 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557a:	2b02      	cmp	r3, #2
 800557c:	d07f      	beq.n	800567e <I2C_MasterReceive_RXNE+0x176>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d002      	beq.n	800558a <I2C_MasterReceive_RXNE+0x82>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d179      	bne.n	800567e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 fbe6 	bl	8006d5c <I2C_WaitOnSTOPRequestThroughIT>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d14c      	bne.n	8005630 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b40      	cmp	r3, #64	@ 0x40
 80055ee:	d10a      	bne.n	8005606 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fdba 	bl	8005178 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005604:	e044      	b.n	8005690 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d002      	beq.n	800561a <I2C_MasterReceive_RXNE+0x112>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b20      	cmp	r3, #32
 8005618:	d103      	bne.n	8005622 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005620:	e002      	b.n	8005628 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2212      	movs	r2, #18
 8005626:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fd65 	bl	80050f8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800562e:	e02f      	b.n	8005690 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800563e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fd88 	bl	800518c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800567c:	e008      	b.n	8005690 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800568c:	605a      	str	r2, [r3, #4]
}
 800568e:	e7ff      	b.n	8005690 <I2C_MasterReceive_RXNE+0x188>
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d11b      	bne.n	80056e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80056e6:	e0c4      	b.n	8005872 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d129      	bne.n	8005746 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005700:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b04      	cmp	r3, #4
 8005706:	d00a      	beq.n	800571e <I2C_MasterReceive_BTF+0x86>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d007      	beq.n	800571e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800571c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005744:	e095      	b.n	8005872 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d17d      	bne.n	800584c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d002      	beq.n	800575c <I2C_MasterReceive_BTF+0xc4>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b10      	cmp	r3, #16
 800575a:	d108      	bne.n	800576e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e016      	b.n	800579c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b04      	cmp	r3, #4
 8005772:	d002      	beq.n	800577a <I2C_MasterReceive_BTF+0xe2>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d108      	bne.n	800578c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e007      	b.n	800579c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800579a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80057f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b40      	cmp	r3, #64	@ 0x40
 800580a:	d10a      	bne.n	8005822 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fcac 	bl	8005178 <HAL_I2C_MemRxCpltCallback>
}
 8005820:	e027      	b.n	8005872 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b08      	cmp	r3, #8
 800582e:	d002      	beq.n	8005836 <I2C_MasterReceive_BTF+0x19e>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b20      	cmp	r3, #32
 8005834:	d103      	bne.n	800583e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30
 800583c:	e002      	b.n	8005844 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2212      	movs	r2, #18
 8005842:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff fc57 	bl	80050f8 <HAL_I2C_MasterRxCpltCallback>
}
 800584a:	e012      	b.n	8005872 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b40      	cmp	r3, #64	@ 0x40
 800588c:	d117      	bne.n	80058be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	b2db      	uxtb	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80058a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80058a8:	e067      	b.n	800597a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	611a      	str	r2, [r3, #16]
}
 80058bc:	e05d      	b.n	800597a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058c6:	d133      	bne.n	8005930 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b21      	cmp	r3, #33	@ 0x21
 80058d2:	d109      	bne.n	80058e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80058e4:	611a      	str	r2, [r3, #16]
 80058e6:	e008      	b.n	80058fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <I2C_Master_SB+0x92>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d108      	bne.n	800591e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	2b00      	cmp	r3, #0
 8005912:	d032      	beq.n	800597a <I2C_Master_SB+0x100>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d02d      	beq.n	800597a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800592c:	605a      	str	r2, [r3, #4]
}
 800592e:	e024      	b.n	800597a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10e      	bne.n	8005956 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593c:	b29b      	uxth	r3, r3
 800593e:	11db      	asrs	r3, r3, #7
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f003 0306 	and.w	r3, r3, #6
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f063 030f 	orn	r3, r3, #15
 800594c:	b2da      	uxtb	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	611a      	str	r2, [r3, #16]
}
 8005954:	e011      	b.n	800597a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595a:	2b01      	cmp	r3, #1
 800595c:	d10d      	bne.n	800597a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	b29b      	uxth	r3, r3
 8005964:	11db      	asrs	r3, r3, #7
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 0306 	and.w	r3, r3, #6
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f063 030e 	orn	r3, r3, #14
 8005972:	b2da      	uxtb	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	611a      	str	r2, [r3, #16]
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	b2da      	uxtb	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <I2C_Master_ADD10+0x26>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d108      	bne.n	80059be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00c      	beq.n	80059ce <I2C_Master_ADD10+0x48>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059cc:	605a      	str	r2, [r3, #4]
  }
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80059da:	b480      	push	{r7}
 80059dc:	b091      	sub	sp, #68	@ 0x44
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b22      	cmp	r3, #34	@ 0x22
 8005a02:	f040 8169 	bne.w	8005cd8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10f      	bne.n	8005a2e <I2C_Master_ADDR+0x54>
 8005a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005a12:	2b40      	cmp	r3, #64	@ 0x40
 8005a14:	d10b      	bne.n	8005a2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a16:	2300      	movs	r3, #0
 8005a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	e160      	b.n	8005cf0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d11d      	bne.n	8005a72 <I2C_Master_ADDR+0x98>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005a3e:	d118      	bne.n	8005a72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a40:	2300      	movs	r3, #0
 8005a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a70:	e13e      	b.n	8005cf0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d113      	bne.n	8005aa4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e115      	b.n	8005cd0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	f040 808a 	bne.w	8005bc4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ab6:	d137      	bne.n	8005b28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ad6:	d113      	bne.n	8005b00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ae6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	e0e7      	b.n	8005cd0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b00:	2300      	movs	r3, #0
 8005b02:	623b      	str	r3, [r7, #32]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	623b      	str	r3, [r7, #32]
 8005b14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e0d3      	b.n	8005cd0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d02e      	beq.n	8005b8c <I2C_Master_ADDR+0x1b2>
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d02b      	beq.n	8005b8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b36:	2b12      	cmp	r3, #18
 8005b38:	d102      	bne.n	8005b40 <I2C_Master_ADDR+0x166>
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d125      	bne.n	8005b8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d00e      	beq.n	8005b64 <I2C_Master_ADDR+0x18a>
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d00b      	beq.n	8005b64 <I2C_Master_ADDR+0x18a>
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d008      	beq.n	8005b64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e007      	b.n	8005b74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	e0a1      	b.n	8005cd0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	e085      	b.n	8005cd0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d14d      	bne.n	8005c6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d016      	beq.n	8005c02 <I2C_Master_ADDR+0x228>
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d013      	beq.n	8005c02 <I2C_Master_ADDR+0x228>
 8005bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d010      	beq.n	8005c02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	e007      	b.n	8005c12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c20:	d117      	bne.n	8005c52 <I2C_Master_ADDR+0x278>
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c28:	d00b      	beq.n	8005c42 <I2C_Master_ADDR+0x268>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d008      	beq.n	8005c42 <I2C_Master_ADDR+0x268>
 8005c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d005      	beq.n	8005c42 <I2C_Master_ADDR+0x268>
 8005c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d002      	beq.n	8005c42 <I2C_Master_ADDR+0x268>
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d107      	bne.n	8005c52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	e032      	b.n	8005cd0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c88:	d117      	bne.n	8005cba <I2C_Master_ADDR+0x2e0>
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c90:	d00b      	beq.n	8005caa <I2C_Master_ADDR+0x2d0>
 8005c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d008      	beq.n	8005caa <I2C_Master_ADDR+0x2d0>
 8005c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d005      	beq.n	8005caa <I2C_Master_ADDR+0x2d0>
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d002      	beq.n	8005caa <I2C_Master_ADDR+0x2d0>
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d107      	bne.n	8005cba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005cd6:	e00b      	b.n	8005cf0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
}
 8005cee:	e7ff      	b.n	8005cf0 <I2C_Master_ADDR+0x316>
 8005cf0:	bf00      	nop
 8005cf2:	3744      	adds	r7, #68	@ 0x44
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02b      	beq.n	8005d6e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d114      	bne.n	8005d6e <I2C_SlaveTransmit_TXE+0x72>
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2b29      	cmp	r3, #41	@ 0x29
 8005d48:	d111      	bne.n	8005d6e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2221      	movs	r2, #33	@ 0x21
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2228      	movs	r2, #40	@ 0x28
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff f9cf 	bl	800510c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d011      	beq.n	8005dac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d02c      	beq.n	8005e2c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d114      	bne.n	8005e2c <I2C_SlaveReceive_RXNE+0x74>
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e06:	d111      	bne.n	8005e2c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2222      	movs	r2, #34	@ 0x22
 8005e1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2228      	movs	r2, #40	@ 0x28
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff f97a 	bl	8005120 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d012      	beq.n	8005e6c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e92:	2b28      	cmp	r3, #40	@ 0x28
 8005e94:	d127      	bne.n	8005ee6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ea4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	089b      	lsrs	r3, r3, #2
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	09db      	lsrs	r3, r3, #7
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	81bb      	strh	r3, [r7, #12]
 8005ec8:	e002      	b.n	8005ed0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005ed8:	89ba      	ldrh	r2, [r7, #12]
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff f928 	bl	8005134 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ee4:	e00e      	b.n	8005f04 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60bb      	str	r3, [r7, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f1a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f2a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60bb      	str	r3, [r7, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f58:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f68:	d172      	bne.n	8006050 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	2b22      	cmp	r3, #34	@ 0x22
 8005f6e:	d002      	beq.n	8005f76 <I2C_Slave_STOPF+0x6a>
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f74:	d135      	bne.n	8005fe2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f92:	f043 0204 	orr.w	r2, r3, #4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fa8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fd fc24 	bl	80037fc <HAL_DMA_GetState>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d049      	beq.n	800604e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbe:	4a69      	ldr	r2, [pc, #420]	@ (8006164 <I2C_Slave_STOPF+0x258>)
 8005fc0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fd fbf6 	bl	80037b8 <HAL_DMA_Abort_IT>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d03d      	beq.n	800604e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fe0:	e035      	b.n	800604e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d005      	beq.n	8006006 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffe:	f043 0204 	orr.w	r2, r3, #4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006014:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601a:	4618      	mov	r0, r3
 800601c:	f7fd fbee 	bl	80037fc <HAL_DMA_GetState>
 8006020:	4603      	mov	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d014      	beq.n	8006050 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602a:	4a4e      	ldr	r2, [pc, #312]	@ (8006164 <I2C_Slave_STOPF+0x258>)
 800602c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006032:	4618      	mov	r0, r3
 8006034:	f7fd fbc0 	bl	80037b8 <HAL_DMA_Abort_IT>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d008      	beq.n	8006050 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006048:	4610      	mov	r0, r2
 800604a:	4798      	blx	r3
 800604c:	e000      	b.n	8006050 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800604e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d03e      	beq.n	80060d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d112      	bne.n	800608e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006098:	2b40      	cmp	r3, #64	@ 0x40
 800609a:	d112      	bne.n	80060c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d0:	f043 0204 	orr.w	r2, r3, #4
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8b7 	bl	8006254 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80060e6:	e039      	b.n	800615c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ec:	d109      	bne.n	8006102 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2228      	movs	r2, #40	@ 0x28
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff f80f 	bl	8005120 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b28      	cmp	r3, #40	@ 0x28
 800610c:	d111      	bne.n	8006132 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a15      	ldr	r2, [pc, #84]	@ (8006168 <I2C_Slave_STOPF+0x25c>)
 8006112:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff f810 	bl	8005150 <HAL_I2C_ListenCpltCallback>
}
 8006130:	e014      	b.n	800615c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006136:	2b22      	cmp	r3, #34	@ 0x22
 8006138:	d002      	beq.n	8006140 <I2C_Slave_STOPF+0x234>
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	2b22      	cmp	r3, #34	@ 0x22
 800613e:	d10d      	bne.n	800615c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fe ffe2 	bl	8005120 <HAL_I2C_SlaveRxCpltCallback>
}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	080068b9 	.word	0x080068b9
 8006168:	ffff0000 	.word	0xffff0000

0800616c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b08      	cmp	r3, #8
 8006186:	d002      	beq.n	800618e <I2C_Slave_AF+0x22>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b20      	cmp	r3, #32
 800618c:	d129      	bne.n	80061e2 <I2C_Slave_AF+0x76>
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	2b28      	cmp	r3, #40	@ 0x28
 8006192:	d126      	bne.n	80061e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a2e      	ldr	r2, [pc, #184]	@ (8006250 <I2C_Slave_AF+0xe4>)
 8006198:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fe ffb8 	bl	8005150 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80061e0:	e031      	b.n	8006246 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	2b21      	cmp	r3, #33	@ 0x21
 80061e6:	d129      	bne.n	800623c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a19      	ldr	r2, [pc, #100]	@ (8006250 <I2C_Slave_AF+0xe4>)
 80061ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2221      	movs	r2, #33	@ 0x21
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006212:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800621c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800622c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fd ffd2 	bl	80041d8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fe ff69 	bl	800510c <HAL_I2C_SlaveTxCpltCallback>
}
 800623a:	e004      	b.n	8006246 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006244:	615a      	str	r2, [r3, #20]
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	ffff0000 	.word	0xffff0000

08006254 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006262:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800626a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	2b10      	cmp	r3, #16
 8006270:	d002      	beq.n	8006278 <I2C_ITError+0x24>
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	2b40      	cmp	r3, #64	@ 0x40
 8006276:	d10a      	bne.n	800628e <I2C_ITError+0x3a>
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	2b22      	cmp	r3, #34	@ 0x22
 800627c:	d107      	bne.n	800628e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800628c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006294:	2b28      	cmp	r3, #40	@ 0x28
 8006296:	d107      	bne.n	80062a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2228      	movs	r2, #40	@ 0x28
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80062a6:	e015      	b.n	80062d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062b6:	d00a      	beq.n	80062ce <I2C_ITError+0x7a>
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b60      	cmp	r3, #96	@ 0x60
 80062bc:	d007      	beq.n	80062ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062e2:	d162      	bne.n	80063aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d020      	beq.n	8006344 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006306:	4a6a      	ldr	r2, [pc, #424]	@ (80064b0 <I2C_ITError+0x25c>)
 8006308:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800630e:	4618      	mov	r0, r3
 8006310:	f7fd fa52 	bl	80037b8 <HAL_DMA_Abort_IT>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 8089 	beq.w	800642e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800633e:	4610      	mov	r0, r2
 8006340:	4798      	blx	r3
 8006342:	e074      	b.n	800642e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006348:	4a59      	ldr	r2, [pc, #356]	@ (80064b0 <I2C_ITError+0x25c>)
 800634a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006350:	4618      	mov	r0, r3
 8006352:	f7fd fa31 	bl	80037b8 <HAL_DMA_Abort_IT>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d068      	beq.n	800642e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006366:	2b40      	cmp	r3, #64	@ 0x40
 8006368:	d10b      	bne.n	8006382 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0201 	bic.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	e041      	b.n	800642e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b60      	cmp	r3, #96	@ 0x60
 80063b4:	d125      	bne.n	8006402 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ce:	2b40      	cmp	r3, #64	@ 0x40
 80063d0:	d10b      	bne.n	80063ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0201 	bic.w	r2, r2, #1
 80063f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fe fed0 	bl	80051a0 <HAL_I2C_AbortCpltCallback>
 8006400:	e015      	b.n	800642e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800640c:	2b40      	cmp	r3, #64	@ 0x40
 800640e:	d10b      	bne.n	8006428 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7fe feaf 	bl	800518c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10e      	bne.n	800645c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800646a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006472:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b04      	cmp	r3, #4
 800647e:	d113      	bne.n	80064a8 <I2C_ITError+0x254>
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b28      	cmp	r3, #40	@ 0x28
 8006484:	d110      	bne.n	80064a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a0a      	ldr	r2, [pc, #40]	@ (80064b4 <I2C_ITError+0x260>)
 800648a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fe fe54 	bl	8005150 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	080068b9 	.word	0x080068b9
 80064b4:	ffff0000 	.word	0xffff0000

080064b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	460b      	mov	r3, r1
 80064c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d006      	beq.n	80064e2 <I2C_MasterRequestWrite+0x2a>
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d003      	beq.n	80064e2 <I2C_MasterRequestWrite+0x2a>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064e0:	d108      	bne.n	80064f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	e00b      	b.n	800650c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f8:	2b12      	cmp	r3, #18
 80064fa:	d107      	bne.n	800650c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800650a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fa75 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800652e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006532:	d103      	bne.n	800653c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800653a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e035      	b.n	80065ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006548:	d108      	bne.n	800655c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800654a:	897b      	ldrh	r3, [r7, #10]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006558:	611a      	str	r2, [r3, #16]
 800655a:	e01b      	b.n	8006594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800655c:	897b      	ldrh	r3, [r7, #10]
 800655e:	11db      	asrs	r3, r3, #7
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 0306 	and.w	r3, r3, #6
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f063 030f 	orn	r3, r3, #15
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	490e      	ldr	r1, [pc, #56]	@ (80065b4 <I2C_MasterRequestWrite+0xfc>)
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fabe 	bl	8006afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e010      	b.n	80065ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800658a:	897b      	ldrh	r3, [r7, #10]
 800658c:	b2da      	uxtb	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4907      	ldr	r1, [pc, #28]	@ (80065b8 <I2C_MasterRequestWrite+0x100>)
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 faae 	bl	8006afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	00010008 	.word	0x00010008
 80065b8:	00010002 	.word	0x00010002

080065bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	4608      	mov	r0, r1
 80065c6:	4611      	mov	r1, r2
 80065c8:	461a      	mov	r2, r3
 80065ca:	4603      	mov	r3, r0
 80065cc:	817b      	strh	r3, [r7, #10]
 80065ce:	460b      	mov	r3, r1
 80065d0:	813b      	strh	r3, [r7, #8]
 80065d2:	4613      	mov	r3, r2
 80065d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fa08 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00d      	beq.n	800661a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660c:	d103      	bne.n	8006616 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006614:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e05f      	b.n	80066da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800661a:	897b      	ldrh	r3, [r7, #10]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	461a      	mov	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006628:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	492d      	ldr	r1, [pc, #180]	@ (80066e4 <I2C_RequestMemoryWrite+0x128>)
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fa63 	bl	8006afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e04c      	b.n	80066da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006658:	6a39      	ldr	r1, [r7, #32]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 faee 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	2b04      	cmp	r3, #4
 800666c:	d107      	bne.n	800667e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800667c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e02b      	b.n	80066da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d105      	bne.n	8006694 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006688:	893b      	ldrh	r3, [r7, #8]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	611a      	str	r2, [r3, #16]
 8006692:	e021      	b.n	80066d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006694:	893b      	ldrh	r3, [r7, #8]
 8006696:	0a1b      	lsrs	r3, r3, #8
 8006698:	b29b      	uxth	r3, r3
 800669a:	b2da      	uxtb	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066a4:	6a39      	ldr	r1, [r7, #32]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 fac8 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d107      	bne.n	80066ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e005      	b.n	80066da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066ce:	893b      	ldrh	r3, [r7, #8]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	00010002 	.word	0x00010002

080066e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	817b      	strh	r3, [r7, #10]
 80066fa:	460b      	mov	r3, r1
 80066fc:	813b      	strh	r3, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006710:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006720:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	2200      	movs	r2, #0
 800672a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f96a 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006748:	d103      	bne.n	8006752 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006750:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e0aa      	b.n	80068ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006756:	897b      	ldrh	r3, [r7, #10]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006764:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	6a3a      	ldr	r2, [r7, #32]
 800676a:	4952      	ldr	r1, [pc, #328]	@ (80068b4 <I2C_RequestMemoryRead+0x1cc>)
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f9c5 	bl	8006afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e097      	b.n	80068ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006794:	6a39      	ldr	r1, [r7, #32]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fa50 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00d      	beq.n	80067be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d107      	bne.n	80067ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e076      	b.n	80068ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067be:	88fb      	ldrh	r3, [r7, #6]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d105      	bne.n	80067d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067c4:	893b      	ldrh	r3, [r7, #8]
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	611a      	str	r2, [r3, #16]
 80067ce:	e021      	b.n	8006814 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067d0:	893b      	ldrh	r3, [r7, #8]
 80067d2:	0a1b      	lsrs	r3, r3, #8
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e0:	6a39      	ldr	r1, [r7, #32]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fa2a 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00d      	beq.n	800680a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d107      	bne.n	8006806 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006804:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e050      	b.n	80068ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800680a:	893b      	ldrh	r3, [r7, #8]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006816:	6a39      	ldr	r1, [r7, #32]
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fa0f 	bl	8006c3c <I2C_WaitOnTXEFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00d      	beq.n	8006840 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006828:	2b04      	cmp	r3, #4
 800682a:	d107      	bne.n	800683c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800683a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e035      	b.n	80068ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800684e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	2200      	movs	r2, #0
 8006858:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f8d3 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00d      	beq.n	8006884 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006876:	d103      	bne.n	8006880 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800687e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e013      	b.n	80068ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006884:	897b      	ldrh	r3, [r7, #10]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	6a3a      	ldr	r2, [r7, #32]
 8006898:	4906      	ldr	r1, [pc, #24]	@ (80068b4 <I2C_RequestMemoryRead+0x1cc>)
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f92e 	bl	8006afc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	00010002 	.word	0x00010002

080068b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80068d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006a00 <I2C_DMAAbort+0x148>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	08db      	lsrs	r3, r3, #3
 80068d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006a04 <I2C_DMAAbort+0x14c>)
 80068da:	fba2 2303 	umull	r2, r3, r2, r3
 80068de:	0a1a      	lsrs	r2, r3, #8
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	00da      	lsls	r2, r3, #3
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	f043 0220 	orr.w	r2, r3, #32
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80068fe:	e00a      	b.n	8006916 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3b01      	subs	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006914:	d0ea      	beq.n	80068ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006922:	2200      	movs	r2, #0
 8006924:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006932:	2200      	movs	r2, #0
 8006934:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006944:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2200      	movs	r2, #0
 800694a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006958:	2200      	movs	r2, #0
 800695a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006968:	2200      	movs	r2, #0
 800696a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0201 	bic.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b60      	cmp	r3, #96	@ 0x60
 8006986:	d10e      	bne.n	80069a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2200      	movs	r2, #0
 800699c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800699e:	6978      	ldr	r0, [r7, #20]
 80069a0:	f7fe fbfe 	bl	80051a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069a4:	e027      	b.n	80069f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069a6:	7cfb      	ldrb	r3, [r7, #19]
 80069a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80069ac:	2b28      	cmp	r3, #40	@ 0x28
 80069ae:	d117      	bne.n	80069e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80069ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2228      	movs	r2, #40	@ 0x28
 80069da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80069de:	e007      	b.n	80069f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80069f0:	6978      	ldr	r0, [r7, #20]
 80069f2:	f7fe fbcb 	bl	800518c <HAL_I2C_ErrorCallback>
}
 80069f6:	bf00      	nop
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	2000006c 	.word	0x2000006c
 8006a04:	14f8b589 	.word	0x14f8b589

08006a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a18:	e048      	b.n	8006aac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d044      	beq.n	8006aac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a22:	f7fc fcef 	bl	8003404 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d302      	bcc.n	8006a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d139      	bne.n	8006aac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	0c1b      	lsrs	r3, r3, #16
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d10d      	bne.n	8006a5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	43da      	mvns	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf0c      	ite	eq
 8006a54:	2301      	moveq	r3, #1
 8006a56:	2300      	movne	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	e00c      	b.n	8006a78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	43da      	mvns	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d116      	bne.n	8006aac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a98:	f043 0220 	orr.w	r2, r3, #32
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e023      	b.n	8006af4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d10d      	bne.n	8006ad2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	43da      	mvns	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2301      	moveq	r3, #1
 8006aca:	2300      	movne	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	e00c      	b.n	8006aec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	43da      	mvns	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4013      	ands	r3, r2
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2301      	moveq	r3, #1
 8006ae6:	2300      	movne	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d093      	beq.n	8006a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b0a:	e071      	b.n	8006bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b1a:	d123      	bne.n	8006b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b50:	f043 0204 	orr.w	r2, r3, #4
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e067      	b.n	8006c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6a:	d041      	beq.n	8006bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6c:	f7fc fc4a 	bl	8003404 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d302      	bcc.n	8006b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d136      	bne.n	8006bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d10c      	bne.n	8006ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	43da      	mvns	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4013      	ands	r3, r2
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bf14      	ite	ne
 8006b9e:	2301      	movne	r3, #1
 8006ba0:	2300      	moveq	r3, #0
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	e00b      	b.n	8006bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	43da      	mvns	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	bf14      	ite	ne
 8006bb8:	2301      	movne	r3, #1
 8006bba:	2300      	moveq	r3, #0
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d016      	beq.n	8006bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	f043 0220 	orr.w	r2, r3, #32
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e021      	b.n	8006c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	0c1b      	lsrs	r3, r3, #16
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10c      	bne.n	8006c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	43da      	mvns	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	4013      	ands	r3, r2
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bf14      	ite	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	2300      	moveq	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	e00b      	b.n	8006c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	43da      	mvns	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bf14      	ite	ne
 8006c26:	2301      	movne	r3, #1
 8006c28:	2300      	moveq	r3, #0
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f47f af6d 	bne.w	8006b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c48:	e034      	b.n	8006cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f915 	bl	8006e7a <I2C_IsAcknowledgeFailed>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e034      	b.n	8006cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d028      	beq.n	8006cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fc fbcf 	bl	8003404 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d11d      	bne.n	8006cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c82:	2b80      	cmp	r3, #128	@ 0x80
 8006c84:	d016      	beq.n	8006cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca0:	f043 0220 	orr.w	r2, r3, #32
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e007      	b.n	8006cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cbe:	2b80      	cmp	r3, #128	@ 0x80
 8006cc0:	d1c3      	bne.n	8006c4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cd8:	e034      	b.n	8006d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f8cd 	bl	8006e7a <I2C_IsAcknowledgeFailed>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e034      	b.n	8006d54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf0:	d028      	beq.n	8006d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf2:	f7fc fb87 	bl	8003404 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d302      	bcc.n	8006d08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11d      	bne.n	8006d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d016      	beq.n	8006d44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e007      	b.n	8006d54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d1c3      	bne.n	8006cda <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d68:	4b13      	ldr	r3, [pc, #76]	@ (8006db8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	08db      	lsrs	r3, r3, #3
 8006d6e:	4a13      	ldr	r2, [pc, #76]	@ (8006dbc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006d70:	fba2 2303 	umull	r2, r3, r2, r3
 8006d74:	0a1a      	lsrs	r2, r3, #8
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d107      	bne.n	8006d9a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8e:	f043 0220 	orr.w	r2, r3, #32
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e008      	b.n	8006dac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da8:	d0e9      	beq.n	8006d7e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	2000006c 	.word	0x2000006c
 8006dbc:	14f8b589 	.word	0x14f8b589

08006dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dcc:	e049      	b.n	8006e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b10      	cmp	r3, #16
 8006dda:	d119      	bne.n	8006e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0210 	mvn.w	r2, #16
 8006de4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e030      	b.n	8006e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e10:	f7fc faf8 	bl	8003404 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d302      	bcc.n	8006e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d11d      	bne.n	8006e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e30:	2b40      	cmp	r3, #64	@ 0x40
 8006e32:	d016      	beq.n	8006e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4e:	f043 0220 	orr.w	r2, r3, #32
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e007      	b.n	8006e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6c:	2b40      	cmp	r3, #64	@ 0x40
 8006e6e:	d1ae      	bne.n	8006dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e90:	d11b      	bne.n	8006eca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb6:	f043 0204 	orr.w	r2, r3, #4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006ee8:	d103      	bne.n	8006ef2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ef0:	e007      	b.n	8006f02 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006efa:	d102      	bne.n	8006f02 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2208      	movs	r2, #8
 8006f00:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8006f14:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8006f20:	f000 f808 	bl	8006f34 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006f24:	4b02      	ldr	r3, [pc, #8]	@ (8006f30 <HAL_PWR_PVD_IRQHandler+0x20>)
 8006f26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006f2a:	615a      	str	r2, [r3, #20]
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40013c00 	.word	0x40013c00

08006f34 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8006f38:	bf00      	nop
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e267      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d075      	beq.n	800704e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006f62:	4b88      	ldr	r3, [pc, #544]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 030c 	and.w	r3, r3, #12
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d00c      	beq.n	8006f88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f6e:	4b85      	ldr	r3, [pc, #532]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d112      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f7a:	4b82      	ldr	r3, [pc, #520]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f86:	d10b      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f88:	4b7e      	ldr	r3, [pc, #504]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d05b      	beq.n	800704c <HAL_RCC_OscConfig+0x108>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d157      	bne.n	800704c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e242      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa8:	d106      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x74>
 8006faa:	4b76      	ldr	r3, [pc, #472]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a75      	ldr	r2, [pc, #468]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e01d      	b.n	8006ff4 <HAL_RCC_OscConfig+0xb0>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fc0:	d10c      	bne.n	8006fdc <HAL_RCC_OscConfig+0x98>
 8006fc2:	4b70      	ldr	r3, [pc, #448]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a6f      	ldr	r2, [pc, #444]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	4b6d      	ldr	r3, [pc, #436]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a6c      	ldr	r2, [pc, #432]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e00b      	b.n	8006ff4 <HAL_RCC_OscConfig+0xb0>
 8006fdc:	4b69      	ldr	r3, [pc, #420]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a68      	ldr	r2, [pc, #416]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	4b66      	ldr	r3, [pc, #408]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a65      	ldr	r2, [pc, #404]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8006fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d013      	beq.n	8007024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ffc:	f7fc fa02 	bl	8003404 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007004:	f7fc f9fe 	bl	8003404 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b64      	cmp	r3, #100	@ 0x64
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e207      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007016:	4b5b      	ldr	r3, [pc, #364]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0f0      	beq.n	8007004 <HAL_RCC_OscConfig+0xc0>
 8007022:	e014      	b.n	800704e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007024:	f7fc f9ee 	bl	8003404 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800702c:	f7fc f9ea 	bl	8003404 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b64      	cmp	r3, #100	@ 0x64
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e1f3      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800703e:	4b51      	ldr	r3, [pc, #324]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f0      	bne.n	800702c <HAL_RCC_OscConfig+0xe8>
 800704a:	e000      	b.n	800704e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800704c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d063      	beq.n	8007122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800705a:	4b4a      	ldr	r3, [pc, #296]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 030c 	and.w	r3, r3, #12
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00b      	beq.n	800707e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007066:	4b47      	ldr	r3, [pc, #284]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800706e:	2b08      	cmp	r3, #8
 8007070:	d11c      	bne.n	80070ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007072:	4b44      	ldr	r3, [pc, #272]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d116      	bne.n	80070ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800707e:	4b41      	ldr	r3, [pc, #260]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_RCC_OscConfig+0x152>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d001      	beq.n	8007096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e1c7      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007096:	4b3b      	ldr	r3, [pc, #236]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	4937      	ldr	r1, [pc, #220]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070aa:	e03a      	b.n	8007122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d020      	beq.n	80070f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070b4:	4b34      	ldr	r3, [pc, #208]	@ (8007188 <HAL_RCC_OscConfig+0x244>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ba:	f7fc f9a3 	bl	8003404 <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c0:	e008      	b.n	80070d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070c2:	f7fc f99f 	bl	8003404 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e1a8      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0f0      	beq.n	80070c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e0:	4b28      	ldr	r3, [pc, #160]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	4925      	ldr	r1, [pc, #148]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	600b      	str	r3, [r1, #0]
 80070f4:	e015      	b.n	8007122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070f6:	4b24      	ldr	r3, [pc, #144]	@ (8007188 <HAL_RCC_OscConfig+0x244>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fc f982 	bl	8003404 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007104:	f7fc f97e 	bl	8003404 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e187      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007116:	4b1b      	ldr	r3, [pc, #108]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d036      	beq.n	800719c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d016      	beq.n	8007164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007136:	4b15      	ldr	r3, [pc, #84]	@ (800718c <HAL_RCC_OscConfig+0x248>)
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800713c:	f7fc f962 	bl	8003404 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007144:	f7fc f95e 	bl	8003404 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e167      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007156:	4b0b      	ldr	r3, [pc, #44]	@ (8007184 <HAL_RCC_OscConfig+0x240>)
 8007158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x200>
 8007162:	e01b      	b.n	800719c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007164:	4b09      	ldr	r3, [pc, #36]	@ (800718c <HAL_RCC_OscConfig+0x248>)
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800716a:	f7fc f94b 	bl	8003404 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007170:	e00e      	b.n	8007190 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007172:	f7fc f947 	bl	8003404 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d907      	bls.n	8007190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e150      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
 8007184:	40023800 	.word	0x40023800
 8007188:	42470000 	.word	0x42470000
 800718c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007190:	4b88      	ldr	r3, [pc, #544]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1ea      	bne.n	8007172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8097 	beq.w	80072d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ae:	4b81      	ldr	r3, [pc, #516]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10f      	bne.n	80071da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ba:	2300      	movs	r3, #0
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	4b7d      	ldr	r3, [pc, #500]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 80071c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c2:	4a7c      	ldr	r2, [pc, #496]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 80071c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80071ca:	4b7a      	ldr	r3, [pc, #488]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071d2:	60bb      	str	r3, [r7, #8]
 80071d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d6:	2301      	movs	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071da:	4b77      	ldr	r3, [pc, #476]	@ (80073b8 <HAL_RCC_OscConfig+0x474>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d118      	bne.n	8007218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071e6:	4b74      	ldr	r3, [pc, #464]	@ (80073b8 <HAL_RCC_OscConfig+0x474>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a73      	ldr	r2, [pc, #460]	@ (80073b8 <HAL_RCC_OscConfig+0x474>)
 80071ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071f2:	f7fc f907 	bl	8003404 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071fa:	f7fc f903 	bl	8003404 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e10c      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800720c:	4b6a      	ldr	r3, [pc, #424]	@ (80073b8 <HAL_RCC_OscConfig+0x474>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0f0      	beq.n	80071fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d106      	bne.n	800722e <HAL_RCC_OscConfig+0x2ea>
 8007220:	4b64      	ldr	r3, [pc, #400]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007224:	4a63      	ldr	r2, [pc, #396]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	6713      	str	r3, [r2, #112]	@ 0x70
 800722c:	e01c      	b.n	8007268 <HAL_RCC_OscConfig+0x324>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2b05      	cmp	r3, #5
 8007234:	d10c      	bne.n	8007250 <HAL_RCC_OscConfig+0x30c>
 8007236:	4b5f      	ldr	r3, [pc, #380]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800723a:	4a5e      	ldr	r2, [pc, #376]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 800723c:	f043 0304 	orr.w	r3, r3, #4
 8007240:	6713      	str	r3, [r2, #112]	@ 0x70
 8007242:	4b5c      	ldr	r3, [pc, #368]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007246:	4a5b      	ldr	r2, [pc, #364]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007248:	f043 0301 	orr.w	r3, r3, #1
 800724c:	6713      	str	r3, [r2, #112]	@ 0x70
 800724e:	e00b      	b.n	8007268 <HAL_RCC_OscConfig+0x324>
 8007250:	4b58      	ldr	r3, [pc, #352]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007254:	4a57      	ldr	r2, [pc, #348]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	6713      	str	r3, [r2, #112]	@ 0x70
 800725c:	4b55      	ldr	r3, [pc, #340]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 800725e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007260:	4a54      	ldr	r2, [pc, #336]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007262:	f023 0304 	bic.w	r3, r3, #4
 8007266:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d015      	beq.n	800729c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007270:	f7fc f8c8 	bl	8003404 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007276:	e00a      	b.n	800728e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007278:	f7fc f8c4 	bl	8003404 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007286:	4293      	cmp	r3, r2
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e0cb      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728e:	4b49      	ldr	r3, [pc, #292]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0ee      	beq.n	8007278 <HAL_RCC_OscConfig+0x334>
 800729a:	e014      	b.n	80072c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800729c:	f7fc f8b2 	bl	8003404 <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072a2:	e00a      	b.n	80072ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072a4:	f7fc f8ae 	bl	8003404 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e0b5      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ba:	4b3e      	ldr	r3, [pc, #248]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1ee      	bne.n	80072a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d105      	bne.n	80072d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072cc:	4b39      	ldr	r3, [pc, #228]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 80072ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d0:	4a38      	ldr	r2, [pc, #224]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 80072d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 80a1 	beq.w	8007424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072e2:	4b34      	ldr	r3, [pc, #208]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 030c 	and.w	r3, r3, #12
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d05c      	beq.n	80073a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d141      	bne.n	800737a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072f6:	4b31      	ldr	r3, [pc, #196]	@ (80073bc <HAL_RCC_OscConfig+0x478>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072fc:	f7fc f882 	bl	8003404 <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007304:	f7fc f87e 	bl	8003404 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e087      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007316:	4b27      	ldr	r3, [pc, #156]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f0      	bne.n	8007304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69da      	ldr	r2, [r3, #28]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007330:	019b      	lsls	r3, r3, #6
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	085b      	lsrs	r3, r3, #1
 800733a:	3b01      	subs	r3, #1
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007344:	061b      	lsls	r3, r3, #24
 8007346:	491b      	ldr	r1, [pc, #108]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 8007348:	4313      	orrs	r3, r2
 800734a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800734c:	4b1b      	ldr	r3, [pc, #108]	@ (80073bc <HAL_RCC_OscConfig+0x478>)
 800734e:	2201      	movs	r2, #1
 8007350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007352:	f7fc f857 	bl	8003404 <HAL_GetTick>
 8007356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007358:	e008      	b.n	800736c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800735a:	f7fc f853 	bl	8003404 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e05c      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800736c:	4b11      	ldr	r3, [pc, #68]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0f0      	beq.n	800735a <HAL_RCC_OscConfig+0x416>
 8007378:	e054      	b.n	8007424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800737a:	4b10      	ldr	r3, [pc, #64]	@ (80073bc <HAL_RCC_OscConfig+0x478>)
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007380:	f7fc f840 	bl	8003404 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007388:	f7fc f83c 	bl	8003404 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e045      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739a:	4b06      	ldr	r3, [pc, #24]	@ (80073b4 <HAL_RCC_OscConfig+0x470>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0x444>
 80073a6:	e03d      	b.n	8007424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d107      	bne.n	80073c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e038      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
 80073b4:	40023800 	.word	0x40023800
 80073b8:	40007000 	.word	0x40007000
 80073bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007430 <HAL_RCC_OscConfig+0x4ec>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d028      	beq.n	8007420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073d8:	429a      	cmp	r2, r3
 80073da:	d121      	bne.n	8007420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d11a      	bne.n	8007420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80073f0:	4013      	ands	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d111      	bne.n	8007420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007406:	085b      	lsrs	r3, r3, #1
 8007408:	3b01      	subs	r3, #1
 800740a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800740c:	429a      	cmp	r2, r3
 800740e:	d107      	bne.n	8007420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800741c:	429a      	cmp	r2, r3
 800741e:	d001      	beq.n	8007424 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	40023800 	.word	0x40023800

08007434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e0cc      	b.n	80075e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007448:	4b68      	ldr	r3, [pc, #416]	@ (80075ec <HAL_RCC_ClockConfig+0x1b8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d90c      	bls.n	8007470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007456:	4b65      	ldr	r3, [pc, #404]	@ (80075ec <HAL_RCC_ClockConfig+0x1b8>)
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800745e:	4b63      	ldr	r3, [pc, #396]	@ (80075ec <HAL_RCC_ClockConfig+0x1b8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	429a      	cmp	r2, r3
 800746a:	d001      	beq.n	8007470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e0b8      	b.n	80075e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d020      	beq.n	80074be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007488:	4b59      	ldr	r3, [pc, #356]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	4a58      	ldr	r2, [pc, #352]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074a0:	4b53      	ldr	r3, [pc, #332]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	4a52      	ldr	r2, [pc, #328]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 80074a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80074aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074ac:	4b50      	ldr	r3, [pc, #320]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	494d      	ldr	r1, [pc, #308]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d044      	beq.n	8007554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d107      	bne.n	80074e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074d2:	4b47      	ldr	r3, [pc, #284]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d119      	bne.n	8007512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e07f      	b.n	80075e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d003      	beq.n	80074f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d107      	bne.n	8007502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074f2:	4b3f      	ldr	r3, [pc, #252]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e06f      	b.n	80075e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007502:	4b3b      	ldr	r3, [pc, #236]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e067      	b.n	80075e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007512:	4b37      	ldr	r3, [pc, #220]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f023 0203 	bic.w	r2, r3, #3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	4934      	ldr	r1, [pc, #208]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007520:	4313      	orrs	r3, r2
 8007522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007524:	f7fb ff6e 	bl	8003404 <HAL_GetTick>
 8007528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752a:	e00a      	b.n	8007542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800752c:	f7fb ff6a 	bl	8003404 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800753a:	4293      	cmp	r3, r2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e04f      	b.n	80075e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007542:	4b2b      	ldr	r3, [pc, #172]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 020c 	and.w	r2, r3, #12
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	429a      	cmp	r2, r3
 8007552:	d1eb      	bne.n	800752c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007554:	4b25      	ldr	r3, [pc, #148]	@ (80075ec <HAL_RCC_ClockConfig+0x1b8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	429a      	cmp	r2, r3
 8007560:	d20c      	bcs.n	800757c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007562:	4b22      	ldr	r3, [pc, #136]	@ (80075ec <HAL_RCC_ClockConfig+0x1b8>)
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800756a:	4b20      	ldr	r3, [pc, #128]	@ (80075ec <HAL_RCC_ClockConfig+0x1b8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	429a      	cmp	r2, r3
 8007576:	d001      	beq.n	800757c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e032      	b.n	80075e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d008      	beq.n	800759a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007588:	4b19      	ldr	r3, [pc, #100]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	4916      	ldr	r1, [pc, #88]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007596:	4313      	orrs	r3, r2
 8007598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0308 	and.w	r3, r3, #8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075a6:	4b12      	ldr	r3, [pc, #72]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	490e      	ldr	r1, [pc, #56]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075ba:	f000 f821 	bl	8007600 <HAL_RCC_GetSysClockFreq>
 80075be:	4602      	mov	r2, r0
 80075c0:	4b0b      	ldr	r3, [pc, #44]	@ (80075f0 <HAL_RCC_ClockConfig+0x1bc>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	490a      	ldr	r1, [pc, #40]	@ (80075f4 <HAL_RCC_ClockConfig+0x1c0>)
 80075cc:	5ccb      	ldrb	r3, [r1, r3]
 80075ce:	fa22 f303 	lsr.w	r3, r2, r3
 80075d2:	4a09      	ldr	r2, [pc, #36]	@ (80075f8 <HAL_RCC_ClockConfig+0x1c4>)
 80075d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80075d6:	4b09      	ldr	r3, [pc, #36]	@ (80075fc <HAL_RCC_ClockConfig+0x1c8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fb fcec 	bl	8002fb8 <HAL_InitTick>

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40023c00 	.word	0x40023c00
 80075f0:	40023800 	.word	0x40023800
 80075f4:	080524fc 	.word	0x080524fc
 80075f8:	2000006c 	.word	0x2000006c
 80075fc:	20000070 	.word	0x20000070

08007600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007604:	b090      	sub	sp, #64	@ 0x40
 8007606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007618:	4b59      	ldr	r3, [pc, #356]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x180>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f003 030c 	and.w	r3, r3, #12
 8007620:	2b08      	cmp	r3, #8
 8007622:	d00d      	beq.n	8007640 <HAL_RCC_GetSysClockFreq+0x40>
 8007624:	2b08      	cmp	r3, #8
 8007626:	f200 80a1 	bhi.w	800776c <HAL_RCC_GetSysClockFreq+0x16c>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_RCC_GetSysClockFreq+0x34>
 800762e:	2b04      	cmp	r3, #4
 8007630:	d003      	beq.n	800763a <HAL_RCC_GetSysClockFreq+0x3a>
 8007632:	e09b      	b.n	800776c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007634:	4b53      	ldr	r3, [pc, #332]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x184>)
 8007636:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007638:	e09b      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800763a:	4b53      	ldr	r3, [pc, #332]	@ (8007788 <HAL_RCC_GetSysClockFreq+0x188>)
 800763c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800763e:	e098      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007640:	4b4f      	ldr	r3, [pc, #316]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x180>)
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007648:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800764a:	4b4d      	ldr	r3, [pc, #308]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x180>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d028      	beq.n	80076a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007656:	4b4a      	ldr	r3, [pc, #296]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x180>)
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	099b      	lsrs	r3, r3, #6
 800765c:	2200      	movs	r2, #0
 800765e:	623b      	str	r3, [r7, #32]
 8007660:	627a      	str	r2, [r7, #36]	@ 0x24
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007668:	2100      	movs	r1, #0
 800766a:	4b47      	ldr	r3, [pc, #284]	@ (8007788 <HAL_RCC_GetSysClockFreq+0x188>)
 800766c:	fb03 f201 	mul.w	r2, r3, r1
 8007670:	2300      	movs	r3, #0
 8007672:	fb00 f303 	mul.w	r3, r0, r3
 8007676:	4413      	add	r3, r2
 8007678:	4a43      	ldr	r2, [pc, #268]	@ (8007788 <HAL_RCC_GetSysClockFreq+0x188>)
 800767a:	fba0 1202 	umull	r1, r2, r0, r2
 800767e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007680:	460a      	mov	r2, r1
 8007682:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007686:	4413      	add	r3, r2
 8007688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800768a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768c:	2200      	movs	r2, #0
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	61fa      	str	r2, [r7, #28]
 8007692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007696:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800769a:	f7f9 f957 	bl	800094c <__aeabi_uldivmod>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	4613      	mov	r3, r2
 80076a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076a6:	e053      	b.n	8007750 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076a8:	4b35      	ldr	r3, [pc, #212]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x180>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	099b      	lsrs	r3, r3, #6
 80076ae:	2200      	movs	r2, #0
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	617a      	str	r2, [r7, #20]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80076ba:	f04f 0b00 	mov.w	fp, #0
 80076be:	4652      	mov	r2, sl
 80076c0:	465b      	mov	r3, fp
 80076c2:	f04f 0000 	mov.w	r0, #0
 80076c6:	f04f 0100 	mov.w	r1, #0
 80076ca:	0159      	lsls	r1, r3, #5
 80076cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076d0:	0150      	lsls	r0, r2, #5
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	ebb2 080a 	subs.w	r8, r2, sl
 80076da:	eb63 090b 	sbc.w	r9, r3, fp
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80076ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80076ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80076f2:	ebb2 0408 	subs.w	r4, r2, r8
 80076f6:	eb63 0509 	sbc.w	r5, r3, r9
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	00eb      	lsls	r3, r5, #3
 8007704:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007708:	00e2      	lsls	r2, r4, #3
 800770a:	4614      	mov	r4, r2
 800770c:	461d      	mov	r5, r3
 800770e:	eb14 030a 	adds.w	r3, r4, sl
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	eb45 030b 	adc.w	r3, r5, fp
 8007718:	607b      	str	r3, [r7, #4]
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	f04f 0300 	mov.w	r3, #0
 8007722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007726:	4629      	mov	r1, r5
 8007728:	028b      	lsls	r3, r1, #10
 800772a:	4621      	mov	r1, r4
 800772c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007730:	4621      	mov	r1, r4
 8007732:	028a      	lsls	r2, r1, #10
 8007734:	4610      	mov	r0, r2
 8007736:	4619      	mov	r1, r3
 8007738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773a:	2200      	movs	r2, #0
 800773c:	60bb      	str	r3, [r7, #8]
 800773e:	60fa      	str	r2, [r7, #12]
 8007740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007744:	f7f9 f902 	bl	800094c <__aeabi_uldivmod>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4613      	mov	r3, r2
 800774e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007750:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <HAL_RCC_GetSysClockFreq+0x180>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	3301      	adds	r3, #1
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007760:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800776a:	e002      	b.n	8007772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800776c:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x184>)
 800776e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007774:	4618      	mov	r0, r3
 8007776:	3740      	adds	r7, #64	@ 0x40
 8007778:	46bd      	mov	sp, r7
 800777a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800777e:	bf00      	nop
 8007780:	40023800 	.word	0x40023800
 8007784:	00f42400 	.word	0x00f42400
 8007788:	017d7840 	.word	0x017d7840

0800778c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007790:	4b03      	ldr	r3, [pc, #12]	@ (80077a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007792:	681b      	ldr	r3, [r3, #0]
}
 8007794:	4618      	mov	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	2000006c 	.word	0x2000006c

080077a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077a8:	f7ff fff0 	bl	800778c <HAL_RCC_GetHCLKFreq>
 80077ac:	4602      	mov	r2, r0
 80077ae:	4b05      	ldr	r3, [pc, #20]	@ (80077c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	0a9b      	lsrs	r3, r3, #10
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	4903      	ldr	r1, [pc, #12]	@ (80077c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077ba:	5ccb      	ldrb	r3, [r1, r3]
 80077bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40023800 	.word	0x40023800
 80077c8:	0805250c 	.word	0x0805250c

080077cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077d0:	f7ff ffdc 	bl	800778c <HAL_RCC_GetHCLKFreq>
 80077d4:	4602      	mov	r2, r0
 80077d6:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	0b5b      	lsrs	r3, r3, #13
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	4903      	ldr	r1, [pc, #12]	@ (80077f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077e2:	5ccb      	ldrb	r3, [r1, r3]
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	40023800 	.word	0x40023800
 80077f0:	0805250c 	.word	0x0805250c

080077f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	220f      	movs	r2, #15
 8007802:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007804:	4b12      	ldr	r3, [pc, #72]	@ (8007850 <HAL_RCC_GetClockConfig+0x5c>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 0203 	and.w	r2, r3, #3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007810:	4b0f      	ldr	r3, [pc, #60]	@ (8007850 <HAL_RCC_GetClockConfig+0x5c>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800781c:	4b0c      	ldr	r3, [pc, #48]	@ (8007850 <HAL_RCC_GetClockConfig+0x5c>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007828:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <HAL_RCC_GetClockConfig+0x5c>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	08db      	lsrs	r3, r3, #3
 800782e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007836:	4b07      	ldr	r3, [pc, #28]	@ (8007854 <HAL_RCC_GetClockConfig+0x60>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0207 	and.w	r2, r3, #7
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	601a      	str	r2, [r3, #0]
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	40023800 	.word	0x40023800
 8007854:	40023c00 	.word	0x40023c00

08007858 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e022      	b.n	80078b0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d105      	bne.n	8007882 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7fb fa8b 	bl	8002d98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2203      	movs	r2, #3
 8007886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f814 	bl	80078b8 <HAL_SD_InitCard>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e00a      	b.n	80078b0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80078b8:	b5b0      	push	{r4, r5, r7, lr}
 80078ba:	b08e      	sub	sp, #56	@ 0x38
 80078bc:	af04      	add	r7, sp, #16
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80078d4:	2376      	movs	r3, #118	@ 0x76
 80078d6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681d      	ldr	r5, [r3, #0]
 80078dc:	466c      	mov	r4, sp
 80078de:	f107 0318 	add.w	r3, r7, #24
 80078e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078ea:	f107 030c 	add.w	r3, r7, #12
 80078ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078f0:	4628      	mov	r0, r5
 80078f2:	f003 f879 	bl	800a9e8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80078f6:	4b2a      	ldr	r3, [pc, #168]	@ (80079a0 <HAL_SD_InitCard+0xe8>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4618      	mov	r0, r3
 8007902:	f003 f8ba 	bl	800aa7a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007906:	4b26      	ldr	r3, [pc, #152]	@ (80079a0 <HAL_SD_InitCard+0xe8>)
 8007908:	2201      	movs	r2, #1
 800790a:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800790c:	2002      	movs	r0, #2
 800790e:	f7fb fd85 	bl	800341c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 f806 	bl	8008924 <SD_PowerON>
 8007918:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	431a      	orrs	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e02e      	b.n	8007996 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 ff25 	bl	8008788 <SD_InitCard>
 800793e:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00b      	beq.n	800795e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	431a      	orrs	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e01b      	b.n	8007996 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007966:	4618      	mov	r0, r3
 8007968:	f003 f919 	bl	800ab9e <SDMMC_CmdBlockLength>
 800796c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00f      	beq.n	8007994 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a0a      	ldr	r2, [pc, #40]	@ (80079a4 <HAL_SD_InitCard+0xec>)
 800797a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e000      	b.n	8007996 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3728      	adds	r7, #40	@ 0x28
 800799a:	46bd      	mov	sp, r7
 800799c:	bdb0      	pop	{r4, r5, r7, pc}
 800799e:	bf00      	nop
 80079a0:	422580a0 	.word	0x422580a0
 80079a4:	004005ff 	.word	0x004005ff

080079a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08c      	sub	sp, #48	@ 0x30
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d107      	bne.n	80079d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e0c0      	b.n	8007b52 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	f040 80b9 	bne.w	8007b50 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	441a      	add	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d907      	bls.n	8007a02 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e0a7      	b.n	8007b52 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2203      	movs	r2, #3
 8007a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	6812      	ldr	r2, [r2, #0]
 8007a1c:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8007a20:	f043 0302 	orr.w	r3, r3, #2
 8007a24:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2a:	4a4c      	ldr	r2, [pc, #304]	@ (8007b5c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007a2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a32:	4a4b      	ldr	r2, [pc, #300]	@ (8007b60 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007a34:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a42:	2200      	movs	r2, #0
 8007a44:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3380      	adds	r3, #128	@ 0x80
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	025b      	lsls	r3, r3, #9
 8007a74:	089b      	lsrs	r3, r3, #2
 8007a76:	f7fb fdd7 	bl	8003628 <HAL_DMA_Start_IT>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d017      	beq.n	8007ab0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a33      	ldr	r2, [pc, #204]	@ (8007b64 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007a96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e050      	b.n	8007b52 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8007b68 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d002      	beq.n	8007ac4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac0:	025b      	lsls	r3, r3, #9
 8007ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	025b      	lsls	r3, r3, #9
 8007ace:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007ad0:	2390      	movs	r3, #144	@ 0x90
 8007ad2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007adc:	2301      	movs	r3, #1
 8007ade:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f107 0210 	add.w	r2, r7, #16
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f003 f82b 	bl	800ab46 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d90a      	bls.n	8007b0c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2282      	movs	r2, #130	@ 0x82
 8007afa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b02:	4618      	mov	r0, r3
 8007b04:	f003 f88f 	bl	800ac26 <SDMMC_CmdReadMultiBlock>
 8007b08:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007b0a:	e009      	b.n	8007b20 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2281      	movs	r2, #129	@ 0x81
 8007b10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f003 f862 	bl	800abe2 <SDMMC_CmdReadSingleBlock>
 8007b1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d012      	beq.n	8007b4c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8007b64 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007b2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e002      	b.n	8007b52 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	e000      	b.n	8007b52 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007b50:	2302      	movs	r3, #2
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3730      	adds	r7, #48	@ 0x30
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	08008597 	.word	0x08008597
 8007b60:	08008609 	.word	0x08008609
 8007b64:	004005ff 	.word	0x004005ff
 8007b68:	4225858c 	.word	0x4225858c

08007b6c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08c      	sub	sp, #48	@ 0x30
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d107      	bne.n	8007b94 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b88:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0c5      	b.n	8007d20 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	f040 80be 	bne.w	8007d1e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	441a      	add	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d907      	bls.n	8007bc6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e0ac      	b.n	8007d20 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2203      	movs	r2, #3
 8007bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8007be4:	f043 0302 	orr.w	r3, r3, #2
 8007be8:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bee:	4a4e      	ldr	r2, [pc, #312]	@ (8007d28 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf6:	4a4d      	ldr	r2, [pc, #308]	@ (8007d2c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007bf8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bfe:	2200      	movs	r2, #0
 8007c00:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d002      	beq.n	8007c10 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0c:	025b      	lsls	r3, r3, #9
 8007c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d90a      	bls.n	8007c2c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	22a0      	movs	r2, #160	@ 0xa0
 8007c1a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c22:	4618      	mov	r0, r3
 8007c24:	f003 f843 	bl	800acae <SDMMC_CmdWriteMultiBlock>
 8007c28:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007c2a:	e009      	b.n	8007c40 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2290      	movs	r2, #144	@ 0x90
 8007c30:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f003 f816 	bl	800ac6a <SDMMC_CmdWriteSingleBlock>
 8007c3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d012      	beq.n	8007c6c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a39      	ldr	r2, [pc, #228]	@ (8007d30 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007c4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c54:	431a      	orrs	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e059      	b.n	8007d20 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007c6c:	4b31      	ldr	r3, [pc, #196]	@ (8007d34 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c76:	2240      	movs	r2, #64	@ 0x40
 8007c78:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3380      	adds	r3, #128	@ 0x80
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	025b      	lsls	r3, r3, #9
 8007ca8:	089b      	lsrs	r3, r3, #2
 8007caa:	f7fb fcbd 	bl	8003628 <HAL_DMA_Start_IT>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01c      	beq.n	8007cee <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	6812      	ldr	r2, [r2, #0]
 8007cbe:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8007cc2:	f023 0302 	bic.w	r3, r3, #2
 8007cc6:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a18      	ldr	r2, [pc, #96]	@ (8007d30 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007cce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e018      	b.n	8007d20 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007cee:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	025b      	lsls	r3, r3, #9
 8007cf8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007cfa:	2390      	movs	r3, #144	@ 0x90
 8007cfc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f107 0210 	add.w	r2, r7, #16
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f002 ff16 	bl	800ab46 <SDIO_ConfigData>

      return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e000      	b.n	8007d20 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007d1e:	2302      	movs	r3, #2
  }
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3730      	adds	r7, #48	@ 0x30
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	0800856d 	.word	0x0800856d
 8007d2c:	08008609 	.word	0x08008609
 8007d30:	004005ff 	.word	0x004005ff
 8007d34:	4225858c 	.word	0x4225858c

08007d38 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d008      	beq.n	8007d66 <HAL_SD_IRQHandler+0x2e>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f003 0308 	and.w	r3, r3, #8
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 f806 	bl	8008d70 <SD_Read_IT>
 8007d64:	e165      	b.n	8008032 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 808f 	beq.w	8007e94 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d7e:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8007d8e:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007d92:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0201 	bic.w	r2, r2, #1
 8007da2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d039      	beq.n	8007e22 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <HAL_SD_IRQHandler+0x8a>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d011      	beq.n	8007de6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f002 ff94 	bl	800acf4 <SDMMC_CmdStopTransfer>
 8007dcc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d008      	beq.n	8007de6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f92f 	bl	8008044 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007dee:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <HAL_SD_IRQHandler+0xda>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f003 fbfa 	bl	800b60c <HAL_SD_RxCpltCallback>
 8007e18:	e10b      	b.n	8008032 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f003 fbec 	bl	800b5f8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e20:	e107      	b.n	8008032 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8102 	beq.w	8008032 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d011      	beq.n	8007e5c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f002 ff59 	bl	800acf4 <SDMMC_CmdStopTransfer>
 8007e42:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f8f4 	bl	8008044 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f040 80e5 	bne.w	8008032 <HAL_SD_IRQHandler+0x2fa>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f040 80df 	bne.w	8008032 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0208 	bic.w	r2, r2, #8
 8007e82:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f003 fbb3 	bl	800b5f8 <HAL_SD_TxCpltCallback>
}
 8007e92:	e0ce      	b.n	8008032 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d008      	beq.n	8007eb4 <HAL_SD_IRQHandler+0x17c>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 ffb0 	bl	8008e12 <SD_Write_IT>
 8007eb2:	e0be      	b.n	8008032 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eba:	f240 233a 	movw	r3, #570	@ 0x23a
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80b6 	beq.w	8008032 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed8:	f043 0202 	orr.w	r2, r3, #2
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee6:	f003 0308 	and.w	r3, r3, #8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef2:	f043 0208 	orr.w	r2, r3, #8
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0c:	f043 0220 	orr.w	r2, r3, #32
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1a:	f003 0310 	and.w	r3, r3, #16
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f26:	f043 0210 	orr.w	r2, r3, #16
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f40:	f043 0208 	orr.w	r2, r3, #8
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f240 723a 	movw	r2, #1850	@ 0x73a
 8007f50:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8007f60:	f023 0302 	bic.w	r3, r3, #2
 8007f64:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f002 fec2 	bl	800acf4 <SDMMC_CmdStopTransfer>
 8007f70:	4602      	mov	r2, r0
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f855 	bl	8008044 <HAL_SD_ErrorCallback>
}
 8007f9a:	e04a      	b.n	8008032 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d045      	beq.n	8008032 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d104      	bne.n	8007fba <HAL_SD_IRQHandler+0x282>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d011      	beq.n	8007fde <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800803c <HAL_SD_IRQHandler+0x304>)
 8007fc0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fb fbf6 	bl	80037b8 <HAL_DMA_Abort_IT>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d02f      	beq.n	8008032 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fb68 	bl	80086ac <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007fdc:	e029      	b.n	8008032 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d104      	bne.n	8007ff2 <HAL_SD_IRQHandler+0x2ba>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff6:	4a12      	ldr	r2, [pc, #72]	@ (8008040 <HAL_SD_IRQHandler+0x308>)
 8007ff8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fb fbda 	bl	80037b8 <HAL_DMA_Abort_IT>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d013      	beq.n	8008032 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fb83 	bl	800871a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008014:	e00d      	b.n	8008032 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f003 fada 	bl	800b5e4 <HAL_SD_AbortCallback>
}
 8008030:	e7ff      	b.n	8008032 <HAL_SD_IRQHandler+0x2fa>
 8008032:	bf00      	nop
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	080086ad 	.word	0x080086ad
 8008040:	0800871b 	.word	0x0800871b

08008044 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008066:	0f9b      	lsrs	r3, r3, #30
 8008068:	b2da      	uxtb	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008072:	0e9b      	lsrs	r3, r3, #26
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 030f 	and.w	r3, r3, #15
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008084:	0e1b      	lsrs	r3, r3, #24
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	b2da      	uxtb	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008096:	0c1b      	lsrs	r3, r3, #16
 8008098:	b2da      	uxtb	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080b8:	0d1b      	lsrs	r3, r3, #20
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080c4:	0c1b      	lsrs	r3, r3, #16
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080d6:	0bdb      	lsrs	r3, r3, #15
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080e8:	0b9b      	lsrs	r3, r3, #14
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080fa:	0b5b      	lsrs	r3, r3, #13
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	b2da      	uxtb	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800810c:	0b1b      	lsrs	r3, r3, #12
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	b2da      	uxtb	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2200      	movs	r2, #0
 800811e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008124:	2b00      	cmp	r3, #0
 8008126:	d163      	bne.n	80081f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800812c:	009a      	lsls	r2, r3, #2
 800812e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008132:	4013      	ands	r3, r2
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008138:	0f92      	lsrs	r2, r2, #30
 800813a:	431a      	orrs	r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008144:	0edb      	lsrs	r3, r3, #27
 8008146:	b2db      	uxtb	r3, r3
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	b2da      	uxtb	r2, r3
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008156:	0e1b      	lsrs	r3, r3, #24
 8008158:	b2db      	uxtb	r3, r3
 800815a:	f003 0307 	and.w	r3, r3, #7
 800815e:	b2da      	uxtb	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008168:	0d5b      	lsrs	r3, r3, #21
 800816a:	b2db      	uxtb	r3, r3
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	b2da      	uxtb	r2, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800817a:	0c9b      	lsrs	r3, r3, #18
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	b2da      	uxtb	r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800818c:	0bdb      	lsrs	r3, r3, #15
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	b2da      	uxtb	r2, r3
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	7e1b      	ldrb	r3, [r3, #24]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	3302      	adds	r3, #2
 80081b0:	2201      	movs	r2, #1
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80081ba:	fb03 f202 	mul.w	r2, r3, r2
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	7a1b      	ldrb	r3, [r3, #8]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	2201      	movs	r2, #1
 80081ce:	409a      	lsls	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80081dc:	0a52      	lsrs	r2, r2, #9
 80081de:	fb03 f202 	mul.w	r2, r3, r2
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80081ee:	e031      	b.n	8008254 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d11d      	bne.n	8008234 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008206:	0c1b      	lsrs	r3, r3, #16
 8008208:	431a      	orrs	r2, r3
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	3301      	adds	r3, #1
 8008214:	029a      	lsls	r2, r3, #10
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008228:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	661a      	str	r2, [r3, #96]	@ 0x60
 8008232:	e00f      	b.n	8008254 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a58      	ldr	r2, [pc, #352]	@ (800839c <HAL_SD_GetCardCSD+0x344>)
 800823a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e09d      	b.n	8008390 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008258:	0b9b      	lsrs	r3, r3, #14
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	b2da      	uxtb	r2, r3
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800826a:	09db      	lsrs	r3, r3, #7
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008282:	b2da      	uxtb	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800828c:	0fdb      	lsrs	r3, r3, #31
 800828e:	b2da      	uxtb	r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008298:	0f5b      	lsrs	r3, r3, #29
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f003 0303 	and.w	r3, r3, #3
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082aa:	0e9b      	lsrs	r3, r3, #26
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082bc:	0d9b      	lsrs	r3, r3, #22
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ce:	0d5b      	lsrs	r3, r3, #21
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ea:	0c1b      	lsrs	r3, r3, #16
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082fe:	0bdb      	lsrs	r3, r3, #15
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	b2da      	uxtb	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008312:	0b9b      	lsrs	r3, r3, #14
 8008314:	b2db      	uxtb	r3, r3
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	b2da      	uxtb	r2, r3
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008326:	0b5b      	lsrs	r3, r3, #13
 8008328:	b2db      	uxtb	r3, r3
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	b2da      	uxtb	r2, r3
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800833a:	0b1b      	lsrs	r3, r3, #12
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	b2da      	uxtb	r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800834e:	0a9b      	lsrs	r3, r3, #10
 8008350:	b2db      	uxtb	r3, r3
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	b2da      	uxtb	r2, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008362:	0a1b      	lsrs	r3, r3, #8
 8008364:	b2db      	uxtb	r3, r3
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	b2da      	uxtb	r2, r3
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008376:	085b      	lsrs	r3, r3, #1
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800837e:	b2da      	uxtb	r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	004005ff 	.word	0x004005ff

080083a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80083f8:	b5b0      	push	{r4, r5, r7, lr}
 80083fa:	b08e      	sub	sp, #56	@ 0x38
 80083fc:	af04      	add	r7, sp, #16
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2203      	movs	r2, #3
 800840c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008414:	2b03      	cmp	r3, #3
 8008416:	d02e      	beq.n	8008476 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800841e:	d106      	bne.n	800842e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	639a      	str	r2, [r3, #56]	@ 0x38
 800842c:	e029      	b.n	8008482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008434:	d10a      	bne.n	800844c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fb2a 	bl	8008a90 <SD_WideBus_Enable>
 800843c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	639a      	str	r2, [r3, #56]	@ 0x38
 800844a:	e01a      	b.n	8008482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fb67 	bl	8008b26 <SD_WideBus_Disable>
 8008458:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	639a      	str	r2, [r3, #56]	@ 0x38
 8008466:	e00c      	b.n	8008482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	639a      	str	r2, [r3, #56]	@ 0x38
 8008474:	e005      	b.n	8008482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a26      	ldr	r2, [pc, #152]	@ (8008528 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008490:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084a0:	e01f      	b.n	80084e2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681d      	ldr	r5, [r3, #0]
 80084c8:	466c      	mov	r4, sp
 80084ca:	f107 0314 	add.w	r3, r7, #20
 80084ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80084d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084d6:	f107 0308 	add.w	r3, r7, #8
 80084da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084dc:	4628      	mov	r0, r5
 80084de:	f002 fa83 	bl	800a9e8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80084ea:	4618      	mov	r0, r3
 80084ec:	f002 fb57 	bl	800ab9e <SDMMC_CmdBlockLength>
 80084f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00c      	beq.n	8008512 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a0a      	ldr	r2, [pc, #40]	@ (8008528 <HAL_SD_ConfigWideBusOperation+0x130>)
 80084fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800851a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800851e:	4618      	mov	r0, r3
 8008520:	3728      	adds	r7, #40	@ 0x28
 8008522:	46bd      	mov	sp, r7
 8008524:	bdb0      	pop	{r4, r5, r7, pc}
 8008526:	bf00      	nop
 8008528:	004005ff 	.word	0x004005ff

0800852c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa7e 	bl	8008a40 <SD_SendStatus>
 8008544:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	431a      	orrs	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	0a5b      	lsrs	r3, r3, #9
 800855c:	f003 030f 	and.w	r3, r3, #15
 8008560:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008562:	693b      	ldr	r3, [r7, #16]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008578:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008588:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800858a:	bf00      	nop
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a8:	2b82      	cmp	r3, #130	@ 0x82
 80085aa:	d111      	bne.n	80085d0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f002 fb9f 	bl	800acf4 <SDMMC_CmdStopTransfer>
 80085b6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	431a      	orrs	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff fd3a 	bl	8008044 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0208 	bic.w	r2, r2, #8
 80085de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80085e8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f003 f807 	bl	800b60c <HAL_SD_RxCpltCallback>
#endif
}
 80085fe:	bf00      	nop
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008614:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fb f8fe 	bl	8003818 <HAL_DMA_GetError>
 800861c:	4603      	mov	r3, r0
 800861e:	2b02      	cmp	r3, #2
 8008620:	d03e      	beq.n	80086a0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008628:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800862e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008630:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d002      	beq.n	800863e <SD_DMAError+0x36>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d12d      	bne.n	800869a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a19      	ldr	r2, [pc, #100]	@ (80086a8 <SD_DMAError+0xa0>)
 8008644:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008654:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008662:	6978      	ldr	r0, [r7, #20]
 8008664:	f7ff ff62 	bl	800852c <HAL_SD_GetCardState>
 8008668:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b06      	cmp	r3, #6
 800866e:	d002      	beq.n	8008676 <SD_DMAError+0x6e>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b05      	cmp	r3, #5
 8008674:	d10a      	bne.n	800868c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f002 fb3a 	bl	800acf4 <SDMMC_CmdStopTransfer>
 8008680:	4602      	mov	r2, r0
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008686:	431a      	orrs	r2, r3
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2200      	movs	r2, #0
 8008698:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800869a:	6978      	ldr	r0, [r7, #20]
 800869c:	f7ff fcd2 	bl	8008044 <HAL_SD_ErrorCallback>
#endif
  }
}
 80086a0:	bf00      	nop
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	004005ff 	.word	0x004005ff

080086ac <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f240 523a 	movw	r2, #1338	@ 0x53a
 80086c2:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f7ff ff31 	bl	800852c <HAL_SD_GetCardState>
 80086ca:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b06      	cmp	r3, #6
 80086de:	d002      	beq.n	80086e6 <SD_DMATxAbort+0x3a>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b05      	cmp	r3, #5
 80086e4:	d10a      	bne.n	80086fc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f002 fb02 	bl	800acf4 <SDMMC_CmdStopTransfer>
 80086f0:	4602      	mov	r2, r0
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f6:	431a      	orrs	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008700:	2b00      	cmp	r3, #0
 8008702:	d103      	bne.n	800870c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f002 ff6d 	bl	800b5e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800870a:	e002      	b.n	8008712 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f7ff fc99 	bl	8008044 <HAL_SD_ErrorCallback>
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008726:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008730:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7ff fefa 	bl	800852c <HAL_SD_GetCardState>
 8008738:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2b06      	cmp	r3, #6
 800874c:	d002      	beq.n	8008754 <SD_DMARxAbort+0x3a>
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b05      	cmp	r3, #5
 8008752:	d10a      	bne.n	800876a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4618      	mov	r0, r3
 800875a:	f002 facb 	bl	800acf4 <SDMMC_CmdStopTransfer>
 800875e:	4602      	mov	r2, r0
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008764:	431a      	orrs	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876e:	2b00      	cmp	r3, #0
 8008770:	d103      	bne.n	800877a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f002 ff36 	bl	800b5e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008778:	e002      	b.n	8008780 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f7ff fc62 	bl	8008044 <HAL_SD_ErrorCallback>
}
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008788:	b5b0      	push	{r4, r5, r7, lr}
 800878a:	b094      	sub	sp, #80	@ 0x50
 800878c:	af04      	add	r7, sp, #16
 800878e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008790:	2301      	movs	r3, #1
 8008792:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4618      	mov	r0, r3
 800879a:	f002 f97c 	bl	800aa96 <SDIO_GetPowerState>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80087a8:	e0b8      	b.n	800891c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d02f      	beq.n	8008812 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f002 fba6 	bl	800af08 <SDMMC_CmdSendCID>
 80087bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <SD_InitCard+0x40>
    {
      return errorstate;
 80087c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c6:	e0a9      	b.n	800891c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f002 f9a6 	bl	800ab20 <SDIO_GetResponse>
 80087d4:	4602      	mov	r2, r0
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2104      	movs	r1, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f002 f99d 	bl	800ab20 <SDIO_GetResponse>
 80087e6:	4602      	mov	r2, r0
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2108      	movs	r1, #8
 80087f2:	4618      	mov	r0, r3
 80087f4:	f002 f994 	bl	800ab20 <SDIO_GetResponse>
 80087f8:	4602      	mov	r2, r0
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	210c      	movs	r1, #12
 8008804:	4618      	mov	r0, r3
 8008806:	f002 f98b 	bl	800ab20 <SDIO_GetResponse>
 800880a:	4602      	mov	r2, r0
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008816:	2b03      	cmp	r3, #3
 8008818:	d00d      	beq.n	8008836 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f107 020e 	add.w	r2, r7, #14
 8008822:	4611      	mov	r1, r2
 8008824:	4618      	mov	r0, r3
 8008826:	f002 fbac 	bl	800af82 <SDMMC_CmdSetRelAdd>
 800882a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800882c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <SD_InitCard+0xae>
    {
      return errorstate;
 8008832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008834:	e072      	b.n	800891c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800883a:	2b03      	cmp	r3, #3
 800883c:	d036      	beq.n	80088ac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800883e:	89fb      	ldrh	r3, [r7, #14]
 8008840:	461a      	mov	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	4619      	mov	r1, r3
 8008852:	4610      	mov	r0, r2
 8008854:	f002 fb76 	bl	800af44 <SDMMC_CmdSendCSD>
 8008858:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800885a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008862:	e05b      	b.n	800891c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f002 f958 	bl	800ab20 <SDIO_GetResponse>
 8008870:	4602      	mov	r2, r0
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2104      	movs	r1, #4
 800887c:	4618      	mov	r0, r3
 800887e:	f002 f94f 	bl	800ab20 <SDIO_GetResponse>
 8008882:	4602      	mov	r2, r0
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2108      	movs	r1, #8
 800888e:	4618      	mov	r0, r3
 8008890:	f002 f946 	bl	800ab20 <SDIO_GetResponse>
 8008894:	4602      	mov	r2, r0
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	210c      	movs	r1, #12
 80088a0:	4618      	mov	r0, r3
 80088a2:	f002 f93d 	bl	800ab20 <SDIO_GetResponse>
 80088a6:	4602      	mov	r2, r0
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2104      	movs	r1, #4
 80088b2:	4618      	mov	r0, r3
 80088b4:	f002 f934 	bl	800ab20 <SDIO_GetResponse>
 80088b8:	4603      	mov	r3, r0
 80088ba:	0d1a      	lsrs	r2, r3, #20
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80088c0:	f107 0310 	add.w	r3, r7, #16
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff fbc6 	bl	8008058 <HAL_SD_GetCardCSD>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80088d6:	e021      	b.n	800891c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6819      	ldr	r1, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e0:	041b      	lsls	r3, r3, #16
 80088e2:	2200      	movs	r2, #0
 80088e4:	461c      	mov	r4, r3
 80088e6:	4615      	mov	r5, r2
 80088e8:	4622      	mov	r2, r4
 80088ea:	462b      	mov	r3, r5
 80088ec:	4608      	mov	r0, r1
 80088ee:	f002 fa23 	bl	800ad38 <SDMMC_CmdSelDesel>
 80088f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80088f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <SD_InitCard+0x176>
  {
    return errorstate;
 80088fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088fc:	e00e      	b.n	800891c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681d      	ldr	r5, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	466c      	mov	r4, sp
 8008906:	f103 0210 	add.w	r2, r3, #16
 800890a:	ca07      	ldmia	r2, {r0, r1, r2}
 800890c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008910:	3304      	adds	r3, #4
 8008912:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008914:	4628      	mov	r0, r5
 8008916:	f002 f867 	bl	800a9e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3740      	adds	r7, #64	@ 0x40
 8008920:	46bd      	mov	sp, r7
 8008922:	bdb0      	pop	{r4, r5, r7, pc}

08008924 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	2300      	movs	r3, #0
 8008936:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f002 fa1e 	bl	800ad7e <SDMMC_CmdGoIdleState>
 8008942:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <SD_PowerON+0x2a>
  {
    return errorstate;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	e072      	b.n	8008a34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f002 fa31 	bl	800adba <SDMMC_CmdOperCond>
 8008958:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00d      	beq.n	800897c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f002 fa07 	bl	800ad7e <SDMMC_CmdGoIdleState>
 8008970:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d004      	beq.n	8008982 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	e05b      	b.n	8008a34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008986:	2b01      	cmp	r3, #1
 8008988:	d137      	bne.n	80089fa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2100      	movs	r1, #0
 8008990:	4618      	mov	r0, r3
 8008992:	f002 fa31 	bl	800adf8 <SDMMC_CmdAppCommand>
 8008996:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d02d      	beq.n	80089fa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800899e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80089a2:	e047      	b.n	8008a34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2100      	movs	r1, #0
 80089aa:	4618      	mov	r0, r3
 80089ac:	f002 fa24 	bl	800adf8 <SDMMC_CmdAppCommand>
 80089b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <SD_PowerON+0x98>
    {
      return errorstate;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	e03b      	b.n	8008a34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	491e      	ldr	r1, [pc, #120]	@ (8008a3c <SD_PowerON+0x118>)
 80089c2:	4618      	mov	r0, r3
 80089c4:	f002 fa3a 	bl	800ae3c <SDMMC_CmdAppOperCommand>
 80089c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80089d4:	e02e      	b.n	8008a34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2100      	movs	r1, #0
 80089dc:	4618      	mov	r0, r3
 80089de:	f002 f89f 	bl	800ab20 <SDIO_GetResponse>
 80089e2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	0fdb      	lsrs	r3, r3, #31
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d101      	bne.n	80089f0 <SD_PowerON+0xcc>
 80089ec:	2301      	movs	r3, #1
 80089ee:	e000      	b.n	80089f2 <SD_PowerON+0xce>
 80089f0:	2300      	movs	r3, #0
 80089f2:	613b      	str	r3, [r7, #16]

    count++;
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d802      	bhi.n	8008a0a <SD_PowerON+0xe6>
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0cc      	beq.n	80089a4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d902      	bls.n	8008a1a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a18:	e00c      	b.n	8008a34 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	645a      	str	r2, [r3, #68]	@ 0x44
 8008a2a:	e002      	b.n	8008a32 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	c1100000 	.word	0xc1100000

08008a40 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a54:	e018      	b.n	8008a88 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a5e:	041b      	lsls	r3, r3, #16
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f002 faae 	bl	800afc4 <SDMMC_CmdSendStatus>
 8008a68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	e009      	b.n	8008a88 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f002 f850 	bl	800ab20 <SDIO_GetResponse>
 8008a80:	4602      	mov	r2, r0
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f002 f83a 	bl	800ab20 <SDIO_GetResponse>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ab2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ab6:	d102      	bne.n	8008abe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ab8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008abc:	e02f      	b.n	8008b1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008abe:	f107 030c 	add.w	r3, r7, #12
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f879 	bl	8008bbc <SD_FindSCR>
 8008aca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	e023      	b.n	8008b1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01c      	beq.n	8008b1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae8:	041b      	lsls	r3, r3, #16
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f002 f983 	bl	800adf8 <SDMMC_CmdAppCommand>
 8008af2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	e00f      	b.n	8008b1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2102      	movs	r1, #2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f002 f9bc 	bl	800ae82 <SDMMC_CmdBusWidth>
 8008b0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	e003      	b.n	8008b1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e001      	b.n	8008b1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
 8008b32:	2300      	movs	r3, #0
 8008b34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 ffef 	bl	800ab20 <SDIO_GetResponse>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b4c:	d102      	bne.n	8008b54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b52:	e02f      	b.n	8008bb4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b54:	f107 030c 	add.w	r3, r7, #12
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f82e 	bl	8008bbc <SD_FindSCR>
 8008b60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	e023      	b.n	8008bb4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d01c      	beq.n	8008bb0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b7e:	041b      	lsls	r3, r3, #16
 8008b80:	4619      	mov	r1, r3
 8008b82:	4610      	mov	r0, r2
 8008b84:	f002 f938 	bl	800adf8 <SDMMC_CmdAppCommand>
 8008b88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	e00f      	b.n	8008bb4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f002 f971 	bl	800ae82 <SDMMC_CmdBusWidth>
 8008ba0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	e003      	b.n	8008bb4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008bac:	2300      	movs	r3, #0
 8008bae:	e001      	b.n	8008bb4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bb0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008bbc:	b590      	push	{r4, r7, lr}
 8008bbe:	b08f      	sub	sp, #60	@ 0x3c
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bc6:	f7fa fc1d 	bl	8003404 <HAL_GetTick>
 8008bca:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60bb      	str	r3, [r7, #8]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2108      	movs	r1, #8
 8008be2:	4618      	mov	r0, r3
 8008be4:	f001 ffdb 	bl	800ab9e <SDMMC_CmdBlockLength>
 8008be8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	e0b9      	b.n	8008d68 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bfc:	041b      	lsls	r3, r3, #16
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f002 f8f9 	bl	800adf8 <SDMMC_CmdAppCommand>
 8008c06:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c10:	e0aa      	b.n	8008d68 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c12:	f04f 33ff 	mov.w	r3, #4294967295
 8008c16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c18:	2308      	movs	r3, #8
 8008c1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008c1c:	2330      	movs	r3, #48	@ 0x30
 8008c1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008c20:	2302      	movs	r3, #2
 8008c22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f107 0210 	add.w	r2, r7, #16
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 ff85 	bl	800ab46 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f002 f940 	bl	800aec6 <SDMMC_CmdSendSCR>
 8008c46:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d02a      	beq.n	8008ca4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c50:	e08a      	b.n	8008d68 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00f      	beq.n	8008c80 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	f107 0208 	add.w	r2, r7, #8
 8008c6c:	18d4      	adds	r4, r2, r3
 8008c6e:	4608      	mov	r0, r1
 8008c70:	f001 fee5 	bl	800aa3e <SDIO_ReadFIFO>
 8008c74:	4603      	mov	r3, r0
 8008c76:	6023      	str	r3, [r4, #0]
      index++;
 8008c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c7e:	e006      	b.n	8008c8e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d012      	beq.n	8008cb4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008c8e:	f7fa fbb9 	bl	8003404 <HAL_GetTick>
 8008c92:	4602      	mov	r2, r0
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9c:	d102      	bne.n	8008ca4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ca2:	e061      	b.n	8008d68 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008caa:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0cf      	beq.n	8008c52 <SD_FindSCR+0x96>
 8008cb2:	e000      	b.n	8008cb6 <SD_FindSCR+0xfa>
      break;
 8008cb4:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <SD_FindSCR+0x116>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2208      	movs	r2, #8
 8008cd8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008cda:	2308      	movs	r3, #8
 8008cdc:	e044      	b.n	8008d68 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e037      	b.n	8008d68 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d0e:	2320      	movs	r3, #32
 8008d10:	e02a      	b.n	8008d68 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008d1a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	061a      	lsls	r2, r3, #24
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d28:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	0a1b      	lsrs	r3, r3, #8
 8008d2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	0e1b      	lsrs	r3, r3, #24
 8008d38:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3c:	601a      	str	r2, [r3, #0]
    scr++;
 8008d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d40:	3304      	adds	r3, #4
 8008d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	061a      	lsls	r2, r3, #24
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	021b      	lsls	r3, r3, #8
 8008d4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d50:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	0a1b      	lsrs	r3, r3, #8
 8008d56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	0e1b      	lsrs	r3, r3, #24
 8008d60:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d64:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	373c      	adds	r7, #60	@ 0x3c
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd90      	pop	{r4, r7, pc}

08008d70 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d82:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d03f      	beq.n	8008e0a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	e033      	b.n	8008df8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f001 fe52 	bl	800aa3e <SDIO_ReadFIFO>
 8008d9a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3301      	adds	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	0a1b      	lsrs	r3, r3, #8
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	0c1b      	lsrs	r3, r3, #16
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	0e1b      	lsrs	r3, r3, #24
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	3301      	adds	r3, #1
 8008dea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	3301      	adds	r3, #1
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2b07      	cmp	r3, #7
 8008dfc:	d9c8      	bls.n	8008d90 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008e0a:	bf00      	nop
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b086      	sub	sp, #24
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e24:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d043      	beq.n	8008eb4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	e037      	b.n	8008ea2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	021a      	lsls	r2, r3, #8
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	041a      	lsls	r2, r3, #16
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	061a      	lsls	r2, r3, #24
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f107 0208 	add.w	r2, r7, #8
 8008e94:	4611      	mov	r1, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f001 fdde 	bl	800aa58 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2b07      	cmp	r3, #7
 8008ea6:	d9c4      	bls.n	8008e32 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008eb4:	bf00      	nop
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e07b      	b.n	8008fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d108      	bne.n	8008ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ede:	d009      	beq.n	8008ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	61da      	str	r2, [r3, #28]
 8008ee6:	e005      	b.n	8008ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7f9 ffb2 	bl	8002e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	431a      	orrs	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f64:	431a      	orrs	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f78:	ea42 0103 	orr.w	r1, r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	0c1b      	lsrs	r3, r3, #16
 8008f92:	f003 0104 	and.w	r1, r3, #4
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9a:	f003 0210 	and.w	r2, r3, #16
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69da      	ldr	r2, [r3, #28]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b088      	sub	sp, #32
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	603b      	str	r3, [r7, #0]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fde:	f7fa fa11 	bl	8003404 <HAL_GetTick>
 8008fe2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008fe4:	88fb      	ldrh	r3, [r7, #6]
 8008fe6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d001      	beq.n	8008ff8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e12a      	b.n	800924e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <HAL_SPI_Transmit+0x36>
 8008ffe:	88fb      	ldrh	r3, [r7, #6]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e122      	b.n	800924e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <HAL_SPI_Transmit+0x48>
 8009012:	2302      	movs	r3, #2
 8009014:	e11b      	b.n	800924e <HAL_SPI_Transmit+0x280>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2203      	movs	r2, #3
 8009022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	88fa      	ldrh	r2, [r7, #6]
 8009036:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	88fa      	ldrh	r2, [r7, #6]
 800903c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009064:	d10f      	bne.n	8009086 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009074:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009084:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009090:	2b40      	cmp	r3, #64	@ 0x40
 8009092:	d007      	beq.n	80090a4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090ac:	d152      	bne.n	8009154 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <HAL_SPI_Transmit+0xee>
 80090b6:	8b7b      	ldrh	r3, [r7, #26]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d145      	bne.n	8009148 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c0:	881a      	ldrh	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090cc:	1c9a      	adds	r2, r3, #2
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80090e0:	e032      	b.n	8009148 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d112      	bne.n	8009116 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f4:	881a      	ldrh	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009100:	1c9a      	adds	r2, r3, #2
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800910a:	b29b      	uxth	r3, r3
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009114:	e018      	b.n	8009148 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009116:	f7fa f975 	bl	8003404 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	429a      	cmp	r2, r3
 8009124:	d803      	bhi.n	800912e <HAL_SPI_Transmit+0x160>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912c:	d102      	bne.n	8009134 <HAL_SPI_Transmit+0x166>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d109      	bne.n	8009148 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e082      	b.n	800924e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1c7      	bne.n	80090e2 <HAL_SPI_Transmit+0x114>
 8009152:	e053      	b.n	80091fc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <HAL_SPI_Transmit+0x194>
 800915c:	8b7b      	ldrh	r3, [r7, #26]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d147      	bne.n	80091f2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	330c      	adds	r3, #12
 800916c:	7812      	ldrb	r2, [r2, #0]
 800916e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800917e:	b29b      	uxth	r3, r3
 8009180:	3b01      	subs	r3, #1
 8009182:	b29a      	uxth	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009188:	e033      	b.n	80091f2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b02      	cmp	r3, #2
 8009196:	d113      	bne.n	80091c0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	330c      	adds	r3, #12
 80091a2:	7812      	ldrb	r2, [r2, #0]
 80091a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80091be:	e018      	b.n	80091f2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091c0:	f7fa f920 	bl	8003404 <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d803      	bhi.n	80091d8 <HAL_SPI_Transmit+0x20a>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d102      	bne.n	80091de <HAL_SPI_Transmit+0x210>
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d109      	bne.n	80091f2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e02d      	b.n	800924e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1c6      	bne.n	800918a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f000 f9cf 	bl	80095a4 <SPI_EndRxTxTransaction>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2220      	movs	r2, #32
 8009210:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10a      	bne.n	8009230 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800921a:	2300      	movs	r3, #0
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	617b      	str	r3, [r7, #20]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	617b      	str	r3, [r7, #20]
 800922e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e000      	b.n	800924e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800924c:	2300      	movs	r3, #0
  }
}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	099b      	lsrs	r3, r3, #6
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10f      	bne.n	800929c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	099b      	lsrs	r3, r3, #6
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d004      	beq.n	800929c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
    return;
 800929a:	e0d7      	b.n	800944c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	085b      	lsrs	r3, r3, #1
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00a      	beq.n	80092be <HAL_SPI_IRQHandler+0x66>
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	09db      	lsrs	r3, r3, #7
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d004      	beq.n	80092be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	4798      	blx	r3
    return;
 80092bc:	e0c6      	b.n	800944c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	095b      	lsrs	r3, r3, #5
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10c      	bne.n	80092e4 <HAL_SPI_IRQHandler+0x8c>
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	099b      	lsrs	r3, r3, #6
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	0a1b      	lsrs	r3, r3, #8
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 80b4 	beq.w	800944c <HAL_SPI_IRQHandler+0x1f4>
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	095b      	lsrs	r3, r3, #5
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 80ad 	beq.w	800944c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	099b      	lsrs	r3, r3, #6
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d023      	beq.n	8009346 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b03      	cmp	r3, #3
 8009308:	d011      	beq.n	800932e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800930e:	f043 0204 	orr.w	r2, r3, #4
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	617b      	str	r3, [r7, #20]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	e00b      	b.n	8009346 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800932e:	2300      	movs	r3, #0
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	613b      	str	r3, [r7, #16]
 8009342:	693b      	ldr	r3, [r7, #16]
        return;
 8009344:	e082      	b.n	800944c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	095b      	lsrs	r3, r3, #5
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d014      	beq.n	800937c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009356:	f043 0201 	orr.w	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	0a1b      	lsrs	r3, r3, #8
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00c      	beq.n	80093a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800938c:	f043 0208 	orr.w	r2, r3, #8
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009394:	2300      	movs	r3, #0
 8009396:	60bb      	str	r3, [r7, #8]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	60bb      	str	r3, [r7, #8]
 80093a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d04f      	beq.n	800944a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	f003 0302 	and.w	r3, r3, #2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <HAL_SPI_IRQHandler+0x17e>
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d034      	beq.n	8009440 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0203 	bic.w	r2, r2, #3
 80093e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d011      	beq.n	8009412 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093f2:	4a18      	ldr	r2, [pc, #96]	@ (8009454 <HAL_SPI_IRQHandler+0x1fc>)
 80093f4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fa f9dc 	bl	80037b8 <HAL_DMA_Abort_IT>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800940a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009416:	2b00      	cmp	r3, #0
 8009418:	d016      	beq.n	8009448 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800941e:	4a0d      	ldr	r2, [pc, #52]	@ (8009454 <HAL_SPI_IRQHandler+0x1fc>)
 8009420:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009426:	4618      	mov	r0, r3
 8009428:	f7fa f9c6 	bl	80037b8 <HAL_DMA_Abort_IT>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00a      	beq.n	8009448 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800943e:	e003      	b.n	8009448 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f809 	bl	8009458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009446:	e000      	b.n	800944a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009448:	bf00      	nop
    return;
 800944a:	bf00      	nop
  }
}
 800944c:	3720      	adds	r7, #32
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	0800946d 	.word	0x0800946d

08009458 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7ff ffe6 	bl	8009458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800948c:	bf00      	nop
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	4613      	mov	r3, r2
 80094a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80094a4:	f7f9 ffae 	bl	8003404 <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ac:	1a9b      	subs	r3, r3, r2
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	4413      	add	r3, r2
 80094b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094b4:	f7f9 ffa6 	bl	8003404 <HAL_GetTick>
 80094b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094ba:	4b39      	ldr	r3, [pc, #228]	@ (80095a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	015b      	lsls	r3, r3, #5
 80094c0:	0d1b      	lsrs	r3, r3, #20
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	fb02 f303 	mul.w	r3, r2, r3
 80094c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094ca:	e055      	b.n	8009578 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d2:	d051      	beq.n	8009578 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094d4:	f7f9 ff96 	bl	8003404 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d902      	bls.n	80094ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d13d      	bne.n	8009566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80094f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009502:	d111      	bne.n	8009528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800950c:	d004      	beq.n	8009518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009516:	d107      	bne.n	8009528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009530:	d10f      	bne.n	8009552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e018      	b.n	8009598 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	61fb      	str	r3, [r7, #28]
 8009570:	e002      	b.n	8009578 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	3b01      	subs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689a      	ldr	r2, [r3, #8]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	4013      	ands	r3, r2
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	429a      	cmp	r2, r3
 8009586:	bf0c      	ite	eq
 8009588:	2301      	moveq	r3, #1
 800958a:	2300      	movne	r3, #0
 800958c:	b2db      	uxtb	r3, r3
 800958e:	461a      	mov	r2, r3
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	429a      	cmp	r2, r3
 8009594:	d19a      	bne.n	80094cc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3720      	adds	r7, #32
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	2000006c 	.word	0x2000006c

080095a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2201      	movs	r2, #1
 80095b8:	2102      	movs	r1, #2
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff ff6a 	bl	8009494 <SPI_WaitFlagStateUntilTimeout>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d007      	beq.n	80095d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ca:	f043 0220 	orr.w	r2, r3, #32
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e032      	b.n	800963c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80095d6:	4b1b      	ldr	r3, [pc, #108]	@ (8009644 <SPI_EndRxTxTransaction+0xa0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a1b      	ldr	r2, [pc, #108]	@ (8009648 <SPI_EndRxTxTransaction+0xa4>)
 80095dc:	fba2 2303 	umull	r2, r3, r2, r3
 80095e0:	0d5b      	lsrs	r3, r3, #21
 80095e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80095e6:	fb02 f303 	mul.w	r3, r2, r3
 80095ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095f4:	d112      	bne.n	800961c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2200      	movs	r2, #0
 80095fe:	2180      	movs	r1, #128	@ 0x80
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff ff47 	bl	8009494 <SPI_WaitFlagStateUntilTimeout>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d016      	beq.n	800963a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009610:	f043 0220 	orr.w	r2, r3, #32
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e00f      	b.n	800963c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	3b01      	subs	r3, #1
 8009626:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009632:	2b80      	cmp	r3, #128	@ 0x80
 8009634:	d0f2      	beq.n	800961c <SPI_EndRxTxTransaction+0x78>
 8009636:	e000      	b.n	800963a <SPI_EndRxTxTransaction+0x96>
        break;
 8009638:	bf00      	nop
  }

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	2000006c 	.word	0x2000006c
 8009648:	165e9f81 	.word	0x165e9f81

0800964c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e041      	b.n	80096e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d106      	bne.n	8009678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f839 	bl	80096ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3304      	adds	r3, #4
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f000 f9c0 	bl	8009a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
	...

08009700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b01      	cmp	r3, #1
 8009712:	d001      	beq.n	8009718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e04e      	b.n	80097b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2202      	movs	r2, #2
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0201 	orr.w	r2, r2, #1
 800972e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a23      	ldr	r2, [pc, #140]	@ (80097c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d022      	beq.n	8009780 <HAL_TIM_Base_Start_IT+0x80>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009742:	d01d      	beq.n	8009780 <HAL_TIM_Base_Start_IT+0x80>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a1f      	ldr	r2, [pc, #124]	@ (80097c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d018      	beq.n	8009780 <HAL_TIM_Base_Start_IT+0x80>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a1e      	ldr	r2, [pc, #120]	@ (80097cc <HAL_TIM_Base_Start_IT+0xcc>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d013      	beq.n	8009780 <HAL_TIM_Base_Start_IT+0x80>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a1c      	ldr	r2, [pc, #112]	@ (80097d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d00e      	beq.n	8009780 <HAL_TIM_Base_Start_IT+0x80>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a1b      	ldr	r2, [pc, #108]	@ (80097d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d009      	beq.n	8009780 <HAL_TIM_Base_Start_IT+0x80>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a19      	ldr	r2, [pc, #100]	@ (80097d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d004      	beq.n	8009780 <HAL_TIM_Base_Start_IT+0x80>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a18      	ldr	r2, [pc, #96]	@ (80097dc <HAL_TIM_Base_Start_IT+0xdc>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d111      	bne.n	80097a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b06      	cmp	r3, #6
 8009790:	d010      	beq.n	80097b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f042 0201 	orr.w	r2, r2, #1
 80097a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097a2:	e007      	b.n	80097b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0201 	orr.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	40010000 	.word	0x40010000
 80097c8:	40000400 	.word	0x40000400
 80097cc:	40000800 	.word	0x40000800
 80097d0:	40000c00 	.word	0x40000c00
 80097d4:	40010400 	.word	0x40010400
 80097d8:	40014000 	.word	0x40014000
 80097dc:	40001800 	.word	0x40001800

080097e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d020      	beq.n	8009844 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	2b00      	cmp	r3, #0
 800980a:	d01b      	beq.n	8009844 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f06f 0202 	mvn.w	r2, #2
 8009814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f8d2 	bl	80099d4 <HAL_TIM_IC_CaptureCallback>
 8009830:	e005      	b.n	800983e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f8c4 	bl	80099c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f8d5 	bl	80099e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f003 0304 	and.w	r3, r3, #4
 800984a:	2b00      	cmp	r3, #0
 800984c:	d020      	beq.n	8009890 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01b      	beq.n	8009890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f06f 0204 	mvn.w	r2, #4
 8009860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2202      	movs	r2, #2
 8009866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f8ac 	bl	80099d4 <HAL_TIM_IC_CaptureCallback>
 800987c:	e005      	b.n	800988a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f89e 	bl	80099c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f8af 	bl	80099e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	2b00      	cmp	r3, #0
 8009898:	d020      	beq.n	80098dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d01b      	beq.n	80098dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f06f 0208 	mvn.w	r2, #8
 80098ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2204      	movs	r2, #4
 80098b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f886 	bl	80099d4 <HAL_TIM_IC_CaptureCallback>
 80098c8:	e005      	b.n	80098d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f878 	bl	80099c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f889 	bl	80099e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f003 0310 	and.w	r3, r3, #16
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d020      	beq.n	8009928 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d01b      	beq.n	8009928 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f06f 0210 	mvn.w	r2, #16
 80098f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2208      	movs	r2, #8
 80098fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800990a:	2b00      	cmp	r3, #0
 800990c:	d003      	beq.n	8009916 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f860 	bl	80099d4 <HAL_TIM_IC_CaptureCallback>
 8009914:	e005      	b.n	8009922 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f852 	bl	80099c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f863 	bl	80099e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00c      	beq.n	800994c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	d007      	beq.n	800994c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f06f 0201 	mvn.w	r2, #1
 8009944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7f9 f96a 	bl	8002c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00c      	beq.n	8009970 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800995c:	2b00      	cmp	r3, #0
 800995e:	d007      	beq.n	8009970 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f900 	bl	8009b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00c      	beq.n	8009994 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009980:	2b00      	cmp	r3, #0
 8009982:	d007      	beq.n	8009994 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800998c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f834 	bl	80099fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f003 0320 	and.w	r3, r3, #32
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00c      	beq.n	80099b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d007      	beq.n	80099b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0220 	mvn.w	r2, #32
 80099b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f8d2 	bl	8009b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a43      	ldr	r2, [pc, #268]	@ (8009b30 <TIM_Base_SetConfig+0x120>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d013      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a2e:	d00f      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a40      	ldr	r2, [pc, #256]	@ (8009b34 <TIM_Base_SetConfig+0x124>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d00b      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a3f      	ldr	r2, [pc, #252]	@ (8009b38 <TIM_Base_SetConfig+0x128>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d007      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a3e      	ldr	r2, [pc, #248]	@ (8009b3c <TIM_Base_SetConfig+0x12c>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d003      	beq.n	8009a50 <TIM_Base_SetConfig+0x40>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a3d      	ldr	r2, [pc, #244]	@ (8009b40 <TIM_Base_SetConfig+0x130>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d108      	bne.n	8009a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a32      	ldr	r2, [pc, #200]	@ (8009b30 <TIM_Base_SetConfig+0x120>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d02b      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a70:	d027      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a2f      	ldr	r2, [pc, #188]	@ (8009b34 <TIM_Base_SetConfig+0x124>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d023      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8009b38 <TIM_Base_SetConfig+0x128>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d01f      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a2d      	ldr	r2, [pc, #180]	@ (8009b3c <TIM_Base_SetConfig+0x12c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d01b      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a2c      	ldr	r2, [pc, #176]	@ (8009b40 <TIM_Base_SetConfig+0x130>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d017      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a2b      	ldr	r2, [pc, #172]	@ (8009b44 <TIM_Base_SetConfig+0x134>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d013      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8009b48 <TIM_Base_SetConfig+0x138>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00f      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a29      	ldr	r2, [pc, #164]	@ (8009b4c <TIM_Base_SetConfig+0x13c>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d00b      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a28      	ldr	r2, [pc, #160]	@ (8009b50 <TIM_Base_SetConfig+0x140>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d007      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a27      	ldr	r2, [pc, #156]	@ (8009b54 <TIM_Base_SetConfig+0x144>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d003      	beq.n	8009ac2 <TIM_Base_SetConfig+0xb2>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a26      	ldr	r2, [pc, #152]	@ (8009b58 <TIM_Base_SetConfig+0x148>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d108      	bne.n	8009ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	689a      	ldr	r2, [r3, #8]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a0e      	ldr	r2, [pc, #56]	@ (8009b30 <TIM_Base_SetConfig+0x120>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d003      	beq.n	8009b02 <TIM_Base_SetConfig+0xf2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a10      	ldr	r2, [pc, #64]	@ (8009b40 <TIM_Base_SetConfig+0x130>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d103      	bne.n	8009b0a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	691a      	ldr	r2, [r3, #16]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f043 0204 	orr.w	r2, r3, #4
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	601a      	str	r2, [r3, #0]
}
 8009b22:	bf00      	nop
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	40010000 	.word	0x40010000
 8009b34:	40000400 	.word	0x40000400
 8009b38:	40000800 	.word	0x40000800
 8009b3c:	40000c00 	.word	0x40000c00
 8009b40:	40010400 	.word	0x40010400
 8009b44:	40014000 	.word	0x40014000
 8009b48:	40014400 	.word	0x40014400
 8009b4c:	40014800 	.word	0x40014800
 8009b50:	40001800 	.word	0x40001800
 8009b54:	40001c00 	.word	0x40001c00
 8009b58:	40002000 	.word	0x40002000

08009b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e042      	b.n	8009c1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d106      	bne.n	8009bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7f9 f9b4 	bl	8002f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2224      	movs	r2, #36	@ 0x24
 8009bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fc99 	bl	800a500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	691a      	ldr	r2, [r3, #16]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695a      	ldr	r2, [r3, #20]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68da      	ldr	r2, [r3, #12]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2220      	movs	r2, #32
 8009c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2220      	movs	r2, #32
 8009c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b0ba      	sub	sp, #232	@ 0xe8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009c50:	2300      	movs	r3, #0
 8009c52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c5a:	f003 030f 	and.w	r3, r3, #15
 8009c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10f      	bne.n	8009c8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c6e:	f003 0320 	and.w	r3, r3, #32
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d009      	beq.n	8009c8a <HAL_UART_IRQHandler+0x66>
 8009c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c7a:	f003 0320 	and.w	r3, r3, #32
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fb7e 	bl	800a384 <UART_Receive_IT>
      return;
 8009c88:	e273      	b.n	800a172 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 80de 	beq.w	8009e50 <HAL_UART_IRQHandler+0x22c>
 8009c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c98:	f003 0301 	and.w	r3, r3, #1
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d106      	bne.n	8009cae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 80d1 	beq.w	8009e50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00b      	beq.n	8009cd2 <HAL_UART_IRQHandler+0xae>
 8009cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d005      	beq.n	8009cd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cca:	f043 0201 	orr.w	r2, r3, #1
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cd6:	f003 0304 	and.w	r3, r3, #4
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00b      	beq.n	8009cf6 <HAL_UART_IRQHandler+0xd2>
 8009cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d005      	beq.n	8009cf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cee:	f043 0202 	orr.w	r2, r3, #2
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cfa:	f003 0302 	and.w	r3, r3, #2
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00b      	beq.n	8009d1a <HAL_UART_IRQHandler+0xf6>
 8009d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d005      	beq.n	8009d1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d12:	f043 0204 	orr.w	r2, r3, #4
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d1e:	f003 0308 	and.w	r3, r3, #8
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d011      	beq.n	8009d4a <HAL_UART_IRQHandler+0x126>
 8009d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d105      	bne.n	8009d3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d005      	beq.n	8009d4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d42:	f043 0208 	orr.w	r2, r3, #8
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 820a 	beq.w	800a168 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d58:	f003 0320 	and.w	r3, r3, #32
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d008      	beq.n	8009d72 <HAL_UART_IRQHandler+0x14e>
 8009d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fb09 	bl	800a384 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d7c:	2b40      	cmp	r3, #64	@ 0x40
 8009d7e:	bf0c      	ite	eq
 8009d80:	2301      	moveq	r3, #1
 8009d82:	2300      	movne	r3, #0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d8e:	f003 0308 	and.w	r3, r3, #8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d103      	bne.n	8009d9e <HAL_UART_IRQHandler+0x17a>
 8009d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d04f      	beq.n	8009e3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa14 	bl	800a1cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dae:	2b40      	cmp	r3, #64	@ 0x40
 8009db0:	d141      	bne.n	8009e36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3314      	adds	r3, #20
 8009db8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3314      	adds	r3, #20
 8009dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009dde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009de2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1d9      	bne.n	8009db2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d013      	beq.n	8009e2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e0a:	4a8a      	ldr	r2, [pc, #552]	@ (800a034 <HAL_UART_IRQHandler+0x410>)
 8009e0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f9 fcd0 	bl	80037b8 <HAL_DMA_Abort_IT>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d016      	beq.n	8009e4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e2c:	e00e      	b.n	8009e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f9b6 	bl	800a1a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e34:	e00a      	b.n	8009e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f9b2 	bl	800a1a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e3c:	e006      	b.n	8009e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f9ae 	bl	800a1a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009e4a:	e18d      	b.n	800a168 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e4c:	bf00      	nop
    return;
 8009e4e:	e18b      	b.n	800a168 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	f040 8167 	bne.w	800a128 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e5e:	f003 0310 	and.w	r3, r3, #16
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 8160 	beq.w	800a128 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e6c:	f003 0310 	and.w	r3, r3, #16
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 8159 	beq.w	800a128 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e76:	2300      	movs	r3, #0
 8009e78:	60bb      	str	r3, [r7, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60bb      	str	r3, [r7, #8]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	60bb      	str	r3, [r7, #8]
 8009e8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e96:	2b40      	cmp	r3, #64	@ 0x40
 8009e98:	f040 80ce 	bne.w	800a038 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ea8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 80a9 	beq.w	800a004 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	f080 80a2 	bcs.w	800a004 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ec6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ed2:	f000 8088 	beq.w	8009fe6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	330c      	adds	r3, #12
 8009edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	330c      	adds	r3, #12
 8009efe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009f02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009f12:	e841 2300 	strex	r3, r2, [r1]
 8009f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1d9      	bne.n	8009ed6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3314      	adds	r3, #20
 8009f28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f2c:	e853 3f00 	ldrex	r3, [r3]
 8009f30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f34:	f023 0301 	bic.w	r3, r3, #1
 8009f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	3314      	adds	r3, #20
 8009f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1e1      	bne.n	8009f22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3314      	adds	r3, #20
 8009f64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f68:	e853 3f00 	ldrex	r3, [r3]
 8009f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3314      	adds	r3, #20
 8009f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f8a:	e841 2300 	strex	r3, r2, [r1]
 8009f8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1e3      	bne.n	8009f5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	330c      	adds	r3, #12
 8009faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fae:	e853 3f00 	ldrex	r3, [r3]
 8009fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fb6:	f023 0310 	bic.w	r3, r3, #16
 8009fba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	330c      	adds	r3, #12
 8009fc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009fc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009fca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fd0:	e841 2300 	strex	r3, r2, [r1]
 8009fd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1e3      	bne.n	8009fa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7f9 fb79 	bl	80036d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f8d9 	bl	800a1b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a002:	e0b3      	b.n	800a16c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a008:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a00c:	429a      	cmp	r2, r3
 800a00e:	f040 80ad 	bne.w	800a16c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a01c:	f040 80a6 	bne.w	800a16c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f8c1 	bl	800a1b4 <HAL_UARTEx_RxEventCallback>
      return;
 800a032:	e09b      	b.n	800a16c <HAL_UART_IRQHandler+0x548>
 800a034:	0800a293 	.word	0x0800a293
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a040:	b29b      	uxth	r3, r3
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 808e 	beq.w	800a170 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 8089 	beq.w	800a170 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	330c      	adds	r3, #12
 800a064:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a074:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	330c      	adds	r3, #12
 800a07e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a082:	647a      	str	r2, [r7, #68]	@ 0x44
 800a084:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a086:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e3      	bne.n	800a05e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3314      	adds	r3, #20
 800a09c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	623b      	str	r3, [r7, #32]
   return(result);
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	f023 0301 	bic.w	r3, r3, #1
 800a0ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3314      	adds	r3, #20
 800a0b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a0ba:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e3      	bne.n	800a096 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	330c      	adds	r3, #12
 800a0e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f023 0310 	bic.w	r3, r3, #16
 800a0f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	330c      	adds	r3, #12
 800a0fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a100:	61fa      	str	r2, [r7, #28]
 800a102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	69b9      	ldr	r1, [r7, #24]
 800a106:	69fa      	ldr	r2, [r7, #28]
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	617b      	str	r3, [r7, #20]
   return(result);
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1e3      	bne.n	800a0dc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a11a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f847 	bl	800a1b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a126:	e023      	b.n	800a170 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a12c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a130:	2b00      	cmp	r3, #0
 800a132:	d009      	beq.n	800a148 <HAL_UART_IRQHandler+0x524>
 800a134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d003      	beq.n	800a148 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f8b7 	bl	800a2b4 <UART_Transmit_IT>
    return;
 800a146:	e014      	b.n	800a172 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00e      	beq.n	800a172 <HAL_UART_IRQHandler+0x54e>
 800a154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d008      	beq.n	800a172 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f8f7 	bl	800a354 <UART_EndTransmit_IT>
    return;
 800a166:	e004      	b.n	800a172 <HAL_UART_IRQHandler+0x54e>
    return;
 800a168:	bf00      	nop
 800a16a:	e002      	b.n	800a172 <HAL_UART_IRQHandler+0x54e>
      return;
 800a16c:	bf00      	nop
 800a16e:	e000      	b.n	800a172 <HAL_UART_IRQHandler+0x54e>
      return;
 800a170:	bf00      	nop
  }
}
 800a172:	37e8      	adds	r7, #232	@ 0xe8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b095      	sub	sp, #84	@ 0x54
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	330c      	adds	r3, #12
 800a1da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1de:	e853 3f00 	ldrex	r3, [r3]
 800a1e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	330c      	adds	r3, #12
 800a1f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1f4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1fc:	e841 2300 	strex	r3, r2, [r1]
 800a200:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e5      	bne.n	800a1d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3314      	adds	r3, #20
 800a20e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	6a3b      	ldr	r3, [r7, #32]
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	61fb      	str	r3, [r7, #28]
   return(result);
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	f023 0301 	bic.w	r3, r3, #1
 800a21e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3314      	adds	r3, #20
 800a226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a228:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a22a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a22e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a230:	e841 2300 	strex	r3, r2, [r1]
 800a234:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e5      	bne.n	800a208 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a240:	2b01      	cmp	r3, #1
 800a242:	d119      	bne.n	800a278 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	330c      	adds	r3, #12
 800a24a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	60bb      	str	r3, [r7, #8]
   return(result);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f023 0310 	bic.w	r3, r3, #16
 800a25a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	330c      	adds	r3, #12
 800a262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a264:	61ba      	str	r2, [r7, #24]
 800a266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	6979      	ldr	r1, [r7, #20]
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	613b      	str	r3, [r7, #16]
   return(result);
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e5      	bne.n	800a244 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2220      	movs	r2, #32
 800a27c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a286:	bf00      	nop
 800a288:	3754      	adds	r7, #84	@ 0x54
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7ff ff7a 	bl	800a1a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ac:	bf00      	nop
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b21      	cmp	r3, #33	@ 0x21
 800a2c6:	d13e      	bne.n	800a346 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2d0:	d114      	bne.n	800a2fc <UART_Transmit_IT+0x48>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d110      	bne.n	800a2fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	1c9a      	adds	r2, r3, #2
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	621a      	str	r2, [r3, #32]
 800a2fa:	e008      	b.n	800a30e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	1c59      	adds	r1, r3, #1
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	6211      	str	r1, [r2, #32]
 800a306:	781a      	ldrb	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a312:	b29b      	uxth	r3, r3
 800a314:	3b01      	subs	r3, #1
 800a316:	b29b      	uxth	r3, r3
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	4619      	mov	r1, r3
 800a31c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10f      	bne.n	800a342 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68da      	ldr	r2, [r3, #12]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a330:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68da      	ldr	r2, [r3, #12]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a340:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	e000      	b.n	800a348 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a346:	2302      	movs	r3, #2
  }
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a36a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff feff 	bl	800a178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08c      	sub	sp, #48	@ 0x30
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a38c:	2300      	movs	r3, #0
 800a38e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b22      	cmp	r3, #34	@ 0x22
 800a39e:	f040 80aa 	bne.w	800a4f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3aa:	d115      	bne.n	800a3d8 <UART_Receive_IT+0x54>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d111      	bne.n	800a3d8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d0:	1c9a      	adds	r2, r3, #2
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	629a      	str	r2, [r3, #40]	@ 0x28
 800a3d6:	e024      	b.n	800a422 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3e6:	d007      	beq.n	800a3f8 <UART_Receive_IT+0x74>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10a      	bne.n	800a406 <UART_Receive_IT+0x82>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d106      	bne.n	800a406 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a402:	701a      	strb	r2, [r3, #0]
 800a404:	e008      	b.n	800a418 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a412:	b2da      	uxtb	r2, r3
 800a414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a416:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a426:	b29b      	uxth	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	4619      	mov	r1, r3
 800a430:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a432:	2b00      	cmp	r3, #0
 800a434:	d15d      	bne.n	800a4f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0220 	bic.w	r2, r2, #32
 800a444:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a454:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	695a      	ldr	r2, [r3, #20]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 0201 	bic.w	r2, r2, #1
 800a464:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d135      	bne.n	800a4e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	330c      	adds	r3, #12
 800a488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	613b      	str	r3, [r7, #16]
   return(result);
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f023 0310 	bic.w	r3, r3, #16
 800a498:	627b      	str	r3, [r7, #36]	@ 0x24
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	330c      	adds	r3, #12
 800a4a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4a2:	623a      	str	r2, [r7, #32]
 800a4a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	69f9      	ldr	r1, [r7, #28]
 800a4a8:	6a3a      	ldr	r2, [r7, #32]
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e5      	bne.n	800a482 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0310 	and.w	r3, r3, #16
 800a4c0:	2b10      	cmp	r3, #16
 800a4c2:	d10a      	bne.n	800a4da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff fe67 	bl	800a1b4 <HAL_UARTEx_RxEventCallback>
 800a4e6:	e002      	b.n	800a4ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff fe4f 	bl	800a18c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e002      	b.n	800a4f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e000      	b.n	800a4f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a4f6:	2302      	movs	r3, #2
  }
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3730      	adds	r7, #48	@ 0x30
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a504:	b0c0      	sub	sp, #256	@ 0x100
 800a506:	af00      	add	r7, sp, #0
 800a508:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a51c:	68d9      	ldr	r1, [r3, #12]
 800a51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	ea40 0301 	orr.w	r3, r0, r1
 800a528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	431a      	orrs	r2, r3
 800a538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	431a      	orrs	r2, r3
 800a540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	4313      	orrs	r3, r2
 800a548:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a558:	f021 010c 	bic.w	r1, r1, #12
 800a55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a566:	430b      	orrs	r3, r1
 800a568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a56a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a57a:	6999      	ldr	r1, [r3, #24]
 800a57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	ea40 0301 	orr.w	r3, r0, r1
 800a586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	4b8f      	ldr	r3, [pc, #572]	@ (800a7cc <UART_SetConfig+0x2cc>)
 800a590:	429a      	cmp	r2, r3
 800a592:	d005      	beq.n	800a5a0 <UART_SetConfig+0xa0>
 800a594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	4b8d      	ldr	r3, [pc, #564]	@ (800a7d0 <UART_SetConfig+0x2d0>)
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d104      	bne.n	800a5aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5a0:	f7fd f914 	bl	80077cc <HAL_RCC_GetPCLK2Freq>
 800a5a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a5a8:	e003      	b.n	800a5b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5aa:	f7fd f8fb 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 800a5ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5bc:	f040 810c 	bne.w	800a7d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a5ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	462b      	mov	r3, r5
 800a5d6:	1891      	adds	r1, r2, r2
 800a5d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a5da:	415b      	adcs	r3, r3
 800a5dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	eb12 0801 	adds.w	r8, r2, r1
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	eb43 0901 	adc.w	r9, r3, r1
 800a5ee:	f04f 0200 	mov.w	r2, #0
 800a5f2:	f04f 0300 	mov.w	r3, #0
 800a5f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a5fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a5fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a602:	4690      	mov	r8, r2
 800a604:	4699      	mov	r9, r3
 800a606:	4623      	mov	r3, r4
 800a608:	eb18 0303 	adds.w	r3, r8, r3
 800a60c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a610:	462b      	mov	r3, r5
 800a612:	eb49 0303 	adc.w	r3, r9, r3
 800a616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a626:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a62a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a62e:	460b      	mov	r3, r1
 800a630:	18db      	adds	r3, r3, r3
 800a632:	653b      	str	r3, [r7, #80]	@ 0x50
 800a634:	4613      	mov	r3, r2
 800a636:	eb42 0303 	adc.w	r3, r2, r3
 800a63a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a63c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a644:	f7f6 f982 	bl	800094c <__aeabi_uldivmod>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4b61      	ldr	r3, [pc, #388]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a64e:	fba3 2302 	umull	r2, r3, r3, r2
 800a652:	095b      	lsrs	r3, r3, #5
 800a654:	011c      	lsls	r4, r3, #4
 800a656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a660:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a668:	4642      	mov	r2, r8
 800a66a:	464b      	mov	r3, r9
 800a66c:	1891      	adds	r1, r2, r2
 800a66e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a670:	415b      	adcs	r3, r3
 800a672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a678:	4641      	mov	r1, r8
 800a67a:	eb12 0a01 	adds.w	sl, r2, r1
 800a67e:	4649      	mov	r1, r9
 800a680:	eb43 0b01 	adc.w	fp, r3, r1
 800a684:	f04f 0200 	mov.w	r2, #0
 800a688:	f04f 0300 	mov.w	r3, #0
 800a68c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a698:	4692      	mov	sl, r2
 800a69a:	469b      	mov	fp, r3
 800a69c:	4643      	mov	r3, r8
 800a69e:	eb1a 0303 	adds.w	r3, sl, r3
 800a6a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	eb4b 0303 	adc.w	r3, fp, r3
 800a6ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a6c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	18db      	adds	r3, r3, r3
 800a6c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	eb42 0303 	adc.w	r3, r2, r3
 800a6d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a6d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a6da:	f7f6 f937 	bl	800094c <__aeabi_uldivmod>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4b3b      	ldr	r3, [pc, #236]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a6e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a6ea:	095b      	lsrs	r3, r3, #5
 800a6ec:	2264      	movs	r2, #100	@ 0x64
 800a6ee:	fb02 f303 	mul.w	r3, r2, r3
 800a6f2:	1acb      	subs	r3, r1, r3
 800a6f4:	00db      	lsls	r3, r3, #3
 800a6f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a6fa:	4b36      	ldr	r3, [pc, #216]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a6fc:	fba3 2302 	umull	r2, r3, r3, r2
 800a700:	095b      	lsrs	r3, r3, #5
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a708:	441c      	add	r4, r3
 800a70a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a714:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a71c:	4642      	mov	r2, r8
 800a71e:	464b      	mov	r3, r9
 800a720:	1891      	adds	r1, r2, r2
 800a722:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a724:	415b      	adcs	r3, r3
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a72c:	4641      	mov	r1, r8
 800a72e:	1851      	adds	r1, r2, r1
 800a730:	6339      	str	r1, [r7, #48]	@ 0x30
 800a732:	4649      	mov	r1, r9
 800a734:	414b      	adcs	r3, r1
 800a736:	637b      	str	r3, [r7, #52]	@ 0x34
 800a738:	f04f 0200 	mov.w	r2, #0
 800a73c:	f04f 0300 	mov.w	r3, #0
 800a740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a744:	4659      	mov	r1, fp
 800a746:	00cb      	lsls	r3, r1, #3
 800a748:	4651      	mov	r1, sl
 800a74a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a74e:	4651      	mov	r1, sl
 800a750:	00ca      	lsls	r2, r1, #3
 800a752:	4610      	mov	r0, r2
 800a754:	4619      	mov	r1, r3
 800a756:	4603      	mov	r3, r0
 800a758:	4642      	mov	r2, r8
 800a75a:	189b      	adds	r3, r3, r2
 800a75c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a760:	464b      	mov	r3, r9
 800a762:	460a      	mov	r2, r1
 800a764:	eb42 0303 	adc.w	r3, r2, r3
 800a768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a778:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a77c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a780:	460b      	mov	r3, r1
 800a782:	18db      	adds	r3, r3, r3
 800a784:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a786:	4613      	mov	r3, r2
 800a788:	eb42 0303 	adc.w	r3, r2, r3
 800a78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a78e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a796:	f7f6 f8d9 	bl	800094c <__aeabi_uldivmod>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a7a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a7a4:	095b      	lsrs	r3, r3, #5
 800a7a6:	2164      	movs	r1, #100	@ 0x64
 800a7a8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	3332      	adds	r3, #50	@ 0x32
 800a7b2:	4a08      	ldr	r2, [pc, #32]	@ (800a7d4 <UART_SetConfig+0x2d4>)
 800a7b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b8:	095b      	lsrs	r3, r3, #5
 800a7ba:	f003 0207 	and.w	r2, r3, #7
 800a7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4422      	add	r2, r4
 800a7c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7c8:	e106      	b.n	800a9d8 <UART_SetConfig+0x4d8>
 800a7ca:	bf00      	nop
 800a7cc:	40011000 	.word	0x40011000
 800a7d0:	40011400 	.word	0x40011400
 800a7d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a7e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a7ea:	4642      	mov	r2, r8
 800a7ec:	464b      	mov	r3, r9
 800a7ee:	1891      	adds	r1, r2, r2
 800a7f0:	6239      	str	r1, [r7, #32]
 800a7f2:	415b      	adcs	r3, r3
 800a7f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7fa:	4641      	mov	r1, r8
 800a7fc:	1854      	adds	r4, r2, r1
 800a7fe:	4649      	mov	r1, r9
 800a800:	eb43 0501 	adc.w	r5, r3, r1
 800a804:	f04f 0200 	mov.w	r2, #0
 800a808:	f04f 0300 	mov.w	r3, #0
 800a80c:	00eb      	lsls	r3, r5, #3
 800a80e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a812:	00e2      	lsls	r2, r4, #3
 800a814:	4614      	mov	r4, r2
 800a816:	461d      	mov	r5, r3
 800a818:	4643      	mov	r3, r8
 800a81a:	18e3      	adds	r3, r4, r3
 800a81c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a820:	464b      	mov	r3, r9
 800a822:	eb45 0303 	adc.w	r3, r5, r3
 800a826:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a836:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a83a:	f04f 0200 	mov.w	r2, #0
 800a83e:	f04f 0300 	mov.w	r3, #0
 800a842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a846:	4629      	mov	r1, r5
 800a848:	008b      	lsls	r3, r1, #2
 800a84a:	4621      	mov	r1, r4
 800a84c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a850:	4621      	mov	r1, r4
 800a852:	008a      	lsls	r2, r1, #2
 800a854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a858:	f7f6 f878 	bl	800094c <__aeabi_uldivmod>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4b60      	ldr	r3, [pc, #384]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a862:	fba3 2302 	umull	r2, r3, r3, r2
 800a866:	095b      	lsrs	r3, r3, #5
 800a868:	011c      	lsls	r4, r3, #4
 800a86a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a874:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a87c:	4642      	mov	r2, r8
 800a87e:	464b      	mov	r3, r9
 800a880:	1891      	adds	r1, r2, r2
 800a882:	61b9      	str	r1, [r7, #24]
 800a884:	415b      	adcs	r3, r3
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a88c:	4641      	mov	r1, r8
 800a88e:	1851      	adds	r1, r2, r1
 800a890:	6139      	str	r1, [r7, #16]
 800a892:	4649      	mov	r1, r9
 800a894:	414b      	adcs	r3, r1
 800a896:	617b      	str	r3, [r7, #20]
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	f04f 0300 	mov.w	r3, #0
 800a8a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	00cb      	lsls	r3, r1, #3
 800a8a8:	4651      	mov	r1, sl
 800a8aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8ae:	4651      	mov	r1, sl
 800a8b0:	00ca      	lsls	r2, r1, #3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4642      	mov	r2, r8
 800a8ba:	189b      	adds	r3, r3, r2
 800a8bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	460a      	mov	r2, r1
 800a8c4:	eb42 0303 	adc.w	r3, r2, r3
 800a8c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a8d8:	f04f 0200 	mov.w	r2, #0
 800a8dc:	f04f 0300 	mov.w	r3, #0
 800a8e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	008b      	lsls	r3, r1, #2
 800a8e8:	4641      	mov	r1, r8
 800a8ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8ee:	4641      	mov	r1, r8
 800a8f0:	008a      	lsls	r2, r1, #2
 800a8f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a8f6:	f7f6 f829 	bl	800094c <__aeabi_uldivmod>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4611      	mov	r1, r2
 800a900:	4b38      	ldr	r3, [pc, #224]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a902:	fba3 2301 	umull	r2, r3, r3, r1
 800a906:	095b      	lsrs	r3, r3, #5
 800a908:	2264      	movs	r2, #100	@ 0x64
 800a90a:	fb02 f303 	mul.w	r3, r2, r3
 800a90e:	1acb      	subs	r3, r1, r3
 800a910:	011b      	lsls	r3, r3, #4
 800a912:	3332      	adds	r3, #50	@ 0x32
 800a914:	4a33      	ldr	r2, [pc, #204]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a916:	fba2 2303 	umull	r2, r3, r2, r3
 800a91a:	095b      	lsrs	r3, r3, #5
 800a91c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a920:	441c      	add	r4, r3
 800a922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a926:	2200      	movs	r2, #0
 800a928:	673b      	str	r3, [r7, #112]	@ 0x70
 800a92a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a92c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a930:	4642      	mov	r2, r8
 800a932:	464b      	mov	r3, r9
 800a934:	1891      	adds	r1, r2, r2
 800a936:	60b9      	str	r1, [r7, #8]
 800a938:	415b      	adcs	r3, r3
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a940:	4641      	mov	r1, r8
 800a942:	1851      	adds	r1, r2, r1
 800a944:	6039      	str	r1, [r7, #0]
 800a946:	4649      	mov	r1, r9
 800a948:	414b      	adcs	r3, r1
 800a94a:	607b      	str	r3, [r7, #4]
 800a94c:	f04f 0200 	mov.w	r2, #0
 800a950:	f04f 0300 	mov.w	r3, #0
 800a954:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a958:	4659      	mov	r1, fp
 800a95a:	00cb      	lsls	r3, r1, #3
 800a95c:	4651      	mov	r1, sl
 800a95e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a962:	4651      	mov	r1, sl
 800a964:	00ca      	lsls	r2, r1, #3
 800a966:	4610      	mov	r0, r2
 800a968:	4619      	mov	r1, r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	4642      	mov	r2, r8
 800a96e:	189b      	adds	r3, r3, r2
 800a970:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a972:	464b      	mov	r3, r9
 800a974:	460a      	mov	r2, r1
 800a976:	eb42 0303 	adc.w	r3, r2, r3
 800a97a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	663b      	str	r3, [r7, #96]	@ 0x60
 800a986:	667a      	str	r2, [r7, #100]	@ 0x64
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	f04f 0300 	mov.w	r3, #0
 800a990:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a994:	4649      	mov	r1, r9
 800a996:	008b      	lsls	r3, r1, #2
 800a998:	4641      	mov	r1, r8
 800a99a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a99e:	4641      	mov	r1, r8
 800a9a0:	008a      	lsls	r2, r1, #2
 800a9a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a9a6:	f7f5 ffd1 	bl	800094c <__aeabi_uldivmod>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a9b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9b4:	095b      	lsrs	r3, r3, #5
 800a9b6:	2164      	movs	r1, #100	@ 0x64
 800a9b8:	fb01 f303 	mul.w	r3, r1, r3
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	011b      	lsls	r3, r3, #4
 800a9c0:	3332      	adds	r3, #50	@ 0x32
 800a9c2:	4a08      	ldr	r2, [pc, #32]	@ (800a9e4 <UART_SetConfig+0x4e4>)
 800a9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c8:	095b      	lsrs	r3, r3, #5
 800a9ca:	f003 020f 	and.w	r2, r3, #15
 800a9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4422      	add	r2, r4
 800a9d6:	609a      	str	r2, [r3, #8]
}
 800a9d8:	bf00      	nop
 800a9da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9e4:	51eb851f 	.word	0x51eb851f

0800a9e8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	f107 001c 	add.w	r0, r7, #28
 800a9f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a9fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa00:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa02:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800aa06:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800aa0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800aa0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800aa12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800aa22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	431a      	orrs	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	b004      	add	sp, #16
 800aa3c:	4770      	bx	lr

0800aa3e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800aa7a:	b480      	push	{r7}
 800aa7c:	b083      	sub	sp, #12
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2203      	movs	r2, #3
 800aa86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 0303 	and.w	r3, r3, #3
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800aab2:	b480      	push	{r7}
 800aab4:	b085      	sub	sp, #20
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aad0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aad6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aadc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800aaec:	f023 030f 	bic.w	r3, r3, #15
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b083      	sub	sp, #12
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	b2db      	uxtb	r3, r3
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3314      	adds	r3, #20
 800ab2e:	461a      	mov	r2, r3
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	4413      	add	r3, r2
 800ab34:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
}  
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab6c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ab72:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ab78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab84:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	431a      	orrs	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ab90:	2300      	movs	r3, #0

}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b088      	sub	sp, #32
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800abac:	2310      	movs	r3, #16
 800abae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abb0:	2340      	movs	r3, #64	@ 0x40
 800abb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abb4:	2300      	movs	r3, #0
 800abb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abbe:	f107 0308 	add.w	r3, r7, #8
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff ff74 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800abca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abce:	2110      	movs	r1, #16
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fa19 	bl	800b008 <SDMMC_GetCmdResp1>
 800abd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abd8:	69fb      	ldr	r3, [r7, #28]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3720      	adds	r7, #32
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b088      	sub	sp, #32
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800abf0:	2311      	movs	r3, #17
 800abf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abf4:	2340      	movs	r3, #64	@ 0x40
 800abf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abf8:	2300      	movs	r3, #0
 800abfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac02:	f107 0308 	add.w	r3, r7, #8
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7ff ff52 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ac0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac12:	2111      	movs	r1, #17
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f9f7 	bl	800b008 <SDMMC_GetCmdResp1>
 800ac1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac1c:	69fb      	ldr	r3, [r7, #28]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3720      	adds	r7, #32
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b088      	sub	sp, #32
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ac34:	2312      	movs	r3, #18
 800ac36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac38:	2340      	movs	r3, #64	@ 0x40
 800ac3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac46:	f107 0308 	add.w	r3, r7, #8
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff ff30 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ac52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac56:	2112      	movs	r1, #18
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f9d5 	bl	800b008 <SDMMC_GetCmdResp1>
 800ac5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac60:	69fb      	ldr	r3, [r7, #28]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3720      	adds	r7, #32
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b088      	sub	sp, #32
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ac78:	2318      	movs	r3, #24
 800ac7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac7c:	2340      	movs	r3, #64	@ 0x40
 800ac7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac80:	2300      	movs	r3, #0
 800ac82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff ff0e 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ac96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac9a:	2118      	movs	r1, #24
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f9b3 	bl	800b008 <SDMMC_GetCmdResp1>
 800aca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aca4:	69fb      	ldr	r3, [r7, #28]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3720      	adds	r7, #32
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b088      	sub	sp, #32
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800acbc:	2319      	movs	r3, #25
 800acbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acc0:	2340      	movs	r3, #64	@ 0x40
 800acc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800accc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acce:	f107 0308 	add.w	r3, r7, #8
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff feec 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800acda:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acde:	2119      	movs	r1, #25
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 f991 	bl	800b008 <SDMMC_GetCmdResp1>
 800ace6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ace8:	69fb      	ldr	r3, [r7, #28]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3720      	adds	r7, #32
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800acfc:	2300      	movs	r3, #0
 800acfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad00:	230c      	movs	r3, #12
 800ad02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad04:	2340      	movs	r3, #64	@ 0x40
 800ad06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad12:	f107 0308 	add.w	r3, r7, #8
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff feca 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ad1e:	4a05      	ldr	r2, [pc, #20]	@ (800ad34 <SDMMC_CmdStopTransfer+0x40>)
 800ad20:	210c      	movs	r1, #12
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f970 	bl	800b008 <SDMMC_GetCmdResp1>
 800ad28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad2a:	69fb      	ldr	r3, [r7, #28]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3720      	adds	r7, #32
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	05f5e100 	.word	0x05f5e100

0800ad38 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08a      	sub	sp, #40	@ 0x28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ad48:	2307      	movs	r3, #7
 800ad4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad4c:	2340      	movs	r3, #64	@ 0x40
 800ad4e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad50:	2300      	movs	r3, #0
 800ad52:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad58:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad5a:	f107 0310 	add.w	r3, r7, #16
 800ad5e:	4619      	mov	r1, r3
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f7ff fea6 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ad66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad6a:	2107      	movs	r1, #7
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 f94b 	bl	800b008 <SDMMC_GetCmdResp1>
 800ad72:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800ad74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3728      	adds	r7, #40	@ 0x28
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b088      	sub	sp, #32
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad92:	2300      	movs	r3, #0
 800ad94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad9c:	f107 0308 	add.w	r3, r7, #8
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7ff fe85 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fb65 	bl	800b478 <SDMMC_GetCmdError>
 800adae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adb0:	69fb      	ldr	r3, [r7, #28]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3720      	adds	r7, #32
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b088      	sub	sp, #32
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800adc2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800adc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800adc8:	2308      	movs	r3, #8
 800adca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800adcc:	2340      	movs	r3, #64	@ 0x40
 800adce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800add0:	2300      	movs	r3, #0
 800add2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800add4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800add8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adda:	f107 0308 	add.w	r3, r7, #8
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff fe66 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 faf8 	bl	800b3dc <SDMMC_GetCmdResp7>
 800adec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adee:	69fb      	ldr	r3, [r7, #28]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3720      	adds	r7, #32
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae06:	2337      	movs	r3, #55	@ 0x37
 800ae08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae0a:	2340      	movs	r3, #64	@ 0x40
 800ae0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae18:	f107 0308 	add.w	r3, r7, #8
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff fe47 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ae24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae28:	2137      	movs	r1, #55	@ 0x37
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f8ec 	bl	800b008 <SDMMC_GetCmdResp1>
 800ae30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae32:	69fb      	ldr	r3, [r7, #28]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ae52:	2329      	movs	r3, #41	@ 0x29
 800ae54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae56:	2340      	movs	r3, #64	@ 0x40
 800ae58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae64:	f107 0308 	add.w	r3, r7, #8
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7ff fe21 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f9ff 	bl	800b274 <SDMMC_GetCmdResp3>
 800ae76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae78:	69fb      	ldr	r3, [r7, #28]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3720      	adds	r7, #32
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b088      	sub	sp, #32
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ae90:	2306      	movs	r3, #6
 800ae92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae94:	2340      	movs	r3, #64	@ 0x40
 800ae96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aea0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aea2:	f107 0308 	add.w	r3, r7, #8
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff fe02 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800aeae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aeb2:	2106      	movs	r1, #6
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f8a7 	bl	800b008 <SDMMC_GetCmdResp1>
 800aeba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aebc:	69fb      	ldr	r3, [r7, #28]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3720      	adds	r7, #32
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b088      	sub	sp, #32
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800aece:	2300      	movs	r3, #0
 800aed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800aed2:	2333      	movs	r3, #51	@ 0x33
 800aed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aed6:	2340      	movs	r3, #64	@ 0x40
 800aed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aeda:	2300      	movs	r3, #0
 800aedc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aee4:	f107 0308 	add.w	r3, r7, #8
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff fde1 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800aef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aef4:	2133      	movs	r1, #51	@ 0x33
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f886 	bl	800b008 <SDMMC_GetCmdResp1>
 800aefc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aefe:	69fb      	ldr	r3, [r7, #28]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3720      	adds	r7, #32
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800af10:	2300      	movs	r3, #0
 800af12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800af14:	2302      	movs	r3, #2
 800af16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800af18:	23c0      	movs	r3, #192	@ 0xc0
 800af1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af1c:	2300      	movs	r3, #0
 800af1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af26:	f107 0308 	add.w	r3, r7, #8
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7ff fdc0 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f956 	bl	800b1e4 <SDMMC_GetCmdResp2>
 800af38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af3a:	69fb      	ldr	r3, [r7, #28]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3720      	adds	r7, #32
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b088      	sub	sp, #32
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800af52:	2309      	movs	r3, #9
 800af54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800af56:	23c0      	movs	r3, #192	@ 0xc0
 800af58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af64:	f107 0308 	add.w	r3, r7, #8
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff fda1 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f937 	bl	800b1e4 <SDMMC_GetCmdResp2>
 800af76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af78:	69fb      	ldr	r3, [r7, #28]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3720      	adds	r7, #32
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b088      	sub	sp, #32
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800af8c:	2300      	movs	r3, #0
 800af8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af90:	2303      	movs	r3, #3
 800af92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af94:	2340      	movs	r3, #64	@ 0x40
 800af96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af98:	2300      	movs	r3, #0
 800af9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afa2:	f107 0308 	add.w	r3, r7, #8
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7ff fd82 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	2103      	movs	r1, #3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f99c 	bl	800b2f0 <SDMMC_GetCmdResp6>
 800afb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afba:	69fb      	ldr	r3, [r7, #28]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3720      	adds	r7, #32
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b088      	sub	sp, #32
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800afd2:	230d      	movs	r3, #13
 800afd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afd6:	2340      	movs	r3, #64	@ 0x40
 800afd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afda:	2300      	movs	r3, #0
 800afdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afe4:	f107 0308 	add.w	r3, r7, #8
 800afe8:	4619      	mov	r1, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff fd61 	bl	800aab2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800aff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aff4:	210d      	movs	r1, #13
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f806 	bl	800b008 <SDMMC_GetCmdResp1>
 800affc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800affe:	69fb      	ldr	r3, [r7, #28]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3720      	adds	r7, #32
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b088      	sub	sp, #32
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	460b      	mov	r3, r1
 800b012:	607a      	str	r2, [r7, #4]
 800b014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b016:	4b70      	ldr	r3, [pc, #448]	@ (800b1d8 <SDMMC_GetCmdResp1+0x1d0>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a70      	ldr	r2, [pc, #448]	@ (800b1dc <SDMMC_GetCmdResp1+0x1d4>)
 800b01c:	fba2 2303 	umull	r2, r3, r2, r3
 800b020:	0a5a      	lsrs	r2, r3, #9
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	fb02 f303 	mul.w	r3, r2, r3
 800b028:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	1e5a      	subs	r2, r3, #1
 800b02e:	61fa      	str	r2, [r7, #28]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d102      	bne.n	800b03a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b034:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b038:	e0c9      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b03e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0ef      	beq.n	800b02a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1ea      	bne.n	800b02a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b058:	f003 0304 	and.w	r3, r3, #4
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d004      	beq.n	800b06a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2204      	movs	r2, #4
 800b064:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b066:	2304      	movs	r3, #4
 800b068:	e0b1      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d004      	beq.n	800b080 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2201      	movs	r2, #1
 800b07a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e0a6      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	22c5      	movs	r2, #197	@ 0xc5
 800b084:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f7ff fd3d 	bl	800ab06 <SDIO_GetCommandResponse>
 800b08c:	4603      	mov	r3, r0
 800b08e:	461a      	mov	r2, r3
 800b090:	7afb      	ldrb	r3, [r7, #11]
 800b092:	4293      	cmp	r3, r2
 800b094:	d001      	beq.n	800b09a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b096:	2301      	movs	r3, #1
 800b098:	e099      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b09a:	2100      	movs	r1, #0
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f7ff fd3f 	bl	800ab20 <SDIO_GetResponse>
 800b0a2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	4b4e      	ldr	r3, [pc, #312]	@ (800b1e0 <SDMMC_GetCmdResp1+0x1d8>)
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	e08d      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	da02      	bge.n	800b0be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b0b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b0bc:	e087      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b0c8:	2340      	movs	r3, #64	@ 0x40
 800b0ca:	e080      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b0d6:	2380      	movs	r3, #128	@ 0x80
 800b0d8:	e079      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b0e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0e8:	e071      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d002      	beq.n	800b0fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b0f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0f8:	e069      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b108:	e061      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b114:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b118:	e059      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b128:	e051      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b138:	e049      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b144:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b148:	e041      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b158:	e039      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b164:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b168:	e031      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b174:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b178:	e029      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b184:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b188:	e021      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b194:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b198:	e019      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b1a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b1a8:	e011      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b1b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b1b8:	e009      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f003 0308 	and.w	r3, r3, #8
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b1c4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b1c8:	e001      	b.n	800b1ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b1ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3720      	adds	r7, #32
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	2000006c 	.word	0x2000006c
 800b1dc:	10624dd3 	.word	0x10624dd3
 800b1e0:	fdffe008 	.word	0xfdffe008

0800b1e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1ec:	4b1f      	ldr	r3, [pc, #124]	@ (800b26c <SDMMC_GetCmdResp2+0x88>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a1f      	ldr	r2, [pc, #124]	@ (800b270 <SDMMC_GetCmdResp2+0x8c>)
 800b1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f6:	0a5b      	lsrs	r3, r3, #9
 800b1f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1fc:	fb02 f303 	mul.w	r3, r2, r3
 800b200:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	1e5a      	subs	r2, r3, #1
 800b206:	60fa      	str	r2, [r7, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b20c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b210:	e026      	b.n	800b260 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b216:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d0ef      	beq.n	800b202 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1ea      	bne.n	800b202 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b230:	f003 0304 	and.w	r3, r3, #4
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2204      	movs	r2, #4
 800b23c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b23e:	2304      	movs	r3, #4
 800b240:	e00e      	b.n	800b260 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d004      	beq.n	800b258 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b254:	2301      	movs	r3, #1
 800b256:	e003      	b.n	800b260 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	22c5      	movs	r2, #197	@ 0xc5
 800b25c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	2000006c 	.word	0x2000006c
 800b270:	10624dd3 	.word	0x10624dd3

0800b274 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b27c:	4b1a      	ldr	r3, [pc, #104]	@ (800b2e8 <SDMMC_GetCmdResp3+0x74>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a1a      	ldr	r2, [pc, #104]	@ (800b2ec <SDMMC_GetCmdResp3+0x78>)
 800b282:	fba2 2303 	umull	r2, r3, r2, r3
 800b286:	0a5b      	lsrs	r3, r3, #9
 800b288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b28c:	fb02 f303 	mul.w	r3, r2, r3
 800b290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	1e5a      	subs	r2, r3, #1
 800b296:	60fa      	str	r2, [r7, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d102      	bne.n	800b2a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b29c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b2a0:	e01b      	b.n	800b2da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0ef      	beq.n	800b292 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1ea      	bne.n	800b292 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d004      	beq.n	800b2d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2204      	movs	r2, #4
 800b2cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2ce:	2304      	movs	r3, #4
 800b2d0:	e003      	b.n	800b2da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	22c5      	movs	r2, #197	@ 0xc5
 800b2d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	2000006c 	.word	0x2000006c
 800b2ec:	10624dd3 	.word	0x10624dd3

0800b2f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b088      	sub	sp, #32
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2fe:	4b35      	ldr	r3, [pc, #212]	@ (800b3d4 <SDMMC_GetCmdResp6+0xe4>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a35      	ldr	r2, [pc, #212]	@ (800b3d8 <SDMMC_GetCmdResp6+0xe8>)
 800b304:	fba2 2303 	umull	r2, r3, r2, r3
 800b308:	0a5b      	lsrs	r3, r3, #9
 800b30a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b30e:	fb02 f303 	mul.w	r3, r2, r3
 800b312:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	1e5a      	subs	r2, r3, #1
 800b318:	61fa      	str	r2, [r7, #28]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d102      	bne.n	800b324 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b31e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b322:	e052      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b328:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0ef      	beq.n	800b314 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1ea      	bne.n	800b314 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b342:	f003 0304 	and.w	r3, r3, #4
 800b346:	2b00      	cmp	r3, #0
 800b348:	d004      	beq.n	800b354 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2204      	movs	r2, #4
 800b34e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b350:	2304      	movs	r3, #4
 800b352:	e03a      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d004      	beq.n	800b36a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2201      	movs	r2, #1
 800b364:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b366:	2301      	movs	r3, #1
 800b368:	e02f      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f7ff fbcb 	bl	800ab06 <SDIO_GetCommandResponse>
 800b370:	4603      	mov	r3, r0
 800b372:	461a      	mov	r2, r3
 800b374:	7afb      	ldrb	r3, [r7, #11]
 800b376:	4293      	cmp	r3, r2
 800b378:	d001      	beq.n	800b37e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e025      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	22c5      	movs	r2, #197	@ 0xc5
 800b382:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b384:	2100      	movs	r1, #0
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f7ff fbca 	bl	800ab20 <SDIO_GetResponse>
 800b38c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d106      	bne.n	800b3a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	0c1b      	lsrs	r3, r3, #16
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	e011      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b3b4:	e009      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b3c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b3c4:	e001      	b.n	800b3ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b3c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3720      	adds	r7, #32
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	2000006c 	.word	0x2000006c
 800b3d8:	10624dd3 	.word	0x10624dd3

0800b3dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3e4:	4b22      	ldr	r3, [pc, #136]	@ (800b470 <SDMMC_GetCmdResp7+0x94>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a22      	ldr	r2, [pc, #136]	@ (800b474 <SDMMC_GetCmdResp7+0x98>)
 800b3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ee:	0a5b      	lsrs	r3, r3, #9
 800b3f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3f4:	fb02 f303 	mul.w	r3, r2, r3
 800b3f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	1e5a      	subs	r2, r3, #1
 800b3fe:	60fa      	str	r2, [r7, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b404:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b408:	e02c      	b.n	800b464 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b40e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0ef      	beq.n	800b3fa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1ea      	bne.n	800b3fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d004      	beq.n	800b43a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2204      	movs	r2, #4
 800b434:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b436:	2304      	movs	r3, #4
 800b438:	e014      	b.n	800b464 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b43e:	f003 0301 	and.w	r3, r3, #1
 800b442:	2b00      	cmp	r3, #0
 800b444:	d004      	beq.n	800b450 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e009      	b.n	800b464 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2240      	movs	r2, #64	@ 0x40
 800b460:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b462:	2300      	movs	r3, #0
  
}
 800b464:	4618      	mov	r0, r3
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	2000006c 	.word	0x2000006c
 800b474:	10624dd3 	.word	0x10624dd3

0800b478 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b480:	4b11      	ldr	r3, [pc, #68]	@ (800b4c8 <SDMMC_GetCmdError+0x50>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a11      	ldr	r2, [pc, #68]	@ (800b4cc <SDMMC_GetCmdError+0x54>)
 800b486:	fba2 2303 	umull	r2, r3, r2, r3
 800b48a:	0a5b      	lsrs	r3, r3, #9
 800b48c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b490:	fb02 f303 	mul.w	r3, r2, r3
 800b494:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	1e5a      	subs	r2, r3, #1
 800b49a:	60fa      	str	r2, [r7, #12]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d102      	bne.n	800b4a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b4a4:	e009      	b.n	800b4ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0f1      	beq.n	800b496 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	22c5      	movs	r2, #197	@ 0xc5
 800b4b6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	2000006c 	.word	0x2000006c
 800b4cc:	10624dd3 	.word	0x10624dd3

0800b4d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b4d4:	4904      	ldr	r1, [pc, #16]	@ (800b4e8 <MX_FATFS_Init+0x18>)
 800b4d6:	4805      	ldr	r0, [pc, #20]	@ (800b4ec <MX_FATFS_Init+0x1c>)
 800b4d8:	f000 faa4 	bl	800ba24 <FATFS_LinkDriver>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	461a      	mov	r2, r3
 800b4e0:	4b03      	ldr	r3, [pc, #12]	@ (800b4f0 <MX_FATFS_Init+0x20>)
 800b4e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b4e4:	bf00      	nop
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20000588 	.word	0x20000588
 800b4ec:	08052514 	.word	0x08052514
 800b4f0:	20000584 	.word	0x20000584

0800b4f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b4fe:	f000 f896 	bl	800b62e <BSP_SD_IsDetected>
 800b502:	4603      	mov	r3, r0
 800b504:	2b01      	cmp	r3, #1
 800b506:	d001      	beq.n	800b50c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	e012      	b.n	800b532 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b50c:	480b      	ldr	r0, [pc, #44]	@ (800b53c <BSP_SD_Init+0x48>)
 800b50e:	f7fc f9a3 	bl	8007858 <HAL_SD_Init>
 800b512:	4603      	mov	r3, r0
 800b514:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d109      	bne.n	800b530 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b51c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b520:	4806      	ldr	r0, [pc, #24]	@ (800b53c <BSP_SD_Init+0x48>)
 800b522:	f7fc ff69 	bl	80083f8 <HAL_SD_ConfigWideBusOperation>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b530:	79fb      	ldrb	r3, [r7, #7]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200003c0 	.word	0x200003c0

0800b540 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	68f9      	ldr	r1, [r7, #12]
 800b556:	4806      	ldr	r0, [pc, #24]	@ (800b570 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b558:	f7fc fa26 	bl	80079a8 <HAL_SD_ReadBlocks_DMA>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b566:	7dfb      	ldrb	r3, [r7, #23]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	200003c0 	.word	0x200003c0

0800b574 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	68ba      	ldr	r2, [r7, #8]
 800b588:	68f9      	ldr	r1, [r7, #12]
 800b58a:	4806      	ldr	r0, [pc, #24]	@ (800b5a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b58c:	f7fc faee 	bl	8007b6c <HAL_SD_WriteBlocks_DMA>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	200003c0 	.word	0x200003c0

0800b5a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b5ac:	4805      	ldr	r0, [pc, #20]	@ (800b5c4 <BSP_SD_GetCardState+0x1c>)
 800b5ae:	f7fc ffbd 	bl	800852c <HAL_SD_GetCardState>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	bf14      	ite	ne
 800b5b8:	2301      	movne	r3, #1
 800b5ba:	2300      	moveq	r3, #0
 800b5bc:	b2db      	uxtb	r3, r3
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	200003c0 	.word	0x200003c0

0800b5c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	4803      	ldr	r0, [pc, #12]	@ (800b5e0 <BSP_SD_GetCardInfo+0x18>)
 800b5d4:	f7fc fee4 	bl	80083a0 <HAL_SD_GetCardInfo>
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	200003c0 	.word	0x200003c0

0800b5e4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b5ec:	f000 f818 	bl	800b620 <BSP_SD_AbortCallback>
}
 800b5f0:	bf00      	nop
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b600:	f000 f9a8 	bl	800b954 <BSP_SD_WriteCpltCallback>
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b614:	f000 f9ac 	bl	800b970 <BSP_SD_ReadCpltCallback>
}
 800b618:	bf00      	nop
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0

}
 800b624:	bf00      	nop
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b62e:	b480      	push	{r7}
 800b630:	b083      	sub	sp, #12
 800b632:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b634:	2301      	movs	r3, #1
 800b636:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b638:	79fb      	ldrb	r3, [r7, #7]
 800b63a:	b2db      	uxtb	r3, r3
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b650:	f000 fa34 	bl	800babc <osKernelSysTick>
 800b654:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b656:	e006      	b.n	800b666 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b658:	f7ff ffa6 	bl	800b5a8 <BSP_SD_GetCardState>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d101      	bne.n	800b666 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b662:	2300      	movs	r3, #0
 800b664:	e009      	b.n	800b67a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b666:	f000 fa29 	bl	800babc <osKernelSysTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	429a      	cmp	r2, r3
 800b674:	d8f0      	bhi.n	800b658 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b68e:	4b0b      	ldr	r3, [pc, #44]	@ (800b6bc <SD_CheckStatus+0x38>)
 800b690:	2201      	movs	r2, #1
 800b692:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b694:	f7ff ff88 	bl	800b5a8 <BSP_SD_GetCardState>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d107      	bne.n	800b6ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b69e:	4b07      	ldr	r3, [pc, #28]	@ (800b6bc <SD_CheckStatus+0x38>)
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	f023 0301 	bic.w	r3, r3, #1
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	4b04      	ldr	r3, [pc, #16]	@ (800b6bc <SD_CheckStatus+0x38>)
 800b6ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b6ae:	4b03      	ldr	r3, [pc, #12]	@ (800b6bc <SD_CheckStatus+0x38>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	b2db      	uxtb	r3, r3
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20000098 	.word	0x20000098

0800b6c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b6c0:	b590      	push	{r4, r7, lr}
 800b6c2:	b087      	sub	sp, #28
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b6ca:	4b20      	ldr	r3, [pc, #128]	@ (800b74c <SD_initialize+0x8c>)
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b6d0:	f000 f9e8 	bl	800baa4 <osKernelRunning>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d030      	beq.n	800b73c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b6da:	f7ff ff0b 	bl	800b4f4 <BSP_SD_Init>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d107      	bne.n	800b6f4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff ffcc 	bl	800b684 <SD_CheckStatus>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	4b16      	ldr	r3, [pc, #88]	@ (800b74c <SD_initialize+0x8c>)
 800b6f2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b6f4:	4b15      	ldr	r3, [pc, #84]	@ (800b74c <SD_initialize+0x8c>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d01e      	beq.n	800b73c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b6fe:	4b14      	ldr	r3, [pc, #80]	@ (800b750 <SD_initialize+0x90>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10e      	bne.n	800b724 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b706:	4b13      	ldr	r3, [pc, #76]	@ (800b754 <SD_initialize+0x94>)
 800b708:	f107 0408 	add.w	r4, r7, #8
 800b70c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b70e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b712:	f107 0308 	add.w	r3, r7, #8
 800b716:	2100      	movs	r1, #0
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 fadb 	bl	800bcd4 <osMessageCreate>
 800b71e:	4603      	mov	r3, r0
 800b720:	4a0b      	ldr	r2, [pc, #44]	@ (800b750 <SD_initialize+0x90>)
 800b722:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b724:	4b0a      	ldr	r3, [pc, #40]	@ (800b750 <SD_initialize+0x90>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d107      	bne.n	800b73c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b72c:	4b07      	ldr	r3, [pc, #28]	@ (800b74c <SD_initialize+0x8c>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	b2db      	uxtb	r3, r3
 800b732:	f043 0301 	orr.w	r3, r3, #1
 800b736:	b2da      	uxtb	r2, r3
 800b738:	4b04      	ldr	r3, [pc, #16]	@ (800b74c <SD_initialize+0x8c>)
 800b73a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b73c:	4b03      	ldr	r3, [pc, #12]	@ (800b74c <SD_initialize+0x8c>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	b2db      	uxtb	r3, r3
}
 800b742:	4618      	mov	r0, r3
 800b744:	371c      	adds	r7, #28
 800b746:	46bd      	mov	sp, r7
 800b748:	bd90      	pop	{r4, r7, pc}
 800b74a:	bf00      	nop
 800b74c:	20000098 	.word	0x20000098
 800b750:	2000058c 	.word	0x2000058c
 800b754:	0800fea8 	.word	0x0800fea8

0800b758 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	4603      	mov	r3, r0
 800b760:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b762:	79fb      	ldrb	r3, [r7, #7]
 800b764:	4618      	mov	r0, r3
 800b766:	f7ff ff8d 	bl	800b684 <SD_CheckStatus>
 800b76a:	4603      	mov	r3, r0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08a      	sub	sp, #40	@ 0x28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	607a      	str	r2, [r7, #4]
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b78a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b78e:	f7ff ff5b 	bl	800b648 <SD_CheckStatusWithTimeout>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	da02      	bge.n	800b79e <SD_read+0x2a>
  {
    return res;
 800b798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b79c:	e032      	b.n	800b804 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	6879      	ldr	r1, [r7, #4]
 800b7a2:	68b8      	ldr	r0, [r7, #8]
 800b7a4:	f7ff fecc 	bl	800b540 <BSP_SD_ReadBlocks_DMA>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800b7ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d124      	bne.n	800b800 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b7b6:	4b15      	ldr	r3, [pc, #84]	@ (800b80c <SD_read+0x98>)
 800b7b8:	6819      	ldr	r1, [r3, #0]
 800b7ba:	f107 0314 	add.w	r3, r7, #20
 800b7be:	f247 5230 	movw	r2, #30000	@ 0x7530
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 faee 	bl	800bda4 <osMessageGet>

    if (event.status == osEventMessage)
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	2b10      	cmp	r3, #16
 800b7cc:	d118      	bne.n	800b800 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d115      	bne.n	800b800 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b7d4:	f000 f972 	bl	800babc <osKernelSysTick>
 800b7d8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b7da:	e008      	b.n	800b7ee <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b7dc:	f7ff fee4 	bl	800b5a8 <BSP_SD_GetCardState>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d103      	bne.n	800b7ee <SD_read+0x7a>
              {
                res = RES_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b7ec:	e008      	b.n	800b800 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b7ee:	f000 f965 	bl	800babc <osKernelSysTick>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	6a3b      	ldr	r3, [r7, #32]
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d9ed      	bls.n	800b7dc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b804:	4618      	mov	r0, r3
 800b806:	3728      	adds	r7, #40	@ 0x28
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	2000058c 	.word	0x2000058c

0800b810 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b08a      	sub	sp, #40	@ 0x28
 800b814:	af00      	add	r7, sp, #0
 800b816:	60b9      	str	r1, [r7, #8]
 800b818:	607a      	str	r2, [r7, #4]
 800b81a:	603b      	str	r3, [r7, #0]
 800b81c:	4603      	mov	r3, r0
 800b81e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b826:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b82a:	f7ff ff0d 	bl	800b648 <SD_CheckStatusWithTimeout>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	da02      	bge.n	800b83a <SD_write+0x2a>
  {
    return res;
 800b834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b838:	e02e      	b.n	800b898 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	6879      	ldr	r1, [r7, #4]
 800b83e:	68b8      	ldr	r0, [r7, #8]
 800b840:	f7ff fe98 	bl	800b574 <BSP_SD_WriteBlocks_DMA>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d124      	bne.n	800b894 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b84a:	4b15      	ldr	r3, [pc, #84]	@ (800b8a0 <SD_write+0x90>)
 800b84c:	6819      	ldr	r1, [r3, #0]
 800b84e:	f107 0314 	add.w	r3, r7, #20
 800b852:	f247 5230 	movw	r2, #30000	@ 0x7530
 800b856:	4618      	mov	r0, r3
 800b858:	f000 faa4 	bl	800bda4 <osMessageGet>

    if (event.status == osEventMessage)
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	2b10      	cmp	r3, #16
 800b860:	d118      	bne.n	800b894 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	2b02      	cmp	r3, #2
 800b866:	d115      	bne.n	800b894 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b868:	f000 f928 	bl	800babc <osKernelSysTick>
 800b86c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b86e:	e008      	b.n	800b882 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b870:	f7ff fe9a 	bl	800b5a8 <BSP_SD_GetCardState>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d103      	bne.n	800b882 <SD_write+0x72>
          {
            res = RES_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800b880:	e008      	b.n	800b894 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b882:	f000 f91b 	bl	800babc <osKernelSysTick>
 800b886:	4602      	mov	r2, r0
 800b888:	6a3b      	ldr	r3, [r7, #32]
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b890:	4293      	cmp	r3, r2
 800b892:	d9ed      	bls.n	800b870 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3728      	adds	r7, #40	@ 0x28
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	2000058c 	.word	0x2000058c

0800b8a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08c      	sub	sp, #48	@ 0x30
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	603a      	str	r2, [r7, #0]
 800b8ae:	71fb      	strb	r3, [r7, #7]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b8ba:	4b25      	ldr	r3, [pc, #148]	@ (800b950 <SD_ioctl+0xac>)
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	f003 0301 	and.w	r3, r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d001      	beq.n	800b8cc <SD_ioctl+0x28>
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e03c      	b.n	800b946 <SD_ioctl+0xa2>

  switch (cmd)
 800b8cc:	79bb      	ldrb	r3, [r7, #6]
 800b8ce:	2b03      	cmp	r3, #3
 800b8d0:	d834      	bhi.n	800b93c <SD_ioctl+0x98>
 800b8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <SD_ioctl+0x34>)
 800b8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d8:	0800b8e9 	.word	0x0800b8e9
 800b8dc:	0800b8f1 	.word	0x0800b8f1
 800b8e0:	0800b909 	.word	0x0800b909
 800b8e4:	0800b923 	.word	0x0800b923
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b8ee:	e028      	b.n	800b942 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b8f0:	f107 030c 	add.w	r3, r7, #12
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff fe67 	bl	800b5c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b8fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b906:	e01c      	b.n	800b942 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b908:	f107 030c 	add.w	r3, r7, #12
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff fe5b 	bl	800b5c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b914:	b29a      	uxth	r2, r3
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b91a:	2300      	movs	r3, #0
 800b91c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b920:	e00f      	b.n	800b942 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b922:	f107 030c 	add.w	r3, r7, #12
 800b926:	4618      	mov	r0, r3
 800b928:	f7ff fe4e 	bl	800b5c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92e:	0a5a      	lsrs	r2, r3, #9
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b93a:	e002      	b.n	800b942 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b93c:	2304      	movs	r3, #4
 800b93e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b942:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b946:	4618      	mov	r0, r3
 800b948:	3730      	adds	r7, #48	@ 0x30
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20000098 	.word	0x20000098

0800b954 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800b958:	4b04      	ldr	r3, [pc, #16]	@ (800b96c <BSP_SD_WriteCpltCallback+0x18>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2200      	movs	r2, #0
 800b95e:	2102      	movs	r1, #2
 800b960:	4618      	mov	r0, r3
 800b962:	f000 f9df 	bl	800bd24 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800b966:	bf00      	nop
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	2000058c 	.word	0x2000058c

0800b970 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b974:	4b04      	ldr	r3, [pc, #16]	@ (800b988 <BSP_SD_ReadCpltCallback+0x18>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2200      	movs	r2, #0
 800b97a:	2101      	movs	r1, #1
 800b97c:	4618      	mov	r0, r3
 800b97e:	f000 f9d1 	bl	800bd24 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800b982:	bf00      	nop
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	2000058c 	.word	0x2000058c

0800b98c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b087      	sub	sp, #28
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	4613      	mov	r3, r2
 800b998:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b99a:	2301      	movs	r3, #1
 800b99c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9a2:	4b1f      	ldr	r3, [pc, #124]	@ (800ba20 <FATFS_LinkDriverEx+0x94>)
 800b9a4:	7a5b      	ldrb	r3, [r3, #9]
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d131      	bne.n	800ba10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9ac:	4b1c      	ldr	r3, [pc, #112]	@ (800ba20 <FATFS_LinkDriverEx+0x94>)
 800b9ae:	7a5b      	ldrb	r3, [r3, #9]
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba20 <FATFS_LinkDriverEx+0x94>)
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9ba:	4b19      	ldr	r3, [pc, #100]	@ (800ba20 <FATFS_LinkDriverEx+0x94>)
 800b9bc:	7a5b      	ldrb	r3, [r3, #9]
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	4a17      	ldr	r2, [pc, #92]	@ (800ba20 <FATFS_LinkDriverEx+0x94>)
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9ca:	4b15      	ldr	r3, [pc, #84]	@ (800ba20 <FATFS_LinkDriverEx+0x94>)
 800b9cc:	7a5b      	ldrb	r3, [r3, #9]
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	4b13      	ldr	r3, [pc, #76]	@ (800ba20 <FATFS_LinkDriverEx+0x94>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	79fa      	ldrb	r2, [r7, #7]
 800b9d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9da:	4b11      	ldr	r3, [pc, #68]	@ (800ba20 <FATFS_LinkDriverEx+0x94>)
 800b9dc:	7a5b      	ldrb	r3, [r3, #9]
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	1c5a      	adds	r2, r3, #1
 800b9e2:	b2d1      	uxtb	r1, r2
 800b9e4:	4a0e      	ldr	r2, [pc, #56]	@ (800ba20 <FATFS_LinkDriverEx+0x94>)
 800b9e6:	7251      	strb	r1, [r2, #9]
 800b9e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9ea:	7dbb      	ldrb	r3, [r7, #22]
 800b9ec:	3330      	adds	r3, #48	@ 0x30
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	223a      	movs	r2, #58	@ 0x3a
 800b9fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	3302      	adds	r3, #2
 800ba00:	222f      	movs	r2, #47	@ 0x2f
 800ba02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	3303      	adds	r3, #3
 800ba08:	2200      	movs	r2, #0
 800ba0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	371c      	adds	r7, #28
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	20000590 	.word	0x20000590

0800ba24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba2e:	2200      	movs	r2, #0
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff ffaa 	bl	800b98c <FATFS_LinkDriverEx>
 800ba38:	4603      	mov	r3, r0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b085      	sub	sp, #20
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	4603      	mov	r3, r0
 800ba4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ba50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba54:	2b84      	cmp	r3, #132	@ 0x84
 800ba56:	d005      	beq.n	800ba64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ba58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4413      	add	r3, r2
 800ba60:	3303      	adds	r3, #3
 800ba62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ba64:	68fb      	ldr	r3, [r7, #12]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b083      	sub	sp, #12
 800ba76:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba78:	f3ef 8305 	mrs	r3, IPSR
 800ba7c:	607b      	str	r3, [r7, #4]
  return(result);
 800ba7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bf14      	ite	ne
 800ba84:	2301      	movne	r3, #1
 800ba86:	2300      	moveq	r3, #0
 800ba88:	b2db      	uxtb	r3, r3
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ba9a:	f001 fbd3 	bl	800d244 <vTaskStartScheduler>
  
  return osOK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800baa8:	f001 fff8 	bl	800da9c <xTaskGetSchedulerState>
 800baac:	4603      	mov	r3, r0
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d101      	bne.n	800bab6 <osKernelRunning+0x12>
    return 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	e000      	b.n	800bab8 <osKernelRunning+0x14>
  else
    return 1;
 800bab6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800bab8:	4618      	mov	r0, r3
 800baba:	bd80      	pop	{r7, pc}

0800babc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bac0:	f7ff ffd7 	bl	800ba72 <inHandlerMode>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800baca:	f001 fcd9 	bl	800d480 <xTaskGetTickCountFromISR>
 800bace:	4603      	mov	r3, r0
 800bad0:	e002      	b.n	800bad8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bad2:	f001 fcc5 	bl	800d460 <xTaskGetTickCount>
 800bad6:	4603      	mov	r3, r0
  }
}
 800bad8:	4618      	mov	r0, r3
 800bada:	bd80      	pop	{r7, pc}

0800badc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800badc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bade:	b089      	sub	sp, #36	@ 0x24
 800bae0:	af04      	add	r7, sp, #16
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d020      	beq.n	800bb30 <osThreadCreate+0x54>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d01c      	beq.n	800bb30 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685c      	ldr	r4, [r3, #4]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	691e      	ldr	r6, [r3, #16]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff ff9a 	bl	800ba42 <makeFreeRtosPriority>
 800bb0e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	695b      	ldr	r3, [r3, #20]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb18:	9202      	str	r2, [sp, #8]
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	9100      	str	r1, [sp, #0]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	4632      	mov	r2, r6
 800bb22:	4629      	mov	r1, r5
 800bb24:	4620      	mov	r0, r4
 800bb26:	f001 f9bf 	bl	800cea8 <xTaskCreateStatic>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	60fb      	str	r3, [r7, #12]
 800bb2e:	e01c      	b.n	800bb6a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	685c      	ldr	r4, [r3, #4]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb3c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7ff ff7c 	bl	800ba42 <makeFreeRtosPriority>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	f107 030c 	add.w	r3, r7, #12
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	9200      	str	r2, [sp, #0]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	4632      	mov	r2, r6
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f001 fa04 	bl	800cf68 <xTaskCreate>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d001      	beq.n	800bb6a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	e000      	b.n	800bb6c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <osDelay+0x16>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	e000      	b.n	800bb8c <osDelay+0x18>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f001 fb23 	bl	800d1d8 <vTaskDelay>
  
  return osOK;
 800bb92:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d007      	beq.n	800bbbc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	f000 fb91 	bl	800c2da <xQueueCreateMutexStatic>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	e003      	b.n	800bbc4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	f000 fb74 	bl	800c2aa <xQueueCreateMutex>
 800bbc2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <osMutexWait+0x18>
    return osErrorParameter;
 800bbe0:	2380      	movs	r3, #128	@ 0x80
 800bbe2:	e03a      	b.n	800bc5a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbee:	d103      	bne.n	800bbf8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bbf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf4:	60fb      	str	r3, [r7, #12]
 800bbf6:	e009      	b.n	800bc0c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d006      	beq.n	800bc0c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <osMutexWait+0x40>
      ticks = 1;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bc0c:	f7ff ff31 	bl	800ba72 <inHandlerMode>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d017      	beq.n	800bc46 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bc16:	f107 0308 	add.w	r3, r7, #8
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 ff98 	bl	800cb54 <xQueueReceiveFromISR>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d001      	beq.n	800bc2e <osMutexWait+0x62>
      return osErrorOS;
 800bc2a:	23ff      	movs	r3, #255	@ 0xff
 800bc2c:	e015      	b.n	800bc5a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d011      	beq.n	800bc58 <osMutexWait+0x8c>
 800bc34:	4b0b      	ldr	r3, [pc, #44]	@ (800bc64 <osMutexWait+0x98>)
 800bc36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc3a:	601a      	str	r2, [r3, #0]
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	e008      	b.n	800bc58 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bc46:	68f9      	ldr	r1, [r7, #12]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fe73 	bl	800c934 <xQueueSemaphoreTake>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d001      	beq.n	800bc58 <osMutexWait+0x8c>
    return osErrorOS;
 800bc54:	23ff      	movs	r3, #255	@ 0xff
 800bc56:	e000      	b.n	800bc5a <osMutexWait+0x8e>
  }
  
  return osOK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	e000ed04 	.word	0xe000ed04

0800bc68 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bc74:	2300      	movs	r3, #0
 800bc76:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800bc78:	f7ff fefb 	bl	800ba72 <inHandlerMode>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d016      	beq.n	800bcb0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bc82:	f107 0308 	add.w	r3, r7, #8
 800bc86:	4619      	mov	r1, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fce1 	bl	800c650 <xQueueGiveFromISR>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d001      	beq.n	800bc98 <osMutexRelease+0x30>
      return osErrorOS;
 800bc94:	23ff      	movs	r3, #255	@ 0xff
 800bc96:	e017      	b.n	800bcc8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d013      	beq.n	800bcc6 <osMutexRelease+0x5e>
 800bc9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bcd0 <osMutexRelease+0x68>)
 800bca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bca4:	601a      	str	r2, [r3, #0]
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	e00a      	b.n	800bcc6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fb2a 	bl	800c310 <xQueueGenericSend>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d001      	beq.n	800bcc6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800bcc2:	23ff      	movs	r3, #255	@ 0xff
 800bcc4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	e000ed04 	.word	0xe000ed04

0800bcd4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bcd4:	b590      	push	{r4, r7, lr}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af02      	add	r7, sp, #8
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d011      	beq.n	800bd0a <osMessageCreate+0x36>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00d      	beq.n	800bd0a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6818      	ldr	r0, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6859      	ldr	r1, [r3, #4]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	689a      	ldr	r2, [r3, #8]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	2400      	movs	r4, #0
 800bd00:	9400      	str	r4, [sp, #0]
 800bd02:	f000 f9e1 	bl	800c0c8 <xQueueGenericCreateStatic>
 800bd06:	4603      	mov	r3, r0
 800bd08:	e008      	b.n	800bd1c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6818      	ldr	r0, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	4619      	mov	r1, r3
 800bd16:	f000 fa54 	bl	800c1c2 <xQueueGenericCreate>
 800bd1a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd90      	pop	{r4, r7, pc}

0800bd24 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <osMessagePut+0x1e>
    ticks = 1;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bd42:	f7ff fe96 	bl	800ba72 <inHandlerMode>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d018      	beq.n	800bd7e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bd4c:	f107 0210 	add.w	r2, r7, #16
 800bd50:	f107 0108 	add.w	r1, r7, #8
 800bd54:	2300      	movs	r3, #0
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f000 fbdc 	bl	800c514 <xQueueGenericSendFromISR>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d001      	beq.n	800bd66 <osMessagePut+0x42>
      return osErrorOS;
 800bd62:	23ff      	movs	r3, #255	@ 0xff
 800bd64:	e018      	b.n	800bd98 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d014      	beq.n	800bd96 <osMessagePut+0x72>
 800bd6c:	4b0c      	ldr	r3, [pc, #48]	@ (800bda0 <osMessagePut+0x7c>)
 800bd6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	e00b      	b.n	800bd96 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bd7e:	f107 0108 	add.w	r1, r7, #8
 800bd82:	2300      	movs	r3, #0
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f000 fac2 	bl	800c310 <xQueueGenericSend>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d001      	beq.n	800bd96 <osMessagePut+0x72>
      return osErrorOS;
 800bd92:	23ff      	movs	r3, #255	@ 0xff
 800bd94:	e000      	b.n	800bd98 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	e000ed04 	.word	0xe000ed04

0800bda4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bda4:	b590      	push	{r4, r7, lr}
 800bda6:	b08b      	sub	sp, #44	@ 0x2c
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10a      	bne.n	800bdd4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bdbe:	2380      	movs	r3, #128	@ 0x80
 800bdc0:	617b      	str	r3, [r7, #20]
    return event;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	461c      	mov	r4, r3
 800bdc6:	f107 0314 	add.w	r3, r7, #20
 800bdca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bdce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bdd2:	e054      	b.n	800be7e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde2:	d103      	bne.n	800bdec <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bde4:	f04f 33ff 	mov.w	r3, #4294967295
 800bde8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdea:	e009      	b.n	800be00 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d006      	beq.n	800be00 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d101      	bne.n	800be00 <osMessageGet+0x5c>
      ticks = 1;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800be00:	f7ff fe37 	bl	800ba72 <inHandlerMode>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d01c      	beq.n	800be44 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800be0a:	f107 0220 	add.w	r2, r7, #32
 800be0e:	f107 0314 	add.w	r3, r7, #20
 800be12:	3304      	adds	r3, #4
 800be14:	4619      	mov	r1, r3
 800be16:	68b8      	ldr	r0, [r7, #8]
 800be18:	f000 fe9c 	bl	800cb54 <xQueueReceiveFromISR>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d102      	bne.n	800be28 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800be22:	2310      	movs	r3, #16
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	e001      	b.n	800be2c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800be28:	2300      	movs	r3, #0
 800be2a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d01d      	beq.n	800be6e <osMessageGet+0xca>
 800be32:	4b15      	ldr	r3, [pc, #84]	@ (800be88 <osMessageGet+0xe4>)
 800be34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be38:	601a      	str	r2, [r3, #0]
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	e014      	b.n	800be6e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800be44:	f107 0314 	add.w	r3, r7, #20
 800be48:	3304      	adds	r3, #4
 800be4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be4c:	4619      	mov	r1, r3
 800be4e:	68b8      	ldr	r0, [r7, #8]
 800be50:	f000 fc8e 	bl	800c770 <xQueueReceive>
 800be54:	4603      	mov	r3, r0
 800be56:	2b01      	cmp	r3, #1
 800be58:	d102      	bne.n	800be60 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800be5a:	2310      	movs	r3, #16
 800be5c:	617b      	str	r3, [r7, #20]
 800be5e:	e006      	b.n	800be6e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800be60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <osMessageGet+0xc6>
 800be66:	2300      	movs	r3, #0
 800be68:	e000      	b.n	800be6c <osMessageGet+0xc8>
 800be6a:	2340      	movs	r3, #64	@ 0x40
 800be6c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	461c      	mov	r4, r3
 800be72:	f107 0314 	add.w	r3, r7, #20
 800be76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	372c      	adds	r7, #44	@ 0x2c
 800be82:	46bd      	mov	sp, r7
 800be84:	bd90      	pop	{r4, r7, pc}
 800be86:	bf00      	nop
 800be88:	e000ed04 	.word	0xe000ed04

0800be8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f103 0208 	add.w	r2, r3, #8
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f04f 32ff 	mov.w	r2, #4294967295
 800bea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f103 0208 	add.w	r2, r3, #8
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f103 0208 	add.w	r2, r3, #8
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800beda:	bf00      	nop
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bee6:	b480      	push	{r7}
 800bee8:	b085      	sub	sp, #20
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	689a      	ldr	r2, [r3, #8]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	601a      	str	r2, [r3, #0]
}
 800bf22:	bf00      	nop
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b085      	sub	sp, #20
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf44:	d103      	bne.n	800bf4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	e00c      	b.n	800bf68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	3308      	adds	r3, #8
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	e002      	b.n	800bf5c <vListInsert+0x2e>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d2f6      	bcs.n	800bf56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	601a      	str	r2, [r3, #0]
}
 800bf94:	bf00      	nop
 800bf96:	3714      	adds	r7, #20
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	6892      	ldr	r2, [r2, #8]
 800bfb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	6852      	ldr	r2, [r2, #4]
 800bfc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d103      	bne.n	800bfd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689a      	ldr	r2, [r3, #8]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	1e5a      	subs	r2, r3, #1
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10b      	bne.n	800c020 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c01a:	bf00      	nop
 800c01c:	bf00      	nop
 800c01e:	e7fd      	b.n	800c01c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c020:	f002 f892 	bl	800e148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c02c:	68f9      	ldr	r1, [r7, #12]
 800c02e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c030:	fb01 f303 	mul.w	r3, r1, r3
 800c034:	441a      	add	r2, r3
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c050:	3b01      	subs	r3, #1
 800c052:	68f9      	ldr	r1, [r7, #12]
 800c054:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c056:	fb01 f303 	mul.w	r3, r1, r3
 800c05a:	441a      	add	r2, r3
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	22ff      	movs	r2, #255	@ 0xff
 800c064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	22ff      	movs	r2, #255	@ 0xff
 800c06c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d114      	bne.n	800c0a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d01a      	beq.n	800c0b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3310      	adds	r3, #16
 800c082:	4618      	mov	r0, r3
 800c084:	f001 fb4a 	bl	800d71c <xTaskRemoveFromEventList>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d012      	beq.n	800c0b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c08e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c4 <xQueueGenericReset+0xd0>)
 800c090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	e009      	b.n	800c0b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3310      	adds	r3, #16
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7ff fef1 	bl	800be8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3324      	adds	r3, #36	@ 0x24
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff feec 	bl	800be8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0b4:	f002 f87a 	bl	800e1ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0b8:	2301      	movs	r3, #1
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	e000ed04 	.word	0xe000ed04

0800c0c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b08e      	sub	sp, #56	@ 0x38
 800c0cc:	af02      	add	r7, sp, #8
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10b      	bne.n	800c0f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c0ee:	bf00      	nop
 800c0f0:	bf00      	nop
 800c0f2:	e7fd      	b.n	800c0f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10b      	bne.n	800c112 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c10c:	bf00      	nop
 800c10e:	bf00      	nop
 800c110:	e7fd      	b.n	800c10e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <xQueueGenericCreateStatic+0x56>
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <xQueueGenericCreateStatic+0x5a>
 800c11e:	2301      	movs	r3, #1
 800c120:	e000      	b.n	800c124 <xQueueGenericCreateStatic+0x5c>
 800c122:	2300      	movs	r3, #0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10b      	bne.n	800c140 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	623b      	str	r3, [r7, #32]
}
 800c13a:	bf00      	nop
 800c13c:	bf00      	nop
 800c13e:	e7fd      	b.n	800c13c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d102      	bne.n	800c14c <xQueueGenericCreateStatic+0x84>
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <xQueueGenericCreateStatic+0x88>
 800c14c:	2301      	movs	r3, #1
 800c14e:	e000      	b.n	800c152 <xQueueGenericCreateStatic+0x8a>
 800c150:	2300      	movs	r3, #0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10b      	bne.n	800c16e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	61fb      	str	r3, [r7, #28]
}
 800c168:	bf00      	nop
 800c16a:	bf00      	nop
 800c16c:	e7fd      	b.n	800c16a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c16e:	2348      	movs	r3, #72	@ 0x48
 800c170:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b48      	cmp	r3, #72	@ 0x48
 800c176:	d00b      	beq.n	800c190 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	61bb      	str	r3, [r7, #24]
}
 800c18a:	bf00      	nop
 800c18c:	bf00      	nop
 800c18e:	e7fd      	b.n	800c18c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c190:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00d      	beq.n	800c1b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 f840 	bl	800c238 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3730      	adds	r7, #48	@ 0x30
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b08a      	sub	sp, #40	@ 0x28
 800c1c6:	af02      	add	r7, sp, #8
 800c1c8:	60f8      	str	r0, [r7, #12]
 800c1ca:	60b9      	str	r1, [r7, #8]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10b      	bne.n	800c1ee <xQueueGenericCreate+0x2c>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	613b      	str	r3, [r7, #16]
}
 800c1e8:	bf00      	nop
 800c1ea:	bf00      	nop
 800c1ec:	e7fd      	b.n	800c1ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	fb02 f303 	mul.w	r3, r2, r3
 800c1f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	3348      	adds	r3, #72	@ 0x48
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f002 f8c5 	bl	800e38c <pvPortMalloc>
 800c202:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d011      	beq.n	800c22e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	3348      	adds	r3, #72	@ 0x48
 800c212:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c21c:	79fa      	ldrb	r2, [r7, #7]
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	4613      	mov	r3, r2
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	68b9      	ldr	r1, [r7, #8]
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 f805 	bl	800c238 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c22e:	69bb      	ldr	r3, [r7, #24]
	}
 800c230:	4618      	mov	r0, r3
 800c232:	3720      	adds	r7, #32
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d103      	bne.n	800c254 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	69ba      	ldr	r2, [r7, #24]
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	e002      	b.n	800c25a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c266:	2101      	movs	r1, #1
 800c268:	69b8      	ldr	r0, [r7, #24]
 800c26a:	f7ff fec3 	bl	800bff4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c26e:	bf00      	nop
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c276:	b580      	push	{r7, lr}
 800c278:	b082      	sub	sp, #8
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00e      	beq.n	800c2a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c296:	2300      	movs	r3, #0
 800c298:	2200      	movs	r2, #0
 800c29a:	2100      	movs	r1, #0
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 f837 	bl	800c310 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c2a2:	bf00      	nop
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b086      	sub	sp, #24
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c2bc:	79fb      	ldrb	r3, [r7, #7]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	6939      	ldr	r1, [r7, #16]
 800c2c2:	6978      	ldr	r0, [r7, #20]
 800c2c4:	f7ff ff7d 	bl	800c1c2 <xQueueGenericCreate>
 800c2c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f7ff ffd3 	bl	800c276 <prvInitialiseMutex>

		return xNewQueue;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
	}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b088      	sub	sp, #32
 800c2de:	af02      	add	r7, sp, #8
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	6039      	str	r1, [r7, #0]
 800c2e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	617b      	str	r3, [r7, #20]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c2ee:	79fb      	ldrb	r3, [r7, #7]
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	6939      	ldr	r1, [r7, #16]
 800c2f8:	6978      	ldr	r0, [r7, #20]
 800c2fa:	f7ff fee5 	bl	800c0c8 <xQueueGenericCreateStatic>
 800c2fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f7ff ffb8 	bl	800c276 <prvInitialiseMutex>

		return xNewQueue;
 800c306:	68fb      	ldr	r3, [r7, #12]
	}
 800c308:	4618      	mov	r0, r3
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b08e      	sub	sp, #56	@ 0x38
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
 800c31c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c31e:	2300      	movs	r3, #0
 800c320:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10b      	bne.n	800c344 <xQueueGenericSend+0x34>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c33e:	bf00      	nop
 800c340:	bf00      	nop
 800c342:	e7fd      	b.n	800c340 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d103      	bne.n	800c352 <xQueueGenericSend+0x42>
 800c34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <xQueueGenericSend+0x46>
 800c352:	2301      	movs	r3, #1
 800c354:	e000      	b.n	800c358 <xQueueGenericSend+0x48>
 800c356:	2300      	movs	r3, #0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10b      	bne.n	800c374 <xQueueGenericSend+0x64>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c36e:	bf00      	nop
 800c370:	bf00      	nop
 800c372:	e7fd      	b.n	800c370 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b02      	cmp	r3, #2
 800c378:	d103      	bne.n	800c382 <xQueueGenericSend+0x72>
 800c37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d101      	bne.n	800c386 <xQueueGenericSend+0x76>
 800c382:	2301      	movs	r3, #1
 800c384:	e000      	b.n	800c388 <xQueueGenericSend+0x78>
 800c386:	2300      	movs	r3, #0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10b      	bne.n	800c3a4 <xQueueGenericSend+0x94>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	623b      	str	r3, [r7, #32]
}
 800c39e:	bf00      	nop
 800c3a0:	bf00      	nop
 800c3a2:	e7fd      	b.n	800c3a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3a4:	f001 fb7a 	bl	800da9c <xTaskGetSchedulerState>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d102      	bne.n	800c3b4 <xQueueGenericSend+0xa4>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d101      	bne.n	800c3b8 <xQueueGenericSend+0xa8>
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e000      	b.n	800c3ba <xQueueGenericSend+0xaa>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10b      	bne.n	800c3d6 <xQueueGenericSend+0xc6>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	61fb      	str	r3, [r7, #28]
}
 800c3d0:	bf00      	nop
 800c3d2:	bf00      	nop
 800c3d4:	e7fd      	b.n	800c3d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3d6:	f001 feb7 	bl	800e148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d302      	bcc.n	800c3ec <xQueueGenericSend+0xdc>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d129      	bne.n	800c440 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	68b9      	ldr	r1, [r7, #8]
 800c3f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3f2:	f000 fc49 	bl	800cc88 <prvCopyDataToQueue>
 800c3f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d010      	beq.n	800c422 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c402:	3324      	adds	r3, #36	@ 0x24
 800c404:	4618      	mov	r0, r3
 800c406:	f001 f989 	bl	800d71c <xTaskRemoveFromEventList>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d013      	beq.n	800c438 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c410:	4b3f      	ldr	r3, [pc, #252]	@ (800c510 <xQueueGenericSend+0x200>)
 800c412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c416:	601a      	str	r2, [r3, #0]
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	e00a      	b.n	800c438 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c424:	2b00      	cmp	r3, #0
 800c426:	d007      	beq.n	800c438 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c428:	4b39      	ldr	r3, [pc, #228]	@ (800c510 <xQueueGenericSend+0x200>)
 800c42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c42e:	601a      	str	r2, [r3, #0]
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c438:	f001 feb8 	bl	800e1ac <vPortExitCritical>
				return pdPASS;
 800c43c:	2301      	movs	r3, #1
 800c43e:	e063      	b.n	800c508 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d103      	bne.n	800c44e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c446:	f001 feb1 	bl	800e1ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	e05c      	b.n	800c508 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c450:	2b00      	cmp	r3, #0
 800c452:	d106      	bne.n	800c462 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c454:	f107 0314 	add.w	r3, r7, #20
 800c458:	4618      	mov	r0, r3
 800c45a:	f001 f9c3 	bl	800d7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c45e:	2301      	movs	r3, #1
 800c460:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c462:	f001 fea3 	bl	800e1ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c466:	f000 ff4f 	bl	800d308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c46a:	f001 fe6d 	bl	800e148 <vPortEnterCritical>
 800c46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c474:	b25b      	sxtb	r3, r3
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47a:	d103      	bne.n	800c484 <xQueueGenericSend+0x174>
 800c47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c48a:	b25b      	sxtb	r3, r3
 800c48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c490:	d103      	bne.n	800c49a <xQueueGenericSend+0x18a>
 800c492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c494:	2200      	movs	r2, #0
 800c496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c49a:	f001 fe87 	bl	800e1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c49e:	1d3a      	adds	r2, r7, #4
 800c4a0:	f107 0314 	add.w	r3, r7, #20
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f001 f9b2 	bl	800d810 <xTaskCheckForTimeOut>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d124      	bne.n	800c4fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c4b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4b4:	f000 fce0 	bl	800ce78 <prvIsQueueFull>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d018      	beq.n	800c4f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c0:	3310      	adds	r3, #16
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 f902 	bl	800d6d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4ce:	f000 fc6b 	bl	800cda8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4d2:	f000 ff27 	bl	800d324 <xTaskResumeAll>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f47f af7c 	bne.w	800c3d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c4de:	4b0c      	ldr	r3, [pc, #48]	@ (800c510 <xQueueGenericSend+0x200>)
 800c4e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	e772      	b.n	800c3d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4f2:	f000 fc59 	bl	800cda8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4f6:	f000 ff15 	bl	800d324 <xTaskResumeAll>
 800c4fa:	e76c      	b.n	800c3d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4fe:	f000 fc53 	bl	800cda8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c502:	f000 ff0f 	bl	800d324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3738      	adds	r7, #56	@ 0x38
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b090      	sub	sp, #64	@ 0x40
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10b      	bne.n	800c544 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c53e:	bf00      	nop
 800c540:	bf00      	nop
 800c542:	e7fd      	b.n	800c540 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d103      	bne.n	800c552 <xQueueGenericSendFromISR+0x3e>
 800c54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <xQueueGenericSendFromISR+0x42>
 800c552:	2301      	movs	r3, #1
 800c554:	e000      	b.n	800c558 <xQueueGenericSendFromISR+0x44>
 800c556:	2300      	movs	r3, #0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10b      	bne.n	800c574 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c56e:	bf00      	nop
 800c570:	bf00      	nop
 800c572:	e7fd      	b.n	800c570 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	2b02      	cmp	r3, #2
 800c578:	d103      	bne.n	800c582 <xQueueGenericSendFromISR+0x6e>
 800c57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d101      	bne.n	800c586 <xQueueGenericSendFromISR+0x72>
 800c582:	2301      	movs	r3, #1
 800c584:	e000      	b.n	800c588 <xQueueGenericSendFromISR+0x74>
 800c586:	2300      	movs	r3, #0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10b      	bne.n	800c5a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	623b      	str	r3, [r7, #32]
}
 800c59e:	bf00      	nop
 800c5a0:	bf00      	nop
 800c5a2:	e7fd      	b.n	800c5a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5a4:	f001 feb0 	bl	800e308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c5a8:	f3ef 8211 	mrs	r2, BASEPRI
 800c5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	61fa      	str	r2, [r7, #28]
 800c5be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d302      	bcc.n	800c5d6 <xQueueGenericSendFromISR+0xc2>
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d12f      	bne.n	800c636 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5e6:	683a      	ldr	r2, [r7, #0]
 800c5e8:	68b9      	ldr	r1, [r7, #8]
 800c5ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c5ec:	f000 fb4c 	bl	800cc88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f8:	d112      	bne.n	800c620 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d016      	beq.n	800c630 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c604:	3324      	adds	r3, #36	@ 0x24
 800c606:	4618      	mov	r0, r3
 800c608:	f001 f888 	bl	800d71c <xTaskRemoveFromEventList>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00e      	beq.n	800c630 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00b      	beq.n	800c630 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	e007      	b.n	800c630 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c620:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c624:	3301      	adds	r3, #1
 800c626:	b2db      	uxtb	r3, r3
 800c628:	b25a      	sxtb	r2, r3
 800c62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c630:	2301      	movs	r3, #1
 800c632:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c634:	e001      	b.n	800c63a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c636:	2300      	movs	r3, #0
 800c638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c63c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c644:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3740      	adds	r7, #64	@ 0x40
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b08e      	sub	sp, #56	@ 0x38
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10b      	bne.n	800c67c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	623b      	str	r3, [r7, #32]
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	e7fd      	b.n	800c678 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00b      	beq.n	800c69c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	61fb      	str	r3, [r7, #28]
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	e7fd      	b.n	800c698 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d103      	bne.n	800c6ac <xQueueGiveFromISR+0x5c>
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d101      	bne.n	800c6b0 <xQueueGiveFromISR+0x60>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e000      	b.n	800c6b2 <xQueueGiveFromISR+0x62>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10b      	bne.n	800c6ce <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	61bb      	str	r3, [r7, #24]
}
 800c6c8:	bf00      	nop
 800c6ca:	bf00      	nop
 800c6cc:	e7fd      	b.n	800c6ca <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6ce:	f001 fe1b 	bl	800e308 <vPortValidateInterruptPriority>
	__asm volatile
 800c6d2:	f3ef 8211 	mrs	r2, BASEPRI
 800c6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	617a      	str	r2, [r7, #20]
 800c6e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c6ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d22b      	bcs.n	800c756 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c700:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c710:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c718:	d112      	bne.n	800c740 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d016      	beq.n	800c750 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c724:	3324      	adds	r3, #36	@ 0x24
 800c726:	4618      	mov	r0, r3
 800c728:	f000 fff8 	bl	800d71c <xTaskRemoveFromEventList>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00e      	beq.n	800c750 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00b      	beq.n	800c750 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2201      	movs	r2, #1
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	e007      	b.n	800c750 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c744:	3301      	adds	r3, #1
 800c746:	b2db      	uxtb	r3, r3
 800c748:	b25a      	sxtb	r2, r3
 800c74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c74c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c750:	2301      	movs	r3, #1
 800c752:	637b      	str	r3, [r7, #52]	@ 0x34
 800c754:	e001      	b.n	800c75a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c756:	2300      	movs	r3, #0
 800c758:	637b      	str	r3, [r7, #52]	@ 0x34
 800c75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f383 8811 	msr	BASEPRI, r3
}
 800c764:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3738      	adds	r7, #56	@ 0x38
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b08c      	sub	sp, #48	@ 0x30
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c77c:	2300      	movs	r3, #0
 800c77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10b      	bne.n	800c7a2 <xQueueReceive+0x32>
	__asm volatile
 800c78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c78e:	f383 8811 	msr	BASEPRI, r3
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	f3bf 8f4f 	dsb	sy
 800c79a:	623b      	str	r3, [r7, #32]
}
 800c79c:	bf00      	nop
 800c79e:	bf00      	nop
 800c7a0:	e7fd      	b.n	800c79e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d103      	bne.n	800c7b0 <xQueueReceive+0x40>
 800c7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <xQueueReceive+0x44>
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e000      	b.n	800c7b6 <xQueueReceive+0x46>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10b      	bne.n	800c7d2 <xQueueReceive+0x62>
	__asm volatile
 800c7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	61fb      	str	r3, [r7, #28]
}
 800c7cc:	bf00      	nop
 800c7ce:	bf00      	nop
 800c7d0:	e7fd      	b.n	800c7ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7d2:	f001 f963 	bl	800da9c <xTaskGetSchedulerState>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d102      	bne.n	800c7e2 <xQueueReceive+0x72>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <xQueueReceive+0x76>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e000      	b.n	800c7e8 <xQueueReceive+0x78>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10b      	bne.n	800c804 <xQueueReceive+0x94>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	61bb      	str	r3, [r7, #24]
}
 800c7fe:	bf00      	nop
 800c800:	bf00      	nop
 800c802:	e7fd      	b.n	800c800 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c804:	f001 fca0 	bl	800e148 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c80c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c810:	2b00      	cmp	r3, #0
 800c812:	d01f      	beq.n	800c854 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c814:	68b9      	ldr	r1, [r7, #8]
 800c816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c818:	f000 faa0 	bl	800cd5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81e:	1e5a      	subs	r2, r3, #1
 800c820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c822:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00f      	beq.n	800c84c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82e:	3310      	adds	r3, #16
 800c830:	4618      	mov	r0, r3
 800c832:	f000 ff73 	bl	800d71c <xTaskRemoveFromEventList>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d007      	beq.n	800c84c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c83c:	4b3c      	ldr	r3, [pc, #240]	@ (800c930 <xQueueReceive+0x1c0>)
 800c83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	f3bf 8f4f 	dsb	sy
 800c848:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c84c:	f001 fcae 	bl	800e1ac <vPortExitCritical>
				return pdPASS;
 800c850:	2301      	movs	r3, #1
 800c852:	e069      	b.n	800c928 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d103      	bne.n	800c862 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c85a:	f001 fca7 	bl	800e1ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c85e:	2300      	movs	r3, #0
 800c860:	e062      	b.n	800c928 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c864:	2b00      	cmp	r3, #0
 800c866:	d106      	bne.n	800c876 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c868:	f107 0310 	add.w	r3, r7, #16
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 ffb9 	bl	800d7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c872:	2301      	movs	r3, #1
 800c874:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c876:	f001 fc99 	bl	800e1ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c87a:	f000 fd45 	bl	800d308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c87e:	f001 fc63 	bl	800e148 <vPortEnterCritical>
 800c882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c884:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c888:	b25b      	sxtb	r3, r3
 800c88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88e:	d103      	bne.n	800c898 <xQueueReceive+0x128>
 800c890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c892:	2200      	movs	r2, #0
 800c894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c89a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c89e:	b25b      	sxtb	r3, r3
 800c8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a4:	d103      	bne.n	800c8ae <xQueueReceive+0x13e>
 800c8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c8ae:	f001 fc7d 	bl	800e1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8b2:	1d3a      	adds	r2, r7, #4
 800c8b4:	f107 0310 	add.w	r3, r7, #16
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f000 ffa8 	bl	800d810 <xTaskCheckForTimeOut>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d123      	bne.n	800c90e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8c8:	f000 fac0 	bl	800ce4c <prvIsQueueEmpty>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d017      	beq.n	800c902 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d4:	3324      	adds	r3, #36	@ 0x24
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	4611      	mov	r1, r2
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 fef8 	bl	800d6d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8e2:	f000 fa61 	bl	800cda8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8e6:	f000 fd1d 	bl	800d324 <xTaskResumeAll>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d189      	bne.n	800c804 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800c930 <xQueueReceive+0x1c0>)
 800c8f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8f6:	601a      	str	r2, [r3, #0]
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	e780      	b.n	800c804 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c904:	f000 fa50 	bl	800cda8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c908:	f000 fd0c 	bl	800d324 <xTaskResumeAll>
 800c90c:	e77a      	b.n	800c804 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c90e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c910:	f000 fa4a 	bl	800cda8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c914:	f000 fd06 	bl	800d324 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c91a:	f000 fa97 	bl	800ce4c <prvIsQueueEmpty>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	f43f af6f 	beq.w	800c804 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c926:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3730      	adds	r7, #48	@ 0x30
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	e000ed04 	.word	0xe000ed04

0800c934 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b08e      	sub	sp, #56	@ 0x38
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c93e:	2300      	movs	r3, #0
 800c940:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c946:	2300      	movs	r3, #0
 800c948:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10b      	bne.n	800c968 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	623b      	str	r3, [r7, #32]
}
 800c962:	bf00      	nop
 800c964:	bf00      	nop
 800c966:	e7fd      	b.n	800c964 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00b      	beq.n	800c988 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c974:	f383 8811 	msr	BASEPRI, r3
 800c978:	f3bf 8f6f 	isb	sy
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	61fb      	str	r3, [r7, #28]
}
 800c982:	bf00      	nop
 800c984:	bf00      	nop
 800c986:	e7fd      	b.n	800c984 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c988:	f001 f888 	bl	800da9c <xTaskGetSchedulerState>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <xQueueSemaphoreTake+0x64>
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d101      	bne.n	800c99c <xQueueSemaphoreTake+0x68>
 800c998:	2301      	movs	r3, #1
 800c99a:	e000      	b.n	800c99e <xQueueSemaphoreTake+0x6a>
 800c99c:	2300      	movs	r3, #0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10b      	bne.n	800c9ba <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	61bb      	str	r3, [r7, #24]
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop
 800c9b8:	e7fd      	b.n	800c9b6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9ba:	f001 fbc5 	bl	800e148 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9c2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d024      	beq.n	800ca14 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9cc:	1e5a      	subs	r2, r3, #1
 800c9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d104      	bne.n	800c9e4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c9da:	f001 fa0b 	bl	800ddf4 <pvTaskIncrementMutexHeldCount>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00f      	beq.n	800ca0c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ee:	3310      	adds	r3, #16
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 fe93 	bl	800d71c <xTaskRemoveFromEventList>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d007      	beq.n	800ca0c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c9fc:	4b54      	ldr	r3, [pc, #336]	@ (800cb50 <xQueueSemaphoreTake+0x21c>)
 800c9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca0c:	f001 fbce 	bl	800e1ac <vPortExitCritical>
				return pdPASS;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e098      	b.n	800cb46 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d112      	bne.n	800ca40 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00b      	beq.n	800ca38 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	617b      	str	r3, [r7, #20]
}
 800ca32:	bf00      	nop
 800ca34:	bf00      	nop
 800ca36:	e7fd      	b.n	800ca34 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ca38:	f001 fbb8 	bl	800e1ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	e082      	b.n	800cb46 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d106      	bne.n	800ca54 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca46:	f107 030c 	add.w	r3, r7, #12
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 feca 	bl	800d7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca50:	2301      	movs	r3, #1
 800ca52:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca54:	f001 fbaa 	bl	800e1ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca58:	f000 fc56 	bl	800d308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca5c:	f001 fb74 	bl	800e148 <vPortEnterCritical>
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca66:	b25b      	sxtb	r3, r3
 800ca68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6c:	d103      	bne.n	800ca76 <xQueueSemaphoreTake+0x142>
 800ca6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca7c:	b25b      	sxtb	r3, r3
 800ca7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca82:	d103      	bne.n	800ca8c <xQueueSemaphoreTake+0x158>
 800ca84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca86:	2200      	movs	r2, #0
 800ca88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca8c:	f001 fb8e 	bl	800e1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca90:	463a      	mov	r2, r7
 800ca92:	f107 030c 	add.w	r3, r7, #12
 800ca96:	4611      	mov	r1, r2
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 feb9 	bl	800d810 <xTaskCheckForTimeOut>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d132      	bne.n	800cb0a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800caa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800caa6:	f000 f9d1 	bl	800ce4c <prvIsQueueEmpty>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d026      	beq.n	800cafe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d109      	bne.n	800cacc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cab8:	f001 fb46 	bl	800e148 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f001 f809 	bl	800dad8 <xTaskPriorityInherit>
 800cac6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cac8:	f001 fb70 	bl	800e1ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cace:	3324      	adds	r3, #36	@ 0x24
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	4611      	mov	r1, r2
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 fdfb 	bl	800d6d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cada:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cadc:	f000 f964 	bl	800cda8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cae0:	f000 fc20 	bl	800d324 <xTaskResumeAll>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f47f af67 	bne.w	800c9ba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800caec:	4b18      	ldr	r3, [pc, #96]	@ (800cb50 <xQueueSemaphoreTake+0x21c>)
 800caee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	f3bf 8f6f 	isb	sy
 800cafc:	e75d      	b.n	800c9ba <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cafe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb00:	f000 f952 	bl	800cda8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb04:	f000 fc0e 	bl	800d324 <xTaskResumeAll>
 800cb08:	e757      	b.n	800c9ba <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cb0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb0c:	f000 f94c 	bl	800cda8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb10:	f000 fc08 	bl	800d324 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb16:	f000 f999 	bl	800ce4c <prvIsQueueEmpty>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f43f af4c 	beq.w	800c9ba <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00d      	beq.n	800cb44 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cb28:	f001 fb0e 	bl	800e148 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb2e:	f000 f893 	bl	800cc58 <prvGetDisinheritPriorityAfterTimeout>
 800cb32:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f001 f8ca 	bl	800dcd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cb40:	f001 fb34 	bl	800e1ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3738      	adds	r7, #56	@ 0x38
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	e000ed04 	.word	0xe000ed04

0800cb54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08e      	sub	sp, #56	@ 0x38
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10b      	bne.n	800cb82 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	623b      	str	r3, [r7, #32]
}
 800cb7c:	bf00      	nop
 800cb7e:	bf00      	nop
 800cb80:	e7fd      	b.n	800cb7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d103      	bne.n	800cb90 <xQueueReceiveFromISR+0x3c>
 800cb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d101      	bne.n	800cb94 <xQueueReceiveFromISR+0x40>
 800cb90:	2301      	movs	r3, #1
 800cb92:	e000      	b.n	800cb96 <xQueueReceiveFromISR+0x42>
 800cb94:	2300      	movs	r3, #0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10b      	bne.n	800cbb2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	61fb      	str	r3, [r7, #28]
}
 800cbac:	bf00      	nop
 800cbae:	bf00      	nop
 800cbb0:	e7fd      	b.n	800cbae <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbb2:	f001 fba9 	bl	800e308 <vPortValidateInterruptPriority>
	__asm volatile
 800cbb6:	f3ef 8211 	mrs	r2, BASEPRI
 800cbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	61ba      	str	r2, [r7, #24]
 800cbcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cbce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbd6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d02f      	beq.n	800cc3e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cbe8:	68b9      	ldr	r1, [r7, #8]
 800cbea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbec:	f000 f8b6 	bl	800cd5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf2:	1e5a      	subs	r2, r3, #1
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cbf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc00:	d112      	bne.n	800cc28 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d016      	beq.n	800cc38 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0c:	3310      	adds	r3, #16
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 fd84 	bl	800d71c <xTaskRemoveFromEventList>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00e      	beq.n	800cc38 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00b      	beq.n	800cc38 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2201      	movs	r2, #1
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	e007      	b.n	800cc38 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cc28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	b25a      	sxtb	r2, r3
 800cc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc3c:	e001      	b.n	800cc42 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc44:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	f383 8811 	msr	BASEPRI, r3
}
 800cc4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3738      	adds	r7, #56	@ 0x38
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d006      	beq.n	800cc76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f1c3 0307 	rsb	r3, r3, #7
 800cc72:	60fb      	str	r3, [r7, #12]
 800cc74:	e001      	b.n	800cc7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cc76:	2300      	movs	r3, #0
 800cc78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
	}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b086      	sub	sp, #24
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cc94:	2300      	movs	r3, #0
 800cc96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10d      	bne.n	800ccc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d14d      	bne.n	800cd4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 ff86 	bl	800dbc4 <xTaskPriorityDisinherit>
 800ccb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	609a      	str	r2, [r3, #8]
 800ccc0:	e043      	b.n	800cd4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d119      	bne.n	800ccfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6858      	ldr	r0, [r3, #4]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	68b9      	ldr	r1, [r7, #8]
 800ccd4:	f001 ff57 	bl	800eb86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cce0:	441a      	add	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	685a      	ldr	r2, [r3, #4]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d32b      	bcc.n	800cd4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	605a      	str	r2, [r3, #4]
 800ccfa:	e026      	b.n	800cd4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	68d8      	ldr	r0, [r3, #12]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd04:	461a      	mov	r2, r3
 800cd06:	68b9      	ldr	r1, [r7, #8]
 800cd08:	f001 ff3d 	bl	800eb86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	68da      	ldr	r2, [r3, #12]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd14:	425b      	negs	r3, r3
 800cd16:	441a      	add	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	68da      	ldr	r2, [r3, #12]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d207      	bcs.n	800cd38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	689a      	ldr	r2, [r3, #8]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd30:	425b      	negs	r3, r3
 800cd32:	441a      	add	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d105      	bne.n	800cd4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d002      	beq.n	800cd4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	3b01      	subs	r3, #1
 800cd48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cd52:	697b      	ldr	r3, [r7, #20]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d018      	beq.n	800cda0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	68da      	ldr	r2, [r3, #12]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd76:	441a      	add	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	68da      	ldr	r2, [r3, #12]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d303      	bcc.n	800cd90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68d9      	ldr	r1, [r3, #12]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd98:	461a      	mov	r2, r3
 800cd9a:	6838      	ldr	r0, [r7, #0]
 800cd9c:	f001 fef3 	bl	800eb86 <memcpy>
	}
}
 800cda0:	bf00      	nop
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cdb0:	f001 f9ca 	bl	800e148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cdba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cdbc:	e011      	b.n	800cde2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d012      	beq.n	800cdec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	3324      	adds	r3, #36	@ 0x24
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 fca6 	bl	800d71c <xTaskRemoveFromEventList>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d001      	beq.n	800cdda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cdd6:	f000 fd7f 	bl	800d8d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	dce9      	bgt.n	800cdbe <prvUnlockQueue+0x16>
 800cdea:	e000      	b.n	800cdee <prvUnlockQueue+0x46>
					break;
 800cdec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	22ff      	movs	r2, #255	@ 0xff
 800cdf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cdf6:	f001 f9d9 	bl	800e1ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cdfa:	f001 f9a5 	bl	800e148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce06:	e011      	b.n	800ce2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d012      	beq.n	800ce36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3310      	adds	r3, #16
 800ce14:	4618      	mov	r0, r3
 800ce16:	f000 fc81 	bl	800d71c <xTaskRemoveFromEventList>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ce20:	f000 fd5a 	bl	800d8d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ce24:	7bbb      	ldrb	r3, [r7, #14]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	dce9      	bgt.n	800ce08 <prvUnlockQueue+0x60>
 800ce34:	e000      	b.n	800ce38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ce36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	22ff      	movs	r2, #255	@ 0xff
 800ce3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ce40:	f001 f9b4 	bl	800e1ac <vPortExitCritical>
}
 800ce44:	bf00      	nop
 800ce46:	3710      	adds	r7, #16
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce54:	f001 f978 	bl	800e148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d102      	bne.n	800ce66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ce60:	2301      	movs	r3, #1
 800ce62:	60fb      	str	r3, [r7, #12]
 800ce64:	e001      	b.n	800ce6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ce66:	2300      	movs	r3, #0
 800ce68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce6a:	f001 f99f 	bl	800e1ac <vPortExitCritical>

	return xReturn;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce80:	f001 f962 	bl	800e148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d102      	bne.n	800ce96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ce90:	2301      	movs	r3, #1
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	e001      	b.n	800ce9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ce96:	2300      	movs	r3, #0
 800ce98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce9a:	f001 f987 	bl	800e1ac <vPortExitCritical>

	return xReturn;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b08e      	sub	sp, #56	@ 0x38
 800ceac:	af04      	add	r7, sp, #16
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ceb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10b      	bne.n	800ced4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	623b      	str	r3, [r7, #32]
}
 800cece:	bf00      	nop
 800ced0:	bf00      	nop
 800ced2:	e7fd      	b.n	800ced0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ced4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10b      	bne.n	800cef2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	61fb      	str	r3, [r7, #28]
}
 800ceec:	bf00      	nop
 800ceee:	bf00      	nop
 800cef0:	e7fd      	b.n	800ceee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cef2:	2354      	movs	r3, #84	@ 0x54
 800cef4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	2b54      	cmp	r3, #84	@ 0x54
 800cefa:	d00b      	beq.n	800cf14 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	61bb      	str	r3, [r7, #24]
}
 800cf0e:	bf00      	nop
 800cf10:	bf00      	nop
 800cf12:	e7fd      	b.n	800cf10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d01e      	beq.n	800cf5a <xTaskCreateStatic+0xb2>
 800cf1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d01b      	beq.n	800cf5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2e:	2202      	movs	r2, #2
 800cf30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf34:	2300      	movs	r3, #0
 800cf36:	9303      	str	r3, [sp, #12]
 800cf38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3a:	9302      	str	r3, [sp, #8]
 800cf3c:	f107 0314 	add.w	r3, r7, #20
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	68b9      	ldr	r1, [r7, #8]
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f000 f850 	bl	800cff2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf54:	f000 f8d6 	bl	800d104 <prvAddNewTaskToReadyList>
 800cf58:	e001      	b.n	800cf5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf5e:	697b      	ldr	r3, [r7, #20]
	}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3728      	adds	r7, #40	@ 0x28
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08c      	sub	sp, #48	@ 0x30
 800cf6c:	af04      	add	r7, sp, #16
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	603b      	str	r3, [r7, #0]
 800cf74:	4613      	mov	r3, r2
 800cf76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf78:	88fb      	ldrh	r3, [r7, #6]
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f001 fa05 	bl	800e38c <pvPortMalloc>
 800cf82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00e      	beq.n	800cfa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf8a:	2054      	movs	r0, #84	@ 0x54
 800cf8c:	f001 f9fe 	bl	800e38c <pvPortMalloc>
 800cf90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800cf9e:	e005      	b.n	800cfac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cfa0:	6978      	ldr	r0, [r7, #20]
 800cfa2:	f001 fac1 	bl	800e528 <vPortFree>
 800cfa6:	e001      	b.n	800cfac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d017      	beq.n	800cfe2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfba:	88fa      	ldrh	r2, [r7, #6]
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	9303      	str	r3, [sp, #12]
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	9302      	str	r3, [sp, #8]
 800cfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc6:	9301      	str	r3, [sp, #4]
 800cfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	68b9      	ldr	r1, [r7, #8]
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f000 f80e 	bl	800cff2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfd6:	69f8      	ldr	r0, [r7, #28]
 800cfd8:	f000 f894 	bl	800d104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	61bb      	str	r3, [r7, #24]
 800cfe0:	e002      	b.n	800cfe8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cfe2:	f04f 33ff 	mov.w	r3, #4294967295
 800cfe6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cfe8:	69bb      	ldr	r3, [r7, #24]
	}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3720      	adds	r7, #32
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b088      	sub	sp, #32
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	607a      	str	r2, [r7, #4]
 800cffe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d00a:	3b01      	subs	r3, #1
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	f023 0307 	bic.w	r3, r3, #7
 800d018:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	f003 0307 	and.w	r3, r3, #7
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00b      	beq.n	800d03c <prvInitialiseNewTask+0x4a>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	617b      	str	r3, [r7, #20]
}
 800d036:	bf00      	nop
 800d038:	bf00      	nop
 800d03a:	e7fd      	b.n	800d038 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d01f      	beq.n	800d082 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d042:	2300      	movs	r3, #0
 800d044:	61fb      	str	r3, [r7, #28]
 800d046:	e012      	b.n	800d06e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	4413      	add	r3, r2
 800d04e:	7819      	ldrb	r1, [r3, #0]
 800d050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	4413      	add	r3, r2
 800d056:	3334      	adds	r3, #52	@ 0x34
 800d058:	460a      	mov	r2, r1
 800d05a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	4413      	add	r3, r2
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d006      	beq.n	800d076 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	3301      	adds	r3, #1
 800d06c:	61fb      	str	r3, [r7, #28]
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	2b0f      	cmp	r3, #15
 800d072:	d9e9      	bls.n	800d048 <prvInitialiseNewTask+0x56>
 800d074:	e000      	b.n	800d078 <prvInitialiseNewTask+0x86>
			{
				break;
 800d076:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d080:	e003      	b.n	800d08a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08c:	2b06      	cmp	r3, #6
 800d08e:	d901      	bls.n	800d094 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d090:	2306      	movs	r3, #6
 800d092:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d098:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d09e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fe ff0e 	bl	800becc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b2:	3318      	adds	r3, #24
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fe ff09 	bl	800becc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c2:	f1c3 0207 	rsb	r2, r3, #7
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	68f9      	ldr	r1, [r7, #12]
 800d0e2:	69b8      	ldr	r0, [r7, #24]
 800d0e4:	f000 ff00 	bl	800dee8 <pxPortInitialiseStack>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0fa:	bf00      	nop
 800d0fc:	3720      	adds	r7, #32
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
	...

0800d104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d10c:	f001 f81c 	bl	800e148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d110:	4b2a      	ldr	r3, [pc, #168]	@ (800d1bc <prvAddNewTaskToReadyList+0xb8>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3301      	adds	r3, #1
 800d116:	4a29      	ldr	r2, [pc, #164]	@ (800d1bc <prvAddNewTaskToReadyList+0xb8>)
 800d118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d11a:	4b29      	ldr	r3, [pc, #164]	@ (800d1c0 <prvAddNewTaskToReadyList+0xbc>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d109      	bne.n	800d136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d122:	4a27      	ldr	r2, [pc, #156]	@ (800d1c0 <prvAddNewTaskToReadyList+0xbc>)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d128:	4b24      	ldr	r3, [pc, #144]	@ (800d1bc <prvAddNewTaskToReadyList+0xb8>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d110      	bne.n	800d152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d130:	f000 fbf6 	bl	800d920 <prvInitialiseTaskLists>
 800d134:	e00d      	b.n	800d152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d136:	4b23      	ldr	r3, [pc, #140]	@ (800d1c4 <prvAddNewTaskToReadyList+0xc0>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d109      	bne.n	800d152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d13e:	4b20      	ldr	r3, [pc, #128]	@ (800d1c0 <prvAddNewTaskToReadyList+0xbc>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d148:	429a      	cmp	r2, r3
 800d14a:	d802      	bhi.n	800d152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d14c:	4a1c      	ldr	r2, [pc, #112]	@ (800d1c0 <prvAddNewTaskToReadyList+0xbc>)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d152:	4b1d      	ldr	r3, [pc, #116]	@ (800d1c8 <prvAddNewTaskToReadyList+0xc4>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	3301      	adds	r3, #1
 800d158:	4a1b      	ldr	r2, [pc, #108]	@ (800d1c8 <prvAddNewTaskToReadyList+0xc4>)
 800d15a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d160:	2201      	movs	r2, #1
 800d162:	409a      	lsls	r2, r3
 800d164:	4b19      	ldr	r3, [pc, #100]	@ (800d1cc <prvAddNewTaskToReadyList+0xc8>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4313      	orrs	r3, r2
 800d16a:	4a18      	ldr	r2, [pc, #96]	@ (800d1cc <prvAddNewTaskToReadyList+0xc8>)
 800d16c:	6013      	str	r3, [r2, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d172:	4613      	mov	r3, r2
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	4413      	add	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4a15      	ldr	r2, [pc, #84]	@ (800d1d0 <prvAddNewTaskToReadyList+0xcc>)
 800d17c:	441a      	add	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	3304      	adds	r3, #4
 800d182:	4619      	mov	r1, r3
 800d184:	4610      	mov	r0, r2
 800d186:	f7fe feae 	bl	800bee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d18a:	f001 f80f 	bl	800e1ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d18e:	4b0d      	ldr	r3, [pc, #52]	@ (800d1c4 <prvAddNewTaskToReadyList+0xc0>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00e      	beq.n	800d1b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d196:	4b0a      	ldr	r3, [pc, #40]	@ (800d1c0 <prvAddNewTaskToReadyList+0xbc>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d207      	bcs.n	800d1b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d1d4 <prvAddNewTaskToReadyList+0xd0>)
 800d1a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1aa:	601a      	str	r2, [r3, #0]
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1b4:	bf00      	nop
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	2000069c 	.word	0x2000069c
 800d1c0:	2000059c 	.word	0x2000059c
 800d1c4:	200006a8 	.word	0x200006a8
 800d1c8:	200006b8 	.word	0x200006b8
 800d1cc:	200006a4 	.word	0x200006a4
 800d1d0:	200005a0 	.word	0x200005a0
 800d1d4:	e000ed04 	.word	0xe000ed04

0800d1d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d018      	beq.n	800d21c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d1ea:	4b14      	ldr	r3, [pc, #80]	@ (800d23c <vTaskDelay+0x64>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00b      	beq.n	800d20a <vTaskDelay+0x32>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	60bb      	str	r3, [r7, #8]
}
 800d204:	bf00      	nop
 800d206:	bf00      	nop
 800d208:	e7fd      	b.n	800d206 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d20a:	f000 f87d 	bl	800d308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d20e:	2100      	movs	r1, #0
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 fe03 	bl	800de1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d216:	f000 f885 	bl	800d324 <xTaskResumeAll>
 800d21a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d107      	bne.n	800d232 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d222:	4b07      	ldr	r3, [pc, #28]	@ (800d240 <vTaskDelay+0x68>)
 800d224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d228:	601a      	str	r2, [r3, #0]
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d232:	bf00      	nop
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	200006c4 	.word	0x200006c4
 800d240:	e000ed04 	.word	0xe000ed04

0800d244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b08a      	sub	sp, #40	@ 0x28
 800d248:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d252:	463a      	mov	r2, r7
 800d254:	1d39      	adds	r1, r7, #4
 800d256:	f107 0308 	add.w	r3, r7, #8
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7f4 fa0a 	bl	8001674 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d260:	6839      	ldr	r1, [r7, #0]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	68ba      	ldr	r2, [r7, #8]
 800d266:	9202      	str	r2, [sp, #8]
 800d268:	9301      	str	r3, [sp, #4]
 800d26a:	2300      	movs	r3, #0
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	2300      	movs	r3, #0
 800d270:	460a      	mov	r2, r1
 800d272:	491f      	ldr	r1, [pc, #124]	@ (800d2f0 <vTaskStartScheduler+0xac>)
 800d274:	481f      	ldr	r0, [pc, #124]	@ (800d2f4 <vTaskStartScheduler+0xb0>)
 800d276:	f7ff fe17 	bl	800cea8 <xTaskCreateStatic>
 800d27a:	4603      	mov	r3, r0
 800d27c:	4a1e      	ldr	r2, [pc, #120]	@ (800d2f8 <vTaskStartScheduler+0xb4>)
 800d27e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d280:	4b1d      	ldr	r3, [pc, #116]	@ (800d2f8 <vTaskStartScheduler+0xb4>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d288:	2301      	movs	r3, #1
 800d28a:	617b      	str	r3, [r7, #20]
 800d28c:	e001      	b.n	800d292 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d28e:	2300      	movs	r3, #0
 800d290:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d116      	bne.n	800d2c6 <vTaskStartScheduler+0x82>
	__asm volatile
 800d298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	613b      	str	r3, [r7, #16]
}
 800d2aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2ac:	4b13      	ldr	r3, [pc, #76]	@ (800d2fc <vTaskStartScheduler+0xb8>)
 800d2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2b4:	4b12      	ldr	r3, [pc, #72]	@ (800d300 <vTaskStartScheduler+0xbc>)
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2ba:	4b12      	ldr	r3, [pc, #72]	@ (800d304 <vTaskStartScheduler+0xc0>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2c0:	f000 fe9e 	bl	800e000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2c4:	e00f      	b.n	800d2e6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2cc:	d10b      	bne.n	800d2e6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	60fb      	str	r3, [r7, #12]
}
 800d2e0:	bf00      	nop
 800d2e2:	bf00      	nop
 800d2e4:	e7fd      	b.n	800d2e2 <vTaskStartScheduler+0x9e>
}
 800d2e6:	bf00      	nop
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	0800feb8 	.word	0x0800feb8
 800d2f4:	0800d8f1 	.word	0x0800d8f1
 800d2f8:	200006c0 	.word	0x200006c0
 800d2fc:	200006bc 	.word	0x200006bc
 800d300:	200006a8 	.word	0x200006a8
 800d304:	200006a0 	.word	0x200006a0

0800d308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d308:	b480      	push	{r7}
 800d30a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d30c:	4b04      	ldr	r3, [pc, #16]	@ (800d320 <vTaskSuspendAll+0x18>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	3301      	adds	r3, #1
 800d312:	4a03      	ldr	r2, [pc, #12]	@ (800d320 <vTaskSuspendAll+0x18>)
 800d314:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d316:	bf00      	nop
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	200006c4 	.word	0x200006c4

0800d324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d32e:	2300      	movs	r3, #0
 800d330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d332:	4b42      	ldr	r3, [pc, #264]	@ (800d43c <xTaskResumeAll+0x118>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10b      	bne.n	800d352 <xTaskResumeAll+0x2e>
	__asm volatile
 800d33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	603b      	str	r3, [r7, #0]
}
 800d34c:	bf00      	nop
 800d34e:	bf00      	nop
 800d350:	e7fd      	b.n	800d34e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d352:	f000 fef9 	bl	800e148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d356:	4b39      	ldr	r3, [pc, #228]	@ (800d43c <xTaskResumeAll+0x118>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	4a37      	ldr	r2, [pc, #220]	@ (800d43c <xTaskResumeAll+0x118>)
 800d35e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d360:	4b36      	ldr	r3, [pc, #216]	@ (800d43c <xTaskResumeAll+0x118>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d161      	bne.n	800d42c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d368:	4b35      	ldr	r3, [pc, #212]	@ (800d440 <xTaskResumeAll+0x11c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d05d      	beq.n	800d42c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d370:	e02e      	b.n	800d3d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d372:	4b34      	ldr	r3, [pc, #208]	@ (800d444 <xTaskResumeAll+0x120>)
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	3318      	adds	r3, #24
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe fe0e 	bl	800bfa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	3304      	adds	r3, #4
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fe fe09 	bl	800bfa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d392:	2201      	movs	r2, #1
 800d394:	409a      	lsls	r2, r3
 800d396:	4b2c      	ldr	r3, [pc, #176]	@ (800d448 <xTaskResumeAll+0x124>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	4a2a      	ldr	r2, [pc, #168]	@ (800d448 <xTaskResumeAll+0x124>)
 800d39e:	6013      	str	r3, [r2, #0]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	4413      	add	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4a27      	ldr	r2, [pc, #156]	@ (800d44c <xTaskResumeAll+0x128>)
 800d3ae:	441a      	add	r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	f7fe fd95 	bl	800bee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3c0:	4b23      	ldr	r3, [pc, #140]	@ (800d450 <xTaskResumeAll+0x12c>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d302      	bcc.n	800d3d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d3ca:	4b22      	ldr	r3, [pc, #136]	@ (800d454 <xTaskResumeAll+0x130>)
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d444 <xTaskResumeAll+0x120>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1cc      	bne.n	800d372 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d3de:	f000 fb3d 	bl	800da5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d3e2:	4b1d      	ldr	r3, [pc, #116]	@ (800d458 <xTaskResumeAll+0x134>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d010      	beq.n	800d410 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d3ee:	f000 f859 	bl	800d4a4 <xTaskIncrementTick>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d002      	beq.n	800d3fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d3f8:	4b16      	ldr	r3, [pc, #88]	@ (800d454 <xTaskResumeAll+0x130>)
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	3b01      	subs	r3, #1
 800d402:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1f1      	bne.n	800d3ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d40a:	4b13      	ldr	r3, [pc, #76]	@ (800d458 <xTaskResumeAll+0x134>)
 800d40c:	2200      	movs	r2, #0
 800d40e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d410:	4b10      	ldr	r3, [pc, #64]	@ (800d454 <xTaskResumeAll+0x130>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d009      	beq.n	800d42c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d418:	2301      	movs	r3, #1
 800d41a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d41c:	4b0f      	ldr	r3, [pc, #60]	@ (800d45c <xTaskResumeAll+0x138>)
 800d41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	f3bf 8f4f 	dsb	sy
 800d428:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d42c:	f000 febe 	bl	800e1ac <vPortExitCritical>

	return xAlreadyYielded;
 800d430:	68bb      	ldr	r3, [r7, #8]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	200006c4 	.word	0x200006c4
 800d440:	2000069c 	.word	0x2000069c
 800d444:	2000065c 	.word	0x2000065c
 800d448:	200006a4 	.word	0x200006a4
 800d44c:	200005a0 	.word	0x200005a0
 800d450:	2000059c 	.word	0x2000059c
 800d454:	200006b0 	.word	0x200006b0
 800d458:	200006ac 	.word	0x200006ac
 800d45c:	e000ed04 	.word	0xe000ed04

0800d460 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d466:	4b05      	ldr	r3, [pc, #20]	@ (800d47c <xTaskGetTickCount+0x1c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d46c:	687b      	ldr	r3, [r7, #4]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	200006a0 	.word	0x200006a0

0800d480 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d486:	f000 ff3f 	bl	800e308 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d48a:	2300      	movs	r3, #0
 800d48c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d48e:	4b04      	ldr	r3, [pc, #16]	@ (800d4a0 <xTaskGetTickCountFromISR+0x20>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d494:	683b      	ldr	r3, [r7, #0]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	200006a0 	.word	0x200006a0

0800d4a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ae:	4b4f      	ldr	r3, [pc, #316]	@ (800d5ec <xTaskIncrementTick+0x148>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f040 808f 	bne.w	800d5d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4b8:	4b4d      	ldr	r3, [pc, #308]	@ (800d5f0 <xTaskIncrementTick+0x14c>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4c0:	4a4b      	ldr	r2, [pc, #300]	@ (800d5f0 <xTaskIncrementTick+0x14c>)
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d121      	bne.n	800d510 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4cc:	4b49      	ldr	r3, [pc, #292]	@ (800d5f4 <xTaskIncrementTick+0x150>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00b      	beq.n	800d4ee <xTaskIncrementTick+0x4a>
	__asm volatile
 800d4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	603b      	str	r3, [r7, #0]
}
 800d4e8:	bf00      	nop
 800d4ea:	bf00      	nop
 800d4ec:	e7fd      	b.n	800d4ea <xTaskIncrementTick+0x46>
 800d4ee:	4b41      	ldr	r3, [pc, #260]	@ (800d5f4 <xTaskIncrementTick+0x150>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	60fb      	str	r3, [r7, #12]
 800d4f4:	4b40      	ldr	r3, [pc, #256]	@ (800d5f8 <xTaskIncrementTick+0x154>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a3e      	ldr	r2, [pc, #248]	@ (800d5f4 <xTaskIncrementTick+0x150>)
 800d4fa:	6013      	str	r3, [r2, #0]
 800d4fc:	4a3e      	ldr	r2, [pc, #248]	@ (800d5f8 <xTaskIncrementTick+0x154>)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	4b3e      	ldr	r3, [pc, #248]	@ (800d5fc <xTaskIncrementTick+0x158>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	3301      	adds	r3, #1
 800d508:	4a3c      	ldr	r2, [pc, #240]	@ (800d5fc <xTaskIncrementTick+0x158>)
 800d50a:	6013      	str	r3, [r2, #0]
 800d50c:	f000 faa6 	bl	800da5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d510:	4b3b      	ldr	r3, [pc, #236]	@ (800d600 <xTaskIncrementTick+0x15c>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	429a      	cmp	r2, r3
 800d518:	d348      	bcc.n	800d5ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d51a:	4b36      	ldr	r3, [pc, #216]	@ (800d5f4 <xTaskIncrementTick+0x150>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d104      	bne.n	800d52e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d524:	4b36      	ldr	r3, [pc, #216]	@ (800d600 <xTaskIncrementTick+0x15c>)
 800d526:	f04f 32ff 	mov.w	r2, #4294967295
 800d52a:	601a      	str	r2, [r3, #0]
					break;
 800d52c:	e03e      	b.n	800d5ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d52e:	4b31      	ldr	r3, [pc, #196]	@ (800d5f4 <xTaskIncrementTick+0x150>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	429a      	cmp	r2, r3
 800d544:	d203      	bcs.n	800d54e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d546:	4a2e      	ldr	r2, [pc, #184]	@ (800d600 <xTaskIncrementTick+0x15c>)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d54c:	e02e      	b.n	800d5ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	3304      	adds	r3, #4
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe fd24 	bl	800bfa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d004      	beq.n	800d56a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	3318      	adds	r3, #24
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe fd1b 	bl	800bfa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56e:	2201      	movs	r2, #1
 800d570:	409a      	lsls	r2, r3
 800d572:	4b24      	ldr	r3, [pc, #144]	@ (800d604 <xTaskIncrementTick+0x160>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4313      	orrs	r3, r2
 800d578:	4a22      	ldr	r2, [pc, #136]	@ (800d604 <xTaskIncrementTick+0x160>)
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d580:	4613      	mov	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4a1f      	ldr	r2, [pc, #124]	@ (800d608 <xTaskIncrementTick+0x164>)
 800d58a:	441a      	add	r2, r3
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	3304      	adds	r3, #4
 800d590:	4619      	mov	r1, r3
 800d592:	4610      	mov	r0, r2
 800d594:	f7fe fca7 	bl	800bee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d59c:	4b1b      	ldr	r3, [pc, #108]	@ (800d60c <xTaskIncrementTick+0x168>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d3b9      	bcc.n	800d51a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5aa:	e7b6      	b.n	800d51a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5ac:	4b17      	ldr	r3, [pc, #92]	@ (800d60c <xTaskIncrementTick+0x168>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5b2:	4915      	ldr	r1, [pc, #84]	@ (800d608 <xTaskIncrementTick+0x164>)
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4413      	add	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	440b      	add	r3, r1
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d901      	bls.n	800d5c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5c8:	4b11      	ldr	r3, [pc, #68]	@ (800d610 <xTaskIncrementTick+0x16c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d007      	beq.n	800d5e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	617b      	str	r3, [r7, #20]
 800d5d4:	e004      	b.n	800d5e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d614 <xTaskIncrementTick+0x170>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	4a0d      	ldr	r2, [pc, #52]	@ (800d614 <xTaskIncrementTick+0x170>)
 800d5de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5e0:	697b      	ldr	r3, [r7, #20]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	200006c4 	.word	0x200006c4
 800d5f0:	200006a0 	.word	0x200006a0
 800d5f4:	20000654 	.word	0x20000654
 800d5f8:	20000658 	.word	0x20000658
 800d5fc:	200006b4 	.word	0x200006b4
 800d600:	200006bc 	.word	0x200006bc
 800d604:	200006a4 	.word	0x200006a4
 800d608:	200005a0 	.word	0x200005a0
 800d60c:	2000059c 	.word	0x2000059c
 800d610:	200006b0 	.word	0x200006b0
 800d614:	200006ac 	.word	0x200006ac

0800d618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d618:	b480      	push	{r7}
 800d61a:	b087      	sub	sp, #28
 800d61c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d61e:	4b27      	ldr	r3, [pc, #156]	@ (800d6bc <vTaskSwitchContext+0xa4>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d003      	beq.n	800d62e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d626:	4b26      	ldr	r3, [pc, #152]	@ (800d6c0 <vTaskSwitchContext+0xa8>)
 800d628:	2201      	movs	r2, #1
 800d62a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d62c:	e040      	b.n	800d6b0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d62e:	4b24      	ldr	r3, [pc, #144]	@ (800d6c0 <vTaskSwitchContext+0xa8>)
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d634:	4b23      	ldr	r3, [pc, #140]	@ (800d6c4 <vTaskSwitchContext+0xac>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	fab3 f383 	clz	r3, r3
 800d640:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d642:	7afb      	ldrb	r3, [r7, #11]
 800d644:	f1c3 031f 	rsb	r3, r3, #31
 800d648:	617b      	str	r3, [r7, #20]
 800d64a:	491f      	ldr	r1, [pc, #124]	@ (800d6c8 <vTaskSwitchContext+0xb0>)
 800d64c:	697a      	ldr	r2, [r7, #20]
 800d64e:	4613      	mov	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4413      	add	r3, r2
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	440b      	add	r3, r1
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10b      	bne.n	800d676 <vTaskSwitchContext+0x5e>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	607b      	str	r3, [r7, #4]
}
 800d670:	bf00      	nop
 800d672:	bf00      	nop
 800d674:	e7fd      	b.n	800d672 <vTaskSwitchContext+0x5a>
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	4613      	mov	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4413      	add	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4a11      	ldr	r2, [pc, #68]	@ (800d6c8 <vTaskSwitchContext+0xb0>)
 800d682:	4413      	add	r3, r2
 800d684:	613b      	str	r3, [r7, #16]
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	605a      	str	r2, [r3, #4]
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	3308      	adds	r3, #8
 800d698:	429a      	cmp	r2, r3
 800d69a:	d104      	bne.n	800d6a6 <vTaskSwitchContext+0x8e>
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	685a      	ldr	r2, [r3, #4]
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	605a      	str	r2, [r3, #4]
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	4a07      	ldr	r2, [pc, #28]	@ (800d6cc <vTaskSwitchContext+0xb4>)
 800d6ae:	6013      	str	r3, [r2, #0]
}
 800d6b0:	bf00      	nop
 800d6b2:	371c      	adds	r7, #28
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	200006c4 	.word	0x200006c4
 800d6c0:	200006b0 	.word	0x200006b0
 800d6c4:	200006a4 	.word	0x200006a4
 800d6c8:	200005a0 	.word	0x200005a0
 800d6cc:	2000059c 	.word	0x2000059c

0800d6d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10b      	bne.n	800d6f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	60fb      	str	r3, [r7, #12]
}
 800d6f2:	bf00      	nop
 800d6f4:	bf00      	nop
 800d6f6:	e7fd      	b.n	800d6f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6f8:	4b07      	ldr	r3, [pc, #28]	@ (800d718 <vTaskPlaceOnEventList+0x48>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3318      	adds	r3, #24
 800d6fe:	4619      	mov	r1, r3
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7fe fc14 	bl	800bf2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d706:	2101      	movs	r1, #1
 800d708:	6838      	ldr	r0, [r7, #0]
 800d70a:	f000 fb87 	bl	800de1c <prvAddCurrentTaskToDelayedList>
}
 800d70e:	bf00      	nop
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	2000059c 	.word	0x2000059c

0800d71c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10b      	bne.n	800d74a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	60fb      	str	r3, [r7, #12]
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop
 800d748:	e7fd      	b.n	800d746 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	3318      	adds	r3, #24
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fe fc26 	bl	800bfa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d754:	4b1d      	ldr	r3, [pc, #116]	@ (800d7cc <xTaskRemoveFromEventList+0xb0>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d11c      	bne.n	800d796 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	3304      	adds	r3, #4
 800d760:	4618      	mov	r0, r3
 800d762:	f7fe fc1d 	bl	800bfa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d76a:	2201      	movs	r2, #1
 800d76c:	409a      	lsls	r2, r3
 800d76e:	4b18      	ldr	r3, [pc, #96]	@ (800d7d0 <xTaskRemoveFromEventList+0xb4>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4313      	orrs	r3, r2
 800d774:	4a16      	ldr	r2, [pc, #88]	@ (800d7d0 <xTaskRemoveFromEventList+0xb4>)
 800d776:	6013      	str	r3, [r2, #0]
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d77c:	4613      	mov	r3, r2
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	4413      	add	r3, r2
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4a13      	ldr	r2, [pc, #76]	@ (800d7d4 <xTaskRemoveFromEventList+0xb8>)
 800d786:	441a      	add	r2, r3
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	3304      	adds	r3, #4
 800d78c:	4619      	mov	r1, r3
 800d78e:	4610      	mov	r0, r2
 800d790:	f7fe fba9 	bl	800bee6 <vListInsertEnd>
 800d794:	e005      	b.n	800d7a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	3318      	adds	r3, #24
 800d79a:	4619      	mov	r1, r3
 800d79c:	480e      	ldr	r0, [pc, #56]	@ (800d7d8 <xTaskRemoveFromEventList+0xbc>)
 800d79e:	f7fe fba2 	bl	800bee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d7dc <xTaskRemoveFromEventList+0xc0>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d905      	bls.n	800d7bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d7b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d7e0 <xTaskRemoveFromEventList+0xc4>)
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	601a      	str	r2, [r3, #0]
 800d7ba:	e001      	b.n	800d7c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d7c0:	697b      	ldr	r3, [r7, #20]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3718      	adds	r7, #24
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	200006c4 	.word	0x200006c4
 800d7d0:	200006a4 	.word	0x200006a4
 800d7d4:	200005a0 	.word	0x200005a0
 800d7d8:	2000065c 	.word	0x2000065c
 800d7dc:	2000059c 	.word	0x2000059c
 800d7e0:	200006b0 	.word	0x200006b0

0800d7e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7ec:	4b06      	ldr	r3, [pc, #24]	@ (800d808 <vTaskInternalSetTimeOutState+0x24>)
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7f4:	4b05      	ldr	r3, [pc, #20]	@ (800d80c <vTaskInternalSetTimeOutState+0x28>)
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	605a      	str	r2, [r3, #4]
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr
 800d808:	200006b4 	.word	0x200006b4
 800d80c:	200006a0 	.word	0x200006a0

0800d810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b088      	sub	sp, #32
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10b      	bne.n	800d838 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	613b      	str	r3, [r7, #16]
}
 800d832:	bf00      	nop
 800d834:	bf00      	nop
 800d836:	e7fd      	b.n	800d834 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10b      	bne.n	800d856 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	60fb      	str	r3, [r7, #12]
}
 800d850:	bf00      	nop
 800d852:	bf00      	nop
 800d854:	e7fd      	b.n	800d852 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d856:	f000 fc77 	bl	800e148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d85a:	4b1d      	ldr	r3, [pc, #116]	@ (800d8d0 <xTaskCheckForTimeOut+0xc0>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	69ba      	ldr	r2, [r7, #24]
 800d866:	1ad3      	subs	r3, r2, r3
 800d868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d872:	d102      	bne.n	800d87a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d874:	2300      	movs	r3, #0
 800d876:	61fb      	str	r3, [r7, #28]
 800d878:	e023      	b.n	800d8c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	4b15      	ldr	r3, [pc, #84]	@ (800d8d4 <xTaskCheckForTimeOut+0xc4>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	429a      	cmp	r2, r3
 800d884:	d007      	beq.n	800d896 <xTaskCheckForTimeOut+0x86>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	69ba      	ldr	r2, [r7, #24]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d302      	bcc.n	800d896 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d890:	2301      	movs	r3, #1
 800d892:	61fb      	str	r3, [r7, #28]
 800d894:	e015      	b.n	800d8c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	697a      	ldr	r2, [r7, #20]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d20b      	bcs.n	800d8b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	1ad2      	subs	r2, r2, r3
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff ff99 	bl	800d7e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	61fb      	str	r3, [r7, #28]
 800d8b6:	e004      	b.n	800d8c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d8c2:	f000 fc73 	bl	800e1ac <vPortExitCritical>

	return xReturn;
 800d8c6:	69fb      	ldr	r3, [r7, #28]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3720      	adds	r7, #32
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	200006a0 	.word	0x200006a0
 800d8d4:	200006b4 	.word	0x200006b4

0800d8d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d8d8:	b480      	push	{r7}
 800d8da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d8dc:	4b03      	ldr	r3, [pc, #12]	@ (800d8ec <vTaskMissedYield+0x14>)
 800d8de:	2201      	movs	r2, #1
 800d8e0:	601a      	str	r2, [r3, #0]
}
 800d8e2:	bf00      	nop
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr
 800d8ec:	200006b0 	.word	0x200006b0

0800d8f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8f8:	f000 f852 	bl	800d9a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8fc:	4b06      	ldr	r3, [pc, #24]	@ (800d918 <prvIdleTask+0x28>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b01      	cmp	r3, #1
 800d902:	d9f9      	bls.n	800d8f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d904:	4b05      	ldr	r3, [pc, #20]	@ (800d91c <prvIdleTask+0x2c>)
 800d906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d90a:	601a      	str	r2, [r3, #0]
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d914:	e7f0      	b.n	800d8f8 <prvIdleTask+0x8>
 800d916:	bf00      	nop
 800d918:	200005a0 	.word	0x200005a0
 800d91c:	e000ed04 	.word	0xe000ed04

0800d920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d926:	2300      	movs	r3, #0
 800d928:	607b      	str	r3, [r7, #4]
 800d92a:	e00c      	b.n	800d946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	4613      	mov	r3, r2
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	4413      	add	r3, r2
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	4a12      	ldr	r2, [pc, #72]	@ (800d980 <prvInitialiseTaskLists+0x60>)
 800d938:	4413      	add	r3, r2
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe faa6 	bl	800be8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3301      	adds	r3, #1
 800d944:	607b      	str	r3, [r7, #4]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2b06      	cmp	r3, #6
 800d94a:	d9ef      	bls.n	800d92c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d94c:	480d      	ldr	r0, [pc, #52]	@ (800d984 <prvInitialiseTaskLists+0x64>)
 800d94e:	f7fe fa9d 	bl	800be8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d952:	480d      	ldr	r0, [pc, #52]	@ (800d988 <prvInitialiseTaskLists+0x68>)
 800d954:	f7fe fa9a 	bl	800be8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d958:	480c      	ldr	r0, [pc, #48]	@ (800d98c <prvInitialiseTaskLists+0x6c>)
 800d95a:	f7fe fa97 	bl	800be8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d95e:	480c      	ldr	r0, [pc, #48]	@ (800d990 <prvInitialiseTaskLists+0x70>)
 800d960:	f7fe fa94 	bl	800be8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d964:	480b      	ldr	r0, [pc, #44]	@ (800d994 <prvInitialiseTaskLists+0x74>)
 800d966:	f7fe fa91 	bl	800be8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d96a:	4b0b      	ldr	r3, [pc, #44]	@ (800d998 <prvInitialiseTaskLists+0x78>)
 800d96c:	4a05      	ldr	r2, [pc, #20]	@ (800d984 <prvInitialiseTaskLists+0x64>)
 800d96e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d970:	4b0a      	ldr	r3, [pc, #40]	@ (800d99c <prvInitialiseTaskLists+0x7c>)
 800d972:	4a05      	ldr	r2, [pc, #20]	@ (800d988 <prvInitialiseTaskLists+0x68>)
 800d974:	601a      	str	r2, [r3, #0]
}
 800d976:	bf00      	nop
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	200005a0 	.word	0x200005a0
 800d984:	2000062c 	.word	0x2000062c
 800d988:	20000640 	.word	0x20000640
 800d98c:	2000065c 	.word	0x2000065c
 800d990:	20000670 	.word	0x20000670
 800d994:	20000688 	.word	0x20000688
 800d998:	20000654 	.word	0x20000654
 800d99c:	20000658 	.word	0x20000658

0800d9a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9a6:	e019      	b.n	800d9dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d9a8:	f000 fbce 	bl	800e148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9ac:	4b10      	ldr	r3, [pc, #64]	@ (800d9f0 <prvCheckTasksWaitingTermination+0x50>)
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	3304      	adds	r3, #4
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7fe faf1 	bl	800bfa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d9be:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f4 <prvCheckTasksWaitingTermination+0x54>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	4a0b      	ldr	r2, [pc, #44]	@ (800d9f4 <prvCheckTasksWaitingTermination+0x54>)
 800d9c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d9c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f8 <prvCheckTasksWaitingTermination+0x58>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	4a0a      	ldr	r2, [pc, #40]	@ (800d9f8 <prvCheckTasksWaitingTermination+0x58>)
 800d9d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d9d2:	f000 fbeb 	bl	800e1ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f810 	bl	800d9fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9dc:	4b06      	ldr	r3, [pc, #24]	@ (800d9f8 <prvCheckTasksWaitingTermination+0x58>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1e1      	bne.n	800d9a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	20000670 	.word	0x20000670
 800d9f4:	2000069c 	.word	0x2000069c
 800d9f8:	20000684 	.word	0x20000684

0800d9fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d108      	bne.n	800da20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da12:	4618      	mov	r0, r3
 800da14:	f000 fd88 	bl	800e528 <vPortFree>
				vPortFree( pxTCB );
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 fd85 	bl	800e528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da1e:	e019      	b.n	800da54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800da26:	2b01      	cmp	r3, #1
 800da28:	d103      	bne.n	800da32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 fd7c 	bl	800e528 <vPortFree>
	}
 800da30:	e010      	b.n	800da54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d00b      	beq.n	800da54 <prvDeleteTCB+0x58>
	__asm volatile
 800da3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	60fb      	str	r3, [r7, #12]
}
 800da4e:	bf00      	nop
 800da50:	bf00      	nop
 800da52:	e7fd      	b.n	800da50 <prvDeleteTCB+0x54>
	}
 800da54:	bf00      	nop
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da62:	4b0c      	ldr	r3, [pc, #48]	@ (800da94 <prvResetNextTaskUnblockTime+0x38>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d104      	bne.n	800da76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da6c:	4b0a      	ldr	r3, [pc, #40]	@ (800da98 <prvResetNextTaskUnblockTime+0x3c>)
 800da6e:	f04f 32ff 	mov.w	r2, #4294967295
 800da72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da74:	e008      	b.n	800da88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da76:	4b07      	ldr	r3, [pc, #28]	@ (800da94 <prvResetNextTaskUnblockTime+0x38>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	4a04      	ldr	r2, [pc, #16]	@ (800da98 <prvResetNextTaskUnblockTime+0x3c>)
 800da86:	6013      	str	r3, [r2, #0]
}
 800da88:	bf00      	nop
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	20000654 	.word	0x20000654
 800da98:	200006bc 	.word	0x200006bc

0800da9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800daa2:	4b0b      	ldr	r3, [pc, #44]	@ (800dad0 <xTaskGetSchedulerState+0x34>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d102      	bne.n	800dab0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800daaa:	2301      	movs	r3, #1
 800daac:	607b      	str	r3, [r7, #4]
 800daae:	e008      	b.n	800dac2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dab0:	4b08      	ldr	r3, [pc, #32]	@ (800dad4 <xTaskGetSchedulerState+0x38>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d102      	bne.n	800dabe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dab8:	2302      	movs	r3, #2
 800daba:	607b      	str	r3, [r7, #4]
 800dabc:	e001      	b.n	800dac2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dabe:	2300      	movs	r3, #0
 800dac0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dac2:	687b      	ldr	r3, [r7, #4]
	}
 800dac4:	4618      	mov	r0, r3
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	200006a8 	.word	0x200006a8
 800dad4:	200006c4 	.word	0x200006c4

0800dad8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dae4:	2300      	movs	r3, #0
 800dae6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d05e      	beq.n	800dbac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daf2:	4b31      	ldr	r3, [pc, #196]	@ (800dbb8 <xTaskPriorityInherit+0xe0>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d24e      	bcs.n	800db9a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	2b00      	cmp	r3, #0
 800db02:	db06      	blt.n	800db12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db04:	4b2c      	ldr	r3, [pc, #176]	@ (800dbb8 <xTaskPriorityInherit+0xe0>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0a:	f1c3 0207 	rsb	r2, r3, #7
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	6959      	ldr	r1, [r3, #20]
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db1a:	4613      	mov	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4a26      	ldr	r2, [pc, #152]	@ (800dbbc <xTaskPriorityInherit+0xe4>)
 800db24:	4413      	add	r3, r2
 800db26:	4299      	cmp	r1, r3
 800db28:	d12f      	bne.n	800db8a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	3304      	adds	r3, #4
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe fa36 	bl	800bfa0 <uxListRemove>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10a      	bne.n	800db50 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db3e:	2201      	movs	r2, #1
 800db40:	fa02 f303 	lsl.w	r3, r2, r3
 800db44:	43da      	mvns	r2, r3
 800db46:	4b1e      	ldr	r3, [pc, #120]	@ (800dbc0 <xTaskPriorityInherit+0xe8>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4013      	ands	r3, r2
 800db4c:	4a1c      	ldr	r2, [pc, #112]	@ (800dbc0 <xTaskPriorityInherit+0xe8>)
 800db4e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db50:	4b19      	ldr	r3, [pc, #100]	@ (800dbb8 <xTaskPriorityInherit+0xe0>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db5e:	2201      	movs	r2, #1
 800db60:	409a      	lsls	r2, r3
 800db62:	4b17      	ldr	r3, [pc, #92]	@ (800dbc0 <xTaskPriorityInherit+0xe8>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4313      	orrs	r3, r2
 800db68:	4a15      	ldr	r2, [pc, #84]	@ (800dbc0 <xTaskPriorityInherit+0xe8>)
 800db6a:	6013      	str	r3, [r2, #0]
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db70:	4613      	mov	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4a10      	ldr	r2, [pc, #64]	@ (800dbbc <xTaskPriorityInherit+0xe4>)
 800db7a:	441a      	add	r2, r3
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	3304      	adds	r3, #4
 800db80:	4619      	mov	r1, r3
 800db82:	4610      	mov	r0, r2
 800db84:	f7fe f9af 	bl	800bee6 <vListInsertEnd>
 800db88:	e004      	b.n	800db94 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db8a:	4b0b      	ldr	r3, [pc, #44]	@ (800dbb8 <xTaskPriorityInherit+0xe0>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db94:	2301      	movs	r3, #1
 800db96:	60fb      	str	r3, [r7, #12]
 800db98:	e008      	b.n	800dbac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db9e:	4b06      	ldr	r3, [pc, #24]	@ (800dbb8 <xTaskPriorityInherit+0xe0>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d201      	bcs.n	800dbac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbac:	68fb      	ldr	r3, [r7, #12]
	}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	2000059c 	.word	0x2000059c
 800dbbc:	200005a0 	.word	0x200005a0
 800dbc0:	200006a4 	.word	0x200006a4

0800dbc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b086      	sub	sp, #24
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d070      	beq.n	800dcbc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dbda:	4b3b      	ldr	r3, [pc, #236]	@ (800dcc8 <xTaskPriorityDisinherit+0x104>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	693a      	ldr	r2, [r7, #16]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d00b      	beq.n	800dbfc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe8:	f383 8811 	msr	BASEPRI, r3
 800dbec:	f3bf 8f6f 	isb	sy
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	60fb      	str	r3, [r7, #12]
}
 800dbf6:	bf00      	nop
 800dbf8:	bf00      	nop
 800dbfa:	e7fd      	b.n	800dbf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10b      	bne.n	800dc1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc08:	f383 8811 	msr	BASEPRI, r3
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	60bb      	str	r3, [r7, #8]
}
 800dc16:	bf00      	nop
 800dc18:	bf00      	nop
 800dc1a:	e7fd      	b.n	800dc18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dc20:	1e5a      	subs	r2, r3, #1
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d044      	beq.n	800dcbc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d140      	bne.n	800dcbc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fe f9ae 	bl	800bfa0 <uxListRemove>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d115      	bne.n	800dc76 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4e:	491f      	ldr	r1, [pc, #124]	@ (800dccc <xTaskPriorityDisinherit+0x108>)
 800dc50:	4613      	mov	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4413      	add	r3, r2
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	440b      	add	r3, r1
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10a      	bne.n	800dc76 <xTaskPriorityDisinherit+0xb2>
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc64:	2201      	movs	r2, #1
 800dc66:	fa02 f303 	lsl.w	r3, r2, r3
 800dc6a:	43da      	mvns	r2, r3
 800dc6c:	4b18      	ldr	r3, [pc, #96]	@ (800dcd0 <xTaskPriorityDisinherit+0x10c>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4013      	ands	r3, r2
 800dc72:	4a17      	ldr	r2, [pc, #92]	@ (800dcd0 <xTaskPriorityDisinherit+0x10c>)
 800dc74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc82:	f1c3 0207 	rsb	r2, r3, #7
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc8e:	2201      	movs	r2, #1
 800dc90:	409a      	lsls	r2, r3
 800dc92:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd0 <xTaskPriorityDisinherit+0x10c>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	4a0d      	ldr	r2, [pc, #52]	@ (800dcd0 <xTaskPriorityDisinherit+0x10c>)
 800dc9a:	6013      	str	r3, [r2, #0]
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dca0:	4613      	mov	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	4413      	add	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	4a08      	ldr	r2, [pc, #32]	@ (800dccc <xTaskPriorityDisinherit+0x108>)
 800dcaa:	441a      	add	r2, r3
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	4610      	mov	r0, r2
 800dcb4:	f7fe f917 	bl	800bee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcbc:	697b      	ldr	r3, [r7, #20]
	}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	2000059c 	.word	0x2000059c
 800dccc:	200005a0 	.word	0x200005a0
 800dcd0:	200006a4 	.word	0x200006a4

0800dcd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dce2:	2301      	movs	r3, #1
 800dce4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d079      	beq.n	800dde0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10b      	bne.n	800dd0c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	60fb      	str	r3, [r7, #12]
}
 800dd06:	bf00      	nop
 800dd08:	bf00      	nop
 800dd0a:	e7fd      	b.n	800dd08 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d902      	bls.n	800dd1c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	61fb      	str	r3, [r7, #28]
 800dd1a:	e002      	b.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd20:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd26:	69fa      	ldr	r2, [r7, #28]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d059      	beq.n	800dde0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd30:	697a      	ldr	r2, [r7, #20]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d154      	bne.n	800dde0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dd36:	4b2c      	ldr	r3, [pc, #176]	@ (800dde8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	69ba      	ldr	r2, [r7, #24]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d10b      	bne.n	800dd58 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	60bb      	str	r3, [r7, #8]
}
 800dd52:	bf00      	nop
 800dd54:	bf00      	nop
 800dd56:	e7fd      	b.n	800dd54 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	69fa      	ldr	r2, [r7, #28]
 800dd62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	699b      	ldr	r3, [r3, #24]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	db04      	blt.n	800dd76 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	f1c3 0207 	rsb	r2, r3, #7
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	6959      	ldr	r1, [r3, #20]
 800dd7a:	693a      	ldr	r2, [r7, #16]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4a19      	ldr	r2, [pc, #100]	@ (800ddec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800dd86:	4413      	add	r3, r2
 800dd88:	4299      	cmp	r1, r3
 800dd8a:	d129      	bne.n	800dde0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	3304      	adds	r3, #4
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7fe f905 	bl	800bfa0 <uxListRemove>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10a      	bne.n	800ddb2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda0:	2201      	movs	r2, #1
 800dda2:	fa02 f303 	lsl.w	r3, r2, r3
 800dda6:	43da      	mvns	r2, r3
 800dda8:	4b11      	ldr	r3, [pc, #68]	@ (800ddf0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4013      	ands	r3, r2
 800ddae:	4a10      	ldr	r2, [pc, #64]	@ (800ddf0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ddb0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	409a      	lsls	r2, r3
 800ddba:	4b0d      	ldr	r3, [pc, #52]	@ (800ddf0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	4a0b      	ldr	r2, [pc, #44]	@ (800ddf0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ddc2:	6013      	str	r3, [r2, #0]
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddc8:	4613      	mov	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4413      	add	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4a06      	ldr	r2, [pc, #24]	@ (800ddec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ddd2:	441a      	add	r2, r3
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	3304      	adds	r3, #4
 800ddd8:	4619      	mov	r1, r3
 800ddda:	4610      	mov	r0, r2
 800dddc:	f7fe f883 	bl	800bee6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dde0:	bf00      	nop
 800dde2:	3720      	adds	r7, #32
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	2000059c 	.word	0x2000059c
 800ddec:	200005a0 	.word	0x200005a0
 800ddf0:	200006a4 	.word	0x200006a4

0800ddf4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ddf4:	b480      	push	{r7}
 800ddf6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ddf8:	4b07      	ldr	r3, [pc, #28]	@ (800de18 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d004      	beq.n	800de0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800de00:	4b05      	ldr	r3, [pc, #20]	@ (800de18 <pvTaskIncrementMutexHeldCount+0x24>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800de06:	3201      	adds	r2, #1
 800de08:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800de0a:	4b03      	ldr	r3, [pc, #12]	@ (800de18 <pvTaskIncrementMutexHeldCount+0x24>)
 800de0c:	681b      	ldr	r3, [r3, #0]
	}
 800de0e:	4618      	mov	r0, r3
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr
 800de18:	2000059c 	.word	0x2000059c

0800de1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de26:	4b29      	ldr	r3, [pc, #164]	@ (800decc <prvAddCurrentTaskToDelayedList+0xb0>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de2c:	4b28      	ldr	r3, [pc, #160]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3304      	adds	r3, #4
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe f8b4 	bl	800bfa0 <uxListRemove>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d10b      	bne.n	800de56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800de3e:	4b24      	ldr	r3, [pc, #144]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de44:	2201      	movs	r2, #1
 800de46:	fa02 f303 	lsl.w	r3, r2, r3
 800de4a:	43da      	mvns	r2, r3
 800de4c:	4b21      	ldr	r3, [pc, #132]	@ (800ded4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4013      	ands	r3, r2
 800de52:	4a20      	ldr	r2, [pc, #128]	@ (800ded4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800de54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5c:	d10a      	bne.n	800de74 <prvAddCurrentTaskToDelayedList+0x58>
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d007      	beq.n	800de74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de64:	4b1a      	ldr	r3, [pc, #104]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3304      	adds	r3, #4
 800de6a:	4619      	mov	r1, r3
 800de6c:	481a      	ldr	r0, [pc, #104]	@ (800ded8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800de6e:	f7fe f83a 	bl	800bee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de72:	e026      	b.n	800dec2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4413      	add	r3, r2
 800de7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de7c:	4b14      	ldr	r3, [pc, #80]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d209      	bcs.n	800dea0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de8c:	4b13      	ldr	r3, [pc, #76]	@ (800dedc <prvAddCurrentTaskToDelayedList+0xc0>)
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	4b0f      	ldr	r3, [pc, #60]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	3304      	adds	r3, #4
 800de96:	4619      	mov	r1, r3
 800de98:	4610      	mov	r0, r2
 800de9a:	f7fe f848 	bl	800bf2e <vListInsert>
}
 800de9e:	e010      	b.n	800dec2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dea0:	4b0f      	ldr	r3, [pc, #60]	@ (800dee0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	4b0a      	ldr	r3, [pc, #40]	@ (800ded0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	3304      	adds	r3, #4
 800deaa:	4619      	mov	r1, r3
 800deac:	4610      	mov	r0, r2
 800deae:	f7fe f83e 	bl	800bf2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800deb2:	4b0c      	ldr	r3, [pc, #48]	@ (800dee4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	68ba      	ldr	r2, [r7, #8]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d202      	bcs.n	800dec2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800debc:	4a09      	ldr	r2, [pc, #36]	@ (800dee4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	6013      	str	r3, [r2, #0]
}
 800dec2:	bf00      	nop
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	200006a0 	.word	0x200006a0
 800ded0:	2000059c 	.word	0x2000059c
 800ded4:	200006a4 	.word	0x200006a4
 800ded8:	20000688 	.word	0x20000688
 800dedc:	20000658 	.word	0x20000658
 800dee0:	20000654 	.word	0x20000654
 800dee4:	200006bc 	.word	0x200006bc

0800dee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3b04      	subs	r3, #4
 800def8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800df00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	3b04      	subs	r3, #4
 800df06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	f023 0201 	bic.w	r2, r3, #1
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	3b04      	subs	r3, #4
 800df16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df18:	4a0c      	ldr	r2, [pc, #48]	@ (800df4c <pxPortInitialiseStack+0x64>)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3b14      	subs	r3, #20
 800df22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	3b04      	subs	r3, #4
 800df2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f06f 0202 	mvn.w	r2, #2
 800df36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3b20      	subs	r3, #32
 800df3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df3e:	68fb      	ldr	r3, [r7, #12]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	0800df51 	.word	0x0800df51

0800df50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df5a:	4b13      	ldr	r3, [pc, #76]	@ (800dfa8 <prvTaskExitError+0x58>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df62:	d00b      	beq.n	800df7c <prvTaskExitError+0x2c>
	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	60fb      	str	r3, [r7, #12]
}
 800df76:	bf00      	nop
 800df78:	bf00      	nop
 800df7a:	e7fd      	b.n	800df78 <prvTaskExitError+0x28>
	__asm volatile
 800df7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	60bb      	str	r3, [r7, #8]
}
 800df8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df90:	bf00      	nop
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d0fc      	beq.n	800df92 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df98:	bf00      	nop
 800df9a:	bf00      	nop
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	2000009c 	.word	0x2000009c
 800dfac:	00000000 	.word	0x00000000

0800dfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dfb0:	4b07      	ldr	r3, [pc, #28]	@ (800dfd0 <pxCurrentTCBConst2>)
 800dfb2:	6819      	ldr	r1, [r3, #0]
 800dfb4:	6808      	ldr	r0, [r1, #0]
 800dfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfba:	f380 8809 	msr	PSP, r0
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f04f 0000 	mov.w	r0, #0
 800dfc6:	f380 8811 	msr	BASEPRI, r0
 800dfca:	4770      	bx	lr
 800dfcc:	f3af 8000 	nop.w

0800dfd0 <pxCurrentTCBConst2>:
 800dfd0:	2000059c 	.word	0x2000059c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dfd4:	bf00      	nop
 800dfd6:	bf00      	nop

0800dfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dfd8:	4808      	ldr	r0, [pc, #32]	@ (800dffc <prvPortStartFirstTask+0x24>)
 800dfda:	6800      	ldr	r0, [r0, #0]
 800dfdc:	6800      	ldr	r0, [r0, #0]
 800dfde:	f380 8808 	msr	MSP, r0
 800dfe2:	f04f 0000 	mov.w	r0, #0
 800dfe6:	f380 8814 	msr	CONTROL, r0
 800dfea:	b662      	cpsie	i
 800dfec:	b661      	cpsie	f
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	df00      	svc	0
 800dff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dffa:	bf00      	nop
 800dffc:	e000ed08 	.word	0xe000ed08

0800e000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e006:	4b47      	ldr	r3, [pc, #284]	@ (800e124 <xPortStartScheduler+0x124>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a47      	ldr	r2, [pc, #284]	@ (800e128 <xPortStartScheduler+0x128>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d10b      	bne.n	800e028 <xPortStartScheduler+0x28>
	__asm volatile
 800e010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	60fb      	str	r3, [r7, #12]
}
 800e022:	bf00      	nop
 800e024:	bf00      	nop
 800e026:	e7fd      	b.n	800e024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e028:	4b3e      	ldr	r3, [pc, #248]	@ (800e124 <xPortStartScheduler+0x124>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a3f      	ldr	r2, [pc, #252]	@ (800e12c <xPortStartScheduler+0x12c>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d10b      	bne.n	800e04a <xPortStartScheduler+0x4a>
	__asm volatile
 800e032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e036:	f383 8811 	msr	BASEPRI, r3
 800e03a:	f3bf 8f6f 	isb	sy
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	613b      	str	r3, [r7, #16]
}
 800e044:	bf00      	nop
 800e046:	bf00      	nop
 800e048:	e7fd      	b.n	800e046 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e04a:	4b39      	ldr	r3, [pc, #228]	@ (800e130 <xPortStartScheduler+0x130>)
 800e04c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	b2db      	uxtb	r3, r3
 800e054:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	22ff      	movs	r2, #255	@ 0xff
 800e05a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	b2db      	uxtb	r3, r3
 800e062:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e064:	78fb      	ldrb	r3, [r7, #3]
 800e066:	b2db      	uxtb	r3, r3
 800e068:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	4b31      	ldr	r3, [pc, #196]	@ (800e134 <xPortStartScheduler+0x134>)
 800e070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e072:	4b31      	ldr	r3, [pc, #196]	@ (800e138 <xPortStartScheduler+0x138>)
 800e074:	2207      	movs	r2, #7
 800e076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e078:	e009      	b.n	800e08e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e07a:	4b2f      	ldr	r3, [pc, #188]	@ (800e138 <xPortStartScheduler+0x138>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	3b01      	subs	r3, #1
 800e080:	4a2d      	ldr	r2, [pc, #180]	@ (800e138 <xPortStartScheduler+0x138>)
 800e082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e084:	78fb      	ldrb	r3, [r7, #3]
 800e086:	b2db      	uxtb	r3, r3
 800e088:	005b      	lsls	r3, r3, #1
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e08e:	78fb      	ldrb	r3, [r7, #3]
 800e090:	b2db      	uxtb	r3, r3
 800e092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e096:	2b80      	cmp	r3, #128	@ 0x80
 800e098:	d0ef      	beq.n	800e07a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e09a:	4b27      	ldr	r3, [pc, #156]	@ (800e138 <xPortStartScheduler+0x138>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f1c3 0307 	rsb	r3, r3, #7
 800e0a2:	2b04      	cmp	r3, #4
 800e0a4:	d00b      	beq.n	800e0be <xPortStartScheduler+0xbe>
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	60bb      	str	r3, [r7, #8]
}
 800e0b8:	bf00      	nop
 800e0ba:	bf00      	nop
 800e0bc:	e7fd      	b.n	800e0ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e0be:	4b1e      	ldr	r3, [pc, #120]	@ (800e138 <xPortStartScheduler+0x138>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	021b      	lsls	r3, r3, #8
 800e0c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e138 <xPortStartScheduler+0x138>)
 800e0c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e0c8:	4b1b      	ldr	r3, [pc, #108]	@ (800e138 <xPortStartScheduler+0x138>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e0d0:	4a19      	ldr	r2, [pc, #100]	@ (800e138 <xPortStartScheduler+0x138>)
 800e0d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e0dc:	4b17      	ldr	r3, [pc, #92]	@ (800e13c <xPortStartScheduler+0x13c>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a16      	ldr	r2, [pc, #88]	@ (800e13c <xPortStartScheduler+0x13c>)
 800e0e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e0e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e0e8:	4b14      	ldr	r3, [pc, #80]	@ (800e13c <xPortStartScheduler+0x13c>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a13      	ldr	r2, [pc, #76]	@ (800e13c <xPortStartScheduler+0x13c>)
 800e0ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e0f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e0f4:	f000 f8da 	bl	800e2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e0f8:	4b11      	ldr	r3, [pc, #68]	@ (800e140 <xPortStartScheduler+0x140>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e0fe:	f000 f8f9 	bl	800e2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e102:	4b10      	ldr	r3, [pc, #64]	@ (800e144 <xPortStartScheduler+0x144>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a0f      	ldr	r2, [pc, #60]	@ (800e144 <xPortStartScheduler+0x144>)
 800e108:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e10c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e10e:	f7ff ff63 	bl	800dfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e112:	f7ff fa81 	bl	800d618 <vTaskSwitchContext>
	prvTaskExitError();
 800e116:	f7ff ff1b 	bl	800df50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3718      	adds	r7, #24
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}
 800e124:	e000ed00 	.word	0xe000ed00
 800e128:	410fc271 	.word	0x410fc271
 800e12c:	410fc270 	.word	0x410fc270
 800e130:	e000e400 	.word	0xe000e400
 800e134:	200006c8 	.word	0x200006c8
 800e138:	200006cc 	.word	0x200006cc
 800e13c:	e000ed20 	.word	0xe000ed20
 800e140:	2000009c 	.word	0x2000009c
 800e144:	e000ef34 	.word	0xe000ef34

0800e148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
	__asm volatile
 800e14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	607b      	str	r3, [r7, #4]
}
 800e160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e162:	4b10      	ldr	r3, [pc, #64]	@ (800e1a4 <vPortEnterCritical+0x5c>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	3301      	adds	r3, #1
 800e168:	4a0e      	ldr	r2, [pc, #56]	@ (800e1a4 <vPortEnterCritical+0x5c>)
 800e16a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e16c:	4b0d      	ldr	r3, [pc, #52]	@ (800e1a4 <vPortEnterCritical+0x5c>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2b01      	cmp	r3, #1
 800e172:	d110      	bne.n	800e196 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e174:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a8 <vPortEnterCritical+0x60>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00b      	beq.n	800e196 <vPortEnterCritical+0x4e>
	__asm volatile
 800e17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	603b      	str	r3, [r7, #0]
}
 800e190:	bf00      	nop
 800e192:	bf00      	nop
 800e194:	e7fd      	b.n	800e192 <vPortEnterCritical+0x4a>
	}
}
 800e196:	bf00      	nop
 800e198:	370c      	adds	r7, #12
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr
 800e1a2:	bf00      	nop
 800e1a4:	2000009c 	.word	0x2000009c
 800e1a8:	e000ed04 	.word	0xe000ed04

0800e1ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e1b2:	4b12      	ldr	r3, [pc, #72]	@ (800e1fc <vPortExitCritical+0x50>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d10b      	bne.n	800e1d2 <vPortExitCritical+0x26>
	__asm volatile
 800e1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	607b      	str	r3, [r7, #4]
}
 800e1cc:	bf00      	nop
 800e1ce:	bf00      	nop
 800e1d0:	e7fd      	b.n	800e1ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e1d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e1fc <vPortExitCritical+0x50>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	4a08      	ldr	r2, [pc, #32]	@ (800e1fc <vPortExitCritical+0x50>)
 800e1da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e1dc:	4b07      	ldr	r3, [pc, #28]	@ (800e1fc <vPortExitCritical+0x50>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d105      	bne.n	800e1f0 <vPortExitCritical+0x44>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	f383 8811 	msr	BASEPRI, r3
}
 800e1ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e1f0:	bf00      	nop
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr
 800e1fc:	2000009c 	.word	0x2000009c

0800e200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e200:	f3ef 8009 	mrs	r0, PSP
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	4b15      	ldr	r3, [pc, #84]	@ (800e260 <pxCurrentTCBConst>)
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	f01e 0f10 	tst.w	lr, #16
 800e210:	bf08      	it	eq
 800e212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21a:	6010      	str	r0, [r2, #0]
 800e21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e224:	f380 8811 	msr	BASEPRI, r0
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	f3bf 8f6f 	isb	sy
 800e230:	f7ff f9f2 	bl	800d618 <vTaskSwitchContext>
 800e234:	f04f 0000 	mov.w	r0, #0
 800e238:	f380 8811 	msr	BASEPRI, r0
 800e23c:	bc09      	pop	{r0, r3}
 800e23e:	6819      	ldr	r1, [r3, #0]
 800e240:	6808      	ldr	r0, [r1, #0]
 800e242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e246:	f01e 0f10 	tst.w	lr, #16
 800e24a:	bf08      	it	eq
 800e24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e250:	f380 8809 	msr	PSP, r0
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	f3af 8000 	nop.w

0800e260 <pxCurrentTCBConst>:
 800e260:	2000059c 	.word	0x2000059c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e264:	bf00      	nop
 800e266:	bf00      	nop

0800e268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	607b      	str	r3, [r7, #4]
}
 800e280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e282:	f7ff f90f 	bl	800d4a4 <xTaskIncrementTick>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d003      	beq.n	800e294 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e28c:	4b06      	ldr	r3, [pc, #24]	@ (800e2a8 <SysTick_Handler+0x40>)
 800e28e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e292:	601a      	str	r2, [r3, #0]
 800e294:	2300      	movs	r3, #0
 800e296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	f383 8811 	msr	BASEPRI, r3
}
 800e29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e2a0:	bf00      	nop
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	e000ed04 	.word	0xe000ed04

0800e2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e2e0 <vPortSetupTimerInterrupt+0x34>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e2e4 <vPortSetupTimerInterrupt+0x38>)
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e2bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e2e8 <vPortSetupTimerInterrupt+0x3c>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a0a      	ldr	r2, [pc, #40]	@ (800e2ec <vPortSetupTimerInterrupt+0x40>)
 800e2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2c6:	099b      	lsrs	r3, r3, #6
 800e2c8:	4a09      	ldr	r2, [pc, #36]	@ (800e2f0 <vPortSetupTimerInterrupt+0x44>)
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e2ce:	4b04      	ldr	r3, [pc, #16]	@ (800e2e0 <vPortSetupTimerInterrupt+0x34>)
 800e2d0:	2207      	movs	r2, #7
 800e2d2:	601a      	str	r2, [r3, #0]
}
 800e2d4:	bf00      	nop
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	e000e010 	.word	0xe000e010
 800e2e4:	e000e018 	.word	0xe000e018
 800e2e8:	2000006c 	.word	0x2000006c
 800e2ec:	10624dd3 	.word	0x10624dd3
 800e2f0:	e000e014 	.word	0xe000e014

0800e2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e304 <vPortEnableVFP+0x10>
 800e2f8:	6801      	ldr	r1, [r0, #0]
 800e2fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e2fe:	6001      	str	r1, [r0, #0]
 800e300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e302:	bf00      	nop
 800e304:	e000ed88 	.word	0xe000ed88

0800e308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e30e:	f3ef 8305 	mrs	r3, IPSR
 800e312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b0f      	cmp	r3, #15
 800e318:	d915      	bls.n	800e346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e31a:	4a18      	ldr	r2, [pc, #96]	@ (800e37c <vPortValidateInterruptPriority+0x74>)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	4413      	add	r3, r2
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e324:	4b16      	ldr	r3, [pc, #88]	@ (800e380 <vPortValidateInterruptPriority+0x78>)
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	7afa      	ldrb	r2, [r7, #11]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d20b      	bcs.n	800e346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	607b      	str	r3, [r7, #4]
}
 800e340:	bf00      	nop
 800e342:	bf00      	nop
 800e344:	e7fd      	b.n	800e342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e346:	4b0f      	ldr	r3, [pc, #60]	@ (800e384 <vPortValidateInterruptPriority+0x7c>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e34e:	4b0e      	ldr	r3, [pc, #56]	@ (800e388 <vPortValidateInterruptPriority+0x80>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	429a      	cmp	r2, r3
 800e354:	d90b      	bls.n	800e36e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	603b      	str	r3, [r7, #0]
}
 800e368:	bf00      	nop
 800e36a:	bf00      	nop
 800e36c:	e7fd      	b.n	800e36a <vPortValidateInterruptPriority+0x62>
	}
 800e36e:	bf00      	nop
 800e370:	3714      	adds	r7, #20
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	e000e3f0 	.word	0xe000e3f0
 800e380:	200006c8 	.word	0x200006c8
 800e384:	e000ed0c 	.word	0xe000ed0c
 800e388:	200006cc 	.word	0x200006cc

0800e38c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08a      	sub	sp, #40	@ 0x28
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e394:	2300      	movs	r3, #0
 800e396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e398:	f7fe ffb6 	bl	800d308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e39c:	4b5c      	ldr	r3, [pc, #368]	@ (800e510 <pvPortMalloc+0x184>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e3a4:	f000 f924 	bl	800e5f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e3a8:	4b5a      	ldr	r3, [pc, #360]	@ (800e514 <pvPortMalloc+0x188>)
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4013      	ands	r3, r2
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f040 8095 	bne.w	800e4e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d01e      	beq.n	800e3fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e3bc:	2208      	movs	r2, #8
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f003 0307 	and.w	r3, r3, #7
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d015      	beq.n	800e3fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f023 0307 	bic.w	r3, r3, #7
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f003 0307 	and.w	r3, r3, #7
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00b      	beq.n	800e3fa <pvPortMalloc+0x6e>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	617b      	str	r3, [r7, #20]
}
 800e3f4:	bf00      	nop
 800e3f6:	bf00      	nop
 800e3f8:	e7fd      	b.n	800e3f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d06f      	beq.n	800e4e0 <pvPortMalloc+0x154>
 800e400:	4b45      	ldr	r3, [pc, #276]	@ (800e518 <pvPortMalloc+0x18c>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	429a      	cmp	r2, r3
 800e408:	d86a      	bhi.n	800e4e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e40a:	4b44      	ldr	r3, [pc, #272]	@ (800e51c <pvPortMalloc+0x190>)
 800e40c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e40e:	4b43      	ldr	r3, [pc, #268]	@ (800e51c <pvPortMalloc+0x190>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e414:	e004      	b.n	800e420 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	429a      	cmp	r2, r3
 800e428:	d903      	bls.n	800e432 <pvPortMalloc+0xa6>
 800e42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1f1      	bne.n	800e416 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e432:	4b37      	ldr	r3, [pc, #220]	@ (800e510 <pvPortMalloc+0x184>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e438:	429a      	cmp	r2, r3
 800e43a:	d051      	beq.n	800e4e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e43c:	6a3b      	ldr	r3, [r7, #32]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2208      	movs	r2, #8
 800e442:	4413      	add	r3, r2
 800e444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	6a3b      	ldr	r3, [r7, #32]
 800e44c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e450:	685a      	ldr	r2, [r3, #4]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	1ad2      	subs	r2, r2, r3
 800e456:	2308      	movs	r3, #8
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d920      	bls.n	800e4a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e45e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4413      	add	r3, r2
 800e464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	f003 0307 	and.w	r3, r3, #7
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00b      	beq.n	800e488 <pvPortMalloc+0xfc>
	__asm volatile
 800e470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e474:	f383 8811 	msr	BASEPRI, r3
 800e478:	f3bf 8f6f 	isb	sy
 800e47c:	f3bf 8f4f 	dsb	sy
 800e480:	613b      	str	r3, [r7, #16]
}
 800e482:	bf00      	nop
 800e484:	bf00      	nop
 800e486:	e7fd      	b.n	800e484 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e48a:	685a      	ldr	r2, [r3, #4]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	1ad2      	subs	r2, r2, r3
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e49a:	69b8      	ldr	r0, [r7, #24]
 800e49c:	f000 f90a 	bl	800e6b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4a0:	4b1d      	ldr	r3, [pc, #116]	@ (800e518 <pvPortMalloc+0x18c>)
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	1ad3      	subs	r3, r2, r3
 800e4aa:	4a1b      	ldr	r2, [pc, #108]	@ (800e518 <pvPortMalloc+0x18c>)
 800e4ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e4ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e518 <pvPortMalloc+0x18c>)
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	4b1b      	ldr	r3, [pc, #108]	@ (800e520 <pvPortMalloc+0x194>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d203      	bcs.n	800e4c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e4ba:	4b17      	ldr	r3, [pc, #92]	@ (800e518 <pvPortMalloc+0x18c>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4a18      	ldr	r2, [pc, #96]	@ (800e520 <pvPortMalloc+0x194>)
 800e4c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c4:	685a      	ldr	r2, [r3, #4]
 800e4c6:	4b13      	ldr	r3, [pc, #76]	@ (800e514 <pvPortMalloc+0x188>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	431a      	orrs	r2, r3
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e4d6:	4b13      	ldr	r3, [pc, #76]	@ (800e524 <pvPortMalloc+0x198>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	4a11      	ldr	r2, [pc, #68]	@ (800e524 <pvPortMalloc+0x198>)
 800e4de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e4e0:	f7fe ff20 	bl	800d324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	f003 0307 	and.w	r3, r3, #7
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00b      	beq.n	800e506 <pvPortMalloc+0x17a>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	60fb      	str	r3, [r7, #12]
}
 800e500:	bf00      	nop
 800e502:	bf00      	nop
 800e504:	e7fd      	b.n	800e502 <pvPortMalloc+0x176>
	return pvReturn;
 800e506:	69fb      	ldr	r3, [r7, #28]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3728      	adds	r7, #40	@ 0x28
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	200042d8 	.word	0x200042d8
 800e514:	200042ec 	.word	0x200042ec
 800e518:	200042dc 	.word	0x200042dc
 800e51c:	200042d0 	.word	0x200042d0
 800e520:	200042e0 	.word	0x200042e0
 800e524:	200042e4 	.word	0x200042e4

0800e528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d04f      	beq.n	800e5da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e53a:	2308      	movs	r3, #8
 800e53c:	425b      	negs	r3, r3
 800e53e:	697a      	ldr	r2, [r7, #20]
 800e540:	4413      	add	r3, r2
 800e542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	4b25      	ldr	r3, [pc, #148]	@ (800e5e4 <vPortFree+0xbc>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4013      	ands	r3, r2
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10b      	bne.n	800e56e <vPortFree+0x46>
	__asm volatile
 800e556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	60fb      	str	r3, [r7, #12]
}
 800e568:	bf00      	nop
 800e56a:	bf00      	nop
 800e56c:	e7fd      	b.n	800e56a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00b      	beq.n	800e58e <vPortFree+0x66>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	60bb      	str	r3, [r7, #8]
}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	e7fd      	b.n	800e58a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	685a      	ldr	r2, [r3, #4]
 800e592:	4b14      	ldr	r3, [pc, #80]	@ (800e5e4 <vPortFree+0xbc>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4013      	ands	r3, r2
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d01e      	beq.n	800e5da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d11a      	bne.n	800e5da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	685a      	ldr	r2, [r3, #4]
 800e5a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e5e4 <vPortFree+0xbc>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	43db      	mvns	r3, r3
 800e5ae:	401a      	ands	r2, r3
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e5b4:	f7fe fea8 	bl	800d308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	685a      	ldr	r2, [r3, #4]
 800e5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e5e8 <vPortFree+0xc0>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	4a09      	ldr	r2, [pc, #36]	@ (800e5e8 <vPortFree+0xc0>)
 800e5c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e5c6:	6938      	ldr	r0, [r7, #16]
 800e5c8:	f000 f874 	bl	800e6b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e5cc:	4b07      	ldr	r3, [pc, #28]	@ (800e5ec <vPortFree+0xc4>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	4a06      	ldr	r2, [pc, #24]	@ (800e5ec <vPortFree+0xc4>)
 800e5d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e5d6:	f7fe fea5 	bl	800d324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e5da:	bf00      	nop
 800e5dc:	3718      	adds	r7, #24
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	200042ec 	.word	0x200042ec
 800e5e8:	200042dc 	.word	0x200042dc
 800e5ec:	200042e8 	.word	0x200042e8

0800e5f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e5f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e5fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e5fc:	4b27      	ldr	r3, [pc, #156]	@ (800e69c <prvHeapInit+0xac>)
 800e5fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f003 0307 	and.w	r3, r3, #7
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00c      	beq.n	800e624 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	3307      	adds	r3, #7
 800e60e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f023 0307 	bic.w	r3, r3, #7
 800e616:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	4a1f      	ldr	r2, [pc, #124]	@ (800e69c <prvHeapInit+0xac>)
 800e620:	4413      	add	r3, r2
 800e622:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e628:	4a1d      	ldr	r2, [pc, #116]	@ (800e6a0 <prvHeapInit+0xb0>)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e62e:	4b1c      	ldr	r3, [pc, #112]	@ (800e6a0 <prvHeapInit+0xb0>)
 800e630:	2200      	movs	r2, #0
 800e632:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	4413      	add	r3, r2
 800e63a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e63c:	2208      	movs	r2, #8
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	1a9b      	subs	r3, r3, r2
 800e642:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f023 0307 	bic.w	r3, r3, #7
 800e64a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4a15      	ldr	r2, [pc, #84]	@ (800e6a4 <prvHeapInit+0xb4>)
 800e650:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e652:	4b14      	ldr	r3, [pc, #80]	@ (800e6a4 <prvHeapInit+0xb4>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2200      	movs	r2, #0
 800e658:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e65a:	4b12      	ldr	r3, [pc, #72]	@ (800e6a4 <prvHeapInit+0xb4>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2200      	movs	r2, #0
 800e660:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	1ad2      	subs	r2, r2, r3
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e670:	4b0c      	ldr	r3, [pc, #48]	@ (800e6a4 <prvHeapInit+0xb4>)
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	4a0a      	ldr	r2, [pc, #40]	@ (800e6a8 <prvHeapInit+0xb8>)
 800e67e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	4a09      	ldr	r2, [pc, #36]	@ (800e6ac <prvHeapInit+0xbc>)
 800e686:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e688:	4b09      	ldr	r3, [pc, #36]	@ (800e6b0 <prvHeapInit+0xc0>)
 800e68a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e68e:	601a      	str	r2, [r3, #0]
}
 800e690:	bf00      	nop
 800e692:	3714      	adds	r7, #20
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	200006d0 	.word	0x200006d0
 800e6a0:	200042d0 	.word	0x200042d0
 800e6a4:	200042d8 	.word	0x200042d8
 800e6a8:	200042e0 	.word	0x200042e0
 800e6ac:	200042dc 	.word	0x200042dc
 800e6b0:	200042ec 	.word	0x200042ec

0800e6b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e6bc:	4b28      	ldr	r3, [pc, #160]	@ (800e760 <prvInsertBlockIntoFreeList+0xac>)
 800e6be:	60fb      	str	r3, [r7, #12]
 800e6c0:	e002      	b.n	800e6c8 <prvInsertBlockIntoFreeList+0x14>
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	60fb      	str	r3, [r7, #12]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d8f7      	bhi.n	800e6c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	4413      	add	r3, r2
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d108      	bne.n	800e6f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	685a      	ldr	r2, [r3, #4]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	441a      	add	r2, r3
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	441a      	add	r2, r3
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	429a      	cmp	r2, r3
 800e708:	d118      	bne.n	800e73c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	4b15      	ldr	r3, [pc, #84]	@ (800e764 <prvInsertBlockIntoFreeList+0xb0>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	429a      	cmp	r2, r3
 800e714:	d00d      	beq.n	800e732 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	685a      	ldr	r2, [r3, #4]
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	441a      	add	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	601a      	str	r2, [r3, #0]
 800e730:	e008      	b.n	800e744 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e732:	4b0c      	ldr	r3, [pc, #48]	@ (800e764 <prvInsertBlockIntoFreeList+0xb0>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	601a      	str	r2, [r3, #0]
 800e73a:	e003      	b.n	800e744 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e744:	68fa      	ldr	r2, [r7, #12]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d002      	beq.n	800e752 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e752:	bf00      	nop
 800e754:	3714      	adds	r7, #20
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	200042d0 	.word	0x200042d0
 800e764:	200042d8 	.word	0x200042d8

0800e768 <srand>:
 800e768:	b538      	push	{r3, r4, r5, lr}
 800e76a:	4b10      	ldr	r3, [pc, #64]	@ (800e7ac <srand+0x44>)
 800e76c:	681d      	ldr	r5, [r3, #0]
 800e76e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e770:	4604      	mov	r4, r0
 800e772:	b9b3      	cbnz	r3, 800e7a2 <srand+0x3a>
 800e774:	2018      	movs	r0, #24
 800e776:	f000 fa7d 	bl	800ec74 <malloc>
 800e77a:	4602      	mov	r2, r0
 800e77c:	6328      	str	r0, [r5, #48]	@ 0x30
 800e77e:	b920      	cbnz	r0, 800e78a <srand+0x22>
 800e780:	4b0b      	ldr	r3, [pc, #44]	@ (800e7b0 <srand+0x48>)
 800e782:	480c      	ldr	r0, [pc, #48]	@ (800e7b4 <srand+0x4c>)
 800e784:	2146      	movs	r1, #70	@ 0x46
 800e786:	f000 fa0d 	bl	800eba4 <__assert_func>
 800e78a:	490b      	ldr	r1, [pc, #44]	@ (800e7b8 <srand+0x50>)
 800e78c:	4b0b      	ldr	r3, [pc, #44]	@ (800e7bc <srand+0x54>)
 800e78e:	e9c0 1300 	strd	r1, r3, [r0]
 800e792:	4b0b      	ldr	r3, [pc, #44]	@ (800e7c0 <srand+0x58>)
 800e794:	6083      	str	r3, [r0, #8]
 800e796:	230b      	movs	r3, #11
 800e798:	8183      	strh	r3, [r0, #12]
 800e79a:	2100      	movs	r1, #0
 800e79c:	2001      	movs	r0, #1
 800e79e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e7a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	611c      	str	r4, [r3, #16]
 800e7a8:	615a      	str	r2, [r3, #20]
 800e7aa:	bd38      	pop	{r3, r4, r5, pc}
 800e7ac:	200000ac 	.word	0x200000ac
 800e7b0:	08052528 	.word	0x08052528
 800e7b4:	0805253f 	.word	0x0805253f
 800e7b8:	abcd330e 	.word	0xabcd330e
 800e7bc:	e66d1234 	.word	0xe66d1234
 800e7c0:	0005deec 	.word	0x0005deec

0800e7c4 <rand>:
 800e7c4:	4b16      	ldr	r3, [pc, #88]	@ (800e820 <rand+0x5c>)
 800e7c6:	b510      	push	{r4, lr}
 800e7c8:	681c      	ldr	r4, [r3, #0]
 800e7ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e7cc:	b9b3      	cbnz	r3, 800e7fc <rand+0x38>
 800e7ce:	2018      	movs	r0, #24
 800e7d0:	f000 fa50 	bl	800ec74 <malloc>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	6320      	str	r0, [r4, #48]	@ 0x30
 800e7d8:	b920      	cbnz	r0, 800e7e4 <rand+0x20>
 800e7da:	4b12      	ldr	r3, [pc, #72]	@ (800e824 <rand+0x60>)
 800e7dc:	4812      	ldr	r0, [pc, #72]	@ (800e828 <rand+0x64>)
 800e7de:	2152      	movs	r1, #82	@ 0x52
 800e7e0:	f000 f9e0 	bl	800eba4 <__assert_func>
 800e7e4:	4911      	ldr	r1, [pc, #68]	@ (800e82c <rand+0x68>)
 800e7e6:	4b12      	ldr	r3, [pc, #72]	@ (800e830 <rand+0x6c>)
 800e7e8:	e9c0 1300 	strd	r1, r3, [r0]
 800e7ec:	4b11      	ldr	r3, [pc, #68]	@ (800e834 <rand+0x70>)
 800e7ee:	6083      	str	r3, [r0, #8]
 800e7f0:	230b      	movs	r3, #11
 800e7f2:	8183      	strh	r3, [r0, #12]
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	2001      	movs	r0, #1
 800e7f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e7fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e7fe:	480e      	ldr	r0, [pc, #56]	@ (800e838 <rand+0x74>)
 800e800:	690b      	ldr	r3, [r1, #16]
 800e802:	694c      	ldr	r4, [r1, #20]
 800e804:	4a0d      	ldr	r2, [pc, #52]	@ (800e83c <rand+0x78>)
 800e806:	4358      	muls	r0, r3
 800e808:	fb02 0004 	mla	r0, r2, r4, r0
 800e80c:	fba3 3202 	umull	r3, r2, r3, r2
 800e810:	3301      	adds	r3, #1
 800e812:	eb40 0002 	adc.w	r0, r0, r2
 800e816:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e81a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e81e:	bd10      	pop	{r4, pc}
 800e820:	200000ac 	.word	0x200000ac
 800e824:	08052528 	.word	0x08052528
 800e828:	0805253f 	.word	0x0805253f
 800e82c:	abcd330e 	.word	0xabcd330e
 800e830:	e66d1234 	.word	0xe66d1234
 800e834:	0005deec 	.word	0x0005deec
 800e838:	5851f42d 	.word	0x5851f42d
 800e83c:	4c957f2d 	.word	0x4c957f2d

0800e840 <std>:
 800e840:	2300      	movs	r3, #0
 800e842:	b510      	push	{r4, lr}
 800e844:	4604      	mov	r4, r0
 800e846:	e9c0 3300 	strd	r3, r3, [r0]
 800e84a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e84e:	6083      	str	r3, [r0, #8]
 800e850:	8181      	strh	r1, [r0, #12]
 800e852:	6643      	str	r3, [r0, #100]	@ 0x64
 800e854:	81c2      	strh	r2, [r0, #14]
 800e856:	6183      	str	r3, [r0, #24]
 800e858:	4619      	mov	r1, r3
 800e85a:	2208      	movs	r2, #8
 800e85c:	305c      	adds	r0, #92	@ 0x5c
 800e85e:	f000 f916 	bl	800ea8e <memset>
 800e862:	4b0d      	ldr	r3, [pc, #52]	@ (800e898 <std+0x58>)
 800e864:	6263      	str	r3, [r4, #36]	@ 0x24
 800e866:	4b0d      	ldr	r3, [pc, #52]	@ (800e89c <std+0x5c>)
 800e868:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e86a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a0 <std+0x60>)
 800e86c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e86e:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a4 <std+0x64>)
 800e870:	6323      	str	r3, [r4, #48]	@ 0x30
 800e872:	4b0d      	ldr	r3, [pc, #52]	@ (800e8a8 <std+0x68>)
 800e874:	6224      	str	r4, [r4, #32]
 800e876:	429c      	cmp	r4, r3
 800e878:	d006      	beq.n	800e888 <std+0x48>
 800e87a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e87e:	4294      	cmp	r4, r2
 800e880:	d002      	beq.n	800e888 <std+0x48>
 800e882:	33d0      	adds	r3, #208	@ 0xd0
 800e884:	429c      	cmp	r4, r3
 800e886:	d105      	bne.n	800e894 <std+0x54>
 800e888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e890:	f000 b976 	b.w	800eb80 <__retarget_lock_init_recursive>
 800e894:	bd10      	pop	{r4, pc}
 800e896:	bf00      	nop
 800e898:	0800ea09 	.word	0x0800ea09
 800e89c:	0800ea2b 	.word	0x0800ea2b
 800e8a0:	0800ea63 	.word	0x0800ea63
 800e8a4:	0800ea87 	.word	0x0800ea87
 800e8a8:	200042f0 	.word	0x200042f0

0800e8ac <stdio_exit_handler>:
 800e8ac:	4a02      	ldr	r2, [pc, #8]	@ (800e8b8 <stdio_exit_handler+0xc>)
 800e8ae:	4903      	ldr	r1, [pc, #12]	@ (800e8bc <stdio_exit_handler+0x10>)
 800e8b0:	4803      	ldr	r0, [pc, #12]	@ (800e8c0 <stdio_exit_handler+0x14>)
 800e8b2:	f000 b869 	b.w	800e988 <_fwalk_sglue>
 800e8b6:	bf00      	nop
 800e8b8:	200000a0 	.word	0x200000a0
 800e8bc:	0800f4b1 	.word	0x0800f4b1
 800e8c0:	200000b0 	.word	0x200000b0

0800e8c4 <cleanup_stdio>:
 800e8c4:	6841      	ldr	r1, [r0, #4]
 800e8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f8 <cleanup_stdio+0x34>)
 800e8c8:	4299      	cmp	r1, r3
 800e8ca:	b510      	push	{r4, lr}
 800e8cc:	4604      	mov	r4, r0
 800e8ce:	d001      	beq.n	800e8d4 <cleanup_stdio+0x10>
 800e8d0:	f000 fdee 	bl	800f4b0 <_fflush_r>
 800e8d4:	68a1      	ldr	r1, [r4, #8]
 800e8d6:	4b09      	ldr	r3, [pc, #36]	@ (800e8fc <cleanup_stdio+0x38>)
 800e8d8:	4299      	cmp	r1, r3
 800e8da:	d002      	beq.n	800e8e2 <cleanup_stdio+0x1e>
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f000 fde7 	bl	800f4b0 <_fflush_r>
 800e8e2:	68e1      	ldr	r1, [r4, #12]
 800e8e4:	4b06      	ldr	r3, [pc, #24]	@ (800e900 <cleanup_stdio+0x3c>)
 800e8e6:	4299      	cmp	r1, r3
 800e8e8:	d004      	beq.n	800e8f4 <cleanup_stdio+0x30>
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8f0:	f000 bdde 	b.w	800f4b0 <_fflush_r>
 800e8f4:	bd10      	pop	{r4, pc}
 800e8f6:	bf00      	nop
 800e8f8:	200042f0 	.word	0x200042f0
 800e8fc:	20004358 	.word	0x20004358
 800e900:	200043c0 	.word	0x200043c0

0800e904 <global_stdio_init.part.0>:
 800e904:	b510      	push	{r4, lr}
 800e906:	4b0b      	ldr	r3, [pc, #44]	@ (800e934 <global_stdio_init.part.0+0x30>)
 800e908:	4c0b      	ldr	r4, [pc, #44]	@ (800e938 <global_stdio_init.part.0+0x34>)
 800e90a:	4a0c      	ldr	r2, [pc, #48]	@ (800e93c <global_stdio_init.part.0+0x38>)
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	4620      	mov	r0, r4
 800e910:	2200      	movs	r2, #0
 800e912:	2104      	movs	r1, #4
 800e914:	f7ff ff94 	bl	800e840 <std>
 800e918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e91c:	2201      	movs	r2, #1
 800e91e:	2109      	movs	r1, #9
 800e920:	f7ff ff8e 	bl	800e840 <std>
 800e924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e928:	2202      	movs	r2, #2
 800e92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e92e:	2112      	movs	r1, #18
 800e930:	f7ff bf86 	b.w	800e840 <std>
 800e934:	20004428 	.word	0x20004428
 800e938:	200042f0 	.word	0x200042f0
 800e93c:	0800e8ad 	.word	0x0800e8ad

0800e940 <__sfp_lock_acquire>:
 800e940:	4801      	ldr	r0, [pc, #4]	@ (800e948 <__sfp_lock_acquire+0x8>)
 800e942:	f000 b91e 	b.w	800eb82 <__retarget_lock_acquire_recursive>
 800e946:	bf00      	nop
 800e948:	20004431 	.word	0x20004431

0800e94c <__sfp_lock_release>:
 800e94c:	4801      	ldr	r0, [pc, #4]	@ (800e954 <__sfp_lock_release+0x8>)
 800e94e:	f000 b919 	b.w	800eb84 <__retarget_lock_release_recursive>
 800e952:	bf00      	nop
 800e954:	20004431 	.word	0x20004431

0800e958 <__sinit>:
 800e958:	b510      	push	{r4, lr}
 800e95a:	4604      	mov	r4, r0
 800e95c:	f7ff fff0 	bl	800e940 <__sfp_lock_acquire>
 800e960:	6a23      	ldr	r3, [r4, #32]
 800e962:	b11b      	cbz	r3, 800e96c <__sinit+0x14>
 800e964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e968:	f7ff bff0 	b.w	800e94c <__sfp_lock_release>
 800e96c:	4b04      	ldr	r3, [pc, #16]	@ (800e980 <__sinit+0x28>)
 800e96e:	6223      	str	r3, [r4, #32]
 800e970:	4b04      	ldr	r3, [pc, #16]	@ (800e984 <__sinit+0x2c>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1f5      	bne.n	800e964 <__sinit+0xc>
 800e978:	f7ff ffc4 	bl	800e904 <global_stdio_init.part.0>
 800e97c:	e7f2      	b.n	800e964 <__sinit+0xc>
 800e97e:	bf00      	nop
 800e980:	0800e8c5 	.word	0x0800e8c5
 800e984:	20004428 	.word	0x20004428

0800e988 <_fwalk_sglue>:
 800e988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e98c:	4607      	mov	r7, r0
 800e98e:	4688      	mov	r8, r1
 800e990:	4614      	mov	r4, r2
 800e992:	2600      	movs	r6, #0
 800e994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e998:	f1b9 0901 	subs.w	r9, r9, #1
 800e99c:	d505      	bpl.n	800e9aa <_fwalk_sglue+0x22>
 800e99e:	6824      	ldr	r4, [r4, #0]
 800e9a0:	2c00      	cmp	r4, #0
 800e9a2:	d1f7      	bne.n	800e994 <_fwalk_sglue+0xc>
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9aa:	89ab      	ldrh	r3, [r5, #12]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d907      	bls.n	800e9c0 <_fwalk_sglue+0x38>
 800e9b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	d003      	beq.n	800e9c0 <_fwalk_sglue+0x38>
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	47c0      	blx	r8
 800e9be:	4306      	orrs	r6, r0
 800e9c0:	3568      	adds	r5, #104	@ 0x68
 800e9c2:	e7e9      	b.n	800e998 <_fwalk_sglue+0x10>

0800e9c4 <siprintf>:
 800e9c4:	b40e      	push	{r1, r2, r3}
 800e9c6:	b510      	push	{r4, lr}
 800e9c8:	b09d      	sub	sp, #116	@ 0x74
 800e9ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e9cc:	9002      	str	r0, [sp, #8]
 800e9ce:	9006      	str	r0, [sp, #24]
 800e9d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e9d4:	480a      	ldr	r0, [pc, #40]	@ (800ea00 <siprintf+0x3c>)
 800e9d6:	9107      	str	r1, [sp, #28]
 800e9d8:	9104      	str	r1, [sp, #16]
 800e9da:	490a      	ldr	r1, [pc, #40]	@ (800ea04 <siprintf+0x40>)
 800e9dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9e0:	9105      	str	r1, [sp, #20]
 800e9e2:	2400      	movs	r4, #0
 800e9e4:	a902      	add	r1, sp, #8
 800e9e6:	6800      	ldr	r0, [r0, #0]
 800e9e8:	9301      	str	r3, [sp, #4]
 800e9ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e9ec:	f000 fa54 	bl	800ee98 <_svfiprintf_r>
 800e9f0:	9b02      	ldr	r3, [sp, #8]
 800e9f2:	701c      	strb	r4, [r3, #0]
 800e9f4:	b01d      	add	sp, #116	@ 0x74
 800e9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9fa:	b003      	add	sp, #12
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	200000ac 	.word	0x200000ac
 800ea04:	ffff0208 	.word	0xffff0208

0800ea08 <__sread>:
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	460c      	mov	r4, r1
 800ea0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea10:	f000 f868 	bl	800eae4 <_read_r>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	bfab      	itete	ge
 800ea18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ea1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ea1c:	181b      	addge	r3, r3, r0
 800ea1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ea22:	bfac      	ite	ge
 800ea24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ea26:	81a3      	strhlt	r3, [r4, #12]
 800ea28:	bd10      	pop	{r4, pc}

0800ea2a <__swrite>:
 800ea2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea2e:	461f      	mov	r7, r3
 800ea30:	898b      	ldrh	r3, [r1, #12]
 800ea32:	05db      	lsls	r3, r3, #23
 800ea34:	4605      	mov	r5, r0
 800ea36:	460c      	mov	r4, r1
 800ea38:	4616      	mov	r6, r2
 800ea3a:	d505      	bpl.n	800ea48 <__swrite+0x1e>
 800ea3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea40:	2302      	movs	r3, #2
 800ea42:	2200      	movs	r2, #0
 800ea44:	f000 f83c 	bl	800eac0 <_lseek_r>
 800ea48:	89a3      	ldrh	r3, [r4, #12]
 800ea4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea52:	81a3      	strh	r3, [r4, #12]
 800ea54:	4632      	mov	r2, r6
 800ea56:	463b      	mov	r3, r7
 800ea58:	4628      	mov	r0, r5
 800ea5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea5e:	f000 b853 	b.w	800eb08 <_write_r>

0800ea62 <__sseek>:
 800ea62:	b510      	push	{r4, lr}
 800ea64:	460c      	mov	r4, r1
 800ea66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea6a:	f000 f829 	bl	800eac0 <_lseek_r>
 800ea6e:	1c43      	adds	r3, r0, #1
 800ea70:	89a3      	ldrh	r3, [r4, #12]
 800ea72:	bf15      	itete	ne
 800ea74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ea76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ea7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ea7e:	81a3      	strheq	r3, [r4, #12]
 800ea80:	bf18      	it	ne
 800ea82:	81a3      	strhne	r3, [r4, #12]
 800ea84:	bd10      	pop	{r4, pc}

0800ea86 <__sclose>:
 800ea86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea8a:	f000 b809 	b.w	800eaa0 <_close_r>

0800ea8e <memset>:
 800ea8e:	4402      	add	r2, r0
 800ea90:	4603      	mov	r3, r0
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d100      	bne.n	800ea98 <memset+0xa>
 800ea96:	4770      	bx	lr
 800ea98:	f803 1b01 	strb.w	r1, [r3], #1
 800ea9c:	e7f9      	b.n	800ea92 <memset+0x4>
	...

0800eaa0 <_close_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4d06      	ldr	r5, [pc, #24]	@ (800eabc <_close_r+0x1c>)
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	4608      	mov	r0, r1
 800eaaa:	602b      	str	r3, [r5, #0]
 800eaac:	f7f4 fbcd 	bl	800324a <_close>
 800eab0:	1c43      	adds	r3, r0, #1
 800eab2:	d102      	bne.n	800eaba <_close_r+0x1a>
 800eab4:	682b      	ldr	r3, [r5, #0]
 800eab6:	b103      	cbz	r3, 800eaba <_close_r+0x1a>
 800eab8:	6023      	str	r3, [r4, #0]
 800eaba:	bd38      	pop	{r3, r4, r5, pc}
 800eabc:	2000442c 	.word	0x2000442c

0800eac0 <_lseek_r>:
 800eac0:	b538      	push	{r3, r4, r5, lr}
 800eac2:	4d07      	ldr	r5, [pc, #28]	@ (800eae0 <_lseek_r+0x20>)
 800eac4:	4604      	mov	r4, r0
 800eac6:	4608      	mov	r0, r1
 800eac8:	4611      	mov	r1, r2
 800eaca:	2200      	movs	r2, #0
 800eacc:	602a      	str	r2, [r5, #0]
 800eace:	461a      	mov	r2, r3
 800ead0:	f7f4 fbe2 	bl	8003298 <_lseek>
 800ead4:	1c43      	adds	r3, r0, #1
 800ead6:	d102      	bne.n	800eade <_lseek_r+0x1e>
 800ead8:	682b      	ldr	r3, [r5, #0]
 800eada:	b103      	cbz	r3, 800eade <_lseek_r+0x1e>
 800eadc:	6023      	str	r3, [r4, #0]
 800eade:	bd38      	pop	{r3, r4, r5, pc}
 800eae0:	2000442c 	.word	0x2000442c

0800eae4 <_read_r>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	4d07      	ldr	r5, [pc, #28]	@ (800eb04 <_read_r+0x20>)
 800eae8:	4604      	mov	r4, r0
 800eaea:	4608      	mov	r0, r1
 800eaec:	4611      	mov	r1, r2
 800eaee:	2200      	movs	r2, #0
 800eaf0:	602a      	str	r2, [r5, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f7f4 fb70 	bl	80031d8 <_read>
 800eaf8:	1c43      	adds	r3, r0, #1
 800eafa:	d102      	bne.n	800eb02 <_read_r+0x1e>
 800eafc:	682b      	ldr	r3, [r5, #0]
 800eafe:	b103      	cbz	r3, 800eb02 <_read_r+0x1e>
 800eb00:	6023      	str	r3, [r4, #0]
 800eb02:	bd38      	pop	{r3, r4, r5, pc}
 800eb04:	2000442c 	.word	0x2000442c

0800eb08 <_write_r>:
 800eb08:	b538      	push	{r3, r4, r5, lr}
 800eb0a:	4d07      	ldr	r5, [pc, #28]	@ (800eb28 <_write_r+0x20>)
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	4608      	mov	r0, r1
 800eb10:	4611      	mov	r1, r2
 800eb12:	2200      	movs	r2, #0
 800eb14:	602a      	str	r2, [r5, #0]
 800eb16:	461a      	mov	r2, r3
 800eb18:	f7f4 fb7b 	bl	8003212 <_write>
 800eb1c:	1c43      	adds	r3, r0, #1
 800eb1e:	d102      	bne.n	800eb26 <_write_r+0x1e>
 800eb20:	682b      	ldr	r3, [r5, #0]
 800eb22:	b103      	cbz	r3, 800eb26 <_write_r+0x1e>
 800eb24:	6023      	str	r3, [r4, #0]
 800eb26:	bd38      	pop	{r3, r4, r5, pc}
 800eb28:	2000442c 	.word	0x2000442c

0800eb2c <__errno>:
 800eb2c:	4b01      	ldr	r3, [pc, #4]	@ (800eb34 <__errno+0x8>)
 800eb2e:	6818      	ldr	r0, [r3, #0]
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	200000ac 	.word	0x200000ac

0800eb38 <__libc_init_array>:
 800eb38:	b570      	push	{r4, r5, r6, lr}
 800eb3a:	4d0d      	ldr	r5, [pc, #52]	@ (800eb70 <__libc_init_array+0x38>)
 800eb3c:	4c0d      	ldr	r4, [pc, #52]	@ (800eb74 <__libc_init_array+0x3c>)
 800eb3e:	1b64      	subs	r4, r4, r5
 800eb40:	10a4      	asrs	r4, r4, #2
 800eb42:	2600      	movs	r6, #0
 800eb44:	42a6      	cmp	r6, r4
 800eb46:	d109      	bne.n	800eb5c <__libc_init_array+0x24>
 800eb48:	4d0b      	ldr	r5, [pc, #44]	@ (800eb78 <__libc_init_array+0x40>)
 800eb4a:	4c0c      	ldr	r4, [pc, #48]	@ (800eb7c <__libc_init_array+0x44>)
 800eb4c:	f000 ffee 	bl	800fb2c <_init>
 800eb50:	1b64      	subs	r4, r4, r5
 800eb52:	10a4      	asrs	r4, r4, #2
 800eb54:	2600      	movs	r6, #0
 800eb56:	42a6      	cmp	r6, r4
 800eb58:	d105      	bne.n	800eb66 <__libc_init_array+0x2e>
 800eb5a:	bd70      	pop	{r4, r5, r6, pc}
 800eb5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb60:	4798      	blx	r3
 800eb62:	3601      	adds	r6, #1
 800eb64:	e7ee      	b.n	800eb44 <__libc_init_array+0xc>
 800eb66:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb6a:	4798      	blx	r3
 800eb6c:	3601      	adds	r6, #1
 800eb6e:	e7f2      	b.n	800eb56 <__libc_init_array+0x1e>
 800eb70:	08052610 	.word	0x08052610
 800eb74:	08052610 	.word	0x08052610
 800eb78:	08052610 	.word	0x08052610
 800eb7c:	08052614 	.word	0x08052614

0800eb80 <__retarget_lock_init_recursive>:
 800eb80:	4770      	bx	lr

0800eb82 <__retarget_lock_acquire_recursive>:
 800eb82:	4770      	bx	lr

0800eb84 <__retarget_lock_release_recursive>:
 800eb84:	4770      	bx	lr

0800eb86 <memcpy>:
 800eb86:	440a      	add	r2, r1
 800eb88:	4291      	cmp	r1, r2
 800eb8a:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb8e:	d100      	bne.n	800eb92 <memcpy+0xc>
 800eb90:	4770      	bx	lr
 800eb92:	b510      	push	{r4, lr}
 800eb94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb9c:	4291      	cmp	r1, r2
 800eb9e:	d1f9      	bne.n	800eb94 <memcpy+0xe>
 800eba0:	bd10      	pop	{r4, pc}
	...

0800eba4 <__assert_func>:
 800eba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eba6:	4614      	mov	r4, r2
 800eba8:	461a      	mov	r2, r3
 800ebaa:	4b09      	ldr	r3, [pc, #36]	@ (800ebd0 <__assert_func+0x2c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4605      	mov	r5, r0
 800ebb0:	68d8      	ldr	r0, [r3, #12]
 800ebb2:	b14c      	cbz	r4, 800ebc8 <__assert_func+0x24>
 800ebb4:	4b07      	ldr	r3, [pc, #28]	@ (800ebd4 <__assert_func+0x30>)
 800ebb6:	9100      	str	r1, [sp, #0]
 800ebb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ebbc:	4906      	ldr	r1, [pc, #24]	@ (800ebd8 <__assert_func+0x34>)
 800ebbe:	462b      	mov	r3, r5
 800ebc0:	f000 fc9e 	bl	800f500 <fiprintf>
 800ebc4:	f000 fcd8 	bl	800f578 <abort>
 800ebc8:	4b04      	ldr	r3, [pc, #16]	@ (800ebdc <__assert_func+0x38>)
 800ebca:	461c      	mov	r4, r3
 800ebcc:	e7f3      	b.n	800ebb6 <__assert_func+0x12>
 800ebce:	bf00      	nop
 800ebd0:	200000ac 	.word	0x200000ac
 800ebd4:	08052597 	.word	0x08052597
 800ebd8:	080525a4 	.word	0x080525a4
 800ebdc:	080525d2 	.word	0x080525d2

0800ebe0 <_free_r>:
 800ebe0:	b538      	push	{r3, r4, r5, lr}
 800ebe2:	4605      	mov	r5, r0
 800ebe4:	2900      	cmp	r1, #0
 800ebe6:	d041      	beq.n	800ec6c <_free_r+0x8c>
 800ebe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebec:	1f0c      	subs	r4, r1, #4
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	bfb8      	it	lt
 800ebf2:	18e4      	addlt	r4, r4, r3
 800ebf4:	f000 f8e8 	bl	800edc8 <__malloc_lock>
 800ebf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ec70 <_free_r+0x90>)
 800ebfa:	6813      	ldr	r3, [r2, #0]
 800ebfc:	b933      	cbnz	r3, 800ec0c <_free_r+0x2c>
 800ebfe:	6063      	str	r3, [r4, #4]
 800ec00:	6014      	str	r4, [r2, #0]
 800ec02:	4628      	mov	r0, r5
 800ec04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec08:	f000 b8e4 	b.w	800edd4 <__malloc_unlock>
 800ec0c:	42a3      	cmp	r3, r4
 800ec0e:	d908      	bls.n	800ec22 <_free_r+0x42>
 800ec10:	6820      	ldr	r0, [r4, #0]
 800ec12:	1821      	adds	r1, r4, r0
 800ec14:	428b      	cmp	r3, r1
 800ec16:	bf01      	itttt	eq
 800ec18:	6819      	ldreq	r1, [r3, #0]
 800ec1a:	685b      	ldreq	r3, [r3, #4]
 800ec1c:	1809      	addeq	r1, r1, r0
 800ec1e:	6021      	streq	r1, [r4, #0]
 800ec20:	e7ed      	b.n	800ebfe <_free_r+0x1e>
 800ec22:	461a      	mov	r2, r3
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	b10b      	cbz	r3, 800ec2c <_free_r+0x4c>
 800ec28:	42a3      	cmp	r3, r4
 800ec2a:	d9fa      	bls.n	800ec22 <_free_r+0x42>
 800ec2c:	6811      	ldr	r1, [r2, #0]
 800ec2e:	1850      	adds	r0, r2, r1
 800ec30:	42a0      	cmp	r0, r4
 800ec32:	d10b      	bne.n	800ec4c <_free_r+0x6c>
 800ec34:	6820      	ldr	r0, [r4, #0]
 800ec36:	4401      	add	r1, r0
 800ec38:	1850      	adds	r0, r2, r1
 800ec3a:	4283      	cmp	r3, r0
 800ec3c:	6011      	str	r1, [r2, #0]
 800ec3e:	d1e0      	bne.n	800ec02 <_free_r+0x22>
 800ec40:	6818      	ldr	r0, [r3, #0]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	6053      	str	r3, [r2, #4]
 800ec46:	4408      	add	r0, r1
 800ec48:	6010      	str	r0, [r2, #0]
 800ec4a:	e7da      	b.n	800ec02 <_free_r+0x22>
 800ec4c:	d902      	bls.n	800ec54 <_free_r+0x74>
 800ec4e:	230c      	movs	r3, #12
 800ec50:	602b      	str	r3, [r5, #0]
 800ec52:	e7d6      	b.n	800ec02 <_free_r+0x22>
 800ec54:	6820      	ldr	r0, [r4, #0]
 800ec56:	1821      	adds	r1, r4, r0
 800ec58:	428b      	cmp	r3, r1
 800ec5a:	bf04      	itt	eq
 800ec5c:	6819      	ldreq	r1, [r3, #0]
 800ec5e:	685b      	ldreq	r3, [r3, #4]
 800ec60:	6063      	str	r3, [r4, #4]
 800ec62:	bf04      	itt	eq
 800ec64:	1809      	addeq	r1, r1, r0
 800ec66:	6021      	streq	r1, [r4, #0]
 800ec68:	6054      	str	r4, [r2, #4]
 800ec6a:	e7ca      	b.n	800ec02 <_free_r+0x22>
 800ec6c:	bd38      	pop	{r3, r4, r5, pc}
 800ec6e:	bf00      	nop
 800ec70:	20004438 	.word	0x20004438

0800ec74 <malloc>:
 800ec74:	4b02      	ldr	r3, [pc, #8]	@ (800ec80 <malloc+0xc>)
 800ec76:	4601      	mov	r1, r0
 800ec78:	6818      	ldr	r0, [r3, #0]
 800ec7a:	f000 b825 	b.w	800ecc8 <_malloc_r>
 800ec7e:	bf00      	nop
 800ec80:	200000ac 	.word	0x200000ac

0800ec84 <sbrk_aligned>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	4e0f      	ldr	r6, [pc, #60]	@ (800ecc4 <sbrk_aligned+0x40>)
 800ec88:	460c      	mov	r4, r1
 800ec8a:	6831      	ldr	r1, [r6, #0]
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	b911      	cbnz	r1, 800ec96 <sbrk_aligned+0x12>
 800ec90:	f000 fc62 	bl	800f558 <_sbrk_r>
 800ec94:	6030      	str	r0, [r6, #0]
 800ec96:	4621      	mov	r1, r4
 800ec98:	4628      	mov	r0, r5
 800ec9a:	f000 fc5d 	bl	800f558 <_sbrk_r>
 800ec9e:	1c43      	adds	r3, r0, #1
 800eca0:	d103      	bne.n	800ecaa <sbrk_aligned+0x26>
 800eca2:	f04f 34ff 	mov.w	r4, #4294967295
 800eca6:	4620      	mov	r0, r4
 800eca8:	bd70      	pop	{r4, r5, r6, pc}
 800ecaa:	1cc4      	adds	r4, r0, #3
 800ecac:	f024 0403 	bic.w	r4, r4, #3
 800ecb0:	42a0      	cmp	r0, r4
 800ecb2:	d0f8      	beq.n	800eca6 <sbrk_aligned+0x22>
 800ecb4:	1a21      	subs	r1, r4, r0
 800ecb6:	4628      	mov	r0, r5
 800ecb8:	f000 fc4e 	bl	800f558 <_sbrk_r>
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	d1f2      	bne.n	800eca6 <sbrk_aligned+0x22>
 800ecc0:	e7ef      	b.n	800eca2 <sbrk_aligned+0x1e>
 800ecc2:	bf00      	nop
 800ecc4:	20004434 	.word	0x20004434

0800ecc8 <_malloc_r>:
 800ecc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eccc:	1ccd      	adds	r5, r1, #3
 800ecce:	f025 0503 	bic.w	r5, r5, #3
 800ecd2:	3508      	adds	r5, #8
 800ecd4:	2d0c      	cmp	r5, #12
 800ecd6:	bf38      	it	cc
 800ecd8:	250c      	movcc	r5, #12
 800ecda:	2d00      	cmp	r5, #0
 800ecdc:	4606      	mov	r6, r0
 800ecde:	db01      	blt.n	800ece4 <_malloc_r+0x1c>
 800ece0:	42a9      	cmp	r1, r5
 800ece2:	d904      	bls.n	800ecee <_malloc_r+0x26>
 800ece4:	230c      	movs	r3, #12
 800ece6:	6033      	str	r3, [r6, #0]
 800ece8:	2000      	movs	r0, #0
 800ecea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800edc4 <_malloc_r+0xfc>
 800ecf2:	f000 f869 	bl	800edc8 <__malloc_lock>
 800ecf6:	f8d8 3000 	ldr.w	r3, [r8]
 800ecfa:	461c      	mov	r4, r3
 800ecfc:	bb44      	cbnz	r4, 800ed50 <_malloc_r+0x88>
 800ecfe:	4629      	mov	r1, r5
 800ed00:	4630      	mov	r0, r6
 800ed02:	f7ff ffbf 	bl	800ec84 <sbrk_aligned>
 800ed06:	1c43      	adds	r3, r0, #1
 800ed08:	4604      	mov	r4, r0
 800ed0a:	d158      	bne.n	800edbe <_malloc_r+0xf6>
 800ed0c:	f8d8 4000 	ldr.w	r4, [r8]
 800ed10:	4627      	mov	r7, r4
 800ed12:	2f00      	cmp	r7, #0
 800ed14:	d143      	bne.n	800ed9e <_malloc_r+0xd6>
 800ed16:	2c00      	cmp	r4, #0
 800ed18:	d04b      	beq.n	800edb2 <_malloc_r+0xea>
 800ed1a:	6823      	ldr	r3, [r4, #0]
 800ed1c:	4639      	mov	r1, r7
 800ed1e:	4630      	mov	r0, r6
 800ed20:	eb04 0903 	add.w	r9, r4, r3
 800ed24:	f000 fc18 	bl	800f558 <_sbrk_r>
 800ed28:	4581      	cmp	r9, r0
 800ed2a:	d142      	bne.n	800edb2 <_malloc_r+0xea>
 800ed2c:	6821      	ldr	r1, [r4, #0]
 800ed2e:	1a6d      	subs	r5, r5, r1
 800ed30:	4629      	mov	r1, r5
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7ff ffa6 	bl	800ec84 <sbrk_aligned>
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d03a      	beq.n	800edb2 <_malloc_r+0xea>
 800ed3c:	6823      	ldr	r3, [r4, #0]
 800ed3e:	442b      	add	r3, r5
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	f8d8 3000 	ldr.w	r3, [r8]
 800ed46:	685a      	ldr	r2, [r3, #4]
 800ed48:	bb62      	cbnz	r2, 800eda4 <_malloc_r+0xdc>
 800ed4a:	f8c8 7000 	str.w	r7, [r8]
 800ed4e:	e00f      	b.n	800ed70 <_malloc_r+0xa8>
 800ed50:	6822      	ldr	r2, [r4, #0]
 800ed52:	1b52      	subs	r2, r2, r5
 800ed54:	d420      	bmi.n	800ed98 <_malloc_r+0xd0>
 800ed56:	2a0b      	cmp	r2, #11
 800ed58:	d917      	bls.n	800ed8a <_malloc_r+0xc2>
 800ed5a:	1961      	adds	r1, r4, r5
 800ed5c:	42a3      	cmp	r3, r4
 800ed5e:	6025      	str	r5, [r4, #0]
 800ed60:	bf18      	it	ne
 800ed62:	6059      	strne	r1, [r3, #4]
 800ed64:	6863      	ldr	r3, [r4, #4]
 800ed66:	bf08      	it	eq
 800ed68:	f8c8 1000 	streq.w	r1, [r8]
 800ed6c:	5162      	str	r2, [r4, r5]
 800ed6e:	604b      	str	r3, [r1, #4]
 800ed70:	4630      	mov	r0, r6
 800ed72:	f000 f82f 	bl	800edd4 <__malloc_unlock>
 800ed76:	f104 000b 	add.w	r0, r4, #11
 800ed7a:	1d23      	adds	r3, r4, #4
 800ed7c:	f020 0007 	bic.w	r0, r0, #7
 800ed80:	1ac2      	subs	r2, r0, r3
 800ed82:	bf1c      	itt	ne
 800ed84:	1a1b      	subne	r3, r3, r0
 800ed86:	50a3      	strne	r3, [r4, r2]
 800ed88:	e7af      	b.n	800ecea <_malloc_r+0x22>
 800ed8a:	6862      	ldr	r2, [r4, #4]
 800ed8c:	42a3      	cmp	r3, r4
 800ed8e:	bf0c      	ite	eq
 800ed90:	f8c8 2000 	streq.w	r2, [r8]
 800ed94:	605a      	strne	r2, [r3, #4]
 800ed96:	e7eb      	b.n	800ed70 <_malloc_r+0xa8>
 800ed98:	4623      	mov	r3, r4
 800ed9a:	6864      	ldr	r4, [r4, #4]
 800ed9c:	e7ae      	b.n	800ecfc <_malloc_r+0x34>
 800ed9e:	463c      	mov	r4, r7
 800eda0:	687f      	ldr	r7, [r7, #4]
 800eda2:	e7b6      	b.n	800ed12 <_malloc_r+0x4a>
 800eda4:	461a      	mov	r2, r3
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	42a3      	cmp	r3, r4
 800edaa:	d1fb      	bne.n	800eda4 <_malloc_r+0xdc>
 800edac:	2300      	movs	r3, #0
 800edae:	6053      	str	r3, [r2, #4]
 800edb0:	e7de      	b.n	800ed70 <_malloc_r+0xa8>
 800edb2:	230c      	movs	r3, #12
 800edb4:	6033      	str	r3, [r6, #0]
 800edb6:	4630      	mov	r0, r6
 800edb8:	f000 f80c 	bl	800edd4 <__malloc_unlock>
 800edbc:	e794      	b.n	800ece8 <_malloc_r+0x20>
 800edbe:	6005      	str	r5, [r0, #0]
 800edc0:	e7d6      	b.n	800ed70 <_malloc_r+0xa8>
 800edc2:	bf00      	nop
 800edc4:	20004438 	.word	0x20004438

0800edc8 <__malloc_lock>:
 800edc8:	4801      	ldr	r0, [pc, #4]	@ (800edd0 <__malloc_lock+0x8>)
 800edca:	f7ff beda 	b.w	800eb82 <__retarget_lock_acquire_recursive>
 800edce:	bf00      	nop
 800edd0:	20004430 	.word	0x20004430

0800edd4 <__malloc_unlock>:
 800edd4:	4801      	ldr	r0, [pc, #4]	@ (800eddc <__malloc_unlock+0x8>)
 800edd6:	f7ff bed5 	b.w	800eb84 <__retarget_lock_release_recursive>
 800edda:	bf00      	nop
 800eddc:	20004430 	.word	0x20004430

0800ede0 <__ssputs_r>:
 800ede0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ede4:	688e      	ldr	r6, [r1, #8]
 800ede6:	461f      	mov	r7, r3
 800ede8:	42be      	cmp	r6, r7
 800edea:	680b      	ldr	r3, [r1, #0]
 800edec:	4682      	mov	sl, r0
 800edee:	460c      	mov	r4, r1
 800edf0:	4690      	mov	r8, r2
 800edf2:	d82d      	bhi.n	800ee50 <__ssputs_r+0x70>
 800edf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800edfc:	d026      	beq.n	800ee4c <__ssputs_r+0x6c>
 800edfe:	6965      	ldr	r5, [r4, #20]
 800ee00:	6909      	ldr	r1, [r1, #16]
 800ee02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee06:	eba3 0901 	sub.w	r9, r3, r1
 800ee0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee0e:	1c7b      	adds	r3, r7, #1
 800ee10:	444b      	add	r3, r9
 800ee12:	106d      	asrs	r5, r5, #1
 800ee14:	429d      	cmp	r5, r3
 800ee16:	bf38      	it	cc
 800ee18:	461d      	movcc	r5, r3
 800ee1a:	0553      	lsls	r3, r2, #21
 800ee1c:	d527      	bpl.n	800ee6e <__ssputs_r+0x8e>
 800ee1e:	4629      	mov	r1, r5
 800ee20:	f7ff ff52 	bl	800ecc8 <_malloc_r>
 800ee24:	4606      	mov	r6, r0
 800ee26:	b360      	cbz	r0, 800ee82 <__ssputs_r+0xa2>
 800ee28:	6921      	ldr	r1, [r4, #16]
 800ee2a:	464a      	mov	r2, r9
 800ee2c:	f7ff feab 	bl	800eb86 <memcpy>
 800ee30:	89a3      	ldrh	r3, [r4, #12]
 800ee32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ee36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee3a:	81a3      	strh	r3, [r4, #12]
 800ee3c:	6126      	str	r6, [r4, #16]
 800ee3e:	6165      	str	r5, [r4, #20]
 800ee40:	444e      	add	r6, r9
 800ee42:	eba5 0509 	sub.w	r5, r5, r9
 800ee46:	6026      	str	r6, [r4, #0]
 800ee48:	60a5      	str	r5, [r4, #8]
 800ee4a:	463e      	mov	r6, r7
 800ee4c:	42be      	cmp	r6, r7
 800ee4e:	d900      	bls.n	800ee52 <__ssputs_r+0x72>
 800ee50:	463e      	mov	r6, r7
 800ee52:	6820      	ldr	r0, [r4, #0]
 800ee54:	4632      	mov	r2, r6
 800ee56:	4641      	mov	r1, r8
 800ee58:	f000 fb64 	bl	800f524 <memmove>
 800ee5c:	68a3      	ldr	r3, [r4, #8]
 800ee5e:	1b9b      	subs	r3, r3, r6
 800ee60:	60a3      	str	r3, [r4, #8]
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	4433      	add	r3, r6
 800ee66:	6023      	str	r3, [r4, #0]
 800ee68:	2000      	movs	r0, #0
 800ee6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee6e:	462a      	mov	r2, r5
 800ee70:	f000 fb89 	bl	800f586 <_realloc_r>
 800ee74:	4606      	mov	r6, r0
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d1e0      	bne.n	800ee3c <__ssputs_r+0x5c>
 800ee7a:	6921      	ldr	r1, [r4, #16]
 800ee7c:	4650      	mov	r0, sl
 800ee7e:	f7ff feaf 	bl	800ebe0 <_free_r>
 800ee82:	230c      	movs	r3, #12
 800ee84:	f8ca 3000 	str.w	r3, [sl]
 800ee88:	89a3      	ldrh	r3, [r4, #12]
 800ee8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee8e:	81a3      	strh	r3, [r4, #12]
 800ee90:	f04f 30ff 	mov.w	r0, #4294967295
 800ee94:	e7e9      	b.n	800ee6a <__ssputs_r+0x8a>
	...

0800ee98 <_svfiprintf_r>:
 800ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	4698      	mov	r8, r3
 800ee9e:	898b      	ldrh	r3, [r1, #12]
 800eea0:	061b      	lsls	r3, r3, #24
 800eea2:	b09d      	sub	sp, #116	@ 0x74
 800eea4:	4607      	mov	r7, r0
 800eea6:	460d      	mov	r5, r1
 800eea8:	4614      	mov	r4, r2
 800eeaa:	d510      	bpl.n	800eece <_svfiprintf_r+0x36>
 800eeac:	690b      	ldr	r3, [r1, #16]
 800eeae:	b973      	cbnz	r3, 800eece <_svfiprintf_r+0x36>
 800eeb0:	2140      	movs	r1, #64	@ 0x40
 800eeb2:	f7ff ff09 	bl	800ecc8 <_malloc_r>
 800eeb6:	6028      	str	r0, [r5, #0]
 800eeb8:	6128      	str	r0, [r5, #16]
 800eeba:	b930      	cbnz	r0, 800eeca <_svfiprintf_r+0x32>
 800eebc:	230c      	movs	r3, #12
 800eebe:	603b      	str	r3, [r7, #0]
 800eec0:	f04f 30ff 	mov.w	r0, #4294967295
 800eec4:	b01d      	add	sp, #116	@ 0x74
 800eec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeca:	2340      	movs	r3, #64	@ 0x40
 800eecc:	616b      	str	r3, [r5, #20]
 800eece:	2300      	movs	r3, #0
 800eed0:	9309      	str	r3, [sp, #36]	@ 0x24
 800eed2:	2320      	movs	r3, #32
 800eed4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eed8:	f8cd 800c 	str.w	r8, [sp, #12]
 800eedc:	2330      	movs	r3, #48	@ 0x30
 800eede:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f07c <_svfiprintf_r+0x1e4>
 800eee2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eee6:	f04f 0901 	mov.w	r9, #1
 800eeea:	4623      	mov	r3, r4
 800eeec:	469a      	mov	sl, r3
 800eeee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eef2:	b10a      	cbz	r2, 800eef8 <_svfiprintf_r+0x60>
 800eef4:	2a25      	cmp	r2, #37	@ 0x25
 800eef6:	d1f9      	bne.n	800eeec <_svfiprintf_r+0x54>
 800eef8:	ebba 0b04 	subs.w	fp, sl, r4
 800eefc:	d00b      	beq.n	800ef16 <_svfiprintf_r+0x7e>
 800eefe:	465b      	mov	r3, fp
 800ef00:	4622      	mov	r2, r4
 800ef02:	4629      	mov	r1, r5
 800ef04:	4638      	mov	r0, r7
 800ef06:	f7ff ff6b 	bl	800ede0 <__ssputs_r>
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	f000 80a7 	beq.w	800f05e <_svfiprintf_r+0x1c6>
 800ef10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef12:	445a      	add	r2, fp
 800ef14:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef16:	f89a 3000 	ldrb.w	r3, [sl]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f000 809f 	beq.w	800f05e <_svfiprintf_r+0x1c6>
 800ef20:	2300      	movs	r3, #0
 800ef22:	f04f 32ff 	mov.w	r2, #4294967295
 800ef26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef2a:	f10a 0a01 	add.w	sl, sl, #1
 800ef2e:	9304      	str	r3, [sp, #16]
 800ef30:	9307      	str	r3, [sp, #28]
 800ef32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef36:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef38:	4654      	mov	r4, sl
 800ef3a:	2205      	movs	r2, #5
 800ef3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef40:	484e      	ldr	r0, [pc, #312]	@ (800f07c <_svfiprintf_r+0x1e4>)
 800ef42:	f7f1 f945 	bl	80001d0 <memchr>
 800ef46:	9a04      	ldr	r2, [sp, #16]
 800ef48:	b9d8      	cbnz	r0, 800ef82 <_svfiprintf_r+0xea>
 800ef4a:	06d0      	lsls	r0, r2, #27
 800ef4c:	bf44      	itt	mi
 800ef4e:	2320      	movmi	r3, #32
 800ef50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef54:	0711      	lsls	r1, r2, #28
 800ef56:	bf44      	itt	mi
 800ef58:	232b      	movmi	r3, #43	@ 0x2b
 800ef5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef64:	d015      	beq.n	800ef92 <_svfiprintf_r+0xfa>
 800ef66:	9a07      	ldr	r2, [sp, #28]
 800ef68:	4654      	mov	r4, sl
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	f04f 0c0a 	mov.w	ip, #10
 800ef70:	4621      	mov	r1, r4
 800ef72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef76:	3b30      	subs	r3, #48	@ 0x30
 800ef78:	2b09      	cmp	r3, #9
 800ef7a:	d94b      	bls.n	800f014 <_svfiprintf_r+0x17c>
 800ef7c:	b1b0      	cbz	r0, 800efac <_svfiprintf_r+0x114>
 800ef7e:	9207      	str	r2, [sp, #28]
 800ef80:	e014      	b.n	800efac <_svfiprintf_r+0x114>
 800ef82:	eba0 0308 	sub.w	r3, r0, r8
 800ef86:	fa09 f303 	lsl.w	r3, r9, r3
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	9304      	str	r3, [sp, #16]
 800ef8e:	46a2      	mov	sl, r4
 800ef90:	e7d2      	b.n	800ef38 <_svfiprintf_r+0xa0>
 800ef92:	9b03      	ldr	r3, [sp, #12]
 800ef94:	1d19      	adds	r1, r3, #4
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	9103      	str	r1, [sp, #12]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	bfbb      	ittet	lt
 800ef9e:	425b      	neglt	r3, r3
 800efa0:	f042 0202 	orrlt.w	r2, r2, #2
 800efa4:	9307      	strge	r3, [sp, #28]
 800efa6:	9307      	strlt	r3, [sp, #28]
 800efa8:	bfb8      	it	lt
 800efaa:	9204      	strlt	r2, [sp, #16]
 800efac:	7823      	ldrb	r3, [r4, #0]
 800efae:	2b2e      	cmp	r3, #46	@ 0x2e
 800efb0:	d10a      	bne.n	800efc8 <_svfiprintf_r+0x130>
 800efb2:	7863      	ldrb	r3, [r4, #1]
 800efb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800efb6:	d132      	bne.n	800f01e <_svfiprintf_r+0x186>
 800efb8:	9b03      	ldr	r3, [sp, #12]
 800efba:	1d1a      	adds	r2, r3, #4
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	9203      	str	r2, [sp, #12]
 800efc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800efc4:	3402      	adds	r4, #2
 800efc6:	9305      	str	r3, [sp, #20]
 800efc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f08c <_svfiprintf_r+0x1f4>
 800efcc:	7821      	ldrb	r1, [r4, #0]
 800efce:	2203      	movs	r2, #3
 800efd0:	4650      	mov	r0, sl
 800efd2:	f7f1 f8fd 	bl	80001d0 <memchr>
 800efd6:	b138      	cbz	r0, 800efe8 <_svfiprintf_r+0x150>
 800efd8:	9b04      	ldr	r3, [sp, #16]
 800efda:	eba0 000a 	sub.w	r0, r0, sl
 800efde:	2240      	movs	r2, #64	@ 0x40
 800efe0:	4082      	lsls	r2, r0
 800efe2:	4313      	orrs	r3, r2
 800efe4:	3401      	adds	r4, #1
 800efe6:	9304      	str	r3, [sp, #16]
 800efe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efec:	4824      	ldr	r0, [pc, #144]	@ (800f080 <_svfiprintf_r+0x1e8>)
 800efee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eff2:	2206      	movs	r2, #6
 800eff4:	f7f1 f8ec 	bl	80001d0 <memchr>
 800eff8:	2800      	cmp	r0, #0
 800effa:	d036      	beq.n	800f06a <_svfiprintf_r+0x1d2>
 800effc:	4b21      	ldr	r3, [pc, #132]	@ (800f084 <_svfiprintf_r+0x1ec>)
 800effe:	bb1b      	cbnz	r3, 800f048 <_svfiprintf_r+0x1b0>
 800f000:	9b03      	ldr	r3, [sp, #12]
 800f002:	3307      	adds	r3, #7
 800f004:	f023 0307 	bic.w	r3, r3, #7
 800f008:	3308      	adds	r3, #8
 800f00a:	9303      	str	r3, [sp, #12]
 800f00c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f00e:	4433      	add	r3, r6
 800f010:	9309      	str	r3, [sp, #36]	@ 0x24
 800f012:	e76a      	b.n	800eeea <_svfiprintf_r+0x52>
 800f014:	fb0c 3202 	mla	r2, ip, r2, r3
 800f018:	460c      	mov	r4, r1
 800f01a:	2001      	movs	r0, #1
 800f01c:	e7a8      	b.n	800ef70 <_svfiprintf_r+0xd8>
 800f01e:	2300      	movs	r3, #0
 800f020:	3401      	adds	r4, #1
 800f022:	9305      	str	r3, [sp, #20]
 800f024:	4619      	mov	r1, r3
 800f026:	f04f 0c0a 	mov.w	ip, #10
 800f02a:	4620      	mov	r0, r4
 800f02c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f030:	3a30      	subs	r2, #48	@ 0x30
 800f032:	2a09      	cmp	r2, #9
 800f034:	d903      	bls.n	800f03e <_svfiprintf_r+0x1a6>
 800f036:	2b00      	cmp	r3, #0
 800f038:	d0c6      	beq.n	800efc8 <_svfiprintf_r+0x130>
 800f03a:	9105      	str	r1, [sp, #20]
 800f03c:	e7c4      	b.n	800efc8 <_svfiprintf_r+0x130>
 800f03e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f042:	4604      	mov	r4, r0
 800f044:	2301      	movs	r3, #1
 800f046:	e7f0      	b.n	800f02a <_svfiprintf_r+0x192>
 800f048:	ab03      	add	r3, sp, #12
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	462a      	mov	r2, r5
 800f04e:	4b0e      	ldr	r3, [pc, #56]	@ (800f088 <_svfiprintf_r+0x1f0>)
 800f050:	a904      	add	r1, sp, #16
 800f052:	4638      	mov	r0, r7
 800f054:	f3af 8000 	nop.w
 800f058:	1c42      	adds	r2, r0, #1
 800f05a:	4606      	mov	r6, r0
 800f05c:	d1d6      	bne.n	800f00c <_svfiprintf_r+0x174>
 800f05e:	89ab      	ldrh	r3, [r5, #12]
 800f060:	065b      	lsls	r3, r3, #25
 800f062:	f53f af2d 	bmi.w	800eec0 <_svfiprintf_r+0x28>
 800f066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f068:	e72c      	b.n	800eec4 <_svfiprintf_r+0x2c>
 800f06a:	ab03      	add	r3, sp, #12
 800f06c:	9300      	str	r3, [sp, #0]
 800f06e:	462a      	mov	r2, r5
 800f070:	4b05      	ldr	r3, [pc, #20]	@ (800f088 <_svfiprintf_r+0x1f0>)
 800f072:	a904      	add	r1, sp, #16
 800f074:	4638      	mov	r0, r7
 800f076:	f000 f879 	bl	800f16c <_printf_i>
 800f07a:	e7ed      	b.n	800f058 <_svfiprintf_r+0x1c0>
 800f07c:	080525d3 	.word	0x080525d3
 800f080:	080525dd 	.word	0x080525dd
 800f084:	00000000 	.word	0x00000000
 800f088:	0800ede1 	.word	0x0800ede1
 800f08c:	080525d9 	.word	0x080525d9

0800f090 <_printf_common>:
 800f090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f094:	4616      	mov	r6, r2
 800f096:	4698      	mov	r8, r3
 800f098:	688a      	ldr	r2, [r1, #8]
 800f09a:	690b      	ldr	r3, [r1, #16]
 800f09c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	bfb8      	it	lt
 800f0a4:	4613      	movlt	r3, r2
 800f0a6:	6033      	str	r3, [r6, #0]
 800f0a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f0ac:	4607      	mov	r7, r0
 800f0ae:	460c      	mov	r4, r1
 800f0b0:	b10a      	cbz	r2, 800f0b6 <_printf_common+0x26>
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	6033      	str	r3, [r6, #0]
 800f0b6:	6823      	ldr	r3, [r4, #0]
 800f0b8:	0699      	lsls	r1, r3, #26
 800f0ba:	bf42      	ittt	mi
 800f0bc:	6833      	ldrmi	r3, [r6, #0]
 800f0be:	3302      	addmi	r3, #2
 800f0c0:	6033      	strmi	r3, [r6, #0]
 800f0c2:	6825      	ldr	r5, [r4, #0]
 800f0c4:	f015 0506 	ands.w	r5, r5, #6
 800f0c8:	d106      	bne.n	800f0d8 <_printf_common+0x48>
 800f0ca:	f104 0a19 	add.w	sl, r4, #25
 800f0ce:	68e3      	ldr	r3, [r4, #12]
 800f0d0:	6832      	ldr	r2, [r6, #0]
 800f0d2:	1a9b      	subs	r3, r3, r2
 800f0d4:	42ab      	cmp	r3, r5
 800f0d6:	dc26      	bgt.n	800f126 <_printf_common+0x96>
 800f0d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f0dc:	6822      	ldr	r2, [r4, #0]
 800f0de:	3b00      	subs	r3, #0
 800f0e0:	bf18      	it	ne
 800f0e2:	2301      	movne	r3, #1
 800f0e4:	0692      	lsls	r2, r2, #26
 800f0e6:	d42b      	bmi.n	800f140 <_printf_common+0xb0>
 800f0e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f0ec:	4641      	mov	r1, r8
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	47c8      	blx	r9
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	d01e      	beq.n	800f134 <_printf_common+0xa4>
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	6922      	ldr	r2, [r4, #16]
 800f0fa:	f003 0306 	and.w	r3, r3, #6
 800f0fe:	2b04      	cmp	r3, #4
 800f100:	bf02      	ittt	eq
 800f102:	68e5      	ldreq	r5, [r4, #12]
 800f104:	6833      	ldreq	r3, [r6, #0]
 800f106:	1aed      	subeq	r5, r5, r3
 800f108:	68a3      	ldr	r3, [r4, #8]
 800f10a:	bf0c      	ite	eq
 800f10c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f110:	2500      	movne	r5, #0
 800f112:	4293      	cmp	r3, r2
 800f114:	bfc4      	itt	gt
 800f116:	1a9b      	subgt	r3, r3, r2
 800f118:	18ed      	addgt	r5, r5, r3
 800f11a:	2600      	movs	r6, #0
 800f11c:	341a      	adds	r4, #26
 800f11e:	42b5      	cmp	r5, r6
 800f120:	d11a      	bne.n	800f158 <_printf_common+0xc8>
 800f122:	2000      	movs	r0, #0
 800f124:	e008      	b.n	800f138 <_printf_common+0xa8>
 800f126:	2301      	movs	r3, #1
 800f128:	4652      	mov	r2, sl
 800f12a:	4641      	mov	r1, r8
 800f12c:	4638      	mov	r0, r7
 800f12e:	47c8      	blx	r9
 800f130:	3001      	adds	r0, #1
 800f132:	d103      	bne.n	800f13c <_printf_common+0xac>
 800f134:	f04f 30ff 	mov.w	r0, #4294967295
 800f138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f13c:	3501      	adds	r5, #1
 800f13e:	e7c6      	b.n	800f0ce <_printf_common+0x3e>
 800f140:	18e1      	adds	r1, r4, r3
 800f142:	1c5a      	adds	r2, r3, #1
 800f144:	2030      	movs	r0, #48	@ 0x30
 800f146:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f14a:	4422      	add	r2, r4
 800f14c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f150:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f154:	3302      	adds	r3, #2
 800f156:	e7c7      	b.n	800f0e8 <_printf_common+0x58>
 800f158:	2301      	movs	r3, #1
 800f15a:	4622      	mov	r2, r4
 800f15c:	4641      	mov	r1, r8
 800f15e:	4638      	mov	r0, r7
 800f160:	47c8      	blx	r9
 800f162:	3001      	adds	r0, #1
 800f164:	d0e6      	beq.n	800f134 <_printf_common+0xa4>
 800f166:	3601      	adds	r6, #1
 800f168:	e7d9      	b.n	800f11e <_printf_common+0x8e>
	...

0800f16c <_printf_i>:
 800f16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f170:	7e0f      	ldrb	r7, [r1, #24]
 800f172:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f174:	2f78      	cmp	r7, #120	@ 0x78
 800f176:	4691      	mov	r9, r2
 800f178:	4680      	mov	r8, r0
 800f17a:	460c      	mov	r4, r1
 800f17c:	469a      	mov	sl, r3
 800f17e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f182:	d807      	bhi.n	800f194 <_printf_i+0x28>
 800f184:	2f62      	cmp	r7, #98	@ 0x62
 800f186:	d80a      	bhi.n	800f19e <_printf_i+0x32>
 800f188:	2f00      	cmp	r7, #0
 800f18a:	f000 80d1 	beq.w	800f330 <_printf_i+0x1c4>
 800f18e:	2f58      	cmp	r7, #88	@ 0x58
 800f190:	f000 80b8 	beq.w	800f304 <_printf_i+0x198>
 800f194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f198:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f19c:	e03a      	b.n	800f214 <_printf_i+0xa8>
 800f19e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f1a2:	2b15      	cmp	r3, #21
 800f1a4:	d8f6      	bhi.n	800f194 <_printf_i+0x28>
 800f1a6:	a101      	add	r1, pc, #4	@ (adr r1, 800f1ac <_printf_i+0x40>)
 800f1a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f1ac:	0800f205 	.word	0x0800f205
 800f1b0:	0800f219 	.word	0x0800f219
 800f1b4:	0800f195 	.word	0x0800f195
 800f1b8:	0800f195 	.word	0x0800f195
 800f1bc:	0800f195 	.word	0x0800f195
 800f1c0:	0800f195 	.word	0x0800f195
 800f1c4:	0800f219 	.word	0x0800f219
 800f1c8:	0800f195 	.word	0x0800f195
 800f1cc:	0800f195 	.word	0x0800f195
 800f1d0:	0800f195 	.word	0x0800f195
 800f1d4:	0800f195 	.word	0x0800f195
 800f1d8:	0800f317 	.word	0x0800f317
 800f1dc:	0800f243 	.word	0x0800f243
 800f1e0:	0800f2d1 	.word	0x0800f2d1
 800f1e4:	0800f195 	.word	0x0800f195
 800f1e8:	0800f195 	.word	0x0800f195
 800f1ec:	0800f339 	.word	0x0800f339
 800f1f0:	0800f195 	.word	0x0800f195
 800f1f4:	0800f243 	.word	0x0800f243
 800f1f8:	0800f195 	.word	0x0800f195
 800f1fc:	0800f195 	.word	0x0800f195
 800f200:	0800f2d9 	.word	0x0800f2d9
 800f204:	6833      	ldr	r3, [r6, #0]
 800f206:	1d1a      	adds	r2, r3, #4
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	6032      	str	r2, [r6, #0]
 800f20c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f210:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f214:	2301      	movs	r3, #1
 800f216:	e09c      	b.n	800f352 <_printf_i+0x1e6>
 800f218:	6833      	ldr	r3, [r6, #0]
 800f21a:	6820      	ldr	r0, [r4, #0]
 800f21c:	1d19      	adds	r1, r3, #4
 800f21e:	6031      	str	r1, [r6, #0]
 800f220:	0606      	lsls	r6, r0, #24
 800f222:	d501      	bpl.n	800f228 <_printf_i+0xbc>
 800f224:	681d      	ldr	r5, [r3, #0]
 800f226:	e003      	b.n	800f230 <_printf_i+0xc4>
 800f228:	0645      	lsls	r5, r0, #25
 800f22a:	d5fb      	bpl.n	800f224 <_printf_i+0xb8>
 800f22c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f230:	2d00      	cmp	r5, #0
 800f232:	da03      	bge.n	800f23c <_printf_i+0xd0>
 800f234:	232d      	movs	r3, #45	@ 0x2d
 800f236:	426d      	negs	r5, r5
 800f238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f23c:	4858      	ldr	r0, [pc, #352]	@ (800f3a0 <_printf_i+0x234>)
 800f23e:	230a      	movs	r3, #10
 800f240:	e011      	b.n	800f266 <_printf_i+0xfa>
 800f242:	6821      	ldr	r1, [r4, #0]
 800f244:	6833      	ldr	r3, [r6, #0]
 800f246:	0608      	lsls	r0, r1, #24
 800f248:	f853 5b04 	ldr.w	r5, [r3], #4
 800f24c:	d402      	bmi.n	800f254 <_printf_i+0xe8>
 800f24e:	0649      	lsls	r1, r1, #25
 800f250:	bf48      	it	mi
 800f252:	b2ad      	uxthmi	r5, r5
 800f254:	2f6f      	cmp	r7, #111	@ 0x6f
 800f256:	4852      	ldr	r0, [pc, #328]	@ (800f3a0 <_printf_i+0x234>)
 800f258:	6033      	str	r3, [r6, #0]
 800f25a:	bf14      	ite	ne
 800f25c:	230a      	movne	r3, #10
 800f25e:	2308      	moveq	r3, #8
 800f260:	2100      	movs	r1, #0
 800f262:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f266:	6866      	ldr	r6, [r4, #4]
 800f268:	60a6      	str	r6, [r4, #8]
 800f26a:	2e00      	cmp	r6, #0
 800f26c:	db05      	blt.n	800f27a <_printf_i+0x10e>
 800f26e:	6821      	ldr	r1, [r4, #0]
 800f270:	432e      	orrs	r6, r5
 800f272:	f021 0104 	bic.w	r1, r1, #4
 800f276:	6021      	str	r1, [r4, #0]
 800f278:	d04b      	beq.n	800f312 <_printf_i+0x1a6>
 800f27a:	4616      	mov	r6, r2
 800f27c:	fbb5 f1f3 	udiv	r1, r5, r3
 800f280:	fb03 5711 	mls	r7, r3, r1, r5
 800f284:	5dc7      	ldrb	r7, [r0, r7]
 800f286:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f28a:	462f      	mov	r7, r5
 800f28c:	42bb      	cmp	r3, r7
 800f28e:	460d      	mov	r5, r1
 800f290:	d9f4      	bls.n	800f27c <_printf_i+0x110>
 800f292:	2b08      	cmp	r3, #8
 800f294:	d10b      	bne.n	800f2ae <_printf_i+0x142>
 800f296:	6823      	ldr	r3, [r4, #0]
 800f298:	07df      	lsls	r7, r3, #31
 800f29a:	d508      	bpl.n	800f2ae <_printf_i+0x142>
 800f29c:	6923      	ldr	r3, [r4, #16]
 800f29e:	6861      	ldr	r1, [r4, #4]
 800f2a0:	4299      	cmp	r1, r3
 800f2a2:	bfde      	ittt	le
 800f2a4:	2330      	movle	r3, #48	@ 0x30
 800f2a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f2aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f2ae:	1b92      	subs	r2, r2, r6
 800f2b0:	6122      	str	r2, [r4, #16]
 800f2b2:	f8cd a000 	str.w	sl, [sp]
 800f2b6:	464b      	mov	r3, r9
 800f2b8:	aa03      	add	r2, sp, #12
 800f2ba:	4621      	mov	r1, r4
 800f2bc:	4640      	mov	r0, r8
 800f2be:	f7ff fee7 	bl	800f090 <_printf_common>
 800f2c2:	3001      	adds	r0, #1
 800f2c4:	d14a      	bne.n	800f35c <_printf_i+0x1f0>
 800f2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ca:	b004      	add	sp, #16
 800f2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2d0:	6823      	ldr	r3, [r4, #0]
 800f2d2:	f043 0320 	orr.w	r3, r3, #32
 800f2d6:	6023      	str	r3, [r4, #0]
 800f2d8:	4832      	ldr	r0, [pc, #200]	@ (800f3a4 <_printf_i+0x238>)
 800f2da:	2778      	movs	r7, #120	@ 0x78
 800f2dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f2e0:	6823      	ldr	r3, [r4, #0]
 800f2e2:	6831      	ldr	r1, [r6, #0]
 800f2e4:	061f      	lsls	r7, r3, #24
 800f2e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800f2ea:	d402      	bmi.n	800f2f2 <_printf_i+0x186>
 800f2ec:	065f      	lsls	r7, r3, #25
 800f2ee:	bf48      	it	mi
 800f2f0:	b2ad      	uxthmi	r5, r5
 800f2f2:	6031      	str	r1, [r6, #0]
 800f2f4:	07d9      	lsls	r1, r3, #31
 800f2f6:	bf44      	itt	mi
 800f2f8:	f043 0320 	orrmi.w	r3, r3, #32
 800f2fc:	6023      	strmi	r3, [r4, #0]
 800f2fe:	b11d      	cbz	r5, 800f308 <_printf_i+0x19c>
 800f300:	2310      	movs	r3, #16
 800f302:	e7ad      	b.n	800f260 <_printf_i+0xf4>
 800f304:	4826      	ldr	r0, [pc, #152]	@ (800f3a0 <_printf_i+0x234>)
 800f306:	e7e9      	b.n	800f2dc <_printf_i+0x170>
 800f308:	6823      	ldr	r3, [r4, #0]
 800f30a:	f023 0320 	bic.w	r3, r3, #32
 800f30e:	6023      	str	r3, [r4, #0]
 800f310:	e7f6      	b.n	800f300 <_printf_i+0x194>
 800f312:	4616      	mov	r6, r2
 800f314:	e7bd      	b.n	800f292 <_printf_i+0x126>
 800f316:	6833      	ldr	r3, [r6, #0]
 800f318:	6825      	ldr	r5, [r4, #0]
 800f31a:	6961      	ldr	r1, [r4, #20]
 800f31c:	1d18      	adds	r0, r3, #4
 800f31e:	6030      	str	r0, [r6, #0]
 800f320:	062e      	lsls	r6, r5, #24
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	d501      	bpl.n	800f32a <_printf_i+0x1be>
 800f326:	6019      	str	r1, [r3, #0]
 800f328:	e002      	b.n	800f330 <_printf_i+0x1c4>
 800f32a:	0668      	lsls	r0, r5, #25
 800f32c:	d5fb      	bpl.n	800f326 <_printf_i+0x1ba>
 800f32e:	8019      	strh	r1, [r3, #0]
 800f330:	2300      	movs	r3, #0
 800f332:	6123      	str	r3, [r4, #16]
 800f334:	4616      	mov	r6, r2
 800f336:	e7bc      	b.n	800f2b2 <_printf_i+0x146>
 800f338:	6833      	ldr	r3, [r6, #0]
 800f33a:	1d1a      	adds	r2, r3, #4
 800f33c:	6032      	str	r2, [r6, #0]
 800f33e:	681e      	ldr	r6, [r3, #0]
 800f340:	6862      	ldr	r2, [r4, #4]
 800f342:	2100      	movs	r1, #0
 800f344:	4630      	mov	r0, r6
 800f346:	f7f0 ff43 	bl	80001d0 <memchr>
 800f34a:	b108      	cbz	r0, 800f350 <_printf_i+0x1e4>
 800f34c:	1b80      	subs	r0, r0, r6
 800f34e:	6060      	str	r0, [r4, #4]
 800f350:	6863      	ldr	r3, [r4, #4]
 800f352:	6123      	str	r3, [r4, #16]
 800f354:	2300      	movs	r3, #0
 800f356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f35a:	e7aa      	b.n	800f2b2 <_printf_i+0x146>
 800f35c:	6923      	ldr	r3, [r4, #16]
 800f35e:	4632      	mov	r2, r6
 800f360:	4649      	mov	r1, r9
 800f362:	4640      	mov	r0, r8
 800f364:	47d0      	blx	sl
 800f366:	3001      	adds	r0, #1
 800f368:	d0ad      	beq.n	800f2c6 <_printf_i+0x15a>
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	079b      	lsls	r3, r3, #30
 800f36e:	d413      	bmi.n	800f398 <_printf_i+0x22c>
 800f370:	68e0      	ldr	r0, [r4, #12]
 800f372:	9b03      	ldr	r3, [sp, #12]
 800f374:	4298      	cmp	r0, r3
 800f376:	bfb8      	it	lt
 800f378:	4618      	movlt	r0, r3
 800f37a:	e7a6      	b.n	800f2ca <_printf_i+0x15e>
 800f37c:	2301      	movs	r3, #1
 800f37e:	4632      	mov	r2, r6
 800f380:	4649      	mov	r1, r9
 800f382:	4640      	mov	r0, r8
 800f384:	47d0      	blx	sl
 800f386:	3001      	adds	r0, #1
 800f388:	d09d      	beq.n	800f2c6 <_printf_i+0x15a>
 800f38a:	3501      	adds	r5, #1
 800f38c:	68e3      	ldr	r3, [r4, #12]
 800f38e:	9903      	ldr	r1, [sp, #12]
 800f390:	1a5b      	subs	r3, r3, r1
 800f392:	42ab      	cmp	r3, r5
 800f394:	dcf2      	bgt.n	800f37c <_printf_i+0x210>
 800f396:	e7eb      	b.n	800f370 <_printf_i+0x204>
 800f398:	2500      	movs	r5, #0
 800f39a:	f104 0619 	add.w	r6, r4, #25
 800f39e:	e7f5      	b.n	800f38c <_printf_i+0x220>
 800f3a0:	080525e4 	.word	0x080525e4
 800f3a4:	080525f5 	.word	0x080525f5

0800f3a8 <__sflush_r>:
 800f3a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b0:	0716      	lsls	r6, r2, #28
 800f3b2:	4605      	mov	r5, r0
 800f3b4:	460c      	mov	r4, r1
 800f3b6:	d454      	bmi.n	800f462 <__sflush_r+0xba>
 800f3b8:	684b      	ldr	r3, [r1, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	dc02      	bgt.n	800f3c4 <__sflush_r+0x1c>
 800f3be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	dd48      	ble.n	800f456 <__sflush_r+0xae>
 800f3c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3c6:	2e00      	cmp	r6, #0
 800f3c8:	d045      	beq.n	800f456 <__sflush_r+0xae>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f3d0:	682f      	ldr	r7, [r5, #0]
 800f3d2:	6a21      	ldr	r1, [r4, #32]
 800f3d4:	602b      	str	r3, [r5, #0]
 800f3d6:	d030      	beq.n	800f43a <__sflush_r+0x92>
 800f3d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f3da:	89a3      	ldrh	r3, [r4, #12]
 800f3dc:	0759      	lsls	r1, r3, #29
 800f3de:	d505      	bpl.n	800f3ec <__sflush_r+0x44>
 800f3e0:	6863      	ldr	r3, [r4, #4]
 800f3e2:	1ad2      	subs	r2, r2, r3
 800f3e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f3e6:	b10b      	cbz	r3, 800f3ec <__sflush_r+0x44>
 800f3e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f3ea:	1ad2      	subs	r2, r2, r3
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3f0:	6a21      	ldr	r1, [r4, #32]
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	47b0      	blx	r6
 800f3f6:	1c43      	adds	r3, r0, #1
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	d106      	bne.n	800f40a <__sflush_r+0x62>
 800f3fc:	6829      	ldr	r1, [r5, #0]
 800f3fe:	291d      	cmp	r1, #29
 800f400:	d82b      	bhi.n	800f45a <__sflush_r+0xb2>
 800f402:	4a2a      	ldr	r2, [pc, #168]	@ (800f4ac <__sflush_r+0x104>)
 800f404:	40ca      	lsrs	r2, r1
 800f406:	07d6      	lsls	r6, r2, #31
 800f408:	d527      	bpl.n	800f45a <__sflush_r+0xb2>
 800f40a:	2200      	movs	r2, #0
 800f40c:	6062      	str	r2, [r4, #4]
 800f40e:	04d9      	lsls	r1, r3, #19
 800f410:	6922      	ldr	r2, [r4, #16]
 800f412:	6022      	str	r2, [r4, #0]
 800f414:	d504      	bpl.n	800f420 <__sflush_r+0x78>
 800f416:	1c42      	adds	r2, r0, #1
 800f418:	d101      	bne.n	800f41e <__sflush_r+0x76>
 800f41a:	682b      	ldr	r3, [r5, #0]
 800f41c:	b903      	cbnz	r3, 800f420 <__sflush_r+0x78>
 800f41e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f422:	602f      	str	r7, [r5, #0]
 800f424:	b1b9      	cbz	r1, 800f456 <__sflush_r+0xae>
 800f426:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f42a:	4299      	cmp	r1, r3
 800f42c:	d002      	beq.n	800f434 <__sflush_r+0x8c>
 800f42e:	4628      	mov	r0, r5
 800f430:	f7ff fbd6 	bl	800ebe0 <_free_r>
 800f434:	2300      	movs	r3, #0
 800f436:	6363      	str	r3, [r4, #52]	@ 0x34
 800f438:	e00d      	b.n	800f456 <__sflush_r+0xae>
 800f43a:	2301      	movs	r3, #1
 800f43c:	4628      	mov	r0, r5
 800f43e:	47b0      	blx	r6
 800f440:	4602      	mov	r2, r0
 800f442:	1c50      	adds	r0, r2, #1
 800f444:	d1c9      	bne.n	800f3da <__sflush_r+0x32>
 800f446:	682b      	ldr	r3, [r5, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d0c6      	beq.n	800f3da <__sflush_r+0x32>
 800f44c:	2b1d      	cmp	r3, #29
 800f44e:	d001      	beq.n	800f454 <__sflush_r+0xac>
 800f450:	2b16      	cmp	r3, #22
 800f452:	d11e      	bne.n	800f492 <__sflush_r+0xea>
 800f454:	602f      	str	r7, [r5, #0]
 800f456:	2000      	movs	r0, #0
 800f458:	e022      	b.n	800f4a0 <__sflush_r+0xf8>
 800f45a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f45e:	b21b      	sxth	r3, r3
 800f460:	e01b      	b.n	800f49a <__sflush_r+0xf2>
 800f462:	690f      	ldr	r7, [r1, #16]
 800f464:	2f00      	cmp	r7, #0
 800f466:	d0f6      	beq.n	800f456 <__sflush_r+0xae>
 800f468:	0793      	lsls	r3, r2, #30
 800f46a:	680e      	ldr	r6, [r1, #0]
 800f46c:	bf08      	it	eq
 800f46e:	694b      	ldreq	r3, [r1, #20]
 800f470:	600f      	str	r7, [r1, #0]
 800f472:	bf18      	it	ne
 800f474:	2300      	movne	r3, #0
 800f476:	eba6 0807 	sub.w	r8, r6, r7
 800f47a:	608b      	str	r3, [r1, #8]
 800f47c:	f1b8 0f00 	cmp.w	r8, #0
 800f480:	dde9      	ble.n	800f456 <__sflush_r+0xae>
 800f482:	6a21      	ldr	r1, [r4, #32]
 800f484:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f486:	4643      	mov	r3, r8
 800f488:	463a      	mov	r2, r7
 800f48a:	4628      	mov	r0, r5
 800f48c:	47b0      	blx	r6
 800f48e:	2800      	cmp	r0, #0
 800f490:	dc08      	bgt.n	800f4a4 <__sflush_r+0xfc>
 800f492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f49a:	81a3      	strh	r3, [r4, #12]
 800f49c:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a4:	4407      	add	r7, r0
 800f4a6:	eba8 0800 	sub.w	r8, r8, r0
 800f4aa:	e7e7      	b.n	800f47c <__sflush_r+0xd4>
 800f4ac:	20400001 	.word	0x20400001

0800f4b0 <_fflush_r>:
 800f4b0:	b538      	push	{r3, r4, r5, lr}
 800f4b2:	690b      	ldr	r3, [r1, #16]
 800f4b4:	4605      	mov	r5, r0
 800f4b6:	460c      	mov	r4, r1
 800f4b8:	b913      	cbnz	r3, 800f4c0 <_fflush_r+0x10>
 800f4ba:	2500      	movs	r5, #0
 800f4bc:	4628      	mov	r0, r5
 800f4be:	bd38      	pop	{r3, r4, r5, pc}
 800f4c0:	b118      	cbz	r0, 800f4ca <_fflush_r+0x1a>
 800f4c2:	6a03      	ldr	r3, [r0, #32]
 800f4c4:	b90b      	cbnz	r3, 800f4ca <_fflush_r+0x1a>
 800f4c6:	f7ff fa47 	bl	800e958 <__sinit>
 800f4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d0f3      	beq.n	800f4ba <_fflush_r+0xa>
 800f4d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f4d4:	07d0      	lsls	r0, r2, #31
 800f4d6:	d404      	bmi.n	800f4e2 <_fflush_r+0x32>
 800f4d8:	0599      	lsls	r1, r3, #22
 800f4da:	d402      	bmi.n	800f4e2 <_fflush_r+0x32>
 800f4dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4de:	f7ff fb50 	bl	800eb82 <__retarget_lock_acquire_recursive>
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	f7ff ff5f 	bl	800f3a8 <__sflush_r>
 800f4ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4ec:	07da      	lsls	r2, r3, #31
 800f4ee:	4605      	mov	r5, r0
 800f4f0:	d4e4      	bmi.n	800f4bc <_fflush_r+0xc>
 800f4f2:	89a3      	ldrh	r3, [r4, #12]
 800f4f4:	059b      	lsls	r3, r3, #22
 800f4f6:	d4e1      	bmi.n	800f4bc <_fflush_r+0xc>
 800f4f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4fa:	f7ff fb43 	bl	800eb84 <__retarget_lock_release_recursive>
 800f4fe:	e7dd      	b.n	800f4bc <_fflush_r+0xc>

0800f500 <fiprintf>:
 800f500:	b40e      	push	{r1, r2, r3}
 800f502:	b503      	push	{r0, r1, lr}
 800f504:	4601      	mov	r1, r0
 800f506:	ab03      	add	r3, sp, #12
 800f508:	4805      	ldr	r0, [pc, #20]	@ (800f520 <fiprintf+0x20>)
 800f50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f50e:	6800      	ldr	r0, [r0, #0]
 800f510:	9301      	str	r3, [sp, #4]
 800f512:	f000 f88f 	bl	800f634 <_vfiprintf_r>
 800f516:	b002      	add	sp, #8
 800f518:	f85d eb04 	ldr.w	lr, [sp], #4
 800f51c:	b003      	add	sp, #12
 800f51e:	4770      	bx	lr
 800f520:	200000ac 	.word	0x200000ac

0800f524 <memmove>:
 800f524:	4288      	cmp	r0, r1
 800f526:	b510      	push	{r4, lr}
 800f528:	eb01 0402 	add.w	r4, r1, r2
 800f52c:	d902      	bls.n	800f534 <memmove+0x10>
 800f52e:	4284      	cmp	r4, r0
 800f530:	4623      	mov	r3, r4
 800f532:	d807      	bhi.n	800f544 <memmove+0x20>
 800f534:	1e43      	subs	r3, r0, #1
 800f536:	42a1      	cmp	r1, r4
 800f538:	d008      	beq.n	800f54c <memmove+0x28>
 800f53a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f53e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f542:	e7f8      	b.n	800f536 <memmove+0x12>
 800f544:	4402      	add	r2, r0
 800f546:	4601      	mov	r1, r0
 800f548:	428a      	cmp	r2, r1
 800f54a:	d100      	bne.n	800f54e <memmove+0x2a>
 800f54c:	bd10      	pop	{r4, pc}
 800f54e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f556:	e7f7      	b.n	800f548 <memmove+0x24>

0800f558 <_sbrk_r>:
 800f558:	b538      	push	{r3, r4, r5, lr}
 800f55a:	4d06      	ldr	r5, [pc, #24]	@ (800f574 <_sbrk_r+0x1c>)
 800f55c:	2300      	movs	r3, #0
 800f55e:	4604      	mov	r4, r0
 800f560:	4608      	mov	r0, r1
 800f562:	602b      	str	r3, [r5, #0]
 800f564:	f7f3 fea6 	bl	80032b4 <_sbrk>
 800f568:	1c43      	adds	r3, r0, #1
 800f56a:	d102      	bne.n	800f572 <_sbrk_r+0x1a>
 800f56c:	682b      	ldr	r3, [r5, #0]
 800f56e:	b103      	cbz	r3, 800f572 <_sbrk_r+0x1a>
 800f570:	6023      	str	r3, [r4, #0]
 800f572:	bd38      	pop	{r3, r4, r5, pc}
 800f574:	2000442c 	.word	0x2000442c

0800f578 <abort>:
 800f578:	b508      	push	{r3, lr}
 800f57a:	2006      	movs	r0, #6
 800f57c:	f000 fa2e 	bl	800f9dc <raise>
 800f580:	2001      	movs	r0, #1
 800f582:	f7f3 fe1e 	bl	80031c2 <_exit>

0800f586 <_realloc_r>:
 800f586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f58a:	4607      	mov	r7, r0
 800f58c:	4614      	mov	r4, r2
 800f58e:	460d      	mov	r5, r1
 800f590:	b921      	cbnz	r1, 800f59c <_realloc_r+0x16>
 800f592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f596:	4611      	mov	r1, r2
 800f598:	f7ff bb96 	b.w	800ecc8 <_malloc_r>
 800f59c:	b92a      	cbnz	r2, 800f5aa <_realloc_r+0x24>
 800f59e:	f7ff fb1f 	bl	800ebe0 <_free_r>
 800f5a2:	4625      	mov	r5, r4
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5aa:	f000 fa33 	bl	800fa14 <_malloc_usable_size_r>
 800f5ae:	4284      	cmp	r4, r0
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	d802      	bhi.n	800f5ba <_realloc_r+0x34>
 800f5b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5b8:	d8f4      	bhi.n	800f5a4 <_realloc_r+0x1e>
 800f5ba:	4621      	mov	r1, r4
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f7ff fb83 	bl	800ecc8 <_malloc_r>
 800f5c2:	4680      	mov	r8, r0
 800f5c4:	b908      	cbnz	r0, 800f5ca <_realloc_r+0x44>
 800f5c6:	4645      	mov	r5, r8
 800f5c8:	e7ec      	b.n	800f5a4 <_realloc_r+0x1e>
 800f5ca:	42b4      	cmp	r4, r6
 800f5cc:	4622      	mov	r2, r4
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	bf28      	it	cs
 800f5d2:	4632      	movcs	r2, r6
 800f5d4:	f7ff fad7 	bl	800eb86 <memcpy>
 800f5d8:	4629      	mov	r1, r5
 800f5da:	4638      	mov	r0, r7
 800f5dc:	f7ff fb00 	bl	800ebe0 <_free_r>
 800f5e0:	e7f1      	b.n	800f5c6 <_realloc_r+0x40>

0800f5e2 <__sfputc_r>:
 800f5e2:	6893      	ldr	r3, [r2, #8]
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	b410      	push	{r4}
 800f5ea:	6093      	str	r3, [r2, #8]
 800f5ec:	da08      	bge.n	800f600 <__sfputc_r+0x1e>
 800f5ee:	6994      	ldr	r4, [r2, #24]
 800f5f0:	42a3      	cmp	r3, r4
 800f5f2:	db01      	blt.n	800f5f8 <__sfputc_r+0x16>
 800f5f4:	290a      	cmp	r1, #10
 800f5f6:	d103      	bne.n	800f600 <__sfputc_r+0x1e>
 800f5f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5fc:	f000 b932 	b.w	800f864 <__swbuf_r>
 800f600:	6813      	ldr	r3, [r2, #0]
 800f602:	1c58      	adds	r0, r3, #1
 800f604:	6010      	str	r0, [r2, #0]
 800f606:	7019      	strb	r1, [r3, #0]
 800f608:	4608      	mov	r0, r1
 800f60a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <__sfputs_r>:
 800f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f612:	4606      	mov	r6, r0
 800f614:	460f      	mov	r7, r1
 800f616:	4614      	mov	r4, r2
 800f618:	18d5      	adds	r5, r2, r3
 800f61a:	42ac      	cmp	r4, r5
 800f61c:	d101      	bne.n	800f622 <__sfputs_r+0x12>
 800f61e:	2000      	movs	r0, #0
 800f620:	e007      	b.n	800f632 <__sfputs_r+0x22>
 800f622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f626:	463a      	mov	r2, r7
 800f628:	4630      	mov	r0, r6
 800f62a:	f7ff ffda 	bl	800f5e2 <__sfputc_r>
 800f62e:	1c43      	adds	r3, r0, #1
 800f630:	d1f3      	bne.n	800f61a <__sfputs_r+0xa>
 800f632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f634 <_vfiprintf_r>:
 800f634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f638:	460d      	mov	r5, r1
 800f63a:	b09d      	sub	sp, #116	@ 0x74
 800f63c:	4614      	mov	r4, r2
 800f63e:	4698      	mov	r8, r3
 800f640:	4606      	mov	r6, r0
 800f642:	b118      	cbz	r0, 800f64c <_vfiprintf_r+0x18>
 800f644:	6a03      	ldr	r3, [r0, #32]
 800f646:	b90b      	cbnz	r3, 800f64c <_vfiprintf_r+0x18>
 800f648:	f7ff f986 	bl	800e958 <__sinit>
 800f64c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f64e:	07d9      	lsls	r1, r3, #31
 800f650:	d405      	bmi.n	800f65e <_vfiprintf_r+0x2a>
 800f652:	89ab      	ldrh	r3, [r5, #12]
 800f654:	059a      	lsls	r2, r3, #22
 800f656:	d402      	bmi.n	800f65e <_vfiprintf_r+0x2a>
 800f658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f65a:	f7ff fa92 	bl	800eb82 <__retarget_lock_acquire_recursive>
 800f65e:	89ab      	ldrh	r3, [r5, #12]
 800f660:	071b      	lsls	r3, r3, #28
 800f662:	d501      	bpl.n	800f668 <_vfiprintf_r+0x34>
 800f664:	692b      	ldr	r3, [r5, #16]
 800f666:	b99b      	cbnz	r3, 800f690 <_vfiprintf_r+0x5c>
 800f668:	4629      	mov	r1, r5
 800f66a:	4630      	mov	r0, r6
 800f66c:	f000 f938 	bl	800f8e0 <__swsetup_r>
 800f670:	b170      	cbz	r0, 800f690 <_vfiprintf_r+0x5c>
 800f672:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f674:	07dc      	lsls	r4, r3, #31
 800f676:	d504      	bpl.n	800f682 <_vfiprintf_r+0x4e>
 800f678:	f04f 30ff 	mov.w	r0, #4294967295
 800f67c:	b01d      	add	sp, #116	@ 0x74
 800f67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	0598      	lsls	r0, r3, #22
 800f686:	d4f7      	bmi.n	800f678 <_vfiprintf_r+0x44>
 800f688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f68a:	f7ff fa7b 	bl	800eb84 <__retarget_lock_release_recursive>
 800f68e:	e7f3      	b.n	800f678 <_vfiprintf_r+0x44>
 800f690:	2300      	movs	r3, #0
 800f692:	9309      	str	r3, [sp, #36]	@ 0x24
 800f694:	2320      	movs	r3, #32
 800f696:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f69a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f69e:	2330      	movs	r3, #48	@ 0x30
 800f6a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f850 <_vfiprintf_r+0x21c>
 800f6a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6a8:	f04f 0901 	mov.w	r9, #1
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	469a      	mov	sl, r3
 800f6b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6b4:	b10a      	cbz	r2, 800f6ba <_vfiprintf_r+0x86>
 800f6b6:	2a25      	cmp	r2, #37	@ 0x25
 800f6b8:	d1f9      	bne.n	800f6ae <_vfiprintf_r+0x7a>
 800f6ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f6be:	d00b      	beq.n	800f6d8 <_vfiprintf_r+0xa4>
 800f6c0:	465b      	mov	r3, fp
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f7ff ffa2 	bl	800f610 <__sfputs_r>
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	f000 80a7 	beq.w	800f820 <_vfiprintf_r+0x1ec>
 800f6d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6d4:	445a      	add	r2, fp
 800f6d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f000 809f 	beq.w	800f820 <_vfiprintf_r+0x1ec>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ec:	f10a 0a01 	add.w	sl, sl, #1
 800f6f0:	9304      	str	r3, [sp, #16]
 800f6f2:	9307      	str	r3, [sp, #28]
 800f6f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6fa:	4654      	mov	r4, sl
 800f6fc:	2205      	movs	r2, #5
 800f6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f702:	4853      	ldr	r0, [pc, #332]	@ (800f850 <_vfiprintf_r+0x21c>)
 800f704:	f7f0 fd64 	bl	80001d0 <memchr>
 800f708:	9a04      	ldr	r2, [sp, #16]
 800f70a:	b9d8      	cbnz	r0, 800f744 <_vfiprintf_r+0x110>
 800f70c:	06d1      	lsls	r1, r2, #27
 800f70e:	bf44      	itt	mi
 800f710:	2320      	movmi	r3, #32
 800f712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f716:	0713      	lsls	r3, r2, #28
 800f718:	bf44      	itt	mi
 800f71a:	232b      	movmi	r3, #43	@ 0x2b
 800f71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f720:	f89a 3000 	ldrb.w	r3, [sl]
 800f724:	2b2a      	cmp	r3, #42	@ 0x2a
 800f726:	d015      	beq.n	800f754 <_vfiprintf_r+0x120>
 800f728:	9a07      	ldr	r2, [sp, #28]
 800f72a:	4654      	mov	r4, sl
 800f72c:	2000      	movs	r0, #0
 800f72e:	f04f 0c0a 	mov.w	ip, #10
 800f732:	4621      	mov	r1, r4
 800f734:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f738:	3b30      	subs	r3, #48	@ 0x30
 800f73a:	2b09      	cmp	r3, #9
 800f73c:	d94b      	bls.n	800f7d6 <_vfiprintf_r+0x1a2>
 800f73e:	b1b0      	cbz	r0, 800f76e <_vfiprintf_r+0x13a>
 800f740:	9207      	str	r2, [sp, #28]
 800f742:	e014      	b.n	800f76e <_vfiprintf_r+0x13a>
 800f744:	eba0 0308 	sub.w	r3, r0, r8
 800f748:	fa09 f303 	lsl.w	r3, r9, r3
 800f74c:	4313      	orrs	r3, r2
 800f74e:	9304      	str	r3, [sp, #16]
 800f750:	46a2      	mov	sl, r4
 800f752:	e7d2      	b.n	800f6fa <_vfiprintf_r+0xc6>
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	1d19      	adds	r1, r3, #4
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	9103      	str	r1, [sp, #12]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	bfbb      	ittet	lt
 800f760:	425b      	neglt	r3, r3
 800f762:	f042 0202 	orrlt.w	r2, r2, #2
 800f766:	9307      	strge	r3, [sp, #28]
 800f768:	9307      	strlt	r3, [sp, #28]
 800f76a:	bfb8      	it	lt
 800f76c:	9204      	strlt	r2, [sp, #16]
 800f76e:	7823      	ldrb	r3, [r4, #0]
 800f770:	2b2e      	cmp	r3, #46	@ 0x2e
 800f772:	d10a      	bne.n	800f78a <_vfiprintf_r+0x156>
 800f774:	7863      	ldrb	r3, [r4, #1]
 800f776:	2b2a      	cmp	r3, #42	@ 0x2a
 800f778:	d132      	bne.n	800f7e0 <_vfiprintf_r+0x1ac>
 800f77a:	9b03      	ldr	r3, [sp, #12]
 800f77c:	1d1a      	adds	r2, r3, #4
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	9203      	str	r2, [sp, #12]
 800f782:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f786:	3402      	adds	r4, #2
 800f788:	9305      	str	r3, [sp, #20]
 800f78a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f860 <_vfiprintf_r+0x22c>
 800f78e:	7821      	ldrb	r1, [r4, #0]
 800f790:	2203      	movs	r2, #3
 800f792:	4650      	mov	r0, sl
 800f794:	f7f0 fd1c 	bl	80001d0 <memchr>
 800f798:	b138      	cbz	r0, 800f7aa <_vfiprintf_r+0x176>
 800f79a:	9b04      	ldr	r3, [sp, #16]
 800f79c:	eba0 000a 	sub.w	r0, r0, sl
 800f7a0:	2240      	movs	r2, #64	@ 0x40
 800f7a2:	4082      	lsls	r2, r0
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	3401      	adds	r4, #1
 800f7a8:	9304      	str	r3, [sp, #16]
 800f7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7ae:	4829      	ldr	r0, [pc, #164]	@ (800f854 <_vfiprintf_r+0x220>)
 800f7b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7b4:	2206      	movs	r2, #6
 800f7b6:	f7f0 fd0b 	bl	80001d0 <memchr>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d03f      	beq.n	800f83e <_vfiprintf_r+0x20a>
 800f7be:	4b26      	ldr	r3, [pc, #152]	@ (800f858 <_vfiprintf_r+0x224>)
 800f7c0:	bb1b      	cbnz	r3, 800f80a <_vfiprintf_r+0x1d6>
 800f7c2:	9b03      	ldr	r3, [sp, #12]
 800f7c4:	3307      	adds	r3, #7
 800f7c6:	f023 0307 	bic.w	r3, r3, #7
 800f7ca:	3308      	adds	r3, #8
 800f7cc:	9303      	str	r3, [sp, #12]
 800f7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7d0:	443b      	add	r3, r7
 800f7d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7d4:	e76a      	b.n	800f6ac <_vfiprintf_r+0x78>
 800f7d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7da:	460c      	mov	r4, r1
 800f7dc:	2001      	movs	r0, #1
 800f7de:	e7a8      	b.n	800f732 <_vfiprintf_r+0xfe>
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	3401      	adds	r4, #1
 800f7e4:	9305      	str	r3, [sp, #20]
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	f04f 0c0a 	mov.w	ip, #10
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7f2:	3a30      	subs	r2, #48	@ 0x30
 800f7f4:	2a09      	cmp	r2, #9
 800f7f6:	d903      	bls.n	800f800 <_vfiprintf_r+0x1cc>
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d0c6      	beq.n	800f78a <_vfiprintf_r+0x156>
 800f7fc:	9105      	str	r1, [sp, #20]
 800f7fe:	e7c4      	b.n	800f78a <_vfiprintf_r+0x156>
 800f800:	fb0c 2101 	mla	r1, ip, r1, r2
 800f804:	4604      	mov	r4, r0
 800f806:	2301      	movs	r3, #1
 800f808:	e7f0      	b.n	800f7ec <_vfiprintf_r+0x1b8>
 800f80a:	ab03      	add	r3, sp, #12
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	462a      	mov	r2, r5
 800f810:	4b12      	ldr	r3, [pc, #72]	@ (800f85c <_vfiprintf_r+0x228>)
 800f812:	a904      	add	r1, sp, #16
 800f814:	4630      	mov	r0, r6
 800f816:	f3af 8000 	nop.w
 800f81a:	4607      	mov	r7, r0
 800f81c:	1c78      	adds	r0, r7, #1
 800f81e:	d1d6      	bne.n	800f7ce <_vfiprintf_r+0x19a>
 800f820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f822:	07d9      	lsls	r1, r3, #31
 800f824:	d405      	bmi.n	800f832 <_vfiprintf_r+0x1fe>
 800f826:	89ab      	ldrh	r3, [r5, #12]
 800f828:	059a      	lsls	r2, r3, #22
 800f82a:	d402      	bmi.n	800f832 <_vfiprintf_r+0x1fe>
 800f82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f82e:	f7ff f9a9 	bl	800eb84 <__retarget_lock_release_recursive>
 800f832:	89ab      	ldrh	r3, [r5, #12]
 800f834:	065b      	lsls	r3, r3, #25
 800f836:	f53f af1f 	bmi.w	800f678 <_vfiprintf_r+0x44>
 800f83a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f83c:	e71e      	b.n	800f67c <_vfiprintf_r+0x48>
 800f83e:	ab03      	add	r3, sp, #12
 800f840:	9300      	str	r3, [sp, #0]
 800f842:	462a      	mov	r2, r5
 800f844:	4b05      	ldr	r3, [pc, #20]	@ (800f85c <_vfiprintf_r+0x228>)
 800f846:	a904      	add	r1, sp, #16
 800f848:	4630      	mov	r0, r6
 800f84a:	f7ff fc8f 	bl	800f16c <_printf_i>
 800f84e:	e7e4      	b.n	800f81a <_vfiprintf_r+0x1e6>
 800f850:	080525d3 	.word	0x080525d3
 800f854:	080525dd 	.word	0x080525dd
 800f858:	00000000 	.word	0x00000000
 800f85c:	0800f611 	.word	0x0800f611
 800f860:	080525d9 	.word	0x080525d9

0800f864 <__swbuf_r>:
 800f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f866:	460e      	mov	r6, r1
 800f868:	4614      	mov	r4, r2
 800f86a:	4605      	mov	r5, r0
 800f86c:	b118      	cbz	r0, 800f876 <__swbuf_r+0x12>
 800f86e:	6a03      	ldr	r3, [r0, #32]
 800f870:	b90b      	cbnz	r3, 800f876 <__swbuf_r+0x12>
 800f872:	f7ff f871 	bl	800e958 <__sinit>
 800f876:	69a3      	ldr	r3, [r4, #24]
 800f878:	60a3      	str	r3, [r4, #8]
 800f87a:	89a3      	ldrh	r3, [r4, #12]
 800f87c:	071a      	lsls	r2, r3, #28
 800f87e:	d501      	bpl.n	800f884 <__swbuf_r+0x20>
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	b943      	cbnz	r3, 800f896 <__swbuf_r+0x32>
 800f884:	4621      	mov	r1, r4
 800f886:	4628      	mov	r0, r5
 800f888:	f000 f82a 	bl	800f8e0 <__swsetup_r>
 800f88c:	b118      	cbz	r0, 800f896 <__swbuf_r+0x32>
 800f88e:	f04f 37ff 	mov.w	r7, #4294967295
 800f892:	4638      	mov	r0, r7
 800f894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f896:	6823      	ldr	r3, [r4, #0]
 800f898:	6922      	ldr	r2, [r4, #16]
 800f89a:	1a98      	subs	r0, r3, r2
 800f89c:	6963      	ldr	r3, [r4, #20]
 800f89e:	b2f6      	uxtb	r6, r6
 800f8a0:	4283      	cmp	r3, r0
 800f8a2:	4637      	mov	r7, r6
 800f8a4:	dc05      	bgt.n	800f8b2 <__swbuf_r+0x4e>
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	f7ff fe01 	bl	800f4b0 <_fflush_r>
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	d1ed      	bne.n	800f88e <__swbuf_r+0x2a>
 800f8b2:	68a3      	ldr	r3, [r4, #8]
 800f8b4:	3b01      	subs	r3, #1
 800f8b6:	60a3      	str	r3, [r4, #8]
 800f8b8:	6823      	ldr	r3, [r4, #0]
 800f8ba:	1c5a      	adds	r2, r3, #1
 800f8bc:	6022      	str	r2, [r4, #0]
 800f8be:	701e      	strb	r6, [r3, #0]
 800f8c0:	6962      	ldr	r2, [r4, #20]
 800f8c2:	1c43      	adds	r3, r0, #1
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d004      	beq.n	800f8d2 <__swbuf_r+0x6e>
 800f8c8:	89a3      	ldrh	r3, [r4, #12]
 800f8ca:	07db      	lsls	r3, r3, #31
 800f8cc:	d5e1      	bpl.n	800f892 <__swbuf_r+0x2e>
 800f8ce:	2e0a      	cmp	r6, #10
 800f8d0:	d1df      	bne.n	800f892 <__swbuf_r+0x2e>
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	f7ff fdeb 	bl	800f4b0 <_fflush_r>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d0d9      	beq.n	800f892 <__swbuf_r+0x2e>
 800f8de:	e7d6      	b.n	800f88e <__swbuf_r+0x2a>

0800f8e0 <__swsetup_r>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	4b29      	ldr	r3, [pc, #164]	@ (800f988 <__swsetup_r+0xa8>)
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	6818      	ldr	r0, [r3, #0]
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	b118      	cbz	r0, 800f8f4 <__swsetup_r+0x14>
 800f8ec:	6a03      	ldr	r3, [r0, #32]
 800f8ee:	b90b      	cbnz	r3, 800f8f4 <__swsetup_r+0x14>
 800f8f0:	f7ff f832 	bl	800e958 <__sinit>
 800f8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8f8:	0719      	lsls	r1, r3, #28
 800f8fa:	d422      	bmi.n	800f942 <__swsetup_r+0x62>
 800f8fc:	06da      	lsls	r2, r3, #27
 800f8fe:	d407      	bmi.n	800f910 <__swsetup_r+0x30>
 800f900:	2209      	movs	r2, #9
 800f902:	602a      	str	r2, [r5, #0]
 800f904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f908:	81a3      	strh	r3, [r4, #12]
 800f90a:	f04f 30ff 	mov.w	r0, #4294967295
 800f90e:	e033      	b.n	800f978 <__swsetup_r+0x98>
 800f910:	0758      	lsls	r0, r3, #29
 800f912:	d512      	bpl.n	800f93a <__swsetup_r+0x5a>
 800f914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f916:	b141      	cbz	r1, 800f92a <__swsetup_r+0x4a>
 800f918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f91c:	4299      	cmp	r1, r3
 800f91e:	d002      	beq.n	800f926 <__swsetup_r+0x46>
 800f920:	4628      	mov	r0, r5
 800f922:	f7ff f95d 	bl	800ebe0 <_free_r>
 800f926:	2300      	movs	r3, #0
 800f928:	6363      	str	r3, [r4, #52]	@ 0x34
 800f92a:	89a3      	ldrh	r3, [r4, #12]
 800f92c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f930:	81a3      	strh	r3, [r4, #12]
 800f932:	2300      	movs	r3, #0
 800f934:	6063      	str	r3, [r4, #4]
 800f936:	6923      	ldr	r3, [r4, #16]
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	89a3      	ldrh	r3, [r4, #12]
 800f93c:	f043 0308 	orr.w	r3, r3, #8
 800f940:	81a3      	strh	r3, [r4, #12]
 800f942:	6923      	ldr	r3, [r4, #16]
 800f944:	b94b      	cbnz	r3, 800f95a <__swsetup_r+0x7a>
 800f946:	89a3      	ldrh	r3, [r4, #12]
 800f948:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f94c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f950:	d003      	beq.n	800f95a <__swsetup_r+0x7a>
 800f952:	4621      	mov	r1, r4
 800f954:	4628      	mov	r0, r5
 800f956:	f000 f88b 	bl	800fa70 <__smakebuf_r>
 800f95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f95e:	f013 0201 	ands.w	r2, r3, #1
 800f962:	d00a      	beq.n	800f97a <__swsetup_r+0x9a>
 800f964:	2200      	movs	r2, #0
 800f966:	60a2      	str	r2, [r4, #8]
 800f968:	6962      	ldr	r2, [r4, #20]
 800f96a:	4252      	negs	r2, r2
 800f96c:	61a2      	str	r2, [r4, #24]
 800f96e:	6922      	ldr	r2, [r4, #16]
 800f970:	b942      	cbnz	r2, 800f984 <__swsetup_r+0xa4>
 800f972:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f976:	d1c5      	bne.n	800f904 <__swsetup_r+0x24>
 800f978:	bd38      	pop	{r3, r4, r5, pc}
 800f97a:	0799      	lsls	r1, r3, #30
 800f97c:	bf58      	it	pl
 800f97e:	6962      	ldrpl	r2, [r4, #20]
 800f980:	60a2      	str	r2, [r4, #8]
 800f982:	e7f4      	b.n	800f96e <__swsetup_r+0x8e>
 800f984:	2000      	movs	r0, #0
 800f986:	e7f7      	b.n	800f978 <__swsetup_r+0x98>
 800f988:	200000ac 	.word	0x200000ac

0800f98c <_raise_r>:
 800f98c:	291f      	cmp	r1, #31
 800f98e:	b538      	push	{r3, r4, r5, lr}
 800f990:	4605      	mov	r5, r0
 800f992:	460c      	mov	r4, r1
 800f994:	d904      	bls.n	800f9a0 <_raise_r+0x14>
 800f996:	2316      	movs	r3, #22
 800f998:	6003      	str	r3, [r0, #0]
 800f99a:	f04f 30ff 	mov.w	r0, #4294967295
 800f99e:	bd38      	pop	{r3, r4, r5, pc}
 800f9a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9a2:	b112      	cbz	r2, 800f9aa <_raise_r+0x1e>
 800f9a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9a8:	b94b      	cbnz	r3, 800f9be <_raise_r+0x32>
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f000 f830 	bl	800fa10 <_getpid_r>
 800f9b0:	4622      	mov	r2, r4
 800f9b2:	4601      	mov	r1, r0
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9ba:	f000 b817 	b.w	800f9ec <_kill_r>
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d00a      	beq.n	800f9d8 <_raise_r+0x4c>
 800f9c2:	1c59      	adds	r1, r3, #1
 800f9c4:	d103      	bne.n	800f9ce <_raise_r+0x42>
 800f9c6:	2316      	movs	r3, #22
 800f9c8:	6003      	str	r3, [r0, #0]
 800f9ca:	2001      	movs	r0, #1
 800f9cc:	e7e7      	b.n	800f99e <_raise_r+0x12>
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	4798      	blx	r3
 800f9d8:	2000      	movs	r0, #0
 800f9da:	e7e0      	b.n	800f99e <_raise_r+0x12>

0800f9dc <raise>:
 800f9dc:	4b02      	ldr	r3, [pc, #8]	@ (800f9e8 <raise+0xc>)
 800f9de:	4601      	mov	r1, r0
 800f9e0:	6818      	ldr	r0, [r3, #0]
 800f9e2:	f7ff bfd3 	b.w	800f98c <_raise_r>
 800f9e6:	bf00      	nop
 800f9e8:	200000ac 	.word	0x200000ac

0800f9ec <_kill_r>:
 800f9ec:	b538      	push	{r3, r4, r5, lr}
 800f9ee:	4d07      	ldr	r5, [pc, #28]	@ (800fa0c <_kill_r+0x20>)
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	4608      	mov	r0, r1
 800f9f6:	4611      	mov	r1, r2
 800f9f8:	602b      	str	r3, [r5, #0]
 800f9fa:	f7f3 fbd2 	bl	80031a2 <_kill>
 800f9fe:	1c43      	adds	r3, r0, #1
 800fa00:	d102      	bne.n	800fa08 <_kill_r+0x1c>
 800fa02:	682b      	ldr	r3, [r5, #0]
 800fa04:	b103      	cbz	r3, 800fa08 <_kill_r+0x1c>
 800fa06:	6023      	str	r3, [r4, #0]
 800fa08:	bd38      	pop	{r3, r4, r5, pc}
 800fa0a:	bf00      	nop
 800fa0c:	2000442c 	.word	0x2000442c

0800fa10 <_getpid_r>:
 800fa10:	f7f3 bbbf 	b.w	8003192 <_getpid>

0800fa14 <_malloc_usable_size_r>:
 800fa14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa18:	1f18      	subs	r0, r3, #4
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	bfbc      	itt	lt
 800fa1e:	580b      	ldrlt	r3, [r1, r0]
 800fa20:	18c0      	addlt	r0, r0, r3
 800fa22:	4770      	bx	lr

0800fa24 <__swhatbuf_r>:
 800fa24:	b570      	push	{r4, r5, r6, lr}
 800fa26:	460c      	mov	r4, r1
 800fa28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa2c:	2900      	cmp	r1, #0
 800fa2e:	b096      	sub	sp, #88	@ 0x58
 800fa30:	4615      	mov	r5, r2
 800fa32:	461e      	mov	r6, r3
 800fa34:	da0d      	bge.n	800fa52 <__swhatbuf_r+0x2e>
 800fa36:	89a3      	ldrh	r3, [r4, #12]
 800fa38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fa3c:	f04f 0100 	mov.w	r1, #0
 800fa40:	bf14      	ite	ne
 800fa42:	2340      	movne	r3, #64	@ 0x40
 800fa44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fa48:	2000      	movs	r0, #0
 800fa4a:	6031      	str	r1, [r6, #0]
 800fa4c:	602b      	str	r3, [r5, #0]
 800fa4e:	b016      	add	sp, #88	@ 0x58
 800fa50:	bd70      	pop	{r4, r5, r6, pc}
 800fa52:	466a      	mov	r2, sp
 800fa54:	f000 f848 	bl	800fae8 <_fstat_r>
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	dbec      	blt.n	800fa36 <__swhatbuf_r+0x12>
 800fa5c:	9901      	ldr	r1, [sp, #4]
 800fa5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fa62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fa66:	4259      	negs	r1, r3
 800fa68:	4159      	adcs	r1, r3
 800fa6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa6e:	e7eb      	b.n	800fa48 <__swhatbuf_r+0x24>

0800fa70 <__smakebuf_r>:
 800fa70:	898b      	ldrh	r3, [r1, #12]
 800fa72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa74:	079d      	lsls	r5, r3, #30
 800fa76:	4606      	mov	r6, r0
 800fa78:	460c      	mov	r4, r1
 800fa7a:	d507      	bpl.n	800fa8c <__smakebuf_r+0x1c>
 800fa7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fa80:	6023      	str	r3, [r4, #0]
 800fa82:	6123      	str	r3, [r4, #16]
 800fa84:	2301      	movs	r3, #1
 800fa86:	6163      	str	r3, [r4, #20]
 800fa88:	b003      	add	sp, #12
 800fa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa8c:	ab01      	add	r3, sp, #4
 800fa8e:	466a      	mov	r2, sp
 800fa90:	f7ff ffc8 	bl	800fa24 <__swhatbuf_r>
 800fa94:	9f00      	ldr	r7, [sp, #0]
 800fa96:	4605      	mov	r5, r0
 800fa98:	4639      	mov	r1, r7
 800fa9a:	4630      	mov	r0, r6
 800fa9c:	f7ff f914 	bl	800ecc8 <_malloc_r>
 800faa0:	b948      	cbnz	r0, 800fab6 <__smakebuf_r+0x46>
 800faa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faa6:	059a      	lsls	r2, r3, #22
 800faa8:	d4ee      	bmi.n	800fa88 <__smakebuf_r+0x18>
 800faaa:	f023 0303 	bic.w	r3, r3, #3
 800faae:	f043 0302 	orr.w	r3, r3, #2
 800fab2:	81a3      	strh	r3, [r4, #12]
 800fab4:	e7e2      	b.n	800fa7c <__smakebuf_r+0xc>
 800fab6:	89a3      	ldrh	r3, [r4, #12]
 800fab8:	6020      	str	r0, [r4, #0]
 800faba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fabe:	81a3      	strh	r3, [r4, #12]
 800fac0:	9b01      	ldr	r3, [sp, #4]
 800fac2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fac6:	b15b      	cbz	r3, 800fae0 <__smakebuf_r+0x70>
 800fac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800facc:	4630      	mov	r0, r6
 800face:	f000 f81d 	bl	800fb0c <_isatty_r>
 800fad2:	b128      	cbz	r0, 800fae0 <__smakebuf_r+0x70>
 800fad4:	89a3      	ldrh	r3, [r4, #12]
 800fad6:	f023 0303 	bic.w	r3, r3, #3
 800fada:	f043 0301 	orr.w	r3, r3, #1
 800fade:	81a3      	strh	r3, [r4, #12]
 800fae0:	89a3      	ldrh	r3, [r4, #12]
 800fae2:	431d      	orrs	r5, r3
 800fae4:	81a5      	strh	r5, [r4, #12]
 800fae6:	e7cf      	b.n	800fa88 <__smakebuf_r+0x18>

0800fae8 <_fstat_r>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4d07      	ldr	r5, [pc, #28]	@ (800fb08 <_fstat_r+0x20>)
 800faec:	2300      	movs	r3, #0
 800faee:	4604      	mov	r4, r0
 800faf0:	4608      	mov	r0, r1
 800faf2:	4611      	mov	r1, r2
 800faf4:	602b      	str	r3, [r5, #0]
 800faf6:	f7f3 fbb4 	bl	8003262 <_fstat>
 800fafa:	1c43      	adds	r3, r0, #1
 800fafc:	d102      	bne.n	800fb04 <_fstat_r+0x1c>
 800fafe:	682b      	ldr	r3, [r5, #0]
 800fb00:	b103      	cbz	r3, 800fb04 <_fstat_r+0x1c>
 800fb02:	6023      	str	r3, [r4, #0]
 800fb04:	bd38      	pop	{r3, r4, r5, pc}
 800fb06:	bf00      	nop
 800fb08:	2000442c 	.word	0x2000442c

0800fb0c <_isatty_r>:
 800fb0c:	b538      	push	{r3, r4, r5, lr}
 800fb0e:	4d06      	ldr	r5, [pc, #24]	@ (800fb28 <_isatty_r+0x1c>)
 800fb10:	2300      	movs	r3, #0
 800fb12:	4604      	mov	r4, r0
 800fb14:	4608      	mov	r0, r1
 800fb16:	602b      	str	r3, [r5, #0]
 800fb18:	f7f3 fbb3 	bl	8003282 <_isatty>
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	d102      	bne.n	800fb26 <_isatty_r+0x1a>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	b103      	cbz	r3, 800fb26 <_isatty_r+0x1a>
 800fb24:	6023      	str	r3, [r4, #0]
 800fb26:	bd38      	pop	{r3, r4, r5, pc}
 800fb28:	2000442c 	.word	0x2000442c

0800fb2c <_init>:
 800fb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2e:	bf00      	nop
 800fb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb32:	bc08      	pop	{r3}
 800fb34:	469e      	mov	lr, r3
 800fb36:	4770      	bx	lr

0800fb38 <_fini>:
 800fb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3a:	bf00      	nop
 800fb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb3e:	bc08      	pop	{r3}
 800fb40:	469e      	mov	lr, r3
 800fb42:	4770      	bx	lr
